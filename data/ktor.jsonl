{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Ktor Documentation is in ktor?\n\nAssistant: Sure, I'd be happy to explain Ktor Documentation in ktor.\n\n# Ktor Documentation\n\nKtor is a framework for building asynchronous server-side and client-side applications with ease.Here's a quick rundown of what this is about:\n\n## Ktor Server\n\nLearn how to create, run and test a server application with Ktor. This section includes various tutorials on handling requests, creating RESTful APIs, building websites, WebSocket applications, and integrating databases.\n\n## Server configuration\n\nCreate, open and run a new Ktor project. Adding server dependencies, creating a server, configuration in code and in a file, and server plugins.\n\n## Routing\n\nRouting, type-safe routing, application structure, handling requests, sending responses, and serving static content.\n\n## Plugins\n\nContent negotiation and serialization, templating, authentication and authorization, sessions, WebSockets, Server-Sent Events, Swagger UI, OpenAPI, and custom server plugins.\n\n## Run, debug and test\n\nRunning, auto-reload, and testing in Ktor Server.\n\n## Deployment\n\nCreating Fat JARs, WAR, GraalVM, Docker, Google App Engine, and Heroku.\n\n## Ktor Client\n\nCreate a client application with Ktor, including cross-platform mobile applications.\n\n## Client setup\n\nCreate a client application, adding client dependencies, creating and configuring a client, client engines, and client plugins.\n\n## Requests\n\nMaking requests, type-safe requests, default request, and retrying failed requests.\n\n## Responses\n\nReceiving responses and response validation.\n\n## Plugins\n\nAuthentication and authorization, cookies, content encoding, BOM remover, caching, WebSockets, Server-Sent Events, and custom client plugins.\n\n## Testing\n\nTesting in Ktor Client.\n\n## Integrations\n\nFull-stack development with Kotlin Multiplatform and first steps with Kotlin RPC.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "overview", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I ktor server in ktor?\n\nAssistant: To ktor server in ktor, here's what you do:\nLearn how to create, run and test a server application with Ktor. This section includes various tutorials on handling requests, creating RESTful APIs, building websites, WebSocket applications, and integrating databases..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I server configuration in ktor?\n\nAssistant: To server configuration in ktor, here's what you do:\nCreate, open and run a new Ktor project. Adding server dependencies, creating a server, configuration in code and in a file, and server plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I routing in ktor?\n\nAssistant: To routing in ktor, here's what you do:\nRouting, type-safe routing, application structure, handling requests, sending responses, and serving static content..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I plugins in ktor?\n\nAssistant: To plugins in ktor, here's what you do:\nContent negotiation and serialization, templating, authentication and authorization, sessions, WebSockets, Server-Sent Events, Swagger UI, OpenAPI, and custom server plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run, debug and test in ktor?\n\nAssistant: To run, debug and test in ktor, here's what you do:\nRunning, auto-reload, and testing in Ktor Server..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I deployment in ktor?\n\nAssistant: To deployment in ktor, here's what you do:\nCreating Fat JARs, WAR, GraalVM, Docker, Google App Engine, and Heroku..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I ktor client in ktor?\n\nAssistant: To ktor client in ktor, here's what you do:\nCreate a client application with Ktor, including cross-platform mobile applications..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I client setup in ktor?\n\nAssistant: To client setup in ktor, here's what you do:\nCreate a client application, adding client dependencies, creating and configuring a client, client engines, and client plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I requests in ktor?\n\nAssistant: To requests in ktor, here's what you do:\nMaking requests, type-safe requests, default request, and retrying failed requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I responses in ktor?\n\nAssistant: To responses in ktor, here's what you do:\nReceiving responses and response validation..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I plugins in ktor?\n\nAssistant: To plugins in ktor, here's what you do:\nAuthentication and authorization, cookies, content encoding, BOM remover, caching, WebSockets, Server-Sent Events, and custom client plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I testing in ktor?\n\nAssistant: To testing in ktor, here's what you do:\nTesting in Ktor Client..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I integrations in ktor?\n\nAssistant: To integrations in ktor, here's what you do:\nFull-stack development with Kotlin Multiplatform and first steps with Kotlin RPC..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Ktor Documentation in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to follow the tutorials for both server and client applications to get a comprehensive understanding of Ktor.\n\nUtilize the provided links for detailed guides on specific topics.\n\nConsider using Kotlin Multiplatform for cross-platform development.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 02:50:30", "type": "best_practices", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:title": "Welcome | Ktor", "twitter:card": "summary_large_image", "language": "en-US", "built-on": "2025-02-26T14:01:01.932681307", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:title": "Welcome | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Welcome | Ktor", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "title": "Welcome | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "1e61d64f-64a6-423b-a30e-4ceb2c8a5b31", "sourceURL": "https://ktor.io/docs", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Docker is in ktor?\n\nAssistant: Sure, I'd be happy to explain Docker in ktor.\n\n# Docker\n\nIn this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.Here's a quick rundown of what this is about:\n\n## Install the Ktor plugin\n\nTo install the Ktor plugin, add it to the `plugins` block of your `build.gradle.(kts)` file:\n\nGradle (Kotlin)\n\n```\nplugins {\n    id(\"io.ktor.plugin\") version \"3.1.0\"\n}\n```\n\nGradle (Groovy)\n\n```\nplugins {\n    id \"io.ktor.plugin\" version \"3.1.0\"\n}\n```\n\n## Plugin tasks\n\nAfter installing the plugin, the following tasks are available for packaging, running, and deploying applications:\n\n- `buildImage`: builds a project's Docker image to a tarball. This task generates a `jib-image.tar` file in the `build` directory. You can load this image to a Docker daemon using the `docker load` command:\n\n```\ndocker load < build/jib-image.tar\n```\n\n- `publishImageToLocalRegistry`: builds and publishes a project's Docker image to a local registry.\n\n- `runDocker`: builds a project's image to a Docker daemon and runs it. Executing this task will launch the Ktor server, responding on `http://0.0.0.0:8080` by default. If your server is configured to use another port, you can adjust port mapping.\n\n- `publishImage`: builds and publishes a project's Docker image to an external registry such as Docker Hub or Google Container Registry. Note that you need to configure the external registry using the `ktor.docker.externalRegistry` property for this task.\n\nNote that by default, these tasks build the image with the `ktor-docker-image` name and `latest` tag. You can customize these values in the plugin configuration.\n\n## Configure the Ktor plugin\n\nTo configure the Ktor plugin settings related to Docker tasks, use the `ktor.docker` extension in your `build.gradle.(kts)` file:\n\n```\nktor {\n    docker {\n        // ...\n    }\n}\n```\n\n## JRE version\n\nThe `jreVersion` property specifies the JRE version to use in the image:\n\n```\nktor {\n    docker {\n        jreVersion.set(JavaVersion.VERSION_17)\n    }\n}\n```\n\n## Image name and tag\n\nIf you need to customize the image name and tag, use the `localImageName` and `imageTag` properties, respectively:\n\n```\nktor {\n    docker {\n        localImageName.set(\"sample-docker-image\")\n        imageTag.set(\"0.0.1-preview\")\n    }\n}\n```\n\n## Port mapping\n\nBy default, the `runDocker` task publishes the `8080` container port to the `8080` Docker host port. If required, you can change these ports using the `portMappings` property. This might be useful if your server is configured to use another port.\n\nThe example below shows how to map the `8080` container port to the `80` Docker host port.\n\n```\nktor {\n    docker {\n        portMappings.set(listOf(\n            io.ktor.plugin.features.DockerPortMapping(\n                80,\n                8080,\n                io.ktor.plugin.features.DockerPortMappingProtocol.TCP\n            )\n        ))\n    }\n}\n```\n\nIn this case, you can access the server on `http://0.0.0.0:80`.\n\n## External registry\n\nBefore publishing a project's Docker image to an external registry using the `publishImage` task, you need to configure the external registry using the `ktor.docker.externalRegistry` property. This property accepts the `DockerImageRegistry` instance, which provides configuration for the required registry type:\n\n- `DockerImageRegistry.dockerHub`: creates a `DockerImageRegistry` for Docker Hub.\n- `DockerImageRegistry.googleContainerRegistry`: creates a `DockerImageRegistry` for Google Container Registry.\n\nThe example below shows how to configure the Docker Hub registry:\n\n```\nktor {\n    docker {\n        externalRegistry.set(\n            io.ktor.plugin.features.DockerImageRegistry.dockerHub(\n                appName = provider { \"ktor-app\" },\n                username = providers.environmentVariable(\"DOCKER_HUB_USERNAME\"),\n                password = providers.environmentVariable(\"DOCKER_HUB_PASSWORD\")\n            )\n        )\n    }\n}\n```\n\nNote that the Docker Hub name and password are fetched from the environment variables, so you need to set these values before running the `publishImage` task.\n\n## Manual image configuration\n\nIf required, you can provide your own `Dockerfile` to assemble an image with a Ktor application.\n\n### Package the application\nAs a first step, you need to package your application along with its dependencies. For example, this might be a fat JAR or an executable JVM application.\n\n### Prepare Docker image\nTo dockerize the application, we'll use multi-stage builds:\n\n1. First, we'll set up caching for Gradle/Maven dependencies. This step is optional, but recommended as it improves the overall build speed.\n2. Then, we'll use the `gradle`/ `maven` image to generate a fat JAR with the application.\n3. Finally, the generated distribution will be run in the environment created based on the JDK image.\n\nIn the root folder of the project, create a file named `Dockerfile` with the following contents:\n\nGradle\n\n```\n# Stage 1: Cache Gradle dependencies\nFROM gradle:latest AS cache\nRUN mkdir -p /home/gradle/cache_home\nENV GRADLE_USER_HOME=/home/gradle/cache_home\nCOPY build.gradle.* gradle.properties /home/gradle/app/\nCOPY gradle /home/gradle/app/gradle\nWORKDIR /home/gradle/app\nRUN gradle clean build -i --stacktrace\n\n# Stage 2: Build Application\nFROM gradle:latest AS build\nCOPY --from=cache /home/gradle/cache_home /home/gradle/.gradle\nCOPY . /usr/src/app/\nWORKDIR /usr/src/app\nCOPY --chown=gradle:gradle . /home/gradle/src\nWORKDIR /home/gradle/src\n# Build the fat JAR, Gradle also supports shadow\n# and boot JAR by default.\nRUN gradle buildFatJar --no-daemon\n\n# Stage 3: Create the Runtime Image\nFROM amazoncorretto:22 AS runtime\nEXPOSE 8080\nRUN mkdir /app\nCOPY --from=build /home/gradle/src/build/libs/*.jar /app/ktor-docker-sample.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app/ktor-docker-sample.jar\"]\n```\n\nMaven\n\n```\n# Stage 1: Cache Maven dependencies\nFROM maven:3.8-amazoncorretto-21 AS cache\nWORKDIR /app\nCOPY pom.xml .\nRUN mvn dependency:go-offline\n\n# Stage 2: Build Application\nFROM maven:3.8-amazoncorretto-21 AS build\nWORKDIR /app\nCOPY --from=cache /root/.m2 /root/.m2\nCOPY . .\nRUN mvn clean package\n\n# Stage 3: Create the Runtime Image\nFROM amazoncorretto:21-slim AS runtime\nEXPOSE 8080\nWORKDIR /app\nCOPY --from=build /app/target/*-with-dependencies.jar app.jar\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n```\n\nThe first stage ensures dependencies will be re-downloaded only when there is a change to the build related files. If the first stage is not used, or dependencies are not cached in other stages, dependencies will be installed in every build.\n\nIn the second stage the fat JAR is built. Note that Gradle also supports shadow and boot JAR by default.\n\nThe third stage of the build works in the following way:\n\n- Indicates what image is going to be used.\n- Specifies the exposed port (this does not automatically expose the port, which is done when running the container).\n- Copies the contents from the build output to the folder.\n- Runs the application ( `ENTRYPOINT`).\n\n> ### tip\n> This example uses the Amazon Corretto Docker Image, but you can substitute it with any other suitable alternative, such as the following:\n> - Eclipse Temurin\n> - IBM Semeru\n> - IBM Java\n> - SAP Machine JDK\n\n## Build and run the Docker image\n\nThe next step is to build and tag the Docker image:\n\n```\ndocker build -t my-application .\n```\n\nFinally, start the image:\n\n```\ndocker run -p 8080:8080 my-application\n```\n\nThis will launch the Ktor server, responding on `https://0.0.0.0:8080`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "overview", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install the ktor plugin in ktor?\n\nAssistant: To install the ktor plugin in ktor, here's what you do:\nTo install the Ktor plugin, add it to the `plugins` block of your `build.gradle.(kts)` file:\n\nGradle (Kotlin)\n\n```\nplugins {\n    id(\"io.ktor.plugin\") version \"3.1.0\"\n}\n```\n\nGradle (Groovy)\n\n```\nplugins {\n    id \"io.ktor.plugin\" version \"3.1.0\"\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I plugin tasks in ktor?\n\nAssistant: To plugin tasks in ktor, here's what you do:\nAfter installing the plugin, the following tasks are available for packaging, running, and deploying applications:\n\n- `buildImage`: builds a project's Docker image to a tarball. This task generates a `jib-image.tar` file in the `build` directory. You can load this image to a Docker daemon using the `docker load` command:\n\n```\ndocker load < build/jib-image.tar\n```\n\n- `publishImageToLocalRegistry`: builds and publishes a project's Docker image to a local registry.\n\n- `runDocker`: builds a project's image to a Docker daemon and runs it. Executing this task will launch the Ktor server, responding on `http://0.0.0.0:8080` by default. If your server is configured to use another port, you can adjust port mapping.\n\n- `publishImage`: builds and publishes a project's Docker image to an external registry such as Docker Hub or Google Container Registry. Note that you need to configure the external registry using the `ktor.docker.externalRegistry` property for this task.\n\nNote that by default, these tasks build the image with the `ktor-docker-image` name and `latest` tag. You can customize these values in the plugin configuration..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure the ktor plugin in ktor?\n\nAssistant: To configure the ktor plugin in ktor, here's what you do:\nTo configure the Ktor plugin settings related to Docker tasks, use the `ktor.docker` extension in your `build.gradle.(kts)` file:\n\n```\nktor {\n    docker {\n        // ...\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I jre version in ktor?\n\nAssistant: To jre version in ktor, here's what you do:\nThe `jreVersion` property specifies the JRE version to use in the image:\n\n```\nktor {\n    docker {\n        jreVersion.set(JavaVersion.VERSION_17)\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I image name and tag in ktor?\n\nAssistant: To image name and tag in ktor, here's what you do:\nIf you need to customize the image name and tag, use the `localImageName` and `imageTag` properties, respectively:\n\n```\nktor {\n    docker {\n        localImageName.set(\"sample-docker-image\")\n        imageTag.set(\"0.0.1-preview\")\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I port mapping in ktor?\n\nAssistant: To port mapping in ktor, here's what you do:\nBy default, the `runDocker` task publishes the `8080` container port to the `8080` Docker host port. If required, you can change these ports using the `portMappings` property. This might be useful if your server is configured to use another port.\n\nThe example below shows how to map the `8080` container port to the `80` Docker host port.\n\n```\nktor {\n    docker {\n        portMappings.set(listOf(\n            io.ktor.plugin.features.DockerPortMapping(\n                80,\n                8080,\n                io.ktor.plugin.features.DockerPortMappingProtocol.TCP\n            )\n        ))\n    }\n}\n```\n\nIn this case, you can access the server on `http://0.0.0.0:80`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I external registry in ktor?\n\nAssistant: To external registry in ktor, here's what you do:\nBefore publishing a project's Docker image to an external registry using the `publishImage` task, you need to configure the external registry using the `ktor.docker.externalRegistry` property. This property accepts the `DockerImageRegistry` instance, which provides configuration for the required registry type:\n\n- `DockerImageRegistry.dockerHub`: creates a `DockerImageRegistry` for Docker Hub.\n- `DockerImageRegistry.googleContainerRegistry`: creates a `DockerImageRegistry` for Google Container Registry.\n\nThe example below shows how to configure the Docker Hub registry:\n\n```\nktor {\n    docker {\n        externalRegistry.set(\n            io.ktor.plugin.features.DockerImageRegistry.dockerHub(\n                appName = provider { \"ktor-app\" },\n                username = providers.environmentVariable(\"DOCKER_HUB_USERNAME\"),\n                password = providers.environmentVariable(\"DOCKER_HUB_PASSWORD\")\n            )\n        )\n    }\n}\n```\n\nNote that the Docker Hub name and password are fetched from the environment variables, so you need to set these values before running the `publishImage` task..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I manual image configuration in ktor?\n\nAssistant: To manual image configuration in ktor, here's what you do:\nIf required, you can provide your own `Dockerfile` to assemble an image with a Ktor application.\n\n### Package the application\nAs a first step, you need to package your application along with its dependencies. For example, this might be a fat JAR or an executable JVM application.\n\n### Prepare Docker image\nTo dockerize the application, we'll use multi-stage builds:\n\n1. First, we'll set up caching for Gradle/Maven dependencies. This step is optional, but recommended as it improves the overall build speed.\n2. Then, we'll use the `gradle`/ `maven` image to generate a fat JAR with the application.\n3. Finally, the generated distribution will be run in the environment created based on the JDK image.\n\nIn the root folder of the project, create a file named `Dockerfile` with the following contents:\n\nGradle\n\n```\n# Stage 1: Cache Gradle dependencies\nFROM gradle:latest AS cache\nRUN mkdir -p /home/gradle/cache_home\nENV GRADLE_USER_HOME=/home/gradle/cache_home\nCOPY build.gradle.* gradle.properties /home/gradle/app/\nCOPY gradle /home/gradle/app/gradle\nWORKDIR /home/gradle/app\nRUN gradle clean build -i --stacktrace\n\n# Stage 2: Build Application\nFROM gradle:latest AS build\nCOPY --from=cache /home/gradle/cache_home /home/gradle/.gradle\nCOPY . /usr/src/app/\nWORKDIR /usr/src/app\nCOPY --chown=gradle:gradle . /home/gradle/src\nWORKDIR /home/gradle/src\n# Build the fat JAR, Gradle also supports shadow\n# and boot JAR by default.\nRUN gradle buildFatJar --no-daemon\n\n# Stage 3: Create the Runtime Image\nFROM amazoncorretto:22 AS runtime\nEXPOSE 8080\nRUN mkdir /app\nCOPY --from=build /home/gradle/src/build/libs/*.jar /app/ktor-docker-sample.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app/ktor-docker-sample.jar\"]\n```\n\nMaven\n\n```\n# Stage 1: Cache Maven dependencies\nFROM maven:3.8-amazoncorretto-21 AS cache\nWORKDIR /app\nCOPY pom.xml .\nRUN mvn dependency:go-offline\n\n# Stage 2: Build Application\nFROM maven:3.8-amazoncorretto-21 AS build\nWORKDIR /app\nCOPY --from=cache /root/.m2 /root/.m2\nCOPY . .\nRUN mvn clean package\n\n# Stage 3: Create the Runtime Image\nFROM amazoncorretto:21-slim AS runtime\nEXPOSE 8080\nWORKDIR /app\nCOPY --from=build /app/target/*-with-dependencies.jar app.jar\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n```\n\nThe first stage ensures dependencies will be re-downloaded only when there is a change to the build related files. If the first stage is not used, or dependencies are not cached in other stages, dependencies will be installed in every build.\n\nIn the second stage the fat JAR is built. Note that Gradle also supports shadow and boot JAR by default.\n\nThe third stage of the build works in the following way:\n\n- Indicates what image is going to be used.\n- Specifies the exposed port (this does not automatically expose the port, which is done when running the container).\n- Copies the contents from the build output to the folder.\n- Runs the application ( `ENTRYPOINT`).\n\n> ### tip\n> This example uses the Amazon Corretto Docker Image, but you can substitute it with any other suitable alternative, such as the following:\n> - Eclipse Temurin\n> - IBM Semeru\n> - IBM Java\n> - SAP Machine JDK.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I build and run the docker image in ktor?\n\nAssistant: To build and run the docker image in ktor, here's what you do:\nThe next step is to build and tag the Docker image:\n\n```\ndocker build -t my-application .\n```\n\nFinally, start the image:\n\n```\ndocker run -p 8080:8080 my-application\n```\n\nThis will launch the Ktor server, responding on `https://0.0.0.0:8080`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "section_detail", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Docker in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install the Ktor plugin**:\n\n```yaml\n```\nplugins {\n    id(\"io.ktor.plugin\") version \"3.1.0\"\n}\n```\n```\n\nThis snippet shows you how to install the ktor plugin, which is an important aspect of docker.\n\n**Install the Ktor plugin (Groovy)**:\n\n```yaml\n```\nplugins {\n    id \"io.ktor.plugin\" version \"3.1.0\"\n}\n```\n```\n\nThis snippet shows you how to install the ktor plugin (groovy), which is an important aspect of docker.\n\n**Load Docker image**:\n\n```yaml\n```\ndocker load < build/jib-image.tar\n```\n```\n\nThis snippet shows you how to load docker image, which is an important aspect of docker.\n\n**Configure JRE version**:\n\n```yaml\n```\nktor {\n    docker {\n        jreVersion.set(JavaVersion.VERSION_17)\n    }\n}\n```\n```\n\nThis snippet shows you how to configure jre version, which is an important aspect of docker.\n\n**Customize image name and tag**:\n\n```yaml\n```\nktor {\n    docker {\n        localImageName.set(\"sample-docker-image\")\n        imageTag.set(\"0.0.1-preview\")\n    }\n}\n```\n```\n\nThis snippet shows you how to customize image name and tag, which is an important aspect of docker.\n\n**Port mapping example**:\n\n```yaml\n```\nktor {\n    docker {\n        portMappings.set(listOf(\n            io.ktor.plugin.features.DockerPortMapping(\n                80,\n                8080,\n                io.ktor.plugin.features.DockerPortMappingProtocol.TCP\n            )\n        ))\n    }\n}\n```\n```\n\nThis snippet shows you how to port mapping example, which is an important aspect of docker.\n\n**Configure Docker Hub registry**:\n\n```yaml\n```\nktor {\n    docker {\n        externalRegistry.set(\n            io.ktor.plugin.features.DockerImageRegistry.dockerHub(\n                appName = provider { \"ktor-app\" },\n                username = providers.environmentVariable(\"DOCKER_HUB_USERNAME\"),\n                password = providers.environmentVariable(\"DOCKER_HUB_PASSWORD\")\n            )\n        )\n    }\n}\n```\n```\n\nThis snippet shows you how to configure docker hub registry, which is an important aspect of docker.\n\n**Dockerfile for Gradle**:\n\n```yaml\n```\n# Stage 1: Cache Gradle dependencies\nFROM gradle:latest AS cache\nRUN mkdir -p /home/gradle/cache_home\nENV GRADLE_USER_HOME=/home/gradle/cache_home\nCOPY build.gradle.* gradle.properties /home/gradle/app/\nCOPY gradle /home/gradle/app/gradle\nWORKDIR /home/gradle/app\nRUN gradle clean build -i --stacktrace\n\n# Stage 2: Build Application\nFROM gradle:latest AS build\nCOPY --from=cache /home/gradle/cache_home /home/gradle/.gradle\nCOPY . /usr/src/app/\nWORKDIR /usr/src/app\nCOPY --chown=gradle:gradle . /home/gradle/src\nWORKDIR /home/gradle/src\n# Build the fat JAR, Gradle also supports shadow\n# and boot JAR by default.\nRUN gradle buildFatJar --no-daemon\n\n# Stage 3: Create the Runtime Image\nFROM amazoncorretto:22 AS runtime\nEXPOSE 8080\nRUN mkdir /app\nCOPY --from=build /home/gradle/src/build/libs/*.jar /app/ktor-docker-sample.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app/ktor-docker-sample.jar\"]\n```\n```\n\nThis snippet shows you how to dockerfile for gradle, which is an important aspect of docker.\n\n**Dockerfile for Maven**:\n\n```yaml\n```\n# Stage 1: Cache Maven dependencies\nFROM maven:3.8-amazoncorretto-21 AS cache\nWORKDIR /app\nCOPY pom.xml .\nRUN mvn dependency:go-offline\n\n# Stage 2: Build Application\nFROM maven:3.8-amazoncorretto-21 AS build\nWORKDIR /app\nCOPY --from=cache /root/.m2 /root/.m2\nCOPY . .\nRUN mvn clean package\n\n# Stage 3: Create the Runtime Image\nFROM amazoncorretto:21-slim AS runtime\nEXPOSE 8080\nWORKDIR /app\nCOPY --from=build /app/target/*-with-dependencies.jar app.jar\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n```\n```\n\nThis snippet shows you how to dockerfile for maven, which is an important aspect of docker.\n\n**Build Docker image**:\n\n```yaml\n```\ndocker build -t my-application .\n```\n```\n\nThis snippet shows you how to build docker image, which is an important aspect of docker.\n\n**Run Docker image**:\n\n```yaml\n```\ndocker run -p 8080:8080 my-application\n```\n```\n\nThis snippet shows you how to run docker image, which is an important aspect of docker.\n\n", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "code_examples", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Docker in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThis example uses the Amazon Corretto Docker Image, but you can substitute it with any other suitable alternative, such as the following: Eclipse Temurin, IBM Semeru, IBM Java, SAP Machine JDK.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/docker.html", "title": "Docker", "description": "In this section, we'll see how to use the Ktor Gradle plugin for packaging, running, and deploying applications using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 02:52:15", "type": "best_practices", "page_metadata": {"language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\nLearn how to deploy a Ktor application to a Docker container, which can then be run either locally or on your cloud provider of choice.\n", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Docker | Ktor", "ogDescription": "", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/docker.html", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Docker | Ktor", "og:description": "", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/docker.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.405402469", "ogSiteName": "Ktor Help", "title": "Docker | Ktor Documentation", "og:title": "Docker | Ktor", "scrapeId": "5fa54043-e943-4278-a91c-d59062369479", "sourceURL": "https://ktor.io/docs/docker.html", "url": "https://ktor.io/docs/docker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what GraalVM is in ktor?\n\nAssistant: Sure, I'd be happy to explain GraalVM in ktor.\n\n# GraalVM\n\nKtor Server applications can make use of GraalVM in order to have native images for different platforms, and of course, take advantage of the faster start-up times and other benefits that GraalVM provides.Here's a quick rundown of what this is about:\n\n## Prepare for GraalVM\n\nIn addition to installing GraalVM and having the installation directory in the system path, you need to prepare your application so that all dependencies are bundled, i.e. you need to create a fat jar.\n\n## Reflection configuration\n\nGraalVM has some requirements when it comes to applications that use reflection, which is the case of Ktor. It requires that you provide it a JSON file with certain type information. This configuration file is then passed as an argument to the native-image tool.\n\n## Execute the `native-image` tool\n\nOnce the fat jar is ready, the only step required is to create the native image using the `native-image` CLI tool. This could be also done by Gradle plugin. You can see the example of the build.gradle.kts file here. However, please note that some options may vary depending on the dependencies being used, the package name of your project, etc.\n\n## Run the resulting binary\n\nIf the shell script executes without any errors, you should obtain a native application, which in the case of the sample is called `graal-server`. Executing it will launch the Ktor Server, responding on https://0.0.0.0:8080.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/graalvm.html", "title": "GraalVM", "description": "Ktor Server applications can make use of GraalVM in order to have native images for different platforms, and of course, take advantage of the faster start-up times and other benefits that GraalVM provides.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:52:54", "type": "overview", "page_metadata": {"twitter:title": "GraalVM | Ktor", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "language": "en-US", "ogTitle": "GraalVM | Ktor", "built-on": "2025-02-26T14:01:04.364682477", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/graalvm.html", "twitter:card": "summary_large_image", "build-number": "707", "ogSiteName": "Ktor Help", "title": "GraalVM | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "description": "\nKtor Server applications can make use of GraalVM in order to have native images for different platforms.\n", "og:title": "GraalVM | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/graalvm.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:site_name": "Ktor Help", "scrapeId": "5285553e-7382-4e37-be95-31b7ed94d9be", "sourceURL": "https://ktor.io/docs/graalvm.html", "url": "https://ktor.io/docs/graalvm.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prepare for graalvm in ktor?\n\nAssistant: To prepare for graalvm in ktor, here's what you do:\nIn addition to installing GraalVM and having the installation directory in the system path, you need to prepare your application so that all dependencies are bundled, i.e. you need to create a fat jar..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/graalvm.html", "title": "GraalVM", "description": "Ktor Server applications can make use of GraalVM in order to have native images for different platforms, and of course, take advantage of the faster start-up times and other benefits that GraalVM provides.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:52:54", "type": "section_detail", "page_metadata": {"twitter:title": "GraalVM | Ktor", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "language": "en-US", "ogTitle": "GraalVM | Ktor", "built-on": "2025-02-26T14:01:04.364682477", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/graalvm.html", "twitter:card": "summary_large_image", "build-number": "707", "ogSiteName": "Ktor Help", "title": "GraalVM | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "description": "\nKtor Server applications can make use of GraalVM in order to have native images for different platforms.\n", "og:title": "GraalVM | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/graalvm.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:site_name": "Ktor Help", "scrapeId": "5285553e-7382-4e37-be95-31b7ed94d9be", "sourceURL": "https://ktor.io/docs/graalvm.html", "url": "https://ktor.io/docs/graalvm.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I reflection configuration in ktor?\n\nAssistant: To reflection configuration in ktor, here's what you do:\nGraalVM has some requirements when it comes to applications that use reflection, which is the case of Ktor. It requires that you provide it a JSON file with certain type information. This configuration file is then passed as an argument to the native-image tool..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/graalvm.html", "title": "GraalVM", "description": "Ktor Server applications can make use of GraalVM in order to have native images for different platforms, and of course, take advantage of the faster start-up times and other benefits that GraalVM provides.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:52:54", "type": "section_detail", "page_metadata": {"twitter:title": "GraalVM | Ktor", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "language": "en-US", "ogTitle": "GraalVM | Ktor", "built-on": "2025-02-26T14:01:04.364682477", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/graalvm.html", "twitter:card": "summary_large_image", "build-number": "707", "ogSiteName": "Ktor Help", "title": "GraalVM | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "description": "\nKtor Server applications can make use of GraalVM in order to have native images for different platforms.\n", "og:title": "GraalVM | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/graalvm.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:site_name": "Ktor Help", "scrapeId": "5285553e-7382-4e37-be95-31b7ed94d9be", "sourceURL": "https://ktor.io/docs/graalvm.html", "url": "https://ktor.io/docs/graalvm.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I execute the `native-image` tool in ktor?\n\nAssistant: To execute the `native-image` tool in ktor, here's what you do:\nOnce the fat jar is ready, the only step required is to create the native image using the `native-image` CLI tool. This could be also done by Gradle plugin. You can see the example of the build.gradle.kts file here. However, please note that some options may vary depending on the dependencies being used, the package name of your project, etc..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/graalvm.html", "title": "GraalVM", "description": "Ktor Server applications can make use of GraalVM in order to have native images for different platforms, and of course, take advantage of the faster start-up times and other benefits that GraalVM provides.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:52:54", "type": "section_detail", "page_metadata": {"twitter:title": "GraalVM | Ktor", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "language": "en-US", "ogTitle": "GraalVM | Ktor", "built-on": "2025-02-26T14:01:04.364682477", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/graalvm.html", "twitter:card": "summary_large_image", "build-number": "707", "ogSiteName": "Ktor Help", "title": "GraalVM | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "description": "\nKtor Server applications can make use of GraalVM in order to have native images for different platforms.\n", "og:title": "GraalVM | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/graalvm.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:site_name": "Ktor Help", "scrapeId": "5285553e-7382-4e37-be95-31b7ed94d9be", "sourceURL": "https://ktor.io/docs/graalvm.html", "url": "https://ktor.io/docs/graalvm.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run the resulting binary in ktor?\n\nAssistant: To run the resulting binary in ktor, here's what you do:\nIf the shell script executes without any errors, you should obtain a native application, which in the case of the sample is called `graal-server`. Executing it will launch the Ktor Server, responding on https://0.0.0.0:8080..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/graalvm.html", "title": "GraalVM", "description": "Ktor Server applications can make use of GraalVM in order to have native images for different platforms, and of course, take advantage of the faster start-up times and other benefits that GraalVM provides.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:52:54", "type": "section_detail", "page_metadata": {"twitter:title": "GraalVM | Ktor", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "language": "en-US", "ogTitle": "GraalVM | Ktor", "built-on": "2025-02-26T14:01:04.364682477", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/graalvm.html", "twitter:card": "summary_large_image", "build-number": "707", "ogSiteName": "Ktor Help", "title": "GraalVM | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "description": "\nKtor Server applications can make use of GraalVM in order to have native images for different platforms.\n", "og:title": "GraalVM | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/graalvm.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:site_name": "Ktor Help", "scrapeId": "5285553e-7382-4e37-be95-31b7ed94d9be", "sourceURL": "https://ktor.io/docs/graalvm.html", "url": "https://ktor.io/docs/graalvm.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for GraalVM in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Reflection configuration JSON file**:\n\n```yaml\n{\"reflection-config\": [{\"name\": \"com.example.MyClass\", \"allDeclaredFields\": true, \"allDeclaredMethods\": true}]}\n```\n\nThis snippet shows you how to reflection configuration json file, which is an important aspect of graalvm.\n\n", "metadata": {"source_url": "https://ktor.io/docs/graalvm.html", "title": "GraalVM", "description": "Ktor Server applications can make use of GraalVM in order to have native images for different platforms, and of course, take advantage of the faster start-up times and other benefits that GraalVM provides.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:52:54", "type": "code_examples", "page_metadata": {"twitter:title": "GraalVM | Ktor", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "language": "en-US", "ogTitle": "GraalVM | Ktor", "built-on": "2025-02-26T14:01:04.364682477", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/graalvm.html", "twitter:card": "summary_large_image", "build-number": "707", "ogSiteName": "Ktor Help", "title": "GraalVM | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "description": "\nKtor Server applications can make use of GraalVM in order to have native images for different platforms.\n", "og:title": "GraalVM | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/graalvm.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:site_name": "Ktor Help", "scrapeId": "5285553e-7382-4e37-be95-31b7ed94d9be", "sourceURL": "https://ktor.io/docs/graalvm.html", "url": "https://ktor.io/docs/graalvm.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using GraalVM in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure GraalVM is installed and in the system path.\n\nCreate a fat jar for your application.\n\nProvide a JSON file for reflection configuration when using reflection.\n\nUse the native-image CLI tool or Gradle plugin to create the native image.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/graalvm.html", "title": "GraalVM", "description": "Ktor Server applications can make use of GraalVM in order to have native images for different platforms, and of course, take advantage of the faster start-up times and other benefits that GraalVM provides.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:52:54", "type": "best_practices", "page_metadata": {"twitter:title": "GraalVM | Ktor", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "language": "en-US", "ogTitle": "GraalVM | Ktor", "built-on": "2025-02-26T14:01:04.364682477", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/graalvm.html", "twitter:card": "summary_large_image", "build-number": "707", "ogSiteName": "Ktor Help", "title": "GraalVM | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "description": "\nKtor Server applications can make use of GraalVM in order to have native images for different platforms.\n", "og:title": "GraalVM | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/graalvm.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:site_name": "Ktor Help", "scrapeId": "5285553e-7382-4e37-be95-31b7ed94d9be", "sourceURL": "https://ktor.io/docs/graalvm.html", "url": "https://ktor.io/docs/graalvm.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Testing in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Testing in Ktor Client in ktor.\n\n# Testing in Ktor Client\n\nThis page covers how to test Ktor clients using the MockEngine to simulate HTTP calls without connecting to the endpoint.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nBefore using `MockEngine`, you need to include the `ktor-client-mock` artifact in the build script.\n\nGradle (Kotlin)\n\n```\ntestImplementation(\"io.ktor:ktor-client-mock:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\ntestImplementation \"io.ktor:ktor-client-mock:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-mock-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Usage\n\n### Share client configuration\n\nLet's see how to use `MockEngine` to test a client. Suppose the client has the following configuration:\n\n- The `CIO` [engine](https://ktor.io/docs/client-engines.html) is used to make requests.\n- The [Json](https://ktor.io/docs/client-serialization.html) plugin is installed to deserialize incoming JSON data.\n\nTo test this client, its configuration needs to be shared with a test client, which uses `MockEngine`. To share a configuration, you can create a client wrapper class that takes an engine as a constructor parameter and contains a client configuration.\n\n```\n@Serializable\ndata class IpResponse(val ip: String)\n\nclass ApiClient(engine: HttpClientEngine) {\n    private val httpClient = HttpClient(engine) {\n        install(ContentNegotiation) {\n            json()\n        }\n    }\n\n    suspend fun getIp(): IpResponse = httpClient.get(\"https://api.ipify.org/?format=json\").body()\n}\n```\n\nThen, you can use the `ApiClient` as follows to create an HTTP client with the `CIO` engine and make a request.\n\n```\nfun main() {\n    runBlocking {\n        val client = ApiClient(CIO.create())\n        val response = client.getIp()\n        println(response.ip)\n    }\n}\n```\n\n### Test a client\n\nTo test a client, you need to create a `MockEngine` instance with a handler that can check request parameters and respond with the required content (a JSON object in our case).\n\n```\nval mockEngine = MockEngine { request ->\n    respond(\n        content = ByteReadChannel(\"\"\"{\"ip\":\"127.0.0.1\"}\"\"\"),\n        status = HttpStatusCode.OK,\n        headers = headersOf(HttpHeaders.ContentType, \"application/json\")\n    )\n}\n```\n\nThen, you can pass the created `MockEngine` to initialize `ApiClient` and make required assertions.\n\n```\nclass ApiClientTest {\n    @Test\n    fun sampleClientTest() {\n        runBlocking {\n            val mockEngine = MockEngine { request ->\n                respond(\n                    content = ByteReadChannel(\"\"\"{\"ip\":\"127.0.0.1\"}\"\"\"),\n                    status = HttpStatusCode.OK,\n                    headers = headersOf(HttpHeaders.ContentType, \"application/json\")\n                )\n            }\n            val apiClient = ApiClient(mockEngine)\n\n            Assert.assertEquals(\"127.0.0.1\", apiClient.getIp().ip)\n        }\n    }\n}\n```\n\nYou can find the full example here: [client-testing-mock](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-testing-mock).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-testing.html", "title": "Testing in Ktor Client", "description": "This page covers how to test Ktor clients using the MockEngine to simulate HTTP calls without connecting to the endpoint.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:53:13", "type": "overview", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:title": "Testing in Ktor Client | Ktor", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Testing in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-testing.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.951334652", "ogUrl": "https://ktor.io/docs/3.1.1/client-testing.html", "description": "\nKtor provides a MockEngine that simulates HTTP calls without connecting to the endpoint.\n", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Testing in Ktor Client | Ktor Documentation", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Testing in Ktor Client | Ktor", "ogDescription": "", "og:description": "", "scrapeId": "81e9b705-9021-4bb8-bc08-9786952cb7ca", "sourceURL": "https://ktor.io/docs/client-testing.html", "url": "https://ktor.io/docs/client-testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nBefore using `MockEngine`, you need to include the `ktor-client-mock` artifact in the build script.\n\nGradle (Kotlin)\n\n```\ntestImplementation(\"io.ktor:ktor-client-mock:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\ntestImplementation \"io.ktor:ktor-client-mock:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-mock-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-testing.html", "title": "Testing in Ktor Client", "description": "This page covers how to test Ktor clients using the MockEngine to simulate HTTP calls without connecting to the endpoint.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:53:13", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:title": "Testing in Ktor Client | Ktor", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Testing in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-testing.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.951334652", "ogUrl": "https://ktor.io/docs/3.1.1/client-testing.html", "description": "\nKtor provides a MockEngine that simulates HTTP calls without connecting to the endpoint.\n", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Testing in Ktor Client | Ktor Documentation", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Testing in Ktor Client | Ktor", "ogDescription": "", "og:description": "", "scrapeId": "81e9b705-9021-4bb8-bc08-9786952cb7ca", "sourceURL": "https://ktor.io/docs/client-testing.html", "url": "https://ktor.io/docs/client-testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I usage in ktor?\n\nAssistant: To usage in ktor, here's what you do:\n### Share client configuration\n\nLet's see how to use `MockEngine` to test a client. Suppose the client has the following configuration:\n\n- The `CIO` [engine](https://ktor.io/docs/client-engines.html) is used to make requests.\n- The [Json](https://ktor.io/docs/client-serialization.html) plugin is installed to deserialize incoming JSON data.\n\nTo test this client, its configuration needs to be shared with a test client, which uses `MockEngine`. To share a configuration, you can create a client wrapper class that takes an engine as a constructor parameter and contains a client configuration.\n\n```\n@Serializable\ndata class IpResponse(val ip: String)\n\nclass ApiClient(engine: HttpClientEngine) {\n    private val httpClient = HttpClient(engine) {\n        install(ContentNegotiation) {\n            json()\n        }\n    }\n\n    suspend fun getIp(): IpResponse = httpClient.get(\"https://api.ipify.org/?format=json\").body()\n}\n```\n\nThen, you can use the `ApiClient` as follows to create an HTTP client with the `CIO` engine and make a request.\n\n```\nfun main() {\n    runBlocking {\n        val client = ApiClient(CIO.create())\n        val response = client.getIp()\n        println(response.ip)\n    }\n}\n```\n\n### Test a client\n\nTo test a client, you need to create a `MockEngine` instance with a handler that can check request parameters and respond with the required content (a JSON object in our case).\n\n```\nval mockEngine = MockEngine { request ->\n    respond(\n        content = ByteReadChannel(\"\"\"{\"ip\":\"127.0.0.1\"}\"\"\"),\n        status = HttpStatusCode.OK,\n        headers = headersOf(HttpHeaders.ContentType, \"application/json\")\n    )\n}\n```\n\nThen, you can pass the created `MockEngine` to initialize `ApiClient` and make required assertions.\n\n```\nclass ApiClientTest {\n    @Test\n    fun sampleClientTest() {\n        runBlocking {\n            val mockEngine = MockEngine { request ->\n                respond(\n                    content = ByteReadChannel(\"\"\"{\"ip\":\"127.0.0.1\"}\"\"\"),\n                    status = HttpStatusCode.OK,\n                    headers = headersOf(HttpHeaders.ContentType, \"application/json\")\n                )\n            }\n            val apiClient = ApiClient(mockEngine)\n\n            Assert.assertEquals(\"127.0.0.1\", apiClient.getIp().ip)\n        }\n    }\n}\n```\n\nYou can find the full example here: [client-testing-mock](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-testing-mock)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-testing.html", "title": "Testing in Ktor Client", "description": "This page covers how to test Ktor clients using the MockEngine to simulate HTTP calls without connecting to the endpoint.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:53:13", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:title": "Testing in Ktor Client | Ktor", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Testing in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-testing.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.951334652", "ogUrl": "https://ktor.io/docs/3.1.1/client-testing.html", "description": "\nKtor provides a MockEngine that simulates HTTP calls without connecting to the endpoint.\n", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Testing in Ktor Client | Ktor Documentation", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Testing in Ktor Client | Ktor", "ogDescription": "", "og:description": "", "scrapeId": "81e9b705-9021-4bb8-bc08-9786952cb7ca", "sourceURL": "https://ktor.io/docs/client-testing.html", "url": "https://ktor.io/docs/client-testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Testing in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\ntestImplementation(\"io.ktor:ktor-client-mock:$ktor_version\")\n\ntestImplementation \"io.ktor:ktor-client-mock:$ktor_version\"\n\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-mock-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of testing in ktor client.\n\n**Share client configuration**:\n\n```yaml\n@Serializable\ndata class IpResponse(val ip: String)\n\nclass ApiClient(engine: HttpClientEngine) {\n    private val httpClient = HttpClient(engine) {\n        install(ContentNegotiation) {\n            json()\n        }\n    }\n\n    suspend fun getIp(): IpResponse = httpClient.get(\"https://api.ipify.org/?format=json\").body()\n}\n```\n\nThis snippet shows you how to share client configuration, which is an important aspect of testing in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-testing.html", "title": "Testing in Ktor Client", "description": "This page covers how to test Ktor clients using the MockEngine to simulate HTTP calls without connecting to the endpoint.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:53:13", "type": "code_examples", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:title": "Testing in Ktor Client | Ktor", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Testing in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-testing.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.951334652", "ogUrl": "https://ktor.io/docs/3.1.1/client-testing.html", "description": "\nKtor provides a MockEngine that simulates HTTP calls without connecting to the endpoint.\n", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Testing in Ktor Client | Ktor Documentation", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Testing in Ktor Client | Ktor", "ogDescription": "", "og:description": "", "scrapeId": "81e9b705-9021-4bb8-bc08-9786952cb7ca", "sourceURL": "https://ktor.io/docs/client-testing.html", "url": "https://ktor.io/docs/client-testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Testing in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to include the required dependencies in your build script before using MockEngine.\n\nUse a client wrapper class to share configuration between the test client and the actual client.\n\nCreate a MockEngine instance with a handler to simulate HTTP responses for testing.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-testing.html", "title": "Testing in Ktor Client", "description": "This page covers how to test Ktor clients using the MockEngine to simulate HTTP calls without connecting to the endpoint.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 02:53:13", "type": "best_practices", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:title": "Testing in Ktor Client | Ktor", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Testing in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-testing.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.951334652", "ogUrl": "https://ktor.io/docs/3.1.1/client-testing.html", "description": "\nKtor provides a MockEngine that simulates HTTP calls without connecting to the endpoint.\n", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Testing in Ktor Client | Ktor Documentation", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Testing in Ktor Client | Ktor", "ogDescription": "", "og:description": "", "scrapeId": "81e9b705-9021-4bb8-bc08-9786952cb7ca", "sourceURL": "https://ktor.io/docs/client-testing.html", "url": "https://ktor.io/docs/client-testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Google App Engine is in ktor?\n\nAssistant: Sure, I'd be happy to explain Google App Engine in ktor.\n\n# Google App Engine\n\nIn this tutorial, we'll show you how to prepare and deploy a Ktor project to a Google App Engine standard environment.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nBefore starting this tutorial, you need to perform the steps below:\n\n- Register in [Google Cloud Platform](https://console.cloud.google.com/).\n\n- Install and initialize the [Google Cloud SDK](https://cloud.google.com/sdk/docs/install).\n\n- Install the App Engine extension for Java with the following command:\n\n```\ngcloud components install app-engine-java\n```\n\n## Clone a sample application\n\nTo open a sample application, follow the steps below:\n\n1. Clone a Ktor documentation repository and open the [codeSnippets](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets) project.\n\n2. Open the [engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main) module.\n\n> ### tip\n>\n> Note that Ktor provides two approaches to [create and configure a server](https://ktor.io/docs/server-create-and-configure.html): in code or by using a configuration file. In this tutorial, deploying process is the same for both approaches.\n\n## Prepare an application\n\n### Step 1: Apply the Shadow plugin\n\nThis tutorial shows how to deploy the application to Google App Engine using a [fat JAR](https://ktor.io/docs/server-fatjar.html). To generate fat JARs, you need to apply the Shadow plugin. Open the `build.gradle.kts` file and add the plugin to the `plugins` block:\n\n```\nplugins {\n    id(\"com.gradleup.shadow\") version \"8.3.1\"\n}\n```\n\n### Step 2: Configure the App Engine plugin\n\nThe [Google App Engine Gradle plugin](https://github.com/GoogleCloudPlatform/app-gradle-plugin) provides tasks to build and deploy Google App Engine applications. To use this plugin, follow the steps below:\n\n1. Open the `settings.gradle.kts` file and insert the following code to reference a plugin from the Central Maven repository:\n\n```\npluginManagement {\n       repositories {\n           gradlePluginPortal()\n           mavenCentral()\n           maven(\"https://maven.pkg.jetbrains.space/public/p/ktor/eap\")\n       }\n       resolutionStrategy {\n           eachPlugin {\n               if (requested.id.id.startsWith(\"com.google.cloud.tools.appengine\")) {\n                   useModule(\"com.google.cloud.tools:appengine-gradle-plugin:${requested.version}\")\n               }\n           }\n       }\n}\n```\n\n2. Open `build.gradle.kts` and apply the plugin in the `plugins` block:\n\n```\nplugins {\n       id(\"com.google.cloud.tools.appengine\") version \"2.8.0\"\n}\n```\n\n3. Add the `appengine` block with the following settings in the `build.gradle.kts` file:\n\n```\nimport com.google.cloud.tools.gradle.appengine.appyaml.AppEngineAppYamlExtension\n\nconfigure<AppEngineAppYamlExtension> {\n       stage {\n           setArtifact(\"build/libs/${project.name}-all.jar\")\n       }\n       deploy {\n           version = \"GCLOUD_CONFIG\"\n           projectId = \"GCLOUD_CONFIG\"\n       }\n}\n```\n\n### Step 3: Configure App Engine settings\n\nYou configure App Engine settings for your application in the [app.yaml](https://cloud.google.com/appengine/docs/standard/python/config/appref) file:\n\n1. Create the `appengine` directory inside `src/main`.\n\n2. Inside this directory, create the `app.yaml` file and add the following content (replace `google-appengine-standard` with your project's name):\n\n```\nruntime: java21\nentrypoint: 'java -jar google-appengine-standard-all.jar'\n```\n\nThe `entrypoint` option contains a command used to run a fat JAR generated for the application.\n\nFurther documentation on supported configuration options can be found from the [Google AppEngine documentation](https://cloud.google.com/appengine/docs/standard/reference/app-yaml?tab=java).\n\n## Deploy an application\n\nTo deploy the application, open the terminal and follow the steps below:\n\n1. First, create a Google Cloud project, which is a top-level container holding application resources. For example, the command below creates a project with the `ktor-sample-app-engine` name:\n\n```\ngcloud projects create ktor-sample-app-engine --set-as-default\n```\n\n2. Create an App Engine application for the Cloud project:\n\n```\ngcloud app create\n```\n\n3. To deploy the application, execute the `appengineDeploy` Gradle task...\n\n```\n./gradlew appengineDeploy\n```\n\n... and wait until Google Cloud builds and publishes the application:\n\n```\n...done.\nDeployed service [default] to [https://ktor-sample-app-engine.ew.r.appspot.com]\n```\n\n> ### tip\n>\n> If you receive `Cloud Build has not been used in project` error during the build, enable it by using instructions from an error report.\n\nYou can find the completed example here: [google-appengine-standard](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/google-appengine-standard).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/google-app-engine.html", "title": "Google App Engine", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor project to a Google App Engine standard environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:54:44", "type": "overview", "page_metadata": {"language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:description": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "Google App Engine | Ktor", "title": "Google App Engine | Ktor Documentation", "ogDescription": "", "twitter:title": "Google App Engine | Ktor", "ogTitle": "Google App Engine | Ktor", "built-on": "2025-02-26T14:01:04.610509359", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\nThis tutorial shows how to prepare and deploy a Ktor project to a Google App Engine standard environment.\n", "og:site_name": "Ktor Help", "twitter:description": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "149639ee-322b-42d4-bc4f-98c93173a100", "sourceURL": "https://ktor.io/docs/google-app-engine.html", "url": "https://ktor.io/docs/google-app-engine.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nBefore starting this tutorial, you need to perform the steps below:\n\n- Register in [Google Cloud Platform](https://console.cloud.google.com/).\n\n- Install and initialize the [Google Cloud SDK](https://cloud.google.com/sdk/docs/install).\n\n- Install the App Engine extension for Java with the following command:\n\n```\ngcloud components install app-engine-java\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/google-app-engine.html", "title": "Google App Engine", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor project to a Google App Engine standard environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:54:44", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:description": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "Google App Engine | Ktor", "title": "Google App Engine | Ktor Documentation", "ogDescription": "", "twitter:title": "Google App Engine | Ktor", "ogTitle": "Google App Engine | Ktor", "built-on": "2025-02-26T14:01:04.610509359", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\nThis tutorial shows how to prepare and deploy a Ktor project to a Google App Engine standard environment.\n", "og:site_name": "Ktor Help", "twitter:description": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "149639ee-322b-42d4-bc4f-98c93173a100", "sourceURL": "https://ktor.io/docs/google-app-engine.html", "url": "https://ktor.io/docs/google-app-engine.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I clone a sample application in ktor?\n\nAssistant: To clone a sample application in ktor, here's what you do:\nTo open a sample application, follow the steps below:\n\n1. Clone a Ktor documentation repository and open the [codeSnippets](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets) project.\n\n2. Open the [engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main) module.\n\n> ### tip\n>\n> Note that Ktor provides two approaches to [create and configure a server](https://ktor.io/docs/server-create-and-configure.html): in code or by using a configuration file. In this tutorial, deploying process is the same for both approaches..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/google-app-engine.html", "title": "Google App Engine", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor project to a Google App Engine standard environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:54:44", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:description": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "Google App Engine | Ktor", "title": "Google App Engine | Ktor Documentation", "ogDescription": "", "twitter:title": "Google App Engine | Ktor", "ogTitle": "Google App Engine | Ktor", "built-on": "2025-02-26T14:01:04.610509359", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\nThis tutorial shows how to prepare and deploy a Ktor project to a Google App Engine standard environment.\n", "og:site_name": "Ktor Help", "twitter:description": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "149639ee-322b-42d4-bc4f-98c93173a100", "sourceURL": "https://ktor.io/docs/google-app-engine.html", "url": "https://ktor.io/docs/google-app-engine.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prepare an application in ktor?\n\nAssistant: To prepare an application in ktor, here's what you do:\n### Step 1: Apply the Shadow plugin\n\nThis tutorial shows how to deploy the application to Google App Engine using a [fat JAR](https://ktor.io/docs/server-fatjar.html). To generate fat JARs, you need to apply the Shadow plugin. Open the `build.gradle.kts` file and add the plugin to the `plugins` block:\n\n```\nplugins {\n    id(\"com.gradleup.shadow\") version \"8.3.1\"\n}\n```\n\n### Step 2: Configure the App Engine plugin\n\nThe [Google App Engine Gradle plugin](https://github.com/GoogleCloudPlatform/app-gradle-plugin) provides tasks to build and deploy Google App Engine applications. To use this plugin, follow the steps below:\n\n1. Open the `settings.gradle.kts` file and insert the following code to reference a plugin from the Central Maven repository:\n\n```\npluginManagement {\n       repositories {\n           gradlePluginPortal()\n           mavenCentral()\n           maven(\"https://maven.pkg.jetbrains.space/public/p/ktor/eap\")\n       }\n       resolutionStrategy {\n           eachPlugin {\n               if (requested.id.id.startsWith(\"com.google.cloud.tools.appengine\")) {\n                   useModule(\"com.google.cloud.tools:appengine-gradle-plugin:${requested.version}\")\n               }\n           }\n       }\n}\n```\n\n2. Open `build.gradle.kts` and apply the plugin in the `plugins` block:\n\n```\nplugins {\n       id(\"com.google.cloud.tools.appengine\") version \"2.8.0\"\n}\n```\n\n3. Add the `appengine` block with the following settings in the `build.gradle.kts` file:\n\n```\nimport com.google.cloud.tools.gradle.appengine.appyaml.AppEngineAppYamlExtension\n\nconfigure<AppEngineAppYamlExtension> {\n       stage {\n           setArtifact(\"build/libs/${project.name}-all.jar\")\n       }\n       deploy {\n           version = \"GCLOUD_CONFIG\"\n           projectId = \"GCLOUD_CONFIG\"\n       }\n}\n```\n\n### Step 3: Configure App Engine settings\n\nYou configure App Engine settings for your application in the [app.yaml](https://cloud.google.com/appengine/docs/standard/python/config/appref) file:\n\n1. Create the `appengine` directory inside `src/main`.\n\n2. Inside this directory, create the `app.yaml` file and add the following content (replace `google-appengine-standard` with your project's name):\n\n```\nruntime: java21\nentrypoint: 'java -jar google-appengine-standard-all.jar'\n```\n\nThe `entrypoint` option contains a command used to run a fat JAR generated for the application.\n\nFurther documentation on supported configuration options can be found from the [Google AppEngine documentation](https://cloud.google.com/appengine/docs/standard/reference/app-yaml?tab=java)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/google-app-engine.html", "title": "Google App Engine", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor project to a Google App Engine standard environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:54:44", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:description": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "Google App Engine | Ktor", "title": "Google App Engine | Ktor Documentation", "ogDescription": "", "twitter:title": "Google App Engine | Ktor", "ogTitle": "Google App Engine | Ktor", "built-on": "2025-02-26T14:01:04.610509359", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\nThis tutorial shows how to prepare and deploy a Ktor project to a Google App Engine standard environment.\n", "og:site_name": "Ktor Help", "twitter:description": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "149639ee-322b-42d4-bc4f-98c93173a100", "sourceURL": "https://ktor.io/docs/google-app-engine.html", "url": "https://ktor.io/docs/google-app-engine.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I deploy an application in ktor?\n\nAssistant: To deploy an application in ktor, here's what you do:\nTo deploy the application, open the terminal and follow the steps below:\n\n1. First, create a Google Cloud project, which is a top-level container holding application resources. For example, the command below creates a project with the `ktor-sample-app-engine` name:\n\n```\ngcloud projects create ktor-sample-app-engine --set-as-default\n```\n\n2. Create an App Engine application for the Cloud project:\n\n```\ngcloud app create\n```\n\n3. To deploy the application, execute the `appengineDeploy` Gradle task...\n\n```\n./gradlew appengineDeploy\n```\n\n... and wait until Google Cloud builds and publishes the application:\n\n```\n...done.\nDeployed service [default] to [https://ktor-sample-app-engine.ew.r.appspot.com]\n```\n\n> ### tip\n>\n> If you receive `Cloud Build has not been used in project` error during the build, enable it by using instructions from an error report.\n\nYou can find the completed example here: [google-appengine-standard](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/google-appengine-standard)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/google-app-engine.html", "title": "Google App Engine", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor project to a Google App Engine standard environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:54:44", "type": "section_detail", "page_metadata": {"language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:description": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "Google App Engine | Ktor", "title": "Google App Engine | Ktor Documentation", "ogDescription": "", "twitter:title": "Google App Engine | Ktor", "ogTitle": "Google App Engine | Ktor", "built-on": "2025-02-26T14:01:04.610509359", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\nThis tutorial shows how to prepare and deploy a Ktor project to a Google App Engine standard environment.\n", "og:site_name": "Ktor Help", "twitter:description": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "149639ee-322b-42d4-bc4f-98c93173a100", "sourceURL": "https://ktor.io/docs/google-app-engine.html", "url": "https://ktor.io/docs/google-app-engine.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Google App Engine in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install App Engine extension for Java**:\n\n```yaml\ngcloud components install app-engine-java\n```\n\nThis snippet shows you how to install app engine extension for java, which is an important aspect of google app engine.\n\n**Apply the Shadow plugin**:\n\n```yaml\nplugins {\n    id(\"com.gradleup.shadow\") version \"8.3.1\"\n}\n```\n\nThis snippet shows you how to apply the shadow plugin, which is an important aspect of google app engine.\n\n", "metadata": {"source_url": "https://ktor.io/docs/google-app-engine.html", "title": "Google App Engine", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor project to a Google App Engine standard environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:54:44", "type": "code_examples", "page_metadata": {"language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:description": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "Google App Engine | Ktor", "title": "Google App Engine | Ktor Documentation", "ogDescription": "", "twitter:title": "Google App Engine | Ktor", "ogTitle": "Google App Engine | Ktor", "built-on": "2025-02-26T14:01:04.610509359", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\nThis tutorial shows how to prepare and deploy a Ktor project to a Google App Engine standard environment.\n", "og:site_name": "Ktor Help", "twitter:description": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "149639ee-322b-42d4-bc4f-98c93173a100", "sourceURL": "https://ktor.io/docs/google-app-engine.html", "url": "https://ktor.io/docs/google-app-engine.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Google App Engine in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNote that Ktor provides two approaches to create and configure a server: in code or by using a configuration file. In this tutorial, deploying process is the same for both approaches.\n\nIf you receive `Cloud Build has not been used in project` error during the build, enable it by using instructions from an error report.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/google-app-engine.html", "title": "Google App Engine", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor project to a Google App Engine standard environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 02:54:44", "type": "best_practices", "page_metadata": {"language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/google-app-engine.html", "og:description": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "Google App Engine | Ktor", "title": "Google App Engine | Ktor Documentation", "ogDescription": "", "twitter:title": "Google App Engine | Ktor", "ogTitle": "Google App Engine | Ktor", "built-on": "2025-02-26T14:01:04.610509359", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\nThis tutorial shows how to prepare and deploy a Ktor project to a Google App Engine standard environment.\n", "og:site_name": "Ktor Help", "twitter:description": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "149639ee-322b-42d4-bc4f-98c93173a100", "sourceURL": "https://ktor.io/docs/google-app-engine.html", "url": "https://ktor.io/docs/google-app-engine.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Integrate a database with Kotlin, Ktor, and Exposed is in ktor?\n\nAssistant: Sure, I'd be happy to explain Integrate a database with Kotlin, Ktor, and Exposed in ktor.\n\n# Integrate a database with Kotlin, Ktor, and Exposed\n\nThis article teaches how to integrate Ktor services with relational databases using Exposed, the SQL library for Kotlin.Here's a quick rundown of what this is about:\n\n## Introduction\n\nIn this article, you will learn how to integrate your Ktor services with relational databases using Exposed, the SQL library for Kotlin. By the end of this tutorial, you’ll learn how to do the following:\n\n- Create RESTful services that use JSON serialization.\n- Inject different repositories into these services.\n- Create unit tests for your services using fake repositories.\n- Build working repositories using Exposed and Dependency Injection (DI).\n- Deploy services that access external databases.\n\n## Prerequisites\n\nYou can do this tutorial independently, however, we recommend that you complete the Create RESTful APIs tutorial to get familiar with Content Negotiation and REST. We recommend that you install IntelliJ IDEA, but you could use another IDE of your choice.\n\n## Create a RESTful service and an in-memory repository\n\nFirst, you will recreate your Task Manager RESTful service. Initially, this will use an in-memory repository, but you will structure a design that allows it to be substituted with minimal effort. You will do this in six stages:\n\n1. Create the initial project.\n2. Add starter code.\n3. Add the CRUD routes.\n4. Add a Single Page Application (SPA).\n5. Test the application manually.\n6. Add automated tests.\n\n## Create a new project with plugins\n\nTo create a new project with the Ktor Project Generator, follow the steps below:\n\n1. Navigate to the Ktor Project Generator.\n2. In the Project artifact field, enter com.example.ktor-exposed-task-app as the name of your project artifact.\n3. In the plugins section search for and add the following plugins by clicking on the Add button:\n   - Routing\n   - Content Negotiation\n   - Kotlinx.serialization\n   - Static Content\n   - Status Pages\n   - Exposed\n   - Postgres\n4. Once you have added the plugins, click on the 7 plugins button at the top right of the plugins section to see the added plugins.\n5. Click the Download button to generate and download your Ktor project.\n6. Open the generated project in IntelliJ IDEA or another IDE of your choice.\n7. Navigate to src/main/kotlin/com/example and delete the files CitySchema.kt and UsersSchema.kt.\n8. Open the Databases.kt file and remove the content of the configureDatabases() function.\n\n## Add starter code\n\n1. Navigate to src/main/kotlin/com/example and create a subpackage called model.\n2. Inside the model package, create a new Task.kt file.\n3. Open Task.kt and add an enum to represent priorities and a class to represent tasks.\n\n```kotlin\npackage com.example.model\n\nimport kotlinx.serialization.Serializable\n\nenum class Priority {\n       Low, Medium, High, Vital\n}\n\n@Serializable\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```\n\n4. In the model subpackage, create a new TaskRepository.kt file.\n5. Open TaskRepository.kt and add the following interface:\n\n```kotlin\npackage com.example.model\n\ninterface TaskRepository {\n       fun allTasks(): List<Task>\n       fun tasksByPriority(priority: Priority): List<Task>\n       fun taskByName(name: String): Task?\n       fun addTask(task: Task)\n       fun removeTask(name: String): Boolean\n}\n```\n\n6. Create a new FakeTaskRepository.kt file inside the same directory.\n7. Open FakeTaskRepository.kt and add the following class:\n\n```kotlin\npackage com.example.model\n\nclass FakeTaskRepository : TaskRepository {\n       private val tasks = mutableListOf(\n           Task(\"cleaning\", \"Clean the house\", Priority.Low),\n           Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n           Task(\"shopping\", \"Buy the groceries\", Priority.High),\n           Task(\"painting\", \"Paint the fence\", Priority.Medium)\n       )\n\n       override fun allTasks(): List<Task> = tasks\n\n       override fun tasksByPriority(priority: Priority) = tasks.filter {\n           it.priority == priority\n       }\n\n       override fun taskByName(name: String) = tasks.find {\n           it.name.equals(name, ignoreCase = true)\n       }\n\n       override fun addTask(task: Task) {\n           if (taskByName(task.name) != null) {\n               throw IllegalStateException(\"Cannot duplicate task names!\")\n           }\n           tasks.add(task)\n       }\n\n       override fun removeTask(name: String): Boolean {\n           return tasks.removeIf { it.name == name }\n       }\n}\n```},{\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-integrate-database.html", "title": "Integrate a database with Kotlin, Ktor, and Exposed", "description": "This article teaches how to integrate Ktor services with relational databases using Exposed, the SQL library for Kotlin.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:57:26", "type": "overview", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogTitle": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "built-on": "2025-02-26T14:01:04.663369646", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor Documentation", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "description": "\n        Learn how to use Kotlin and Ktor to build a single-page application (SPA) in which RESTful services link to\n        database repositories. It uses the Exposed SQL library and allows you to fake repositories for testing.\n    ", "og:site_name": "Ktor Help", "og:locale": "en_US", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "twitter:card": "summary_large_image", "scrapeId": "0a601dc0-cca9-499a-b2ae-24ec38cff4e0", "sourceURL": "https://ktor.io/docs/server-integrate-database.html", "url": "https://ktor.io/docs/server-integrate-database.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I introduction in ktor?\n\nAssistant: To introduction in ktor, here's what you do:\nIn this article, you will learn how to integrate your Ktor services with relational databases using Exposed, the SQL library for Kotlin. By the end of this tutorial, you’ll learn how to do the following:\n\n- Create RESTful services that use JSON serialization.\n- Inject different repositories into these services.\n- Create unit tests for your services using fake repositories.\n- Build working repositories using Exposed and Dependency Injection (DI).\n- Deploy services that access external databases..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-integrate-database.html", "title": "Integrate a database with Kotlin, Ktor, and Exposed", "description": "This article teaches how to integrate Ktor services with relational databases using Exposed, the SQL library for Kotlin.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:57:26", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogTitle": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "built-on": "2025-02-26T14:01:04.663369646", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor Documentation", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "description": "\n        Learn how to use Kotlin and Ktor to build a single-page application (SPA) in which RESTful services link to\n        database repositories. It uses the Exposed SQL library and allows you to fake repositories for testing.\n    ", "og:site_name": "Ktor Help", "og:locale": "en_US", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "twitter:card": "summary_large_image", "scrapeId": "0a601dc0-cca9-499a-b2ae-24ec38cff4e0", "sourceURL": "https://ktor.io/docs/server-integrate-database.html", "url": "https://ktor.io/docs/server-integrate-database.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nYou can do this tutorial independently, however, we recommend that you complete the Create RESTful APIs tutorial to get familiar with Content Negotiation and REST. We recommend that you install IntelliJ IDEA, but you could use another IDE of your choice..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-integrate-database.html", "title": "Integrate a database with Kotlin, Ktor, and Exposed", "description": "This article teaches how to integrate Ktor services with relational databases using Exposed, the SQL library for Kotlin.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:57:26", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogTitle": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "built-on": "2025-02-26T14:01:04.663369646", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor Documentation", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "description": "\n        Learn how to use Kotlin and Ktor to build a single-page application (SPA) in which RESTful services link to\n        database repositories. It uses the Exposed SQL library and allows you to fake repositories for testing.\n    ", "og:site_name": "Ktor Help", "og:locale": "en_US", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "twitter:card": "summary_large_image", "scrapeId": "0a601dc0-cca9-499a-b2ae-24ec38cff4e0", "sourceURL": "https://ktor.io/docs/server-integrate-database.html", "url": "https://ktor.io/docs/server-integrate-database.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a restful service and an in-memory repository in ktor?\n\nAssistant: To create a restful service and an in-memory repository in ktor, here's what you do:\nFirst, you will recreate your Task Manager RESTful service. Initially, this will use an in-memory repository, but you will structure a design that allows it to be substituted with minimal effort. You will do this in six stages:\n\n1. Create the initial project.\n2. Add starter code.\n3. Add the CRUD routes.\n4. Add a Single Page Application (SPA).\n5. Test the application manually.\n6. Add automated tests..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-integrate-database.html", "title": "Integrate a database with Kotlin, Ktor, and Exposed", "description": "This article teaches how to integrate Ktor services with relational databases using Exposed, the SQL library for Kotlin.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:57:26", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogTitle": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "built-on": "2025-02-26T14:01:04.663369646", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor Documentation", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "description": "\n        Learn how to use Kotlin and Ktor to build a single-page application (SPA) in which RESTful services link to\n        database repositories. It uses the Exposed SQL library and allows you to fake repositories for testing.\n    ", "og:site_name": "Ktor Help", "og:locale": "en_US", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "twitter:card": "summary_large_image", "scrapeId": "0a601dc0-cca9-499a-b2ae-24ec38cff4e0", "sourceURL": "https://ktor.io/docs/server-integrate-database.html", "url": "https://ktor.io/docs/server-integrate-database.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a new project with plugins in ktor?\n\nAssistant: To create a new project with plugins in ktor, here's what you do:\nTo create a new project with the Ktor Project Generator, follow the steps below:\n\n1. Navigate to the Ktor Project Generator.\n2. In the Project artifact field, enter com.example.ktor-exposed-task-app as the name of your project artifact.\n3. In the plugins section search for and add the following plugins by clicking on the Add button:\n   - Routing\n   - Content Negotiation\n   - Kotlinx.serialization\n   - Static Content\n   - Status Pages\n   - Exposed\n   - Postgres\n4. Once you have added the plugins, click on the 7 plugins button at the top right of the plugins section to see the added plugins.\n5. Click the Download button to generate and download your Ktor project.\n6. Open the generated project in IntelliJ IDEA or another IDE of your choice.\n7. Navigate to src/main/kotlin/com/example and delete the files CitySchema.kt and UsersSchema.kt.\n8. Open the Databases.kt file and remove the content of the configureDatabases() function..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-integrate-database.html", "title": "Integrate a database with Kotlin, Ktor, and Exposed", "description": "This article teaches how to integrate Ktor services with relational databases using Exposed, the SQL library for Kotlin.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:57:26", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogTitle": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "built-on": "2025-02-26T14:01:04.663369646", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor Documentation", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "description": "\n        Learn how to use Kotlin and Ktor to build a single-page application (SPA) in which RESTful services link to\n        database repositories. It uses the Exposed SQL library and allows you to fake repositories for testing.\n    ", "og:site_name": "Ktor Help", "og:locale": "en_US", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "twitter:card": "summary_large_image", "scrapeId": "0a601dc0-cca9-499a-b2ae-24ec38cff4e0", "sourceURL": "https://ktor.io/docs/server-integrate-database.html", "url": "https://ktor.io/docs/server-integrate-database.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add starter code in ktor?\n\nAssistant: To add starter code in ktor, here's what you do:\n1. Navigate to src/main/kotlin/com/example and create a subpackage called model.\n2. Inside the model package, create a new Task.kt file.\n3. Open Task.kt and add an enum to represent priorities and a class to represent tasks.\n\n```kotlin\npackage com.example.model\n\nimport kotlinx.serialization.Serializable\n\nenum class Priority {\n       Low, Medium, High, Vital\n}\n\n@Serializable\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```\n\n4. In the model subpackage, create a new TaskRepository.kt file.\n5. Open TaskRepository.kt and add the following interface:\n\n```kotlin\npackage com.example.model\n\ninterface TaskRepository {\n       fun allTasks(): List<Task>\n       fun tasksByPriority(priority: Priority): List<Task>\n       fun taskByName(name: String): Task?\n       fun addTask(task: Task)\n       fun removeTask(name: String): Boolean\n}\n```\n\n6. Create a new FakeTaskRepository.kt file inside the same directory.\n7. Open FakeTaskRepository.kt and add the following class:\n\n```kotlin\npackage com.example.model\n\nclass FakeTaskRepository : TaskRepository {\n       private val tasks = mutableListOf(\n           Task(\"cleaning\", \"Clean the house\", Priority.Low),\n           Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n           Task(\"shopping\", \"Buy the groceries\", Priority.High),\n           Task(\"painting\", \"Paint the fence\", Priority.Medium)\n       )\n\n       override fun allTasks(): List<Task> = tasks\n\n       override fun tasksByPriority(priority: Priority) = tasks.filter {\n           it.priority == priority\n       }\n\n       override fun taskByName(name: String) = tasks.find {\n           it.name.equals(name, ignoreCase = true)\n       }\n\n       override fun addTask(task: Task) {\n           if (taskByName(task.name) != null) {\n               throw IllegalStateException(\"Cannot duplicate task names!\")\n           }\n           tasks.add(task)\n       }\n\n       override fun removeTask(name: String): Boolean {\n           return tasks.removeIf { it.name == name }\n       }\n}\n```},{.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-integrate-database.html", "title": "Integrate a database with Kotlin, Ktor, and Exposed", "description": "This article teaches how to integrate Ktor services with relational databases using Exposed, the SQL library for Kotlin.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:57:26", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogTitle": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "built-on": "2025-02-26T14:01:04.663369646", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor Documentation", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "description": "\n        Learn how to use Kotlin and Ktor to build a single-page application (SPA) in which RESTful services link to\n        database repositories. It uses the Exposed SQL library and allows you to fake repositories for testing.\n    ", "og:site_name": "Ktor Help", "og:locale": "en_US", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "twitter:card": "summary_large_image", "scrapeId": "0a601dc0-cca9-499a-b2ae-24ec38cff4e0", "sourceURL": "https://ktor.io/docs/server-integrate-database.html", "url": "https://ktor.io/docs/server-integrate-database.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Integrate a database with Kotlin, Ktor, and Exposed in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure Databases**:\n\n```yaml\nfun Application.configureDatabases() {\n}\n```\n\nThis snippet shows you how to configure databases, which is an important aspect of integrate a database with kotlin, ktor, and exposed.\n\n**Task Class**:\n\n```yaml\npackage com.example.model\n\nimport kotlinx.serialization.Serializable\n\nenum class Priority {\n       Low, Medium, High, Vital\n}\n\n@Serializable\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```\n\nThis snippet shows you how to task class, which is an important aspect of integrate a database with kotlin, ktor, and exposed.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-integrate-database.html", "title": "Integrate a database with Kotlin, Ktor, and Exposed", "description": "This article teaches how to integrate Ktor services with relational databases using Exposed, the SQL library for Kotlin.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:57:26", "type": "code_examples", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogTitle": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "built-on": "2025-02-26T14:01:04.663369646", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor Documentation", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "description": "\n        Learn how to use Kotlin and Ktor to build a single-page application (SPA) in which RESTful services link to\n        database repositories. It uses the Exposed SQL library and allows you to fake repositories for testing.\n    ", "og:site_name": "Ktor Help", "og:locale": "en_US", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "twitter:card": "summary_large_image", "scrapeId": "0a601dc0-cca9-499a-b2ae-24ec38cff4e0", "sourceURL": "https://ktor.io/docs/server-integrate-database.html", "url": "https://ktor.io/docs/server-integrate-database.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Integrate a database with Kotlin, Ktor, and Exposed in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor more information on PostgreSQL, refer to the official documentation.\n\nIn IntelliJ IDEA, you can then make use of the Database Tools to connect to and manage your PostgreSQL database.\n\nFor more information, see working with Database and DataSource in Exposed.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-integrate-database.html", "title": "Integrate a database with Kotlin, Ktor, and Exposed", "description": "This article teaches how to integrate Ktor services with relational databases using Exposed, the SQL library for Kotlin.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 02:57:26", "type": "best_practices", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogTitle": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor", "built-on": "2025-02-26T14:01:04.663369646", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "title": "Integrate a database with Kotlin, Ktor, and Exposed | Ktor Documentation", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "description": "\n        Learn how to use Kotlin and Ktor to build a single-page application (SPA) in which RESTful services link to\n        database repositories. It uses the Exposed SQL library and allows you to fake repositories for testing.\n    ", "og:site_name": "Ktor Help", "og:locale": "en_US", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-integrate-database.html", "twitter:card": "summary_large_image", "scrapeId": "0a601dc0-cca9-499a-b2ae-24ec38cff4e0", "sourceURL": "https://ktor.io/docs/server-integrate-database.html", "url": "https://ktor.io/docs/server-integrate-database.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Create a website in Kotlin with Ktor is in ktor?\n\nAssistant: Sure, I'd be happy to explain Create a website in Kotlin with Ktor in ktor.\n\n# Create a website in Kotlin with Ktor\n\nIn this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nYou can do this tutorial independently, however, we strongly recommend that you complete the preceding tutorial to learn how to create RESTful APIs.\n\nWe recommend that you install IntelliJ IDEA, but you could use another IDE of your choice.\n\n## Hello Task Manager Web Application\n\nIn this tutorial, you'll transform the Task Manager you built in the previous tutorial into a Web Application. To do this, you'll use several Ktor plugins.\n\nWhile you could manually add these plugins to your existing project, it’s easier to generate a new project and gradually incorporate code from the previous tutorial. We'll provide all the necessary code along the way, so you don’t need to have the previous projects to hand.\n\n## Create the initial project with plugins\n\n1. Navigate to the Ktor Project Generator.\n\n2. In the Project artifact field, enter com.example.ktor-task-web-app as the name of your project artifact.\n\n3. In the next screen, search for and add the following plugins by clicking on the Add button:\n   - Routing\n   - Static Content\n   - Thymeleaf\n\n4. Click the Download button to generate and download your Ktor project.\n\n## Add starter code\n\n01. Open your project in IntelliJ IDEA or another IDE of your choice.\n\n02. Navigate to src/main/kotlin/com/example and create a subpackage called model.\n\n03. Inside the model package, create a new Task.kt file.\n\n04. In the Task.kt file, add an enum to represent priorities and a data class to represent tasks:\n\n    ```\n    enum class Priority {\n        Low, Medium, High, Vital\n    }\n\n    data class Task(\n        val name: String,\n        val description: String,\n        val priority: Priority\n    )\n    ```\n\n05. Open the Templating.kt file within the plugins package.\n\n06. In the configureTemplating() method, add a route for /tasks as shown below:\n\n    ```\n    fun Application.configureTemplating() {\n        install(Thymeleaf) {\n            setTemplateResolver(ClassLoaderTemplateResolver().apply {\n                prefix = \"templates/thymeleaf/\"\n                suffix = \".html\"\n                characterEncoding = \"utf-8\"\n            })\n        }\n        routing {\n            get(\"/html-thymeleaf\") {\n                call.respond(ThymeleafContent(\n                    \"index\",\n                    mapOf(\"user\" to ThymeleafUser(1, \"user1\"))\n                ))\n            }\n            //this is the additional route to add\n            get(\"/tasks\") {\n                val tasks = listOf(\n                    Task(\"cleaning\", \"Clean the house\", Priority.Low),\n                    Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n                    Task(\"shopping\", \"Buy the groceries\", Priority.High),\n                    Task(\"painting\", \"Paint the fence\", Priority.Medium)\n                )\n                call.respond(ThymeleafContent(\"all-tasks\", mapOf(\"tasks\" to tasks)))\n            }\n        }\n    }\n    ```\n\n07. Navigate to src/main/resources/templates/thymeleaf and create a new all-tasks.html file.\n\n08. Open the all-tasks.html file and add the content below:\n\n    ```\n    <!DOCTYPE html >\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>All Current Tasks</title>\n    </head>\n    <body>\n    <h1>All Current Tasks</h1>\n    <table>\n        <thead>\n        <tr>\n            <th>Name</th><th>Description</th><th>Priority</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr th:each=\"task: ${tasks}\">\n            <td th:text=\"${task.name}\"></td>\n            <td th:text=\"${task.description}\"></td>\n            <td th:text=\"${task.priority}\"></td>\n        </tr>\n        </tbody>\n    </table>\n    </body>\n    </html>\n    ```\n\n09. In IntelliJ IDEA, click on the run button to start the application.\n\n10. Navigate to http://0.0.0.0:8080/tasks in your browser. You should see all current tasks displayed in a table.\n\n## Add the GET routes\n\nNow that you're familiar with the process of requesting a server page, continue with transferring the functionality from the previous tutorials into this one.\n\nBecause you included the Static Content plugin, the following code will be present in the Routing.kt file:\n\n```\nstaticResources(\"/static\", \"static\")\n```\n\nThis means that, for example, a request to `/static/index.hml` will be served content from the following path:\n\n`src/main/resources/static/index.html`\n\n### Reuse the index page\n\n1. Open the index.html file within src/resources/static and replace its contents with the implementation below:\n\n```\n<html>\n<head>\n</head>\n<body>\n<h1>Task Manager Web Application</h1>\n<div>\n       <h3><a href=\"/tasks\">View all the tasks</a></h3>\n</div>\n<div>\n       <h3>View tasks by priority</h3>\n       <form method=\"get\" action=\"/tasks/byPriority\">\n           <select name=\"priority\">\n               <option name=\"Low\">Low</option>\n               <option name=\"Medium\">Medium</option>\n               <option name=\"High\">High</option>\n               <option name=\"Vital\">Vital</option>\n           </select>\n           <input type=\"submit\">\n       </form>\n</div>\n<div>\n       <h3>View a task by name</h3>\n       <form method=\"get\" action=\"/tasks/byName\">\n           <input type=\"text\" name=\"name\" width=\"10\">\n           <input type=\"submit\">\n       </form>\n</div>\n<div>\n       <h3>Create or edit a task</h3>\n       <form method=\"post\" action=\"/tasks\">\n           <div>\n               <label for=\"name\">Name: </label>\n               <input type=\"text\" id=\"name\" name=\"name\" size=\"10\">\n           </div>\n           <div>\n               <label for=\"description\">Description: </label>\n               <input type=\"text\" id=\"description\"\n                      name=\"description\" size=\"20\">\n           </div>\n           <div>\n               <label for=\"priority\">Priority: </label>\n               <select id=\"priority\" name=\"priority\">\n                   <option name=\"Low\">Low</option>\n                   <option name=\"Medium\">Medium</option>\n                   <option name=\"High\">High</option>\n                   <option name=\"Vital\">Vital</option>\n               </select>\n           </div>\n           <input type=\"submit\">\n       </form>\n</div>\n</body>\n</html>\n```\n\n2. In IntelliJ IDEA, click the rerun button to restart the application.\n\n3. Navigate to http://localhost:8080/static/index.html in your browser. You should see a link button and three HTML forms that allow you to view, filter and create tasks.\n\n## Reuse the TaskRepository\n\nThe repository for tasks can remain identical to the one from the previous tutorial.\n\nInside the model package create a new TaskRepository.kt file and add the code below:\n\n```\nobject TaskRepository {\n    private val tasks = mutableListOf(\n        Task(\"cleaning\", \"Clean the house\", Priority.Low),\n        Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n        Task(\"shopping\", \"Buy the groceries\", Priority.High),\n        Task(\"painting\", \"Paint the fence\", Priority.Medium)\n    )\n\n    fun allTasks(): List<Task> = tasks\n\n    fun tasksByPriority(priority: Priority) = tasks.filter {\n        it.priority == priority\n    }\n\n    fun taskByName(name: String) = tasks.find {\n        it.name.equals(name, ignoreCase = true)\n    }\n\n    fun addTask(task: Task) {\n        if (taskByName(task.name) != null) {\n            throw IllegalStateException(\"Cannot duplicate task names!\")\n        }\n        tasks.add(task)\n    }\n}\n```\n\n### Reuse routes for GET requests\n\nNow that you have created the repository, you can implement the routes for GET requests.\n\n## Add support for POST requests\n\nNext, you will add a POST request handler to `/tasks` to do the following:\n\n- Extract the information from the form parameters.\n- Add a new task using the repository.\n- Display tasks by reusing the all-tasks template.\n\n## Next steps\n\nCongratulations! You have now completed rebuilding your Task Manager as a web application and learned how to utilize Thymeleaf templates.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-create-website.html", "title": "Create a website in Kotlin with Ktor", "description": "In this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:18", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a website in Kotlin with Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-website.html", "description": "\n        Learn how to build websites with Ktor and Kotlin. This tutorial shows you how to combine Thymeleaf templates\n        with Ktor routes to generate HTML-based user interfaces on the server side.\n    ", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Create a website in Kotlin with Ktor | Ktor", "ogLocale": "en_US", "og:title": "Create a website in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "twitter:title": "Create a website in Kotlin with Ktor | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.25258476", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-create-website.html", "scrapeId": "1e5314d4-ed98-4934-a07d-5a5d6562c665", "sourceURL": "https://ktor.io/docs/server-create-website.html", "url": "https://ktor.io/docs/server-create-website.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nYou can do this tutorial independently, however, we strongly recommend that you complete the preceding tutorial to learn how to create RESTful APIs.\n\nWe recommend that you install IntelliJ IDEA, but you could use another IDE of your choice..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-website.html", "title": "Create a website in Kotlin with Ktor", "description": "In this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a website in Kotlin with Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-website.html", "description": "\n        Learn how to build websites with Ktor and Kotlin. This tutorial shows you how to combine Thymeleaf templates\n        with Ktor routes to generate HTML-based user interfaces on the server side.\n    ", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Create a website in Kotlin with Ktor | Ktor", "ogLocale": "en_US", "og:title": "Create a website in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "twitter:title": "Create a website in Kotlin with Ktor | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.25258476", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-create-website.html", "scrapeId": "1e5314d4-ed98-4934-a07d-5a5d6562c665", "sourceURL": "https://ktor.io/docs/server-create-website.html", "url": "https://ktor.io/docs/server-create-website.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I hello task manager web application in ktor?\n\nAssistant: To hello task manager web application in ktor, here's what you do:\nIn this tutorial, you'll transform the Task Manager you built in the previous tutorial into a Web Application. To do this, you'll use several Ktor plugins.\n\nWhile you could manually add these plugins to your existing project, it’s easier to generate a new project and gradually incorporate code from the previous tutorial. We'll provide all the necessary code along the way, so you don’t need to have the previous projects to hand..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-website.html", "title": "Create a website in Kotlin with Ktor", "description": "In this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a website in Kotlin with Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-website.html", "description": "\n        Learn how to build websites with Ktor and Kotlin. This tutorial shows you how to combine Thymeleaf templates\n        with Ktor routes to generate HTML-based user interfaces on the server side.\n    ", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Create a website in Kotlin with Ktor | Ktor", "ogLocale": "en_US", "og:title": "Create a website in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "twitter:title": "Create a website in Kotlin with Ktor | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.25258476", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-create-website.html", "scrapeId": "1e5314d4-ed98-4934-a07d-5a5d6562c665", "sourceURL": "https://ktor.io/docs/server-create-website.html", "url": "https://ktor.io/docs/server-create-website.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create the initial project with plugins in ktor?\n\nAssistant: To create the initial project with plugins in ktor, here's what you do:\n1. Navigate to the Ktor Project Generator.\n\n2. In the Project artifact field, enter com.example.ktor-task-web-app as the name of your project artifact.\n\n3. In the next screen, search for and add the following plugins by clicking on the Add button:\n   - Routing\n   - Static Content\n   - Thymeleaf\n\n4. Click the Download button to generate and download your Ktor project..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-website.html", "title": "Create a website in Kotlin with Ktor", "description": "In this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a website in Kotlin with Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-website.html", "description": "\n        Learn how to build websites with Ktor and Kotlin. This tutorial shows you how to combine Thymeleaf templates\n        with Ktor routes to generate HTML-based user interfaces on the server side.\n    ", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Create a website in Kotlin with Ktor | Ktor", "ogLocale": "en_US", "og:title": "Create a website in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "twitter:title": "Create a website in Kotlin with Ktor | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.25258476", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-create-website.html", "scrapeId": "1e5314d4-ed98-4934-a07d-5a5d6562c665", "sourceURL": "https://ktor.io/docs/server-create-website.html", "url": "https://ktor.io/docs/server-create-website.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add starter code in ktor?\n\nAssistant: To add starter code in ktor, here's what you do:\n01. Open your project in IntelliJ IDEA or another IDE of your choice.\n\n02. Navigate to src/main/kotlin/com/example and create a subpackage called model.\n\n03. Inside the model package, create a new Task.kt file.\n\n04. In the Task.kt file, add an enum to represent priorities and a data class to represent tasks:\n\n    ```\n    enum class Priority {\n        Low, Medium, High, Vital\n    }\n\n    data class Task(\n        val name: String,\n        val description: String,\n        val priority: Priority\n    )\n    ```\n\n05. Open the Templating.kt file within the plugins package.\n\n06. In the configureTemplating() method, add a route for /tasks as shown below:\n\n    ```\n    fun Application.configureTemplating() {\n        install(Thymeleaf) {\n            setTemplateResolver(ClassLoaderTemplateResolver().apply {\n                prefix = \"templates/thymeleaf/\"\n                suffix = \".html\"\n                characterEncoding = \"utf-8\"\n            })\n        }\n        routing {\n            get(\"/html-thymeleaf\") {\n                call.respond(ThymeleafContent(\n                    \"index\",\n                    mapOf(\"user\" to ThymeleafUser(1, \"user1\"))\n                ))\n            }\n            //this is the additional route to add\n            get(\"/tasks\") {\n                val tasks = listOf(\n                    Task(\"cleaning\", \"Clean the house\", Priority.Low),\n                    Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n                    Task(\"shopping\", \"Buy the groceries\", Priority.High),\n                    Task(\"painting\", \"Paint the fence\", Priority.Medium)\n                )\n                call.respond(ThymeleafContent(\"all-tasks\", mapOf(\"tasks\" to tasks)))\n            }\n        }\n    }\n    ```\n\n07. Navigate to src/main/resources/templates/thymeleaf and create a new all-tasks.html file.\n\n08. Open the all-tasks.html file and add the content below:\n\n    ```\n    <!DOCTYPE html >\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>All Current Tasks</title>\n    </head>\n    <body>\n    <h1>All Current Tasks</h1>\n    <table>\n        <thead>\n        <tr>\n            <th>Name</th><th>Description</th><th>Priority</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr th:each=\"task: ${tasks}\">\n            <td th:text=\"${task.name}\"></td>\n            <td th:text=\"${task.description}\"></td>\n            <td th:text=\"${task.priority}\"></td>\n        </tr>\n        </tbody>\n    </table>\n    </body>\n    </html>\n    ```\n\n09. In IntelliJ IDEA, click on the run button to start the application.\n\n10. Navigate to http://0.0.0.0:8080/tasks in your browser. You should see all current tasks displayed in a table..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-website.html", "title": "Create a website in Kotlin with Ktor", "description": "In this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a website in Kotlin with Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-website.html", "description": "\n        Learn how to build websites with Ktor and Kotlin. This tutorial shows you how to combine Thymeleaf templates\n        with Ktor routes to generate HTML-based user interfaces on the server side.\n    ", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Create a website in Kotlin with Ktor | Ktor", "ogLocale": "en_US", "og:title": "Create a website in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "twitter:title": "Create a website in Kotlin with Ktor | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.25258476", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-create-website.html", "scrapeId": "1e5314d4-ed98-4934-a07d-5a5d6562c665", "sourceURL": "https://ktor.io/docs/server-create-website.html", "url": "https://ktor.io/docs/server-create-website.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add the get routes in ktor?\n\nAssistant: To add the get routes in ktor, here's what you do:\nNow that you're familiar with the process of requesting a server page, continue with transferring the functionality from the previous tutorials into this one.\n\nBecause you included the Static Content plugin, the following code will be present in the Routing.kt file:\n\n```\nstaticResources(\"/static\", \"static\")\n```\n\nThis means that, for example, a request to `/static/index.hml` will be served content from the following path:\n\n`src/main/resources/static/index.html`\n\n### Reuse the index page\n\n1. Open the index.html file within src/resources/static and replace its contents with the implementation below:\n\n```\n<html>\n<head>\n</head>\n<body>\n<h1>Task Manager Web Application</h1>\n<div>\n       <h3><a href=\"/tasks\">View all the tasks</a></h3>\n</div>\n<div>\n       <h3>View tasks by priority</h3>\n       <form method=\"get\" action=\"/tasks/byPriority\">\n           <select name=\"priority\">\n               <option name=\"Low\">Low</option>\n               <option name=\"Medium\">Medium</option>\n               <option name=\"High\">High</option>\n               <option name=\"Vital\">Vital</option>\n           </select>\n           <input type=\"submit\">\n       </form>\n</div>\n<div>\n       <h3>View a task by name</h3>\n       <form method=\"get\" action=\"/tasks/byName\">\n           <input type=\"text\" name=\"name\" width=\"10\">\n           <input type=\"submit\">\n       </form>\n</div>\n<div>\n       <h3>Create or edit a task</h3>\n       <form method=\"post\" action=\"/tasks\">\n           <div>\n               <label for=\"name\">Name: </label>\n               <input type=\"text\" id=\"name\" name=\"name\" size=\"10\">\n           </div>\n           <div>\n               <label for=\"description\">Description: </label>\n               <input type=\"text\" id=\"description\"\n                      name=\"description\" size=\"20\">\n           </div>\n           <div>\n               <label for=\"priority\">Priority: </label>\n               <select id=\"priority\" name=\"priority\">\n                   <option name=\"Low\">Low</option>\n                   <option name=\"Medium\">Medium</option>\n                   <option name=\"High\">High</option>\n                   <option name=\"Vital\">Vital</option>\n               </select>\n           </div>\n           <input type=\"submit\">\n       </form>\n</div>\n</body>\n</html>\n```\n\n2. In IntelliJ IDEA, click the rerun button to restart the application.\n\n3. Navigate to http://localhost:8080/static/index.html in your browser. You should see a link button and three HTML forms that allow you to view, filter and create tasks..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-website.html", "title": "Create a website in Kotlin with Ktor", "description": "In this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a website in Kotlin with Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-website.html", "description": "\n        Learn how to build websites with Ktor and Kotlin. This tutorial shows you how to combine Thymeleaf templates\n        with Ktor routes to generate HTML-based user interfaces on the server side.\n    ", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Create a website in Kotlin with Ktor | Ktor", "ogLocale": "en_US", "og:title": "Create a website in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "twitter:title": "Create a website in Kotlin with Ktor | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.25258476", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-create-website.html", "scrapeId": "1e5314d4-ed98-4934-a07d-5a5d6562c665", "sourceURL": "https://ktor.io/docs/server-create-website.html", "url": "https://ktor.io/docs/server-create-website.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I reuse the taskrepository in ktor?\n\nAssistant: To reuse the taskrepository in ktor, here's what you do:\nThe repository for tasks can remain identical to the one from the previous tutorial.\n\nInside the model package create a new TaskRepository.kt file and add the code below:\n\n```\nobject TaskRepository {\n    private val tasks = mutableListOf(\n        Task(\"cleaning\", \"Clean the house\", Priority.Low),\n        Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n        Task(\"shopping\", \"Buy the groceries\", Priority.High),\n        Task(\"painting\", \"Paint the fence\", Priority.Medium)\n    )\n\n    fun allTasks(): List<Task> = tasks\n\n    fun tasksByPriority(priority: Priority) = tasks.filter {\n        it.priority == priority\n    }\n\n    fun taskByName(name: String) = tasks.find {\n        it.name.equals(name, ignoreCase = true)\n    }\n\n    fun addTask(task: Task) {\n        if (taskByName(task.name) != null) {\n            throw IllegalStateException(\"Cannot duplicate task names!\")\n        }\n        tasks.add(task)\n    }\n}\n```\n\n### Reuse routes for GET requests\n\nNow that you have created the repository, you can implement the routes for GET requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-website.html", "title": "Create a website in Kotlin with Ktor", "description": "In this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a website in Kotlin with Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-website.html", "description": "\n        Learn how to build websites with Ktor and Kotlin. This tutorial shows you how to combine Thymeleaf templates\n        with Ktor routes to generate HTML-based user interfaces on the server side.\n    ", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Create a website in Kotlin with Ktor | Ktor", "ogLocale": "en_US", "og:title": "Create a website in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "twitter:title": "Create a website in Kotlin with Ktor | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.25258476", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-create-website.html", "scrapeId": "1e5314d4-ed98-4934-a07d-5a5d6562c665", "sourceURL": "https://ktor.io/docs/server-create-website.html", "url": "https://ktor.io/docs/server-create-website.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add support for post requests in ktor?\n\nAssistant: To add support for post requests in ktor, here's what you do:\nNext, you will add a POST request handler to `/tasks` to do the following:\n\n- Extract the information from the form parameters.\n- Add a new task using the repository.\n- Display tasks by reusing the all-tasks template..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-website.html", "title": "Create a website in Kotlin with Ktor", "description": "In this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a website in Kotlin with Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-website.html", "description": "\n        Learn how to build websites with Ktor and Kotlin. This tutorial shows you how to combine Thymeleaf templates\n        with Ktor routes to generate HTML-based user interfaces on the server side.\n    ", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Create a website in Kotlin with Ktor | Ktor", "ogLocale": "en_US", "og:title": "Create a website in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "twitter:title": "Create a website in Kotlin with Ktor | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.25258476", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-create-website.html", "scrapeId": "1e5314d4-ed98-4934-a07d-5a5d6562c665", "sourceURL": "https://ktor.io/docs/server-create-website.html", "url": "https://ktor.io/docs/server-create-website.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I next steps in ktor?\n\nAssistant: To next steps in ktor, here's what you do:\nCongratulations! You have now completed rebuilding your Task Manager as a web application and learned how to utilize Thymeleaf templates..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-website.html", "title": "Create a website in Kotlin with Ktor", "description": "In this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:18", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a website in Kotlin with Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-website.html", "description": "\n        Learn how to build websites with Ktor and Kotlin. This tutorial shows you how to combine Thymeleaf templates\n        with Ktor routes to generate HTML-based user interfaces on the server side.\n    ", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Create a website in Kotlin with Ktor | Ktor", "ogLocale": "en_US", "og:title": "Create a website in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "twitter:title": "Create a website in Kotlin with Ktor | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.25258476", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-create-website.html", "scrapeId": "1e5314d4-ed98-4934-a07d-5a5d6562c665", "sourceURL": "https://ktor.io/docs/server-create-website.html", "url": "https://ktor.io/docs/server-create-website.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Create a website in Kotlin with Ktor in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Task.kt file**:\n\n```yaml\nenum class Priority {\n    Low, Medium, High, Vital\n}\n\ndata class Task(\n    val name: String,\n    val description: String,\n    val priority: Priority\n)\n```\n\nThis snippet shows you how to task.kt file, which is an important aspect of create a website in kotlin with ktor.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-create-website.html", "title": "Create a website in Kotlin with Ktor", "description": "In this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:18", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a website in Kotlin with Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-website.html", "description": "\n        Learn how to build websites with Ktor and Kotlin. This tutorial shows you how to combine Thymeleaf templates\n        with Ktor routes to generate HTML-based user interfaces on the server side.\n    ", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Create a website in Kotlin with Ktor | Ktor", "ogLocale": "en_US", "og:title": "Create a website in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "twitter:title": "Create a website in Kotlin with Ktor | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.25258476", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-create-website.html", "scrapeId": "1e5314d4-ed98-4934-a07d-5a5d6562c665", "sourceURL": "https://ktor.io/docs/server-create-website.html", "url": "https://ktor.io/docs/server-create-website.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Create a website in Kotlin with Ktor in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWe recommend that you install IntelliJ IDEA, but you could use another IDE of your choice.\n\nYou can do this tutorial independently, however, we strongly recommend that you complete the preceding tutorial to learn how to create RESTful APIs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-create-website.html", "title": "Create a website in Kotlin with Ktor", "description": "In this tutorial, we will show you how to build an interactive website in Kotlin with Ktor and Thymeleaf templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:00:18", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a website in Kotlin with Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-website.html", "description": "\n        Learn how to build websites with Ktor and Kotlin. This tutorial shows you how to combine Thymeleaf templates\n        with Ktor routes to generate HTML-based user interfaces on the server side.\n    ", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Create a website in Kotlin with Ktor | Ktor", "ogLocale": "en_US", "og:title": "Create a website in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "twitter:title": "Create a website in Kotlin with Ktor | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.25258476", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-create-website.html", "scrapeId": "1e5314d4-ed98-4934-a07d-5a5d6562c665", "sourceURL": "https://ktor.io/docs/server-create-website.html", "url": "https://ktor.io/docs/server-create-website.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Running a Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Running a Ktor Server in ktor.\n\n# Running a Ktor Server\n\nThis page covers the specifics of running a Ktor server application, including configuration details, starting the server with Gradle/Maven, and running packaged applications.Here's a quick rundown of what this is about:\n\n## Configuration specifics\n\nRunning a Ktor application depends on the way you used to create a server - `embeddedServer` or `EngineMain`:\n\n- For `embeddedServer`, server parameters (such as a host address and port) are configured in code, so you cannot change these parameters when running an application.\n\n- For `EngineMain`, Ktor loads its configuration from an external file that uses the `HOCON` or `YAML` format. Using this approach, you can run a packaged application from a command line and override the required server parameters by passing corresponding command-line arguments.\n\n## Starting EngineMain: Gradle and Maven specifics\n\nIf you use `EngineMain` to create a server, you need to specify the `main` function for starting a server with the desired engine. The example below demonstrates the `main` function used to run a server with the Netty engine:\n\n```\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n```\n\nTo run a Ktor server using Gradle/Maven without configuring the engine inside the `main` function, you need to specify the main class name in the build script as follows:\n\nGradle (Kotlin)\n\n```\napplication {\n    mainClass.set(\"io.ktor.server.netty.EngineMain\")\n}\n```\n\nGradle (Groovy)\n\n```\nmainClassName = \"io.ktor.server.netty.EngineMain\"\n```\n\nMaven\n\n```\n<properties>\n    <main.class>io.ktor.server.netty.EngineMain</main.class>\n</properties>\n```\n\n## WAR specifics\n\nKtor allows you to create and start a server with the desired engine (such as Netty, Jetty, or Tomcat) right in the application. In this case, your application has control over engine settings, connection, and SSL options.\n\nIn contrast to this approach, a servlet container should control the application lifecycle and connection settings. Ktor provides a special `ServletApplicationEngine` engine that delegates control over your application to a servlet container.\n\n## Run an application\n\nRestarting a server during development might take some time. Ktor allows you to overcome this limitation by using Auto-reload, which reloads application classes on code changes and provides a fast feedback loop.\n\n## Run an application using Gradle/Maven\n\nTo run a Ktor application using Gradle or Maven, use the corresponding plugins:\n\n- Application plugin for Gradle. For the Native server, use the Kotlin Multiplatform plugin.\n- Exec plugin for Maven.\n\n## Run a packaged application\n\nBefore deploying your application, you need to package it in one of the ways described in the Packaging section. Running a Ktor application from the resulting package depends on the package type and might look as follows:\n\n- To run a Ktor server packaged in a fat JAR with and override the configured port, execute the following command:\n\n```\njava -jar sample-app.jar -port=8080\n```\n\n- To run an application packaged using the Gradle Application plugin, run a corresponding executable:\n\nLinux/macOS\n\n```\n./ktor-sample\n```\n\nWindows\n\n```\nktor-sample.bat\n```\n\n- To run a servlet Ktor application, use the run task of the Gretty plugin.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/running.html", "title": "Running a Ktor Server", "description": "This page covers the specifics of running a Ktor server application, including configuration details, starting the server with Gradle/Maven, and running packaged applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:00:43", "type": "overview", "page_metadata": {"twitter:title": "Running | Ktor", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-run.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogSiteName": "Ktor Help", "title": "Running | Ktor Documentation", "ogTitle": "Running | Ktor", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "built-on": "2025-02-26T14:01:03.441723324", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Running | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-run.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a6dad937-c01f-4a86-8e5e-1c64d1051a49", "sourceURL": "https://ktor.io/docs/running.html", "url": "https://ktor.io/docs/server-run.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configuration specifics in ktor?\n\nAssistant: To configuration specifics in ktor, here's what you do:\nRunning a Ktor application depends on the way you used to create a server - `embeddedServer` or `EngineMain`:\n\n- For `embeddedServer`, server parameters (such as a host address and port) are configured in code, so you cannot change these parameters when running an application.\n\n- For `EngineMain`, Ktor loads its configuration from an external file that uses the `HOCON` or `YAML` format. Using this approach, you can run a packaged application from a command line and override the required server parameters by passing corresponding command-line arguments..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/running.html", "title": "Running a Ktor Server", "description": "This page covers the specifics of running a Ktor server application, including configuration details, starting the server with Gradle/Maven, and running packaged applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:00:43", "type": "section_detail", "page_metadata": {"twitter:title": "Running | Ktor", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-run.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogSiteName": "Ktor Help", "title": "Running | Ktor Documentation", "ogTitle": "Running | Ktor", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "built-on": "2025-02-26T14:01:03.441723324", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Running | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-run.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a6dad937-c01f-4a86-8e5e-1c64d1051a49", "sourceURL": "https://ktor.io/docs/running.html", "url": "https://ktor.io/docs/server-run.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I starting enginemain: gradle and maven specifics in ktor?\n\nAssistant: To starting enginemain: gradle and maven specifics in ktor, here's what you do:\nIf you use `EngineMain` to create a server, you need to specify the `main` function for starting a server with the desired engine. The example below demonstrates the `main` function used to run a server with the Netty engine:\n\n```\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n```\n\nTo run a Ktor server using Gradle/Maven without configuring the engine inside the `main` function, you need to specify the main class name in the build script as follows:\n\nGradle (Kotlin)\n\n```\napplication {\n    mainClass.set(\"io.ktor.server.netty.EngineMain\")\n}\n```\n\nGradle (Groovy)\n\n```\nmainClassName = \"io.ktor.server.netty.EngineMain\"\n```\n\nMaven\n\n```\n<properties>\n    <main.class>io.ktor.server.netty.EngineMain</main.class>\n</properties>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/running.html", "title": "Running a Ktor Server", "description": "This page covers the specifics of running a Ktor server application, including configuration details, starting the server with Gradle/Maven, and running packaged applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:00:43", "type": "section_detail", "page_metadata": {"twitter:title": "Running | Ktor", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-run.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogSiteName": "Ktor Help", "title": "Running | Ktor Documentation", "ogTitle": "Running | Ktor", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "built-on": "2025-02-26T14:01:03.441723324", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Running | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-run.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a6dad937-c01f-4a86-8e5e-1c64d1051a49", "sourceURL": "https://ktor.io/docs/running.html", "url": "https://ktor.io/docs/server-run.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I war specifics in ktor?\n\nAssistant: To war specifics in ktor, here's what you do:\nKtor allows you to create and start a server with the desired engine (such as Netty, Jetty, or Tomcat) right in the application. In this case, your application has control over engine settings, connection, and SSL options.\n\nIn contrast to this approach, a servlet container should control the application lifecycle and connection settings. Ktor provides a special `ServletApplicationEngine` engine that delegates control over your application to a servlet container..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/running.html", "title": "Running a Ktor Server", "description": "This page covers the specifics of running a Ktor server application, including configuration details, starting the server with Gradle/Maven, and running packaged applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:00:43", "type": "section_detail", "page_metadata": {"twitter:title": "Running | Ktor", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-run.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogSiteName": "Ktor Help", "title": "Running | Ktor Documentation", "ogTitle": "Running | Ktor", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "built-on": "2025-02-26T14:01:03.441723324", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Running | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-run.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a6dad937-c01f-4a86-8e5e-1c64d1051a49", "sourceURL": "https://ktor.io/docs/running.html", "url": "https://ktor.io/docs/server-run.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run an application in ktor?\n\nAssistant: To run an application in ktor, here's what you do:\nRestarting a server during development might take some time. Ktor allows you to overcome this limitation by using Auto-reload, which reloads application classes on code changes and provides a fast feedback loop..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/running.html", "title": "Running a Ktor Server", "description": "This page covers the specifics of running a Ktor server application, including configuration details, starting the server with Gradle/Maven, and running packaged applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:00:43", "type": "section_detail", "page_metadata": {"twitter:title": "Running | Ktor", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-run.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogSiteName": "Ktor Help", "title": "Running | Ktor Documentation", "ogTitle": "Running | Ktor", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "built-on": "2025-02-26T14:01:03.441723324", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Running | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-run.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a6dad937-c01f-4a86-8e5e-1c64d1051a49", "sourceURL": "https://ktor.io/docs/running.html", "url": "https://ktor.io/docs/server-run.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run an application using gradle/maven in ktor?\n\nAssistant: To run an application using gradle/maven in ktor, here's what you do:\nTo run a Ktor application using Gradle or Maven, use the corresponding plugins:\n\n- Application plugin for Gradle. For the Native server, use the Kotlin Multiplatform plugin.\n- Exec plugin for Maven..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/running.html", "title": "Running a Ktor Server", "description": "This page covers the specifics of running a Ktor server application, including configuration details, starting the server with Gradle/Maven, and running packaged applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:00:43", "type": "section_detail", "page_metadata": {"twitter:title": "Running | Ktor", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-run.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogSiteName": "Ktor Help", "title": "Running | Ktor Documentation", "ogTitle": "Running | Ktor", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "built-on": "2025-02-26T14:01:03.441723324", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Running | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-run.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a6dad937-c01f-4a86-8e5e-1c64d1051a49", "sourceURL": "https://ktor.io/docs/running.html", "url": "https://ktor.io/docs/server-run.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run a packaged application in ktor?\n\nAssistant: To run a packaged application in ktor, here's what you do:\nBefore deploying your application, you need to package it in one of the ways described in the Packaging section. Running a Ktor application from the resulting package depends on the package type and might look as follows:\n\n- To run a Ktor server packaged in a fat JAR with and override the configured port, execute the following command:\n\n```\njava -jar sample-app.jar -port=8080\n```\n\n- To run an application packaged using the Gradle Application plugin, run a corresponding executable:\n\nLinux/macOS\n\n```\n./ktor-sample\n```\n\nWindows\n\n```\nktor-sample.bat\n```\n\n- To run a servlet Ktor application, use the run task of the Gretty plugin..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/running.html", "title": "Running a Ktor Server", "description": "This page covers the specifics of running a Ktor server application, including configuration details, starting the server with Gradle/Maven, and running packaged applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:00:43", "type": "section_detail", "page_metadata": {"twitter:title": "Running | Ktor", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-run.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogSiteName": "Ktor Help", "title": "Running | Ktor Documentation", "ogTitle": "Running | Ktor", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "built-on": "2025-02-26T14:01:03.441723324", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Running | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-run.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a6dad937-c01f-4a86-8e5e-1c64d1051a49", "sourceURL": "https://ktor.io/docs/running.html", "url": "https://ktor.io/docs/server-run.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Running a Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Main function for Netty engine**:\n\n```yaml\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n```\n\nThis snippet shows you how to main function for netty engine, which is an important aspect of running a ktor server.\n\n**Gradle (Kotlin) main class configuration**:\n\n```yaml\napplication {\n    mainClass.set(\"io.ktor.server.netty.EngineMain\")\n}\n```\n\nThis snippet shows you how to gradle (kotlin) main class configuration, which is an important aspect of running a ktor server.\n\n**Gradle (Groovy) main class configuration**:\n\n```yaml\nmainClassName = \"io.ktor.server.netty.EngineMain\"\n```\n\nThis snippet shows you how to gradle (groovy) main class configuration, which is an important aspect of running a ktor server.\n\n**Maven main class configuration**:\n\n```yaml\n<properties>\n    <main.class>io.ktor.server.netty.EngineMain</main.class>\n</properties>\n```\n\nThis snippet shows you how to maven main class configuration, which is an important aspect of running a ktor server.\n\n**Run packaged application command**:\n\n```yaml\njava -jar sample-app.jar -port=8080\n```\n\nThis snippet shows you how to run packaged application command, which is an important aspect of running a ktor server.\n\n**Run Ktor application on Linux/macOS**:\n\n```yaml\n./ktor-sample\n```\n\nThis snippet shows you how to run ktor application on linux/macos, which is an important aspect of running a ktor server.\n\n**Run Ktor application on Windows**:\n\n```yaml\nktor-sample.bat\n```\n\nThis snippet shows you how to run ktor application on windows, which is an important aspect of running a ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/running.html", "title": "Running a Ktor Server", "description": "This page covers the specifics of running a Ktor server application, including configuration details, starting the server with Gradle/Maven, and running packaged applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:00:43", "type": "code_examples", "page_metadata": {"twitter:title": "Running | Ktor", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-run.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogSiteName": "Ktor Help", "title": "Running | Ktor Documentation", "ogTitle": "Running | Ktor", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "built-on": "2025-02-26T14:01:03.441723324", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Running | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-run.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a6dad937-c01f-4a86-8e5e-1c64d1051a49", "sourceURL": "https://ktor.io/docs/running.html", "url": "https://ktor.io/docs/server-run.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Running a Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRestarting a server during development might take some time. Ktor allows you to overcome this limitation by using Auto-reload, which reloads application classes on code changes and provides a fast feedback loop.\n\nTo learn how to run a Ktor application in IntelliJ IDEA, see the Run a Ktor application section in the IntelliJ IDEA documentation.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/running.html", "title": "Running a Ktor Server", "description": "This page covers the specifics of running a Ktor server application, including configuration details, starting the server with Gradle/Maven, and running packaged applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:00:43", "type": "best_practices", "page_metadata": {"twitter:title": "Running | Ktor", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-run.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogSiteName": "Ktor Help", "title": "Running | Ktor Documentation", "ogTitle": "Running | Ktor", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "built-on": "2025-02-26T14:01:03.441723324", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Running | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-run.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a6dad937-c01f-4a86-8e5e-1c64d1051a49", "sourceURL": "https://ktor.io/docs/running.html", "url": "https://ktor.io/docs/server-run.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Routing is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Routing in ktor.\n\n# Server Plugin Routing\n\nRouting is the core Ktor plugin for handling incoming requests in a server application. When the client makes a request to a specific URL, the routing mechanism allows us to define how we want this request to be served.Here's a quick rundown of what this is about:\n\n## Install Routing\n\nThe Routing plugin can be installed in the following way:\n\n```\nimport io.ktor.server.routing.*\n\ninstall(RoutingRoot) {\n    // ...\n}\n```\n\nGiven the Routing plugin is so common in any application, there is a convenient `routing` function that makes it simpler to install routing. In the code snippet below, `install(RoutingRoot)` is replaced with the `routing` function:\n\n```\nimport io.ktor.server.routing.*\n\nrouting {\n    // ...\n}\n```\n\n## Define a route handler\n\nAfter installing the Routing plugin, you can call the `route` function inside `routing` to define a route:\n\n```\nimport io.ktor.server.routing.*\nimport io.ktor.http.*\nimport io.ktor.server.response.*\n\nrouting {\n    route(\"/hello\", HttpMethod.Get) {\n        handle {\n            call.respondText(\"Hello\")\n        }\n    }\n}\n```\n\nKtor also provides a series of functions that make defining route handlers much easier and more concise. For example, you can replace the previous code with a `get` function that now only needs to take the URL and the code to handle the request:\n\n```\nimport io.ktor.server.routing.*\nimport io.ktor.server.response.*\n\nrouting {\n    get(\"/hello\") {\n        call.respondText(\"Hello\")\n    }\n}\n```\n\nSimilarly, Ktor provides functions for all the other verbs, that is `put`, `post`, `head`, and so on.\n\n## Specify a path pattern\n\nA path pattern passed to the routing functions (`route`, `get`, `post`, etc.) is used to match a path component of the URL. A path can contain a sequence of path segments separated by a slash `/` character.\n\n> ### tip\n>\n> Note that Ktor distinguishes paths with and without a trailing slash. You can change this behavior by installing the `IgnoreTrailingSlash` plugin.\n\nBelow are several path examples:\n\n- `/hello`\n\nA path containing a single path segment.\n\n- `/order/shipment`\n\nA path containing several path segments. You can pass such a path to the `route/get/etc.` function as is or organize sub-routes by nesting several `route` functions.\n\n- `/user/{login}`\n\nA path with the `login` path parameter, whose value can be accessed inside the route handler.\n\n- `/user/*`\n\nA path with a wildcard character that matches any path segment.\n\n- `/user/{...}`\n\nA path with a tailcard that matches all the rest of the URL path.\n\n- `/user/{param...}`\n\nA path containing a path parameter with tailcard.\n\n- `Regex(\"/.+/hello\")`\n\nA path containing a regular expression that matches path segments up to and including the last occurrence of the `/hello`.\n\n## Define multiple route handlers\n\n### Group routes by verb functions\n\nIf you want to define multiple route handlers, which of course is the case for any application, you can just add them to the `routing` function:\n\n```\nrouting {\n    get(\"/customer/{id}\") {\n\n    }\n    post(\"/customer\") {\n\n    }\n    get(\"/order\") {\n\n    }\n    get(\"/order/{id}\") {\n\n    }\n}\n```\n\nIn this case, each route has its own function and responds to the specific endpoint and HTTP verb.\n\n### Group routes by paths\n\nAn alternative way is to group these by paths, whereby you define the path and then place the verbs for that path as nested functions, using the `route` function:\n\n```\nrouting {\n    route(\"/customer\") {\n        get {\n\n        }\n        post {\n\n        }\n    }\n    route(\"/order\") {\n        get {\n\n        }\n        get(\"/{id}\") {\n\n        }\n    }\n}\n```\n\n### Nested routes\n\nIndependently of how you do the grouping, Ktor also allows you to have sub-routes as parameters to `route` functions. This can be useful to define resources that are logically children of other resources. The following example shows us how to respond to `GET` and `POST` requests to `/order/shipment`:\n\n```\nrouting {\n    route(\"/order\") {\n        route(\"/shipment\") {\n            get {\n\n            }\n            post {\n\n            }\n        }\n    }\n}\n```\n\n## Route extension functions\n\nA common pattern is to use extension functions on the `Route` type to define the actual routes, allowing us easy access to the verbs and remove clutter of having all routes in a single routing function. You can apply this pattern independently of how you decide to group routes. As such, the first example could be represented in a cleaner way:\n\n```\nrouting {\n    listOrdersRoute()\n    getOrderRoute()\n    totalizeOrderRoute()\n}\n\nfun Route.listOrdersRoute() {\n    get(\"/order\") {\n\n    }\n}\n\nfun Route.getOrderRoute() {\n    get(\"/order/{id}\") {\n\n    }\n}\n\nfun Route.totalizeOrderRoute() {\n    get(\"/order/{id}/total\") {\n\n    }\n}\n```\n\nFor the full example demonstrating this approach, see [legacy-interactive-website](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/legacy-interactive-website).\n\n## Trace routes\n\nWith logging configured, Ktor enables route tracing that helps you determine why some routes are not being executed. For example, if you run the application and make a request to a specified endpoint, the application's output might look as follows:\n\n```\nTRACE Application - Trace for [missing-page]\n/, segment:0 -> SUCCESS @ /\n  /, segment:0 -> SUCCESS @ /\n    /(method:GET), segment:0 -> FAILURE \"Not all segments matched\" @ /(method:GET)\nMatched routes:\n  No results\nRoute resolve result:\n  FAILURE \"No matched subtrees found\" @ /\n```\n\n> ### tip\n>\n> To enable route tracing on the Native server, pass the TRACE value to the `KTOR_LOG_LEVEL` environment variable when running the application.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/routing.html", "title": "Server Plugin Routing", "description": "Routing is the core Ktor plugin for handling incoming requests in a server application. When the client makes a request to a specific URL, the routing mechanism allows us to define how we want this request to be served.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:01:10", "type": "overview", "page_metadata": {"language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-routing.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Routing | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-routing.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "Routing | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.239624871", "og:title": "Routing | Ktor", "og:description": "", "twitter:creator": "@JetBrainsKtor", "title": "Routing | Ktor Documentation", "build-number": "707", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "scrapeId": "1516b5ee-f84d-450b-8095-bb141d2e3bca", "sourceURL": "https://ktor.io/docs/routing.html", "url": "https://ktor.io/docs/server-routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install routing in ktor?\n\nAssistant: To install routing in ktor, here's what you do:\nThe Routing plugin can be installed in the following way:\n\n```\nimport io.ktor.server.routing.*\n\ninstall(RoutingRoot) {\n    // ...\n}\n```\n\nGiven the Routing plugin is so common in any application, there is a convenient `routing` function that makes it simpler to install routing. In the code snippet below, `install(RoutingRoot)` is replaced with the `routing` function:\n\n```\nimport io.ktor.server.routing.*\n\nrouting {\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/routing.html", "title": "Server Plugin Routing", "description": "Routing is the core Ktor plugin for handling incoming requests in a server application. When the client makes a request to a specific URL, the routing mechanism allows us to define how we want this request to be served.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:01:10", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-routing.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Routing | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-routing.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "Routing | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.239624871", "og:title": "Routing | Ktor", "og:description": "", "twitter:creator": "@JetBrainsKtor", "title": "Routing | Ktor Documentation", "build-number": "707", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "scrapeId": "1516b5ee-f84d-450b-8095-bb141d2e3bca", "sourceURL": "https://ktor.io/docs/routing.html", "url": "https://ktor.io/docs/server-routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I define a route handler in ktor?\n\nAssistant: To define a route handler in ktor, here's what you do:\nAfter installing the Routing plugin, you can call the `route` function inside `routing` to define a route:\n\n```\nimport io.ktor.server.routing.*\nimport io.ktor.http.*\nimport io.ktor.server.response.*\n\nrouting {\n    route(\"/hello\", HttpMethod.Get) {\n        handle {\n            call.respondText(\"Hello\")\n        }\n    }\n}\n```\n\nKtor also provides a series of functions that make defining route handlers much easier and more concise. For example, you can replace the previous code with a `get` function that now only needs to take the URL and the code to handle the request:\n\n```\nimport io.ktor.server.routing.*\nimport io.ktor.server.response.*\n\nrouting {\n    get(\"/hello\") {\n        call.respondText(\"Hello\")\n    }\n}\n```\n\nSimilarly, Ktor provides functions for all the other verbs, that is `put`, `post`, `head`, and so on..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/routing.html", "title": "Server Plugin Routing", "description": "Routing is the core Ktor plugin for handling incoming requests in a server application. When the client makes a request to a specific URL, the routing mechanism allows us to define how we want this request to be served.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:01:10", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-routing.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Routing | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-routing.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "Routing | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.239624871", "og:title": "Routing | Ktor", "og:description": "", "twitter:creator": "@JetBrainsKtor", "title": "Routing | Ktor Documentation", "build-number": "707", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "scrapeId": "1516b5ee-f84d-450b-8095-bb141d2e3bca", "sourceURL": "https://ktor.io/docs/routing.html", "url": "https://ktor.io/docs/server-routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I specify a path pattern in ktor?\n\nAssistant: To specify a path pattern in ktor, here's what you do:\nA path pattern passed to the routing functions (`route`, `get`, `post`, etc.) is used to match a path component of the URL. A path can contain a sequence of path segments separated by a slash `/` character.\n\n> ### tip\n>\n> Note that Ktor distinguishes paths with and without a trailing slash. You can change this behavior by installing the `IgnoreTrailingSlash` plugin.\n\nBelow are several path examples:\n\n- `/hello`\n\nA path containing a single path segment.\n\n- `/order/shipment`\n\nA path containing several path segments. You can pass such a path to the `route/get/etc.` function as is or organize sub-routes by nesting several `route` functions.\n\n- `/user/{login}`\n\nA path with the `login` path parameter, whose value can be accessed inside the route handler.\n\n- `/user/*`\n\nA path with a wildcard character that matches any path segment.\n\n- `/user/{...}`\n\nA path with a tailcard that matches all the rest of the URL path.\n\n- `/user/{param...}`\n\nA path containing a path parameter with tailcard.\n\n- `Regex(\"/.+/hello\")`\n\nA path containing a regular expression that matches path segments up to and including the last occurrence of the `/hello`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/routing.html", "title": "Server Plugin Routing", "description": "Routing is the core Ktor plugin for handling incoming requests in a server application. When the client makes a request to a specific URL, the routing mechanism allows us to define how we want this request to be served.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:01:10", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-routing.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Routing | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-routing.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "Routing | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.239624871", "og:title": "Routing | Ktor", "og:description": "", "twitter:creator": "@JetBrainsKtor", "title": "Routing | Ktor Documentation", "build-number": "707", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "scrapeId": "1516b5ee-f84d-450b-8095-bb141d2e3bca", "sourceURL": "https://ktor.io/docs/routing.html", "url": "https://ktor.io/docs/server-routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I define multiple route handlers in ktor?\n\nAssistant: To define multiple route handlers in ktor, here's what you do:\n### Group routes by verb functions\n\nIf you want to define multiple route handlers, which of course is the case for any application, you can just add them to the `routing` function:\n\n```\nrouting {\n    get(\"/customer/{id}\") {\n\n    }\n    post(\"/customer\") {\n\n    }\n    get(\"/order\") {\n\n    }\n    get(\"/order/{id}\") {\n\n    }\n}\n```\n\nIn this case, each route has its own function and responds to the specific endpoint and HTTP verb.\n\n### Group routes by paths\n\nAn alternative way is to group these by paths, whereby you define the path and then place the verbs for that path as nested functions, using the `route` function:\n\n```\nrouting {\n    route(\"/customer\") {\n        get {\n\n        }\n        post {\n\n        }\n    }\n    route(\"/order\") {\n        get {\n\n        }\n        get(\"/{id}\") {\n\n        }\n    }\n}\n```\n\n### Nested routes\n\nIndependently of how you do the grouping, Ktor also allows you to have sub-routes as parameters to `route` functions. This can be useful to define resources that are logically children of other resources. The following example shows us how to respond to `GET` and `POST` requests to `/order/shipment`:\n\n```\nrouting {\n    route(\"/order\") {\n        route(\"/shipment\") {\n            get {\n\n            }\n            post {\n\n            }\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/routing.html", "title": "Server Plugin Routing", "description": "Routing is the core Ktor plugin for handling incoming requests in a server application. When the client makes a request to a specific URL, the routing mechanism allows us to define how we want this request to be served.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:01:10", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-routing.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Routing | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-routing.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "Routing | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.239624871", "og:title": "Routing | Ktor", "og:description": "", "twitter:creator": "@JetBrainsKtor", "title": "Routing | Ktor Documentation", "build-number": "707", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "scrapeId": "1516b5ee-f84d-450b-8095-bb141d2e3bca", "sourceURL": "https://ktor.io/docs/routing.html", "url": "https://ktor.io/docs/server-routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I route extension functions in ktor?\n\nAssistant: To route extension functions in ktor, here's what you do:\nA common pattern is to use extension functions on the `Route` type to define the actual routes, allowing us easy access to the verbs and remove clutter of having all routes in a single routing function. You can apply this pattern independently of how you decide to group routes. As such, the first example could be represented in a cleaner way:\n\n```\nrouting {\n    listOrdersRoute()\n    getOrderRoute()\n    totalizeOrderRoute()\n}\n\nfun Route.listOrdersRoute() {\n    get(\"/order\") {\n\n    }\n}\n\nfun Route.getOrderRoute() {\n    get(\"/order/{id}\") {\n\n    }\n}\n\nfun Route.totalizeOrderRoute() {\n    get(\"/order/{id}/total\") {\n\n    }\n}\n```\n\nFor the full example demonstrating this approach, see [legacy-interactive-website](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/legacy-interactive-website)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/routing.html", "title": "Server Plugin Routing", "description": "Routing is the core Ktor plugin for handling incoming requests in a server application. When the client makes a request to a specific URL, the routing mechanism allows us to define how we want this request to be served.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:01:10", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-routing.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Routing | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-routing.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "Routing | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.239624871", "og:title": "Routing | Ktor", "og:description": "", "twitter:creator": "@JetBrainsKtor", "title": "Routing | Ktor Documentation", "build-number": "707", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "scrapeId": "1516b5ee-f84d-450b-8095-bb141d2e3bca", "sourceURL": "https://ktor.io/docs/routing.html", "url": "https://ktor.io/docs/server-routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I trace routes in ktor?\n\nAssistant: To trace routes in ktor, here's what you do:\nWith logging configured, Ktor enables route tracing that helps you determine why some routes are not being executed. For example, if you run the application and make a request to a specified endpoint, the application's output might look as follows:\n\n```\nTRACE Application - Trace for [missing-page]\n/, segment:0 -> SUCCESS @ /\n  /, segment:0 -> SUCCESS @ /\n    /(method:GET), segment:0 -> FAILURE \"Not all segments matched\" @ /(method:GET)\nMatched routes:\n  No results\nRoute resolve result:\n  FAILURE \"No matched subtrees found\" @ /\n```\n\n> ### tip\n>\n> To enable route tracing on the Native server, pass the TRACE value to the `KTOR_LOG_LEVEL` environment variable when running the application..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/routing.html", "title": "Server Plugin Routing", "description": "Routing is the core Ktor plugin for handling incoming requests in a server application. When the client makes a request to a specific URL, the routing mechanism allows us to define how we want this request to be served.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:01:10", "type": "section_detail", "page_metadata": {"language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-routing.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Routing | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-routing.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "Routing | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.239624871", "og:title": "Routing | Ktor", "og:description": "", "twitter:creator": "@JetBrainsKtor", "title": "Routing | Ktor Documentation", "build-number": "707", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "scrapeId": "1516b5ee-f84d-450b-8095-bb141d2e3bca", "sourceURL": "https://ktor.io/docs/routing.html", "url": "https://ktor.io/docs/server-routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Routing in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install Routing**:\n\n```yaml\nimport io.ktor.server.routing.*\n\ninstall(RoutingRoot) {\n    // ...\n}\n```\n\nThis snippet shows you how to install routing, which is an important aspect of server plugin routing.\n\n", "metadata": {"source_url": "https://ktor.io/docs/routing.html", "title": "Server Plugin Routing", "description": "Routing is the core Ktor plugin for handling incoming requests in a server application. When the client makes a request to a specific URL, the routing mechanism allows us to define how we want this request to be served.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:01:10", "type": "code_examples", "page_metadata": {"language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-routing.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Routing | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-routing.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "Routing | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.239624871", "og:title": "Routing | Ktor", "og:description": "", "twitter:creator": "@JetBrainsKtor", "title": "Routing | Ktor Documentation", "build-number": "707", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "scrapeId": "1516b5ee-f84d-450b-8095-bb141d2e3bca", "sourceURL": "https://ktor.io/docs/routing.html", "url": "https://ktor.io/docs/server-routing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what FAQ is in ktor?\n\nAssistant: Sure, I'd be happy to explain FAQ in ktor.\n\n# FAQ\n\nFrequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.Here's a quick rundown of what this is about:\n\n## What is the proper way to pronounce Ktor?\n\n/keɪ-tor/\n\n## What does the name \"Ktor\" stand for?\n\nThe name Ktor is derived from the abbreviation `ctor` (constructor) with the first letter replaced by 'K' for Kotlin.\n\n## How do I put questions, report bugs, contact you, contribute, give feedback, etc.?\n\nGo to the [Support](https://ktor.io/support/) page to learn more about the available support channels. The [How to contribute](https://github.com/ktorio/ktor/blob/main/CONTRIBUTING.md) guide describes the ways you can contribute to Ktor.\n\n## What does CIO mean?\n\nCIO stands for Coroutine-based I/O. Usually we call it to an engine that uses Kotlin and Coroutines to implement the logic implementing an IETF RFC or another protocol without relying on external JVM-based libraries.\n\n## How to fix unresolved (red) Ktor imports?\n\nMake sure that corresponding [Ktor artifacts](https://ktor.io/docs/server-dependencies.html) are added in the build script.\n\n## Does Ktor provide a way to catch IPC signals (e.g. SIGTERM or SIGINT) so the server shutdown can be handled gracefully?\n\nIf you are running an [EngineMain](https://ktor.io/docs/server-create-and-configure.html#engine-main), it will be handled automatically. Otherwise, you need to [handle it manually](https://github.com/ktorio/ktor/blob/main/ktor-server/ktor-server-cio/jvmAndNix/src/io/ktor/server/cio/EngineMain.kt#L21). You can use the `Runtime.getRuntime().addShutdownHook` JVM's facility.\n\n## How do I get the client IP behind a proxy?\n\nThe `call.request.origin` property gives [connection information](https://ktor.io/docs/server-requests.html#request_information) about the original caller (the proxy) if the proxy provides proper headers, and the [ForwardedHeader](https://ktor.io/docs/server-forward-headers.html) plugin is installed.\n\n## How can I test the latest commits on main?\n\nYou can get Ktor nightly builds from `jetbrains.space`. Learn more from [Early Access Program](https://ktor.io/eap/).\n\n## How can I be sure of which version of Ktor am I using?\n\nYou can use the [DefaultHeaders](https://ktor.io/docs/server-default-headers.html) plugin that sends a `Server` response header with the Ktor version on it, for example:\n\n```\nServer: ktor-server-core/3.1.0\n```\n\n## My route is not being executed. How can I debug it?\n\nKtor provides a tracing mechanism to help troubleshooting routing decisions. Check the [Tracing routes](https://ktor.io/docs/server-routing.html#trace_routes) section.\n\n## How to resolve 'Response has already been sent'?\n\nThis means that you, or a plugin or interceptor, have already called `call.respond*` functions, and you are calling it again.\n\n## How can I subscribe to Ktor events?\n\nSee the [Application monitoring](https://ktor.io/docs/server-events.html) page to learn more.\n\n## How to resolve 'No configuration setting found for key ktor'?\n\nThis means that Ktor was not able to find a [configuration file](https://ktor.io/docs/server-configuration-file.html). Ensure that there is a configuration file in the `resources` folder, and that the `resources` folder is marked as such. Consider setting up a project using the [Ktor project generator](https://start.ktor.io/) or the [Ktor plugin for intelliJ IDEA Ultimate](https://plugins.jetbrains.com/plugin/16008-ktor) to have a working project as the base. For more information, see [Create, open and run a new Ktor project](https://ktor.io/docs/server-create-a-new-project.html).\n\n## Can I use Ktor on Android?\n\nYes, Ktor servers and clients are known to work on Android 5 (API 21) or greater, at least with the Netty engine.\n\n## Why 'CURL -I' returns a '404 Not Found'?\n\n`CURL -I` is an alias of `CURL --head` that performs `HEAD` requests. By default, Ktor doesn't handle `HEAD` requests for `GET` handlers. To enable this capability, install the [AutoHeadResponse](https://ktor.io/docs/server-autoheadresponse.html) plugin.\n\n## How to resolve an infinite redirect when using the 'HttpsRedirect' plugin?\n\nThe most probable cause is that your backend is behind a reverse proxy or a load balancer, and that this intermediary is making normal HTTP requests to your backend, thus the `HttpsRedirect` plugin inside your Ktor backend believes that it is a normal HTTP request and responds with the redirect.\n\nNormally, reverse-proxies send some headers describing the original request (like it was HTTPS, or the original IP address), and there is a plugin [ForwardedHeader](https://ktor.io/docs/server-forward-headers.html) to parse those headers so the [HttpsRedirect](https://ktor.io/docs/server-https-redirect.html) plugin knows that the original request was HTTPS.\n\n## How to install 'curl' on Windows to use a corresponding engine on Kotlin/Native?\n\nThe [Curl](https://ktor.io/docs/client-engines.html#curl) client engine requires installing the `curl` library. On Windows, you may want to consider a MinGW/MSYS2 `curl` binary.\n\n1. Install MinGW/MSYS2 as described in [MinGW/MSYS2](https://www.msys2.org/).\n\n2. Install `libcurl` using the following command:\n\n```\npacman -S mingw-w64-x86_64-curl\n```\n\n3. If you've installed MinGW/MSYS2 to a default location, add C:\\msys64\\mingw64\\bin\\ to the `PATH` environment variable.\n\n## How to resolve 'NoTransformationFoundException'?\n\n[NoTransformationFoundException](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.call/-no-transformation-found-exception/index.html) represents the inability to find a suitable transformation for the _received body_ from **resulted** type to **expected** by the client type.\n\n1. Check that the `Accept` header in your request specifies the desired content type and that the `Content-Type` header in the server's response matches the expected type on the client side.\n\n2. Register the necessary content transformations for the specific content types you're working with.\n\nYou can use the [ContentNegotiation](https://ktor.io/docs/serialization-client.html) plugin for the client side. This plugin allows you to specify how to serialize and deserialize data for different content types.\n\n```\nval client = HttpClient(CIO) {\n       install(ContentNegotiation) {\n           json() // Example: Register JSON content transformation\n           // Add more transformations as needed for other content types\n       }\n}\n```\n\n3. Make sure that you install all the needed plugins. Possible missing features:\n\n   - Client [WebSockets](https://ktor.io/docs/websocket-client.html) and Server [WebSockets](https://ktor.io/docs/websocket.html)\n\n   - Client [ContentNegotiation](https://ktor.io/docs/serialization-client.html) and Server [ContentNegotiation](https://ktor.io/docs/serialization.html)\n\n   - [Compression](https://ktor.io/docs/compression.html)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "overview", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I what is the proper way to pronounce ktor? in ktor?\n\nAssistant: To what is the proper way to pronounce ktor? in ktor, here's what you do:\n/keɪ-tor/.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I what does the name \"ktor\" stand for? in ktor?\n\nAssistant: To what does the name \"ktor\" stand for? in ktor, here's what you do:\nThe name Ktor is derived from the abbreviation `ctor` (constructor) with the first letter replaced by 'K' for Kotlin..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I how do i put questions, report bugs, contact you, contribute, give feedback, etc.? in ktor?\n\nAssistant: To how do i put questions, report bugs, contact you, contribute, give feedback, etc.? in ktor, here's what you do:\nGo to the [Support](https://ktor.io/support/) page to learn more about the available support channels. The [How to contribute](https://github.com/ktorio/ktor/blob/main/CONTRIBUTING.md) guide describes the ways you can contribute to Ktor..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I what does cio mean? in ktor?\n\nAssistant: To what does cio mean? in ktor, here's what you do:\nCIO stands for Coroutine-based I/O. Usually we call it to an engine that uses Kotlin and Coroutines to implement the logic implementing an IETF RFC or another protocol without relying on external JVM-based libraries..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I how to fix unresolved (red) ktor imports? in ktor?\n\nAssistant: To how to fix unresolved (red) ktor imports? in ktor, here's what you do:\nMake sure that corresponding [Ktor artifacts](https://ktor.io/docs/server-dependencies.html) are added in the build script..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I does ktor provide a way to catch ipc signals (e.g. sigterm or sigint) so the server shutdown can be handled gracefully? in ktor?\n\nAssistant: To does ktor provide a way to catch ipc signals (e.g. sigterm or sigint) so the server shutdown can be handled gracefully? in ktor, here's what you do:\nIf you are running an [EngineMain](https://ktor.io/docs/server-create-and-configure.html#engine-main), it will be handled automatically. Otherwise, you need to [handle it manually](https://github.com/ktorio/ktor/blob/main/ktor-server/ktor-server-cio/jvmAndNix/src/io/ktor/server/cio/EngineMain.kt#L21). You can use the `Runtime.getRuntime().addShutdownHook` JVM's facility..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I how do i get the client ip behind a proxy? in ktor?\n\nAssistant: To how do i get the client ip behind a proxy? in ktor, here's what you do:\nThe `call.request.origin` property gives [connection information](https://ktor.io/docs/server-requests.html#request_information) about the original caller (the proxy) if the proxy provides proper headers, and the [ForwardedHeader](https://ktor.io/docs/server-forward-headers.html) plugin is installed..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I how can i test the latest commits on main? in ktor?\n\nAssistant: To how can i test the latest commits on main? in ktor, here's what you do:\nYou can get Ktor nightly builds from `jetbrains.space`. Learn more from [Early Access Program](https://ktor.io/eap/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I how can i be sure of which version of ktor am i using? in ktor?\n\nAssistant: To how can i be sure of which version of ktor am i using? in ktor, here's what you do:\nYou can use the [DefaultHeaders](https://ktor.io/docs/server-default-headers.html) plugin that sends a `Server` response header with the Ktor version on it, for example:\n\n```\nServer: ktor-server-core/3.1.0\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I my route is not being executed. how can i debug it? in ktor?\n\nAssistant: To my route is not being executed. how can i debug it? in ktor, here's what you do:\nKtor provides a tracing mechanism to help troubleshooting routing decisions. Check the [Tracing routes](https://ktor.io/docs/server-routing.html#trace_routes) section..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I how to resolve 'response has already been sent'? in ktor?\n\nAssistant: To how to resolve 'response has already been sent'? in ktor, here's what you do:\nThis means that you, or a plugin or interceptor, have already called `call.respond*` functions, and you are calling it again..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I how can i subscribe to ktor events? in ktor?\n\nAssistant: To how can i subscribe to ktor events? in ktor, here's what you do:\nSee the [Application monitoring](https://ktor.io/docs/server-events.html) page to learn more..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I how to resolve 'no configuration setting found for key ktor'? in ktor?\n\nAssistant: To how to resolve 'no configuration setting found for key ktor'? in ktor, here's what you do:\nThis means that Ktor was not able to find a [configuration file](https://ktor.io/docs/server-configuration-file.html). Ensure that there is a configuration file in the `resources` folder, and that the `resources` folder is marked as such. Consider setting up a project using the [Ktor project generator](https://start.ktor.io/) or the [Ktor plugin for intelliJ IDEA Ultimate](https://plugins.jetbrains.com/plugin/16008-ktor) to have a working project as the base. For more information, see [Create, open and run a new Ktor project](https://ktor.io/docs/server-create-a-new-project.html)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I can i use ktor on android? in ktor?\n\nAssistant: To can i use ktor on android? in ktor, here's what you do:\nYes, Ktor servers and clients are known to work on Android 5 (API 21) or greater, at least with the Netty engine..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I why 'curl -i' returns a '404 not found'? in ktor?\n\nAssistant: To why 'curl -i' returns a '404 not found'? in ktor, here's what you do:\n`CURL -I` is an alias of `CURL --head` that performs `HEAD` requests. By default, Ktor doesn't handle `HEAD` requests for `GET` handlers. To enable this capability, install the [AutoHeadResponse](https://ktor.io/docs/server-autoheadresponse.html) plugin..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I how to resolve an infinite redirect when using the 'httpsredirect' plugin? in ktor?\n\nAssistant: To how to resolve an infinite redirect when using the 'httpsredirect' plugin? in ktor, here's what you do:\nThe most probable cause is that your backend is behind a reverse proxy or a load balancer, and that this intermediary is making normal HTTP requests to your backend, thus the `HttpsRedirect` plugin inside your Ktor backend believes that it is a normal HTTP request and responds with the redirect.\n\nNormally, reverse-proxies send some headers describing the original request (like it was HTTPS, or the original IP address), and there is a plugin [ForwardedHeader](https://ktor.io/docs/server-forward-headers.html) to parse those headers so the [HttpsRedirect](https://ktor.io/docs/server-https-redirect.html) plugin knows that the original request was HTTPS..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I how to install 'curl' on windows to use a corresponding engine on kotlin/native? in ktor?\n\nAssistant: To how to install 'curl' on windows to use a corresponding engine on kotlin/native? in ktor, here's what you do:\nThe [Curl](https://ktor.io/docs/client-engines.html#curl) client engine requires installing the `curl` library. On Windows, you may want to consider a MinGW/MSYS2 `curl` binary.\n\n1. Install MinGW/MSYS2 as described in [MinGW/MSYS2](https://www.msys2.org/).\n\n2. Install `libcurl` using the following command:\n\n```\npacman -S mingw-w64-x86_64-curl\n```\n\n3. If you've installed MinGW/MSYS2 to a default location, add C:\\msys64\\mingw64\\bin\\ to the `PATH` environment variable..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I how to resolve 'notransformationfoundexception'? in ktor?\n\nAssistant: To how to resolve 'notransformationfoundexception'? in ktor, here's what you do:\n[NoTransformationFoundException](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.call/-no-transformation-found-exception/index.html) represents the inability to find a suitable transformation for the _received body_ from **resulted** type to **expected** by the client type.\n\n1. Check that the `Accept` header in your request specifies the desired content type and that the `Content-Type` header in the server's response matches the expected type on the client side.\n\n2. Register the necessary content transformations for the specific content types you're working with.\n\nYou can use the [ContentNegotiation](https://ktor.io/docs/serialization-client.html) plugin for the client side. This plugin allows you to specify how to serialize and deserialize data for different content types.\n\n```\nval client = HttpClient(CIO) {\n       install(ContentNegotiation) {\n           json() // Example: Register JSON content transformation\n           // Add more transformations as needed for other content types\n       }\n}\n```\n\n3. Make sure that you install all the needed plugins. Possible missing features:\n\n   - Client [WebSockets](https://ktor.io/docs/websocket-client.html) and Server [WebSockets](https://ktor.io/docs/websocket.html)\n\n   - Client [ContentNegotiation](https://ktor.io/docs/serialization-client.html) and Server [ContentNegotiation](https://ktor.io/docs/serialization.html)\n\n   - [Compression](https://ktor.io/docs/compression.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for FAQ in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Check Ktor version in response header**:\n\n```yaml\nServer: ktor-server-core/3.1.0\n```\n\nThis snippet shows you how to check ktor version in response header, which is an important aspect of faq.\n\n**Install ContentNegotiation plugin**:\n\n```yaml\nval client = HttpClient(CIO) {\n       install(ContentNegotiation) {\n           json() // Example: Register JSON content transformation\n           // Add more transformations as needed for other content types\n       }\n}\n```\n\nThis snippet shows you how to install contentnegotiation plugin, which is an important aspect of faq.\n\n", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "code_examples", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using FAQ in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure that Ktor artifacts are added in the build script to fix unresolved imports.\n\nUse the `Runtime.getRuntime().addShutdownHook` for graceful server shutdown handling.\n\nInstall the necessary plugins for content transformation and WebSockets.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/faq.html", "title": "FAQ", "description": "Frequently asked questions about Ktor, including pronunciation, contributions, troubleshooting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-03-01 03:03:54", "type": "best_practices", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:07.631310309", "og:url": "https://ktor.io/docs/3.1.1/faq.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "FAQ | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/faq.html", "title": "FAQ | Ktor Documentation", "ogSiteName": "Ktor Help", "ogDescription": "", "ogTitle": "FAQ | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:title": "FAQ | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "og:type": "website", "scrapeId": "80559bba-b536-4359-b1b0-05cbfd78bfe7", "sourceURL": "https://ktor.io/docs/faq.html", "url": "https://ktor.io/docs/faq.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Heroku is in ktor?\n\nAssistant: Sure, I'd be happy to explain Heroku in ktor.\n\n# Heroku\n\nIn this tutorial, we'll show you how to prepare and deploy a Ktor application to Heroku.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nBefore starting this tutorial, make sure that the following prerequisites are met:\n\n- You have a Heroku account.\n\n- [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli) is installed on your machine.\n\n## Create a sample application\n\nCreate a sample application as described in [Create, open and run a new Ktor project](https://ktor.io/docs/server-create-a-new-project.html).\n\n> ### tip\n>\n> Note that Ktor provides two approaches to [create and configure a server](https://ktor.io/docs/server-create-and-configure.html): in code or by using a configuration file. The only difference in deploying is how to [specify a port](https://ktor.io/docs/heroku.html#port) used to listen for incoming requests.\n\n## Prepare an application\n\n### Step 1: Configure a port\n\nFirst, you need to specify a port used to listen for incoming requests. Since Heroku uses the `PORT` environment variable, you need to configure the application to use a value of this variable. Depending on the way used to [configure a Ktor server](https://ktor.io/docs/server-create-and-configure.html), do one of the following:\n\n- If server configuration is specified in code, you can obtain the environment variable value using `System.getenv`. Open the `Application.kt` file placed in the `src/main/kotlin/com/example` folder and change the `port` parameter value of the `embeddedServer` function as shown below:\n\n\n\n\n```\nfun main() {\n     embeddedServer(Netty, port = System.getenv(\"PORT\").toInt()) {\n         // ...\n     }.start(wait = true)\n}\n```\n\n- If your server configuration is specified in the `application.conf` file, you can assign the environment variable to the `port` parameter by using the `${ENV}` syntax. Open the `application.conf` file placed in `src/main/resources` and update it as shown below:\n\n\n\n\n```\nktor {\n      deployment {\n          port = 8080\n          port = ${?PORT}\n      }\n}\n```\n\n### Step 2: Add a stage task\n\nOpen the `build.gradle.kts` file and add a custom `stage` task used by Heroku to make an executable that gets run on Heroku's platform:\n\n```\ntasks {\n    create(\"stage\").dependsOn(\"installDist\")\n}\n```\n\nNote that the `installDist` task comes with the Gradle [application plugin](https://docs.gradle.org/current/userguide/application_plugin.html), which is already added to the sample project.\n\n### Step 3: Create a Procfile\n\nCreate a [Procfile](https://devcenter.heroku.com/articles/procfile) in a project root and add the following content:\n\n```\nweb: ./build/install/ktor-get-started-sample/bin/ktor-get-started-sample\n```\n\nThis file specifies a path to the application's executable generated by the [stage](https://ktor.io/docs/heroku.html#stage) task and allows Heroku to start the application. You might need to replace `ktor-get-started-sample` with you project name.\n\n## Deploy an application\n\nTo deploy the application to Heroku using Git, open the terminal and follow the steps below:\n\n1. Commit changes made in the [previous section](https://ktor.io/docs/heroku.html#prepare-app) locally:\n\n\n\n```\ngit add .\ngit commit -m \"Prepare app for deploying\"\n```\n\n2. Login to Heroku CLI:\n\n\n\n```\nheroku login\n```\n\n3. Create a Heroku application using the `heroku create` command. You need to replace `ktor-sample-heroku` with a name of your application:\n\n\n\n```\nheroku create ktor-sample-heroku\n```\n\nThis command does two things:\n\n   - Creates a new Heroku application, which is available on the [web dashboard](https://dashboard.heroku.com/apps/).\n   - Adds a new Git remote called `heroku` to a local repository.\n4. To deploy the application, push changes to `heroku main`...\n\n\n\n```\ngit push heroku main\n```\n\n... and wait until Heroku builds and publishes the application:\n\n\n\n```\n...\nremote: https://ktor-sample-heroku.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy... done.\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/heroku.html", "title": "Heroku", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor application to Heroku.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:04:19", "type": "overview", "page_metadata": {"ogLocale": "en_US", "og:title": "Heroku | Ktor", "language": "en-US", "title": "Heroku | Ktor Documentation", "built-on": "2025-02-26T14:01:04.691626721", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/heroku.html", "twitter:card": "summary_large_image", "ogTitle": "Heroku | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:title": "Heroku | Ktor", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/heroku.html", "og:description": "", "twitter:description": "", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "56b3ccc7-ce3a-4afa-82a0-9eee68356729", "sourceURL": "https://ktor.io/docs/heroku.html", "url": "https://ktor.io/docs/heroku.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nBefore starting this tutorial, make sure that the following prerequisites are met:\n\n- You have a Heroku account.\n\n- [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli) is installed on your machine..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/heroku.html", "title": "Heroku", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor application to Heroku.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:04:19", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "og:title": "Heroku | Ktor", "language": "en-US", "title": "Heroku | Ktor Documentation", "built-on": "2025-02-26T14:01:04.691626721", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/heroku.html", "twitter:card": "summary_large_image", "ogTitle": "Heroku | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:title": "Heroku | Ktor", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/heroku.html", "og:description": "", "twitter:description": "", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "56b3ccc7-ce3a-4afa-82a0-9eee68356729", "sourceURL": "https://ktor.io/docs/heroku.html", "url": "https://ktor.io/docs/heroku.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a sample application in ktor?\n\nAssistant: To create a sample application in ktor, here's what you do:\nCreate a sample application as described in [Create, open and run a new Ktor project](https://ktor.io/docs/server-create-a-new-project.html).\n\n> ### tip\n>\n> Note that Ktor provides two approaches to [create and configure a server](https://ktor.io/docs/server-create-and-configure.html): in code or by using a configuration file. The only difference in deploying is how to [specify a port](https://ktor.io/docs/heroku.html#port) used to listen for incoming requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/heroku.html", "title": "Heroku", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor application to Heroku.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:04:19", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "og:title": "Heroku | Ktor", "language": "en-US", "title": "Heroku | Ktor Documentation", "built-on": "2025-02-26T14:01:04.691626721", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/heroku.html", "twitter:card": "summary_large_image", "ogTitle": "Heroku | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:title": "Heroku | Ktor", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/heroku.html", "og:description": "", "twitter:description": "", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "56b3ccc7-ce3a-4afa-82a0-9eee68356729", "sourceURL": "https://ktor.io/docs/heroku.html", "url": "https://ktor.io/docs/heroku.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prepare an application in ktor?\n\nAssistant: To prepare an application in ktor, here's what you do:\n### Step 1: Configure a port\n\nFirst, you need to specify a port used to listen for incoming requests. Since Heroku uses the `PORT` environment variable, you need to configure the application to use a value of this variable. Depending on the way used to [configure a Ktor server](https://ktor.io/docs/server-create-and-configure.html), do one of the following:\n\n- If server configuration is specified in code, you can obtain the environment variable value using `System.getenv`. Open the `Application.kt` file placed in the `src/main/kotlin/com/example` folder and change the `port` parameter value of the `embeddedServer` function as shown below:\n\n\n\n\n```\nfun main() {\n     embeddedServer(Netty, port = System.getenv(\"PORT\").toInt()) {\n         // ...\n     }.start(wait = true)\n}\n```\n\n- If your server configuration is specified in the `application.conf` file, you can assign the environment variable to the `port` parameter by using the `${ENV}` syntax. Open the `application.conf` file placed in `src/main/resources` and update it as shown below:\n\n\n\n\n```\nktor {\n      deployment {\n          port = 8080\n          port = ${?PORT}\n      }\n}\n```\n\n### Step 2: Add a stage task\n\nOpen the `build.gradle.kts` file and add a custom `stage` task used by Heroku to make an executable that gets run on Heroku's platform:\n\n```\ntasks {\n    create(\"stage\").dependsOn(\"installDist\")\n}\n```\n\nNote that the `installDist` task comes with the Gradle [application plugin](https://docs.gradle.org/current/userguide/application_plugin.html), which is already added to the sample project.\n\n### Step 3: Create a Procfile\n\nCreate a [Procfile](https://devcenter.heroku.com/articles/procfile) in a project root and add the following content:\n\n```\nweb: ./build/install/ktor-get-started-sample/bin/ktor-get-started-sample\n```\n\nThis file specifies a path to the application's executable generated by the [stage](https://ktor.io/docs/heroku.html#stage) task and allows Heroku to start the application. You might need to replace `ktor-get-started-sample` with you project name..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/heroku.html", "title": "Heroku", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor application to Heroku.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:04:19", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "og:title": "Heroku | Ktor", "language": "en-US", "title": "Heroku | Ktor Documentation", "built-on": "2025-02-26T14:01:04.691626721", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/heroku.html", "twitter:card": "summary_large_image", "ogTitle": "Heroku | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:title": "Heroku | Ktor", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/heroku.html", "og:description": "", "twitter:description": "", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "56b3ccc7-ce3a-4afa-82a0-9eee68356729", "sourceURL": "https://ktor.io/docs/heroku.html", "url": "https://ktor.io/docs/heroku.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I deploy an application in ktor?\n\nAssistant: To deploy an application in ktor, here's what you do:\nTo deploy the application to Heroku using Git, open the terminal and follow the steps below:\n\n1. Commit changes made in the [previous section](https://ktor.io/docs/heroku.html#prepare-app) locally:\n\n\n\n```\ngit add .\ngit commit -m \"Prepare app for deploying\"\n```\n\n2. Login to Heroku CLI:\n\n\n\n```\nheroku login\n```\n\n3. Create a Heroku application using the `heroku create` command. You need to replace `ktor-sample-heroku` with a name of your application:\n\n\n\n```\nheroku create ktor-sample-heroku\n```\n\nThis command does two things:\n\n   - Creates a new Heroku application, which is available on the [web dashboard](https://dashboard.heroku.com/apps/).\n   - Adds a new Git remote called `heroku` to a local repository.\n4. To deploy the application, push changes to `heroku main`...\n\n\n\n```\ngit push heroku main\n```\n\n... and wait until Heroku builds and publishes the application:\n\n\n\n```\n...\nremote: https://ktor-sample-heroku.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy... done.\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/heroku.html", "title": "Heroku", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor application to Heroku.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:04:19", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "og:title": "Heroku | Ktor", "language": "en-US", "title": "Heroku | Ktor Documentation", "built-on": "2025-02-26T14:01:04.691626721", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/heroku.html", "twitter:card": "summary_large_image", "ogTitle": "Heroku | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:title": "Heroku | Ktor", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/heroku.html", "og:description": "", "twitter:description": "", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "56b3ccc7-ce3a-4afa-82a0-9eee68356729", "sourceURL": "https://ktor.io/docs/heroku.html", "url": "https://ktor.io/docs/heroku.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Heroku in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure a port in code**:\n\n```yaml\nfun main() {\n     embeddedServer(Netty, port = System.getenv(\"PORT\").toInt()) {\n         // ...\n     }.start(wait = true)\n}\n```\n\nThis snippet shows you how to configure a port in code, which is an important aspect of heroku.\n\n**Configure a port in application.conf**:\n\n```yaml\nktor {\n      deployment {\n          port = 8080\n          port = ${?PORT}\n      }\n}\n```\n\nThis snippet shows you how to configure a port in application.conf, which is an important aspect of heroku.\n\n", "metadata": {"source_url": "https://ktor.io/docs/heroku.html", "title": "Heroku", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor application to Heroku.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:04:19", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "og:title": "Heroku | Ktor", "language": "en-US", "title": "Heroku | Ktor Documentation", "built-on": "2025-02-26T14:01:04.691626721", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/heroku.html", "twitter:card": "summary_large_image", "ogTitle": "Heroku | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:title": "Heroku | Ktor", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/heroku.html", "og:description": "", "twitter:description": "", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "56b3ccc7-ce3a-4afa-82a0-9eee68356729", "sourceURL": "https://ktor.io/docs/heroku.html", "url": "https://ktor.io/docs/heroku.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Heroku in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNote that Ktor provides two approaches to create and configure a server: in code or by using a configuration file. The only difference in deploying is how to specify a port used to listen for incoming requests.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/heroku.html", "title": "Heroku", "description": "In this tutorial, we'll show you how to prepare and deploy a Ktor application to Heroku.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:04:19", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "og:title": "Heroku | Ktor", "language": "en-US", "title": "Heroku | Ktor Documentation", "built-on": "2025-02-26T14:01:04.691626721", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/heroku.html", "twitter:card": "summary_large_image", "ogTitle": "Heroku | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:title": "Heroku | Ktor", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/heroku.html", "og:description": "", "twitter:description": "", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "56b3ccc7-ce3a-4afa-82a0-9eee68356729", "sourceURL": "https://ktor.io/docs/heroku.html", "url": "https://ktor.io/docs/heroku.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Authentication and authorization in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Authentication and authorization in Ktor Server in ktor.\n\n# Server Plugin Authentication and authorization in Ktor Server\n\nKtor provides the Authentication plugin to handle authentication and authorization. Typical usage scenarios include logging in users, granting access to specific resources, and securely transmitting information between parties.Here's a quick rundown of what this is about:\n\n## Supported authentication types\n\nKtor supports the following authentication and authorization schemes:\n\n### HTTP authentication\n\nHTTP provides a general framework for access control and authentication. In Ktor, you can use the following HTTP authentication schemes:\n\n- Basic - uses Base64 encoding to provide a username and password. Generally is not recommended if not used in combination with HTTPS.\n- Digest - an authentication method that communicates user credentials in an encrypted form by applying a hash function to the username and password.\n- Bearer - an authentication scheme that involves security tokens called bearer tokens. The Bearer authentication scheme is used as part of OAuth or JWT, but you can also provide custom logic for authorizing bearer tokens.\n\n### Form-based authentication\n\nForm-based authentication uses a web form to collect credential information and authenticate a user.\n\n### JSON Web Tokens (JWT)\n\nJSON Web Token is an open standard for securely transmitting information between parties as a JSON object. You can use JSON Web Tokens for authorization: when the user is logged in, each request will include a token, allowing the user to access resources that are permitted with that token. In Ktor, you can verify a token and validate the claims contained within it using the jwt authentication.\n\n### LDAP\n\nLDAP is an open and cross-platform protocol used for directory services authentication. Ktor provides the ldapAuthenticate function to authenticate user credentials against a specified LDAP server.\n\n### OAuth\n\nOAuth is an open standard for securing access to APIs. The oauth provider in Ktor allows you to implement authentication using external providers such as Google, Facebook, Twitter, and so on.\n\n### Session\n\nSessions provide a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client. In Ktor, a user that already has an associated session can be authenticated using the session provider. Learn how to do this from Session authentication in Ktor Server.\n\n### Custom\n\nKtor also provides an API for creating custom plugins, which can be used to implement your own plugin for handling authentication and authorization.\n\n## Add dependencies\n\nTo use Authentication, you need to include the ktor-server-auth artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nNote that some authentication providers, such as JWT and LDAP, require additional artifacts.\n\n## Install Authentication\n\nTo install the Authentication plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install Authentication...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\n### embeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Authentication)\n        // ...\n    }.start(wait = true)\n}\n```\n\n### module\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\nfun Application.module() {\n    install(Authentication)\n    // ...\n}\n```\n\n## Configure Authentication\n\nAfter installing Authentication, you can configure and use Authentication as follows:\n\n### Step 1: Choose an authentication provider\nTo use a specific authentication provider, such as basic, digest, or form, you need to call the corresponding function inside the install block. For example, to use basic authentication, call the .basic() function:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    basic {\n        // Configure basic authentication\n    }\n}\n```\n\n### Step 2: Specify a provider name\nA function for using a specific provider optionally allows you to specify a provider name. A code sample below installs the basic and form providers with the \"auth-basic\" and \"auth-form\" names, respectively:\n```\ninstall(Authentication) {\n    basic(\"auth-basic\") {\n        // Configure basic authentication\n    }\n    form(\"auth-form\") {\n        // Configure form authentication\n    }\n    // ...\n}\n```\n\n### Step 3: Configure a provider\nEach provider type has its own configuration. For example, the BasicAuthenticationProvider.Config class provides options for the .basic() function. The key function in this class is validate(), which is responsible for validating a username and password. The following code example demonstrates its usage:\n```\ninstall(Authentication) {\n    basic(\"auth-basic\") {\n        realm = \"Access to the '/' path\"\n        validate { credentials ->\n            if (credentials.name == \"jetbrains\" && credentials.password == \"foobar\") {\n                UserIdPrincipal(credentials.name)\n            } else {\n                null\n            }\n        }\n    }\n}\n```\n\n### Step 4: Protect specific resources\nThe final step is to protect specific resources in your application. You can do this by using the authenticate() function. This function accepts two optional parameters:\n- A name of a provider used to authenticate nested routes. The code snippet below uses a provider with the auth-basic name to protect the /login and /orders routes:\n```\nrouting {\n      authenticate(\"auth-basic\") {\n          get(\"/login\") {\n              // ...\n          }\n          get(\"/orders\") {\n              // ...\n          }\n      }\n      get(\"/\") {\n          // ...\n      }\n}\n```\n- A strategy used to resolve nested authentication providers. This strategy is represented by the AuthenticationStrategy enumeration value.\n\n## Get a principal inside a route handler\n\nUpon successful authentication, you can retrieve an authenticated principal inside a route handler using the call.principal() function. This function accepts a specific principal type returned by the configured authentication provider. In the following example, call.principal() is used to obtain UserIdPrincipal and get a name of an authenticated user.\n```\nrouting {\n    authenticate(\"auth-basic\") {\n        get(\"/\") {\n            call.respondText(\"Hello, ${call.principal<UserIdPrincipal>()?.name}!\")\n        }\n    }\n}\n```\nIf you use session authentication, a principal might be a data class that stores session data. So, you need to pass this data class to call.principal():\n```\nauthenticate(\"auth-session\") {\n    get(\"/hello\") {\n        val userSession = call.principal<UserSession>()\n    }\n}\n```\nIn the case of nested authentication providers, you can pass a provider name to call.principal() to get a principal for the desired provider.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/authentication.html", "title": "Server Plugin Authentication and authorization in Ktor Server", "description": "Ktor provides the Authentication plugin to handle authentication and authorization. Typical usage scenarios include logging in users, granting access to specific resources, and securely transmitting information between parties.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:09:21", "type": "overview", "page_metadata": {"ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Authentication and authorization in Ktor Server | Ktor Documentation", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-auth.html", "language": "en-US", "og:title": "Authentication and authorization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Authentication and authorization in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auth.html", "twitter:card": "summary_large_image", "twitter:title": "Authentication and authorization in Ktor Server | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.324390054", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "174c6a61-0961-4a1f-a2ed-f1e1ad5ff1a6", "sourceURL": "https://ktor.io/docs/authentication.html", "url": "https://ktor.io/docs/server-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I supported authentication types in ktor?\n\nAssistant: To supported authentication types in ktor, here's what you do:\nKtor supports the following authentication and authorization schemes:\n\n### HTTP authentication\n\nHTTP provides a general framework for access control and authentication. In Ktor, you can use the following HTTP authentication schemes:\n\n- Basic - uses Base64 encoding to provide a username and password. Generally is not recommended if not used in combination with HTTPS.\n- Digest - an authentication method that communicates user credentials in an encrypted form by applying a hash function to the username and password.\n- Bearer - an authentication scheme that involves security tokens called bearer tokens. The Bearer authentication scheme is used as part of OAuth or JWT, but you can also provide custom logic for authorizing bearer tokens.\n\n### Form-based authentication\n\nForm-based authentication uses a web form to collect credential information and authenticate a user.\n\n### JSON Web Tokens (JWT)\n\nJSON Web Token is an open standard for securely transmitting information between parties as a JSON object. You can use JSON Web Tokens for authorization: when the user is logged in, each request will include a token, allowing the user to access resources that are permitted with that token. In Ktor, you can verify a token and validate the claims contained within it using the jwt authentication.\n\n### LDAP\n\nLDAP is an open and cross-platform protocol used for directory services authentication. Ktor provides the ldapAuthenticate function to authenticate user credentials against a specified LDAP server.\n\n### OAuth\n\nOAuth is an open standard for securing access to APIs. The oauth provider in Ktor allows you to implement authentication using external providers such as Google, Facebook, Twitter, and so on.\n\n### Session\n\nSessions provide a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client. In Ktor, a user that already has an associated session can be authenticated using the session provider. Learn how to do this from Session authentication in Ktor Server.\n\n### Custom\n\nKtor also provides an API for creating custom plugins, which can be used to implement your own plugin for handling authentication and authorization..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/authentication.html", "title": "Server Plugin Authentication and authorization in Ktor Server", "description": "Ktor provides the Authentication plugin to handle authentication and authorization. Typical usage scenarios include logging in users, granting access to specific resources, and securely transmitting information between parties.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:09:21", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Authentication and authorization in Ktor Server | Ktor Documentation", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-auth.html", "language": "en-US", "og:title": "Authentication and authorization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Authentication and authorization in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auth.html", "twitter:card": "summary_large_image", "twitter:title": "Authentication and authorization in Ktor Server | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.324390054", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "174c6a61-0961-4a1f-a2ed-f1e1ad5ff1a6", "sourceURL": "https://ktor.io/docs/authentication.html", "url": "https://ktor.io/docs/server-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use Authentication, you need to include the ktor-server-auth artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nNote that some authentication providers, such as JWT and LDAP, require additional artifacts..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/authentication.html", "title": "Server Plugin Authentication and authorization in Ktor Server", "description": "Ktor provides the Authentication plugin to handle authentication and authorization. Typical usage scenarios include logging in users, granting access to specific resources, and securely transmitting information between parties.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:09:21", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Authentication and authorization in Ktor Server | Ktor Documentation", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-auth.html", "language": "en-US", "og:title": "Authentication and authorization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Authentication and authorization in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auth.html", "twitter:card": "summary_large_image", "twitter:title": "Authentication and authorization in Ktor Server | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.324390054", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "174c6a61-0961-4a1f-a2ed-f1e1ad5ff1a6", "sourceURL": "https://ktor.io/docs/authentication.html", "url": "https://ktor.io/docs/server-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install authentication in ktor?\n\nAssistant: To install authentication in ktor, here's what you do:\nTo install the Authentication plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install Authentication...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\n### embeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Authentication)\n        // ...\n    }.start(wait = true)\n}\n```\n\n### module\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\nfun Application.module() {\n    install(Authentication)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/authentication.html", "title": "Server Plugin Authentication and authorization in Ktor Server", "description": "Ktor provides the Authentication plugin to handle authentication and authorization. Typical usage scenarios include logging in users, granting access to specific resources, and securely transmitting information between parties.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:09:21", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Authentication and authorization in Ktor Server | Ktor Documentation", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-auth.html", "language": "en-US", "og:title": "Authentication and authorization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Authentication and authorization in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auth.html", "twitter:card": "summary_large_image", "twitter:title": "Authentication and authorization in Ktor Server | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.324390054", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "174c6a61-0961-4a1f-a2ed-f1e1ad5ff1a6", "sourceURL": "https://ktor.io/docs/authentication.html", "url": "https://ktor.io/docs/server-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure authentication in ktor?\n\nAssistant: To configure authentication in ktor, here's what you do:\nAfter installing Authentication, you can configure and use Authentication as follows:\n\n### Step 1: Choose an authentication provider\nTo use a specific authentication provider, such as basic, digest, or form, you need to call the corresponding function inside the install block. For example, to use basic authentication, call the .basic() function:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    basic {\n        // Configure basic authentication\n    }\n}\n```\n\n### Step 2: Specify a provider name\nA function for using a specific provider optionally allows you to specify a provider name. A code sample below installs the basic and form providers with the \"auth-basic\" and \"auth-form\" names, respectively:\n```\ninstall(Authentication) {\n    basic(\"auth-basic\") {\n        // Configure basic authentication\n    }\n    form(\"auth-form\") {\n        // Configure form authentication\n    }\n    // ...\n}\n```\n\n### Step 3: Configure a provider\nEach provider type has its own configuration. For example, the BasicAuthenticationProvider.Config class provides options for the .basic() function. The key function in this class is validate(), which is responsible for validating a username and password. The following code example demonstrates its usage:\n```\ninstall(Authentication) {\n    basic(\"auth-basic\") {\n        realm = \"Access to the '/' path\"\n        validate { credentials ->\n            if (credentials.name == \"jetbrains\" && credentials.password == \"foobar\") {\n                UserIdPrincipal(credentials.name)\n            } else {\n                null\n            }\n        }\n    }\n}\n```\n\n### Step 4: Protect specific resources\nThe final step is to protect specific resources in your application. You can do this by using the authenticate() function. This function accepts two optional parameters:\n- A name of a provider used to authenticate nested routes. The code snippet below uses a provider with the auth-basic name to protect the /login and /orders routes:\n```\nrouting {\n      authenticate(\"auth-basic\") {\n          get(\"/login\") {\n              // ...\n          }\n          get(\"/orders\") {\n              // ...\n          }\n      }\n      get(\"/\") {\n          // ...\n      }\n}\n```\n- A strategy used to resolve nested authentication providers. This strategy is represented by the AuthenticationStrategy enumeration value..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/authentication.html", "title": "Server Plugin Authentication and authorization in Ktor Server", "description": "Ktor provides the Authentication plugin to handle authentication and authorization. Typical usage scenarios include logging in users, granting access to specific resources, and securely transmitting information between parties.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:09:21", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Authentication and authorization in Ktor Server | Ktor Documentation", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-auth.html", "language": "en-US", "og:title": "Authentication and authorization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Authentication and authorization in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auth.html", "twitter:card": "summary_large_image", "twitter:title": "Authentication and authorization in Ktor Server | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.324390054", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "174c6a61-0961-4a1f-a2ed-f1e1ad5ff1a6", "sourceURL": "https://ktor.io/docs/authentication.html", "url": "https://ktor.io/docs/server-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I get a principal inside a route handler in ktor?\n\nAssistant: To get a principal inside a route handler in ktor, here's what you do:\nUpon successful authentication, you can retrieve an authenticated principal inside a route handler using the call.principal() function. This function accepts a specific principal type returned by the configured authentication provider. In the following example, call.principal() is used to obtain UserIdPrincipal and get a name of an authenticated user.\n```\nrouting {\n    authenticate(\"auth-basic\") {\n        get(\"/\") {\n            call.respondText(\"Hello, ${call.principal<UserIdPrincipal>()?.name}!\")\n        }\n    }\n}\n```\nIf you use session authentication, a principal might be a data class that stores session data. So, you need to pass this data class to call.principal():\n```\nauthenticate(\"auth-session\") {\n    get(\"/hello\") {\n        val userSession = call.principal<UserSession>()\n    }\n}\n```\nIn the case of nested authentication providers, you can pass a provider name to call.principal() to get a principal for the desired provider..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/authentication.html", "title": "Server Plugin Authentication and authorization in Ktor Server", "description": "Ktor provides the Authentication plugin to handle authentication and authorization. Typical usage scenarios include logging in users, granting access to specific resources, and securely transmitting information between parties.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:09:21", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Authentication and authorization in Ktor Server | Ktor Documentation", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-auth.html", "language": "en-US", "og:title": "Authentication and authorization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Authentication and authorization in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auth.html", "twitter:card": "summary_large_image", "twitter:title": "Authentication and authorization in Ktor Server | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.324390054", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "174c6a61-0961-4a1f-a2ed-f1e1ad5ff1a6", "sourceURL": "https://ktor.io/docs/authentication.html", "url": "https://ktor.io/docs/server-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Authentication and authorization in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies (gradle kotlin), which is an important aspect of server plugin authentication and authorization in ktor server.\n\n**Add dependencies (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies (gradle groovy), which is an important aspect of server plugin authentication and authorization in ktor server.\n\n**Add dependencies (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies (maven), which is an important aspect of server plugin authentication and authorization in ktor server.\n\n**Install Authentication (embeddedServer)**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Authentication)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install authentication (embeddedserver), which is an important aspect of server plugin authentication and authorization in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/authentication.html", "title": "Server Plugin Authentication and authorization in Ktor Server", "description": "Ktor provides the Authentication plugin to handle authentication and authorization. Typical usage scenarios include logging in users, granting access to specific resources, and securely transmitting information between parties.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:09:21", "type": "code_examples", "page_metadata": {"ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Authentication and authorization in Ktor Server | Ktor Documentation", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-auth.html", "language": "en-US", "og:title": "Authentication and authorization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Authentication and authorization in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auth.html", "twitter:card": "summary_large_image", "twitter:title": "Authentication and authorization in Ktor Server | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.324390054", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "174c6a61-0961-4a1f-a2ed-f1e1ad5ff1a6", "sourceURL": "https://ktor.io/docs/authentication.html", "url": "https://ktor.io/docs/server-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Authentication and authorization in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn the client, Ktor provides the Authentication plugin for handling authentication and authorization.\n\nYou can also create a custom principal. This might be useful in the following cases: Mapping the credentials to a custom principal allows you to have additional information about the authenticated principal inside a route handler, If you use session authentication, a principal might be a data class that stores session data.\n\nTo skip authentication based on specific criteria, use skipWhen(). For example, you can skip basic authentication if a session already exists.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/authentication.html", "title": "Server Plugin Authentication and authorization in Ktor Server", "description": "Ktor provides the Authentication plugin to handle authentication and authorization. Typical usage scenarios include logging in users, granting access to specific resources, and securely transmitting information between parties.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:09:21", "type": "best_practices", "page_metadata": {"ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Authentication and authorization in Ktor Server | Ktor Documentation", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-auth.html", "language": "en-US", "og:title": "Authentication and authorization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Authentication and authorization in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auth.html", "twitter:card": "summary_large_image", "twitter:title": "Authentication and authorization in Ktor Server | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.324390054", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "174c6a61-0961-4a1f-a2ed-f1e1ad5ff1a6", "sourceURL": "https://ktor.io/docs/authentication.html", "url": "https://ktor.io/docs/server-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Ktor releases is in ktor?\n\nAssistant: Sure, I'd be happy to explain Ktor releases in ktor.\n\n# Ktor releases\n\nKtor follows Semantic Versioning and provides details on major, minor, and patch releases, along with information on plugins and release highlights.Here's a quick rundown of what this is about:\n\n## Gradle plugin\n\nThe Gradle Ktor plugin and the framework are in the same release cycle. You can find all plugin releases on the Gradle Plugin Portal.\n\n## IntelliJ Ultimate plugin\n\nThe IntelliJ Ktor plugin is released independently of the Ktor framework and uses the same release cycle as IntelliJ IDEA Ultimate.\n\n## Update to a new release\n\nThe IntelliJ Ktor plugin allows you to migrate your Ktor project to the latest version. You can learn more from the Migrate projects section.\n\n## Release details\n\nThe following table lists details of the latest Ktor releases.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/releases.html", "title": "Ktor releases", "description": "Ktor follows Semantic Versioning and provides details on major, minor, and patch releases, along with information on plugins and release highlights.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:09:30", "type": "overview", "page_metadata": {"title": "Ktor releases | Ktor Documentation", "language": "en-US", "ogTitle": "Ktor releases | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/releases.html", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/releases.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:description": "", "ogDescription": "", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.746699049", "twitter:title": "Ktor releases | Ktor", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:title": "Ktor releases | Ktor", "scrapeId": "9af709e3-bcd2-4c96-91b8-d17187893c14", "sourceURL": "https://ktor.io/docs/releases.html", "url": "https://ktor.io/docs/releases.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I gradle plugin in ktor?\n\nAssistant: To gradle plugin in ktor, here's what you do:\nThe Gradle Ktor plugin and the framework are in the same release cycle. You can find all plugin releases on the Gradle Plugin Portal..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/releases.html", "title": "Ktor releases", "description": "Ktor follows Semantic Versioning and provides details on major, minor, and patch releases, along with information on plugins and release highlights.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:09:30", "type": "section_detail", "page_metadata": {"title": "Ktor releases | Ktor Documentation", "language": "en-US", "ogTitle": "Ktor releases | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/releases.html", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/releases.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:description": "", "ogDescription": "", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.746699049", "twitter:title": "Ktor releases | Ktor", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:title": "Ktor releases | Ktor", "scrapeId": "9af709e3-bcd2-4c96-91b8-d17187893c14", "sourceURL": "https://ktor.io/docs/releases.html", "url": "https://ktor.io/docs/releases.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I intellij ultimate plugin in ktor?\n\nAssistant: To intellij ultimate plugin in ktor, here's what you do:\nThe IntelliJ Ktor plugin is released independently of the Ktor framework and uses the same release cycle as IntelliJ IDEA Ultimate..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/releases.html", "title": "Ktor releases", "description": "Ktor follows Semantic Versioning and provides details on major, minor, and patch releases, along with information on plugins and release highlights.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:09:30", "type": "section_detail", "page_metadata": {"title": "Ktor releases | Ktor Documentation", "language": "en-US", "ogTitle": "Ktor releases | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/releases.html", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/releases.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:description": "", "ogDescription": "", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.746699049", "twitter:title": "Ktor releases | Ktor", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:title": "Ktor releases | Ktor", "scrapeId": "9af709e3-bcd2-4c96-91b8-d17187893c14", "sourceURL": "https://ktor.io/docs/releases.html", "url": "https://ktor.io/docs/releases.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I update to a new release in ktor?\n\nAssistant: To update to a new release in ktor, here's what you do:\nThe IntelliJ Ktor plugin allows you to migrate your Ktor project to the latest version. You can learn more from the Migrate projects section..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/releases.html", "title": "Ktor releases", "description": "Ktor follows Semantic Versioning and provides details on major, minor, and patch releases, along with information on plugins and release highlights.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:09:30", "type": "section_detail", "page_metadata": {"title": "Ktor releases | Ktor Documentation", "language": "en-US", "ogTitle": "Ktor releases | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/releases.html", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/releases.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:description": "", "ogDescription": "", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.746699049", "twitter:title": "Ktor releases | Ktor", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:title": "Ktor releases | Ktor", "scrapeId": "9af709e3-bcd2-4c96-91b8-d17187893c14", "sourceURL": "https://ktor.io/docs/releases.html", "url": "https://ktor.io/docs/releases.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I release details in ktor?\n\nAssistant: To release details in ktor, here's what you do:\nThe following table lists details of the latest Ktor releases..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/releases.html", "title": "Ktor releases", "description": "Ktor follows Semantic Versioning and provides details on major, minor, and patch releases, along with information on plugins and release highlights.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:09:30", "type": "section_detail", "page_metadata": {"title": "Ktor releases | Ktor Documentation", "language": "en-US", "ogTitle": "Ktor releases | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/releases.html", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/releases.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:description": "", "ogDescription": "", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.746699049", "twitter:title": "Ktor releases | Ktor", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:title": "Ktor releases | Ktor", "scrapeId": "9af709e3-bcd2-4c96-91b8-d17187893c14", "sourceURL": "https://ktor.io/docs/releases.html", "url": "https://ktor.io/docs/releases.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Ktor releases in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor each major and minor release, several preview (EAP) versions are shipped for trying new features before they are released.\n\nRefer to the migration guide for breaking changes when upgrading to a new major version.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/releases.html", "title": "Ktor releases", "description": "Ktor follows Semantic Versioning and provides details on major, minor, and patch releases, along with information on plugins and release highlights.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:09:30", "type": "best_practices", "page_metadata": {"title": "Ktor releases | Ktor Documentation", "language": "en-US", "ogTitle": "Ktor releases | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/releases.html", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/releases.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:description": "", "ogDescription": "", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.746699049", "twitter:title": "Ktor releases | Ktor", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:title": "Ktor releases | Ktor", "scrapeId": "9af709e3-bcd2-4c96-91b8-d17187893c14", "sourceURL": "https://ktor.io/docs/releases.html", "url": "https://ktor.io/docs/releases.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Create a WebSocket application in Kotlin with Ktor is in ktor?\n\nAssistant: Sure, I'd be happy to explain Create a WebSocket application in Kotlin with Ktor in ktor.\n\n# Create a WebSocket application in Kotlin with Ktor\n\nThis article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nYou can do this tutorial independently, however, we recommend that you complete the Create RESTful APIs tutorial to get familiar with Content Negotiation and REST.\n\nWe recommend that you install IntelliJ IDEA, but you could use another IDE of your choice.\n\n## Hello WebSockets\n\nIn this tutorial, you will build on the Task Manager service developed in the Create RESTful APIs tutorial by adding the ability to exchange Task objects with a client, through a WebSocket connection. To achieve this, you will need to add the WebSockets Plugin. While you could manually add it to your existing project, for the sake of this tutorial, we'll start from scratch by creating a new project.\n\n## Create the initial project with plugins\n\n1. Navigate to the Ktor Project Generator.\n\n2. In the Project artifact field, enter com.example.ktor-websockets-task-app as the name of your project artifact.\n\n3. In the plugins section search for and add the following plugins by clicking on the Add button:\n   - Routing\n   - Content Negotiation\n   - Kotlinx.serialization\n   - WebSockets\n   - Static Content\n\n4. Once you have added the plugins, click on the 5 plugins button at the top right of the plugin section, to display the added plugins.\n\n5. Click the Download button to generate and download your Ktor project.\n\n## Add starter code\n\n1. Navigate to src/main/kotlin and create a new subpackage called model.\n\n2. Inside the model package create a new Task.kt file.\n\n3. Open the Task.kt file and add an enum to represent priorities and a data class to represent tasks:\n\n```kotlin\npackage model\n\nimport kotlinx.serialization.Serializable\n\nenum class Priority {\n       Low, Medium, High, Vital\n}\n\n@Serializable\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```\n\n4. Open the Sockets.kt file and replace the existing Application.configureSockets() function with the implementation below:\n\n```kotlin\nfun Application.configureSockets() {\n       install(WebSockets) {\n           contentConverter = KotlinxWebsocketSerializationConverter(Json)\n           pingPeriod = Duration.ofSeconds(15)\n           timeout = Duration.ofSeconds(15)\n           maxFrameSize = Long.MAX_VALUE\n           masking = false\n       }\n\n       routing {\n           webSocket(\"/tasks\") {\n               val tasks = listOf(\n                   Task(\"cleaning\", \"Clean the house\", Priority.Low),\n                   Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n                   Task(\"shopping\", \"Buy the groceries\", Priority.High),\n                   Task(\"painting\", \"Paint the fence\", Priority.Medium)\n               )\n\n               for (task in tasks) {\n                   sendSerialized(task)\n                   delay(1000)\n               }\n\n               close(CloseReason(CloseReason.Codes.NORMAL, \"All done\"))\n           }\n       }\n}\n```\n\n5. Open the index.html file and replace the existing content with the provided HTML code.\n\n## Understanding WebSockets\n\nBefore moving to the next iteration, it may be helpful to review some of the fundamentals of WebSockets. If you are already familiar with WebSockets, you can continue to improve the design of your service.\n\nIn previous tutorials, your clients were sending HTTP Requests and receiving HTTP Responses. This works well and enables the Internet to be scalable and resilient. However, it's not suitable for scenarios where:\n- Content is generated incrementally over time.\n- Content changes frequently in response to events.\n- Clients need to interact with the server as content is produced.\n- Data sent by one client needs to be quickly propagated to others.\n\nExamples of these scenarios include share trading, purchasing cinema and concert tickets, bidding in online auctions, and chat functionality in social media. WebSockets were developed to handle these situations.\n\n## Improve the design\n\n1. In the model package, create a new TaskRepository.kt file.\n\n2. Open TaskRepository.kt and add a TaskRepository type:\n\n```kotlin\npackage model\n\nobject TaskRepository {\n       private val tasks = mutableListOf(\n           Task(\"cleaning\", \"Clean the house\", Priority.Low),\n           Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n           Task(\"shopping\", \"Buy the groceries\", Priority.High),\n           Task(\"painting\", \"Paint the fence\", Priority.Medium)\n       )\n\n       fun allTasks(): List<Task> = tasks\n\n       fun tasksByPriority(priority: Priority) = tasks.filter {\n           it.priority == priority\n       }\n\n       fun taskByName(name: String) = tasks.find {\n           it.name.equals(name, ignoreCase = true)\n       }\n\n       fun addTask(task: Task) {\n           if (taskByName(task.name) != null) {\n               throw IllegalStateException(\"Cannot duplicate task names!\")\n           }\n           tasks.add(task)\n       }\n\n       fun removeTask(name: String): Boolean {\n           return tasks.removeIf { it.name == name }\n       }\n}\n```\n\n3. Navigate to the plugins package and open the Sockets.kt file.\n\n4. You can now simplify the routing in Application.configureSockets() by utilizing the TaskRepository:\n\n```kotlin\nrouting {\n       webSocket(\"/tasks\") {\n           for (task in TaskRepository.allTasks()) {\n               sendSerialized(task)\n               delay(1000)\n           }\n\n           close(CloseReason(CloseReason.Codes.NORMAL, \"All done\"))\n       }\n}\n```\n\n## Send messages through WebSockets\n\n1. In the Sockets.kt file, replace the current configureSockets() method with the implementation below:\n\n```kotlin\nfun Application.configureSockets() {\n       install(WebSockets) {\n           contentConverter = KotlinxWebsocketSerializationConverter(Json)\n           pingPeriod = 15.seconds\n           timeout = 15.seconds\n           maxFrameSize = Long.MAX_VALUE\n           masking = false\n       }\n       routing {\n           val sessions =\n               Collections.synchronizedList<WebSocketServerSession>(ArrayList())\n\n           webSocket(\"/tasks\") {\n               sendAllTasks()\n               close(CloseReason(CloseReason.Codes.NORMAL, \"All done\"))\n           }\n\n           webSocket(\"/tasks2\") {\n               sessions.add(this)\n               sendAllTasks()\n\n               while(true) {\n                   val newTask = receiveDeserialized<Task>()\n                   TaskRepository.addTask(newTask)\n                   for(session in sessions) {\n                       session.sendSerialized(newTask)\n                   }\n               }\n           }\n       }\n}\n\nprivate suspend fun DefaultWebSocketServerSession.sendAllTasks() {\n       for (task in TaskRepository.allTasks()) {\n           sendSerialized(task)\n           delay(1000)\n       }\n}\n```\n\n## Add automated tests\n\n1. Add the following dependency to build.gradle.kts to allow you to configure support for Content Negotiation within the Ktor Client :\n\n```kotlin\ntestImplementation(\"io.ktor:ktor-client-content-negotiation-jvm:\")\n```\n\n2. In intelliJ IDEA, click on the notification Gradle icon on the right side of the editor to load Gradle changes.\n\n3. Navigate to src/test/kotlin/com/example and open the ApplicationTest.kt file.\n\n4. Replace the generated test class with the implementation below:\n\n```kotlin\npackage com.example\n\nimport com.example.plugins.*\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.client.plugins.websocket.*\nimport io.ktor.serialization.*\nimport io.ktor.serialization.kotlinx.*\nimport io.ktor.serialization.kotlinx.json.*\nimport io.ktor.server.testing.*\nimport kotlinx.coroutines.flow.*\nimport kotlinx.serialization.json.Json\nimport model.Priority\nimport model.Task\nimport kotlin.test.*\n\nclass ApplicationTest {\n       @Test\n       fun testRoot() = testApplication {\n           application {\n               configureRouting()\n               configureSerialization()\n               configureSockets()\n           }\n\n           val client = createClient {\n               install(ContentNegotiation) {\n                   json()\n               }\n               install(WebSockets) {\n                   contentConverter =\n                       KotlinxWebsocketSerializationConverter(Json)\n               }\n           }\n\n           val expectedTasks = listOf(\n               Task(\"cleaning\", \"Clean the house\", Priority.Low),\n               Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n               Task(\"shopping\", \"Buy the groceries\", Priority.High),\n               Task(\"painting\", \"Paint the fence\", Priority.Medium)\n           )\n           var actualTasks = emptyList<Task>()\n\n           client.webSocket(\"/tasks\") {\n               consumeTasksAsFlow().collect { allTasks ->\n                   actualTasks = allTasks\n               }\n           }\n\n           assertEquals(expectedTasks.size, actualTasks.size)\n           expectedTasks.forEachIndexed { index, task ->\n               assertEquals(task, actualTasks[index])\n           }\n       }\n\n       private fun DefaultClientWebSocketSession.consumeTasksAsFlow() = incoming\n           .consumeAsFlow()\n           .map {\n               converter!!.deserialize<Task>(it)\n           }\n           .scan(emptyList<Task>()) { list, task ->\n               list + task\n           }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-create-websocket-application.html", "title": "Create a WebSocket application in Kotlin with Ktor", "description": "This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:14:25", "type": "overview", "page_metadata": {"ogTitle": "Create a WebSocket application in Kotlin with Ktor | Ktor", "language": "en-US", "ogLocale": "en_US", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.376535221", "description": "\n        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process\n        of connecting your backend services with a client, through WebSockets.\n    ", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:description": "", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "ogDescription": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a WebSocket application in Kotlin with Ktor | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "scrapeId": "4705629e-390d-4e38-8c27-a398b983b02c", "sourceURL": "https://ktor.io/docs/server-create-websocket-application.html", "url": "https://ktor.io/docs/server-create-websocket-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nYou can do this tutorial independently, however, we recommend that you complete the Create RESTful APIs tutorial to get familiar with Content Negotiation and REST.\n\nWe recommend that you install IntelliJ IDEA, but you could use another IDE of your choice..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-websocket-application.html", "title": "Create a WebSocket application in Kotlin with Ktor", "description": "This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:14:25", "type": "section_detail", "page_metadata": {"ogTitle": "Create a WebSocket application in Kotlin with Ktor | Ktor", "language": "en-US", "ogLocale": "en_US", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.376535221", "description": "\n        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process\n        of connecting your backend services with a client, through WebSockets.\n    ", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:description": "", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "ogDescription": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a WebSocket application in Kotlin with Ktor | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "scrapeId": "4705629e-390d-4e38-8c27-a398b983b02c", "sourceURL": "https://ktor.io/docs/server-create-websocket-application.html", "url": "https://ktor.io/docs/server-create-websocket-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I hello websockets in ktor?\n\nAssistant: To hello websockets in ktor, here's what you do:\nIn this tutorial, you will build on the Task Manager service developed in the Create RESTful APIs tutorial by adding the ability to exchange Task objects with a client, through a WebSocket connection. To achieve this, you will need to add the WebSockets Plugin. While you could manually add it to your existing project, for the sake of this tutorial, we'll start from scratch by creating a new project..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-websocket-application.html", "title": "Create a WebSocket application in Kotlin with Ktor", "description": "This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:14:25", "type": "section_detail", "page_metadata": {"ogTitle": "Create a WebSocket application in Kotlin with Ktor | Ktor", "language": "en-US", "ogLocale": "en_US", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.376535221", "description": "\n        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process\n        of connecting your backend services with a client, through WebSockets.\n    ", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:description": "", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "ogDescription": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a WebSocket application in Kotlin with Ktor | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "scrapeId": "4705629e-390d-4e38-8c27-a398b983b02c", "sourceURL": "https://ktor.io/docs/server-create-websocket-application.html", "url": "https://ktor.io/docs/server-create-websocket-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create the initial project with plugins in ktor?\n\nAssistant: To create the initial project with plugins in ktor, here's what you do:\n1. Navigate to the Ktor Project Generator.\n\n2. In the Project artifact field, enter com.example.ktor-websockets-task-app as the name of your project artifact.\n\n3. In the plugins section search for and add the following plugins by clicking on the Add button:\n   - Routing\n   - Content Negotiation\n   - Kotlinx.serialization\n   - WebSockets\n   - Static Content\n\n4. Once you have added the plugins, click on the 5 plugins button at the top right of the plugin section, to display the added plugins.\n\n5. Click the Download button to generate and download your Ktor project..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-websocket-application.html", "title": "Create a WebSocket application in Kotlin with Ktor", "description": "This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:14:25", "type": "section_detail", "page_metadata": {"ogTitle": "Create a WebSocket application in Kotlin with Ktor | Ktor", "language": "en-US", "ogLocale": "en_US", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.376535221", "description": "\n        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process\n        of connecting your backend services with a client, through WebSockets.\n    ", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:description": "", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "ogDescription": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a WebSocket application in Kotlin with Ktor | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "scrapeId": "4705629e-390d-4e38-8c27-a398b983b02c", "sourceURL": "https://ktor.io/docs/server-create-websocket-application.html", "url": "https://ktor.io/docs/server-create-websocket-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add starter code in ktor?\n\nAssistant: To add starter code in ktor, here's what you do:\n1. Navigate to src/main/kotlin and create a new subpackage called model.\n\n2. Inside the model package create a new Task.kt file.\n\n3. Open the Task.kt file and add an enum to represent priorities and a data class to represent tasks:\n\n```kotlin\npackage model\n\nimport kotlinx.serialization.Serializable\n\nenum class Priority {\n       Low, Medium, High, Vital\n}\n\n@Serializable\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```\n\n4. Open the Sockets.kt file and replace the existing Application.configureSockets() function with the implementation below:\n\n```kotlin\nfun Application.configureSockets() {\n       install(WebSockets) {\n           contentConverter = KotlinxWebsocketSerializationConverter(Json)\n           pingPeriod = Duration.ofSeconds(15)\n           timeout = Duration.ofSeconds(15)\n           maxFrameSize = Long.MAX_VALUE\n           masking = false\n       }\n\n       routing {\n           webSocket(\"/tasks\") {\n               val tasks = listOf(\n                   Task(\"cleaning\", \"Clean the house\", Priority.Low),\n                   Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n                   Task(\"shopping\", \"Buy the groceries\", Priority.High),\n                   Task(\"painting\", \"Paint the fence\", Priority.Medium)\n               )\n\n               for (task in tasks) {\n                   sendSerialized(task)\n                   delay(1000)\n               }\n\n               close(CloseReason(CloseReason.Codes.NORMAL, \"All done\"))\n           }\n       }\n}\n```\n\n5. Open the index.html file and replace the existing content with the provided HTML code..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-websocket-application.html", "title": "Create a WebSocket application in Kotlin with Ktor", "description": "This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:14:25", "type": "section_detail", "page_metadata": {"ogTitle": "Create a WebSocket application in Kotlin with Ktor | Ktor", "language": "en-US", "ogLocale": "en_US", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.376535221", "description": "\n        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process\n        of connecting your backend services with a client, through WebSockets.\n    ", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:description": "", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "ogDescription": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a WebSocket application in Kotlin with Ktor | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "scrapeId": "4705629e-390d-4e38-8c27-a398b983b02c", "sourceURL": "https://ktor.io/docs/server-create-websocket-application.html", "url": "https://ktor.io/docs/server-create-websocket-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I understanding websockets in ktor?\n\nAssistant: To understanding websockets in ktor, here's what you do:\nBefore moving to the next iteration, it may be helpful to review some of the fundamentals of WebSockets. If you are already familiar with WebSockets, you can continue to improve the design of your service.\n\nIn previous tutorials, your clients were sending HTTP Requests and receiving HTTP Responses. This works well and enables the Internet to be scalable and resilient. However, it's not suitable for scenarios where:\n- Content is generated incrementally over time.\n- Content changes frequently in response to events.\n- Clients need to interact with the server as content is produced.\n- Data sent by one client needs to be quickly propagated to others.\n\nExamples of these scenarios include share trading, purchasing cinema and concert tickets, bidding in online auctions, and chat functionality in social media. WebSockets were developed to handle these situations..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-websocket-application.html", "title": "Create a WebSocket application in Kotlin with Ktor", "description": "This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:14:25", "type": "section_detail", "page_metadata": {"ogTitle": "Create a WebSocket application in Kotlin with Ktor | Ktor", "language": "en-US", "ogLocale": "en_US", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.376535221", "description": "\n        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process\n        of connecting your backend services with a client, through WebSockets.\n    ", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:description": "", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "ogDescription": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a WebSocket application in Kotlin with Ktor | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "scrapeId": "4705629e-390d-4e38-8c27-a398b983b02c", "sourceURL": "https://ktor.io/docs/server-create-websocket-application.html", "url": "https://ktor.io/docs/server-create-websocket-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I improve the design in ktor?\n\nAssistant: To improve the design in ktor, here's what you do:\n1. In the model package, create a new TaskRepository.kt file.\n\n2. Open TaskRepository.kt and add a TaskRepository type:\n\n```kotlin\npackage model\n\nobject TaskRepository {\n       private val tasks = mutableListOf(\n           Task(\"cleaning\", \"Clean the house\", Priority.Low),\n           Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n           Task(\"shopping\", \"Buy the groceries\", Priority.High),\n           Task(\"painting\", \"Paint the fence\", Priority.Medium)\n       )\n\n       fun allTasks(): List<Task> = tasks\n\n       fun tasksByPriority(priority: Priority) = tasks.filter {\n           it.priority == priority\n       }\n\n       fun taskByName(name: String) = tasks.find {\n           it.name.equals(name, ignoreCase = true)\n       }\n\n       fun addTask(task: Task) {\n           if (taskByName(task.name) != null) {\n               throw IllegalStateException(\"Cannot duplicate task names!\")\n           }\n           tasks.add(task)\n       }\n\n       fun removeTask(name: String): Boolean {\n           return tasks.removeIf { it.name == name }\n       }\n}\n```\n\n3. Navigate to the plugins package and open the Sockets.kt file.\n\n4. You can now simplify the routing in Application.configureSockets() by utilizing the TaskRepository:\n\n```kotlin\nrouting {\n       webSocket(\"/tasks\") {\n           for (task in TaskRepository.allTasks()) {\n               sendSerialized(task)\n               delay(1000)\n           }\n\n           close(CloseReason(CloseReason.Codes.NORMAL, \"All done\"))\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-websocket-application.html", "title": "Create a WebSocket application in Kotlin with Ktor", "description": "This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:14:25", "type": "section_detail", "page_metadata": {"ogTitle": "Create a WebSocket application in Kotlin with Ktor | Ktor", "language": "en-US", "ogLocale": "en_US", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.376535221", "description": "\n        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process\n        of connecting your backend services with a client, through WebSockets.\n    ", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:description": "", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "ogDescription": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a WebSocket application in Kotlin with Ktor | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "scrapeId": "4705629e-390d-4e38-8c27-a398b983b02c", "sourceURL": "https://ktor.io/docs/server-create-websocket-application.html", "url": "https://ktor.io/docs/server-create-websocket-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I send messages through websockets in ktor?\n\nAssistant: To send messages through websockets in ktor, here's what you do:\n1. In the Sockets.kt file, replace the current configureSockets() method with the implementation below:\n\n```kotlin\nfun Application.configureSockets() {\n       install(WebSockets) {\n           contentConverter = KotlinxWebsocketSerializationConverter(Json)\n           pingPeriod = 15.seconds\n           timeout = 15.seconds\n           maxFrameSize = Long.MAX_VALUE\n           masking = false\n       }\n       routing {\n           val sessions =\n               Collections.synchronizedList<WebSocketServerSession>(ArrayList())\n\n           webSocket(\"/tasks\") {\n               sendAllTasks()\n               close(CloseReason(CloseReason.Codes.NORMAL, \"All done\"))\n           }\n\n           webSocket(\"/tasks2\") {\n               sessions.add(this)\n               sendAllTasks()\n\n               while(true) {\n                   val newTask = receiveDeserialized<Task>()\n                   TaskRepository.addTask(newTask)\n                   for(session in sessions) {\n                       session.sendSerialized(newTask)\n                   }\n               }\n           }\n       }\n}\n\nprivate suspend fun DefaultWebSocketServerSession.sendAllTasks() {\n       for (task in TaskRepository.allTasks()) {\n           sendSerialized(task)\n           delay(1000)\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-websocket-application.html", "title": "Create a WebSocket application in Kotlin with Ktor", "description": "This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:14:25", "type": "section_detail", "page_metadata": {"ogTitle": "Create a WebSocket application in Kotlin with Ktor | Ktor", "language": "en-US", "ogLocale": "en_US", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.376535221", "description": "\n        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process\n        of connecting your backend services with a client, through WebSockets.\n    ", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:description": "", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "ogDescription": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a WebSocket application in Kotlin with Ktor | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "scrapeId": "4705629e-390d-4e38-8c27-a398b983b02c", "sourceURL": "https://ktor.io/docs/server-create-websocket-application.html", "url": "https://ktor.io/docs/server-create-websocket-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add automated tests in ktor?\n\nAssistant: To add automated tests in ktor, here's what you do:\n1. Add the following dependency to build.gradle.kts to allow you to configure support for Content Negotiation within the Ktor Client :\n\n```kotlin\ntestImplementation(\"io.ktor:ktor-client-content-negotiation-jvm:\")\n```\n\n2. In intelliJ IDEA, click on the notification Gradle icon on the right side of the editor to load Gradle changes.\n\n3. Navigate to src/test/kotlin/com/example and open the ApplicationTest.kt file.\n\n4. Replace the generated test class with the implementation below:\n\n```kotlin\npackage com.example\n\nimport com.example.plugins.*\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.client.plugins.websocket.*\nimport io.ktor.serialization.*\nimport io.ktor.serialization.kotlinx.*\nimport io.ktor.serialization.kotlinx.json.*\nimport io.ktor.server.testing.*\nimport kotlinx.coroutines.flow.*\nimport kotlinx.serialization.json.Json\nimport model.Priority\nimport model.Task\nimport kotlin.test.*\n\nclass ApplicationTest {\n       @Test\n       fun testRoot() = testApplication {\n           application {\n               configureRouting()\n               configureSerialization()\n               configureSockets()\n           }\n\n           val client = createClient {\n               install(ContentNegotiation) {\n                   json()\n               }\n               install(WebSockets) {\n                   contentConverter =\n                       KotlinxWebsocketSerializationConverter(Json)\n               }\n           }\n\n           val expectedTasks = listOf(\n               Task(\"cleaning\", \"Clean the house\", Priority.Low),\n               Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n               Task(\"shopping\", \"Buy the groceries\", Priority.High),\n               Task(\"painting\", \"Paint the fence\", Priority.Medium)\n           )\n           var actualTasks = emptyList<Task>()\n\n           client.webSocket(\"/tasks\") {\n               consumeTasksAsFlow().collect { allTasks ->\n                   actualTasks = allTasks\n               }\n           }\n\n           assertEquals(expectedTasks.size, actualTasks.size)\n           expectedTasks.forEachIndexed { index, task ->\n               assertEquals(task, actualTasks[index])\n           }\n       }\n\n       private fun DefaultClientWebSocketSession.consumeTasksAsFlow() = incoming\n           .consumeAsFlow()\n           .map {\n               converter!!.deserialize<Task>(it)\n           }\n           .scan(emptyList<Task>()) { list, task ->\n               list + task\n           }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-websocket-application.html", "title": "Create a WebSocket application in Kotlin with Ktor", "description": "This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:14:25", "type": "section_detail", "page_metadata": {"ogTitle": "Create a WebSocket application in Kotlin with Ktor | Ktor", "language": "en-US", "ogLocale": "en_US", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.376535221", "description": "\n        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process\n        of connecting your backend services with a client, through WebSockets.\n    ", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:description": "", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "ogDescription": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a WebSocket application in Kotlin with Ktor | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "scrapeId": "4705629e-390d-4e38-8c27-a398b983b02c", "sourceURL": "https://ktor.io/docs/server-create-websocket-application.html", "url": "https://ktor.io/docs/server-create-websocket-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Create a WebSocket application in Kotlin with Ktor in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Task.kt - Task class and Priority enum**:\n\n```yaml\n```kotlin\npackage model\n\nimport kotlinx.serialization.Serializable\n\nenum class Priority {\n       Low, Medium, High, Vital\n}\n\n@Serializable\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```\n```\n\nThis snippet shows you how to task.kt - task class and priority enum, which is an important aspect of create a websocket application in kotlin with ktor.\n\n**Sockets.kt - Configure WebSockets**:\n\n```yaml\n```kotlin\nfun Application.configureSockets() {\n       install(WebSockets) {\n           contentConverter = KotlinxWebsocketSerializationConverter(Json)\n           pingPeriod = Duration.ofSeconds(15)\n           timeout = Duration.ofSeconds(15)\n           maxFrameSize = Long.MAX_VALUE\n           masking = false\n       }\n\n       routing {\n           webSocket(\"/tasks\") {\n               val tasks = listOf(\n                   Task(\"cleaning\", \"Clean the house\", Priority.Low),\n                   Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n                   Task(\"shopping\", \"Buy the groceries\", Priority.High),\n                   Task(\"painting\", \"Paint the fence\", Priority.Medium)\n               )\n\n               for (task in tasks) {\n                   sendSerialized(task)\n                   delay(1000)\n               }\n\n               close(CloseReason(CloseReason.Codes.NORMAL, \"All done\"))\n           }\n       }\n}\n```\n```\n\nThis snippet shows you how to sockets.kt - configure websockets, which is an important aspect of create a websocket application in kotlin with ktor.\n\n**TaskRepository.kt - Task repository**:\n\n```yaml\n```kotlin\npackage model\n\nobject TaskRepository {\n       private val tasks = mutableListOf(\n           Task(\"cleaning\", \"Clean the house\", Priority.Low),\n           Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n           Task(\"shopping\", \"Buy the groceries\", Priority.High),\n           Task(\"painting\", \"Paint the fence\", Priority.Medium)\n       )\n\n       fun allTasks(): List<Task> = tasks\n\n       fun tasksByPriority(priority: Priority) = tasks.filter {\n           it.priority == priority\n       }\n\n       fun taskByName(name: String) = tasks.find {\n           it.name.equals(name, ignoreCase = true)\n       }\n\n       fun addTask(task: Task) {\n           if (taskByName(task.name) != null) {\n               throw IllegalStateException(\"Cannot duplicate task names!\")\n           }\n           tasks.add(task)\n       }\n\n       fun removeTask(name: String): Boolean {\n           return tasks.removeIf { it.name == name }\n       }\n}\n```\n```\n\nThis snippet shows you how to taskrepository.kt - task repository, which is an important aspect of create a websocket application in kotlin with ktor.\n\n**ApplicationTest.kt - Automated test**:\n\n```yaml\n```kotlin\npackage com.example\n\nimport com.example.plugins.*\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.client.plugins.websocket.*\nimport io.ktor.serialization.*\nimport io.ktor.serialization.kotlinx.*\nimport io.ktor.serialization.kotlinx.json.*\nimport io.ktor.server.testing.*\nimport kotlinx.coroutines.flow.*\nimport kotlinx.serialization.json.Json\nimport model.Priority\nimport model.Task\nimport kotlin.test.*\n\nclass ApplicationTest {\n       @Test\n       fun testRoot() = testApplication {\n           application {\n               configureRouting()\n               configureSerialization()\n               configureSockets()\n           }\n\n           val client = createClient {\n               install(ContentNegotiation) {\n                   json()\n               }\n               install(WebSockets) {\n                   contentConverter =\n                       KotlinxWebsocketSerializationConverter(Json)\n               }\n           }\n\n           val expectedTasks = listOf(\n               Task(\"cleaning\", \"Clean the house\", Priority.Low),\n               Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n               Task(\"shopping\", \"Buy the groceries\", Priority.High),\n               Task(\"painting\", \"Paint the fence\", Priority.Medium)\n           )\n           var actualTasks = emptyList<Task>()\n\n           client.webSocket(\"/tasks\") {\n               consumeTasksAsFlow().collect { allTasks ->\n                   actualTasks = allTasks\n               }\n           }\n\n           assertEquals(expectedTasks.size, actualTasks.size)\n           expectedTasks.forEachIndexed { index, task ->\n               assertEquals(task, actualTasks[index])\n           }\n       }\n\n       private fun DefaultClientWebSocketSession.consumeTasksAsFlow() = incoming\n           .consumeAsFlow()\n           .map {\n               converter!!.deserialize<Task>(it)\n           }\n           .scan(emptyList<Task>()) { list, task ->\n               list + task\n           }\n}\n```\n```\n\nThis snippet shows you how to applicationtest.kt - automated test, which is an important aspect of create a websocket application in kotlin with ktor.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-create-websocket-application.html", "title": "Create a WebSocket application in Kotlin with Ktor", "description": "This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:14:25", "type": "code_examples", "page_metadata": {"ogTitle": "Create a WebSocket application in Kotlin with Ktor | Ktor", "language": "en-US", "ogLocale": "en_US", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.376535221", "description": "\n        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process\n        of connecting your backend services with a client, through WebSockets.\n    ", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:description": "", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "ogDescription": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a WebSocket application in Kotlin with Ktor | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "scrapeId": "4705629e-390d-4e38-8c27-a398b983b02c", "sourceURL": "https://ktor.io/docs/server-create-websocket-application.html", "url": "https://ktor.io/docs/server-create-websocket-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Create a WebSocket application in Kotlin with Ktor in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nComplete the Create RESTful APIs tutorial to get familiar with Content Negotiation and REST before starting this tutorial.\n\nUse IntelliJ IDEA for a better development experience, although other IDEs can be used.\n\nEnsure to handle WebSocket connections properly to maintain a smooth user experience.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-create-websocket-application.html", "title": "Create a WebSocket application in Kotlin with Ktor", "description": "This article walks you through the process of creating a WebSocket application in Kotlin with Ktor. It builds on the material covered in the Create RESTful APIs tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:14:25", "type": "best_practices", "page_metadata": {"ogTitle": "Create a WebSocket application in Kotlin with Ktor | Ktor", "language": "en-US", "ogLocale": "en_US", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.376535221", "description": "\n        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process\n        of connecting your backend services with a client, through WebSockets.\n    ", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:description": "", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-create-websocket-application.html", "ogDescription": "", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Create a WebSocket application in Kotlin with Ktor | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Create a WebSocket application in Kotlin with Ktor | Ktor", "scrapeId": "4705629e-390d-4e38-8c27-a398b983b02c", "sourceURL": "https://ktor.io/docs/server-create-websocket-application.html", "url": "https://ktor.io/docs/server-create-websocket-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Handle requests and generate responses is in ktor?\n\nAssistant: Sure, I'd be happy to explain Handle requests and generate responses in ktor.\n\n# Handle requests and generate responses\n\nUse Ktor and Kotlin to handle HTTP requests and generate responses.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nThis is the second tutorial of the Get started with Ktor Server guide. You can do this tutorial independently, however, we strongly recommend that you complete the preceding tutorial to learn how to [Create, open, and run a new Ktor project](https://ktor.io/docs/server-create-a-new-project.html).\n\nIt is also very useful to have a basic understanding of HTTP request types, headers and status codes.\n\nWe recommend that you install [IntelliJ IDEA](https://www.jetbrains.com/help/idea/installation-guide.html), but you could use another IDE of your choice.\n\n## Task Manager Application\n\nIn this tutorial you will incrementally build a Task Manager application with the following functionality:\n\n- View all the available tasks as an HTML table.\n- View tasks by priority and name, again as HTML.\n- Add additional tasks by submitting an HTML form.\n\nYou will do the minimum possible to get some basic functionality working, and then improve and extend this functionality over seven iterations. This minimum functionality will consist of a project containing some model types, a list of values and a single route.\n\n## Display static HTML content\n\nIn the first iteration you will add a new route to your application that will return static HTML content.\n\nUsing the [Ktor Project Generator](https://start.ktor.io/), create a new project called ktor-task-app. You can accept all the default options, but may wish to change the artifact name.\n\n1. Open the Routing.kt file within the src/main/kotlin/com/example/plugins folder.\n2. Replace the existing `Application.configureRouting()` function with the implementation below:\n\n```kotlin\nfun Application.configureRouting() {\n       routing {\n           get(\"/tasks\") {\n               call.respondText(\n                   contentType = ContentType.parse(\"text/html\"),\n                       text = \"\"\"\n                   <h3>TODO:</h3>\n                   <ol>\n                       <li>A table of all the tasks</li>\n                       <li>A form to submit new tasks</li>\n                   </ol>\n                   \"\"\".trimIndent()\n               )\n           }\n       }\n}\n```\n\nWith this you have created a new route for the URL `/tasks` and the GET request type. A GET request is the most basic request type in HTTP. It is triggered when the user types into the browser's address bar or clicks on a regular HTML link.\n\nFor the moment you are just returning static content. To notify the client that you will be sending HTML, you set the HTTP Content Type header to \"text/html\".\n\n3. Add the following import to access the `ContentType` object:\n\n```kotlin\nimport io.ktor.http.ContentType\n```\n\n4. In Intellij IDEA, click on the run gutter icon (![intelliJ IDEA run application icon](https://ktor.io/docs/images/intellij_idea_gutter_icon.svg)) next to the `main()` function in Application.kt to start the application.\n5. Navigate to [http://0.0.0.0:8080/tasks](http://0.0.0.0:8080/tasks) in your browser. You should see the to-do list displayed:\n![A browser window displaying a to-do list with two items](https://ktor.io/docs/images/tutorial_routing_and_requests_implementation_1.png)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-requests-and-responses.html", "title": "Handle requests and generate responses", "description": "Use Ktor and Kotlin to handle HTTP requests and generate responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:17:21", "type": "overview", "page_metadata": {"language": "en-US", "og:locale": "en_US", "build-number": "707", "og:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor Documentation", "built-on": "2025-02-26T14:01:03.664621178", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\n        Learn the fundamentals of validation, error handling, and unit testing for services created with Kotlin and\n        Ktor.\n    ", "ogTitle": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "og:description": "", "ogDescription": "", "twitter:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "og:type": "website", "scrapeId": "b8f2b14a-2a4d-4ab6-a059-ea79d8879acc", "sourceURL": "https://ktor.io/docs/server-requests-and-responses.html", "url": "https://ktor.io/docs/server-requests-and-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nThis is the second tutorial of the Get started with Ktor Server guide. You can do this tutorial independently, however, we strongly recommend that you complete the preceding tutorial to learn how to [Create, open, and run a new Ktor project](https://ktor.io/docs/server-create-a-new-project.html).\n\nIt is also very useful to have a basic understanding of HTTP request types, headers and status codes.\n\nWe recommend that you install [IntelliJ IDEA](https://www.jetbrains.com/help/idea/installation-guide.html), but you could use another IDE of your choice..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-requests-and-responses.html", "title": "Handle requests and generate responses", "description": "Use Ktor and Kotlin to handle HTTP requests and generate responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:17:21", "type": "section_detail", "page_metadata": {"language": "en-US", "og:locale": "en_US", "build-number": "707", "og:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor Documentation", "built-on": "2025-02-26T14:01:03.664621178", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\n        Learn the fundamentals of validation, error handling, and unit testing for services created with Kotlin and\n        Ktor.\n    ", "ogTitle": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "og:description": "", "ogDescription": "", "twitter:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "og:type": "website", "scrapeId": "b8f2b14a-2a4d-4ab6-a059-ea79d8879acc", "sourceURL": "https://ktor.io/docs/server-requests-and-responses.html", "url": "https://ktor.io/docs/server-requests-and-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I task manager application in ktor?\n\nAssistant: To task manager application in ktor, here's what you do:\nIn this tutorial you will incrementally build a Task Manager application with the following functionality:\n\n- View all the available tasks as an HTML table.\n- View tasks by priority and name, again as HTML.\n- Add additional tasks by submitting an HTML form.\n\nYou will do the minimum possible to get some basic functionality working, and then improve and extend this functionality over seven iterations. This minimum functionality will consist of a project containing some model types, a list of values and a single route..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-requests-and-responses.html", "title": "Handle requests and generate responses", "description": "Use Ktor and Kotlin to handle HTTP requests and generate responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:17:21", "type": "section_detail", "page_metadata": {"language": "en-US", "og:locale": "en_US", "build-number": "707", "og:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor Documentation", "built-on": "2025-02-26T14:01:03.664621178", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\n        Learn the fundamentals of validation, error handling, and unit testing for services created with Kotlin and\n        Ktor.\n    ", "ogTitle": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "og:description": "", "ogDescription": "", "twitter:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "og:type": "website", "scrapeId": "b8f2b14a-2a4d-4ab6-a059-ea79d8879acc", "sourceURL": "https://ktor.io/docs/server-requests-and-responses.html", "url": "https://ktor.io/docs/server-requests-and-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I display static html content in ktor?\n\nAssistant: To display static html content in ktor, here's what you do:\nIn the first iteration you will add a new route to your application that will return static HTML content.\n\nUsing the [Ktor Project Generator](https://start.ktor.io/), create a new project called ktor-task-app. You can accept all the default options, but may wish to change the artifact name.\n\n1. Open the Routing.kt file within the src/main/kotlin/com/example/plugins folder.\n2. Replace the existing `Application.configureRouting()` function with the implementation below:\n\n```kotlin\nfun Application.configureRouting() {\n       routing {\n           get(\"/tasks\") {\n               call.respondText(\n                   contentType = ContentType.parse(\"text/html\"),\n                       text = \"\"\"\n                   <h3>TODO:</h3>\n                   <ol>\n                       <li>A table of all the tasks</li>\n                       <li>A form to submit new tasks</li>\n                   </ol>\n                   \"\"\".trimIndent()\n               )\n           }\n       }\n}\n```\n\nWith this you have created a new route for the URL `/tasks` and the GET request type. A GET request is the most basic request type in HTTP. It is triggered when the user types into the browser's address bar or clicks on a regular HTML link.\n\nFor the moment you are just returning static content. To notify the client that you will be sending HTML, you set the HTTP Content Type header to \"text/html\".\n\n3. Add the following import to access the `ContentType` object:\n\n```kotlin\nimport io.ktor.http.ContentType\n```\n\n4. In Intellij IDEA, click on the run gutter icon (![intelliJ IDEA run application icon](https://ktor.io/docs/images/intellij_idea_gutter_icon.svg)) next to the `main()` function in Application.kt to start the application.\n5. Navigate to [http://0.0.0.0:8080/tasks](http://0.0.0.0:8080/tasks) in your browser. You should see the to-do list displayed:\n![A browser window displaying a to-do list with two items](https://ktor.io/docs/images/tutorial_routing_and_requests_implementation_1.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-requests-and-responses.html", "title": "Handle requests and generate responses", "description": "Use Ktor and Kotlin to handle HTTP requests and generate responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:17:21", "type": "section_detail", "page_metadata": {"language": "en-US", "og:locale": "en_US", "build-number": "707", "og:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor Documentation", "built-on": "2025-02-26T14:01:03.664621178", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\n        Learn the fundamentals of validation, error handling, and unit testing for services created with Kotlin and\n        Ktor.\n    ", "ogTitle": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "og:description": "", "ogDescription": "", "twitter:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "og:type": "website", "scrapeId": "b8f2b14a-2a4d-4ab6-a059-ea79d8879acc", "sourceURL": "https://ktor.io/docs/server-requests-and-responses.html", "url": "https://ktor.io/docs/server-requests-and-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Handle requests and generate responses in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure Routing**:\n\n```yaml\nfun Application.configureRouting() {\n       routing {\n           get(\"/tasks\") {\n               call.respondText(\n                   contentType = ContentType.parse(\"text/html\"),\n                       text = \"\"\"\n                   <h3>TODO:</h3>\n                   <ol>\n                       <li>A table of all the tasks</li>\n                       <li>A form to submit new tasks</li>\n                   </ol>\n                   \"\"\".trimIndent()\n               )\n           }\n       }\n}\n```\n\nThis snippet shows you how to configure routing, which is an important aspect of handle requests and generate responses.\n\n**Task Model**:\n\n```yaml\nenum class Priority {\n       Low, Medium, High, Vital\n}\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```\n\nThis snippet shows you how to task model, which is an important aspect of handle requests and generate responses.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-requests-and-responses.html", "title": "Handle requests and generate responses", "description": "Use Ktor and Kotlin to handle HTTP requests and generate responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:17:21", "type": "code_examples", "page_metadata": {"language": "en-US", "og:locale": "en_US", "build-number": "707", "og:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor Documentation", "built-on": "2025-02-26T14:01:03.664621178", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\n        Learn the fundamentals of validation, error handling, and unit testing for services created with Kotlin and\n        Ktor.\n    ", "ogTitle": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "og:description": "", "ogDescription": "", "twitter:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "og:type": "website", "scrapeId": "b8f2b14a-2a4d-4ab6-a059-ea79d8879acc", "sourceURL": "https://ktor.io/docs/server-requests-and-responses.html", "url": "https://ktor.io/docs/server-requests-and-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Handle requests and generate responses in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor more information on creating a new project, see [Create, open, and run a new Ktor project](https://ktor.io/docs/server-create-a-new-project.html).\n\nTo test the new route, you can use tools like Postman to send GET requests and check the responses.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-requests-and-responses.html", "title": "Handle requests and generate responses", "description": "Use Ktor and Kotlin to handle HTTP requests and generate responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:17:21", "type": "best_practices", "page_metadata": {"language": "en-US", "og:locale": "en_US", "build-number": "707", "og:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor Documentation", "built-on": "2025-02-26T14:01:03.664621178", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "description": "\n        Learn the fundamentals of validation, error handling, and unit testing for services created with Kotlin and\n        Ktor.\n    ", "ogTitle": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "og:description": "", "ogDescription": "", "twitter:title": "Use Ktor and Kotlin to handle HTTP requests and generate responses | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-requests-and-responses.html", "og:type": "website", "scrapeId": "b8f2b14a-2a4d-4ab6-a059-ea79d8879acc", "sourceURL": "https://ktor.io/docs/server-requests-and-responses.html", "url": "https://ktor.io/docs/server-requests-and-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Create, open and run a new Ktor project is in ktor?\n\nAssistant: Sure, I'd be happy to explain Create, open and run a new Ktor project in ktor.\n\n# Create, open and run a new Ktor project\n\nIn this tutorial, you will learn how to create, open and run your first Ktor server project. Once you get up and running, you can attempt a series of tasks to familiarize yourself with Ktor.Here's a quick rundown of what this is about:\n\n## Create a new Ktor project\n\nOne of the fastest ways to create a new Ktor project is by using the web-based Ktor project generator. Alternatively, if you have intelliJ IDEA Ultimate installed, you can use the dedicated Ktor plugin to create a new project.\n\n## Use the Ktor project generator\n\nTo create a new project with the Ktor project generator, follow the steps below:\n\n1. Navigate to the Ktor Project Generator.\n2. In the Project artifact field, enter com.example.ktor-sample-app as the name of your project artifact.\n3. Click Configure to open the settings dropdown menu:\n\nThe following settings are available:\n\n   - Build System: Choose the desired build system. This can be Gradle with Kotlin or Groovy DSL, or Maven.\n   - Ktor version: Choose the required Ktor version.\n   - Engine: Select an engine used to run a server.\n   - Configuration: Choose whether to specify server parameters in a YAML or HOCON file, or in code.\n   - Include samples: Leave this option enabled to add sample code for plugins.\n\nFor this tutorial you can leave the default values for these settings.\n4. Click Done to save the configuration and close the menu.\n5. Below you will find a set of plugins that you can add to your project. Plugins are building blocks that provide common functionality in a Ktor application, such as authentication, serialization and content encoding, compression, cookie support, and more.\n6. Click the Download button to generate and download your Ktor project.\n\n## Use the Ktor plugin for intelliJ IDEA Ultimate\n\nThis section describes project setup using the Ktor plugin for Intellij IDEA Ultimate.\n\nTo create a new Ktor project, open IntelliJ IDEA, and follow the steps below:\n\n1. On the Welcome screen, click New Project.\n2. In the New Project wizard, choose Ktor from the list on the left.\n3. On the right pane, you can specify the following settings:\n   - Name: Specify a project name. Enter ktor-sample-app as the name of your project.\n   - Location: Specify a directory for your project.\n   - Website: Specify a domain used to generate a package name.\n   - Artifact: This field shows a generated artifact name.\n   - Engine: Select an engine used to run a server.\n   - Include samples: Leave this option enabled to add sample code for plugins.\n4. Click Advanced Settings to expand the additional settings menu:\n\nThe following settings are available:\n   - Build System: Choose the desired build system. This can be Gradle with Kotlin or Groovy DSL, or Maven.\n   - Ktor version: Choose the required Ktor version.\n   - Configuration: Choose whether to specify server parameters in a YAML or HOCON file, or in code.\n\nFor the sake of this tutorial, you can leave the default values of these settings.\n5. Click Next to go to the next page.\n6. On this page, you can choose a set of plugins - building blocks that provide common functionality of a Ktor application, for example, authentication, serialization and content encoding, compression, cookie support, and so on.\n7. Click Create and wait until IntelliJ IDEA generates a project and installs the dependencies.\n\n## Unpack and run your Ktor project\n\nIn this section you will learn how to unpack, build and run the project from the command line. The descriptions below assume that:\n\n- You have created and downloaded a project called ktor-sample-app.\n- This has been placed in a folder called myprojects in your home directory.\n\nIf necessary, alter the names and paths to match your own setup.\n\nOpen a command line tool of your choice and follow the steps:\n\n1. In a terminal, navigate to the folder where you downloaded the project:\n\n```\ncd ~/myprojects\n```\n\n2. Unpack the ZIP archive into a folder of the same name:\n\nmacOS\n```\nunzip ktor-sample-app.zip -d ktor-sample-app\n```\n\nWindows\n```\ntar -xf ktor-sample-app.zip\n```\n\nYour directory will now contain the ZIP archive and the unpacked folder.\n3. From the directory, navigate into the newly created folder:\n```\ncd ktor-sample-app\n```\n4. On macOS/UNIX systems, you will need to make the gradlew Gradle helper script executable. To do that, use the `chmod` command:\n```\nchmod +x ./gradlew\n```\n5. To build the project, use the following command:\n\nmacOS\n```\n./gradlew build\n```\n\nWindows\n```\ngradlew build\n```\n\nIf you see that your build has been successful you can execute the project, again via Gradle.\n6. To run the project, use the following command:\n\nmacOS\n```\n./gradlew run\n```\n\nWindows\n```\ngradlew run\n```\n\n7. To verify the project is running, open a browser at the URL mentioned in the output (http://0.0.0.0:8080). You should see the message \"Hello World!\" displayed on the screen.\n\n## Open, explore and run your Ktor project in IntelliJ IDEA\n\nIf you have IntelliJ IDEA installed, you can easily open the project from the command line.\n\nMake sure you are in the project folder and then type the `idea` command, followed by a period to represent the current folder:\n```\nidea .\n```\nAlternatively, to open the project manually launch IntelliJ IDEA.\nIf the Welcome screen opens, click Open. Otherwise, go to File | Open in the main menu and select the ktor-sample-app folder to open it.\n\n### Explore the project\nWhichever option you choose, the project should open as shown below:\n\nIn order to explain the project layout we have expanded the structure in the Project view and selected the file settings-gradle.kts.\nYou will see that the code to run your application lives in packages under src/main/kotlin. The default package is called com.example and contains a subpackage called plugins. Two files have been created within these packages, named Application.kt and Routing.kt.\n\n### Run the project\nTo run the project from within IntelliJ IDEA:\n1. Open the Gradle tool window by clicking the Gradle icon on the right sidebar.\n2. Within this tool window navigate to Tasks | application and double-click on the run task.\n3. Your Ktor application will start in the Run tool window at the bottom of the IDE.\n4. To confirm the project is running, open your browser at the specified URL (http://0.0.0.0:8080). You should once again see the message \"Hello World!\" displayed on the screen.\n\n## Additional Tasks To Attempt\n\nHere are some additional tasks you may wish to try:\n\n1. Change the default port.\n2. Change the port via YAML.\n3. Add a new HTTP endpoint.\n4. Configure static content.\n5. Write an integration test.\n6. Register error handlers.\n\nThese tasks do not depend on one another, but gradually increase in complexity. Attempting them in the order declared is the easiest way to learn incrementally.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-create-a-new-project.html", "title": "Create, open and run a new Ktor project", "description": "In this tutorial, you will learn how to create, open and run your first Ktor server project. Once you get up and running, you can attempt a series of tasks to familiarize yourself with Ktor.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:17:59", "type": "overview", "page_metadata": {"twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.606638128", "build-number": "707", "description": "\n        Get started with building your first Ktor Server application. In this tutorial you will learn how to create,\n        open and run a new Ktor project.\n    ", "og:title": "Create, open and run a new Ktor project | Ktor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "ogTitle": "Create, open and run a new Ktor project | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Create, open and run a new Ktor project | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Create, open and run a new Ktor project | Ktor Documentation", "scrapeId": "c8aef950-998e-45b9-a761-3a794efb8e1f", "sourceURL": "https://ktor.io/docs/server-create-a-new-project.html", "url": "https://ktor.io/docs/server-create-a-new-project.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a new ktor project in ktor?\n\nAssistant: To create a new ktor project in ktor, here's what you do:\nOne of the fastest ways to create a new Ktor project is by using the web-based Ktor project generator. Alternatively, if you have intelliJ IDEA Ultimate installed, you can use the dedicated Ktor plugin to create a new project..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-a-new-project.html", "title": "Create, open and run a new Ktor project", "description": "In this tutorial, you will learn how to create, open and run your first Ktor server project. Once you get up and running, you can attempt a series of tasks to familiarize yourself with Ktor.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:17:59", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.606638128", "build-number": "707", "description": "\n        Get started with building your first Ktor Server application. In this tutorial you will learn how to create,\n        open and run a new Ktor project.\n    ", "og:title": "Create, open and run a new Ktor project | Ktor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "ogTitle": "Create, open and run a new Ktor project | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Create, open and run a new Ktor project | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Create, open and run a new Ktor project | Ktor Documentation", "scrapeId": "c8aef950-998e-45b9-a761-3a794efb8e1f", "sourceURL": "https://ktor.io/docs/server-create-a-new-project.html", "url": "https://ktor.io/docs/server-create-a-new-project.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I use the ktor project generator in ktor?\n\nAssistant: To use the ktor project generator in ktor, here's what you do:\nTo create a new project with the Ktor project generator, follow the steps below:\n\n1. Navigate to the Ktor Project Generator.\n2. In the Project artifact field, enter com.example.ktor-sample-app as the name of your project artifact.\n3. Click Configure to open the settings dropdown menu:\n\nThe following settings are available:\n\n   - Build System: Choose the desired build system. This can be Gradle with Kotlin or Groovy DSL, or Maven.\n   - Ktor version: Choose the required Ktor version.\n   - Engine: Select an engine used to run a server.\n   - Configuration: Choose whether to specify server parameters in a YAML or HOCON file, or in code.\n   - Include samples: Leave this option enabled to add sample code for plugins.\n\nFor this tutorial you can leave the default values for these settings.\n4. Click Done to save the configuration and close the menu.\n5. Below you will find a set of plugins that you can add to your project. Plugins are building blocks that provide common functionality in a Ktor application, such as authentication, serialization and content encoding, compression, cookie support, and more.\n6. Click the Download button to generate and download your Ktor project..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-a-new-project.html", "title": "Create, open and run a new Ktor project", "description": "In this tutorial, you will learn how to create, open and run your first Ktor server project. Once you get up and running, you can attempt a series of tasks to familiarize yourself with Ktor.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:17:59", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.606638128", "build-number": "707", "description": "\n        Get started with building your first Ktor Server application. In this tutorial you will learn how to create,\n        open and run a new Ktor project.\n    ", "og:title": "Create, open and run a new Ktor project | Ktor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "ogTitle": "Create, open and run a new Ktor project | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Create, open and run a new Ktor project | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Create, open and run a new Ktor project | Ktor Documentation", "scrapeId": "c8aef950-998e-45b9-a761-3a794efb8e1f", "sourceURL": "https://ktor.io/docs/server-create-a-new-project.html", "url": "https://ktor.io/docs/server-create-a-new-project.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I use the ktor plugin for intellij idea ultimate in ktor?\n\nAssistant: To use the ktor plugin for intellij idea ultimate in ktor, here's what you do:\nThis section describes project setup using the Ktor plugin for Intellij IDEA Ultimate.\n\nTo create a new Ktor project, open IntelliJ IDEA, and follow the steps below:\n\n1. On the Welcome screen, click New Project.\n2. In the New Project wizard, choose Ktor from the list on the left.\n3. On the right pane, you can specify the following settings:\n   - Name: Specify a project name. Enter ktor-sample-app as the name of your project.\n   - Location: Specify a directory for your project.\n   - Website: Specify a domain used to generate a package name.\n   - Artifact: This field shows a generated artifact name.\n   - Engine: Select an engine used to run a server.\n   - Include samples: Leave this option enabled to add sample code for plugins.\n4. Click Advanced Settings to expand the additional settings menu:\n\nThe following settings are available:\n   - Build System: Choose the desired build system. This can be Gradle with Kotlin or Groovy DSL, or Maven.\n   - Ktor version: Choose the required Ktor version.\n   - Configuration: Choose whether to specify server parameters in a YAML or HOCON file, or in code.\n\nFor the sake of this tutorial, you can leave the default values of these settings.\n5. Click Next to go to the next page.\n6. On this page, you can choose a set of plugins - building blocks that provide common functionality of a Ktor application, for example, authentication, serialization and content encoding, compression, cookie support, and so on.\n7. Click Create and wait until IntelliJ IDEA generates a project and installs the dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-a-new-project.html", "title": "Create, open and run a new Ktor project", "description": "In this tutorial, you will learn how to create, open and run your first Ktor server project. Once you get up and running, you can attempt a series of tasks to familiarize yourself with Ktor.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:17:59", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.606638128", "build-number": "707", "description": "\n        Get started with building your first Ktor Server application. In this tutorial you will learn how to create,\n        open and run a new Ktor project.\n    ", "og:title": "Create, open and run a new Ktor project | Ktor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "ogTitle": "Create, open and run a new Ktor project | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Create, open and run a new Ktor project | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Create, open and run a new Ktor project | Ktor Documentation", "scrapeId": "c8aef950-998e-45b9-a761-3a794efb8e1f", "sourceURL": "https://ktor.io/docs/server-create-a-new-project.html", "url": "https://ktor.io/docs/server-create-a-new-project.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I unpack and run your ktor project in ktor?\n\nAssistant: To unpack and run your ktor project in ktor, here's what you do:\nIn this section you will learn how to unpack, build and run the project from the command line. The descriptions below assume that:\n\n- You have created and downloaded a project called ktor-sample-app.\n- This has been placed in a folder called myprojects in your home directory.\n\nIf necessary, alter the names and paths to match your own setup.\n\nOpen a command line tool of your choice and follow the steps:\n\n1. In a terminal, navigate to the folder where you downloaded the project:\n\n```\ncd ~/myprojects\n```\n\n2. Unpack the ZIP archive into a folder of the same name:\n\nmacOS\n```\nunzip ktor-sample-app.zip -d ktor-sample-app\n```\n\nWindows\n```\ntar -xf ktor-sample-app.zip\n```\n\nYour directory will now contain the ZIP archive and the unpacked folder.\n3. From the directory, navigate into the newly created folder:\n```\ncd ktor-sample-app\n```\n4. On macOS/UNIX systems, you will need to make the gradlew Gradle helper script executable. To do that, use the `chmod` command:\n```\nchmod +x ./gradlew\n```\n5. To build the project, use the following command:\n\nmacOS\n```\n./gradlew build\n```\n\nWindows\n```\ngradlew build\n```\n\nIf you see that your build has been successful you can execute the project, again via Gradle.\n6. To run the project, use the following command:\n\nmacOS\n```\n./gradlew run\n```\n\nWindows\n```\ngradlew run\n```\n\n7. To verify the project is running, open a browser at the URL mentioned in the output (http://0.0.0.0:8080). You should see the message \"Hello World!\" displayed on the screen..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-a-new-project.html", "title": "Create, open and run a new Ktor project", "description": "In this tutorial, you will learn how to create, open and run your first Ktor server project. Once you get up and running, you can attempt a series of tasks to familiarize yourself with Ktor.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:17:59", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.606638128", "build-number": "707", "description": "\n        Get started with building your first Ktor Server application. In this tutorial you will learn how to create,\n        open and run a new Ktor project.\n    ", "og:title": "Create, open and run a new Ktor project | Ktor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "ogTitle": "Create, open and run a new Ktor project | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Create, open and run a new Ktor project | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Create, open and run a new Ktor project | Ktor Documentation", "scrapeId": "c8aef950-998e-45b9-a761-3a794efb8e1f", "sourceURL": "https://ktor.io/docs/server-create-a-new-project.html", "url": "https://ktor.io/docs/server-create-a-new-project.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I open, explore and run your ktor project in intellij idea in ktor?\n\nAssistant: To open, explore and run your ktor project in intellij idea in ktor, here's what you do:\nIf you have IntelliJ IDEA installed, you can easily open the project from the command line.\n\nMake sure you are in the project folder and then type the `idea` command, followed by a period to represent the current folder:\n```\nidea .\n```\nAlternatively, to open the project manually launch IntelliJ IDEA.\nIf the Welcome screen opens, click Open. Otherwise, go to File | Open in the main menu and select the ktor-sample-app folder to open it.\n\n### Explore the project\nWhichever option you choose, the project should open as shown below:\n\nIn order to explain the project layout we have expanded the structure in the Project view and selected the file settings-gradle.kts.\nYou will see that the code to run your application lives in packages under src/main/kotlin. The default package is called com.example and contains a subpackage called plugins. Two files have been created within these packages, named Application.kt and Routing.kt.\n\n### Run the project\nTo run the project from within IntelliJ IDEA:\n1. Open the Gradle tool window by clicking the Gradle icon on the right sidebar.\n2. Within this tool window navigate to Tasks | application and double-click on the run task.\n3. Your Ktor application will start in the Run tool window at the bottom of the IDE.\n4. To confirm the project is running, open your browser at the specified URL (http://0.0.0.0:8080). You should once again see the message \"Hello World!\" displayed on the screen..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-a-new-project.html", "title": "Create, open and run a new Ktor project", "description": "In this tutorial, you will learn how to create, open and run your first Ktor server project. Once you get up and running, you can attempt a series of tasks to familiarize yourself with Ktor.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:17:59", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.606638128", "build-number": "707", "description": "\n        Get started with building your first Ktor Server application. In this tutorial you will learn how to create,\n        open and run a new Ktor project.\n    ", "og:title": "Create, open and run a new Ktor project | Ktor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "ogTitle": "Create, open and run a new Ktor project | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Create, open and run a new Ktor project | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Create, open and run a new Ktor project | Ktor Documentation", "scrapeId": "c8aef950-998e-45b9-a761-3a794efb8e1f", "sourceURL": "https://ktor.io/docs/server-create-a-new-project.html", "url": "https://ktor.io/docs/server-create-a-new-project.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I additional tasks to attempt in ktor?\n\nAssistant: To additional tasks to attempt in ktor, here's what you do:\nHere are some additional tasks you may wish to try:\n\n1. Change the default port.\n2. Change the port via YAML.\n3. Add a new HTTP endpoint.\n4. Configure static content.\n5. Write an integration test.\n6. Register error handlers.\n\nThese tasks do not depend on one another, but gradually increase in complexity. Attempting them in the order declared is the easiest way to learn incrementally..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-create-a-new-project.html", "title": "Create, open and run a new Ktor project", "description": "In this tutorial, you will learn how to create, open and run your first Ktor server project. Once you get up and running, you can attempt a series of tasks to familiarize yourself with Ktor.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:17:59", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.606638128", "build-number": "707", "description": "\n        Get started with building your first Ktor Server application. In this tutorial you will learn how to create,\n        open and run a new Ktor project.\n    ", "og:title": "Create, open and run a new Ktor project | Ktor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "ogTitle": "Create, open and run a new Ktor project | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Create, open and run a new Ktor project | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Create, open and run a new Ktor project | Ktor Documentation", "scrapeId": "c8aef950-998e-45b9-a761-3a794efb8e1f", "sourceURL": "https://ktor.io/docs/server-create-a-new-project.html", "url": "https://ktor.io/docs/server-create-a-new-project.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Create, open and run a new Ktor project in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Unpack the ZIP archive into a folder of the same name (macOS)**:\n\n```yaml\nunzip ktor-sample-app.zip -d ktor-sample-app\n```\n\nThis snippet shows you how to unpack the zip archive into a folder of the same name (macos), which is an important aspect of create, open and run a new ktor project.\n\n**Unpack the ZIP archive into a folder of the same name (Windows)**:\n\n```yaml\ntar -xf ktor-sample-app.zip\n```\n\nThis snippet shows you how to unpack the zip archive into a folder of the same name (windows), which is an important aspect of create, open and run a new ktor project.\n\n**Make the gradlew Gradle helper script executable (macOS)**:\n\n```yaml\nchmod +x ./gradlew\n```\n\nThis snippet shows you how to make the gradlew gradle helper script executable (macos), which is an important aspect of create, open and run a new ktor project.\n\n**Build the project (macOS)**:\n\n```yaml\n./gradlew build\n```\n\nThis snippet shows you how to build the project (macos), which is an important aspect of create, open and run a new ktor project.\n\n**Build the project (Windows)**:\n\n```yaml\ngradlew build\n```\n\nThis snippet shows you how to build the project (windows), which is an important aspect of create, open and run a new ktor project.\n\n**Run the project (macOS)**:\n\n```yaml\n./gradlew run\n```\n\nThis snippet shows you how to run the project (macos), which is an important aspect of create, open and run a new ktor project.\n\n**Run the project (Windows)**:\n\n```yaml\ngradlew run\n```\n\nThis snippet shows you how to run the project (windows), which is an important aspect of create, open and run a new ktor project.\n\n**Open the project in IntelliJ IDEA from command line**:\n\n```yaml\nidea .\n```\n\nThis snippet shows you how to open the project in intellij idea from command line, which is an important aspect of create, open and run a new ktor project.\n\n**Create a new HTTP endpoint**:\n\n```yaml\nget(\"/test1\") {\n    val text = \"<h1>Hello From Ktor</h1>\"\n    val type = ContentType.parse(\"text/html\")\n    call.respondText(text, type)\n}\n```\n\nThis snippet shows you how to create a new http endpoint, which is an important aspect of create, open and run a new ktor project.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-create-a-new-project.html", "title": "Create, open and run a new Ktor project", "description": "In this tutorial, you will learn how to create, open and run your first Ktor server project. Once you get up and running, you can attempt a series of tasks to familiarize yourself with Ktor.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:17:59", "type": "code_examples", "page_metadata": {"twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.606638128", "build-number": "707", "description": "\n        Get started with building your first Ktor Server application. In this tutorial you will learn how to create,\n        open and run a new Ktor project.\n    ", "og:title": "Create, open and run a new Ktor project | Ktor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "ogTitle": "Create, open and run a new Ktor project | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Create, open and run a new Ktor project | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Create, open and run a new Ktor project | Ktor Documentation", "scrapeId": "c8aef950-998e-45b9-a761-3a794efb8e1f", "sourceURL": "https://ktor.io/docs/server-create-a-new-project.html", "url": "https://ktor.io/docs/server-create-a-new-project.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Create, open and run a new Ktor project in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFollow the suggested order of tutorials for best learning experience.\n\nLeave default values for settings in the Ktor project generator for simplicity.\n\nUse the Gradle tool window in IntelliJ IDEA to manage and run your project.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-create-a-new-project.html", "title": "Create, open and run a new Ktor project", "description": "In this tutorial, you will learn how to create, open and run your first Ktor server project. Once you get up and running, you can attempt a series of tasks to familiarize yourself with Ktor.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:17:59", "type": "best_practices", "page_metadata": {"twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.606638128", "build-number": "707", "description": "\n        Get started with building your first Ktor Server application. In this tutorial you will learn how to create,\n        open and run a new Ktor project.\n    ", "og:title": "Create, open and run a new Ktor project | Ktor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-a-new-project.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "ogTitle": "Create, open and run a new Ktor project | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Create, open and run a new Ktor project | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Create, open and run a new Ktor project | Ktor Documentation", "scrapeId": "c8aef950-998e-45b9-a761-3a794efb8e1f", "sourceURL": "https://ktor.io/docs/server-create-a-new-project.html", "url": "https://ktor.io/docs/server-create-a-new-project.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Adding client dependencies is in ktor?\n\nAssistant: Sure, I'd be happy to explain Adding client dependencies in ktor.\n\n# Adding client dependencies\n\nTo use the Ktor HTTP client in your project, you need to configure repositories and add the necessary dependencies.Here's a quick rundown of what this is about:\n\n## Configure the repositories\n\nBefore adding Ktor dependencies, you need to configure the repositories for this project:\n\n- Production\n\nProduction releases of Ktor are available in the Maven central repository. You can declare this repository in your build script as follows:\n\n```gradle\nrepositories {\n      mavenCentral()\n}\n```\n\n> ### note\n>\n> You don't need to add the Maven central repository in the pom.xml file since your project inherits the central repository from [Super POM](https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#super-pom).\n\n- Early Access Program (EAP)\n\nTo get access to the [EAP](https://ktor.io/eap/) versions of Ktor, you need to reference the [Space repository](https://maven.pkg.jetbrains.space/public/p/ktor/eap/io/ktor/):\n\n```gradle\nrepositories {\n      maven {\n          url = uri(\"https://maven.pkg.jetbrains.space/public/p/ktor/eap\")\n      }\n}\n```\n\nNote that Ktor EAPs might require the [Kotlin dev repository](https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev):\n\n```gradle\nrepositories {\n      maven {\n          url = uri(\"https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev\")\n      }\n}\n```\n\n## Add dependencies\n\n### Client dependency\n\nThe main client functionality is available in the `ktor-client-core` artifact. Depending on your build system, you can add it in the following way:\n\n```gradle\nimplementation(\"io.ktor:ktor-client-core:$ktor_version\")\n```\n\nFor a multiplatform project, you can define the Ktor version and the `ktor-client-core` artifact in the `gradle/libs.versions.toml` file:\n\n```toml\n[versions]\nktor = \"3.1.1\"\n\n[libraries]\nktor-client-core = { module = \"io.ktor:ktor-client-core\", version.ref = \"ktor\" }\n```\n\nThen, add `ktor-client-core` as a dependency to the `commonMain` source set:\n\n```gradle\nsourceSets {\n    commonMain.dependencies {\n        implementation(libs.ktor.client.core)\n    }\n}\n```\n\n### Engine dependency\n\nAn [engine](https://ktor.io/docs/client-engines.html) is responsible for processing network requests. For example, you can add a `CIO` engine dependency as follows:\n\n```gradle\nimplementation(\"io.ktor:ktor-client-cio:$ktor_version\")\n```\n\nFor a multiplatform project, you need to add a dependency for the required engine to a corresponding source set.\n\n### Logging dependency\n\nOn [JVM](https://ktor.io/docs/client-engines.html#jvm), Ktor uses the Simple Logging Facade for Java ( [SLF4J](http://www.slf4j.org/)) as an abstraction layer for logging. To enable logging, include an artifact with the required SLF4J implementation, such as [Logback](https://logback.qos.ch/):\n\n```gradle\nimplementation(\"ch.qos.logback:logback-classic:$logback_version\")\n```\n\n### Plugin dependency\n\nKtor lets you use additional client functionality ( [plugins](https://ktor.io/docs/client-plugins.html)) that is not available by default, such as authorization and serialization.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-dependencies.html", "title": "Adding client dependencies", "description": "To use the Ktor HTTP client in your project, you need to configure repositories and add the necessary dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:18:31", "type": "overview", "page_metadata": {"og:title": "Adding client dependencies | Ktor", "twitter:title": "Adding client dependencies | Ktor", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Adding client dependencies | Ktor", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-dependencies.html", "og:url": "https://ktor.io/docs/3.1.1/client-dependencies.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding client dependencies | Ktor Documentation", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:05.712717811", "og:locale": "en_US", "scrapeId": "7cc2bc35-432c-4ef9-bd17-dfd12855d8a8", "sourceURL": "https://ktor.io/docs/client-dependencies.html", "url": "https://ktor.io/docs/client-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure the repositories in ktor?\n\nAssistant: To configure the repositories in ktor, here's what you do:\nBefore adding Ktor dependencies, you need to configure the repositories for this project:\n\n- Production\n\nProduction releases of Ktor are available in the Maven central repository. You can declare this repository in your build script as follows:\n\n```gradle\nrepositories {\n      mavenCentral()\n}\n```\n\n> ### note\n>\n> You don't need to add the Maven central repository in the pom.xml file since your project inherits the central repository from [Super POM](https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#super-pom).\n\n- Early Access Program (EAP)\n\nTo get access to the [EAP](https://ktor.io/eap/) versions of Ktor, you need to reference the [Space repository](https://maven.pkg.jetbrains.space/public/p/ktor/eap/io/ktor/):\n\n```gradle\nrepositories {\n      maven {\n          url = uri(\"https://maven.pkg.jetbrains.space/public/p/ktor/eap\")\n      }\n}\n```\n\nNote that Ktor EAPs might require the [Kotlin dev repository](https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev):\n\n```gradle\nrepositories {\n      maven {\n          url = uri(\"https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev\")\n      }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-dependencies.html", "title": "Adding client dependencies", "description": "To use the Ktor HTTP client in your project, you need to configure repositories and add the necessary dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:18:31", "type": "section_detail", "page_metadata": {"og:title": "Adding client dependencies | Ktor", "twitter:title": "Adding client dependencies | Ktor", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Adding client dependencies | Ktor", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-dependencies.html", "og:url": "https://ktor.io/docs/3.1.1/client-dependencies.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding client dependencies | Ktor Documentation", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:05.712717811", "og:locale": "en_US", "scrapeId": "7cc2bc35-432c-4ef9-bd17-dfd12855d8a8", "sourceURL": "https://ktor.io/docs/client-dependencies.html", "url": "https://ktor.io/docs/client-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\n### Client dependency\n\nThe main client functionality is available in the `ktor-client-core` artifact. Depending on your build system, you can add it in the following way:\n\n```gradle\nimplementation(\"io.ktor:ktor-client-core:$ktor_version\")\n```\n\nFor a multiplatform project, you can define the Ktor version and the `ktor-client-core` artifact in the `gradle/libs.versions.toml` file:\n\n```toml\n[versions]\nktor = \"3.1.1\"\n\n[libraries]\nktor-client-core = { module = \"io.ktor:ktor-client-core\", version.ref = \"ktor\" }\n```\n\nThen, add `ktor-client-core` as a dependency to the `commonMain` source set:\n\n```gradle\nsourceSets {\n    commonMain.dependencies {\n        implementation(libs.ktor.client.core)\n    }\n}\n```\n\n### Engine dependency\n\nAn [engine](https://ktor.io/docs/client-engines.html) is responsible for processing network requests. For example, you can add a `CIO` engine dependency as follows:\n\n```gradle\nimplementation(\"io.ktor:ktor-client-cio:$ktor_version\")\n```\n\nFor a multiplatform project, you need to add a dependency for the required engine to a corresponding source set.\n\n### Logging dependency\n\nOn [JVM](https://ktor.io/docs/client-engines.html#jvm), Ktor uses the Simple Logging Facade for Java ( [SLF4J](http://www.slf4j.org/)) as an abstraction layer for logging. To enable logging, include an artifact with the required SLF4J implementation, such as [Logback](https://logback.qos.ch/):\n\n```gradle\nimplementation(\"ch.qos.logback:logback-classic:$logback_version\")\n```\n\n### Plugin dependency\n\nKtor lets you use additional client functionality ( [plugins](https://ktor.io/docs/client-plugins.html)) that is not available by default, such as authorization and serialization..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-dependencies.html", "title": "Adding client dependencies", "description": "To use the Ktor HTTP client in your project, you need to configure repositories and add the necessary dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:18:31", "type": "section_detail", "page_metadata": {"og:title": "Adding client dependencies | Ktor", "twitter:title": "Adding client dependencies | Ktor", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Adding client dependencies | Ktor", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-dependencies.html", "og:url": "https://ktor.io/docs/3.1.1/client-dependencies.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding client dependencies | Ktor Documentation", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:05.712717811", "og:locale": "en_US", "scrapeId": "7cc2bc35-432c-4ef9-bd17-dfd12855d8a8", "sourceURL": "https://ktor.io/docs/client-dependencies.html", "url": "https://ktor.io/docs/client-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Adding client dependencies in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure Maven Central Repository**:\n\n```yaml\nrepositories {\n      mavenCentral()\n}\n```\n\nThis snippet shows you how to configure maven central repository, which is an important aspect of adding client dependencies.\n\n**Configure EAP Repository**:\n\n```yaml\nrepositories {\n      maven {\n          url = uri(\"https://maven.pkg.jetbrains.space/public/p/ktor/eap\")\n      }\n}\n```\n\nThis snippet shows you how to configure eap repository, which is an important aspect of adding client dependencies.\n\n**Add Client Dependency (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-client-core:$ktor_version\")\n```\n\nThis snippet shows you how to add client dependency (gradle kotlin), which is an important aspect of adding client dependencies.\n\n**Add Client Dependency (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-core-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add client dependency (maven), which is an important aspect of adding client dependencies.\n\n**Multiplatform Ktor Version Definition**:\n\n```yaml\n[versions]\nktor = \"3.1.1\"\n\n[libraries]\nktor-client-core = { module = \"io.ktor:ktor-client-core\", version.ref = \"ktor\" }\n```\n\nThis snippet shows you how to multiplatform ktor version definition, which is an important aspect of adding client dependencies.\n\n**Add Engine Dependency (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-client-cio:$ktor_version\")\n```\n\nThis snippet shows you how to add engine dependency (gradle kotlin), which is an important aspect of adding client dependencies.\n\n**Add Logging Dependency (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"ch.qos.logback:logback-classic:$logback_version\")\n```\n\nThis snippet shows you how to add logging dependency (gradle kotlin), which is an important aspect of adding client dependencies.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-dependencies.html", "title": "Adding client dependencies", "description": "To use the Ktor HTTP client in your project, you need to configure repositories and add the necessary dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:18:31", "type": "code_examples", "page_metadata": {"og:title": "Adding client dependencies | Ktor", "twitter:title": "Adding client dependencies | Ktor", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Adding client dependencies | Ktor", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-dependencies.html", "og:url": "https://ktor.io/docs/3.1.1/client-dependencies.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding client dependencies | Ktor Documentation", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:05.712717811", "og:locale": "en_US", "scrapeId": "7cc2bc35-432c-4ef9-bd17-dfd12855d8a8", "sourceURL": "https://ktor.io/docs/client-dependencies.html", "url": "https://ktor.io/docs/client-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Adding client dependencies in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor different platforms, Ktor provides platform-specific artifacts with suffixes such as -jvm or -js, for example, ktor-client-core-jvm. Note that Gradle resolves artifacts appropriate for a given platform automatically, while Maven doesn't support this capability. This means that for Maven, you need to add a platform-specific suffix manually.\n\nFor a multiplatform project, a plugin dependency should be added to the commonMain source set. Note that some plugins might have limitations for specific platforms.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-dependencies.html", "title": "Adding client dependencies", "description": "To use the Ktor HTTP client in your project, you need to configure repositories and add the necessary dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:18:31", "type": "best_practices", "page_metadata": {"og:title": "Adding client dependencies | Ktor", "twitter:title": "Adding client dependencies | Ktor", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Adding client dependencies | Ktor", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-dependencies.html", "og:url": "https://ktor.io/docs/3.1.1/client-dependencies.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding client dependencies | Ktor Documentation", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:05.712717811", "og:locale": "en_US", "scrapeId": "7cc2bc35-432c-4ef9-bd17-dfd12855d8a8", "sourceURL": "https://ktor.io/docs/client-dependencies.html", "url": "https://ktor.io/docs/client-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Testing in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Testing in Ktor Server in ktor.\n\n# Testing in Ktor Server\n\nThis page covers how to test Ktor server applications using a special testing engine that allows for quick execution of tests without the need for a real web server.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo test a server Ktor application, you need to include the following artifacts in the build script:\n\n- Add the `ktor-server-test-host` dependency:\n\n```\ntestImplementation(\"io.ktor:ktor-server-test-host:$ktor_version\")\n```\n\n```\ntestImplementation \"io.ktor:ktor-server-test-host:$ktor_version\"\n```\n\n```\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-test-host-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Add the `kotlin-test` dependency providing a set of utility functions for performing assertions in tests:\n\n```\ntestImplementation(\"org.jetbrains.kotlin:kotlin-test:$kotlin_version\")\n```\n\n```\ntestImplementation \"org.jetbrains.kotlin:kotlin-test:$kotlin_version\"\n```\n\n```\n<dependency>\n      <groupId>org.jetbrains.kotlin</groupId>\n      <artifactId>kotlin-test</artifactId>\n      <version>${kotlin_version}</version>\n</dependency>\n```\n\n> ### tip\n>\n> To test the [Native server](https://ktor.io/docs/server-native.html#add-dependencies), add the testing artifacts to the `nativeTest` source set.\n\n## Testing overview\n\nTo use a testing engine, follow the steps below:\n\n1. Create a JUnit test class and a test function.\n\n2. Use the [testApplication](https://api.ktor.io/ktor-server/ktor-server-test-host/io.ktor.server.testing/test-application.html) function to set up a configured instance of a test application running locally.\n\n3. Use the [Ktor HTTP client](https://ktor.io/docs/client-create-and-configure.html) instance inside a test application to make a request to your server, receive a response, and make assertions.\n\nThe code below demonstrates how to test the most simple Ktor application that accepts GET requests made to the `/` path and responds with a plain text response.\n\n## Test an application\n\n### Step 1: Configure a test application\n\nA configuration of test applications might include the following steps:\n\n- [Adding application modules](https://ktor.io/docs/server-testing.html#add-modules)\n\n- [(Optional) Adding routes](https://ktor.io/docs/server-testing.html#add-routing)\n\n- [(Optional) Customizing environment](https://ktor.io/docs/server-testing.html#environment)\n\n- [(Optional) Mocking external services](https://ktor.io/docs/server-testing.html#external-services)\n\n> ### tip\n>\n> By default, the configured test application starts on the [first client call](https://ktor.io/docs/server-testing.html#make-request). Optionally, you can call the `startApplication` function to start the application manually. This might be useful if you need to test your application's [lifecycle events](https://ktor.io/docs/server-events.html#predefined-events).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-testing.html", "title": "Testing in Ktor Server", "description": "This page covers how to test Ktor server applications using a special testing engine that allows for quick execution of tests without the need for a real web server.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:18:53", "type": "overview", "page_metadata": {"ogSiteName": "Ktor Help", "ogDescription": "", "twitter:title": "Testing in Ktor Server | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.635801132", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-testing.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-testing.html", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Testing in Ktor Server | Ktor", "og:description": "", "title": "Testing in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Testing in Ktor Server | Ktor", "scrapeId": "3104ad0c-ca3a-4a71-ac7e-b1be5c56ea8b", "sourceURL": "https://ktor.io/docs/server-testing.html", "url": "https://ktor.io/docs/server-testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo test a server Ktor application, you need to include the following artifacts in the build script:\n\n- Add the `ktor-server-test-host` dependency:\n\n```\ntestImplementation(\"io.ktor:ktor-server-test-host:$ktor_version\")\n```\n\n```\ntestImplementation \"io.ktor:ktor-server-test-host:$ktor_version\"\n```\n\n```\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-test-host-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Add the `kotlin-test` dependency providing a set of utility functions for performing assertions in tests:\n\n```\ntestImplementation(\"org.jetbrains.kotlin:kotlin-test:$kotlin_version\")\n```\n\n```\ntestImplementation \"org.jetbrains.kotlin:kotlin-test:$kotlin_version\"\n```\n\n```\n<dependency>\n      <groupId>org.jetbrains.kotlin</groupId>\n      <artifactId>kotlin-test</artifactId>\n      <version>${kotlin_version}</version>\n</dependency>\n```\n\n> ### tip\n>\n> To test the [Native server](https://ktor.io/docs/server-native.html#add-dependencies), add the testing artifacts to the `nativeTest` source set..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-testing.html", "title": "Testing in Ktor Server", "description": "This page covers how to test Ktor server applications using a special testing engine that allows for quick execution of tests without the need for a real web server.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:18:53", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "ogDescription": "", "twitter:title": "Testing in Ktor Server | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.635801132", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-testing.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-testing.html", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Testing in Ktor Server | Ktor", "og:description": "", "title": "Testing in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Testing in Ktor Server | Ktor", "scrapeId": "3104ad0c-ca3a-4a71-ac7e-b1be5c56ea8b", "sourceURL": "https://ktor.io/docs/server-testing.html", "url": "https://ktor.io/docs/server-testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I testing overview in ktor?\n\nAssistant: To testing overview in ktor, here's what you do:\nTo use a testing engine, follow the steps below:\n\n1. Create a JUnit test class and a test function.\n\n2. Use the [testApplication](https://api.ktor.io/ktor-server/ktor-server-test-host/io.ktor.server.testing/test-application.html) function to set up a configured instance of a test application running locally.\n\n3. Use the [Ktor HTTP client](https://ktor.io/docs/client-create-and-configure.html) instance inside a test application to make a request to your server, receive a response, and make assertions.\n\nThe code below demonstrates how to test the most simple Ktor application that accepts GET requests made to the `/` path and responds with a plain text response..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-testing.html", "title": "Testing in Ktor Server", "description": "This page covers how to test Ktor server applications using a special testing engine that allows for quick execution of tests without the need for a real web server.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:18:53", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "ogDescription": "", "twitter:title": "Testing in Ktor Server | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.635801132", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-testing.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-testing.html", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Testing in Ktor Server | Ktor", "og:description": "", "title": "Testing in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Testing in Ktor Server | Ktor", "scrapeId": "3104ad0c-ca3a-4a71-ac7e-b1be5c56ea8b", "sourceURL": "https://ktor.io/docs/server-testing.html", "url": "https://ktor.io/docs/server-testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I test an application in ktor?\n\nAssistant: To test an application in ktor, here's what you do:\n### Step 1: Configure a test application\n\nA configuration of test applications might include the following steps:\n\n- [Adding application modules](https://ktor.io/docs/server-testing.html#add-modules)\n\n- [(Optional) Adding routes](https://ktor.io/docs/server-testing.html#add-routing)\n\n- [(Optional) Customizing environment](https://ktor.io/docs/server-testing.html#environment)\n\n- [(Optional) Mocking external services](https://ktor.io/docs/server-testing.html#external-services)\n\n> ### tip\n>\n> By default, the configured test application starts on the [first client call](https://ktor.io/docs/server-testing.html#make-request). Optionally, you can call the `startApplication` function to start the application manually. This might be useful if you need to test your application's [lifecycle events](https://ktor.io/docs/server-events.html#predefined-events)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-testing.html", "title": "Testing in Ktor Server", "description": "This page covers how to test Ktor server applications using a special testing engine that allows for quick execution of tests without the need for a real web server.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:18:53", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "ogDescription": "", "twitter:title": "Testing in Ktor Server | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.635801132", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-testing.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-testing.html", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Testing in Ktor Server | Ktor", "og:description": "", "title": "Testing in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Testing in Ktor Server | Ktor", "scrapeId": "3104ad0c-ca3a-4a71-ac7e-b1be5c56ea8b", "sourceURL": "https://ktor.io/docs/server-testing.html", "url": "https://ktor.io/docs/server-testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Testing in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Test Application Example**:\n\n```yaml\npackage com.example\n\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\nclass ApplicationTest {\n    @Test\n    fun testRoot() = testApplication {\n        application {\n            module()\n        }\n        val response = client.get(\"/\")\n        assertEquals(HttpStatusCode.OK, response.status)\n        assertEquals(\"Hello, world!\", response.bodyAsText())\n    }\n}\n```\n\nThis snippet shows you how to test application example, which is an important aspect of testing in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-testing.html", "title": "Testing in Ktor Server", "description": "This page covers how to test Ktor server applications using a special testing engine that allows for quick execution of tests without the need for a real web server.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:18:53", "type": "code_examples", "page_metadata": {"ogSiteName": "Ktor Help", "ogDescription": "", "twitter:title": "Testing in Ktor Server | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.635801132", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-testing.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-testing.html", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Testing in Ktor Server | Ktor", "og:description": "", "title": "Testing in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Testing in Ktor Server | Ktor", "scrapeId": "3104ad0c-ca3a-4a71-ac7e-b1be5c56ea8b", "sourceURL": "https://ktor.io/docs/server-testing.html", "url": "https://ktor.io/docs/server-testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Testing in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo test the Native server, add the testing artifacts to the nativeTest source set.\n\nBy default, the configured test application starts on the first client call. Optionally, you can call the startApplication function to start the application manually.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-testing.html", "title": "Testing in Ktor Server", "description": "This page covers how to test Ktor server applications using a special testing engine that allows for quick execution of tests without the need for a real web server.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:18:53", "type": "best_practices", "page_metadata": {"ogSiteName": "Ktor Help", "ogDescription": "", "twitter:title": "Testing in Ktor Server | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.635801132", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:type": "website", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-testing.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-testing.html", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Testing in Ktor Server | Ktor", "og:description": "", "title": "Testing in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Testing in Ktor Server | Ktor", "scrapeId": "3104ad0c-ca3a-4a71-ac7e-b1be5c56ea8b", "sourceURL": "https://ktor.io/docs/server-testing.html", "url": "https://ktor.io/docs/server-testing.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what LDAP is in ktor?\n\nAssistant: Sure, I'd be happy to explain LDAP in ktor.\n\n# LDAP\n\nLDAP is a protocol for working with various directory services that can store information about users. Ktor allows you to authenticate LDAP users using the basic, digest, or form-based authentications schemes.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo enable `LDAP` authentication, you need to include the `ktor-server-auth` and `ktor-server-auth-ldap` artifacts in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\nimplementation(\"io.ktor:ktor-server-auth-ldap:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\nimplementation \"io.ktor:ktor-server-auth-ldap:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n<groupId>io.ktor</groupId>\n<artifactId>ktor-server-auth</artifactId>\n<version>${ktor_version}</version>\n</dependency>\n<dependency>\n<groupId>io.ktor</groupId>\n<artifactId>ktor-server-auth-ldap</artifactId>\n<version>${ktor_version}</version>\n</dependency>\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-ldap.html", "title": "LDAP", "description": "LDAP is a protocol for working with various directory services that can store information about users. Ktor allows you to authenticate LDAP users using the basic, digest, or form-based authentications schemes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:19:05", "type": "overview", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "LDAP | Ktor", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.996813506", "og:url": "https://ktor.io/docs/3.1.1/server-ldap.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "twitter:title": "LDAP | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:description": "", "og:title": "LDAP | Ktor", "title": "LDAP | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-ldap.html", "scrapeId": "683d2989-b6ea-4023-871c-9ec620504159", "sourceURL": "https://ktor.io/docs/server-ldap.html", "url": "https://ktor.io/docs/server-ldap.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo enable `LDAP` authentication, you need to include the `ktor-server-auth` and `ktor-server-auth-ldap` artifacts in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\nimplementation(\"io.ktor:ktor-server-auth-ldap:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\nimplementation \"io.ktor:ktor-server-auth-ldap:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n<groupId>io.ktor</groupId>\n<artifactId>ktor-server-auth</artifactId>\n<version>${ktor_version}</version>\n</dependency>\n<dependency>\n<groupId>io.ktor</groupId>\n<artifactId>ktor-server-auth-ldap</artifactId>\n<version>${ktor_version}</version>\n</dependency>\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-ldap.html", "title": "LDAP", "description": "LDAP is a protocol for working with various directory services that can store information about users. Ktor allows you to authenticate LDAP users using the basic, digest, or form-based authentications schemes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:19:05", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "LDAP | Ktor", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.996813506", "og:url": "https://ktor.io/docs/3.1.1/server-ldap.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "twitter:title": "LDAP | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:description": "", "og:title": "LDAP | Ktor", "title": "LDAP | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-ldap.html", "scrapeId": "683d2989-b6ea-4023-871c-9ec620504159", "sourceURL": "https://ktor.io/docs/server-ldap.html", "url": "https://ktor.io/docs/server-ldap.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for LDAP in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Authentication Provider**:\n\n```yaml\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\nimport io.ktor.server.auth.ldap.*\n//...\ninstall(Authentication) {\n    basic {\n        validate { credentials ->\n            // Authenticate an LDAP user\n        }\n    }\n}\n```\n\nThis snippet shows you how to basic authentication provider, which is an important aspect of ldap.\n\n**LDAP Authentication**:\n\n```yaml\ninstall(Authentication) {\n    basic(\"auth-ldap\") {\n        validate { credentials ->\n            ldapAuthenticate(credentials, \"ldap://0.0.0.0:389\", \"cn=%s,dc=ktor,dc=io\")\n        }\n    }\n}\n```\n\nThis snippet shows you how to ldap authentication, which is an important aspect of ldap.\n\n**Additional Validation for Authenticated User**:\n\n```yaml\ninstall(Authentication) {\n    basic(\"auth-ldap\") {\n        validate { credentials ->\n            ldapAuthenticate(credentials, \"ldap://localhost:389\", \"cn=%s,dc=ktor,dc=io\") {\n                if (it.name == it.password) {\n                    UserIdPrincipal(it.name)\n                } else {\n                    null\n                }\n            }\n        }\n    }\n}\n```\n\nThis snippet shows you how to additional validation for authenticated user, which is an important aspect of ldap.\n\n**Protecting Resources**:\n\n```yaml\nrouting {\n    authenticate(\"auth-ldap\") {\n        get(\"/\") {\n            call.respondText(\"Hello, ${call.principal<UserIdPrincipal>()?.name}!\")\n        }\n    }\n}\n```\n\nThis snippet shows you how to protecting resources, which is an important aspect of ldap.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-ldap.html", "title": "LDAP", "description": "LDAP is a protocol for working with various directory services that can store information about users. Ktor allows you to authenticate LDAP users using the basic, digest, or form-based authentications schemes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:19:05", "type": "code_examples", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "LDAP | Ktor", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.996813506", "og:url": "https://ktor.io/docs/3.1.1/server-ldap.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "twitter:title": "LDAP | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:description": "", "og:title": "LDAP | Ktor", "title": "LDAP | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-ldap.html", "scrapeId": "683d2989-b6ea-4023-871c-9ec620504159", "sourceURL": "https://ktor.io/docs/server-ldap.html", "url": "https://ktor.io/docs/server-ldap.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using LDAP in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can get general information about authentication and authorization in Ktor in the Authentication and authorization in Ktor Server section.\n\nBear in mind that current LDAP implementation is synchronous.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-ldap.html", "title": "LDAP", "description": "LDAP is a protocol for working with various directory services that can store information about users. Ktor allows you to authenticate LDAP users using the basic, digest, or form-based authentications schemes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:19:05", "type": "best_practices", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "LDAP | Ktor", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.996813506", "og:url": "https://ktor.io/docs/3.1.1/server-ldap.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "twitter:title": "LDAP | Ktor", "og:site_name": "Ktor Help", "twitter:description": "", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:description": "", "og:title": "LDAP | Ktor", "title": "LDAP | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-ldap.html", "scrapeId": "683d2989-b6ea-4023-871c-9ec620504159", "sourceURL": "https://ktor.io/docs/server-ldap.html", "url": "https://ktor.io/docs/server-ldap.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Sockets is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Sockets in ktor.\n\n# Server Plugin Sockets\n\nKtor supports TCP and UDP raw sockets, exposing a suspending API that uses java.nio under the hood.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `Sockets`, you need to include the `ktor-network` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-network:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-network:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-network-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nTo use [secure sockets](https://ktor.io/docs/server-sockets.html#secure) in the client, you also need to add `io.ktor:ktor-network-tls`.\n\n## Server\n\n### Create a server socket\nTo build a server socket, create the `SelectorManager` instance, call the `SocketBuilder.tcp()` function on it, and then use `bind` to bind a server socket to specific port:\n\n```\nval selectorManager = SelectorManager(Dispatchers.IO)\nval serverSocket = aSocket(selectorManager).tcp().bind(\"127.0.0.1\", 9002)\n```\n\nThe snippet above creates a TCP socket, which is the [ServerSocket](https://api.ktor.io/ktor-network/io.ktor.network.sockets/-server-socket/index.html) instance. To create a UDP socket, use `SocketBuilder.udp()`.\n\n### Accept incoming connections\nAfter creating a server socket, you need to call the `ServerSocket.accept` function that accepts a socket connection and returns a connected socket (a [Socket](https://api.ktor.io/ktor-network/io.ktor.network.sockets/-socket/index.html) instance):\n\n```\nval socket = serverSocket.accept()\n```\n\nOnce you have a connected socket, you can receive/send data by reading from or writing to the socket.\n\n### Receive data\nTo receive data from the client, you need to call the `Socket.openReadChannel` function, which returns [ByteReadChannel](https://api.ktor.io/ktor-io/io.ktor.utils.io/-byte-read-channel/index.html):\n\n```\nval receiveChannel = socket.openReadChannel()\n```\n\n`ByteReadChannel` provides API for asynchronous reading of data. For example, you can read a line of UTF-8 characters using `ByteReadChannel.readUTF8Line`:\n\n```\nval name = receiveChannel.readUTF8Line()\n```\n\n### Send data\nTo send data to the client, call the `Socket.openWriteChannel` function, which returns [ByteWriteChannel](https://api.ktor.io/ktor-io/io.ktor.utils.io/-byte-write-channel/index.html):\n\n```\nval sendChannel = socket.openWriteChannel(autoFlush = true)\n```\n\n`ByteWriteChannel` provides API for asynchronous writing of sequences of bytes. For example, you can write a line of UTF-8 characters using `ByteWriteChannel.writeStringUtf8`:\n\n```\nval name = receiveChannel.readUTF8Line()\nsendChannel.writeStringUtf8(\"Hello, $name!\\n\")\n```\n\n### Close a socket\nTo release resources associated with the [connected socket](https://ktor.io/docs/server-sockets.html#accepts_connection), call `Socket.close`:\n\n```\nsocket.close()\n```\n\n### Example\nA code sample below demonstrates how to use sockets on the server side:\n\n```\npackage com.example\n\nimport io.ktor.network.selector.*\nimport io.ktor.network.sockets.*\nimport io.ktor.utils.io.*\nimport kotlinx.coroutines.*\n\nfun main(args: Array<String>) {\n    runBlocking {\n        val selectorManager = SelectorManager(Dispatchers.IO)\n        val serverSocket = aSocket(selectorManager).tcp().bind(\"127.0.0.1\", 9002)\n        println(\"Server is listening at ${serverSocket.localAddress}\")\n        while (true) {\n            val socket = serverSocket.accept()\n            println(\"Accepted $socket\")\n            launch {\n                val receiveChannel = socket.openReadChannel()\n                val sendChannel = socket.openWriteChannel(autoFlush = true)\n                sendChannel.writeStringUtf8(\"Please enter your name\\n\")\n                try {\n                    while (true) {\n                        val name = receiveChannel.readUTF8Line()\n                        sendChannel.writeStringUtf8(\"Hello, $name!\\n\")\n                    }\n                } catch (e: Throwable) {\n                    socket.close()\n                }\n            }\n        }\n    }\n}\n```\n\nYou can find the full example here: [sockets-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/sockets-server).\n\n## Client\n\n### Create a socket\nTo build a client socket, create the `SelectorManager` instance, call the `SocketBuilder.tcp()` function on it, and then use `connect` to establish a connection and get a connected socket (a [Socket](https://api.ktor.io/ktor-network/io.ktor.network.sockets/-socket/index.html) instance):\n\n```\nval selectorManager = SelectorManager(Dispatchers.IO)\nval socket = aSocket(selectorManager).tcp().connect(\"127.0.0.1\", 9002)\n```\n\nOnce you have a connected socket, you can receive/send data by reading from or writing to the socket.\n\n### Create a secure socket (SSL/TLS)\nSecure sockets allow you to establish TLS connections. To use secure sockets, you need to add the [ktor-network-tls](https://ktor.io/docs/server-sockets.html#add_dependencies) dependency. Then, call the `Socket.tls` function on a connected socket:\n\n```\nval selectorManager = SelectorManager(Dispatchers.IO)\nval socket = aSocket(selectorManager).tcp().connect(\"127.0.0.1\", 8443).tls()\n```\n\nThe `tls` function allows you to adjust TLS parameters provided by [TLSConfigBuilder](https://api.ktor.io/ktor-network/ktor-network-tls/io.ktor.network.tls/-t-l-s-config-builder/index.html):\n\n```\nval selectorManager = SelectorManager(Dispatchers.IO)\nval socket = aSocket(selectorManager).tcp().connect(\"youtrack.jetbrains.com\", port = 443).tls(coroutineContext = coroutineContext) {\n    trustManager = object : X509TrustManager {\n        override fun getAcceptedIssuers(): Array<X509Certificate?> = arrayOf()\n        override fun checkClientTrusted(certs: Array<X509Certificate?>?, authType: String?) {}\n        override fun checkServerTrusted(certs: Array<X509Certificate?>?, authType: String?) {}\n    }\n}\n```\n\nYou can find the full example here: [sockets-client-tls](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/sockets-client-tls).\n\n## Tips\n\n### Receive data\nTo receive data from the server, you need to call the `Socket.openReadChannel` function, which returns [ByteReadChannel](https://api.ktor.io/ktor-io/io.ktor.utils.io/-byte-read-channel/index.html):\n\n```\nval receiveChannel = socket.openReadChannel()\n```\n\n`ByteReadChannel` provides API for asynchronous reading of data. For example, you can read a line of UTF-8 characters using `ByteReadChannel.readUTF8Line`:\n\n```\nval greeting = receiveChannel.readUTF8Line()\n```\n\n### Send data\nTo send data to the server, call the `Socket.openWriteChannel` function, which returns [ByteWriteChannel](https://api.ktor.io/ktor-io/io.ktor.utils.io/-byte-write-channel/index.html):\n\n```\nval sendChannel = socket.openWriteChannel(autoFlush = true)\n```\n\n`ByteWriteChannel` provides API for asynchronous writing of sequences of bytes. For example, you can write a line of UTF-8 characters using `ByteWriteChannel.writeStringUtf8`:\n\n```\nval myMessage = readln()\nsendChannel.writeStringUtf8(\"$myMessage\\n\")\n```\n\n### Close connection\nTo release resources associated with the [connected socket](https://ktor.io/docs/server-sockets.html#client_create_socket), call `Socket.close` and `SelectorManager.close`:\n\n```\nsocket.close()\nselectorManager.close()\n```\n\n### Example\nA code sample below demonstrates how to use sockets on the client side:\n\n```\npackage com.example\n\nimport io.ktor.network.selector.*\nimport io.ktor.network.sockets.*\nimport io.ktor.utils.io.*\nimport kotlinx.coroutines.*\nimport kotlin.system.*\n\nfun main(args: Array<String>) {\n    runBlocking {\n        val selectorManager = SelectorManager(Dispatchers.IO)\n        val socket = aSocket(selectorManager).tcp().connect(\"127.0.0.1\", 9002)\n\n        val receiveChannel = socket.openReadChannel()\n        val sendChannel = socket.openWriteChannel(autoFlush = true)\n\n        launch(Dispatchers.IO) {\n            while (true) {\n                val greeting = receiveChannel.readUTF8Line()\n                if (greeting != null) {\n                    println(greeting)\n                } else {\n                    println(\"Server closed a connection\")\n                    socket.close()\n                    selectorManager.close()\n                    exitProcess(0)\n                }\n            }\n        }\n\n        while (true) {\n            val myMessage = readln()\n            sendChannel.writeStringUtf8(\"$myMessage\\n\")\n        }\n    }\n}\n```\n\nYou can find the full example here: [sockets-client](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/sockets-client).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-sockets.html", "title": "Server Plugin Sockets", "description": "Ktor supports TCP and UDP raw sockets, exposing a suspending API that uses java.nio under the hood.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:58", "type": "overview", "page_metadata": {"twitter:title": "Sockets | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Sockets | Ktor", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Sockets | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "title": "Sockets | Ktor Documentation", "og:description": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.402646989", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-sockets.html", "og:url": "https://ktor.io/docs/3.1.1/server-sockets.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "982ff7c7-2df1-41c7-a6fb-47d8e12d78de", "sourceURL": "https://ktor.io/docs/server-sockets.html", "url": "https://ktor.io/docs/server-sockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `Sockets`, you need to include the `ktor-network` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-network:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-network:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-network-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nTo use [secure sockets](https://ktor.io/docs/server-sockets.html#secure) in the client, you also need to add `io.ktor:ktor-network-tls`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sockets.html", "title": "Server Plugin Sockets", "description": "Ktor supports TCP and UDP raw sockets, exposing a suspending API that uses java.nio under the hood.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:58", "type": "section_detail", "page_metadata": {"twitter:title": "Sockets | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Sockets | Ktor", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Sockets | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "title": "Sockets | Ktor Documentation", "og:description": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.402646989", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-sockets.html", "og:url": "https://ktor.io/docs/3.1.1/server-sockets.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "982ff7c7-2df1-41c7-a6fb-47d8e12d78de", "sourceURL": "https://ktor.io/docs/server-sockets.html", "url": "https://ktor.io/docs/server-sockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I server in ktor?\n\nAssistant: To server in ktor, here's what you do:\n### Create a server socket\nTo build a server socket, create the `SelectorManager` instance, call the `SocketBuilder.tcp()` function on it, and then use `bind` to bind a server socket to specific port:\n\n```\nval selectorManager = SelectorManager(Dispatchers.IO)\nval serverSocket = aSocket(selectorManager).tcp().bind(\"127.0.0.1\", 9002)\n```\n\nThe snippet above creates a TCP socket, which is the [ServerSocket](https://api.ktor.io/ktor-network/io.ktor.network.sockets/-server-socket/index.html) instance. To create a UDP socket, use `SocketBuilder.udp()`.\n\n### Accept incoming connections\nAfter creating a server socket, you need to call the `ServerSocket.accept` function that accepts a socket connection and returns a connected socket (a [Socket](https://api.ktor.io/ktor-network/io.ktor.network.sockets/-socket/index.html) instance):\n\n```\nval socket = serverSocket.accept()\n```\n\nOnce you have a connected socket, you can receive/send data by reading from or writing to the socket.\n\n### Receive data\nTo receive data from the client, you need to call the `Socket.openReadChannel` function, which returns [ByteReadChannel](https://api.ktor.io/ktor-io/io.ktor.utils.io/-byte-read-channel/index.html):\n\n```\nval receiveChannel = socket.openReadChannel()\n```\n\n`ByteReadChannel` provides API for asynchronous reading of data. For example, you can read a line of UTF-8 characters using `ByteReadChannel.readUTF8Line`:\n\n```\nval name = receiveChannel.readUTF8Line()\n```\n\n### Send data\nTo send data to the client, call the `Socket.openWriteChannel` function, which returns [ByteWriteChannel](https://api.ktor.io/ktor-io/io.ktor.utils.io/-byte-write-channel/index.html):\n\n```\nval sendChannel = socket.openWriteChannel(autoFlush = true)\n```\n\n`ByteWriteChannel` provides API for asynchronous writing of sequences of bytes. For example, you can write a line of UTF-8 characters using `ByteWriteChannel.writeStringUtf8`:\n\n```\nval name = receiveChannel.readUTF8Line()\nsendChannel.writeStringUtf8(\"Hello, $name!\\n\")\n```\n\n### Close a socket\nTo release resources associated with the [connected socket](https://ktor.io/docs/server-sockets.html#accepts_connection), call `Socket.close`:\n\n```\nsocket.close()\n```\n\n### Example\nA code sample below demonstrates how to use sockets on the server side:\n\n```\npackage com.example\n\nimport io.ktor.network.selector.*\nimport io.ktor.network.sockets.*\nimport io.ktor.utils.io.*\nimport kotlinx.coroutines.*\n\nfun main(args: Array<String>) {\n    runBlocking {\n        val selectorManager = SelectorManager(Dispatchers.IO)\n        val serverSocket = aSocket(selectorManager).tcp().bind(\"127.0.0.1\", 9002)\n        println(\"Server is listening at ${serverSocket.localAddress}\")\n        while (true) {\n            val socket = serverSocket.accept()\n            println(\"Accepted $socket\")\n            launch {\n                val receiveChannel = socket.openReadChannel()\n                val sendChannel = socket.openWriteChannel(autoFlush = true)\n                sendChannel.writeStringUtf8(\"Please enter your name\\n\")\n                try {\n                    while (true) {\n                        val name = receiveChannel.readUTF8Line()\n                        sendChannel.writeStringUtf8(\"Hello, $name!\\n\")\n                    }\n                } catch (e: Throwable) {\n                    socket.close()\n                }\n            }\n        }\n    }\n}\n```\n\nYou can find the full example here: [sockets-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/sockets-server)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sockets.html", "title": "Server Plugin Sockets", "description": "Ktor supports TCP and UDP raw sockets, exposing a suspending API that uses java.nio under the hood.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:58", "type": "section_detail", "page_metadata": {"twitter:title": "Sockets | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Sockets | Ktor", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Sockets | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "title": "Sockets | Ktor Documentation", "og:description": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.402646989", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-sockets.html", "og:url": "https://ktor.io/docs/3.1.1/server-sockets.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "982ff7c7-2df1-41c7-a6fb-47d8e12d78de", "sourceURL": "https://ktor.io/docs/server-sockets.html", "url": "https://ktor.io/docs/server-sockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I client in ktor?\n\nAssistant: To client in ktor, here's what you do:\n### Create a socket\nTo build a client socket, create the `SelectorManager` instance, call the `SocketBuilder.tcp()` function on it, and then use `connect` to establish a connection and get a connected socket (a [Socket](https://api.ktor.io/ktor-network/io.ktor.network.sockets/-socket/index.html) instance):\n\n```\nval selectorManager = SelectorManager(Dispatchers.IO)\nval socket = aSocket(selectorManager).tcp().connect(\"127.0.0.1\", 9002)\n```\n\nOnce you have a connected socket, you can receive/send data by reading from or writing to the socket.\n\n### Create a secure socket (SSL/TLS)\nSecure sockets allow you to establish TLS connections. To use secure sockets, you need to add the [ktor-network-tls](https://ktor.io/docs/server-sockets.html#add_dependencies) dependency. Then, call the `Socket.tls` function on a connected socket:\n\n```\nval selectorManager = SelectorManager(Dispatchers.IO)\nval socket = aSocket(selectorManager).tcp().connect(\"127.0.0.1\", 8443).tls()\n```\n\nThe `tls` function allows you to adjust TLS parameters provided by [TLSConfigBuilder](https://api.ktor.io/ktor-network/ktor-network-tls/io.ktor.network.tls/-t-l-s-config-builder/index.html):\n\n```\nval selectorManager = SelectorManager(Dispatchers.IO)\nval socket = aSocket(selectorManager).tcp().connect(\"youtrack.jetbrains.com\", port = 443).tls(coroutineContext = coroutineContext) {\n    trustManager = object : X509TrustManager {\n        override fun getAcceptedIssuers(): Array<X509Certificate?> = arrayOf()\n        override fun checkClientTrusted(certs: Array<X509Certificate?>?, authType: String?) {}\n        override fun checkServerTrusted(certs: Array<X509Certificate?>?, authType: String?) {}\n    }\n}\n```\n\nYou can find the full example here: [sockets-client-tls](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/sockets-client-tls)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sockets.html", "title": "Server Plugin Sockets", "description": "Ktor supports TCP and UDP raw sockets, exposing a suspending API that uses java.nio under the hood.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:58", "type": "section_detail", "page_metadata": {"twitter:title": "Sockets | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Sockets | Ktor", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Sockets | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "title": "Sockets | Ktor Documentation", "og:description": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.402646989", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-sockets.html", "og:url": "https://ktor.io/docs/3.1.1/server-sockets.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "982ff7c7-2df1-41c7-a6fb-47d8e12d78de", "sourceURL": "https://ktor.io/docs/server-sockets.html", "url": "https://ktor.io/docs/server-sockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I tips in ktor?\n\nAssistant: To tips in ktor, here's what you do:\n### Receive data\nTo receive data from the server, you need to call the `Socket.openReadChannel` function, which returns [ByteReadChannel](https://api.ktor.io/ktor-io/io.ktor.utils.io/-byte-read-channel/index.html):\n\n```\nval receiveChannel = socket.openReadChannel()\n```\n\n`ByteReadChannel` provides API for asynchronous reading of data. For example, you can read a line of UTF-8 characters using `ByteReadChannel.readUTF8Line`:\n\n```\nval greeting = receiveChannel.readUTF8Line()\n```\n\n### Send data\nTo send data to the server, call the `Socket.openWriteChannel` function, which returns [ByteWriteChannel](https://api.ktor.io/ktor-io/io.ktor.utils.io/-byte-write-channel/index.html):\n\n```\nval sendChannel = socket.openWriteChannel(autoFlush = true)\n```\n\n`ByteWriteChannel` provides API for asynchronous writing of sequences of bytes. For example, you can write a line of UTF-8 characters using `ByteWriteChannel.writeStringUtf8`:\n\n```\nval myMessage = readln()\nsendChannel.writeStringUtf8(\"$myMessage\\n\")\n```\n\n### Close connection\nTo release resources associated with the [connected socket](https://ktor.io/docs/server-sockets.html#client_create_socket), call `Socket.close` and `SelectorManager.close`:\n\n```\nsocket.close()\nselectorManager.close()\n```\n\n### Example\nA code sample below demonstrates how to use sockets on the client side:\n\n```\npackage com.example\n\nimport io.ktor.network.selector.*\nimport io.ktor.network.sockets.*\nimport io.ktor.utils.io.*\nimport kotlinx.coroutines.*\nimport kotlin.system.*\n\nfun main(args: Array<String>) {\n    runBlocking {\n        val selectorManager = SelectorManager(Dispatchers.IO)\n        val socket = aSocket(selectorManager).tcp().connect(\"127.0.0.1\", 9002)\n\n        val receiveChannel = socket.openReadChannel()\n        val sendChannel = socket.openWriteChannel(autoFlush = true)\n\n        launch(Dispatchers.IO) {\n            while (true) {\n                val greeting = receiveChannel.readUTF8Line()\n                if (greeting != null) {\n                    println(greeting)\n                } else {\n                    println(\"Server closed a connection\")\n                    socket.close()\n                    selectorManager.close()\n                    exitProcess(0)\n                }\n            }\n        }\n\n        while (true) {\n            val myMessage = readln()\n            sendChannel.writeStringUtf8(\"$myMessage\\n\")\n        }\n    }\n}\n```\n\nYou can find the full example here: [sockets-client](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/sockets-client)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sockets.html", "title": "Server Plugin Sockets", "description": "Ktor supports TCP and UDP raw sockets, exposing a suspending API that uses java.nio under the hood.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:58", "type": "section_detail", "page_metadata": {"twitter:title": "Sockets | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Sockets | Ktor", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Sockets | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "title": "Sockets | Ktor Documentation", "og:description": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.402646989", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-sockets.html", "og:url": "https://ktor.io/docs/3.1.1/server-sockets.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "982ff7c7-2df1-41c7-a6fb-47d8e12d78de", "sourceURL": "https://ktor.io/docs/server-sockets.html", "url": "https://ktor.io/docs/server-sockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Sockets in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a server socket**:\n\n```yaml\nval selectorManager = SelectorManager(Dispatchers.IO)\nval serverSocket = aSocket(selectorManager).tcp().bind(\"127.0.0.1\", 9002)\n```\n\nThis snippet shows you how to create a server socket, which is an important aspect of server plugin sockets.\n\n**Accept incoming connections**:\n\n```yaml\nval socket = serverSocket.accept()\n```\n\nThis snippet shows you how to accept incoming connections, which is an important aspect of server plugin sockets.\n\n**Receive data**:\n\n```yaml\nval receiveChannel = socket.openReadChannel()\n```\n\nThis snippet shows you how to receive data, which is an important aspect of server plugin sockets.\n\n**Send data**:\n\n```yaml\nval sendChannel = socket.openWriteChannel(autoFlush = true)\n\nval name = receiveChannel.readUTF8Line()\nsendChannel.writeStringUtf8(\"Hello, $name!\\n\")\n```\n\nThis snippet shows you how to send data, which is an important aspect of server plugin sockets.\n\n**Close a socket**:\n\n```yaml\nsocket.close()\n```\n\nThis snippet shows you how to close a socket, which is an important aspect of server plugin sockets.\n\n**Example server code**:\n\n```yaml\npackage com.example\n\nimport io.ktor.network.selector.*\nimport io.ktor.network.sockets.*\nimport io.ktor.utils.io.*\nimport kotlinx.coroutines.*\n\nfun main(args: Array<String>) {\n    runBlocking {\n        val selectorManager = SelectorManager(Dispatchers.IO)\n        val serverSocket = aSocket(selectorManager).tcp().bind(\"127.0.0.1\", 9002)\n        println(\"Server is listening at ${serverSocket.localAddress}\")\n        while (true) {\n            val socket = serverSocket.accept()\n            println(\"Accepted $socket\")\n            launch {\n                val receiveChannel = socket.openReadChannel()\n                val sendChannel = socket.openWriteChannel(autoFlush = true)\n                sendChannel.writeStringUtf8(\"Please enter your name\\n\")\n                try {\n                    while (true) {\n                        val name = receiveChannel.readUTF8Line()\n                        sendChannel.writeStringUtf8(\"Hello, $name!\\n\")\n                    }\n                } catch (e: Throwable) {\n                    socket.close()\n                }\n            }\n        }\n    }\n}\n```\n\nThis snippet shows you how to example server code, which is an important aspect of server plugin sockets.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-sockets.html", "title": "Server Plugin Sockets", "description": "Ktor supports TCP and UDP raw sockets, exposing a suspending API that uses java.nio under the hood.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:58", "type": "code_examples", "page_metadata": {"twitter:title": "Sockets | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Sockets | Ktor", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Sockets | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "title": "Sockets | Ktor Documentation", "og:description": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.402646989", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-sockets.html", "og:url": "https://ktor.io/docs/3.1.1/server-sockets.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "982ff7c7-2df1-41c7-a6fb-47d8e12d78de", "sourceURL": "https://ktor.io/docs/server-sockets.html", "url": "https://ktor.io/docs/server-sockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Sockets in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSockets use an experimental API that is expected to evolve in the upcoming updates with potentially breaking changes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-sockets.html", "title": "Server Plugin Sockets", "description": "Ktor supports TCP and UDP raw sockets, exposing a suspending API that uses java.nio under the hood.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:19:58", "type": "best_practices", "page_metadata": {"twitter:title": "Sockets | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Sockets | Ktor", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Sockets | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "title": "Sockets | Ktor Documentation", "og:description": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.402646989", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-sockets.html", "og:url": "https://ktor.io/docs/3.1.1/server-sockets.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "982ff7c7-2df1-41c7-a6fb-47d8e12d78de", "sourceURL": "https://ktor.io/docs/server-sockets.html", "url": "https://ktor.io/docs/server-sockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Timeout is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Timeout in ktor.\n\n# Client Plugin Timeout\n\nThe HttpTimeout plugin allows you to configure request, connection, and socket timeouts for HTTP calls in Ktor client.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nHttpTimeout only requires the ktor-client-core artifact and doesn't need any specific dependencies.\n\n## Install HttpTimeout\n\nTo install HttpTimeout, pass it to the install function inside a client configuration block.\n\n## Configure timeouts\n\nTo configure timeouts, you can use the corresponding properties: requestTimeoutMillis specifies a timeout for a whole HTTP call, connectTimeoutMillis specifies a timeout for establishing a connection with a server, and socketTimeoutMillis specifies a timeout for the maximum time in between two data packets when exchanging data with a server.\n\n## Limitations\n\nHttpTimeout has some limitations for specific engines. The table below shows which timeouts are supported by those engines: | Engine | Request Timeout | Connect Timeout | Socket Timeout | | --- | --- | --- | --- | | Darwin | ✅️ | ✖️ | ✅️ | | JavaScript | ✅ | ✖️ | ✖️ | | Curl | ✅ | ✅️ | ✖️ | | MockEngine | ✅ | ✖️ | ✅ |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-timeout.html", "title": "Client Plugin Timeout", "description": "The HttpTimeout plugin allows you to configure request, connection, and socket timeouts for HTTP calls in Ktor client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:15", "type": "overview", "page_metadata": {"og:type": "website", "twitter:title": "Timeout | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "build-number": "707", "og:title": "Timeout | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "Timeout | Ktor Documentation", "ogDescription": "", "og:locale": "en_US", "ogTitle": "Timeout | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.063056734", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-timeout.html", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-timeout.html", "og:site_name": "Ktor Help", "og:description": "", "scrapeId": "8e2d3144-4869-4a01-9f37-bf8973acc8af", "sourceURL": "https://ktor.io/docs/client-timeout.html", "url": "https://ktor.io/docs/client-timeout.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nHttpTimeout only requires the ktor-client-core artifact and doesn't need any specific dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-timeout.html", "title": "Client Plugin Timeout", "description": "The HttpTimeout plugin allows you to configure request, connection, and socket timeouts for HTTP calls in Ktor client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:15", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:title": "Timeout | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "build-number": "707", "og:title": "Timeout | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "Timeout | Ktor Documentation", "ogDescription": "", "og:locale": "en_US", "ogTitle": "Timeout | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.063056734", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-timeout.html", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-timeout.html", "og:site_name": "Ktor Help", "og:description": "", "scrapeId": "8e2d3144-4869-4a01-9f37-bf8973acc8af", "sourceURL": "https://ktor.io/docs/client-timeout.html", "url": "https://ktor.io/docs/client-timeout.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install httptimeout in ktor?\n\nAssistant: To install httptimeout in ktor, here's what you do:\nTo install HttpTimeout, pass it to the install function inside a client configuration block..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-timeout.html", "title": "Client Plugin Timeout", "description": "The HttpTimeout plugin allows you to configure request, connection, and socket timeouts for HTTP calls in Ktor client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:15", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:title": "Timeout | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "build-number": "707", "og:title": "Timeout | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "Timeout | Ktor Documentation", "ogDescription": "", "og:locale": "en_US", "ogTitle": "Timeout | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.063056734", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-timeout.html", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-timeout.html", "og:site_name": "Ktor Help", "og:description": "", "scrapeId": "8e2d3144-4869-4a01-9f37-bf8973acc8af", "sourceURL": "https://ktor.io/docs/client-timeout.html", "url": "https://ktor.io/docs/client-timeout.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure timeouts in ktor?\n\nAssistant: To configure timeouts in ktor, here's what you do:\nTo configure timeouts, you can use the corresponding properties: requestTimeoutMillis specifies a timeout for a whole HTTP call, connectTimeoutMillis specifies a timeout for establishing a connection with a server, and socketTimeoutMillis specifies a timeout for the maximum time in between two data packets when exchanging data with a server..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-timeout.html", "title": "Client Plugin Timeout", "description": "The HttpTimeout plugin allows you to configure request, connection, and socket timeouts for HTTP calls in Ktor client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:15", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:title": "Timeout | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "build-number": "707", "og:title": "Timeout | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "Timeout | Ktor Documentation", "ogDescription": "", "og:locale": "en_US", "ogTitle": "Timeout | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.063056734", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-timeout.html", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-timeout.html", "og:site_name": "Ktor Help", "og:description": "", "scrapeId": "8e2d3144-4869-4a01-9f37-bf8973acc8af", "sourceURL": "https://ktor.io/docs/client-timeout.html", "url": "https://ktor.io/docs/client-timeout.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I limitations in ktor?\n\nAssistant: To limitations in ktor, here's what you do:\nHttpTimeout has some limitations for specific engines. The table below shows which timeouts are supported by those engines: | Engine | Request Timeout | Connect Timeout | Socket Timeout | | --- | --- | --- | --- | | Darwin | ✅️ | ✖️ | ✅️ | | JavaScript | ✅ | ✖️ | ✖️ | | Curl | ✅ | ✅️ | ✖️ | | MockEngine | ✅ | ✖️ | ✅ |.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-timeout.html", "title": "Client Plugin Timeout", "description": "The HttpTimeout plugin allows you to configure request, connection, and socket timeouts for HTTP calls in Ktor client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:15", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:title": "Timeout | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "build-number": "707", "og:title": "Timeout | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "Timeout | Ktor Documentation", "ogDescription": "", "og:locale": "en_US", "ogTitle": "Timeout | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.063056734", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-timeout.html", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-timeout.html", "og:site_name": "Ktor Help", "og:description": "", "scrapeId": "8e2d3144-4869-4a01-9f37-bf8973acc8af", "sourceURL": "https://ktor.io/docs/client-timeout.html", "url": "https://ktor.io/docs/client-timeout.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Timeout in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install HttpTimeout Example**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.*\n//...\nval client = HttpClient(CIO) {\n    install(HttpTimeout)\n}\n```\n\nThis snippet shows you how to install httptimeout example, which is an important aspect of client plugin timeout.\n\n**Configure Request Timeout Example**:\n\n```yaml\nval client = HttpClient(CIO) {\n    install(HttpTimeout) {\n        requestTimeoutMillis = 1000\n    }\n}\n```\n\nThis snippet shows you how to configure request timeout example, which is an important aspect of client plugin timeout.\n\n**Specific Request Timeout Example**:\n\n```yaml\nval response: HttpResponse = client.get(\"http://0.0.0.0:8080/path1\") {\n    timeout {\n        requestTimeoutMillis = 3000\n    }\n}\n```\n\nThis snippet shows you how to specific request timeout example, which is an important aspect of client plugin timeout.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-timeout.html", "title": "Client Plugin Timeout", "description": "The HttpTimeout plugin allows you to configure request, connection, and socket timeouts for HTTP calls in Ktor client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:15", "type": "code_examples", "page_metadata": {"og:type": "website", "twitter:title": "Timeout | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "build-number": "707", "og:title": "Timeout | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "Timeout | Ktor Documentation", "ogDescription": "", "og:locale": "en_US", "ogTitle": "Timeout | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.063056734", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-timeout.html", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-timeout.html", "og:site_name": "Ktor Help", "og:description": "", "scrapeId": "8e2d3144-4869-4a01-9f37-bf8973acc8af", "sourceURL": "https://ktor.io/docs/client-timeout.html", "url": "https://ktor.io/docs/client-timeout.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Timeout in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTimeouts specified for a specific request override global timeouts from the install block.\n\nIn a case of a timeout, Ktor throws HttpRequestTimeoutException, ConnectTimeoutException, or SocketTimeoutException.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-timeout.html", "title": "Client Plugin Timeout", "description": "The HttpTimeout plugin allows you to configure request, connection, and socket timeouts for HTTP calls in Ktor client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:20:15", "type": "best_practices", "page_metadata": {"og:type": "website", "twitter:title": "Timeout | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "build-number": "707", "og:title": "Timeout | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "Timeout | Ktor Documentation", "ogDescription": "", "og:locale": "en_US", "ogTitle": "Timeout | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.063056734", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-timeout.html", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-timeout.html", "og:site_name": "Ktor Help", "og:description": "", "scrapeId": "8e2d3144-4869-4a01-9f37-bf8973acc8af", "sourceURL": "https://ktor.io/docs/client-timeout.html", "url": "https://ktor.io/docs/client-timeout.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Creating the application distribution is in ktor?\n\nAssistant: Sure, I'd be happy to explain Creating the application distribution in ktor.\n\n# Creating the application distribution\n\nThis page covers how to package and run a Ktor application using the Ktor Gradle plugin.Here's a quick rundown of what this is about:\n\n## Configure the Ktor plugin\n\nTo create the application distribution, you need to apply the Ktor plugin first:\n\n1. Open the `build.gradle.kts` file and add the plugin to the `plugins` block:\n\n```\nplugins {\n       id(\"io.ktor.plugin\") version \"3.1.1\"\n}\n```\n\n2. Make sure the [main application class](https://ktor.io/docs/server-dependencies.html#create-entry-point) is configured:\n\n```\napplication {\n       mainClass.set(\"com.example.ApplicationKt\")\n}\n```\n\n## Package the application\n\nThe Application plugin provides various ways for packaging the application, for example, the `installDist` task installs the application with all runtime dependencies and start scripts. To create full distribution archives, you can use the `distZip` and `distTar` tasks.\n\nIn this topic, we'll use `installDist`:\n\n1. Open the terminal.\n\n2. Run the `installDist` task in one of the following ways depending on your operating system:\n\nLinux/macOS\n\n```\n./gradlew installDist\n```\n\nWindows\n\n```\ngradlew.bat installDist\n```\n\nThe Application plugin will create an image of the application in the `build/install/<project_name>` folder.\n\n## Run the application\n\nTo run the [packaged application](https://ktor.io/docs/server-packaging.html#package):\n\n1. Go to the `build/install/<project_name>/bin` folder in the terminal.\n\n2. Depending on your operating system, run the `<project_name>` or `<project_name>.bat` executable, for example:\n\nLinux/macOS\n\n```\n./ktor-sample\n```\n\nWindows\n\n```\nktor-sample.bat\n```\n\n3. Wait until the following message is shown:\n\n```\n[main] INFO  Application - Responding at http://0.0.0.0:8080\n```\n\nOpen the link in a browser to see a running application:\n![Ktor app in a browser](https://ktor.io/docs/images/ktor_idea_new_project_browser.png)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-packaging.html", "title": "Creating the application distribution", "description": "This page covers how to package and run a Ktor application using the Ktor Gradle plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:40", "type": "overview", "page_metadata": {"og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Creating the application distribution | Ktor", "title": "Creating the application distribution | Ktor Documentation", "ogTitle": "Creating the application distribution | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-packaging.html", "twitter:card": "summary_large_image", "twitter:description": "", "ogLocale": "en_US", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.096778305", "build-number": "707", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-packaging.html", "og:title": "Creating the application distribution | Ktor", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "scrapeId": "70805f38-0c52-4542-8b3a-60dce6032102", "sourceURL": "https://ktor.io/docs/server-packaging.html", "url": "https://ktor.io/docs/server-packaging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure the ktor plugin in ktor?\n\nAssistant: To configure the ktor plugin in ktor, here's what you do:\nTo create the application distribution, you need to apply the Ktor plugin first:\n\n1. Open the `build.gradle.kts` file and add the plugin to the `plugins` block:\n\n```\nplugins {\n       id(\"io.ktor.plugin\") version \"3.1.1\"\n}\n```\n\n2. Make sure the [main application class](https://ktor.io/docs/server-dependencies.html#create-entry-point) is configured:\n\n```\napplication {\n       mainClass.set(\"com.example.ApplicationKt\")\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-packaging.html", "title": "Creating the application distribution", "description": "This page covers how to package and run a Ktor application using the Ktor Gradle plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:40", "type": "section_detail", "page_metadata": {"og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Creating the application distribution | Ktor", "title": "Creating the application distribution | Ktor Documentation", "ogTitle": "Creating the application distribution | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-packaging.html", "twitter:card": "summary_large_image", "twitter:description": "", "ogLocale": "en_US", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.096778305", "build-number": "707", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-packaging.html", "og:title": "Creating the application distribution | Ktor", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "scrapeId": "70805f38-0c52-4542-8b3a-60dce6032102", "sourceURL": "https://ktor.io/docs/server-packaging.html", "url": "https://ktor.io/docs/server-packaging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I package the application in ktor?\n\nAssistant: To package the application in ktor, here's what you do:\nThe Application plugin provides various ways for packaging the application, for example, the `installDist` task installs the application with all runtime dependencies and start scripts. To create full distribution archives, you can use the `distZip` and `distTar` tasks.\n\nIn this topic, we'll use `installDist`:\n\n1. Open the terminal.\n\n2. Run the `installDist` task in one of the following ways depending on your operating system:\n\nLinux/macOS\n\n```\n./gradlew installDist\n```\n\nWindows\n\n```\ngradlew.bat installDist\n```\n\nThe Application plugin will create an image of the application in the `build/install/<project_name>` folder..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-packaging.html", "title": "Creating the application distribution", "description": "This page covers how to package and run a Ktor application using the Ktor Gradle plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:40", "type": "section_detail", "page_metadata": {"og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Creating the application distribution | Ktor", "title": "Creating the application distribution | Ktor Documentation", "ogTitle": "Creating the application distribution | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-packaging.html", "twitter:card": "summary_large_image", "twitter:description": "", "ogLocale": "en_US", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.096778305", "build-number": "707", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-packaging.html", "og:title": "Creating the application distribution | Ktor", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "scrapeId": "70805f38-0c52-4542-8b3a-60dce6032102", "sourceURL": "https://ktor.io/docs/server-packaging.html", "url": "https://ktor.io/docs/server-packaging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run the application in ktor?\n\nAssistant: To run the application in ktor, here's what you do:\nTo run the [packaged application](https://ktor.io/docs/server-packaging.html#package):\n\n1. Go to the `build/install/<project_name>/bin` folder in the terminal.\n\n2. Depending on your operating system, run the `<project_name>` or `<project_name>.bat` executable, for example:\n\nLinux/macOS\n\n```\n./ktor-sample\n```\n\nWindows\n\n```\nktor-sample.bat\n```\n\n3. Wait until the following message is shown:\n\n```\n[main] INFO  Application - Responding at http://0.0.0.0:8080\n```\n\nOpen the link in a browser to see a running application:\n![Ktor app in a browser](https://ktor.io/docs/images/ktor_idea_new_project_browser.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-packaging.html", "title": "Creating the application distribution", "description": "This page covers how to package and run a Ktor application using the Ktor Gradle plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:40", "type": "section_detail", "page_metadata": {"og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Creating the application distribution | Ktor", "title": "Creating the application distribution | Ktor Documentation", "ogTitle": "Creating the application distribution | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-packaging.html", "twitter:card": "summary_large_image", "twitter:description": "", "ogLocale": "en_US", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.096778305", "build-number": "707", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-packaging.html", "og:title": "Creating the application distribution | Ktor", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "scrapeId": "70805f38-0c52-4542-8b3a-60dce6032102", "sourceURL": "https://ktor.io/docs/server-packaging.html", "url": "https://ktor.io/docs/server-packaging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Creating the application distribution in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Ktor Plugin Configuration**:\n\n```yaml\nplugins {\n       id(\"io.ktor.plugin\") version \"3.1.1\"\n}\n```\n\nThis snippet shows you how to ktor plugin configuration, which is an important aspect of creating the application distribution.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-packaging.html", "title": "Creating the application distribution", "description": "This page covers how to package and run a Ktor application using the Ktor Gradle plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:40", "type": "code_examples", "page_metadata": {"og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Creating the application distribution | Ktor", "title": "Creating the application distribution | Ktor Documentation", "ogTitle": "Creating the application distribution | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-packaging.html", "twitter:card": "summary_large_image", "twitter:description": "", "ogLocale": "en_US", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.096778305", "build-number": "707", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-packaging.html", "og:title": "Creating the application distribution | Ktor", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "scrapeId": "70805f38-0c52-4542-8b3a-60dce6032102", "sourceURL": "https://ktor.io/docs/server-packaging.html", "url": "https://ktor.io/docs/server-packaging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Creating the application distribution in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure the main application class is correctly configured in the build.gradle.kts file.\n\nUse the installDist task for packaging the application with all runtime dependencies.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-packaging.html", "title": "Creating the application distribution", "description": "This page covers how to package and run a Ktor application using the Ktor Gradle plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:21:40", "type": "best_practices", "page_metadata": {"og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Creating the application distribution | Ktor", "title": "Creating the application distribution | Ktor Documentation", "ogTitle": "Creating the application distribution | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-packaging.html", "twitter:card": "summary_large_image", "twitter:description": "", "ogLocale": "en_US", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:04.096778305", "build-number": "707", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-packaging.html", "og:title": "Creating the application distribution | Ktor", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "scrapeId": "70805f38-0c52-4542-8b3a-60dce6032102", "sourceURL": "https://ktor.io/docs/server-packaging.html", "url": "https://ktor.io/docs/server-packaging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin AutoHeadResponse is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin AutoHeadResponse in ktor.\n\n# Server Plugin AutoHeadResponse\n\nThe AutoHeadResponse plugin provides the ability to automatically respond to a HEAD request for every route that has a GET defined.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\n`io.ktor:ktor-server-auto-head-response`\n\n## Code example\n\n[autohead](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/autohead)\n\n## Native server support\n\n✅\n\n## Add dependencies\n\nTo use `AutoHeadResponse`, you need to include the `ktor-server-auto-head-response` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-auto-head-response:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-auto-head-response:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auto-head-response-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Usage\n\nIn order to take advantage of this functionality, we need to install the `AutoHeadResponse` plugin in our application.\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.autohead.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.main() {\n    install(AutoHeadResponse)\n    routing {\n        get(\"/home\") {\n            call.respondText(\"This is a response to a GET, but HEAD also works\")\n        }\n    }\n}\n```\n\nIn our case the `/home` route will now respond to `HEAD` request even though there is no explicit definition for this verb.\n\nIt's important to note that if we're using this plugin, custom `HEAD` definitions for the same `GET` route will be ignored.\n\n## Options\n\n`AutoHeadResponse` does not provide any additional configuration options.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-autoheadresponse.html", "title": "Server Plugin AutoHeadResponse", "description": "The AutoHeadResponse plugin provides the ability to automatically respond to a HEAD request for every route that has a GET defined.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:15", "type": "overview", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "built-on": "2025-02-26T14:01:06.519243867", "build-number": "707", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:title": "AutoHeadResponse | Ktor", "ogTitle": "AutoHeadResponse | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "og:type": "website", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "title": "AutoHeadResponse | Ktor Documentation", "twitter:title": "AutoHeadResponse | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2a7e6a3d-65fe-41df-ab90-709093fc1fcb", "sourceURL": "https://ktor.io/docs/server-autoheadresponse.html", "url": "https://ktor.io/docs/server-autoheadresponse.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\n`io.ktor:ktor-server-auto-head-response`.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-autoheadresponse.html", "title": "Server Plugin AutoHeadResponse", "description": "The AutoHeadResponse plugin provides the ability to automatically respond to a HEAD request for every route that has a GET defined.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:15", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "built-on": "2025-02-26T14:01:06.519243867", "build-number": "707", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:title": "AutoHeadResponse | Ktor", "ogTitle": "AutoHeadResponse | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "og:type": "website", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "title": "AutoHeadResponse | Ktor Documentation", "twitter:title": "AutoHeadResponse | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2a7e6a3d-65fe-41df-ab90-709093fc1fcb", "sourceURL": "https://ktor.io/docs/server-autoheadresponse.html", "url": "https://ktor.io/docs/server-autoheadresponse.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I code example in ktor?\n\nAssistant: To code example in ktor, here's what you do:\n[autohead](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/autohead).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-autoheadresponse.html", "title": "Server Plugin AutoHeadResponse", "description": "The AutoHeadResponse plugin provides the ability to automatically respond to a HEAD request for every route that has a GET defined.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:15", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "built-on": "2025-02-26T14:01:06.519243867", "build-number": "707", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:title": "AutoHeadResponse | Ktor", "ogTitle": "AutoHeadResponse | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "og:type": "website", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "title": "AutoHeadResponse | Ktor Documentation", "twitter:title": "AutoHeadResponse | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2a7e6a3d-65fe-41df-ab90-709093fc1fcb", "sourceURL": "https://ktor.io/docs/server-autoheadresponse.html", "url": "https://ktor.io/docs/server-autoheadresponse.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I native server support in ktor?\n\nAssistant: To native server support in ktor, here's what you do:\n✅.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-autoheadresponse.html", "title": "Server Plugin AutoHeadResponse", "description": "The AutoHeadResponse plugin provides the ability to automatically respond to a HEAD request for every route that has a GET defined.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:15", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "built-on": "2025-02-26T14:01:06.519243867", "build-number": "707", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:title": "AutoHeadResponse | Ktor", "ogTitle": "AutoHeadResponse | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "og:type": "website", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "title": "AutoHeadResponse | Ktor Documentation", "twitter:title": "AutoHeadResponse | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2a7e6a3d-65fe-41df-ab90-709093fc1fcb", "sourceURL": "https://ktor.io/docs/server-autoheadresponse.html", "url": "https://ktor.io/docs/server-autoheadresponse.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `AutoHeadResponse`, you need to include the `ktor-server-auto-head-response` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-auto-head-response:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-auto-head-response:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auto-head-response-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-autoheadresponse.html", "title": "Server Plugin AutoHeadResponse", "description": "The AutoHeadResponse plugin provides the ability to automatically respond to a HEAD request for every route that has a GET defined.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:15", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "built-on": "2025-02-26T14:01:06.519243867", "build-number": "707", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:title": "AutoHeadResponse | Ktor", "ogTitle": "AutoHeadResponse | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "og:type": "website", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "title": "AutoHeadResponse | Ktor Documentation", "twitter:title": "AutoHeadResponse | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2a7e6a3d-65fe-41df-ab90-709093fc1fcb", "sourceURL": "https://ktor.io/docs/server-autoheadresponse.html", "url": "https://ktor.io/docs/server-autoheadresponse.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I usage in ktor?\n\nAssistant: To usage in ktor, here's what you do:\nIn order to take advantage of this functionality, we need to install the `AutoHeadResponse` plugin in our application.\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.autohead.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.main() {\n    install(AutoHeadResponse)\n    routing {\n        get(\"/home\") {\n            call.respondText(\"This is a response to a GET, but HEAD also works\")\n        }\n    }\n}\n```\n\nIn our case the `/home` route will now respond to `HEAD` request even though there is no explicit definition for this verb.\n\nIt's important to note that if we're using this plugin, custom `HEAD` definitions for the same `GET` route will be ignored..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-autoheadresponse.html", "title": "Server Plugin AutoHeadResponse", "description": "The AutoHeadResponse plugin provides the ability to automatically respond to a HEAD request for every route that has a GET defined.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:15", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "built-on": "2025-02-26T14:01:06.519243867", "build-number": "707", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:title": "AutoHeadResponse | Ktor", "ogTitle": "AutoHeadResponse | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "og:type": "website", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "title": "AutoHeadResponse | Ktor Documentation", "twitter:title": "AutoHeadResponse | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2a7e6a3d-65fe-41df-ab90-709093fc1fcb", "sourceURL": "https://ktor.io/docs/server-autoheadresponse.html", "url": "https://ktor.io/docs/server-autoheadresponse.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I options in ktor?\n\nAssistant: To options in ktor, here's what you do:\n`AutoHeadResponse` does not provide any additional configuration options..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-autoheadresponse.html", "title": "Server Plugin AutoHeadResponse", "description": "The AutoHeadResponse plugin provides the ability to automatically respond to a HEAD request for every route that has a GET defined.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:15", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "built-on": "2025-02-26T14:01:06.519243867", "build-number": "707", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:title": "AutoHeadResponse | Ktor", "ogTitle": "AutoHeadResponse | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "og:type": "website", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "title": "AutoHeadResponse | Ktor Documentation", "twitter:title": "AutoHeadResponse | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2a7e6a3d-65fe-41df-ab90-709093fc1fcb", "sourceURL": "https://ktor.io/docs/server-autoheadresponse.html", "url": "https://ktor.io/docs/server-autoheadresponse.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin AutoHeadResponse in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**AutoHeadResponse Plugin Usage**:\n\n```yaml\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.autohead.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.main() {\n    install(AutoHeadResponse)\n    routing {\n        get(\"/home\") {\n            call.respondText(\"This is a response to a GET, but HEAD also works\")\n        }\n    }\n}\n```\n\nThis snippet shows you how to autoheadresponse plugin usage, which is an important aspect of server plugin autoheadresponse.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-autoheadresponse.html", "title": "Server Plugin AutoHeadResponse", "description": "The AutoHeadResponse plugin provides the ability to automatically respond to a HEAD request for every route that has a GET defined.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:15", "type": "code_examples", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "built-on": "2025-02-26T14:01:06.519243867", "build-number": "707", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:title": "AutoHeadResponse | Ktor", "ogTitle": "AutoHeadResponse | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "og:type": "website", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "title": "AutoHeadResponse | Ktor Documentation", "twitter:title": "AutoHeadResponse | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2a7e6a3d-65fe-41df-ab90-709093fc1fcb", "sourceURL": "https://ktor.io/docs/server-autoheadresponse.html", "url": "https://ktor.io/docs/server-autoheadresponse.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin AutoHeadResponse in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf using the AutoHeadResponse plugin, custom HEAD definitions for the same GET route will be ignored.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-autoheadresponse.html", "title": "Server Plugin AutoHeadResponse", "description": "The AutoHeadResponse plugin provides the ability to automatically respond to a HEAD request for every route that has a GET defined.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:22:15", "type": "best_practices", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "built-on": "2025-02-26T14:01:06.519243867", "build-number": "707", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:title": "AutoHeadResponse | Ktor", "ogTitle": "AutoHeadResponse | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-autoheadresponse.html", "og:type": "website", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "title": "AutoHeadResponse | Ktor Documentation", "twitter:title": "AutoHeadResponse | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2a7e6a3d-65fe-41df-ab90-709093fc1fcb", "sourceURL": "https://ktor.io/docs/server-autoheadresponse.html", "url": "https://ktor.io/docs/server-autoheadresponse.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Logging in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Logging in Ktor Server in ktor.\n\n# Logging in Ktor Server\n\nThis page covers how to implement logging in Ktor applications, including configuration for different platforms and logging frameworks.Here's a quick rundown of what this is about:\n\n## Introduction\n\nKtor provides different means of logging your application depending on the used platform:\n\n- On JVM, Ktor uses SLF4J API as a facade for various logging frameworks (for example, Logback or Log4j) and allows you to log application events. To enable logging, you need to add dependencies for the desired framework and provide configuration specific for this framework.\n\n> ### tip\n>\n> You can also install and configure the CallLogging plugin to log client requests.\n\n- For the Native server, Ktor provides a logger that prints everything to the standard output.\n\n## JVM\n\n### Add logger dependencies\n\nTo enable logging, you need to include artifacts for the desired logging framework. For example, Logback requires the following dependency:\n\nGradle (Kotlin)\n\n```\nimplementation(\"ch.qos.logback:logback-classic:$logback_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"ch.qos.logback:logback-classic:$logback_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>${logback_version}</version>\n</dependency>\n```\n\nTo use Log4j, you need to add the `org.apache.logging.log4j:log4j-core` and `org.apache.logging.log4j:log4j-slf4j-impl` artifacts.\n\n### Configure logger\n\nTo learn how to configure the selected logging framework, see its documentation, for example:\n\n- Logback configuration\n- Log4j configuration\n\nFor instance, to configure Logback, you need to put a logback.xml file in the root of the classpath (for example, in src/main/resources). The example below shows a sample Logback configuration with the STDOUT appender, which outputs logs to the console.\n\n```\n<configuration>\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <root level=\"trace\">\n        <appender-ref ref=\"STDOUT\"/>\n    </root>\n    <logger name=\"io.netty\" level=\"INFO\"/>\n</configuration>\n```\n\nIf you want to output logs to a file, you can use the FILE appender.\n\n```\n<configuration>\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n        <file>testFile.log</file>\n        <append>true</append>\n        <encoder>\n            <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <root level=\"trace\">\n        <appender-ref ref=\"FILE\"/>\n    </root>\n    <logger name=\"io.netty\" level=\"INFO\"/>\n</configuration>\n```\n\nYou can find the full example here: logging.\n\n## Native\n\nTo configure the logging level for the Native server, assign one of the following values to the KTOR_LOG_LEVEL environment variable when running the application:\n\n- TRACE\n- DEBUG\n- INFO\n- WARN\n- ERROR\n\nFor example, the TRACE level enables route tracing that helps you determine why some routes are not being executed.\n\n## Access logger in code\n\nThe Logger instance is represented by a class that implements the Logger interface. You can access the Logger instance inside the Application using the Application.log property. For example, the code snippet below shows how to add a message to a log inside the module.\n\n```\nimport io.ktor.server.application.*\n\nfun Application.module() {\n    log.info(\"Hello from module!\")\n}\n```\n\nYou can also access the Logger from ApplicationCall using the call.application.environment.log property.\n\n```\nrouting {\n    get(\"/api/v1\") {\n        call.application.environment.log.info(\"Hello from /api/v1!\")\n    }\n}\n```\n\n## Logging in Plugins and Files\n\nUsing application log inside plugins and files is not recommended. It is better to use a separate logger for each plugin or file. To do this, you can use any logging library.\n\nFor multiplatform projects, you can use the KtorSimpleLogger class:\n\n```\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.request.*\nimport io.ktor.util.logging.*\n\ninternal val LOGGER = KtorSimpleLogger(\"com.example.RequestTracePlugin\")\n\nval RequestTracePlugin = createRouteScopedPlugin(\"RequestTracePlugin\", { }) {\n    onCall { call ->\n        LOGGER.trace(\"Processing call: ${call.request.uri}\")\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-logging.html", "title": "Logging in Ktor Server", "description": "This page covers how to implement logging in Ktor applications, including configuration for different platforms and logging frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:38", "type": "overview", "page_metadata": {"og:type": "website", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "language": "en-US", "ogTitle": "Logging in Ktor Server | Ktor", "ogLocale": "en_US", "title": "Logging in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "Logging in Ktor Server | Ktor", "twitter:title": "Logging in Ktor Server | Ktor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-logging.html", "built-on": "2025-02-26T14:01:06.151571285", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "a9934c59-a957-4cab-9f6e-3a4fed54b391", "sourceURL": "https://ktor.io/docs/server-logging.html", "url": "https://ktor.io/docs/server-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I introduction in ktor?\n\nAssistant: To introduction in ktor, here's what you do:\nKtor provides different means of logging your application depending on the used platform:\n\n- On JVM, Ktor uses SLF4J API as a facade for various logging frameworks (for example, Logback or Log4j) and allows you to log application events. To enable logging, you need to add dependencies for the desired framework and provide configuration specific for this framework.\n\n> ### tip\n>\n> You can also install and configure the CallLogging plugin to log client requests.\n\n- For the Native server, Ktor provides a logger that prints everything to the standard output..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-logging.html", "title": "Logging in Ktor Server", "description": "This page covers how to implement logging in Ktor applications, including configuration for different platforms and logging frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:38", "type": "section_detail", "page_metadata": {"og:type": "website", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "language": "en-US", "ogTitle": "Logging in Ktor Server | Ktor", "ogLocale": "en_US", "title": "Logging in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "Logging in Ktor Server | Ktor", "twitter:title": "Logging in Ktor Server | Ktor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-logging.html", "built-on": "2025-02-26T14:01:06.151571285", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "a9934c59-a957-4cab-9f6e-3a4fed54b391", "sourceURL": "https://ktor.io/docs/server-logging.html", "url": "https://ktor.io/docs/server-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I jvm in ktor?\n\nAssistant: To jvm in ktor, here's what you do:\n### Add logger dependencies\n\nTo enable logging, you need to include artifacts for the desired logging framework. For example, Logback requires the following dependency:\n\nGradle (Kotlin)\n\n```\nimplementation(\"ch.qos.logback:logback-classic:$logback_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"ch.qos.logback:logback-classic:$logback_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>${logback_version}</version>\n</dependency>\n```\n\nTo use Log4j, you need to add the `org.apache.logging.log4j:log4j-core` and `org.apache.logging.log4j:log4j-slf4j-impl` artifacts.\n\n### Configure logger\n\nTo learn how to configure the selected logging framework, see its documentation, for example:\n\n- Logback configuration\n- Log4j configuration\n\nFor instance, to configure Logback, you need to put a logback.xml file in the root of the classpath (for example, in src/main/resources). The example below shows a sample Logback configuration with the STDOUT appender, which outputs logs to the console.\n\n```\n<configuration>\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <root level=\"trace\">\n        <appender-ref ref=\"STDOUT\"/>\n    </root>\n    <logger name=\"io.netty\" level=\"INFO\"/>\n</configuration>\n```\n\nIf you want to output logs to a file, you can use the FILE appender.\n\n```\n<configuration>\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n        <file>testFile.log</file>\n        <append>true</append>\n        <encoder>\n            <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <root level=\"trace\">\n        <appender-ref ref=\"FILE\"/>\n    </root>\n    <logger name=\"io.netty\" level=\"INFO\"/>\n</configuration>\n```\n\nYou can find the full example here: logging..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-logging.html", "title": "Logging in Ktor Server", "description": "This page covers how to implement logging in Ktor applications, including configuration for different platforms and logging frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:38", "type": "section_detail", "page_metadata": {"og:type": "website", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "language": "en-US", "ogTitle": "Logging in Ktor Server | Ktor", "ogLocale": "en_US", "title": "Logging in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "Logging in Ktor Server | Ktor", "twitter:title": "Logging in Ktor Server | Ktor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-logging.html", "built-on": "2025-02-26T14:01:06.151571285", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "a9934c59-a957-4cab-9f6e-3a4fed54b391", "sourceURL": "https://ktor.io/docs/server-logging.html", "url": "https://ktor.io/docs/server-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I native in ktor?\n\nAssistant: To native in ktor, here's what you do:\nTo configure the logging level for the Native server, assign one of the following values to the KTOR_LOG_LEVEL environment variable when running the application:\n\n- TRACE\n- DEBUG\n- INFO\n- WARN\n- ERROR\n\nFor example, the TRACE level enables route tracing that helps you determine why some routes are not being executed..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-logging.html", "title": "Logging in Ktor Server", "description": "This page covers how to implement logging in Ktor applications, including configuration for different platforms and logging frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:38", "type": "section_detail", "page_metadata": {"og:type": "website", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "language": "en-US", "ogTitle": "Logging in Ktor Server | Ktor", "ogLocale": "en_US", "title": "Logging in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "Logging in Ktor Server | Ktor", "twitter:title": "Logging in Ktor Server | Ktor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-logging.html", "built-on": "2025-02-26T14:01:06.151571285", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "a9934c59-a957-4cab-9f6e-3a4fed54b391", "sourceURL": "https://ktor.io/docs/server-logging.html", "url": "https://ktor.io/docs/server-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I access logger in code in ktor?\n\nAssistant: To access logger in code in ktor, here's what you do:\nThe Logger instance is represented by a class that implements the Logger interface. You can access the Logger instance inside the Application using the Application.log property. For example, the code snippet below shows how to add a message to a log inside the module.\n\n```\nimport io.ktor.server.application.*\n\nfun Application.module() {\n    log.info(\"Hello from module!\")\n}\n```\n\nYou can also access the Logger from ApplicationCall using the call.application.environment.log property.\n\n```\nrouting {\n    get(\"/api/v1\") {\n        call.application.environment.log.info(\"Hello from /api/v1!\")\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-logging.html", "title": "Logging in Ktor Server", "description": "This page covers how to implement logging in Ktor applications, including configuration for different platforms and logging frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:38", "type": "section_detail", "page_metadata": {"og:type": "website", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "language": "en-US", "ogTitle": "Logging in Ktor Server | Ktor", "ogLocale": "en_US", "title": "Logging in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "Logging in Ktor Server | Ktor", "twitter:title": "Logging in Ktor Server | Ktor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-logging.html", "built-on": "2025-02-26T14:01:06.151571285", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "a9934c59-a957-4cab-9f6e-3a4fed54b391", "sourceURL": "https://ktor.io/docs/server-logging.html", "url": "https://ktor.io/docs/server-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I logging in plugins and files in ktor?\n\nAssistant: To logging in plugins and files in ktor, here's what you do:\nUsing application log inside plugins and files is not recommended. It is better to use a separate logger for each plugin or file. To do this, you can use any logging library.\n\nFor multiplatform projects, you can use the KtorSimpleLogger class:\n\n```\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.request.*\nimport io.ktor.util.logging.*\n\ninternal val LOGGER = KtorSimpleLogger(\"com.example.RequestTracePlugin\")\n\nval RequestTracePlugin = createRouteScopedPlugin(\"RequestTracePlugin\", { }) {\n    onCall { call ->\n        LOGGER.trace(\"Processing call: ${call.request.uri}\")\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-logging.html", "title": "Logging in Ktor Server", "description": "This page covers how to implement logging in Ktor applications, including configuration for different platforms and logging frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:38", "type": "section_detail", "page_metadata": {"og:type": "website", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "language": "en-US", "ogTitle": "Logging in Ktor Server | Ktor", "ogLocale": "en_US", "title": "Logging in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "Logging in Ktor Server | Ktor", "twitter:title": "Logging in Ktor Server | Ktor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-logging.html", "built-on": "2025-02-26T14:01:06.151571285", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "a9934c59-a957-4cab-9f6e-3a4fed54b391", "sourceURL": "https://ktor.io/docs/server-logging.html", "url": "https://ktor.io/docs/server-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Logging in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Logback Dependency (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"ch.qos.logback:logback-classic:$logback_version\")\n```\n\nThis snippet shows you how to logback dependency (gradle kotlin), which is an important aspect of logging in ktor server.\n\n**Logback Dependency (Gradle Groovy)**:\n\n```yaml\nimplementation \"ch.qos.logback:logback-classic:$logback_version\"\n```\n\nThis snippet shows you how to logback dependency (gradle groovy), which is an important aspect of logging in ktor server.\n\n**Logback Dependency (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>${logback_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to logback dependency (maven), which is an important aspect of logging in ktor server.\n\n**Logback Configuration (STDOUT)**:\n\n```yaml\n<configuration>\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <root level=\"trace\">\n        <appender-ref ref=\"STDOUT\"/>\n    </root>\n    <logger name=\"io.netty\" level=\"INFO\"/>\n</configuration>\n```\n\nThis snippet shows you how to logback configuration (stdout), which is an important aspect of logging in ktor server.\n\n**Logback Configuration (FILE)**:\n\n```yaml\n<configuration>\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n        <file>testFile.log</file>\n        <append>true</append>\n        <encoder>\n            <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <root level=\"trace\">\n        <appender-ref ref=\"FILE\"/>\n    </root>\n    <logger name=\"io.netty\" level=\"INFO\"/>\n</configuration>\n```\n\nThis snippet shows you how to logback configuration (file), which is an important aspect of logging in ktor server.\n\n**Access Logger in Application Module**:\n\n```yaml\nimport io.ktor.server.application.*\n\nfun Application.module() {\n    log.info(\"Hello from module!\")\n}\n```\n\nThis snippet shows you how to access logger in application module, which is an important aspect of logging in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-logging.html", "title": "Logging in Ktor Server", "description": "This page covers how to implement logging in Ktor applications, including configuration for different platforms and logging frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:38", "type": "code_examples", "page_metadata": {"og:type": "website", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "language": "en-US", "ogTitle": "Logging in Ktor Server | Ktor", "ogLocale": "en_US", "title": "Logging in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "Logging in Ktor Server | Ktor", "twitter:title": "Logging in Ktor Server | Ktor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-logging.html", "built-on": "2025-02-26T14:01:06.151571285", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "a9934c59-a957-4cab-9f6e-3a4fed54b391", "sourceURL": "https://ktor.io/docs/server-logging.html", "url": "https://ktor.io/docs/server-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Logging in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can also install and configure the CallLogging plugin to log client requests.\n\nUsing application log inside plugins and files is not recommended. It is better to use a separate logger for each plugin or file.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-logging.html", "title": "Logging in Ktor Server", "description": "This page covers how to implement logging in Ktor applications, including configuration for different platforms and logging frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:22:38", "type": "best_practices", "page_metadata": {"og:type": "website", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "language": "en-US", "ogTitle": "Logging in Ktor Server | Ktor", "ogLocale": "en_US", "title": "Logging in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "Logging in Ktor Server | Ktor", "twitter:title": "Logging in Ktor Server | Ktor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-logging.html", "built-on": "2025-02-26T14:01:06.151571285", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "a9934c59-a957-4cab-9f6e-3a4fed54b391", "sourceURL": "https://ktor.io/docs/server-logging.html", "url": "https://ktor.io/docs/server-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Authentication and authorization in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Authentication and authorization in Ktor Client in ktor.\n\n# Client Plugin Authentication and authorization in Ktor Client\n\nThis page covers the Ktor Client's authentication and authorization capabilities, including supported authentication types, how to add dependencies, install the Auth plugin, and configure authentication providers.Here's a quick rundown of what this is about:\n\n## Supported authentication types\n\nHTTP provides a general framework for access control and authentication. The Ktor client allows you to use the following HTTP authentication schemes:\n\n- Basic - uses Base64 encoding to provide a username and password. Generally is not recommended if not used in combination with HTTPS.\n\n- Digest - an authentication method that communicates user credentials in an encrypted form by applying a hash function to the username and password.\n\n- Bearer - an authentication scheme that involves security tokens called bearer tokens. For example, you can use this scheme as a part of OAuth flow to authorize users of your application by using external providers, such as Google, Facebook, Twitter, and so on.\n\n## Add dependencies\n\nTo enable authentication, you need to include the ktor-client-auth artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-auth:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install Auth\n\nTo install the Auth plugin, pass it to the install function inside a client configuration block:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.auth.*\n//...\nval client = HttpClient(CIO) {\n    install(Auth) {\n        // Configure authentication\n    }\n}\n```\n\nNow you can configure the required authentication provider.\n\n## Configure authentication\n\n### Step 1: Choose an authentication provider\nTo use a specific authentication provider (basic, digest, or bearer), you need to call the corresponding function inside the install block. For example, to use the basic authentication, call the basic function:\n\n```\ninstall(Auth) {\n    basic {\n        // Configure basic authentication\n    }\n}\n```\n\nInside the block, you can configure settings specific to this provider.\n\n### Step 2: (Optional) Configure the realm\nOptionally, you can configure the realm using the realm property:\n\n```\ninstall(Auth) {\n    basic {\n        realm = \"Access to the '/' path\"\n        // ...\n    }\n}\n```\n\nYou can create several providers with different realms to access different resources:\n\n```\ninstall(Auth) {\n    basic {\n        realm = \"Access to the '/' path\"\n        // ...\n    }\n    basic {\n        realm = \"Access to the '/admin' path\"\n        // ...\n    }\n}\n```\n\nIn this case, the client chooses the necessary provider based on the WWW-Authenticate response header, which contains the realm.\n\n### Step 3: Configure a provider\nTo learn how to configure settings for a specific provider, see a corresponding topic:\n- Basic authentication in Ktor Client\n- Digest authentication in Ktor Client\n- Bearer authentication in Ktor Client\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-auth.html", "title": "Client Plugin Authentication and authorization in Ktor Client", "description": "This page covers the Ktor Client's authentication and authorization capabilities, including supported authentication types, how to add dependencies, install the Auth plugin, and configure authentication providers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:22:55", "type": "overview", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Authentication and authorization in Ktor Client | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-auth.html", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "Authentication and authorization in Ktor Client | Ktor Documentation", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:title": "Authentication and authorization in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-auth.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.331981598", "og:type": "website", "og:title": "Authentication and authorization in Ktor Client | Ktor", "language": "en-US", "scrapeId": "4ee58adc-ed75-40f0-b4ab-c8e3abd14d0c", "sourceURL": "https://ktor.io/docs/client-auth.html", "url": "https://ktor.io/docs/client-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I supported authentication types in ktor?\n\nAssistant: To supported authentication types in ktor, here's what you do:\nHTTP provides a general framework for access control and authentication. The Ktor client allows you to use the following HTTP authentication schemes:\n\n- Basic - uses Base64 encoding to provide a username and password. Generally is not recommended if not used in combination with HTTPS.\n\n- Digest - an authentication method that communicates user credentials in an encrypted form by applying a hash function to the username and password.\n\n- Bearer - an authentication scheme that involves security tokens called bearer tokens. For example, you can use this scheme as a part of OAuth flow to authorize users of your application by using external providers, such as Google, Facebook, Twitter, and so on..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-auth.html", "title": "Client Plugin Authentication and authorization in Ktor Client", "description": "This page covers the Ktor Client's authentication and authorization capabilities, including supported authentication types, how to add dependencies, install the Auth plugin, and configure authentication providers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:22:55", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Authentication and authorization in Ktor Client | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-auth.html", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "Authentication and authorization in Ktor Client | Ktor Documentation", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:title": "Authentication and authorization in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-auth.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.331981598", "og:type": "website", "og:title": "Authentication and authorization in Ktor Client | Ktor", "language": "en-US", "scrapeId": "4ee58adc-ed75-40f0-b4ab-c8e3abd14d0c", "sourceURL": "https://ktor.io/docs/client-auth.html", "url": "https://ktor.io/docs/client-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo enable authentication, you need to include the ktor-client-auth artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-auth:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-auth.html", "title": "Client Plugin Authentication and authorization in Ktor Client", "description": "This page covers the Ktor Client's authentication and authorization capabilities, including supported authentication types, how to add dependencies, install the Auth plugin, and configure authentication providers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:22:55", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Authentication and authorization in Ktor Client | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-auth.html", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "Authentication and authorization in Ktor Client | Ktor Documentation", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:title": "Authentication and authorization in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-auth.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.331981598", "og:type": "website", "og:title": "Authentication and authorization in Ktor Client | Ktor", "language": "en-US", "scrapeId": "4ee58adc-ed75-40f0-b4ab-c8e3abd14d0c", "sourceURL": "https://ktor.io/docs/client-auth.html", "url": "https://ktor.io/docs/client-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install auth in ktor?\n\nAssistant: To install auth in ktor, here's what you do:\nTo install the Auth plugin, pass it to the install function inside a client configuration block:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.auth.*\n//...\nval client = HttpClient(CIO) {\n    install(Auth) {\n        // Configure authentication\n    }\n}\n```\n\nNow you can configure the required authentication provider..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-auth.html", "title": "Client Plugin Authentication and authorization in Ktor Client", "description": "This page covers the Ktor Client's authentication and authorization capabilities, including supported authentication types, how to add dependencies, install the Auth plugin, and configure authentication providers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:22:55", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Authentication and authorization in Ktor Client | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-auth.html", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "Authentication and authorization in Ktor Client | Ktor Documentation", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:title": "Authentication and authorization in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-auth.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.331981598", "og:type": "website", "og:title": "Authentication and authorization in Ktor Client | Ktor", "language": "en-US", "scrapeId": "4ee58adc-ed75-40f0-b4ab-c8e3abd14d0c", "sourceURL": "https://ktor.io/docs/client-auth.html", "url": "https://ktor.io/docs/client-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure authentication in ktor?\n\nAssistant: To configure authentication in ktor, here's what you do:\n### Step 1: Choose an authentication provider\nTo use a specific authentication provider (basic, digest, or bearer), you need to call the corresponding function inside the install block. For example, to use the basic authentication, call the basic function:\n\n```\ninstall(Auth) {\n    basic {\n        // Configure basic authentication\n    }\n}\n```\n\nInside the block, you can configure settings specific to this provider.\n\n### Step 2: (Optional) Configure the realm\nOptionally, you can configure the realm using the realm property:\n\n```\ninstall(Auth) {\n    basic {\n        realm = \"Access to the '/' path\"\n        // ...\n    }\n}\n```\n\nYou can create several providers with different realms to access different resources:\n\n```\ninstall(Auth) {\n    basic {\n        realm = \"Access to the '/' path\"\n        // ...\n    }\n    basic {\n        realm = \"Access to the '/admin' path\"\n        // ...\n    }\n}\n```\n\nIn this case, the client chooses the necessary provider based on the WWW-Authenticate response header, which contains the realm.\n\n### Step 3: Configure a provider\nTo learn how to configure settings for a specific provider, see a corresponding topic:\n- Basic authentication in Ktor Client\n- Digest authentication in Ktor Client\n- Bearer authentication in Ktor Client.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-auth.html", "title": "Client Plugin Authentication and authorization in Ktor Client", "description": "This page covers the Ktor Client's authentication and authorization capabilities, including supported authentication types, how to add dependencies, install the Auth plugin, and configure authentication providers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:22:55", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Authentication and authorization in Ktor Client | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-auth.html", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "Authentication and authorization in Ktor Client | Ktor Documentation", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:title": "Authentication and authorization in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-auth.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.331981598", "og:type": "website", "og:title": "Authentication and authorization in Ktor Client | Ktor", "language": "en-US", "scrapeId": "4ee58adc-ed75-40f0-b4ab-c8e3abd14d0c", "sourceURL": "https://ktor.io/docs/client-auth.html", "url": "https://ktor.io/docs/client-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Authentication and authorization in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies in Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-client-auth:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies in gradle (kotlin), which is an important aspect of client plugin authentication and authorization in ktor client.\n\n**Add dependencies in Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-client-auth:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies in gradle (groovy), which is an important aspect of client plugin authentication and authorization in ktor client.\n\n**Add dependencies in Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies in maven, which is an important aspect of client plugin authentication and authorization in ktor client.\n\n**Install Auth plugin**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.auth.*\n//...\nval client = HttpClient(CIO) {\n    install(Auth) {\n        // Configure authentication\n    }\n}\n```\n\nThis snippet shows you how to install auth plugin, which is an important aspect of client plugin authentication and authorization in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-auth.html", "title": "Client Plugin Authentication and authorization in Ktor Client", "description": "This page covers the Ktor Client's authentication and authorization capabilities, including supported authentication types, how to add dependencies, install the Auth plugin, and configure authentication providers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:22:55", "type": "code_examples", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Authentication and authorization in Ktor Client | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-auth.html", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "Authentication and authorization in Ktor Client | Ktor Documentation", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:title": "Authentication and authorization in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-auth.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.331981598", "og:type": "website", "og:title": "Authentication and authorization in Ktor Client | Ktor", "language": "en-US", "scrapeId": "4ee58adc-ed75-40f0-b4ab-c8e3abd14d0c", "sourceURL": "https://ktor.io/docs/client-auth.html", "url": "https://ktor.io/docs/client-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Authentication and authorization in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn the server, Ktor provides the Authentication plugin for handling authentication and authorization.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-auth.html", "title": "Client Plugin Authentication and authorization in Ktor Client", "description": "This page covers the Ktor Client's authentication and authorization capabilities, including supported authentication types, how to add dependencies, install the Auth plugin, and configure authentication providers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:22:55", "type": "best_practices", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Authentication and authorization in Ktor Client | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-auth.html", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "Authentication and authorization in Ktor Client | Ktor Documentation", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:title": "Authentication and authorization in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-auth.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.331981598", "og:type": "website", "og:title": "Authentication and authorization in Ktor Client | Ktor", "language": "en-US", "scrapeId": "4ee58adc-ed75-40f0-b4ab-c8e3abd14d0c", "sourceURL": "https://ktor.io/docs/client-auth.html", "url": "https://ktor.io/docs/client-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client plugins is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client plugins in ktor.\n\n# Client plugins\n\nMany applications require common functionality that is out of scope of the application logic. This could be things like logging, serialization, or authorization. All of these are provided in Ktor by means of what we call Plugins.Here's a quick rundown of what this is about:\n\n## Add plugin dependency\n\nA plugin might require a separate dependency. For example, the Logging plugin requires adding the `ktor-client-logging` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-logging:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-logging:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-logging-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install a plugin\n\nTo install a plugin, you need to pass it to the `install` function inside a client configuration block. For example, installing the Logging plugin looks as follows:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.logging.*\n\nval client = HttpClient(CIO) {\n    install(Logging)\n}\n```\n\n## Configure a plugin\n\nYou can configure a plugin inside the `install` block. For example, for the Logging plugin, you can specify the logger, logging level, and condition for filtering log messages:\n\n```\nrunBlocking {\n    val client = HttpClient(CIO) {\n        install(Logging) {\n            logger = Logger.DEFAULT\n            level = LogLevel.HEADERS\n            filter { request ->\n                request.url.host.contains(\"ktor.io\")\n            }\n            sanitizeHeader { header -> header == HttpHeaders.Authorization }\n        }\n    }\n}\n```\n\n## Create a custom plugin\n\nTo learn how to create custom plugins, refer to Custom client plugins.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-plugins.html", "title": "Client plugins", "description": "Many applications require common functionality that is out of scope of the application logic. This could be things like logging, serialization, or authorization. All of these are provided in Ktor by means of what we call Plugins.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:17", "type": "overview", "page_metadata": {"ogSiteName": "Ktor Help", "og:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:title": "Client plugins | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Client plugins | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Client plugins | Ktor", "og:locale": "en_US", "ogDescription": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-plugins.html", "og:url": "https://ktor.io/docs/3.1.1/client-plugins.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "Client plugins | Ktor Documentation", "og:type": "website", "twitter:description": "", "built-on": "2025-02-26T14:01:06.254345424", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "c59232f8-ab6d-4cfc-863a-bbef0e8938d4", "sourceURL": "https://ktor.io/docs/client-plugins.html", "url": "https://ktor.io/docs/client-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add plugin dependency in ktor?\n\nAssistant: To add plugin dependency in ktor, here's what you do:\nA plugin might require a separate dependency. For example, the Logging plugin requires adding the `ktor-client-logging` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-logging:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-logging:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-logging-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-plugins.html", "title": "Client plugins", "description": "Many applications require common functionality that is out of scope of the application logic. This could be things like logging, serialization, or authorization. All of these are provided in Ktor by means of what we call Plugins.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:17", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "og:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:title": "Client plugins | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Client plugins | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Client plugins | Ktor", "og:locale": "en_US", "ogDescription": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-plugins.html", "og:url": "https://ktor.io/docs/3.1.1/client-plugins.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "Client plugins | Ktor Documentation", "og:type": "website", "twitter:description": "", "built-on": "2025-02-26T14:01:06.254345424", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "c59232f8-ab6d-4cfc-863a-bbef0e8938d4", "sourceURL": "https://ktor.io/docs/client-plugins.html", "url": "https://ktor.io/docs/client-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install a plugin in ktor?\n\nAssistant: To install a plugin in ktor, here's what you do:\nTo install a plugin, you need to pass it to the `install` function inside a client configuration block. For example, installing the Logging plugin looks as follows:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.logging.*\n\nval client = HttpClient(CIO) {\n    install(Logging)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-plugins.html", "title": "Client plugins", "description": "Many applications require common functionality that is out of scope of the application logic. This could be things like logging, serialization, or authorization. All of these are provided in Ktor by means of what we call Plugins.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:17", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "og:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:title": "Client plugins | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Client plugins | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Client plugins | Ktor", "og:locale": "en_US", "ogDescription": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-plugins.html", "og:url": "https://ktor.io/docs/3.1.1/client-plugins.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "Client plugins | Ktor Documentation", "og:type": "website", "twitter:description": "", "built-on": "2025-02-26T14:01:06.254345424", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "c59232f8-ab6d-4cfc-863a-bbef0e8938d4", "sourceURL": "https://ktor.io/docs/client-plugins.html", "url": "https://ktor.io/docs/client-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure a plugin in ktor?\n\nAssistant: To configure a plugin in ktor, here's what you do:\nYou can configure a plugin inside the `install` block. For example, for the Logging plugin, you can specify the logger, logging level, and condition for filtering log messages:\n\n```\nrunBlocking {\n    val client = HttpClient(CIO) {\n        install(Logging) {\n            logger = Logger.DEFAULT\n            level = LogLevel.HEADERS\n            filter { request ->\n                request.url.host.contains(\"ktor.io\")\n            }\n            sanitizeHeader { header -> header == HttpHeaders.Authorization }\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-plugins.html", "title": "Client plugins", "description": "Many applications require common functionality that is out of scope of the application logic. This could be things like logging, serialization, or authorization. All of these are provided in Ktor by means of what we call Plugins.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:17", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "og:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:title": "Client plugins | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Client plugins | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Client plugins | Ktor", "og:locale": "en_US", "ogDescription": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-plugins.html", "og:url": "https://ktor.io/docs/3.1.1/client-plugins.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "Client plugins | Ktor Documentation", "og:type": "website", "twitter:description": "", "built-on": "2025-02-26T14:01:06.254345424", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "c59232f8-ab6d-4cfc-863a-bbef0e8938d4", "sourceURL": "https://ktor.io/docs/client-plugins.html", "url": "https://ktor.io/docs/client-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a custom plugin in ktor?\n\nAssistant: To create a custom plugin in ktor, here's what you do:\nTo learn how to create custom plugins, refer to Custom client plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-plugins.html", "title": "Client plugins", "description": "Many applications require common functionality that is out of scope of the application logic. This could be things like logging, serialization, or authorization. All of these are provided in Ktor by means of what we call Plugins.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:17", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "og:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:title": "Client plugins | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Client plugins | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Client plugins | Ktor", "og:locale": "en_US", "ogDescription": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-plugins.html", "og:url": "https://ktor.io/docs/3.1.1/client-plugins.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "Client plugins | Ktor Documentation", "og:type": "website", "twitter:description": "", "built-on": "2025-02-26T14:01:06.254345424", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "c59232f8-ab6d-4cfc-863a-bbef0e8938d4", "sourceURL": "https://ktor.io/docs/client-plugins.html", "url": "https://ktor.io/docs/client-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client plugins in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add Logging Dependency (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-client-logging:$ktor_version\")\n```\n\nThis snippet shows you how to add logging dependency (gradle kotlin), which is an important aspect of client plugins.\n\n**Add Logging Dependency (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-client-logging:$ktor_version\"\n```\n\nThis snippet shows you how to add logging dependency (gradle groovy), which is an important aspect of client plugins.\n\n**Add Logging Dependency (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-logging-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add logging dependency (maven), which is an important aspect of client plugins.\n\n**Install Logging Plugin**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.logging.*\n\nval client = HttpClient(CIO) {\n    install(Logging)\n}\n```\n\nThis snippet shows you how to install logging plugin, which is an important aspect of client plugins.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-plugins.html", "title": "Client plugins", "description": "Many applications require common functionality that is out of scope of the application logic. This could be things like logging, serialization, or authorization. All of these are provided in Ktor by means of what we call Plugins.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:17", "type": "code_examples", "page_metadata": {"ogSiteName": "Ktor Help", "og:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:title": "Client plugins | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Client plugins | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Client plugins | Ktor", "og:locale": "en_US", "ogDescription": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-plugins.html", "og:url": "https://ktor.io/docs/3.1.1/client-plugins.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "Client plugins | Ktor Documentation", "og:type": "website", "twitter:description": "", "built-on": "2025-02-26T14:01:06.254345424", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "c59232f8-ab6d-4cfc-863a-bbef0e8938d4", "sourceURL": "https://ktor.io/docs/client-plugins.html", "url": "https://ktor.io/docs/client-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client plugins in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can learn which dependencies you need from a topic for a required plugin.\n\nRefer to Custom client plugins to learn how to create custom plugins.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-plugins.html", "title": "Client plugins", "description": "Many applications require common functionality that is out of scope of the application logic. This could be things like logging, serialization, or authorization. All of these are provided in Ktor by means of what we call Plugins.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:23:17", "type": "best_practices", "page_metadata": {"ogSiteName": "Ktor Help", "og:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:title": "Client plugins | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Client plugins | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogTitle": "Client plugins | Ktor", "og:locale": "en_US", "ogDescription": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-plugins.html", "og:url": "https://ktor.io/docs/3.1.1/client-plugins.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "Client plugins | Ktor Documentation", "og:type": "website", "twitter:description": "", "built-on": "2025-02-26T14:01:06.254345424", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "c59232f8-ab6d-4cfc-863a-bbef0e8938d4", "sourceURL": "https://ktor.io/docs/client-plugins.html", "url": "https://ktor.io/docs/client-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Docker Compose is in ktor?\n\nAssistant: Sure, I'd be happy to explain Docker Compose in ktor.\n\n# Docker Compose\n\nIn this topic, we'll show you how to run a server Ktor application under Docker Compose, using a project created in the Integrate a Database tutorial, which uses Exposed to connect to a PostgreSQL database where the database and the web application run separately.Here's a quick rundown of what this is about:\n\n## Get the application ready\n\n### Extract database settings\n\nThe project created in the Integrate a Database tutorial uses hardcoded attributes to establish a database connection.\n\nLet's extract connection settings for the PostgreSQL database to a custom configuration group.\n\n1. Open the application.yaml file in src/main/resources and add the `storage` group outside the `ktor` group as follows:\n\n```\nktor:\n     application:\n       modules:\n      - com.example.ApplicationKt.module\ndeployment:\n    port: 8080\nstorage:\ndriverClassName: \"org.postgresql.Driver\"\njdbcURL: \"jdbc:postgresql://localhost:5432/ktor_tutorial_db\"\nuser: \"postgres\"\npassword: \"password\"\n```\n\nThese settings will be configured later in the compose.yml file.\n\n2. Open the Databases.kt file in src/main/kotlin/com/example/plugins/ and update the `configureDatabases()` function to load storage settings from the configuration file:\n\n```\nfun Application.configureDatabases(config: ApplicationConfig) {\n       val url = config.property(\"storage.jdbcURL\").getString()\n       val user = config.property(\"storage.user\").getString()\n       val password = config.property(\"storage.password\").getString()\n\n       Database.connect(\n           url,\n           user = user,\n           password = password\n       )\n}\n```\n\nThe `configureDatabases()` function now accepts `ApplicationConfig` and uses `config.property` to load custom settings.\n\n3. Open the Application.kt file in src/main/kotlin/com/example/ and pass `environment.config` to `configureDatabases()` to load connection settings on application startup:\n\n```\nfun Application.module() {\n       val repository = PostgresTaskRepository()\n\n       configureSerialization(repository)\n       configureDatabases(environment.config)\n       configureRouting()\n}\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/docker-compose.html", "title": "Docker Compose", "description": "In this topic, we'll show you how to run a server Ktor application under Docker Compose, using a project created in the Integrate a Database tutorial, which uses Exposed to connect to a PostgreSQL database where the database and the web application run separately.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:23:45", "type": "overview", "page_metadata": {"built-on": "2025-02-26T14:01:04.479086158", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:description": "", "title": "Docker Compose | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "Docker Compose | Ktor", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Docker Compose | Ktor", "og:url": "https://ktor.io/docs/3.1.1/docker-compose.html", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "build-number": "707", "ogSiteName": "Ktor Help", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Docker Compose | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/docker-compose.html", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "237e3240-d8c3-4e5f-be48-56f1ac9ddd0a", "sourceURL": "https://ktor.io/docs/docker-compose.html", "url": "https://ktor.io/docs/docker-compose.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I get the application ready in ktor?\n\nAssistant: To get the application ready in ktor, here's what you do:\n### Extract database settings\n\nThe project created in the Integrate a Database tutorial uses hardcoded attributes to establish a database connection.\n\nLet's extract connection settings for the PostgreSQL database to a custom configuration group.\n\n1. Open the application.yaml file in src/main/resources and add the `storage` group outside the `ktor` group as follows:\n\n```\nktor:\n     application:\n       modules:\n      - com.example.ApplicationKt.module\ndeployment:\n    port: 8080\nstorage:\ndriverClassName: \"org.postgresql.Driver\"\njdbcURL: \"jdbc:postgresql://localhost:5432/ktor_tutorial_db\"\nuser: \"postgres\"\npassword: \"password\"\n```\n\nThese settings will be configured later in the compose.yml file.\n\n2. Open the Databases.kt file in src/main/kotlin/com/example/plugins/ and update the `configureDatabases()` function to load storage settings from the configuration file:\n\n```\nfun Application.configureDatabases(config: ApplicationConfig) {\n       val url = config.property(\"storage.jdbcURL\").getString()\n       val user = config.property(\"storage.user\").getString()\n       val password = config.property(\"storage.password\").getString()\n\n       Database.connect(\n           url,\n           user = user,\n           password = password\n       )\n}\n```\n\nThe `configureDatabases()` function now accepts `ApplicationConfig` and uses `config.property` to load custom settings.\n\n3. Open the Application.kt file in src/main/kotlin/com/example/ and pass `environment.config` to `configureDatabases()` to load connection settings on application startup:\n\n```\nfun Application.module() {\n       val repository = PostgresTaskRepository()\n\n       configureSerialization(repository)\n       configureDatabases(environment.config)\n       configureRouting()\n}\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/docker-compose.html", "title": "Docker Compose", "description": "In this topic, we'll show you how to run a server Ktor application under Docker Compose, using a project created in the Integrate a Database tutorial, which uses Exposed to connect to a PostgreSQL database where the database and the web application run separately.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:23:45", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:04.479086158", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:description": "", "title": "Docker Compose | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "Docker Compose | Ktor", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Docker Compose | Ktor", "og:url": "https://ktor.io/docs/3.1.1/docker-compose.html", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "build-number": "707", "ogSiteName": "Ktor Help", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Docker Compose | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/docker-compose.html", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "237e3240-d8c3-4e5f-be48-56f1ac9ddd0a", "sourceURL": "https://ktor.io/docs/docker-compose.html", "url": "https://ktor.io/docs/docker-compose.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Docker Compose in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Dockerfile for Docker Image**:\n\n```yaml\n# Stage 1: Cache Gradle dependencies\nFROM gradle:latest AS cache\nRUN mkdir -p /home/gradle/cache_home\nENV GRADLE_USER_HOME=/home/gradle/cache_home\nCOPY build.gradle.* gradle.properties /home/gradle/app/\nCOPY gradle /home/gradle/app/gradle\nWORKDIR /home/gradle/app\nRUN gradle clean build -i --stacktrace\n\n# Stage 2: Build Application\nFROM gradle:latest AS build\nCOPY --from=cache /home/gradle/cache_home /home/gradle/.gradle\nCOPY . /usr/src/app/\nWORKDIR /usr/src/app\nCOPY --chown=gradle:gradle . /home/gradle/src\nWORKDIR /home/gradle/src\n# Build the fat JAR, Gradle also supports shadow\n# and boot JAR by default.\nRUN gradle buildFatJar --no-daemon\n\n# Stage 3: Create the Runtime Image\nFROM amazoncorretto:22 AS runtime\nEXPOSE 8080\nRUN mkdir /app\nCOPY --from=build /home/gradle/src/build/libs/*.jar /app/ktor-docker-sample.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app/ktor-docker-sample.jar\"]\n```\n\nThis snippet shows you how to dockerfile for docker image, which is an important aspect of docker compose.\n\n**Docker Compose Configuration**:\n\n```yaml\nservices:\nweb:\n    build: .\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      db:\n        condition: service_healthy\n\ndb:\n    image: postgres\n    volumes:\n      - ./tmp/db:/var/lib/postgresql/data\n    environment:\n      POSTGRES_DB: ktor_tutorial_db\n      POSTGRES_HOST_AUTH_METHOD: trust\n    ports:\n      - \"5432:5432\"\n    healthcheck:\n      test: [ \"CMD-SHELL\", \"pg_isready -U postgres\" ]\n      interval: 1s\n```\n\nThis snippet shows you how to docker compose configuration, which is an important aspect of docker compose.\n\n", "metadata": {"source_url": "https://ktor.io/docs/docker-compose.html", "title": "Docker Compose", "description": "In this topic, we'll show you how to run a server Ktor application under Docker Compose, using a project created in the Integrate a Database tutorial, which uses Exposed to connect to a PostgreSQL database where the database and the web application run separately.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:23:45", "type": "code_examples", "page_metadata": {"built-on": "2025-02-26T14:01:04.479086158", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:description": "", "title": "Docker Compose | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "Docker Compose | Ktor", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Docker Compose | Ktor", "og:url": "https://ktor.io/docs/3.1.1/docker-compose.html", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "build-number": "707", "ogSiteName": "Ktor Help", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Docker Compose | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/docker-compose.html", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "237e3240-d8c3-4e5f-be48-56f1ac9ddd0a", "sourceURL": "https://ktor.io/docs/docker-compose.html", "url": "https://ktor.io/docs/docker-compose.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Docker Compose in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor more information on how this multi-stage build works, see Prepare Docker image.\n\nThis example uses the Amazon Corretto Docker Image, but you can substitute it with any other suitable alternative, such as Eclipse Temurin, IBM Semeru, IBM Java, or SAP Machine JDK.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/docker-compose.html", "title": "Docker Compose", "description": "In this topic, we'll show you how to run a server Ktor application under Docker Compose, using a project created in the Integrate a Database tutorial, which uses Exposed to connect to a PostgreSQL database where the database and the web application run separately.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:23:45", "type": "best_practices", "page_metadata": {"built-on": "2025-02-26T14:01:04.479086158", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:description": "", "title": "Docker Compose | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "Docker Compose | Ktor", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Docker Compose | Ktor", "og:url": "https://ktor.io/docs/3.1.1/docker-compose.html", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "build-number": "707", "ogSiteName": "Ktor Help", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Docker Compose | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/docker-compose.html", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "237e3240-d8c3-4e5f-be48-56f1ac9ddd0a", "sourceURL": "https://ktor.io/docs/docker-compose.html", "url": "https://ktor.io/docs/docker-compose.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what HTTP/2 is in ktor?\n\nAssistant: Sure, I'd be happy to explain HTTP/2 in ktor.\n\n# HTTP/2\n\nThis page covers the implementation and configuration of HTTP/2 in Ktor, including requirements for SSL certificates and ALPN implementations for Jetty and Netty engines.Here's a quick rundown of what this is about:\n\n## SSL certificate\n\nAs per the specification, HTTP/2 does not require encryption, but all browsers will require encrypted connections to be used with HTTP/2. That's why a working TLS environment is a prerequisite for enabling HTTP/2. Therefore, a certificate is required to enable encryption. For testing purposes, it can be generated with `keytool` from the JDK ...\n\n```\nkeytool -keystore test.jks -genkeypair -alias testkey -keyalg RSA -keysize 4096 -validity 5000 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US'\n```\n\n... or by using the [buildKeyStore](https://ktor.io/docs/server-ssl.html) function.\n\nThe next step is configuring Ktor to use your keystore. See the example `application.conf`/ `application.yaml` [configuration files](https://ktor.io/docs/server-configuration-file.html):\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n        sslPort = 8443\n    }\n\n    application {\n        modules = [ com.example.ApplicationKt.main ]\n    }\n\n    security {\n        ssl {\n            keyStore = test.jks\n            keyAlias = testkey\n            keyStorePassword = foobar\n            privateKeyPassword = foobar\n        }\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: 8080\n        sslPort: 8443\n    application:\n        modules:\n            - com.example.ApplicationKt.main\n\n    security:\n        ssl:\n            keyStore: test.jks\n            keyAlias: testkey\n            keyStorePassword: foobar\n            privateKeyPassword: foobar\n```\n\n## ALPN implementation\n\nHTTP/2 requires ALPN ( [Application-Layer Protocol Negotiation](https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation)) to be enabled. The first option is to use an external ALPN implementation that needs to be added to the boot classpath. Another option is to use OpenSSL native bindings and precompiled native binaries. Also, each particular engine can support only one of these methods.\n\n### Jetty\n\nSince ALPN APIs are supported starting with Java 8, the Jetty engine doesn't require any specific configurations for using HTTP/2. So, you only need to:\n\n1. [Create a server](https://ktor.io/docs/server-engines.html#choose-create-server) with the Jetty engine.\n2. Add an SSL configuration as described in [SSL certificate](https://ktor.io/docs/server-http2.html#ssl_certificate).\n3. Configure `sslPort`.\n\nThe [http2-jetty](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/http2-jetty) runnable example demonstrates HTTP/2 support for Jetty.\n\n### Netty\n\nTo enable HTTP/2 in Netty, use OpenSSL bindings ( [tcnative netty port](https://netty.io/wiki/forked-tomcat-native.html)). The example below shows how to add a native implementation (statically linked BoringSSL library, a fork of OpenSSL) to the `build.gradle.kts` file:\n\n```\nval osName = System.getProperty(\"os.name\").lowercase()\nval tcnative_classifier = when {\n    osName.contains(\"win\") -> \"windows-x86_64\"\n    osName.contains(\"linux\") -> \"linux-x86_64\"\n    osName.contains(\"mac\") -> \"osx-x86_64\"\n    else -> null\n}\n\ndependencies {\n    if (tcnative_classifier != null) {\n        implementation(\"io.netty:netty-tcnative-boringssl-static:\\$tcnative_version:\\$tcnative_classifier\")\n    } else {\n        implementation(\"io.netty:netty-tcnative-boringssl-static:\\$tcnative_version\")\n    }\n}\n```\n\n`tc.native.classifier` should be one of the following: `linux-x86_64`, `osx-x86_64`, or `windows-x86_64`. The [http2-netty](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/http2-netty) runnable example demonstrates how to enable HTTP/2 support for Netty.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-http2.html", "title": "HTTP/2", "description": "This page covers the implementation and configuration of HTTP/2 in Ktor, including requirements for SSL certificates and ALPN implementations for Jetty and Netty engines.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:24:28", "type": "overview", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.998152871", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-http2.html", "ogDescription": "", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-http2.html", "twitter:creator": "@JetBrainsKtor", "og:title": "HTTP/2 | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "HTTP/2 | Ktor", "title": "HTTP/2 | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogTitle": "HTTP/2 | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:description": "", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "361afc33-b3ee-457b-b2e1-0a2d328ca4bd", "sourceURL": "https://ktor.io/docs/server-http2.html", "url": "https://ktor.io/docs/server-http2.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I ssl certificate in ktor?\n\nAssistant: To ssl certificate in ktor, here's what you do:\nAs per the specification, HTTP/2 does not require encryption, but all browsers will require encrypted connections to be used with HTTP/2. That's why a working TLS environment is a prerequisite for enabling HTTP/2. Therefore, a certificate is required to enable encryption. For testing purposes, it can be generated with `keytool` from the JDK ...\n\n```\nkeytool -keystore test.jks -genkeypair -alias testkey -keyalg RSA -keysize 4096 -validity 5000 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US'\n```\n\n... or by using the [buildKeyStore](https://ktor.io/docs/server-ssl.html) function.\n\nThe next step is configuring Ktor to use your keystore. See the example `application.conf`/ `application.yaml` [configuration files](https://ktor.io/docs/server-configuration-file.html):\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n        sslPort = 8443\n    }\n\n    application {\n        modules = [ com.example.ApplicationKt.main ]\n    }\n\n    security {\n        ssl {\n            keyStore = test.jks\n            keyAlias = testkey\n            keyStorePassword = foobar\n            privateKeyPassword = foobar\n        }\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: 8080\n        sslPort: 8443\n    application:\n        modules:\n            - com.example.ApplicationKt.main\n\n    security:\n        ssl:\n            keyStore: test.jks\n            keyAlias: testkey\n            keyStorePassword: foobar\n            privateKeyPassword: foobar\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-http2.html", "title": "HTTP/2", "description": "This page covers the implementation and configuration of HTTP/2 in Ktor, including requirements for SSL certificates and ALPN implementations for Jetty and Netty engines.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:24:28", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.998152871", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-http2.html", "ogDescription": "", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-http2.html", "twitter:creator": "@JetBrainsKtor", "og:title": "HTTP/2 | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "HTTP/2 | Ktor", "title": "HTTP/2 | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogTitle": "HTTP/2 | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:description": "", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "361afc33-b3ee-457b-b2e1-0a2d328ca4bd", "sourceURL": "https://ktor.io/docs/server-http2.html", "url": "https://ktor.io/docs/server-http2.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I alpn implementation in ktor?\n\nAssistant: To alpn implementation in ktor, here's what you do:\nHTTP/2 requires ALPN ( [Application-Layer Protocol Negotiation](https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation)) to be enabled. The first option is to use an external ALPN implementation that needs to be added to the boot classpath. Another option is to use OpenSSL native bindings and precompiled native binaries. Also, each particular engine can support only one of these methods.\n\n### Jetty\n\nSince ALPN APIs are supported starting with Java 8, the Jetty engine doesn't require any specific configurations for using HTTP/2. So, you only need to:\n\n1. [Create a server](https://ktor.io/docs/server-engines.html#choose-create-server) with the Jetty engine.\n2. Add an SSL configuration as described in [SSL certificate](https://ktor.io/docs/server-http2.html#ssl_certificate).\n3. Configure `sslPort`.\n\nThe [http2-jetty](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/http2-jetty) runnable example demonstrates HTTP/2 support for Jetty.\n\n### Netty\n\nTo enable HTTP/2 in Netty, use OpenSSL bindings ( [tcnative netty port](https://netty.io/wiki/forked-tomcat-native.html)). The example below shows how to add a native implementation (statically linked BoringSSL library, a fork of OpenSSL) to the `build.gradle.kts` file:\n\n```\nval osName = System.getProperty(\"os.name\").lowercase()\nval tcnative_classifier = when {\n    osName.contains(\"win\") -> \"windows-x86_64\"\n    osName.contains(\"linux\") -> \"linux-x86_64\"\n    osName.contains(\"mac\") -> \"osx-x86_64\"\n    else -> null\n}\n\ndependencies {\n    if (tcnative_classifier != null) {\n        implementation(\"io.netty:netty-tcnative-boringssl-static:\\$tcnative_version:\\$tcnative_classifier\")\n    } else {\n        implementation(\"io.netty:netty-tcnative-boringssl-static:\\$tcnative_version\")\n    }\n}\n```\n\n`tc.native.classifier` should be one of the following: `linux-x86_64`, `osx-x86_64`, or `windows-x86_64`. The [http2-netty](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/http2-netty) runnable example demonstrates how to enable HTTP/2 support for Netty..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-http2.html", "title": "HTTP/2", "description": "This page covers the implementation and configuration of HTTP/2 in Ktor, including requirements for SSL certificates and ALPN implementations for Jetty and Netty engines.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:24:28", "type": "section_detail", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.998152871", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-http2.html", "ogDescription": "", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-http2.html", "twitter:creator": "@JetBrainsKtor", "og:title": "HTTP/2 | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "HTTP/2 | Ktor", "title": "HTTP/2 | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogTitle": "HTTP/2 | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:description": "", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "361afc33-b3ee-457b-b2e1-0a2d328ca4bd", "sourceURL": "https://ktor.io/docs/server-http2.html", "url": "https://ktor.io/docs/server-http2.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for HTTP/2 in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Generate SSL Certificate**:\n\n```yaml\nkeytool -keystore test.jks -genkeypair -alias testkey -keyalg RSA -keysize 4096 -validity 5000 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US'\n```\n\nThis snippet shows you how to generate ssl certificate, which is an important aspect of http/2.\n\n**Ktor Configuration (application.conf)**:\n\n```yaml\nktor {\n    deployment {\n        port = 8080\n        sslPort = 8443\n    }\n\n    application {\n        modules = [ com.example.ApplicationKt.main ]\n    }\n\n    security {\n        ssl {\n            keyStore = test.jks\n            keyAlias = testkey\n            keyStorePassword = foobar\n            privateKeyPassword = foobar\n        }\n    }\n}\n```\n\nThis snippet shows you how to ktor configuration (application.conf), which is an important aspect of http/2.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-http2.html", "title": "HTTP/2", "description": "This page covers the implementation and configuration of HTTP/2 in Ktor, including requirements for SSL certificates and ALPN implementations for Jetty and Netty engines.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:24:28", "type": "code_examples", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.998152871", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-http2.html", "ogDescription": "", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-http2.html", "twitter:creator": "@JetBrainsKtor", "og:title": "HTTP/2 | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "HTTP/2 | Ktor", "title": "HTTP/2 | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogTitle": "HTTP/2 | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:description": "", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "361afc33-b3ee-457b-b2e1-0a2d328ca4bd", "sourceURL": "https://ktor.io/docs/server-http2.html", "url": "https://ktor.io/docs/server-http2.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using HTTP/2 in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have a valid SSL certificate for HTTP/2 support.\n\nUse the appropriate ALPN implementation for your server engine.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-http2.html", "title": "HTTP/2", "description": "This page covers the implementation and configuration of HTTP/2 in Ktor, including requirements for SSL certificates and ALPN implementations for Jetty and Netty engines.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:24:28", "type": "best_practices", "page_metadata": {"language": "en-US", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.998152871", "twitter:site": "@JetBrainsKtor", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-http2.html", "ogDescription": "", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-http2.html", "twitter:creator": "@JetBrainsKtor", "og:title": "HTTP/2 | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "HTTP/2 | Ktor", "title": "HTTP/2 | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogTitle": "HTTP/2 | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "build-number": "707", "twitter:description": "", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "361afc33-b3ee-457b-b2e1-0a2d328ca4bd", "sourceURL": "https://ktor.io/docs/server-http2.html", "url": "https://ktor.io/docs/server-http2.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Sessions is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Sessions in ktor.\n\n# Server Plugin Sessions\n\nThe Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo enable support for sessions, you need to include the `ktor-server-sessions` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-sessions:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-sessions:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-sessions-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install Sessions\n\nTo install the `Sessions` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `Sessions`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.sessions.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Sessions)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.sessions.*\n// ...\nfun Application.module() {\n    install(Sessions)\n    // ...\n}\n```\n\n## Session configuration overview\n\nTo configure the `Sessions` plugin, you need to perform the following steps:\n\n1. Create a data class: before configuring a session, you need to create a data class for storing session data.\n\n2. Choose how to pass data between the server and client: using cookies or a custom header. Cookies suit better for plain HTML applications, while custom headers are intended for APIs.\n\n3. Choose where to store the session payload: on the client or server. You can pass the serialized session's data to the client using a cookie/header value or store the payload on the server and pass only a session identifier.\n\n4. Protect session data: to protect sensitive session data passed to the client, you need to sign and encrypt the session's payload.\n\n## Create a data class\n\nBefore configuring a session, you need to create a data class for storing session data. For example, the `UserSession` class below will be used to store the session ID and the number of page views:\n\n```\n@Serializable\ndata class UserSession(val id: String, val count: Int)\n```\n\n## Pass session data: Cookie vs Header\n\nTo pass session data using cookies, call the `cookie` function with the specified name and data class inside the `install(Sessions)` block:\n\n```\ninstall(Sessions) {\n    cookie<UserSession>(\"user_session\")\n}\n```\n\nIn the example above, session data will be passed to the client using the `user_session` attribute added to the `Set-Cookie` header. You can configure other cookie attributes by passing them inside the `cookie` block. For example, the code snippet below shows how to specify a cookie's path and expiration time:\n\n```\ninstall(Sessions) {\n    cookie<UserSession>(\"user_session\") {\n        cookie.path = \"/\"\n        cookie.maxAgeInSeconds = 10\n    }\n}\n```\n\nIf the required attribute is not exposed explicitly, use the `extensions` property. For example, you can pass the `SameSite` attribute in the following way:\n\n```\ninstall(Sessions) {\n    cookie<UserSession>(\"user_session\") {\n        cookie.extensions[\"SameSite\"] = \"lax\"\n    }\n}\n}\n```\n\nTo learn more about available configurations settings, see [CookieConfiguration](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-sessions/io.ktor.server.sessions/-cookie-configuration/index.html).\n\n> ### tip\n>\n> Before deploying your application to production, make sure the `secure` property is set to `true`. This enables transferring cookies via a secure connection only and protects session data from HTTPS downgrade attacks.\n\nTo pass session data using a custom header, call the `header` function with the specified name and data class inside the `install(Sessions)` block:\n\n```\ninstall(Sessions) {\n    header<CartSession>(\"cart_session\")\n}\n```\n\nIn the example above, session data will be passed to the client using the `cart_session` custom header. On the client side, you need to append this header to each request to get session data.\n\n> ### tip\n>\n> If you use the CORS plugin to handle cross-origin requests, add your custom header to the CORS configuration as follows:\n>\n> ```\n> install(CORS) {\n>     allowHeader(\"cart_session\")\n>     exposeHeader(\"cart_session\")\n> }\n> ```\n\n## Store session payload: Client vs Server\n\nIn Ktor, you can manage the session data in two ways:\n\n- Pass session data between the client and server.\n\nIf you pass only the session name to the cookie or header function, session data will be passed between the client and server. In this case, you need to sign and encrypt the session's payload to protect sensitive session data passed to the client.\n\n- Store session data on the server and pass only a session ID between the client and server.\n\nIn such a case, you can choose where to store the payload on the server. For example, you can store session data in memory, in a specified folder, or you can implement your own custom storage.\n\n## Store session payload on server\n\nKtor allows you to store session data on the server and pass only a session ID between the server and the client. In this case, you can choose where to keep the payload on the server.\n\n### In-memory storage\n\nSessionStorageMemory enables storing a session's content in memory. This storage keeps data while the server is running and discards information once the server stops. For example, you can store cookies in the server memory as follows:\n\n```\ncookie<CartSession>(\"cart_session\", SessionStorageMemory()) {\n}\n```\n\n> ### tip\n>\n> Note that `SessionStorageMemory` is intended for development only.\n\n### Directory storage\n\ndirectorySessionStorage can be used to store a session's data in a file under the specified directory. For example, to store session data in a file under the `build/.sessions` directory, create the `directorySessionStorage` in this way:\n\n```\nheader<CartSession>(\"cart_session\", directorySessionStorage(File(\"build/.sessions\"))) {\n}\n```\n\n### Custom storage\n\nKtor provides the SessionStorage interface that allows you to implement a custom storage.\n\n```\ninterface SessionStorage {\n    suspend fun invalidate(id: String)\n    suspend fun write(id: String, value: String)\n    suspend fun read(id: String): String\n}\n```\n\nAll three functions are suspending. You can use SessionStorageMemory as a reference.\n\n## Protect session data\n\n### Sign session data\n\nSigning session data prevents modifying a session's content but allows users to see this content. To sign a session, pass a sign key to the `SessionTransportTransformerMessageAuthentication` constructor and pass this instance to the `transform` function:\n\n```\ninstall(Sessions) {\n    val secretSignKey = hex(\"6819b57a326945c1968f45236589\")\n    cookie<CartSession>(\"cart_session\", SessionStorageMemory()) {\n        cookie.path = \"/\"\n        transform(SessionTransportTransformerMessageAuthentication(secretSignKey))\n    }\n}\n```\n\n### Sign and encrypt session data\n\nSigning and encrypting session data prevents reading and modifying a session's content. To sign and encrypt a session, pass a sign/encrypt keys to the `SessionTransportTransformerEncrypt` constructor and pass this instance to the `transform` function:\n\n```\ninstall(Sessions) {\n    val secretEncryptKey = hex(\"00112233445566778899aabbccddeeff\")\n    val secretSignKey = hex(\"6819b57a326945c1968f45236589\")\n    cookie<UserSession>(\"user_session\") {\n        cookie.path = \"/\"\n        cookie.maxAgeInSeconds = 10\n        transform(SessionTransportTransformerEncrypt(secretEncryptKey, secretSignKey))\n    }\n}\n```\n\n> ### note\n>\n> Note that the encryption method has been updated in Ktor version `3.0.0`. If you are migrating from an earlier version, use the `backwardCompatibleRead` property in the constructor of `SessionTransportTransformerEncrypt` to ensure compatibility with existing sessions.\n\nBy default, `SessionTransportTransformerEncrypt` uses the `AES` and `HmacSHA256` algorithms, which can be changed.\n\n> ### tip\n>\n> Note that signing/encryption keys shouldn't be specified in code. You can use a custom group in the configuration file to store signing/encryption keys and initialize them using environment variables.\n\n## Get and set session content\n\nTo set the session content for a specific route, use the `call.sessions` property. The `set` method allows you to create a new session instance:\n\n```\nget(\"/login\") {\n    call.sessions.set(UserSession(id = \"123abc\", count = 0))\n    call.respondRedirect(\"/user\")\n}\n```\n\nTo get the session content, you can call `get` receiving one of the registered session types as type parameter:\n\n```\nget(\"/user\") {\n    val userSession = call.sessions.get<UserSession>()\n    if (userSession != null) {\n    }\n}\n```\n\nTo modify a session, for example, to increment a counter, you need to call the `copy` method of the data class:\n\n```\nget(\"/user\") {\n    val userSession = call.sessions.get<UserSession>()\n    if (userSession != null) {\n        call.sessions.set(userSession.copy(count = userSession.count + 1))\n        call.respondText(\"Session ID is ${userSession.id}. Reload count is ${userSession.count}.\")\n    } else {\n        call.respondText(\"Session doesn't exist or is expired.\")\n    }\n}\n```\n\nWhen you need to clear a session for any reason (for example, when a user logs out), call the `clear` function:\n\n```\nget(\"/logout\") {\n    call.sessions.clear<UserSession>()\n    call.respondRedirect(\"/user\")\n}\n```\n\n## Examples\n\nThe runnable examples below demonstrate how to use the `Sessions` plugin:\n\n- [session-cookie-client](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/session-cookie-client) shows how to pass signed and encrypted session payload to the client using cookies.\n\n- [session-cookie-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/session-cookie-server) shows how to keep session payload in a server memory and pass a signed session ID to the client using cookies.\n\n- [session-header-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/session-header-server) shows how to keep session payload on a server in a directory storage and pass a signed session ID to the client using a custom header.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "overview", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo enable support for sessions, you need to include the `ktor-server-sessions` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-sessions:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-sessions:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-sessions-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install sessions in ktor?\n\nAssistant: To install sessions in ktor, here's what you do:\nTo install the `Sessions` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `Sessions`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.sessions.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Sessions)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.sessions.*\n// ...\nfun Application.module() {\n    install(Sessions)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I session configuration overview in ktor?\n\nAssistant: To session configuration overview in ktor, here's what you do:\nTo configure the `Sessions` plugin, you need to perform the following steps:\n\n1. Create a data class: before configuring a session, you need to create a data class for storing session data.\n\n2. Choose how to pass data between the server and client: using cookies or a custom header. Cookies suit better for plain HTML applications, while custom headers are intended for APIs.\n\n3. Choose where to store the session payload: on the client or server. You can pass the serialized session's data to the client using a cookie/header value or store the payload on the server and pass only a session identifier.\n\n4. Protect session data: to protect sensitive session data passed to the client, you need to sign and encrypt the session's payload..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a data class in ktor?\n\nAssistant: To create a data class in ktor, here's what you do:\nBefore configuring a session, you need to create a data class for storing session data. For example, the `UserSession` class below will be used to store the session ID and the number of page views:\n\n```\n@Serializable\ndata class UserSession(val id: String, val count: Int)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I pass session data: cookie vs header in ktor?\n\nAssistant: To pass session data: cookie vs header in ktor, here's what you do:\nTo pass session data using cookies, call the `cookie` function with the specified name and data class inside the `install(Sessions)` block:\n\n```\ninstall(Sessions) {\n    cookie<UserSession>(\"user_session\")\n}\n```\n\nIn the example above, session data will be passed to the client using the `user_session` attribute added to the `Set-Cookie` header. You can configure other cookie attributes by passing them inside the `cookie` block. For example, the code snippet below shows how to specify a cookie's path and expiration time:\n\n```\ninstall(Sessions) {\n    cookie<UserSession>(\"user_session\") {\n        cookie.path = \"/\"\n        cookie.maxAgeInSeconds = 10\n    }\n}\n```\n\nIf the required attribute is not exposed explicitly, use the `extensions` property. For example, you can pass the `SameSite` attribute in the following way:\n\n```\ninstall(Sessions) {\n    cookie<UserSession>(\"user_session\") {\n        cookie.extensions[\"SameSite\"] = \"lax\"\n    }\n}\n}\n```\n\nTo learn more about available configurations settings, see [CookieConfiguration](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-sessions/io.ktor.server.sessions/-cookie-configuration/index.html).\n\n> ### tip\n>\n> Before deploying your application to production, make sure the `secure` property is set to `true`. This enables transferring cookies via a secure connection only and protects session data from HTTPS downgrade attacks.\n\nTo pass session data using a custom header, call the `header` function with the specified name and data class inside the `install(Sessions)` block:\n\n```\ninstall(Sessions) {\n    header<CartSession>(\"cart_session\")\n}\n```\n\nIn the example above, session data will be passed to the client using the `cart_session` custom header. On the client side, you need to append this header to each request to get session data.\n\n> ### tip\n>\n> If you use the CORS plugin to handle cross-origin requests, add your custom header to the CORS configuration as follows:\n>\n> ```\n> install(CORS) {\n>     allowHeader(\"cart_session\")\n>     exposeHeader(\"cart_session\")\n> }\n> ```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I store session payload: client vs server in ktor?\n\nAssistant: To store session payload: client vs server in ktor, here's what you do:\nIn Ktor, you can manage the session data in two ways:\n\n- Pass session data between the client and server.\n\nIf you pass only the session name to the cookie or header function, session data will be passed between the client and server. In this case, you need to sign and encrypt the session's payload to protect sensitive session data passed to the client.\n\n- Store session data on the server and pass only a session ID between the client and server.\n\nIn such a case, you can choose where to store the payload on the server. For example, you can store session data in memory, in a specified folder, or you can implement your own custom storage..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I store session payload on server in ktor?\n\nAssistant: To store session payload on server in ktor, here's what you do:\nKtor allows you to store session data on the server and pass only a session ID between the server and the client. In this case, you can choose where to keep the payload on the server.\n\n### In-memory storage\n\nSessionStorageMemory enables storing a session's content in memory. This storage keeps data while the server is running and discards information once the server stops. For example, you can store cookies in the server memory as follows:\n\n```\ncookie<CartSession>(\"cart_session\", SessionStorageMemory()) {\n}\n```\n\n> ### tip\n>\n> Note that `SessionStorageMemory` is intended for development only.\n\n### Directory storage\n\ndirectorySessionStorage can be used to store a session's data in a file under the specified directory. For example, to store session data in a file under the `build/.sessions` directory, create the `directorySessionStorage` in this way:\n\n```\nheader<CartSession>(\"cart_session\", directorySessionStorage(File(\"build/.sessions\"))) {\n}\n```\n\n### Custom storage\n\nKtor provides the SessionStorage interface that allows you to implement a custom storage.\n\n```\ninterface SessionStorage {\n    suspend fun invalidate(id: String)\n    suspend fun write(id: String, value: String)\n    suspend fun read(id: String): String\n}\n```\n\nAll three functions are suspending. You can use SessionStorageMemory as a reference..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I protect session data in ktor?\n\nAssistant: To protect session data in ktor, here's what you do:\n### Sign session data\n\nSigning session data prevents modifying a session's content but allows users to see this content. To sign a session, pass a sign key to the `SessionTransportTransformerMessageAuthentication` constructor and pass this instance to the `transform` function:\n\n```\ninstall(Sessions) {\n    val secretSignKey = hex(\"6819b57a326945c1968f45236589\")\n    cookie<CartSession>(\"cart_session\", SessionStorageMemory()) {\n        cookie.path = \"/\"\n        transform(SessionTransportTransformerMessageAuthentication(secretSignKey))\n    }\n}\n```\n\n### Sign and encrypt session data\n\nSigning and encrypting session data prevents reading and modifying a session's content. To sign and encrypt a session, pass a sign/encrypt keys to the `SessionTransportTransformerEncrypt` constructor and pass this instance to the `transform` function:\n\n```\ninstall(Sessions) {\n    val secretEncryptKey = hex(\"00112233445566778899aabbccddeeff\")\n    val secretSignKey = hex(\"6819b57a326945c1968f45236589\")\n    cookie<UserSession>(\"user_session\") {\n        cookie.path = \"/\"\n        cookie.maxAgeInSeconds = 10\n        transform(SessionTransportTransformerEncrypt(secretEncryptKey, secretSignKey))\n    }\n}\n```\n\n> ### note\n>\n> Note that the encryption method has been updated in Ktor version `3.0.0`. If you are migrating from an earlier version, use the `backwardCompatibleRead` property in the constructor of `SessionTransportTransformerEncrypt` to ensure compatibility with existing sessions.\n\nBy default, `SessionTransportTransformerEncrypt` uses the `AES` and `HmacSHA256` algorithms, which can be changed.\n\n> ### tip\n>\n> Note that signing/encryption keys shouldn't be specified in code. You can use a custom group in the configuration file to store signing/encryption keys and initialize them using environment variables..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I get and set session content in ktor?\n\nAssistant: To get and set session content in ktor, here's what you do:\nTo set the session content for a specific route, use the `call.sessions` property. The `set` method allows you to create a new session instance:\n\n```\nget(\"/login\") {\n    call.sessions.set(UserSession(id = \"123abc\", count = 0))\n    call.respondRedirect(\"/user\")\n}\n```\n\nTo get the session content, you can call `get` receiving one of the registered session types as type parameter:\n\n```\nget(\"/user\") {\n    val userSession = call.sessions.get<UserSession>()\n    if (userSession != null) {\n    }\n}\n```\n\nTo modify a session, for example, to increment a counter, you need to call the `copy` method of the data class:\n\n```\nget(\"/user\") {\n    val userSession = call.sessions.get<UserSession>()\n    if (userSession != null) {\n        call.sessions.set(userSession.copy(count = userSession.count + 1))\n        call.respondText(\"Session ID is ${userSession.id}. Reload count is ${userSession.count}.\")\n    } else {\n        call.respondText(\"Session doesn't exist or is expired.\")\n    }\n}\n```\n\nWhen you need to clear a session for any reason (for example, when a user logs out), call the `clear` function:\n\n```\nget(\"/logout\") {\n    call.sessions.clear<UserSession>()\n    call.respondRedirect(\"/user\")\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I examples in ktor?\n\nAssistant: To examples in ktor, here's what you do:\nThe runnable examples below demonstrate how to use the `Sessions` plugin:\n\n- [session-cookie-client](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/session-cookie-client) shows how to pass signed and encrypted session payload to the client using cookies.\n\n- [session-cookie-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/session-cookie-server) shows how to keep session payload in a server memory and pass a signed session ID to the client using cookies.\n\n- [session-header-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/session-header-server) shows how to keep session payload on a server in a directory storage and pass a signed session ID to the client using a custom header..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Sessions in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-sessions:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies - gradle (kotlin), which is an important aspect of server plugin sessions.\n\n**Add dependencies - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-sessions:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies - gradle (groovy), which is an important aspect of server plugin sessions.\n\n**Add dependencies - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-sessions-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies - maven, which is an important aspect of server plugin sessions.\n\n**Install Sessions - embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.sessions.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Sessions)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install sessions - embeddedserver, which is an important aspect of server plugin sessions.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "code_examples", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Sessions in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBefore deploying your application to production, make sure the secure property is set to true. This enables transferring cookies via a secure connection only and protects session data from HTTPS downgrade attacks.\n\nNote that SessionStorageMemory is intended for development only.\n\nNote that signing/encryption keys shouldn't be specified in code. You can use a custom group in the configuration file to store signing/encryption keys and initialize them using environment variables.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-sessions.html", "title": "Server Plugin Sessions", "description": "The Sessions plugin provides a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:25:07", "type": "best_practices", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:04.599346909", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Sessions | Ktor", "og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "Sessions | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Sessions | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Sessions | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-sessions.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "49a690d9-02a3-405a-807f-8fa8e5be5ad2", "sourceURL": "https://ktor.io/docs/server-sessions.html", "url": "https://ktor.io/docs/server-sessions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin WebSockets in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin WebSockets in Ktor Server in ktor.\n\n# Server Plugin WebSockets in Ktor Server\n\nThis page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.Here's a quick rundown of what this is about:\n\n## Introduction\n\nWebSocket is a protocol which provides a full-duplex communication session between the user's browser and a server over a single TCP connection. It is particularly useful for creating applications that require real-time data transfer from and to the server.\n\nKtor supports the WebSocket protocol both on the server-, and the client-side.\n\nKtor allows you to:\n\n- Configure basic WebSocket settings, such as frame size, a ping period, and so on.\n- Handle a WebSocket session for exchanging messages between the server and client.\n- Add WebSocket extensions. For example, you can use the Deflate extension or implement a custom extension.\n\n## Add dependencies\n\nTo use WebSockets, you need to include the ktor-server-websockets artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-websockets:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-websockets:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-websockets-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install WebSockets\n\nTo install the WebSockets plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install WebSockets...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.websocket.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(WebSockets)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.websocket.*\n// ...\nfun Application.module() {\n    install(WebSockets)\n    // ...\n}\n```\n\n## Configure WebSockets\n\nOptionally, you can configure the plugin inside the install block by passing WebSocketOptions:\n\n- Use the pingPeriod property to specify the duration between pings.\n- Use the timeout property to set a timeout after which the connection to be closed.\n- Use the maxFrameSize property to set a maximum Frame that could be received or sent.\n- Use the masking property to specify whether masking is enabled.\n- Use the contentConverter property to set a converter for serialization/deserialization.\n\n```\ninstall(WebSockets) {\n    pingPeriod = 15.seconds\n    timeout = 15.seconds\n    maxFrameSize = Long.MAX_VALUE\n    masking = false\n}\n```\n\n## Handle WebSockets sessions\n\nOnce you have installed and configured the WebSockets plugin, you can define an endpoint to handle a Websocket session. To define a WebSocket endpoint on a server, call the webSocket function inside the routing block:\n```\nrouting {\n    webSocket(\"/echo\") {\n       // Handle a WebSocket session\n    }\n}\n```\nIn this example, the server accepts WebSocket requests to ws://localhost:8080/echo when a default configuration is used.\n\nInside the webSocket block, you define the handler for the WebSocket session, which is represented by the DefaultWebSocketServerSession class. The following functions and properties are available within the block:\n\n- Use the send function to send text content to the client.\n- Use the incoming and outgoing properties to access the channels for receiving and sending WebSocket frames. A frame is represented by the Frame class.\n- Use the close function to send a close frame with the specified reason.\n\n## Example: Handle a single session\n\nThe example below shows how to create the echo WebSocket endpoint to handle a session with one client:\n```\nrouting {\n    webSocket(\"/echo\") {\n        send(\"Please enter your name\")\n        for (frame in incoming) {\n            frame as? Frame.Text ?: continue\n            val receivedText = frame.readText()\n            if (receivedText.equals(\"bye\", ignoreCase = true)) {\n                close(CloseReason(CloseReason.Codes.NORMAL, \"Client said BYE\"))\n            } else {\n                send(Frame.Text(\"Hi, $receivedText!\"))\n            }\n        }\n    }\n}\n```\n\n## Example: Handle multiple sessions\n\nTo efficiently manage multiple WebSocket sessions and handle broadcasting, you can utilize Kotlin's SharedFlow. This approach provides a scalable and concurrency-friendly method for managing WebSocket communications. Here's how to implement this pattern:\n\n1. Define a SharedFlow for broadcasting messages:\n```\nval messageResponseFlow = MutableSharedFlow<MessageResponse>()\nval sharedFlow = messageResponseFlow.asSharedFlow()\n```\n2. In your WebSocket route, implement the broadcasting and message handling logic:\n```\nwebSocket(\"/ws\") {\n    send(\"You are connected to WebSocket!\")\n\n    val job = launch {\n        sharedFlow.collect { message ->\n            send(message.message)\n        }\n    }\n\n    runCatching {\n        incoming.consumeEach { frame ->\n            if (frame is Frame.Text) {\n                val receivedText = frame.readText()\n                val messageResponse = MessageResponse(receivedText)\n                messageResponseFlow.emit(messageResponse)\n            }\n        }\n    }.onFailure { exception ->\n        println(\"WebSocket exception: ${exception.localizedMessage}\")\n    }.also {\n        job.cancel()\n    }\n}\n```\n\n## The WebSocket API and Ktor\n\nThe standard events from the WebSocket API map to Ktor in the following way:\n\n- onConnect happens at the start of the block.\n- onMessage happens after successfully reading a message (for example, with incoming.receive()) or using suspended iteration with for(frame in incoming).\n- onClose happens when the incoming channel is closed. That would complete the suspended iteration, or throw a ClosedReceiveChannelException when trying to receive a message.\n- onError is equivalent to other exceptions.\n\nIn both onClose and onError, the closeReason property is set.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-websockets.html", "title": "Server Plugin WebSockets in Ktor Server", "description": "This page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:41", "type": "overview", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-websockets.html", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "WebSockets in Ktor Server | Ktor", "twitter:card": "summary_large_image", "twitter:title": "WebSockets in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.728365618", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-websockets.html", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "WebSockets in Ktor Server | Ktor", "title": "WebSockets in Ktor Server | Ktor Documentation", "og:type": "website", "scrapeId": "b534d336-2ca5-46e4-b5e1-f92abaca591f", "sourceURL": "https://ktor.io/docs/server-websockets.html", "url": "https://ktor.io/docs/server-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I introduction in ktor?\n\nAssistant: To introduction in ktor, here's what you do:\nWebSocket is a protocol which provides a full-duplex communication session between the user's browser and a server over a single TCP connection. It is particularly useful for creating applications that require real-time data transfer from and to the server.\n\nKtor supports the WebSocket protocol both on the server-, and the client-side.\n\nKtor allows you to:\n\n- Configure basic WebSocket settings, such as frame size, a ping period, and so on.\n- Handle a WebSocket session for exchanging messages between the server and client.\n- Add WebSocket extensions. For example, you can use the Deflate extension or implement a custom extension..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websockets.html", "title": "Server Plugin WebSockets in Ktor Server", "description": "This page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:41", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-websockets.html", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "WebSockets in Ktor Server | Ktor", "twitter:card": "summary_large_image", "twitter:title": "WebSockets in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.728365618", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-websockets.html", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "WebSockets in Ktor Server | Ktor", "title": "WebSockets in Ktor Server | Ktor Documentation", "og:type": "website", "scrapeId": "b534d336-2ca5-46e4-b5e1-f92abaca591f", "sourceURL": "https://ktor.io/docs/server-websockets.html", "url": "https://ktor.io/docs/server-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use WebSockets, you need to include the ktor-server-websockets artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-websockets:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-websockets:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-websockets-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websockets.html", "title": "Server Plugin WebSockets in Ktor Server", "description": "This page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:41", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-websockets.html", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "WebSockets in Ktor Server | Ktor", "twitter:card": "summary_large_image", "twitter:title": "WebSockets in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.728365618", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-websockets.html", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "WebSockets in Ktor Server | Ktor", "title": "WebSockets in Ktor Server | Ktor Documentation", "og:type": "website", "scrapeId": "b534d336-2ca5-46e4-b5e1-f92abaca591f", "sourceURL": "https://ktor.io/docs/server-websockets.html", "url": "https://ktor.io/docs/server-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install websockets in ktor?\n\nAssistant: To install websockets in ktor, here's what you do:\nTo install the WebSockets plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install WebSockets...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.websocket.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(WebSockets)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.websocket.*\n// ...\nfun Application.module() {\n    install(WebSockets)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websockets.html", "title": "Server Plugin WebSockets in Ktor Server", "description": "This page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:41", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-websockets.html", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "WebSockets in Ktor Server | Ktor", "twitter:card": "summary_large_image", "twitter:title": "WebSockets in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.728365618", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-websockets.html", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "WebSockets in Ktor Server | Ktor", "title": "WebSockets in Ktor Server | Ktor Documentation", "og:type": "website", "scrapeId": "b534d336-2ca5-46e4-b5e1-f92abaca591f", "sourceURL": "https://ktor.io/docs/server-websockets.html", "url": "https://ktor.io/docs/server-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure websockets in ktor?\n\nAssistant: To configure websockets in ktor, here's what you do:\nOptionally, you can configure the plugin inside the install block by passing WebSocketOptions:\n\n- Use the pingPeriod property to specify the duration between pings.\n- Use the timeout property to set a timeout after which the connection to be closed.\n- Use the maxFrameSize property to set a maximum Frame that could be received or sent.\n- Use the masking property to specify whether masking is enabled.\n- Use the contentConverter property to set a converter for serialization/deserialization.\n\n```\ninstall(WebSockets) {\n    pingPeriod = 15.seconds\n    timeout = 15.seconds\n    maxFrameSize = Long.MAX_VALUE\n    masking = false\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websockets.html", "title": "Server Plugin WebSockets in Ktor Server", "description": "This page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:41", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-websockets.html", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "WebSockets in Ktor Server | Ktor", "twitter:card": "summary_large_image", "twitter:title": "WebSockets in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.728365618", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-websockets.html", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "WebSockets in Ktor Server | Ktor", "title": "WebSockets in Ktor Server | Ktor Documentation", "og:type": "website", "scrapeId": "b534d336-2ca5-46e4-b5e1-f92abaca591f", "sourceURL": "https://ktor.io/docs/server-websockets.html", "url": "https://ktor.io/docs/server-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I handle websockets sessions in ktor?\n\nAssistant: To handle websockets sessions in ktor, here's what you do:\nOnce you have installed and configured the WebSockets plugin, you can define an endpoint to handle a Websocket session. To define a WebSocket endpoint on a server, call the webSocket function inside the routing block:\n```\nrouting {\n    webSocket(\"/echo\") {\n       // Handle a WebSocket session\n    }\n}\n```\nIn this example, the server accepts WebSocket requests to ws://localhost:8080/echo when a default configuration is used.\n\nInside the webSocket block, you define the handler for the WebSocket session, which is represented by the DefaultWebSocketServerSession class. The following functions and properties are available within the block:\n\n- Use the send function to send text content to the client.\n- Use the incoming and outgoing properties to access the channels for receiving and sending WebSocket frames. A frame is represented by the Frame class.\n- Use the close function to send a close frame with the specified reason..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websockets.html", "title": "Server Plugin WebSockets in Ktor Server", "description": "This page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:41", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-websockets.html", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "WebSockets in Ktor Server | Ktor", "twitter:card": "summary_large_image", "twitter:title": "WebSockets in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.728365618", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-websockets.html", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "WebSockets in Ktor Server | Ktor", "title": "WebSockets in Ktor Server | Ktor Documentation", "og:type": "website", "scrapeId": "b534d336-2ca5-46e4-b5e1-f92abaca591f", "sourceURL": "https://ktor.io/docs/server-websockets.html", "url": "https://ktor.io/docs/server-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example: handle a single session in ktor?\n\nAssistant: To example: handle a single session in ktor, here's what you do:\nThe example below shows how to create the echo WebSocket endpoint to handle a session with one client:\n```\nrouting {\n    webSocket(\"/echo\") {\n        send(\"Please enter your name\")\n        for (frame in incoming) {\n            frame as? Frame.Text ?: continue\n            val receivedText = frame.readText()\n            if (receivedText.equals(\"bye\", ignoreCase = true)) {\n                close(CloseReason(CloseReason.Codes.NORMAL, \"Client said BYE\"))\n            } else {\n                send(Frame.Text(\"Hi, $receivedText!\"))\n            }\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websockets.html", "title": "Server Plugin WebSockets in Ktor Server", "description": "This page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:41", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-websockets.html", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "WebSockets in Ktor Server | Ktor", "twitter:card": "summary_large_image", "twitter:title": "WebSockets in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.728365618", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-websockets.html", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "WebSockets in Ktor Server | Ktor", "title": "WebSockets in Ktor Server | Ktor Documentation", "og:type": "website", "scrapeId": "b534d336-2ca5-46e4-b5e1-f92abaca591f", "sourceURL": "https://ktor.io/docs/server-websockets.html", "url": "https://ktor.io/docs/server-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example: handle multiple sessions in ktor?\n\nAssistant: To example: handle multiple sessions in ktor, here's what you do:\nTo efficiently manage multiple WebSocket sessions and handle broadcasting, you can utilize Kotlin's SharedFlow. This approach provides a scalable and concurrency-friendly method for managing WebSocket communications. Here's how to implement this pattern:\n\n1. Define a SharedFlow for broadcasting messages:\n```\nval messageResponseFlow = MutableSharedFlow<MessageResponse>()\nval sharedFlow = messageResponseFlow.asSharedFlow()\n```\n2. In your WebSocket route, implement the broadcasting and message handling logic:\n```\nwebSocket(\"/ws\") {\n    send(\"You are connected to WebSocket!\")\n\n    val job = launch {\n        sharedFlow.collect { message ->\n            send(message.message)\n        }\n    }\n\n    runCatching {\n        incoming.consumeEach { frame ->\n            if (frame is Frame.Text) {\n                val receivedText = frame.readText()\n                val messageResponse = MessageResponse(receivedText)\n                messageResponseFlow.emit(messageResponse)\n            }\n        }\n    }.onFailure { exception ->\n        println(\"WebSocket exception: ${exception.localizedMessage}\")\n    }.also {\n        job.cancel()\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websockets.html", "title": "Server Plugin WebSockets in Ktor Server", "description": "This page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:41", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-websockets.html", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "WebSockets in Ktor Server | Ktor", "twitter:card": "summary_large_image", "twitter:title": "WebSockets in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.728365618", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-websockets.html", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "WebSockets in Ktor Server | Ktor", "title": "WebSockets in Ktor Server | Ktor Documentation", "og:type": "website", "scrapeId": "b534d336-2ca5-46e4-b5e1-f92abaca591f", "sourceURL": "https://ktor.io/docs/server-websockets.html", "url": "https://ktor.io/docs/server-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I the websocket api and ktor in ktor?\n\nAssistant: To the websocket api and ktor in ktor, here's what you do:\nThe standard events from the WebSocket API map to Ktor in the following way:\n\n- onConnect happens at the start of the block.\n- onMessage happens after successfully reading a message (for example, with incoming.receive()) or using suspended iteration with for(frame in incoming).\n- onClose happens when the incoming channel is closed. That would complete the suspended iteration, or throw a ClosedReceiveChannelException when trying to receive a message.\n- onError is equivalent to other exceptions.\n\nIn both onClose and onError, the closeReason property is set..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websockets.html", "title": "Server Plugin WebSockets in Ktor Server", "description": "This page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:41", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-websockets.html", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "WebSockets in Ktor Server | Ktor", "twitter:card": "summary_large_image", "twitter:title": "WebSockets in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.728365618", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-websockets.html", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "WebSockets in Ktor Server | Ktor", "title": "WebSockets in Ktor Server | Ktor Documentation", "og:type": "website", "scrapeId": "b534d336-2ca5-46e4-b5e1-f92abaca591f", "sourceURL": "https://ktor.io/docs/server-websockets.html", "url": "https://ktor.io/docs/server-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin WebSockets in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-websockets:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies - gradle (kotlin), which is an important aspect of server plugin websockets in ktor server.\n\n**Add dependencies - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-websockets:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies - gradle (groovy), which is an important aspect of server plugin websockets in ktor server.\n\n**Add dependencies - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-websockets-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies - maven, which is an important aspect of server plugin websockets in ktor server.\n\n**Install WebSockets - embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.websocket.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(WebSockets)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install websockets - embeddedserver, which is an important aspect of server plugin websockets in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-websockets.html", "title": "Server Plugin WebSockets in Ktor Server", "description": "This page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:41", "type": "code_examples", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-websockets.html", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "WebSockets in Ktor Server | Ktor", "twitter:card": "summary_large_image", "twitter:title": "WebSockets in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.728365618", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-websockets.html", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "WebSockets in Ktor Server | Ktor", "title": "WebSockets in Ktor Server | Ktor Documentation", "og:type": "website", "scrapeId": "b534d336-2ca5-46e4-b5e1-f92abaca591f", "sourceURL": "https://ktor.io/docs/server-websockets.html", "url": "https://ktor.io/docs/server-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin WebSockets in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo learn about WebSocket support on the client-side, see the WebSockets client plugin.\n\nFor one-way communication sessions, consider using Server-Sent Events (SSE). SSE is particularly useful in cases where the server needs to send event-based updates to a client.\n\nTo get information about the client (such as the client's IP address), use the call property. Learn about General request information.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-websockets.html", "title": "Server Plugin WebSockets in Ktor Server", "description": "This page covers the implementation and configuration of WebSockets in Ktor Server, including how to handle WebSocket sessions and manage dependencies.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:25:41", "type": "best_practices", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-websockets.html", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogTitle": "WebSockets in Ktor Server | Ktor", "twitter:card": "summary_large_image", "twitter:title": "WebSockets in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.728365618", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-websockets.html", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "WebSockets in Ktor Server | Ktor", "title": "WebSockets in Ktor Server | Ktor Documentation", "og:type": "website", "scrapeId": "b534d336-2ca5-46e4-b5e1-f92abaca591f", "sourceURL": "https://ktor.io/docs/server-websockets.html", "url": "https://ktor.io/docs/server-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Webjars is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Webjars in ktor.\n\n# Server Plugin Webjars\n\nThe Webjars plugin enables serving the client-side libraries provided by WebJars, allowing you to package your assets such as JavaScript and CSS libraries as part of your fat JAR.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo enable Webjars, you need to include the following artifacts in the build script:\n\n- Add the ktor-server-webjars dependency:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-webjars:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-webjars:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-webjars-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Add a dependency for a required client-side library. The example below shows how to add a Bootstrap artifact:\n\nGradle (Kotlin)\n```\nimplementation(\"org.webjars:bootstrap:$bootstrap_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"org.webjars:bootstrap:$bootstrap_version\"\n```\n\nMaven\n```\n<dependency>\n      <groupId>org.webjars</groupId>\n      <artifactId>bootstrap</artifactId>\n      <version>${bootstrap_version}</version>\n</dependency>\n```\n\nYou can replace $bootstrap_version with the required version of the bootstrap artifact, for example, 5.2.3.\n\n## Install Webjars\n\nTo install the Webjars plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install Webjars...\n\n- ... inside the embeddedServer function call.\n\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.webjars.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Webjars)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.webjars.*\n// ...\nfun Application.module() {\n    install(Webjars)\n    // ...\n}\n```\n\n## Configure Webjars\n\nBy default, Webjars serves WebJars assets on the /webjars path. The example below shows how to change this and serve any WebJars assets on the /assets path:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.webjars.*\n\nfun Application.module() {\n    install(Webjars) {\n        path = \"assets\"\n    }\n}\n```\nFor instance, if you've installed the org.webjars:bootstrap dependency, you can add bootstrap.css as follows:\n```\n<head>\n    <link rel=\"stylesheet\" href=\"/assets/bootstrap/bootstrap.css\">\n</head>\n```\nNote that Webjars allows you to change the versions of the dependencies without changing the path used to load them.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-webjars.html", "title": "Server Plugin Webjars", "description": "The Webjars plugin enables serving the client-side libraries provided by WebJars, allowing you to package your assets such as JavaScript and CSS libraries as part of your fat JAR.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:27:16", "type": "overview", "page_metadata": {"ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:07.028375611", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Webjars | Ktor", "build-number": "707", "og:title": "Webjars | Ktor", "og:type": "website", "title": "Webjars | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:title": "Webjars | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "a7447554-9666-47bf-a70d-aae088b728be", "sourceURL": "https://ktor.io/docs/server-webjars.html", "url": "https://ktor.io/docs/server-webjars.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo enable Webjars, you need to include the following artifacts in the build script:\n\n- Add the ktor-server-webjars dependency:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-webjars:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-webjars:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-webjars-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Add a dependency for a required client-side library. The example below shows how to add a Bootstrap artifact:\n\nGradle (Kotlin)\n```\nimplementation(\"org.webjars:bootstrap:$bootstrap_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"org.webjars:bootstrap:$bootstrap_version\"\n```\n\nMaven\n```\n<dependency>\n      <groupId>org.webjars</groupId>\n      <artifactId>bootstrap</artifactId>\n      <version>${bootstrap_version}</version>\n</dependency>\n```\n\nYou can replace $bootstrap_version with the required version of the bootstrap artifact, for example, 5.2.3..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-webjars.html", "title": "Server Plugin Webjars", "description": "The Webjars plugin enables serving the client-side libraries provided by WebJars, allowing you to package your assets such as JavaScript and CSS libraries as part of your fat JAR.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:27:16", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:07.028375611", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Webjars | Ktor", "build-number": "707", "og:title": "Webjars | Ktor", "og:type": "website", "title": "Webjars | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:title": "Webjars | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "a7447554-9666-47bf-a70d-aae088b728be", "sourceURL": "https://ktor.io/docs/server-webjars.html", "url": "https://ktor.io/docs/server-webjars.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install webjars in ktor?\n\nAssistant: To install webjars in ktor, here's what you do:\nTo install the Webjars plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install Webjars...\n\n- ... inside the embeddedServer function call.\n\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.webjars.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Webjars)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.webjars.*\n// ...\nfun Application.module() {\n    install(Webjars)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-webjars.html", "title": "Server Plugin Webjars", "description": "The Webjars plugin enables serving the client-side libraries provided by WebJars, allowing you to package your assets such as JavaScript and CSS libraries as part of your fat JAR.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:27:16", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:07.028375611", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Webjars | Ktor", "build-number": "707", "og:title": "Webjars | Ktor", "og:type": "website", "title": "Webjars | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:title": "Webjars | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "a7447554-9666-47bf-a70d-aae088b728be", "sourceURL": "https://ktor.io/docs/server-webjars.html", "url": "https://ktor.io/docs/server-webjars.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure webjars in ktor?\n\nAssistant: To configure webjars in ktor, here's what you do:\nBy default, Webjars serves WebJars assets on the /webjars path. The example below shows how to change this and serve any WebJars assets on the /assets path:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.webjars.*\n\nfun Application.module() {\n    install(Webjars) {\n        path = \"assets\"\n    }\n}\n```\nFor instance, if you've installed the org.webjars:bootstrap dependency, you can add bootstrap.css as follows:\n```\n<head>\n    <link rel=\"stylesheet\" href=\"/assets/bootstrap/bootstrap.css\">\n</head>\n```\nNote that Webjars allows you to change the versions of the dependencies without changing the path used to load them..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-webjars.html", "title": "Server Plugin Webjars", "description": "The Webjars plugin enables serving the client-side libraries provided by WebJars, allowing you to package your assets such as JavaScript and CSS libraries as part of your fat JAR.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:27:16", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:07.028375611", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Webjars | Ktor", "build-number": "707", "og:title": "Webjars | Ktor", "og:type": "website", "title": "Webjars | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:title": "Webjars | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "a7447554-9666-47bf-a70d-aae088b728be", "sourceURL": "https://ktor.io/docs/server-webjars.html", "url": "https://ktor.io/docs/server-webjars.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Webjars in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add ktor-server-webjars dependency (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-webjars:$ktor_version\")\n```\n\nThis snippet shows you how to add ktor-server-webjars dependency (gradle kotlin), which is an important aspect of server plugin webjars.\n\n**Add ktor-server-webjars dependency (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-webjars:$ktor_version\"\n```\n\nThis snippet shows you how to add ktor-server-webjars dependency (gradle groovy), which is an important aspect of server plugin webjars.\n\n**Add ktor-server-webjars dependency (Maven)**:\n\n```yaml\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-webjars-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add ktor-server-webjars dependency (maven), which is an important aspect of server plugin webjars.\n\n**Add Bootstrap dependency (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"org.webjars:bootstrap:$bootstrap_version\")\n```\n\nThis snippet shows you how to add bootstrap dependency (gradle kotlin), which is an important aspect of server plugin webjars.\n\n**Add Bootstrap dependency (Gradle Groovy)**:\n\n```yaml\nimplementation \"org.webjars:bootstrap:$bootstrap_version\"\n```\n\nThis snippet shows you how to add bootstrap dependency (gradle groovy), which is an important aspect of server plugin webjars.\n\n**Add Bootstrap dependency (Maven)**:\n\n```yaml\n<dependency>\n      <groupId>org.webjars</groupId>\n      <artifactId>bootstrap</artifactId>\n      <version>${bootstrap_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add bootstrap dependency (maven), which is an important aspect of server plugin webjars.\n\n**Install Webjars in embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.webjars.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Webjars)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install webjars in embeddedserver, which is an important aspect of server plugin webjars.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-webjars.html", "title": "Server Plugin Webjars", "description": "The Webjars plugin enables serving the client-side libraries provided by WebJars, allowing you to package your assets such as JavaScript and CSS libraries as part of your fat JAR.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:27:16", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:07.028375611", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Webjars | Ktor", "build-number": "707", "og:title": "Webjars | Ktor", "og:type": "website", "title": "Webjars | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:title": "Webjars | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "a7447554-9666-47bf-a70d-aae088b728be", "sourceURL": "https://ktor.io/docs/server-webjars.html", "url": "https://ktor.io/docs/server-webjars.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Webjars in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can find the full example here: webjars.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-webjars.html", "title": "Server Plugin Webjars", "description": "The Webjars plugin enables serving the client-side libraries provided by WebJars, allowing you to package your assets such as JavaScript and CSS libraries as part of your fat JAR.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:27:16", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:card": "summary_large_image", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:07.028375611", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Webjars | Ktor", "build-number": "707", "og:title": "Webjars | Ktor", "og:type": "website", "title": "Webjars | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-webjars.html", "twitter:title": "Webjars | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "a7447554-9666-47bf-a70d-aae088b728be", "sourceURL": "https://ktor.io/docs/server-webjars.html", "url": "https://ktor.io/docs/server-webjars.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server plugins is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server plugins in ktor.\n\n# Server plugins\n\nThis page covers the use of plugins in Ktor to add functionality to applications, including installation and configuration of plugins, and examples of code snippets.Here's a quick rundown of what this is about:\n\n## Add functionality with Plugins\n\nMany applications require common functionality that is out of scope of the application logic. This could be things like serialization and content encoding, compression, headers, cookie support, etc. All of these are provided in Ktor by means of what we call Plugins.\n\nIf we look at the previous pipeline diagram, Plugins sit between the request/response and the application logic:\n\nAs a request comes in:\n\n- It is routed to the correct handler via the routing mechanism\n- before being handed off to the handler, it goes through one or more Plugins\n- the handler (application logic) handles the request\n- before the response is sent to the client, it goes through one or more Plugins\n\n## Routing is a Plugin\n\nPlugins have been designed in a way to offer maximum flexibility, and allow them to be present in any segment of the request/response pipeline. In fact, what we've been calling routing until now, is nothing more than a Plugin.\n\n## Add Plugin dependency\n\nMost of the plugins require a specific dependency. For example, the CORS plugin requires adding the ktor-server-cors artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-cors:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-cors:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-cors-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install Plugins\n\nPlugins are generally configured during the initialization phase of the server using the install function which takes a Plugin as a parameter. Depending on the way you used to create a server, you can install a plugin inside the embeddedServer call ...\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\nimport io.ktor.server.plugins.compression.*\n// ...\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CORS)\n        install(Compression)\n        // ...\n    }.start(wait = true)\n}\n```\n\n... or a specified module:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\nimport io.ktor.server.plugins.compression.*\n// ...\nfun Application.module() {\n    install(CORS)\n    install(Compression)\n    // ...\n}\n```\n\nIn addition to intercepting requests and responses, Plugins can have an option configuration section which is configured during this step.\n\nFor instance, when installing Cookies we can set certain parameters such as where we want cookies to be stored, or their name:\n\n```\ninstall(Sessions) {\n    cookie<MyCookie>(\"MY_COOKIE\")\n}\n```\n\n## Install Plugins to specific routes\n\nIn Ktor, you can install plugins not only globally but also to specific routes. This might be useful if you need different plugin configurations for different application resources. For instance, the example below shows how to add the specified caching header for the /index route:\n\n```\nroute(\"/index\") {\n    install(CachingHeaders) {\n        options { call, content -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 1800)) }\n    }\n    get {\n        call.respondText(\"Index page\")\n    }\n}\n```\n\nNote that the following rules are applied to several installations of the same plugin:\n\n- Configuration of a plugin installed to a specific route overrides its global configuration.\n- Routing merges installations for the same route, and the last installation wins.\n\n## Default, available, and custom Plugins\n\nBy default, Ktor does not activate any plugins, so it's up to you to install the plugins for the functionality your application needs.\n\nKtor does, however, provide a variety of plugins that ship out of the box. You can see a complete list of these in the Ktor Plugin Registry.\n\nIn addition, you can also create your own custom plugins.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-plugins.html", "title": "Server plugins", "description": "This page covers the use of plugins in Ktor to add functionality to applications, including installation and configuration of plugins, and examples of code snippets.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:27:38", "type": "overview", "page_metadata": {"twitter:description": "", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-plugins.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:title": "Server plugins | Ktor", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-plugins.html", "built-on": "2025-02-26T14:01:05.857851041", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Server plugins | Ktor Documentation", "twitter:title": "Server plugins | Ktor", "og:type": "website", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogTitle": "Server plugins | Ktor", "og:site_name": "Ktor Help", "scrapeId": "0c148207-37be-4078-98f9-d66103fb0e2f", "sourceURL": "https://ktor.io/docs/server-plugins.html", "url": "https://ktor.io/docs/server-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add functionality with plugins in ktor?\n\nAssistant: To add functionality with plugins in ktor, here's what you do:\nMany applications require common functionality that is out of scope of the application logic. This could be things like serialization and content encoding, compression, headers, cookie support, etc. All of these are provided in Ktor by means of what we call Plugins.\n\nIf we look at the previous pipeline diagram, Plugins sit between the request/response and the application logic:\n\nAs a request comes in:\n\n- It is routed to the correct handler via the routing mechanism\n- before being handed off to the handler, it goes through one or more Plugins\n- the handler (application logic) handles the request\n- before the response is sent to the client, it goes through one or more Plugins.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-plugins.html", "title": "Server plugins", "description": "This page covers the use of plugins in Ktor to add functionality to applications, including installation and configuration of plugins, and examples of code snippets.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:27:38", "type": "section_detail", "page_metadata": {"twitter:description": "", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-plugins.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:title": "Server plugins | Ktor", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-plugins.html", "built-on": "2025-02-26T14:01:05.857851041", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Server plugins | Ktor Documentation", "twitter:title": "Server plugins | Ktor", "og:type": "website", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogTitle": "Server plugins | Ktor", "og:site_name": "Ktor Help", "scrapeId": "0c148207-37be-4078-98f9-d66103fb0e2f", "sourceURL": "https://ktor.io/docs/server-plugins.html", "url": "https://ktor.io/docs/server-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I routing is a plugin in ktor?\n\nAssistant: To routing is a plugin in ktor, here's what you do:\nPlugins have been designed in a way to offer maximum flexibility, and allow them to be present in any segment of the request/response pipeline. In fact, what we've been calling routing until now, is nothing more than a Plugin..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-plugins.html", "title": "Server plugins", "description": "This page covers the use of plugins in Ktor to add functionality to applications, including installation and configuration of plugins, and examples of code snippets.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:27:38", "type": "section_detail", "page_metadata": {"twitter:description": "", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-plugins.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:title": "Server plugins | Ktor", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-plugins.html", "built-on": "2025-02-26T14:01:05.857851041", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Server plugins | Ktor Documentation", "twitter:title": "Server plugins | Ktor", "og:type": "website", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogTitle": "Server plugins | Ktor", "og:site_name": "Ktor Help", "scrapeId": "0c148207-37be-4078-98f9-d66103fb0e2f", "sourceURL": "https://ktor.io/docs/server-plugins.html", "url": "https://ktor.io/docs/server-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add plugin dependency in ktor?\n\nAssistant: To add plugin dependency in ktor, here's what you do:\nMost of the plugins require a specific dependency. For example, the CORS plugin requires adding the ktor-server-cors artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-cors:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-cors:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-cors-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-plugins.html", "title": "Server plugins", "description": "This page covers the use of plugins in Ktor to add functionality to applications, including installation and configuration of plugins, and examples of code snippets.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:27:38", "type": "section_detail", "page_metadata": {"twitter:description": "", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-plugins.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:title": "Server plugins | Ktor", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-plugins.html", "built-on": "2025-02-26T14:01:05.857851041", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Server plugins | Ktor Documentation", "twitter:title": "Server plugins | Ktor", "og:type": "website", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogTitle": "Server plugins | Ktor", "og:site_name": "Ktor Help", "scrapeId": "0c148207-37be-4078-98f9-d66103fb0e2f", "sourceURL": "https://ktor.io/docs/server-plugins.html", "url": "https://ktor.io/docs/server-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install plugins in ktor?\n\nAssistant: To install plugins in ktor, here's what you do:\nPlugins are generally configured during the initialization phase of the server using the install function which takes a Plugin as a parameter. Depending on the way you used to create a server, you can install a plugin inside the embeddedServer call ...\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\nimport io.ktor.server.plugins.compression.*\n// ...\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CORS)\n        install(Compression)\n        // ...\n    }.start(wait = true)\n}\n```\n\n... or a specified module:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\nimport io.ktor.server.plugins.compression.*\n// ...\nfun Application.module() {\n    install(CORS)\n    install(Compression)\n    // ...\n}\n```\n\nIn addition to intercepting requests and responses, Plugins can have an option configuration section which is configured during this step.\n\nFor instance, when installing Cookies we can set certain parameters such as where we want cookies to be stored, or their name:\n\n```\ninstall(Sessions) {\n    cookie<MyCookie>(\"MY_COOKIE\")\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-plugins.html", "title": "Server plugins", "description": "This page covers the use of plugins in Ktor to add functionality to applications, including installation and configuration of plugins, and examples of code snippets.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:27:38", "type": "section_detail", "page_metadata": {"twitter:description": "", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-plugins.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:title": "Server plugins | Ktor", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-plugins.html", "built-on": "2025-02-26T14:01:05.857851041", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Server plugins | Ktor Documentation", "twitter:title": "Server plugins | Ktor", "og:type": "website", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogTitle": "Server plugins | Ktor", "og:site_name": "Ktor Help", "scrapeId": "0c148207-37be-4078-98f9-d66103fb0e2f", "sourceURL": "https://ktor.io/docs/server-plugins.html", "url": "https://ktor.io/docs/server-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install plugins to specific routes in ktor?\n\nAssistant: To install plugins to specific routes in ktor, here's what you do:\nIn Ktor, you can install plugins not only globally but also to specific routes. This might be useful if you need different plugin configurations for different application resources. For instance, the example below shows how to add the specified caching header for the /index route:\n\n```\nroute(\"/index\") {\n    install(CachingHeaders) {\n        options { call, content -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 1800)) }\n    }\n    get {\n        call.respondText(\"Index page\")\n    }\n}\n```\n\nNote that the following rules are applied to several installations of the same plugin:\n\n- Configuration of a plugin installed to a specific route overrides its global configuration.\n- Routing merges installations for the same route, and the last installation wins..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-plugins.html", "title": "Server plugins", "description": "This page covers the use of plugins in Ktor to add functionality to applications, including installation and configuration of plugins, and examples of code snippets.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:27:38", "type": "section_detail", "page_metadata": {"twitter:description": "", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-plugins.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:title": "Server plugins | Ktor", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-plugins.html", "built-on": "2025-02-26T14:01:05.857851041", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Server plugins | Ktor Documentation", "twitter:title": "Server plugins | Ktor", "og:type": "website", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogTitle": "Server plugins | Ktor", "og:site_name": "Ktor Help", "scrapeId": "0c148207-37be-4078-98f9-d66103fb0e2f", "sourceURL": "https://ktor.io/docs/server-plugins.html", "url": "https://ktor.io/docs/server-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I default, available, and custom plugins in ktor?\n\nAssistant: To default, available, and custom plugins in ktor, here's what you do:\nBy default, Ktor does not activate any plugins, so it's up to you to install the plugins for the functionality your application needs.\n\nKtor does, however, provide a variety of plugins that ship out of the box. You can see a complete list of these in the Ktor Plugin Registry.\n\nIn addition, you can also create your own custom plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-plugins.html", "title": "Server plugins", "description": "This page covers the use of plugins in Ktor to add functionality to applications, including installation and configuration of plugins, and examples of code snippets.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:27:38", "type": "section_detail", "page_metadata": {"twitter:description": "", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-plugins.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:title": "Server plugins | Ktor", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-plugins.html", "built-on": "2025-02-26T14:01:05.857851041", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Server plugins | Ktor Documentation", "twitter:title": "Server plugins | Ktor", "og:type": "website", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogTitle": "Server plugins | Ktor", "og:site_name": "Ktor Help", "scrapeId": "0c148207-37be-4078-98f9-d66103fb0e2f", "sourceURL": "https://ktor.io/docs/server-plugins.html", "url": "https://ktor.io/docs/server-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server plugins in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add Plugin dependency - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-cors:$ktor_version\")\n```\n\nThis snippet shows you how to add plugin dependency - gradle (kotlin), which is an important aspect of server plugins.\n\n**Add Plugin dependency - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-cors:$ktor_version\"\n```\n\nThis snippet shows you how to add plugin dependency - gradle (groovy), which is an important aspect of server plugins.\n\n**Add Plugin dependency - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-cors-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add plugin dependency - maven, which is an important aspect of server plugins.\n\n**Install Plugins - embeddedServer example**:\n\n```yaml\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\nimport io.ktor.server.plugins.compression.*\n// ...\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CORS)\n        install(Compression)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install plugins - embeddedserver example, which is an important aspect of server plugins.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-plugins.html", "title": "Server plugins", "description": "This page covers the use of plugins in Ktor to add functionality to applications, including installation and configuration of plugins, and examples of code snippets.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:27:38", "type": "code_examples", "page_metadata": {"twitter:description": "", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-plugins.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:title": "Server plugins | Ktor", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-plugins.html", "built-on": "2025-02-26T14:01:05.857851041", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Server plugins | Ktor Documentation", "twitter:title": "Server plugins | Ktor", "og:type": "website", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogTitle": "Server plugins | Ktor", "og:site_name": "Ktor Help", "scrapeId": "0c148207-37be-4078-98f9-d66103fb0e2f", "sourceURL": "https://ktor.io/docs/server-plugins.html", "url": "https://ktor.io/docs/server-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server plugins in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConfiguration of a plugin installed to a specific route overrides its global configuration.\n\nRouting merges installations for the same route, and the last installation wins.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-plugins.html", "title": "Server plugins", "description": "This page covers the use of plugins in Ktor to add functionality to applications, including installation and configuration of plugins, and examples of code snippets.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:27:38", "type": "best_practices", "page_metadata": {"twitter:description": "", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-plugins.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:title": "Server plugins | Ktor", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-plugins.html", "built-on": "2025-02-26T14:01:05.857851041", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Server plugins | Ktor Documentation", "twitter:title": "Server plugins | Ktor", "og:type": "website", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogTitle": "Server plugins | Ktor", "og:site_name": "Ktor Help", "scrapeId": "0c148207-37be-4078-98f9-d66103fb0e2f", "sourceURL": "https://ktor.io/docs/server-plugins.html", "url": "https://ktor.io/docs/server-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin CORS is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin CORS in ktor.\n\n# Server Plugin CORS\n\nThis documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `CORS`, you need to include the `ktor-server-cors` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-cors:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-cors:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-cors-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install CORS\n\nTo [install](https://ktor.io/docs/server-plugins.html#install) the `CORS` plugin to the application, pass it to the `install` function in the specified [module](https://ktor.io/docs/server-modules.html). The code snippets below show how to install `CORS`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CORS)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\n// ...\nfun Application.module() {\n    install(CORS)\n    // ...\n}\n```\n\nThe `CORS` plugin can also be [installed to specific routes](https://ktor.io/docs/server-plugins.html#install-route). This might be useful if you need different `CORS` configurations for different application resources.\n\n> ### tip\n>\n> If you install the `CORS` plugin to a specific route, you need to add the `options` [handler](https://ktor.io/docs/server-routing.html#define_route) to this route. This allows Ktor to respond correctly to a CORS preflight request.\n\n## Configure CORS\n\nCORS-specific configuration settings are exposed by the [CORSConfig](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/index.html) class. Let's see how to configure these settings.\n\n### Overview\n\nSuppose you have a server listening on the `8080` port, with the `/customer` [route](https://ktor.io/docs/server-routing.html) responding with [JSON](https://ktor.io/docs/server-serialization.html#send_data) data. A code snippet below shows a sample request made using the Fetch API from the client working on another port to make this request cross-origin:\n\n```\nfunction saveCustomer() {\n    fetch('http://0.0.0.0:8080/customer',\n        {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: \"POST\",\n            body: JSON.stringify({id: 3, firstName: \"Jet\", lastName: \"Brains\"})\n        })\n        .then(response => response.text())\n        .then(data => {\n            console.log('Success:', data);\n            alert(data);\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n}\n```\n\nTo allow such a request on the backend side, you need to configure the `CORS` plugin as follows:\n\n```\ninstall(CORS) {\n    allowHost(\"0.0.0.0:8081\")\n    allowHeader(HttpHeaders.ContentType)\n}\n```\n\n## Hosts\n\nTo specify the allowed host that can make cross-origin requests, use the `allowHost` function. Apart from the hostname, you can specify a port number, a list of subdomains, or the supported HTTP schemes.\n\n```\ninstall(CORS) {\n    allowHost(\"client-host\")\n    allowHost(\"client-host:8081\")\n    allowHost(\"client-host\", subDomains = listOf(\"en\", \"de\", \"es\"))\n    allowHost(\"client-host\", schemes = listOf(\"http\", \"https\"))\n}\n```\n\nTo allow cross-origin requests from any host, use the `anyHost` function.\n\n```\ninstall(CORS) {\n    anyHost()\n}\n```\n\n## HTTP methods\n\nBy default, the `CORS` plugin allows the `GET`, `POST` and `HEAD` HTTP methods. To add additional methods, use the `allowMethod` function.\n\n```\ninstall(CORS) {\n    allowMethod(HttpMethod.Options)\n    allowMethod(HttpMethod.Put)\n    allowMethod(HttpMethod.Patch)\n    allowMethod(HttpMethod.Delete)\n}\n```\n\n## Allow headers\n\nBy default, the `CORS` plugin allows the following client headers managed by `Access-Control-Allow-Headers`:\n\n- `Accept`\n- `Accept-Language`\n- `Content-Language`\n\nTo allow additional headers, use the `allowHeader` function.\n\n```\ninstall(CORS) {\n    allowHeader(HttpHeaders.ContentType)\n    allowHeader(HttpHeaders.Authorization)\n}\n```\n\nTo allow custom headers, use the `allowHeaders` or `allowHeadersPrefixed` functions. For instance, the code snippet below shows how to allow headers prefixed with `custom-`.\n\n```\ninstall(CORS) {\n    allowHeadersPrefixed(\"custom-\")\n}\n```\n\n> ### tip\n>\n> Note that `allowHeaders` or `allowHeadersPrefixed` require setting the [allowNonSimpleContentTypes](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/allow-non-simple-content-types.html) property to `true` for non-simple content types.\n\n## Expose headers\n\nThe `Access-Control-Expose-Headers` header adds the specified headers to the allowlist that JavaScript in browsers can access. To configure such headers, use the `exposeHeader` function.\n\n```\ninstall(CORS) {\n    // ...\n    exposeHeader(\"X-My-Custom-Header\")\n    exposeHeader(\"X-Another-Custom-Header\")\n}\n```\n\n## Credentials\n\nBy default, browsers don't send credential information (such as cookies or authentication information) with cross-origin requests. To allow passing this information, set the `Access-Control-Allow-Credentials` response header to `true` using the `allowCredentials` property.\n\n```\ninstall(CORS) {\n    allowCredentials = true\n}\n```\n\n## Miscellaneous\n\nThe `CORS` plugin also allows you to specify other CORS-related settings. For example, you can use `maxAgeInSeconds` to specify how long the response to the preflight request can be cached without sending another preflight request.\n\n```\ninstall(CORS) {\n    maxAgeInSeconds = 3600\n}\n```\n\nYou can learn about other configuration options from [CORSConfig](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/index.html).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "overview", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `CORS`, you need to include the `ktor-server-cors` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-cors:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-cors:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-cors-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install cors in ktor?\n\nAssistant: To install cors in ktor, here's what you do:\nTo [install](https://ktor.io/docs/server-plugins.html#install) the `CORS` plugin to the application, pass it to the `install` function in the specified [module](https://ktor.io/docs/server-modules.html). The code snippets below show how to install `CORS`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CORS)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\n// ...\nfun Application.module() {\n    install(CORS)\n    // ...\n}\n```\n\nThe `CORS` plugin can also be [installed to specific routes](https://ktor.io/docs/server-plugins.html#install-route). This might be useful if you need different `CORS` configurations for different application resources.\n\n> ### tip\n>\n> If you install the `CORS` plugin to a specific route, you need to add the `options` [handler](https://ktor.io/docs/server-routing.html#define_route) to this route. This allows Ktor to respond correctly to a CORS preflight request..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure cors in ktor?\n\nAssistant: To configure cors in ktor, here's what you do:\nCORS-specific configuration settings are exposed by the [CORSConfig](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/index.html) class. Let's see how to configure these settings.\n\n### Overview\n\nSuppose you have a server listening on the `8080` port, with the `/customer` [route](https://ktor.io/docs/server-routing.html) responding with [JSON](https://ktor.io/docs/server-serialization.html#send_data) data. A code snippet below shows a sample request made using the Fetch API from the client working on another port to make this request cross-origin:\n\n```\nfunction saveCustomer() {\n    fetch('http://0.0.0.0:8080/customer',\n        {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: \"POST\",\n            body: JSON.stringify({id: 3, firstName: \"Jet\", lastName: \"Brains\"})\n        })\n        .then(response => response.text())\n        .then(data => {\n            console.log('Success:', data);\n            alert(data);\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n}\n```\n\nTo allow such a request on the backend side, you need to configure the `CORS` plugin as follows:\n\n```\ninstall(CORS) {\n    allowHost(\"0.0.0.0:8081\")\n    allowHeader(HttpHeaders.ContentType)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I hosts in ktor?\n\nAssistant: To hosts in ktor, here's what you do:\nTo specify the allowed host that can make cross-origin requests, use the `allowHost` function. Apart from the hostname, you can specify a port number, a list of subdomains, or the supported HTTP schemes.\n\n```\ninstall(CORS) {\n    allowHost(\"client-host\")\n    allowHost(\"client-host:8081\")\n    allowHost(\"client-host\", subDomains = listOf(\"en\", \"de\", \"es\"))\n    allowHost(\"client-host\", schemes = listOf(\"http\", \"https\"))\n}\n```\n\nTo allow cross-origin requests from any host, use the `anyHost` function.\n\n```\ninstall(CORS) {\n    anyHost()\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I http methods in ktor?\n\nAssistant: To http methods in ktor, here's what you do:\nBy default, the `CORS` plugin allows the `GET`, `POST` and `HEAD` HTTP methods. To add additional methods, use the `allowMethod` function.\n\n```\ninstall(CORS) {\n    allowMethod(HttpMethod.Options)\n    allowMethod(HttpMethod.Put)\n    allowMethod(HttpMethod.Patch)\n    allowMethod(HttpMethod.Delete)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I allow headers in ktor?\n\nAssistant: To allow headers in ktor, here's what you do:\nBy default, the `CORS` plugin allows the following client headers managed by `Access-Control-Allow-Headers`:\n\n- `Accept`\n- `Accept-Language`\n- `Content-Language`\n\nTo allow additional headers, use the `allowHeader` function.\n\n```\ninstall(CORS) {\n    allowHeader(HttpHeaders.ContentType)\n    allowHeader(HttpHeaders.Authorization)\n}\n```\n\nTo allow custom headers, use the `allowHeaders` or `allowHeadersPrefixed` functions. For instance, the code snippet below shows how to allow headers prefixed with `custom-`.\n\n```\ninstall(CORS) {\n    allowHeadersPrefixed(\"custom-\")\n}\n```\n\n> ### tip\n>\n> Note that `allowHeaders` or `allowHeadersPrefixed` require setting the [allowNonSimpleContentTypes](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/allow-non-simple-content-types.html) property to `true` for non-simple content types..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I expose headers in ktor?\n\nAssistant: To expose headers in ktor, here's what you do:\nThe `Access-Control-Expose-Headers` header adds the specified headers to the allowlist that JavaScript in browsers can access. To configure such headers, use the `exposeHeader` function.\n\n```\ninstall(CORS) {\n    // ...\n    exposeHeader(\"X-My-Custom-Header\")\n    exposeHeader(\"X-Another-Custom-Header\")\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I credentials in ktor?\n\nAssistant: To credentials in ktor, here's what you do:\nBy default, browsers don't send credential information (such as cookies or authentication information) with cross-origin requests. To allow passing this information, set the `Access-Control-Allow-Credentials` response header to `true` using the `allowCredentials` property.\n\n```\ninstall(CORS) {\n    allowCredentials = true\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I miscellaneous in ktor?\n\nAssistant: To miscellaneous in ktor, here's what you do:\nThe `CORS` plugin also allows you to specify other CORS-related settings. For example, you can use `maxAgeInSeconds` to specify how long the response to the preflight request can be cached without sending another preflight request.\n\n```\ninstall(CORS) {\n    maxAgeInSeconds = 3600\n}\n```\n\nYou can learn about other configuration options from [CORSConfig](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/index.html)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin CORS in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**CORS Installation in embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CORS)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to cors installation in embeddedserver, which is an important aspect of server plugin cors.\n\n**CORS Installation in module**:\n\n```yaml\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cors.*\n// ...\nfun Application.module() {\n    install(CORS)\n    // ...\n}\n```\n\nThis snippet shows you how to cors installation in module, which is an important aspect of server plugin cors.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "code_examples", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin CORS in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you install the `CORS` plugin to a specific route, you need to add the `options` handler to this route. This allows Ktor to respond correctly to a CORS preflight request.\n\nNote that `allowHeaders` or `allowHeadersPrefixed` require setting the allowNonSimpleContentTypes property to true for non-simple content types.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-cors.html", "title": "Server Plugin CORS", "description": "This documentation page covers the installation and configuration of the CORS plugin in Ktor, which allows handling cross-origin requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:28:21", "type": "best_practices", "page_metadata": {"og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "title": "CORS | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "CORS | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "CORS | Ktor", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-cors.html", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.152210194", "ogTitle": "CORS | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-cors.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "5bbf4645-a9d7-45c5-9498-3d3150dfadc5", "sourceURL": "https://ktor.io/docs/server-cors.html", "url": "https://ktor.io/docs/server-cors.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Thymeleaf is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Thymeleaf in ktor.\n\n# Server Plugin Thymeleaf\n\nKtor allows you to use Thymeleaf templates as views within your application by installing the Thymeleaf plugin.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `Thymeleaf`, you need to include the `ktor-server-thymeleaf` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-thymeleaf:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-thymeleaf:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-thymeleaf-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install Thymeleaf\n\nTo install the `Thymeleaf` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `Thymeleaf`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.thymeleaf.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Thymeleaf)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.thymeleaf.*\n// ...\nfun Application.module() {\n    install(Thymeleaf)\n    // ...\n}\n```\n\n## Configure Thymeleaf\n\n### Configure template loading\n\nInside the `install` block, you can configure the `ClassLoaderTemplateResolver`. For example, the code snippet below enables Ktor to look up `*.html` templates in the `templates` package relative to the current classpath:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.thymeleaf.*\nimport org.thymeleaf.templateresolver.ClassLoaderTemplateResolver\n\nfun Application.module() {\n    install(Thymeleaf) {\n        setTemplateResolver(ClassLoaderTemplateResolver().apply {\n            prefix = \"templates/\"\n            suffix = \".html\"\n            characterEncoding = \"utf-8\"\n        })\n    }\n}\n```\n\n### Send a template in response\n\nImagine you have the `index.html` template in `resources/templates`:\n\n```\n<html xmlns:th=\"http://www.thymeleaf.org\">\n    <body>\n        <h1 th:text=\"'Hello, ' + ${user.name}\"></h1>\n    </body>\n</html>\n```\n\nA data model for a user looks as follows:\n\n```\ndata class User(val id: Int, val name: String)\n```\n\nTo use the template for the specified route, pass `ThymeleafContent` to the `call.respond` method in the following way:\n\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respond(ThymeleafContent(\"index\", mapOf(\"user\" to sampleUser)))\n}\n```\n\n## Example: Auto reload Thymeleaf templates\n\nThe example below shows how to reload Thymeleaf templates automatically when development mode is used.\n\n```\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.thymeleaf.*\nimport org.thymeleaf.templateresolver.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    install(Thymeleaf) {\n        setTemplateResolver((if (developmentMode) {\n            FileTemplateResolver().apply {\n                cacheManager = null\n                prefix = \"src/main/resources/templates/\"\n            }\n        } else {\n            ClassLoaderTemplateResolver().apply {\n                prefix = \"templates/\"\n            }\n        }).apply {\n            suffix = \".html\"\n            characterEncoding = \"utf-8\"\n        })\n    }\n    routing {\n        get(\"/index\") {\n            val sampleUser = User(1, \"John\")\n            call.respond(ThymeleafContent(\"index\", mapOf(\"user\" to sampleUser)))\n        }\n    }\n}\n\ndata class User(val id: Int, val name: String)\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-thymeleaf.html", "title": "Server Plugin Thymeleaf", "description": "Ktor allows you to use Thymeleaf templates as views within your application by installing the Thymeleaf plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:28:49", "type": "overview", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "title": "Thymeleaf | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Thymeleaf | Ktor", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Thymeleaf | Ktor", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "language": "en-US", "built-on": "2025-02-26T14:01:02.931738575", "twitter:site": "@JetBrainsKtor", "twitter:title": "Thymeleaf | Ktor", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "2052d94d-b72f-4921-b195-4db364300f9e", "sourceURL": "https://ktor.io/docs/server-thymeleaf.html", "url": "https://ktor.io/docs/server-thymeleaf.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `Thymeleaf`, you need to include the `ktor-server-thymeleaf` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-thymeleaf:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-thymeleaf:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-thymeleaf-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-thymeleaf.html", "title": "Server Plugin Thymeleaf", "description": "Ktor allows you to use Thymeleaf templates as views within your application by installing the Thymeleaf plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:28:49", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "title": "Thymeleaf | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Thymeleaf | Ktor", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Thymeleaf | Ktor", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "language": "en-US", "built-on": "2025-02-26T14:01:02.931738575", "twitter:site": "@JetBrainsKtor", "twitter:title": "Thymeleaf | Ktor", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "2052d94d-b72f-4921-b195-4db364300f9e", "sourceURL": "https://ktor.io/docs/server-thymeleaf.html", "url": "https://ktor.io/docs/server-thymeleaf.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install thymeleaf in ktor?\n\nAssistant: To install thymeleaf in ktor, here's what you do:\nTo install the `Thymeleaf` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `Thymeleaf`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.thymeleaf.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Thymeleaf)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.thymeleaf.*\n// ...\nfun Application.module() {\n    install(Thymeleaf)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-thymeleaf.html", "title": "Server Plugin Thymeleaf", "description": "Ktor allows you to use Thymeleaf templates as views within your application by installing the Thymeleaf plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:28:49", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "title": "Thymeleaf | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Thymeleaf | Ktor", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Thymeleaf | Ktor", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "language": "en-US", "built-on": "2025-02-26T14:01:02.931738575", "twitter:site": "@JetBrainsKtor", "twitter:title": "Thymeleaf | Ktor", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "2052d94d-b72f-4921-b195-4db364300f9e", "sourceURL": "https://ktor.io/docs/server-thymeleaf.html", "url": "https://ktor.io/docs/server-thymeleaf.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure thymeleaf in ktor?\n\nAssistant: To configure thymeleaf in ktor, here's what you do:\n### Configure template loading\n\nInside the `install` block, you can configure the `ClassLoaderTemplateResolver`. For example, the code snippet below enables Ktor to look up `*.html` templates in the `templates` package relative to the current classpath:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.thymeleaf.*\nimport org.thymeleaf.templateresolver.ClassLoaderTemplateResolver\n\nfun Application.module() {\n    install(Thymeleaf) {\n        setTemplateResolver(ClassLoaderTemplateResolver().apply {\n            prefix = \"templates/\"\n            suffix = \".html\"\n            characterEncoding = \"utf-8\"\n        })\n    }\n}\n```\n\n### Send a template in response\n\nImagine you have the `index.html` template in `resources/templates`:\n\n```\n<html xmlns:th=\"http://www.thymeleaf.org\">\n    <body>\n        <h1 th:text=\"'Hello, ' + ${user.name}\"></h1>\n    </body>\n</html>\n```\n\nA data model for a user looks as follows:\n\n```\ndata class User(val id: Int, val name: String)\n```\n\nTo use the template for the specified route, pass `ThymeleafContent` to the `call.respond` method in the following way:\n\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respond(ThymeleafContent(\"index\", mapOf(\"user\" to sampleUser)))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-thymeleaf.html", "title": "Server Plugin Thymeleaf", "description": "Ktor allows you to use Thymeleaf templates as views within your application by installing the Thymeleaf plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:28:49", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "title": "Thymeleaf | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Thymeleaf | Ktor", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Thymeleaf | Ktor", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "language": "en-US", "built-on": "2025-02-26T14:01:02.931738575", "twitter:site": "@JetBrainsKtor", "twitter:title": "Thymeleaf | Ktor", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "2052d94d-b72f-4921-b195-4db364300f9e", "sourceURL": "https://ktor.io/docs/server-thymeleaf.html", "url": "https://ktor.io/docs/server-thymeleaf.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example: auto reload thymeleaf templates in ktor?\n\nAssistant: To example: auto reload thymeleaf templates in ktor, here's what you do:\nThe example below shows how to reload Thymeleaf templates automatically when development mode is used.\n\n```\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.thymeleaf.*\nimport org.thymeleaf.templateresolver.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    install(Thymeleaf) {\n        setTemplateResolver((if (developmentMode) {\n            FileTemplateResolver().apply {\n                cacheManager = null\n                prefix = \"src/main/resources/templates/\"\n            }\n        } else {\n            ClassLoaderTemplateResolver().apply {\n                prefix = \"templates/\"\n            }\n        }).apply {\n            suffix = \".html\"\n            characterEncoding = \"utf-8\"\n        })\n    }\n    routing {\n        get(\"/index\") {\n            val sampleUser = User(1, \"John\")\n            call.respond(ThymeleafContent(\"index\", mapOf(\"user\" to sampleUser)))\n        }\n    }\n}\n\ndata class User(val id: Int, val name: String)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-thymeleaf.html", "title": "Server Plugin Thymeleaf", "description": "Ktor allows you to use Thymeleaf templates as views within your application by installing the Thymeleaf plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:28:49", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "title": "Thymeleaf | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Thymeleaf | Ktor", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Thymeleaf | Ktor", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "language": "en-US", "built-on": "2025-02-26T14:01:02.931738575", "twitter:site": "@JetBrainsKtor", "twitter:title": "Thymeleaf | Ktor", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "2052d94d-b72f-4921-b195-4db364300f9e", "sourceURL": "https://ktor.io/docs/server-thymeleaf.html", "url": "https://ktor.io/docs/server-thymeleaf.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Thymeleaf in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-thymeleaf:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies - gradle (kotlin), which is an important aspect of server plugin thymeleaf.\n\n**Add dependencies - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-thymeleaf:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies - gradle (groovy), which is an important aspect of server plugin thymeleaf.\n\n**Add dependencies - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-thymeleaf-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies - maven, which is an important aspect of server plugin thymeleaf.\n\n**Install Thymeleaf - embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.thymeleaf.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Thymeleaf)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install thymeleaf - embeddedserver, which is an important aspect of server plugin thymeleaf.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-thymeleaf.html", "title": "Server Plugin Thymeleaf", "description": "Ktor allows you to use Thymeleaf templates as views within your application by installing the Thymeleaf plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:28:49", "type": "code_examples", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "title": "Thymeleaf | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Thymeleaf | Ktor", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Thymeleaf | Ktor", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "language": "en-US", "built-on": "2025-02-26T14:01:02.931738575", "twitter:site": "@JetBrainsKtor", "twitter:title": "Thymeleaf | Ktor", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "2052d94d-b72f-4921-b195-4db364300f9e", "sourceURL": "https://ktor.io/docs/server-thymeleaf.html", "url": "https://ktor.io/docs/server-thymeleaf.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Thymeleaf in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to include the correct dependencies for Thymeleaf in your build script.\n\nUse the appropriate template resolver based on your development mode for optimal performance.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-thymeleaf.html", "title": "Server Plugin Thymeleaf", "description": "Ktor allows you to use Thymeleaf templates as views within your application by installing the Thymeleaf plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:28:49", "type": "best_practices", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "title": "Thymeleaf | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Thymeleaf | Ktor", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-thymeleaf.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "Thymeleaf | Ktor", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "language": "en-US", "built-on": "2025-02-26T14:01:02.931738575", "twitter:site": "@JetBrainsKtor", "twitter:title": "Thymeleaf | Ktor", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "2052d94d-b72f-4921-b195-4db364300f9e", "sourceURL": "https://ktor.io/docs/server-thymeleaf.html", "url": "https://ktor.io/docs/server-thymeleaf.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Mustache is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Mustache in ktor.\n\n# Server Plugin Mustache\n\nKtor allows you to use Mustache templates as views within your application by installing the Mustache plugin.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use Mustache, you need to include the ktor-server-mustache artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-mustache:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-mustache:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-mustache-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install Mustache\n\nTo install the Mustache plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install Mustache...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.mustache.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Mustache)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.mustache.*\n// ...\nfun Application.module() {\n    install(Mustache)\n    // ...\n}\n```\n\n## Configure Mustache\n\n### Configure template loading\nTo load templates, you need to assign the MustacheFactory to the mustacheFactory property. For example, the code snippet below enables Ktor to look up templates in the templates package relative to the current classpath:\n\n```\nimport com.github.mustachejava.DefaultMustacheFactory\nimport io.ktor.server.application.*\nimport io.ktor.server.mustache.Mustache\nimport io.ktor.server.mustache.MustacheContent\n\nfun Application.module() {\n    install(Mustache) {\n        mustacheFactory = DefaultMustacheFactory(\"templates\")\n    }\n}\n```\n\n### Send a template in response\nImagine you have the index.hbs template in resources/templates:\n\n```\n<html>\n    <body>\n        <h1>Hello, {{user.name}}</h1>\n    </body>\n</html>\n```\n\nA data model for a user looks as follows:\n\n```\ndata class User(val id: Int, val name: String)\n```\n\nTo use the template for the specified route, pass MustacheContent to the call.respond method in the following way:\n\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respond(MustacheContent(\"index.hbs\", mapOf(\"user\" to sampleUser)))\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-mustache.html", "title": "Server Plugin Mustache", "description": "Ktor allows you to use Mustache templates as views within your application by installing the Mustache plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:29:13", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Mustache | Ktor", "og:title": "Mustache | Ktor", "build-number": "707", "twitter:card": "summary_large_image", "twitter:title": "Mustache | Ktor", "twitter:site": "@JetBrainsKtor", "title": "Mustache | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-mustache.html", "built-on": "2025-02-26T14:01:02.862846083", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/server-mustache.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:type": "website", "twitter:description": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "0fd80538-f350-4b1d-b0a9-d2085142e985", "sourceURL": "https://ktor.io/docs/server-mustache.html", "url": "https://ktor.io/docs/server-mustache.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use Mustache, you need to include the ktor-server-mustache artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-mustache:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-mustache:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-mustache-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-mustache.html", "title": "Server Plugin Mustache", "description": "Ktor allows you to use Mustache templates as views within your application by installing the Mustache plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:29:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Mustache | Ktor", "og:title": "Mustache | Ktor", "build-number": "707", "twitter:card": "summary_large_image", "twitter:title": "Mustache | Ktor", "twitter:site": "@JetBrainsKtor", "title": "Mustache | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-mustache.html", "built-on": "2025-02-26T14:01:02.862846083", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/server-mustache.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:type": "website", "twitter:description": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "0fd80538-f350-4b1d-b0a9-d2085142e985", "sourceURL": "https://ktor.io/docs/server-mustache.html", "url": "https://ktor.io/docs/server-mustache.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install mustache in ktor?\n\nAssistant: To install mustache in ktor, here's what you do:\nTo install the Mustache plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install Mustache...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.mustache.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Mustache)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.mustache.*\n// ...\nfun Application.module() {\n    install(Mustache)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-mustache.html", "title": "Server Plugin Mustache", "description": "Ktor allows you to use Mustache templates as views within your application by installing the Mustache plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:29:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Mustache | Ktor", "og:title": "Mustache | Ktor", "build-number": "707", "twitter:card": "summary_large_image", "twitter:title": "Mustache | Ktor", "twitter:site": "@JetBrainsKtor", "title": "Mustache | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-mustache.html", "built-on": "2025-02-26T14:01:02.862846083", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/server-mustache.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:type": "website", "twitter:description": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "0fd80538-f350-4b1d-b0a9-d2085142e985", "sourceURL": "https://ktor.io/docs/server-mustache.html", "url": "https://ktor.io/docs/server-mustache.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure mustache in ktor?\n\nAssistant: To configure mustache in ktor, here's what you do:\n### Configure template loading\nTo load templates, you need to assign the MustacheFactory to the mustacheFactory property. For example, the code snippet below enables Ktor to look up templates in the templates package relative to the current classpath:\n\n```\nimport com.github.mustachejava.DefaultMustacheFactory\nimport io.ktor.server.application.*\nimport io.ktor.server.mustache.Mustache\nimport io.ktor.server.mustache.MustacheContent\n\nfun Application.module() {\n    install(Mustache) {\n        mustacheFactory = DefaultMustacheFactory(\"templates\")\n    }\n}\n```\n\n### Send a template in response\nImagine you have the index.hbs template in resources/templates:\n\n```\n<html>\n    <body>\n        <h1>Hello, {{user.name}}</h1>\n    </body>\n</html>\n```\n\nA data model for a user looks as follows:\n\n```\ndata class User(val id: Int, val name: String)\n```\n\nTo use the template for the specified route, pass MustacheContent to the call.respond method in the following way:\n\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respond(MustacheContent(\"index.hbs\", mapOf(\"user\" to sampleUser)))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-mustache.html", "title": "Server Plugin Mustache", "description": "Ktor allows you to use Mustache templates as views within your application by installing the Mustache plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:29:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Mustache | Ktor", "og:title": "Mustache | Ktor", "build-number": "707", "twitter:card": "summary_large_image", "twitter:title": "Mustache | Ktor", "twitter:site": "@JetBrainsKtor", "title": "Mustache | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-mustache.html", "built-on": "2025-02-26T14:01:02.862846083", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/server-mustache.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:type": "website", "twitter:description": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "0fd80538-f350-4b1d-b0a9-d2085142e985", "sourceURL": "https://ktor.io/docs/server-mustache.html", "url": "https://ktor.io/docs/server-mustache.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Mustache in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-mustache:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of server plugin mustache.\n\n**Add dependencies (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-mustache:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies (gradle groovy), which is an important aspect of server plugin mustache.\n\n**Add dependencies (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-mustache-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies (maven), which is an important aspect of server plugin mustache.\n\n**Install Mustache (embeddedServer)**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.mustache.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Mustache)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install mustache (embeddedserver), which is an important aspect of server plugin mustache.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-mustache.html", "title": "Server Plugin Mustache", "description": "Ktor allows you to use Mustache templates as views within your application by installing the Mustache plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:29:13", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Mustache | Ktor", "og:title": "Mustache | Ktor", "build-number": "707", "twitter:card": "summary_large_image", "twitter:title": "Mustache | Ktor", "twitter:site": "@JetBrainsKtor", "title": "Mustache | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-mustache.html", "built-on": "2025-02-26T14:01:02.862846083", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/server-mustache.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:type": "website", "twitter:description": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "0fd80538-f350-4b1d-b0a9-d2085142e985", "sourceURL": "https://ktor.io/docs/server-mustache.html", "url": "https://ktor.io/docs/server-mustache.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Mustache in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to include the correct dependencies for Mustache in your build script.\n\nWhen installing the Mustache plugin, consider the context in which it is being installed (embedded server vs module).\n\nConfigure the MustacheFactory properly to load templates from the desired location.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-mustache.html", "title": "Server Plugin Mustache", "description": "Ktor allows you to use Mustache templates as views within your application by installing the Mustache plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:29:13", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Mustache | Ktor", "og:title": "Mustache | Ktor", "build-number": "707", "twitter:card": "summary_large_image", "twitter:title": "Mustache | Ktor", "twitter:site": "@JetBrainsKtor", "title": "Mustache | Ktor Documentation", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-mustache.html", "built-on": "2025-02-26T14:01:02.862846083", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/server-mustache.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "og:type": "website", "twitter:description": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "0fd80538-f350-4b1d-b0a9-d2085142e985", "sourceURL": "https://ktor.io/docs/server-mustache.html", "url": "https://ktor.io/docs/server-mustache.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Compression is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Compression in ktor.\n\n# Server Plugin Compression\n\nKtor provides the capability to compress outgoing content by using the Compression plugin. You can use different compression algorithms, including gzip and deflate, specify the required conditions for compressing data, or even compress data based on specific request parameters.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use Compression, you need to include the ktor-server-compression artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-compression:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-compression:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-compression-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install Compression\n\nTo install the Compression plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install Compression...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.compression.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Compression)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.compression.*\n// ...\nfun Application.module() {\n    install(Compression)\n    // ...\n}\n```\n\nThis enables the gzip, deflate, and identity encoders on a server.\n\n## Configure compression settings\n\nYou can configure compression in multiple ways: enable only specific encoders, specify their priorities, compress only specific content types, and so on.\n\n### Add specific encoders\n\nTo enable only specific encoders, call the corresponding extension functions, for example:\n\n```\ninstall(Compression) {\n    gzip()\n    deflate()\n}\n```\n\nYou can specify the priority for each compression algorithm by establishing the priority property:\n\n```\ninstall(Compression) {\n    gzip {\n        priority = 0.9\n    }\n    deflate {\n        priority = 1.0\n    }\n}\n```\n\nIn the example above, deflate has a higher priority value and takes precedence over gzip.\n\n### Configure content type\n\nBy default, Ktor doesn't compress specific content types, such as audio, video, image, and text/event-stream. You can choose the content types to compress by calling matchContentType or exclude the desired media types from compression by using excludeContentType.\n\n```\ninstall(Compression) {\n    gzip {\n        matchContentType(\n            ContentType.Application.JavaScript\n        )\n    }\n    deflate {\n        matchContentType(\n            ContentType.Text.Any\n        )\n    }\n}\n```\n\n### Configure response size\n\nThe Compression plugin allows you to disable compression for responses whose size doesn't exceed the specified value.\n\n```\ninstall(Compression) {\n    deflate {\n        minimumSize(1024)\n    }\n}\n```\n\n### Specify custom conditions\n\nIf necessary, you can provide a custom condition using the condition function and compress data depending on the specific request parameters.\n\n```\ninstall(Compression) {\n    gzip {\n        condition {\n            request.uri == \"/orders\"\n        }\n    }\n}\n```\n\n## HTTPS security\n\nHTTPS with the enabled compression is vulnerable to the BREACH attack. You can use various ways to mitigate this attack. For example, you can disable compression whenever the referrer header indicates a cross-site request.\n\n```\ninstall(Compression) {\n    gzip {\n        condition {\n            request.headers[HttpHeaders.Referrer]?.startsWith(\"https://my.domain/\") == true\n        }\n    }\n}\n```\n\n## Implement custom encoder\n\nIf necessary, you can provide your own encoder by implementing the ContentEncoder interface. See GzipEncoder as an example of implementation.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-compression.html", "title": "Server Plugin Compression", "description": "Ktor provides the capability to compress outgoing content by using the Compression plugin. You can use different compression algorithms, including gzip and deflate, specify the required conditions for compressing data, or even compress data based on specific request parameters.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:29:47", "type": "overview", "page_metadata": {"og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-compression.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-compression.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "twitter:title": "Compression | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "built-on": "2025-02-26T14:01:04.933669536", "twitter:description": "", "ogLocale": "en_US", "og:title": "Compression | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogTitle": "Compression | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "title": "Compression | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "scrapeId": "6009d93a-1a80-46a6-a329-e47c6a8af217", "sourceURL": "https://ktor.io/docs/server-compression.html", "url": "https://ktor.io/docs/server-compression.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use Compression, you need to include the ktor-server-compression artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-compression:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-compression:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-compression-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-compression.html", "title": "Server Plugin Compression", "description": "Ktor provides the capability to compress outgoing content by using the Compression plugin. You can use different compression algorithms, including gzip and deflate, specify the required conditions for compressing data, or even compress data based on specific request parameters.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:29:47", "type": "section_detail", "page_metadata": {"og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-compression.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-compression.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "twitter:title": "Compression | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "built-on": "2025-02-26T14:01:04.933669536", "twitter:description": "", "ogLocale": "en_US", "og:title": "Compression | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogTitle": "Compression | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "title": "Compression | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "scrapeId": "6009d93a-1a80-46a6-a329-e47c6a8af217", "sourceURL": "https://ktor.io/docs/server-compression.html", "url": "https://ktor.io/docs/server-compression.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install compression in ktor?\n\nAssistant: To install compression in ktor, here's what you do:\nTo install the Compression plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install Compression...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.compression.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Compression)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.compression.*\n// ...\nfun Application.module() {\n    install(Compression)\n    // ...\n}\n```\n\nThis enables the gzip, deflate, and identity encoders on a server..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-compression.html", "title": "Server Plugin Compression", "description": "Ktor provides the capability to compress outgoing content by using the Compression plugin. You can use different compression algorithms, including gzip and deflate, specify the required conditions for compressing data, or even compress data based on specific request parameters.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:29:47", "type": "section_detail", "page_metadata": {"og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-compression.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-compression.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "twitter:title": "Compression | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "built-on": "2025-02-26T14:01:04.933669536", "twitter:description": "", "ogLocale": "en_US", "og:title": "Compression | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogTitle": "Compression | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "title": "Compression | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "scrapeId": "6009d93a-1a80-46a6-a329-e47c6a8af217", "sourceURL": "https://ktor.io/docs/server-compression.html", "url": "https://ktor.io/docs/server-compression.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure compression settings in ktor?\n\nAssistant: To configure compression settings in ktor, here's what you do:\nYou can configure compression in multiple ways: enable only specific encoders, specify their priorities, compress only specific content types, and so on.\n\n### Add specific encoders\n\nTo enable only specific encoders, call the corresponding extension functions, for example:\n\n```\ninstall(Compression) {\n    gzip()\n    deflate()\n}\n```\n\nYou can specify the priority for each compression algorithm by establishing the priority property:\n\n```\ninstall(Compression) {\n    gzip {\n        priority = 0.9\n    }\n    deflate {\n        priority = 1.0\n    }\n}\n```\n\nIn the example above, deflate has a higher priority value and takes precedence over gzip.\n\n### Configure content type\n\nBy default, Ktor doesn't compress specific content types, such as audio, video, image, and text/event-stream. You can choose the content types to compress by calling matchContentType or exclude the desired media types from compression by using excludeContentType.\n\n```\ninstall(Compression) {\n    gzip {\n        matchContentType(\n            ContentType.Application.JavaScript\n        )\n    }\n    deflate {\n        matchContentType(\n            ContentType.Text.Any\n        )\n    }\n}\n```\n\n### Configure response size\n\nThe Compression plugin allows you to disable compression for responses whose size doesn't exceed the specified value.\n\n```\ninstall(Compression) {\n    deflate {\n        minimumSize(1024)\n    }\n}\n```\n\n### Specify custom conditions\n\nIf necessary, you can provide a custom condition using the condition function and compress data depending on the specific request parameters.\n\n```\ninstall(Compression) {\n    gzip {\n        condition {\n            request.uri == \"/orders\"\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-compression.html", "title": "Server Plugin Compression", "description": "Ktor provides the capability to compress outgoing content by using the Compression plugin. You can use different compression algorithms, including gzip and deflate, specify the required conditions for compressing data, or even compress data based on specific request parameters.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:29:47", "type": "section_detail", "page_metadata": {"og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-compression.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-compression.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "twitter:title": "Compression | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "built-on": "2025-02-26T14:01:04.933669536", "twitter:description": "", "ogLocale": "en_US", "og:title": "Compression | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogTitle": "Compression | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "title": "Compression | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "scrapeId": "6009d93a-1a80-46a6-a329-e47c6a8af217", "sourceURL": "https://ktor.io/docs/server-compression.html", "url": "https://ktor.io/docs/server-compression.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I https security in ktor?\n\nAssistant: To https security in ktor, here's what you do:\nHTTPS with the enabled compression is vulnerable to the BREACH attack. You can use various ways to mitigate this attack. For example, you can disable compression whenever the referrer header indicates a cross-site request.\n\n```\ninstall(Compression) {\n    gzip {\n        condition {\n            request.headers[HttpHeaders.Referrer]?.startsWith(\"https://my.domain/\") == true\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-compression.html", "title": "Server Plugin Compression", "description": "Ktor provides the capability to compress outgoing content by using the Compression plugin. You can use different compression algorithms, including gzip and deflate, specify the required conditions for compressing data, or even compress data based on specific request parameters.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:29:47", "type": "section_detail", "page_metadata": {"og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-compression.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-compression.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "twitter:title": "Compression | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "built-on": "2025-02-26T14:01:04.933669536", "twitter:description": "", "ogLocale": "en_US", "og:title": "Compression | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogTitle": "Compression | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "title": "Compression | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "scrapeId": "6009d93a-1a80-46a6-a329-e47c6a8af217", "sourceURL": "https://ktor.io/docs/server-compression.html", "url": "https://ktor.io/docs/server-compression.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I implement custom encoder in ktor?\n\nAssistant: To implement custom encoder in ktor, here's what you do:\nIf necessary, you can provide your own encoder by implementing the ContentEncoder interface. See GzipEncoder as an example of implementation..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-compression.html", "title": "Server Plugin Compression", "description": "Ktor provides the capability to compress outgoing content by using the Compression plugin. You can use different compression algorithms, including gzip and deflate, specify the required conditions for compressing data, or even compress data based on specific request parameters.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:29:47", "type": "section_detail", "page_metadata": {"og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-compression.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-compression.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "twitter:title": "Compression | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "built-on": "2025-02-26T14:01:04.933669536", "twitter:description": "", "ogLocale": "en_US", "og:title": "Compression | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogTitle": "Compression | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "title": "Compression | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "scrapeId": "6009d93a-1a80-46a6-a329-e47c6a8af217", "sourceURL": "https://ktor.io/docs/server-compression.html", "url": "https://ktor.io/docs/server-compression.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Compression in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-compression:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies - gradle (kotlin), which is an important aspect of server plugin compression.\n\n**Add dependencies - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-compression:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies - gradle (groovy), which is an important aspect of server plugin compression.\n\n**Add dependencies - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-compression-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies - maven, which is an important aspect of server plugin compression.\n\n**Install Compression - embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.compression.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Compression)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install compression - embeddedserver, which is an important aspect of server plugin compression.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-compression.html", "title": "Server Plugin Compression", "description": "Ktor provides the capability to compress outgoing content by using the Compression plugin. You can use different compression algorithms, including gzip and deflate, specify the required conditions for compressing data, or even compress data based on specific request parameters.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:29:47", "type": "code_examples", "page_metadata": {"og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-compression.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-compression.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "twitter:title": "Compression | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "built-on": "2025-02-26T14:01:04.933669536", "twitter:description": "", "ogLocale": "en_US", "og:title": "Compression | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogTitle": "Compression | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "title": "Compression | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "scrapeId": "6009d93a-1a80-46a6-a329-e47c6a8af217", "sourceURL": "https://ktor.io/docs/server-compression.html", "url": "https://ktor.io/docs/server-compression.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Compression in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo learn how to serve pre-compressed static files in Ktor, see Pre-compressed files.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-compression.html", "title": "Server Plugin Compression", "description": "Ktor provides the capability to compress outgoing content by using the Compression plugin. You can use different compression algorithms, including gzip and deflate, specify the required conditions for compressing data, or even compress data based on specific request parameters.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:29:47", "type": "best_practices", "page_metadata": {"og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-compression.html", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-compression.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "twitter:title": "Compression | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "built-on": "2025-02-26T14:01:04.933669536", "twitter:description": "", "ogLocale": "en_US", "og:title": "Compression | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogTitle": "Compression | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "title": "Compression | Ktor Documentation", "og:site_name": "Ktor Help", "og:locale": "en_US", "scrapeId": "6009d93a-1a80-46a6-a329-e47c6a8af217", "sourceURL": "https://ktor.io/docs/server-compression.html", "url": "https://ktor.io/docs/server-compression.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Cookies is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Cookies in ktor.\n\n# Client Plugin Cookies\n\nThe Ktor client allows you to handle cookies manually and automatically, providing functions to append cookies to requests and parse Set-Cookie headers from responses.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\n`HttpCookies` only requires the [ktor-client-core](https://ktor.io/docs/client-dependencies.html) artifact and doesn't need any specific dependencies.\n\n## Install and configure HttpCookies\n\nTo install `HttpCookies`, pass it to the `install` function inside a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```\nval client = HttpClient(CIO) {\n    install(HttpCookies)\n}\n```\n\nThis is enough to enable the Ktor client to keep cookies between requests. You can find the full example here: [client-cookies](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-cookies).\n\nThe `HttpCookies` plugin also allows you to add a specific set of cookies to each request by using `ConstantCookiesStorage`. This might be useful in a test case that verifies a server response. The example below shows how to add a specified cookie to all requests for a specific domain:\n\n```\nval client = HttpClient(CIO) {\n    install(HttpCookies) {\n        storage = ConstantCookiesStorage(Cookie(name = \"user_name\", value = \"jetbrains\", domain = \"0.0.0.0\"))\n    }\n}\n```\n\n## Get cookies\n\nThe client provides the `cookies` function to obtain all the cookies for the specified URL:\n\n```\nclient.cookies(\"http://0.0.0.0:8080/\")\n```\n\n## Custom cookie storage\n\nIf required, you can create a custom cookie storage by implementing the [CookiesStorage](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.cookies/-cookies-storage/index.html) interface:\n\n```\nval client = HttpClient(CIO) {\n    install(HttpCookies) {\n        storage = CustomCookiesStorage()\n    }\n}\n\npublic class CustomCookiesStorage : CookiesStorage {\n    // ...\n}\n```\n\nYou can use [AcceptAllCookiesStorage](https://github.com/ktorio/ktor/blob/main/ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cookies/AcceptAllCookiesStorage.kt) as a reference.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-cookies.html", "title": "Client Plugin Cookies", "description": "The Ktor client allows you to handle cookies manually and automatically, providing functions to append cookies to requests and parse Set-Cookie headers from responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:31:17", "type": "overview", "page_metadata": {"title": "Cookies | Ktor Documentation", "ogTitle": "Cookies | Ktor", "og:site_name": "Ktor Help", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-cookies.html", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.806908712", "ogUrl": "https://ktor.io/docs/3.1.1/client-cookies.html", "og:description": "", "twitter:site": "@JetBrainsKtor", "og:title": "Cookies | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Cookies | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogLocale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "cad97b93-2f2e-4c16-8f2b-061e867eb932", "sourceURL": "https://ktor.io/docs/client-cookies.html", "url": "https://ktor.io/docs/client-cookies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\n`HttpCookies` only requires the [ktor-client-core](https://ktor.io/docs/client-dependencies.html) artifact and doesn't need any specific dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-cookies.html", "title": "Client Plugin Cookies", "description": "The Ktor client allows you to handle cookies manually and automatically, providing functions to append cookies to requests and parse Set-Cookie headers from responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:31:17", "type": "section_detail", "page_metadata": {"title": "Cookies | Ktor Documentation", "ogTitle": "Cookies | Ktor", "og:site_name": "Ktor Help", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-cookies.html", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.806908712", "ogUrl": "https://ktor.io/docs/3.1.1/client-cookies.html", "og:description": "", "twitter:site": "@JetBrainsKtor", "og:title": "Cookies | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Cookies | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogLocale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "cad97b93-2f2e-4c16-8f2b-061e867eb932", "sourceURL": "https://ktor.io/docs/client-cookies.html", "url": "https://ktor.io/docs/client-cookies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install and configure httpcookies in ktor?\n\nAssistant: To install and configure httpcookies in ktor, here's what you do:\nTo install `HttpCookies`, pass it to the `install` function inside a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```\nval client = HttpClient(CIO) {\n    install(HttpCookies)\n}\n```\n\nThis is enough to enable the Ktor client to keep cookies between requests. You can find the full example here: [client-cookies](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-cookies).\n\nThe `HttpCookies` plugin also allows you to add a specific set of cookies to each request by using `ConstantCookiesStorage`. This might be useful in a test case that verifies a server response. The example below shows how to add a specified cookie to all requests for a specific domain:\n\n```\nval client = HttpClient(CIO) {\n    install(HttpCookies) {\n        storage = ConstantCookiesStorage(Cookie(name = \"user_name\", value = \"jetbrains\", domain = \"0.0.0.0\"))\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-cookies.html", "title": "Client Plugin Cookies", "description": "The Ktor client allows you to handle cookies manually and automatically, providing functions to append cookies to requests and parse Set-Cookie headers from responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:31:17", "type": "section_detail", "page_metadata": {"title": "Cookies | Ktor Documentation", "ogTitle": "Cookies | Ktor", "og:site_name": "Ktor Help", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-cookies.html", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.806908712", "ogUrl": "https://ktor.io/docs/3.1.1/client-cookies.html", "og:description": "", "twitter:site": "@JetBrainsKtor", "og:title": "Cookies | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Cookies | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogLocale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "cad97b93-2f2e-4c16-8f2b-061e867eb932", "sourceURL": "https://ktor.io/docs/client-cookies.html", "url": "https://ktor.io/docs/client-cookies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I get cookies in ktor?\n\nAssistant: To get cookies in ktor, here's what you do:\nThe client provides the `cookies` function to obtain all the cookies for the specified URL:\n\n```\nclient.cookies(\"http://0.0.0.0:8080/\")\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-cookies.html", "title": "Client Plugin Cookies", "description": "The Ktor client allows you to handle cookies manually and automatically, providing functions to append cookies to requests and parse Set-Cookie headers from responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:31:17", "type": "section_detail", "page_metadata": {"title": "Cookies | Ktor Documentation", "ogTitle": "Cookies | Ktor", "og:site_name": "Ktor Help", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-cookies.html", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.806908712", "ogUrl": "https://ktor.io/docs/3.1.1/client-cookies.html", "og:description": "", "twitter:site": "@JetBrainsKtor", "og:title": "Cookies | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Cookies | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogLocale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "cad97b93-2f2e-4c16-8f2b-061e867eb932", "sourceURL": "https://ktor.io/docs/client-cookies.html", "url": "https://ktor.io/docs/client-cookies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I custom cookie storage in ktor?\n\nAssistant: To custom cookie storage in ktor, here's what you do:\nIf required, you can create a custom cookie storage by implementing the [CookiesStorage](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.cookies/-cookies-storage/index.html) interface:\n\n```\nval client = HttpClient(CIO) {\n    install(HttpCookies) {\n        storage = CustomCookiesStorage()\n    }\n}\n\npublic class CustomCookiesStorage : CookiesStorage {\n    // ...\n}\n```\n\nYou can use [AcceptAllCookiesStorage](https://github.com/ktorio/ktor/blob/main/ktor-client/ktor-client-core/common/src/io/ktor/client/plugins/cookies/AcceptAllCookiesStorage.kt) as a reference..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-cookies.html", "title": "Client Plugin Cookies", "description": "The Ktor client allows you to handle cookies manually and automatically, providing functions to append cookies to requests and parse Set-Cookie headers from responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:31:17", "type": "section_detail", "page_metadata": {"title": "Cookies | Ktor Documentation", "ogTitle": "Cookies | Ktor", "og:site_name": "Ktor Help", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-cookies.html", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.806908712", "ogUrl": "https://ktor.io/docs/3.1.1/client-cookies.html", "og:description": "", "twitter:site": "@JetBrainsKtor", "og:title": "Cookies | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Cookies | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogLocale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "cad97b93-2f2e-4c16-8f2b-061e867eb932", "sourceURL": "https://ktor.io/docs/client-cookies.html", "url": "https://ktor.io/docs/client-cookies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Cookies in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install HttpCookies**:\n\n```yaml\nval client = HttpClient(CIO) {\n    install(HttpCookies)\n}\n```\n\nThis snippet shows you how to install httpcookies, which is an important aspect of client plugin cookies.\n\n**Add a specified cookie to all requests**:\n\n```yaml\nval client = HttpClient(CIO) {\n    install(HttpCookies) {\n        storage = ConstantCookiesStorage(Cookie(name = \"user_name\", value = \"jetbrains\", domain = \"0.0.0.0\"))\n    }\n}\n```\n\nThis snippet shows you how to add a specified cookie to all requests, which is an important aspect of client plugin cookies.\n\n**Get cookies for a specified URL**:\n\n```yaml\nclient.cookies(\"http://0.0.0.0:8080/\")\n```\n\nThis snippet shows you how to get cookies for a specified url, which is an important aspect of client plugin cookies.\n\n**Custom cookie storage implementation**:\n\n```yaml\nval client = HttpClient(CIO) {\n    install(HttpCookies) {\n        storage = CustomCookiesStorage()\n    }\n}\n\npublic class CustomCookiesStorage : CookiesStorage {\n    // ...\n}\n```\n\nThis snippet shows you how to custom cookie storage implementation, which is an important aspect of client plugin cookies.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-cookies.html", "title": "Client Plugin Cookies", "description": "The Ktor client allows you to handle cookies manually and automatically, providing functions to append cookies to requests and parse Set-Cookie headers from responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:31:17", "type": "code_examples", "page_metadata": {"title": "Cookies | Ktor Documentation", "ogTitle": "Cookies | Ktor", "og:site_name": "Ktor Help", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-cookies.html", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.806908712", "ogUrl": "https://ktor.io/docs/3.1.1/client-cookies.html", "og:description": "", "twitter:site": "@JetBrainsKtor", "og:title": "Cookies | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Cookies | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogLocale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "cad97b93-2f2e-4c16-8f2b-061e867eb932", "sourceURL": "https://ktor.io/docs/client-cookies.html", "url": "https://ktor.io/docs/client-cookies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Cookies in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `cookie` function to append cookies to specific requests.\n\nUtilize the `setCookie` function to parse `Set-Cookie` headers from responses.\n\nImplement a custom cookie storage if the default in-memory storage does not meet your needs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-cookies.html", "title": "Client Plugin Cookies", "description": "The Ktor client allows you to handle cookies manually and automatically, providing functions to append cookies to requests and parse Set-Cookie headers from responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:31:17", "type": "best_practices", "page_metadata": {"title": "Cookies | Ktor Documentation", "ogTitle": "Cookies | Ktor", "og:site_name": "Ktor Help", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-cookies.html", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:locale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:03.806908712", "ogUrl": "https://ktor.io/docs/3.1.1/client-cookies.html", "og:description": "", "twitter:site": "@JetBrainsKtor", "og:title": "Cookies | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Cookies | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "language": "en-US", "ogLocale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "cad97b93-2f2e-4c16-8f2b-061e867eb932", "sourceURL": "https://ktor.io/docs/client-cookies.html", "url": "https://ktor.io/docs/client-cookies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Making requests is in ktor?\n\nAssistant: Sure, I'd be happy to explain Making requests in ktor.\n\n# Making requests\n\nThis page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.Here's a quick rundown of what this is about:\n\n## Making requests\n\nAfter [setting up the client](https://ktor.io/docs/client-create-and-configure.html), you can make HTTP requests. The main way of making HTTP requests is the [request](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/request.html) function that can take a URL as a parameter. Inside this function, you can configure various request parameters:\n\n- Specify an HTTP method, such as `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, or `PATCH`.\n\n- Specify a URL as a string or configure URL components (a domain, a path, query parameters, etc.) separately.\n\n- Add headers and cookies.\n\n- Set the body of a request, for example, a plain text, a data object, or form parameters.\n\nThese parameters are exposed by the [HttpRequestBuilder](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/-http-request-builder/index.html) class.\n\n```kotlin\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\n\nval response: HttpResponse = client.request(\"https://ktor.io/\") {\n  // Configure request parameters exposed by HttpRequestBuilder\n}\n```\n\nNote that this function allows you to receive a response as an `HttpResponse` object. `HttpResponse` exposes the API required to get a response body in various ways (a string, a JSON object, etc.) and obtain response parameters, such as a status code, content type, headers, and so on. You can learn more from the [Receiving responses](https://ktor.io/docs/client-responses.html) topic.\n\n## Specify an HTTP method\n\nWhen calling the `request` function, you can specify the desired HTTP method using the `method` property:\n\n```kotlin\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\n\nval response: HttpResponse = client.request(\"https://ktor.io/\") {\n    method = HttpMethod.Get\n}\n```\n\nIn addition to the `request` function, `HttpClient` provides specific functions for basic HTTP methods: [get](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/get.html), [post](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/post.html), [put](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/put.html), and so on. For example, you can replace the above request with the following code:\n\n```kotlin\nval response: HttpResponse = client.get(\"https://ktor.io/docs/welcome.html\")\n```\n\n## Specify a request URL\n\nThe Ktor client allows you to configure a request URL in the following ways:\n\n- Pass the entire URL string\n\n```kotlin\nval response: HttpResponse = client.get(\"https://ktor.io/docs/welcome.html\")\n```\n\n- Configure URL components separately\n\n```kotlin\nclient.get {\n      url {\n          protocol = URLProtocol.HTTPS\n          host = \"ktor.io\"\n          path(\"docs/welcome.html\")\n      }\n}\n```\n\nIn this case, the `url` parameter exposed by `HttpRequestBuilder` is used. This parameter accepts [URLBuilder](https://api.ktor.io/ktor-http/io.ktor.http/-u-r-l-builder/index.html) and provides more flexibility in building URLs.\n\n## Path segments\n\nIn the previous example, we've specified the entire URL path using the `URLBuilder.path` property. You can also pass individual path segments using the `appendPathSegments` function.\n\n```kotlin\nclient.get(\"https://ktor.io\") {\n    url {\n        appendPathSegments(\"docs\", \"welcome.html\")\n    }\n}\n```\n\nNote that `appendPathSegments` [encodes](https://en.wikipedia.org/wiki/Percent-encoding) path segments. To disable encoding, use `appendEncodedPathSegments`.\n\n## Query parameters\n\nTo add query string parameters, use the `URLBuilder.parameters` property:\n\n```kotlin\nclient.get(\"https://ktor.io\") {\n    url {\n        parameters.append(\"token\", \"abc123\")\n    }\n}\n```\n\nNote that `parameters` [encodes](https://en.wikipedia.org/wiki/Percent-encoding) query parameters. To disable encoding, use `encodedParameters`.\n\n## URL fragment\n\nA hash mark `#` introduces the optional fragment near the end of the URL. You can configure a URL fragment using the `fragment` property.\n\n```kotlin\nclient.get(\"https://ktor.io\") {\n    url {\n        fragment = \"some_anchor\"\n    }\n}\n```\n\nNote that `fragment` [encodes](https://en.wikipedia.org/wiki/Percent-encoding) a URL fragment. To disable encoding, use `encodedFragment`.\n\n## Set request parameters\n\nIn this section, we'll see how to specify various request parameters, including an HTTP method, headers, and cookies. If you need to configure some default parameters for all requests of a specific client, use the [DefaultRequest](https://ktor.io/docs/client-default-request.html) plugin.\n\n## Headers\n\nTo add headers to the request, you can use the following ways:\n\n- The [headers](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/headers.html) function allows you to add several headers at once:\n\n```kotlin\nclient.get(\"https://ktor.io\") {\n      headers {\n          append(HttpHeaders.Accept, \"text/html\")\n          append(HttpHeaders.Authorization, \"abc123\")\n          append(HttpHeaders.UserAgent, \"ktor client\")\n      }\n}\n```\n\n- The [header](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/header.html) function allows you to append a single header.\n- The `basicAuth` and `bearerAuth` functions add the `Authorization` header with a corresponding HTTP scheme.\n\n## Cookies\n\nTo send cookies, use the [cookie](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/cookie.html) function:\n\n```kotlin\nclient.get(\"https://ktor.io\") {\n    cookie(name = \"user_name\", value = \"jetbrains\", expires = GMTDate(\n        seconds = 0,\n        minutes = 0,\n        hours = 10,\n        dayOfMonth = 1,\n        month = Month.APRIL,\n        year = 2023\n    ))\n}\n```\n\nKtor also provides the [HttpCookies](https://ktor.io/docs/client-cookies.html) plugin that allows you to keep cookies between calls. If this plugin is installed, cookies added using the `cookie` function are ignored.\n\n## Set request body\n\nTo set the body of a request, you need to call the `setBody` function exposed by [HttpRequestBuilder](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/-http-request-builder/index.html). This function accepts different types of payloads, including plain text, arbitrary class instances, form data, byte arrays, and so on. Below, we'll take a look at several examples.\n\n## Text\n\nSending plain text as body can be implemented in the following way:\n\n```kotlin\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\n\nval response: HttpResponse = client.post(\"http://localhost:8080/post\") {\n    setBody(\"Body content\")\n}\n```\n\n## Objects\n\nWith the enabled [ContentNegotiation](https://ktor.io/docs/client-serialization.html) plugin, you can send a class instance within a request body as JSON. To do this, pass a class instance to the `setBody` function and set the content type to `application/json` using the [contentType](https://api.ktor.io/ktor-http/io.ktor.http/content-type.html) function:\n\n```kotlin\nval response: HttpResponse = client.post(\"http://localhost:8080/customer\") {\n    contentType(ContentType.Application.Json)\n    setBody(Customer(3, \"Jet\", \"Brains\"))\n}\n```\n\n## Form parameters\n\nThe Ktor client provides the [submitForm](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request.forms/submit-form.html) function for sending form parameters using both `x-www-form-urlencoded` and `multipart/form-data` types. The example below shows how to send form parameters encoded as `multipart/form-data`:\n\n- `url` specifies a URL for making a request.\n- `formParameters` a set of form parameters built using `parameters`.\n\n```kotlin\nval client = HttpClient(CIO)\nval response: HttpResponse = client.submitForm(\n    url = \"http://localhost:8080/signup\",\n    formParameters = parameters {\n        append(\"username\", \"JetBrains\")\n        append(\"email\", \"example@jetbrains.com\")\n        append(\"password\", \"foobar\")\n        append(\"confirmation\", \"foobar\")\n    }\n)\n```\n\n## Upload a file\n\nIf you need to send a file with a form, you can use the following approaches:\n\n- Use the [submitFormWithBinaryData](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request.forms/submit-form-with-binary-data.html) function. In this case, a boundary will be generated automatically.\n- Call the `post` function and pass the [MultiPartFormDataContent](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request.forms/-multi-part-form-data-content/index.html) instance to the `setBody` function. Note that the `MultiPartFormDataContent` constructor also allows you to pass a boundary value.\n\nFor both approaches, you need to build form data using the [formData](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request.forms/form-data.html) function.\n\n## Binary data\n\nTo send binary data with the `application/octet-stream` content type, pass the [ByteReadChannel](https://api.ktor.io/ktor-io/io.ktor.utils.io/-byte-read-channel/index.html) instance to the `setBody` function. For example, you can use the [File.readChannel](https://api.ktor.io/ktor-utils/io.ktor.util.cio/read-channel.html) function to open a read channel for a file and fill it:\n\n```kotlin\nval response = client.post(\"http://0.0.0.0:8080/upload\") {\n    setBody(File(\"ktor_logo.png\").readChannel())\n}\n```\n\n## Parallel requests\n\nWhen sending two requests at once, the client suspends the second request execution until the first one is finished. If you need to perform several requests at once, you can use [launch](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html) or [async](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html) functions. The code snippet below shows how to perform two requests asynchronously:\n\n```kotlin\nrunBlocking {\n    // Parallel requests\n    val firstRequest: Deferred<String> = async { client.get(\"http://localhost:8080/path1\").bodyAsText() }\n    val secondRequest: Deferred<String> = async { client.get(\"http://localhost:8080/path2\").bodyAsText() }\n    val firstRequestContent = firstRequest.await()\n    val secondRequestContent = secondRequest.await()\n}\n```\n\n## Cancel a request\n\nIf you need to cancel a request, you can cancel a coroutine that runs this request. The [launch](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html) function returns a `Job` that can be used to cancel the running coroutine:\n\n```kotlin\nimport kotlinx.coroutines.*\n\nval client = HttpClient(CIO)\nval job = launch {\n    val requestContent: String = client.get(\"http://localhost:8080\")\n}\njob.cancel()\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "overview", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I making requests in ktor?\n\nAssistant: To making requests in ktor, here's what you do:\nAfter [setting up the client](https://ktor.io/docs/client-create-and-configure.html), you can make HTTP requests. The main way of making HTTP requests is the [request](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/request.html) function that can take a URL as a parameter. Inside this function, you can configure various request parameters:\n\n- Specify an HTTP method, such as `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, or `PATCH`.\n\n- Specify a URL as a string or configure URL components (a domain, a path, query parameters, etc.) separately.\n\n- Add headers and cookies.\n\n- Set the body of a request, for example, a plain text, a data object, or form parameters.\n\nThese parameters are exposed by the [HttpRequestBuilder](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/-http-request-builder/index.html) class.\n\n```kotlin\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\n\nval response: HttpResponse = client.request(\"https://ktor.io/\") {\n  // Configure request parameters exposed by HttpRequestBuilder\n}\n```\n\nNote that this function allows you to receive a response as an `HttpResponse` object. `HttpResponse` exposes the API required to get a response body in various ways (a string, a JSON object, etc.) and obtain response parameters, such as a status code, content type, headers, and so on. You can learn more from the [Receiving responses](https://ktor.io/docs/client-responses.html) topic..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I specify an http method in ktor?\n\nAssistant: To specify an http method in ktor, here's what you do:\nWhen calling the `request` function, you can specify the desired HTTP method using the `method` property:\n\n```kotlin\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\n\nval response: HttpResponse = client.request(\"https://ktor.io/\") {\n    method = HttpMethod.Get\n}\n```\n\nIn addition to the `request` function, `HttpClient` provides specific functions for basic HTTP methods: [get](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/get.html), [post](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/post.html), [put](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/put.html), and so on. For example, you can replace the above request with the following code:\n\n```kotlin\nval response: HttpResponse = client.get(\"https://ktor.io/docs/welcome.html\")\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I specify a request url in ktor?\n\nAssistant: To specify a request url in ktor, here's what you do:\nThe Ktor client allows you to configure a request URL in the following ways:\n\n- Pass the entire URL string\n\n```kotlin\nval response: HttpResponse = client.get(\"https://ktor.io/docs/welcome.html\")\n```\n\n- Configure URL components separately\n\n```kotlin\nclient.get {\n      url {\n          protocol = URLProtocol.HTTPS\n          host = \"ktor.io\"\n          path(\"docs/welcome.html\")\n      }\n}\n```\n\nIn this case, the `url` parameter exposed by `HttpRequestBuilder` is used. This parameter accepts [URLBuilder](https://api.ktor.io/ktor-http/io.ktor.http/-u-r-l-builder/index.html) and provides more flexibility in building URLs..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I path segments in ktor?\n\nAssistant: To path segments in ktor, here's what you do:\nIn the previous example, we've specified the entire URL path using the `URLBuilder.path` property. You can also pass individual path segments using the `appendPathSegments` function.\n\n```kotlin\nclient.get(\"https://ktor.io\") {\n    url {\n        appendPathSegments(\"docs\", \"welcome.html\")\n    }\n}\n```\n\nNote that `appendPathSegments` [encodes](https://en.wikipedia.org/wiki/Percent-encoding) path segments. To disable encoding, use `appendEncodedPathSegments`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I query parameters in ktor?\n\nAssistant: To query parameters in ktor, here's what you do:\nTo add query string parameters, use the `URLBuilder.parameters` property:\n\n```kotlin\nclient.get(\"https://ktor.io\") {\n    url {\n        parameters.append(\"token\", \"abc123\")\n    }\n}\n```\n\nNote that `parameters` [encodes](https://en.wikipedia.org/wiki/Percent-encoding) query parameters. To disable encoding, use `encodedParameters`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I url fragment in ktor?\n\nAssistant: To url fragment in ktor, here's what you do:\nA hash mark `#` introduces the optional fragment near the end of the URL. You can configure a URL fragment using the `fragment` property.\n\n```kotlin\nclient.get(\"https://ktor.io\") {\n    url {\n        fragment = \"some_anchor\"\n    }\n}\n```\n\nNote that `fragment` [encodes](https://en.wikipedia.org/wiki/Percent-encoding) a URL fragment. To disable encoding, use `encodedFragment`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I set request parameters in ktor?\n\nAssistant: To set request parameters in ktor, here's what you do:\nIn this section, we'll see how to specify various request parameters, including an HTTP method, headers, and cookies. If you need to configure some default parameters for all requests of a specific client, use the [DefaultRequest](https://ktor.io/docs/client-default-request.html) plugin..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I headers in ktor?\n\nAssistant: To headers in ktor, here's what you do:\nTo add headers to the request, you can use the following ways:\n\n- The [headers](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/headers.html) function allows you to add several headers at once:\n\n```kotlin\nclient.get(\"https://ktor.io\") {\n      headers {\n          append(HttpHeaders.Accept, \"text/html\")\n          append(HttpHeaders.Authorization, \"abc123\")\n          append(HttpHeaders.UserAgent, \"ktor client\")\n      }\n}\n```\n\n- The [header](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/header.html) function allows you to append a single header.\n- The `basicAuth` and `bearerAuth` functions add the `Authorization` header with a corresponding HTTP scheme..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I cookies in ktor?\n\nAssistant: To cookies in ktor, here's what you do:\nTo send cookies, use the [cookie](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/cookie.html) function:\n\n```kotlin\nclient.get(\"https://ktor.io\") {\n    cookie(name = \"user_name\", value = \"jetbrains\", expires = GMTDate(\n        seconds = 0,\n        minutes = 0,\n        hours = 10,\n        dayOfMonth = 1,\n        month = Month.APRIL,\n        year = 2023\n    ))\n}\n```\n\nKtor also provides the [HttpCookies](https://ktor.io/docs/client-cookies.html) plugin that allows you to keep cookies between calls. If this plugin is installed, cookies added using the `cookie` function are ignored..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I set request body in ktor?\n\nAssistant: To set request body in ktor, here's what you do:\nTo set the body of a request, you need to call the `setBody` function exposed by [HttpRequestBuilder](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/-http-request-builder/index.html). This function accepts different types of payloads, including plain text, arbitrary class instances, form data, byte arrays, and so on. Below, we'll take a look at several examples..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I text in ktor?\n\nAssistant: To text in ktor, here's what you do:\nSending plain text as body can be implemented in the following way:\n\n```kotlin\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\n\nval response: HttpResponse = client.post(\"http://localhost:8080/post\") {\n    setBody(\"Body content\")\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I objects in ktor?\n\nAssistant: To objects in ktor, here's what you do:\nWith the enabled [ContentNegotiation](https://ktor.io/docs/client-serialization.html) plugin, you can send a class instance within a request body as JSON. To do this, pass a class instance to the `setBody` function and set the content type to `application/json` using the [contentType](https://api.ktor.io/ktor-http/io.ktor.http/content-type.html) function:\n\n```kotlin\nval response: HttpResponse = client.post(\"http://localhost:8080/customer\") {\n    contentType(ContentType.Application.Json)\n    setBody(Customer(3, \"Jet\", \"Brains\"))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I form parameters in ktor?\n\nAssistant: To form parameters in ktor, here's what you do:\nThe Ktor client provides the [submitForm](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request.forms/submit-form.html) function for sending form parameters using both `x-www-form-urlencoded` and `multipart/form-data` types. The example below shows how to send form parameters encoded as `multipart/form-data`:\n\n- `url` specifies a URL for making a request.\n- `formParameters` a set of form parameters built using `parameters`.\n\n```kotlin\nval client = HttpClient(CIO)\nval response: HttpResponse = client.submitForm(\n    url = \"http://localhost:8080/signup\",\n    formParameters = parameters {\n        append(\"username\", \"JetBrains\")\n        append(\"email\", \"example@jetbrains.com\")\n        append(\"password\", \"foobar\")\n        append(\"confirmation\", \"foobar\")\n    }\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I upload a file in ktor?\n\nAssistant: To upload a file in ktor, here's what you do:\nIf you need to send a file with a form, you can use the following approaches:\n\n- Use the [submitFormWithBinaryData](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request.forms/submit-form-with-binary-data.html) function. In this case, a boundary will be generated automatically.\n- Call the `post` function and pass the [MultiPartFormDataContent](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request.forms/-multi-part-form-data-content/index.html) instance to the `setBody` function. Note that the `MultiPartFormDataContent` constructor also allows you to pass a boundary value.\n\nFor both approaches, you need to build form data using the [formData](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request.forms/form-data.html) function..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I binary data in ktor?\n\nAssistant: To binary data in ktor, here's what you do:\nTo send binary data with the `application/octet-stream` content type, pass the [ByteReadChannel](https://api.ktor.io/ktor-io/io.ktor.utils.io/-byte-read-channel/index.html) instance to the `setBody` function. For example, you can use the [File.readChannel](https://api.ktor.io/ktor-utils/io.ktor.util.cio/read-channel.html) function to open a read channel for a file and fill it:\n\n```kotlin\nval response = client.post(\"http://0.0.0.0:8080/upload\") {\n    setBody(File(\"ktor_logo.png\").readChannel())\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I parallel requests in ktor?\n\nAssistant: To parallel requests in ktor, here's what you do:\nWhen sending two requests at once, the client suspends the second request execution until the first one is finished. If you need to perform several requests at once, you can use [launch](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html) or [async](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html) functions. The code snippet below shows how to perform two requests asynchronously:\n\n```kotlin\nrunBlocking {\n    // Parallel requests\n    val firstRequest: Deferred<String> = async { client.get(\"http://localhost:8080/path1\").bodyAsText() }\n    val secondRequest: Deferred<String> = async { client.get(\"http://localhost:8080/path2\").bodyAsText() }\n    val firstRequestContent = firstRequest.await()\n    val secondRequestContent = secondRequest.await()\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I cancel a request in ktor?\n\nAssistant: To cancel a request in ktor, here's what you do:\nIf you need to cancel a request, you can cancel a coroutine that runs this request. The [launch](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html) function returns a `Job` that can be used to cancel the running coroutine:\n\n```kotlin\nimport kotlinx.coroutines.*\n\nval client = HttpClient(CIO)\nval job = launch {\n    val requestContent: String = client.get(\"http://localhost:8080\")\n}\njob.cancel()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "section_detail", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Making requests in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic request example**:\n\n```yaml\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\n\nval response: HttpResponse = client.request(\"https://ktor.io/\") {\n  // Configure request parameters exposed by HttpRequestBuilder\n}\n```\n\nThis snippet shows you how to basic request example, which is an important aspect of making requests.\n\n**Specify HTTP method example**:\n\n```yaml\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\n\nval response: HttpResponse = client.request(\"https://ktor.io/\") {\n    method = HttpMethod.Get\n}\n```\n\nThis snippet shows you how to specify http method example, which is an important aspect of making requests.\n\n**Specify request URL example**:\n\n```yaml\nval response: HttpResponse = client.get(\"https://ktor.io/docs/welcome.html\")\n```\n\nThis snippet shows you how to specify request url example, which is an important aspect of making requests.\n\n**Configure URL components example**:\n\n```yaml\nclient.get {\n      url {\n          protocol = URLProtocol.HTTPS\n          host = \"ktor.io\"\n          path(\"docs/welcome.html\")\n      }\n}\n```\n\nThis snippet shows you how to configure url components example, which is an important aspect of making requests.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "code_examples", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Making requests in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\n`request` is a suspending function, so requests should be executed only from a coroutine or another suspend function.\n\nTo configure a base URL for all requests, you can use the [DefaultRequest](https://ktor.io/docs/client-default-request.html#url) plugin.\n\nFor advanced authentication configuration, refer to [Authentication and authorization in Ktor Client](https://ktor.io/docs/client-auth.html).\n\nTo send form parameters encoded in URL, set `encodeInQuery` to `true.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-requests.html", "title": "Making requests", "description": "This page covers how to make HTTP requests using the Ktor client, including specifying HTTP methods, configuring URLs, setting request parameters, and handling responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-03-01 03:32:08", "type": "best_practices", "page_metadata": {"og:description": "", "ogTitle": "Making requests | Ktor", "build-number": "707", "og:title": "Making requests | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "title": "Making requests | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-requests.html", "og:url": "https://ktor.io/docs/3.1.1/client-requests.html", "twitter:description": "", "ogDescription": "", "built-on": "2025-02-26T14:01:06.385496665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Making requests | Ktor", "scrapeId": "db901aab-5f70-4759-aef4-344db03d11d0", "sourceURL": "https://ktor.io/docs/client-requests.html", "url": "https://ktor.io/docs/client-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what AWS Elastic Beanstalk is in ktor?\n\nAssistant: Sure, I'd be happy to explain AWS Elastic Beanstalk in ktor.\n\n# AWS Elastic Beanstalk\n\nThis tutorial shows how to prepare and deploy a Ktor application to AWS Elastic Beanstalk.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nBefore starting this tutorial, you need to create an AWS account.\n\n## Clone a sample application\n\nTo open a sample application, follow the steps below:\n\n1. Clone a Ktor documentation repository and open the [codeSnippets](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets) project.\n\n2. Open the [embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/embedded-server) or [engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main) sample. These samples demonstrate different approaches to [creating and configuring a Ktor server](https://ktor.io/docs/server-create-and-configure.html): in code or by using a configuration file. The only difference in deploying these projects is how to [specify a port](https://ktor.io/docs/elastic-beanstalk.html#port) used to listen for incoming requests.\n\n## Prepare an application\n\n### Step 1: Configure a port\n\nFirst, you need to specify a port used to listen for incoming requests. Elastic Beanstalk forwards requests to your application on port 5000. Optionally, you can override the default port by setting the `PORT` environment variable. Depending on the way used to [configure a Ktor server](https://ktor.io/docs/server-create-and-configure.html), you can configure a port in one of the following ways:\n\n- If you've chosen the [embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/embedded-server) sample with server configuration specified in code, you can obtain the environment variable value using `System.getenv` or use the default 5000 value in a case an environment variable is not specified. Open the `Application.kt` file placed in the `src/main/kotlin/com/example` folder and change the `port` parameter value of the `embeddedServer` function as shown below:\n\n```\nfun main() {\n     embeddedServer(Netty, port = (System.getenv(\"PORT\")?:\"5000\").toInt()) {\n     // ...\n     }.start(wait = true)\n}\n```\n\n- If you've chosen the [engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main) sample with server configuration specified in the `application.conf` file, you can assign the environment variable to the `port` parameter by using the `${ENV}` syntax. Open the `application.conf` file placed in `src/main/resources` and update it as shown below:\n\n```\nktor {\n      deployment {\n          port = 5000\n          port = ${?PORT}\n      }\n}\n```\n\n### Step 2: Apply the Ktor plugin\n\nThis tutorial shows how to deploy the application to Elastic Beanstalk using a [fat JAR](https://ktor.io/docs/server-fatjar.html). To generate fat JARs, you need to apply the Ktor plugin. Open the `build.gradle.kts` file and add the plugin to the `plugins` block:\n\n```\nplugins {\n    id(\"io.ktor.plugin\") version \"3.1.1\"\n}\n```\n\nThen, make sure that the [main application class](https://ktor.io/docs/server-dependencies.html#create-entry-point) is configured:\n\n```\napplication {\n    mainClass.set(\"io.ktor.server.netty.EngineMain\")\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/elastic-beanstalk.html", "title": "AWS Elastic Beanstalk", "description": "This tutorial shows how to prepare and deploy a Ktor application to AWS Elastic Beanstalk.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:32:41", "type": "overview", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "ogUrl": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "language": "en-US", "ogDescription": "", "ogTitle": "AWS Elastic Beanstalk | Ktor", "ogSiteName": "Ktor Help", "og:title": "AWS Elastic Beanstalk | Ktor", "build-number": "707", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "AWS Elastic Beanstalk | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.748981975", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "title": "AWS Elastic Beanstalk | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "b67cbe03-d8ee-45d7-859e-03f6f21c5b4a", "sourceURL": "https://ktor.io/docs/elastic-beanstalk.html", "url": "https://ktor.io/docs/elastic-beanstalk.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nBefore starting this tutorial, you need to create an AWS account..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/elastic-beanstalk.html", "title": "AWS Elastic Beanstalk", "description": "This tutorial shows how to prepare and deploy a Ktor application to AWS Elastic Beanstalk.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:32:41", "type": "section_detail", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "ogUrl": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "language": "en-US", "ogDescription": "", "ogTitle": "AWS Elastic Beanstalk | Ktor", "ogSiteName": "Ktor Help", "og:title": "AWS Elastic Beanstalk | Ktor", "build-number": "707", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "AWS Elastic Beanstalk | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.748981975", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "title": "AWS Elastic Beanstalk | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "b67cbe03-d8ee-45d7-859e-03f6f21c5b4a", "sourceURL": "https://ktor.io/docs/elastic-beanstalk.html", "url": "https://ktor.io/docs/elastic-beanstalk.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I clone a sample application in ktor?\n\nAssistant: To clone a sample application in ktor, here's what you do:\nTo open a sample application, follow the steps below:\n\n1. Clone a Ktor documentation repository and open the [codeSnippets](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets) project.\n\n2. Open the [embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/embedded-server) or [engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main) sample. These samples demonstrate different approaches to [creating and configuring a Ktor server](https://ktor.io/docs/server-create-and-configure.html): in code or by using a configuration file. The only difference in deploying these projects is how to [specify a port](https://ktor.io/docs/elastic-beanstalk.html#port) used to listen for incoming requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/elastic-beanstalk.html", "title": "AWS Elastic Beanstalk", "description": "This tutorial shows how to prepare and deploy a Ktor application to AWS Elastic Beanstalk.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:32:41", "type": "section_detail", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "ogUrl": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "language": "en-US", "ogDescription": "", "ogTitle": "AWS Elastic Beanstalk | Ktor", "ogSiteName": "Ktor Help", "og:title": "AWS Elastic Beanstalk | Ktor", "build-number": "707", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "AWS Elastic Beanstalk | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.748981975", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "title": "AWS Elastic Beanstalk | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "b67cbe03-d8ee-45d7-859e-03f6f21c5b4a", "sourceURL": "https://ktor.io/docs/elastic-beanstalk.html", "url": "https://ktor.io/docs/elastic-beanstalk.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prepare an application in ktor?\n\nAssistant: To prepare an application in ktor, here's what you do:\n### Step 1: Configure a port\n\nFirst, you need to specify a port used to listen for incoming requests. Elastic Beanstalk forwards requests to your application on port 5000. Optionally, you can override the default port by setting the `PORT` environment variable. Depending on the way used to [configure a Ktor server](https://ktor.io/docs/server-create-and-configure.html), you can configure a port in one of the following ways:\n\n- If you've chosen the [embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/embedded-server) sample with server configuration specified in code, you can obtain the environment variable value using `System.getenv` or use the default 5000 value in a case an environment variable is not specified. Open the `Application.kt` file placed in the `src/main/kotlin/com/example` folder and change the `port` parameter value of the `embeddedServer` function as shown below:\n\n```\nfun main() {\n     embeddedServer(Netty, port = (System.getenv(\"PORT\")?:\"5000\").toInt()) {\n     // ...\n     }.start(wait = true)\n}\n```\n\n- If you've chosen the [engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main) sample with server configuration specified in the `application.conf` file, you can assign the environment variable to the `port` parameter by using the `${ENV}` syntax. Open the `application.conf` file placed in `src/main/resources` and update it as shown below:\n\n```\nktor {\n      deployment {\n          port = 5000\n          port = ${?PORT}\n      }\n}\n```\n\n### Step 2: Apply the Ktor plugin\n\nThis tutorial shows how to deploy the application to Elastic Beanstalk using a [fat JAR](https://ktor.io/docs/server-fatjar.html). To generate fat JARs, you need to apply the Ktor plugin. Open the `build.gradle.kts` file and add the plugin to the `plugins` block:\n\n```\nplugins {\n    id(\"io.ktor.plugin\") version \"3.1.1\"\n}\n```\n\nThen, make sure that the [main application class](https://ktor.io/docs/server-dependencies.html#create-entry-point) is configured:\n\n```\napplication {\n    mainClass.set(\"io.ktor.server.netty.EngineMain\")\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/elastic-beanstalk.html", "title": "AWS Elastic Beanstalk", "description": "This tutorial shows how to prepare and deploy a Ktor application to AWS Elastic Beanstalk.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:32:41", "type": "section_detail", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "ogUrl": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "language": "en-US", "ogDescription": "", "ogTitle": "AWS Elastic Beanstalk | Ktor", "ogSiteName": "Ktor Help", "og:title": "AWS Elastic Beanstalk | Ktor", "build-number": "707", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "AWS Elastic Beanstalk | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.748981975", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "title": "AWS Elastic Beanstalk | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "b67cbe03-d8ee-45d7-859e-03f6f21c5b4a", "sourceURL": "https://ktor.io/docs/elastic-beanstalk.html", "url": "https://ktor.io/docs/elastic-beanstalk.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for AWS Elastic Beanstalk in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure Port in embedded-server Sample**:\n\n```yaml\nfun main() {\n     embeddedServer(Netty, port = (System.getenv(\"PORT\")?:\"5000\").toInt()) {\n     // ...\n     }.start(wait = true)\n}\n```\n\nThis snippet shows you how to configure port in embedded-server sample, which is an important aspect of aws elastic beanstalk.\n\n**Configure Port in engine-main Sample**:\n\n```yaml\nktor {\n      deployment {\n          port = 5000\n          port = ${?PORT}\n      }\n}\n```\n\nThis snippet shows you how to configure port in engine-main sample, which is an important aspect of aws elastic beanstalk.\n\n", "metadata": {"source_url": "https://ktor.io/docs/elastic-beanstalk.html", "title": "AWS Elastic Beanstalk", "description": "This tutorial shows how to prepare and deploy a Ktor application to AWS Elastic Beanstalk.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:32:41", "type": "code_examples", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "ogUrl": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "language": "en-US", "ogDescription": "", "ogTitle": "AWS Elastic Beanstalk | Ktor", "ogSiteName": "Ktor Help", "og:title": "AWS Elastic Beanstalk | Ktor", "build-number": "707", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "AWS Elastic Beanstalk | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.748981975", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "title": "AWS Elastic Beanstalk | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "b67cbe03-d8ee-45d7-859e-03f6f21c5b4a", "sourceURL": "https://ktor.io/docs/elastic-beanstalk.html", "url": "https://ktor.io/docs/elastic-beanstalk.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using AWS Elastic Beanstalk in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nLearn more about deploying Java applications from Elastic Beanstalk docs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/elastic-beanstalk.html", "title": "AWS Elastic Beanstalk", "description": "This tutorial shows how to prepare and deploy a Ktor application to AWS Elastic Beanstalk.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:32:41", "type": "best_practices", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "ogUrl": "https://ktor.io/docs/3.1.1/elastic-beanstalk.html", "language": "en-US", "ogDescription": "", "ogTitle": "AWS Elastic Beanstalk | Ktor", "ogSiteName": "Ktor Help", "og:title": "AWS Elastic Beanstalk | Ktor", "build-number": "707", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "AWS Elastic Beanstalk | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.748981975", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "title": "AWS Elastic Beanstalk | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "b67cbe03-d8ee-45d7-859e-03f6f21c5b4a", "sourceURL": "https://ktor.io/docs/elastic-beanstalk.html", "url": "https://ktor.io/docs/elastic-beanstalk.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Creating a server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Creating a server in ktor.\n\n# Creating a server\n\nThis page covers how to create and configure a Ktor server application, including deployment options and server configuration methods.Here's a quick rundown of what this is about:\n\n## Self-contained package\n\nTo deliver a Ktor server application as a self-contained package, you need to create a server first. Server configuration can include different settings: a server engine (such as Netty, Jetty, etc.), various engine-specific options, host and port values, and so on. There are two main approaches in Ktor for creating and running a server:\n\n- The `embeddedServer` function is a simple way to configure server parameters in code and quickly run an application.\n\n- `EngineMain` provides more flexibility to configure a server. You can specify server parameters in a file and change a configuration without recompiling your application. Moreover, you can run your application from a command line and override the required server parameters by passing corresponding command-line arguments.\n\n## Configuration in code\n\nThe `embeddedServer` function is a simple way to configure server parameters in code and quickly run an application. In the code snippet below, it accepts an engine and port as parameters to start a server. In the example below, we run a server with the `Netty` engine and listen on the `8080` port:\n\n```kotlin\npackage com.example\n\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    if (args.isEmpty()) {\n        println(\"Running basic server...\")\n        println(\"Provide the 'configured' argument to run a configured server.\")\n        runBasicServer()\n    }\n\n    when (args[0]) {\n        \"basic\" -> runBasicServer()\n        \"configured\" -> runConfiguredServer()\n        else -> runServerWithCommandLineConfig(args)\n    }\n}\n\nfun runBasicServer() {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n\nfun runConfiguredServer() {\n    embeddedServer(Netty, configure = {\n        connectors.add(EngineConnectorBuilder().apply {\n            host = \"127.0.0.1\"\n            port = 8080\n        })\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n\nfun runServerWithCommandLineConfig(args: Array<String>) {\n    embeddedServer(\n        factory = Netty,\n        configure = {\n            val cliConfig = CommandLineConfig(args)\n            takeFrom(cliConfig.engineConfig)\n            loadCommonConfiguration(cliConfig.rootConfig.environment.config)\n        }\n    ) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nYou can find the full example here: [embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/embedded-server).\n\n## Configuration in a file\n\n`EngineMain` starts a server with the selected engine and loads the application modules specified in the external configuration file placed in the resources directory: application.conf or application.yaml. Besides modules to load, a configuration file can include various server parameters (the `8080` port in the example below).\n\nApplication.kt\n\n```kotlin\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondText(\"Hello, world!\")\n        }\n    }\n}\n```\n\napplication.conf\n\n```hocon\nktor {\n    deployment {\n        port = 8080\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\napplication.yaml\n\n```yaml\nktor:\n    deployment:\n        port: 8080\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n```\n\nYou can find the full examples here: [engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main) and [engine-main-yaml](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main-yaml).\n\n## Servlet\n\nA Ktor application can be run and deployed inside servlet containers that include Tomcat and Jetty. To deploy inside a servlet container, you need to generate a WAR archive and then deploy it to a server or a cloud service that supports WARs.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/create-server.html", "title": "Creating a server", "description": "This page covers how to create and configure a Ktor server application, including deployment options and server configuration methods.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:18", "type": "overview", "page_metadata": {"og:description": "", "title": "Creating a server | Ktor Documentation", "twitter:title": "Creating a server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a server | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "ogDescription": "", "built-on": "2025-02-26T14:01:05.135661557", "ogTitle": "Creating a server | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "build-number": "707", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "7250576f-fed0-49e8-919a-4ea293a4dafe", "sourceURL": "https://ktor.io/docs/create-server.html", "url": "https://ktor.io/docs/server-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I self-contained package in ktor?\n\nAssistant: To self-contained package in ktor, here's what you do:\nTo deliver a Ktor server application as a self-contained package, you need to create a server first. Server configuration can include different settings: a server engine (such as Netty, Jetty, etc.), various engine-specific options, host and port values, and so on. There are two main approaches in Ktor for creating and running a server:\n\n- The `embeddedServer` function is a simple way to configure server parameters in code and quickly run an application.\n\n- `EngineMain` provides more flexibility to configure a server. You can specify server parameters in a file and change a configuration without recompiling your application. Moreover, you can run your application from a command line and override the required server parameters by passing corresponding command-line arguments..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/create-server.html", "title": "Creating a server", "description": "This page covers how to create and configure a Ktor server application, including deployment options and server configuration methods.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:18", "type": "section_detail", "page_metadata": {"og:description": "", "title": "Creating a server | Ktor Documentation", "twitter:title": "Creating a server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a server | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "ogDescription": "", "built-on": "2025-02-26T14:01:05.135661557", "ogTitle": "Creating a server | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "build-number": "707", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "7250576f-fed0-49e8-919a-4ea293a4dafe", "sourceURL": "https://ktor.io/docs/create-server.html", "url": "https://ktor.io/docs/server-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configuration in code in ktor?\n\nAssistant: To configuration in code in ktor, here's what you do:\nThe `embeddedServer` function is a simple way to configure server parameters in code and quickly run an application. In the code snippet below, it accepts an engine and port as parameters to start a server. In the example below, we run a server with the `Netty` engine and listen on the `8080` port:\n\n```kotlin\npackage com.example\n\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    if (args.isEmpty()) {\n        println(\"Running basic server...\")\n        println(\"Provide the 'configured' argument to run a configured server.\")\n        runBasicServer()\n    }\n\n    when (args[0]) {\n        \"basic\" -> runBasicServer()\n        \"configured\" -> runConfiguredServer()\n        else -> runServerWithCommandLineConfig(args)\n    }\n}\n\nfun runBasicServer() {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n\nfun runConfiguredServer() {\n    embeddedServer(Netty, configure = {\n        connectors.add(EngineConnectorBuilder().apply {\n            host = \"127.0.0.1\"\n            port = 8080\n        })\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n\nfun runServerWithCommandLineConfig(args: Array<String>) {\n    embeddedServer(\n        factory = Netty,\n        configure = {\n            val cliConfig = CommandLineConfig(args)\n            takeFrom(cliConfig.engineConfig)\n            loadCommonConfiguration(cliConfig.rootConfig.environment.config)\n        }\n    ) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nYou can find the full example here: [embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/embedded-server)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/create-server.html", "title": "Creating a server", "description": "This page covers how to create and configure a Ktor server application, including deployment options and server configuration methods.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:18", "type": "section_detail", "page_metadata": {"og:description": "", "title": "Creating a server | Ktor Documentation", "twitter:title": "Creating a server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a server | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "ogDescription": "", "built-on": "2025-02-26T14:01:05.135661557", "ogTitle": "Creating a server | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "build-number": "707", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "7250576f-fed0-49e8-919a-4ea293a4dafe", "sourceURL": "https://ktor.io/docs/create-server.html", "url": "https://ktor.io/docs/server-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configuration in a file in ktor?\n\nAssistant: To configuration in a file in ktor, here's what you do:\n`EngineMain` starts a server with the selected engine and loads the application modules specified in the external configuration file placed in the resources directory: application.conf or application.yaml. Besides modules to load, a configuration file can include various server parameters (the `8080` port in the example below).\n\nApplication.kt\n\n```kotlin\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondText(\"Hello, world!\")\n        }\n    }\n}\n```\n\napplication.conf\n\n```hocon\nktor {\n    deployment {\n        port = 8080\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\napplication.yaml\n\n```yaml\nktor:\n    deployment:\n        port: 8080\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n```\n\nYou can find the full examples here: [engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main) and [engine-main-yaml](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main-yaml)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/create-server.html", "title": "Creating a server", "description": "This page covers how to create and configure a Ktor server application, including deployment options and server configuration methods.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:18", "type": "section_detail", "page_metadata": {"og:description": "", "title": "Creating a server | Ktor Documentation", "twitter:title": "Creating a server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a server | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "ogDescription": "", "built-on": "2025-02-26T14:01:05.135661557", "ogTitle": "Creating a server | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "build-number": "707", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "7250576f-fed0-49e8-919a-4ea293a4dafe", "sourceURL": "https://ktor.io/docs/create-server.html", "url": "https://ktor.io/docs/server-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I servlet in ktor?\n\nAssistant: To servlet in ktor, here's what you do:\nA Ktor application can be run and deployed inside servlet containers that include Tomcat and Jetty. To deploy inside a servlet container, you need to generate a WAR archive and then deploy it to a server or a cloud service that supports WARs..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/create-server.html", "title": "Creating a server", "description": "This page covers how to create and configure a Ktor server application, including deployment options and server configuration methods.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:18", "type": "section_detail", "page_metadata": {"og:description": "", "title": "Creating a server | Ktor Documentation", "twitter:title": "Creating a server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a server | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "ogDescription": "", "built-on": "2025-02-26T14:01:05.135661557", "ogTitle": "Creating a server | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "build-number": "707", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "7250576f-fed0-49e8-919a-4ea293a4dafe", "sourceURL": "https://ktor.io/docs/create-server.html", "url": "https://ktor.io/docs/server-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Creating a server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Embedded Server Example**:\n\n```yaml\n```kotlin\npackage com.example\n\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    if (args.isEmpty()) {\n        println(\"Running basic server...\")\n        println(\"Provide the 'configured' argument to run a configured server.\")\n        runBasicServer()\n    }\n\n    when (args[0]) {\n        \"basic\" -> runBasicServer()\n        \"configured\" -> runConfiguredServer()\n        else -> runServerWithCommandLineConfig(args)\n    }\n}\n\nfun runBasicServer() {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n\nfun runConfiguredServer() {\n    embeddedServer(Netty, configure = {\n        connectors.add(EngineConnectorBuilder().apply {\n            host = \"127.0.0.1\"\n            port = 8080\n        })\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n\nfun runServerWithCommandLineConfig(args: Array<String>) {\n    embeddedServer(\n        factory = Netty,\n        configure = {\n            val cliConfig = CommandLineConfig(args)\n            takeFrom(cliConfig.engineConfig)\n            loadCommonConfiguration(cliConfig.rootConfig.environment.config)\n        }\n    ) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n```\n\nThis snippet shows you how to embedded server example, which is an important aspect of creating a server.\n\n**Engine Main Example**:\n\n```yaml\n```kotlin\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondText(\"Hello, world!\")\n        }\n    }\n}\n```\n\napplication.conf\n\n```hocon\nktor {\n    deployment {\n        port = 8080\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\napplication.yaml\n\n```yaml\nktor:\n    deployment:\n        port: 8080\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n```\n```\n\nThis snippet shows you how to engine main example, which is an important aspect of creating a server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/create-server.html", "title": "Creating a server", "description": "This page covers how to create and configure a Ktor server application, including deployment options and server configuration methods.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:18", "type": "code_examples", "page_metadata": {"og:description": "", "title": "Creating a server | Ktor Documentation", "twitter:title": "Creating a server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a server | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "ogDescription": "", "built-on": "2025-02-26T14:01:05.135661557", "ogTitle": "Creating a server | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "build-number": "707", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "7250576f-fed0-49e8-919a-4ea293a4dafe", "sourceURL": "https://ktor.io/docs/create-server.html", "url": "https://ktor.io/docs/server-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Creating a server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConsider how your application will be deployed before creating a Ktor application.\n\nUse the `embeddedServer` function for quick server configuration in code.\n\nUtilize `EngineMain` for more flexible server configuration through external files.\n\nWhen deploying in a servlet container, generate a WAR archive.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/create-server.html", "title": "Creating a server", "description": "This page covers how to create and configure a Ktor server application, including deployment options and server configuration methods.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:36:18", "type": "best_practices", "page_metadata": {"og:description": "", "title": "Creating a server | Ktor Documentation", "twitter:title": "Creating a server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a server | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "ogDescription": "", "built-on": "2025-02-26T14:01:05.135661557", "ogTitle": "Creating a server | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "og:url": "https://ktor.io/docs/3.1.1/server-create-and-configure.html", "build-number": "707", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "7250576f-fed0-49e8-919a-4ea293a4dafe", "sourceURL": "https://ktor.io/docs/create-server.html", "url": "https://ktor.io/docs/server-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin FreeMarker is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin FreeMarker in ktor.\n\n# Server Plugin FreeMarker\n\nKtor allows you to use FreeMarker templates as views within your application by installing the FreeMarker plugin.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `FreeMarker`, you need to include the `ktor-server-freemarker` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-freemarker:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-freemarker:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-freemarker-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install FreeMarker\n\nTo install the `FreeMarker` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `FreeMarker`...\n\n- ... inside the `embeddedServer` function call.\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\n### embeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.freemarker.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(FreeMarker)\n        // ...\n    }.start(wait = true)\n}\n```\n\n### module\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.freemarker.*\n// ...\nfun Application.module() {\n    install(FreeMarker)\n    // ...\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-freemarker.html", "title": "Server Plugin FreeMarker", "description": "Ktor allows you to use FreeMarker templates as views within your application by installing the FreeMarker plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:36:29", "type": "overview", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "title": "FreeMarker | Ktor Documentation", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogTitle": "FreeMarker | Ktor", "ogSiteName": "Ktor Help", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-freemarker.html", "twitter:title": "FreeMarker | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:02.576080339", "og:locale": "en_US", "og:title": "FreeMarker | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:description": "", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-freemarker.html", "scrapeId": "25fde513-1133-4dac-8b71-4918bef97932", "sourceURL": "https://ktor.io/docs/server-freemarker.html", "url": "https://ktor.io/docs/server-freemarker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `FreeMarker`, you need to include the `ktor-server-freemarker` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-freemarker:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-freemarker:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-freemarker-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-freemarker.html", "title": "Server Plugin FreeMarker", "description": "Ktor allows you to use FreeMarker templates as views within your application by installing the FreeMarker plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:36:29", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "title": "FreeMarker | Ktor Documentation", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogTitle": "FreeMarker | Ktor", "ogSiteName": "Ktor Help", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-freemarker.html", "twitter:title": "FreeMarker | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:02.576080339", "og:locale": "en_US", "og:title": "FreeMarker | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:description": "", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-freemarker.html", "scrapeId": "25fde513-1133-4dac-8b71-4918bef97932", "sourceURL": "https://ktor.io/docs/server-freemarker.html", "url": "https://ktor.io/docs/server-freemarker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install freemarker in ktor?\n\nAssistant: To install freemarker in ktor, here's what you do:\nTo install the `FreeMarker` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `FreeMarker`...\n\n- ... inside the `embeddedServer` function call.\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\n### embeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.freemarker.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(FreeMarker)\n        // ...\n    }.start(wait = true)\n}\n```\n\n### module\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.freemarker.*\n// ...\nfun Application.module() {\n    install(FreeMarker)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-freemarker.html", "title": "Server Plugin FreeMarker", "description": "Ktor allows you to use FreeMarker templates as views within your application by installing the FreeMarker plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:36:29", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "title": "FreeMarker | Ktor Documentation", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogTitle": "FreeMarker | Ktor", "ogSiteName": "Ktor Help", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-freemarker.html", "twitter:title": "FreeMarker | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:02.576080339", "og:locale": "en_US", "og:title": "FreeMarker | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:description": "", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-freemarker.html", "scrapeId": "25fde513-1133-4dac-8b71-4918bef97932", "sourceURL": "https://ktor.io/docs/server-freemarker.html", "url": "https://ktor.io/docs/server-freemarker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin FreeMarker in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure FreeMarker**:\n\n```yaml\n```\nimport freemarker.cache.*\nimport io.ktor.server.application.*\nimport io.ktor.server.freemarker.*\n\nfun Application.module() {\n    install(FreeMarker) {\n        templateLoader = ClassTemplateLoader(this::class.java.classLoader, \"templates\")\n    }\n}\n```\n```\n\nThis snippet shows you how to configure freemarker, which is an important aspect of server plugin freemarker.\n\n**Send a template in response**:\n\n```yaml\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respond(FreeMarkerContent(\"index.ftl\", mapOf(\"user\" to sampleUser)))\n}\n```\n```\n\nThis snippet shows you how to send a template in response, which is an important aspect of server plugin freemarker.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-freemarker.html", "title": "Server Plugin FreeMarker", "description": "Ktor allows you to use FreeMarker templates as views within your application by installing the FreeMarker plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:36:29", "type": "code_examples", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "title": "FreeMarker | Ktor Documentation", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogTitle": "FreeMarker | Ktor", "ogSiteName": "Ktor Help", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-freemarker.html", "twitter:title": "FreeMarker | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:02.576080339", "og:locale": "en_US", "og:title": "FreeMarker | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:description": "", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-freemarker.html", "scrapeId": "25fde513-1133-4dac-8b71-4918bef97932", "sourceURL": "https://ktor.io/docs/server-freemarker.html", "url": "https://ktor.io/docs/server-freemarker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin FreeMarker in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to include the correct dependencies in your build script for FreeMarker.\n\nConfigure the TemplateLoader properly to load templates from the desired location.\n\nUse the FreeMarkerContent class to respond with templates in your routes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-freemarker.html", "title": "Server Plugin FreeMarker", "description": "Ktor allows you to use FreeMarker templates as views within your application by installing the FreeMarker plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:36:29", "type": "best_practices", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "title": "FreeMarker | Ktor Documentation", "twitter:card": "summary_large_image", "ogLocale": "en_US", "ogTitle": "FreeMarker | Ktor", "ogSiteName": "Ktor Help", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-freemarker.html", "twitter:title": "FreeMarker | Ktor", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:02.576080339", "og:locale": "en_US", "og:title": "FreeMarker | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:description": "", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-freemarker.html", "scrapeId": "25fde513-1133-4dac-8b71-4918bef97932", "sourceURL": "https://ktor.io/docs/server-freemarker.html", "url": "https://ktor.io/docs/server-freemarker.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Type-safe requests is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Type-safe requests in ktor.\n\n# Client Plugin Type-safe requests\n\nKtor provides the Resources plugin that allows you to implement type-safe requests. To accomplish this, you need to create a class that describes resources available on a server and then annotate this class using the @Resource keyword.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\n### Add kotlinx.serialization\n\nGiven that resource classes should have @Serializable behavior, you need to add the Kotlin serialization plugin as described in the Setup section.\n\n### Add Resources dependencies\n\nTo use Resources, you need to include the ktor-client-resources artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-resources:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-resources:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-resources-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nYou can learn more about artifacts required by the Ktor client from Adding client dependencies.\n\n## Install Resources\n\nTo install Resources, pass it to the install function inside a client configuration block:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.resources.*\n//...\nval client = HttpClient(CIO) {\n    install(Resources)\n}\n```\n\n## Create resource classes\n\nEach resource class should have the @Resource annotation. Below, we'll take a look at several examples of resource classes - defining a single path segment, query and path parameters, and so on.\n\n### Resource URL\n\nThe example below shows how to define the Articles class that specifies a resource responding on the /articles path.\n\n```\nimport io.ktor.resources.*\n\n@Resource(\"/articles\")\nclass Articles()\n```\n\n### Resources with a query parameter\n\nThe Articles class below has the sort string property that acts as a query parameter and allows you to define a resource responding on the following path with the sort query parameter: /articles?sort=new.\n\n```\n@Resource(\"/articles\")\nclass Articles(val sort: String? = \"new\")\n```\n\n### Resources with nested classes\n\nYou can nest classes to create resources that contain several path segments. Note that in this case nested classes should have a property with an outer class type. The example below shows a resource responding on the /articles/new path.\n\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"new\")\n    class New(val parent: Articles = Articles())\n}\n```\n\n### Resources with a path parameter\n\nThe example below demonstrates how to add the nested {id} integer path parameter that matches a path segment and captures it as a parameter named id.\n\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"{id}\")\n    class Id(val parent: Articles = Articles(), val id: Long)\n}\n```\n\nAs an example, this resource can be used to respond on /articles/12.\n\n### Example: A resource for CRUD operations\n\nLet's summarize the examples above and create the Articles resource for CRUD operations.\n\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"new\")\n    class New(val parent: Articles = Articles())\n\n    @Resource(\"{id}\")\n    class Id(val parent: Articles = Articles(), val id: Long) {\n        @Resource(\"edit\")\n        class Edit(val parent: Id)\n    }\n}\n```\n\nThis resource can be used to list all articles, post a new article, edit it, and so on. We'll see how to make type-safe requests to this resource in the next section.\n\n## Make type-safe requests\n\nTo make a request to a typed resource, you need to pass a resource class instance to a request function (request, get, post, put, and so on). For example, the sample below shows how to make a request to the /articles path.\n\n```\n@Resource(\"/articles\")\nclass Articles()\n\nfun main() {\n    runBlocking {\n        val client = HttpClient(CIO) {\n            install(Resources)\n            // ...\n        }\n        val getAllArticles = client.get(Articles())\n    }\n}\n```\n\nThe example below shows how to make typed requests to the Articles resource created in Example: A resource for CRUD operations.\n\n```\nfun main() {\n    defaultServer(Application::module).start()\n    runBlocking {\n        val client = HttpClient(CIO) {\n            install(Resources)\n            defaultRequest {\n                host = \"0.0.0.0\"\n                port = 8080\n                url { protocol = URLProtocol.HTTP }\n            }\n        }\n\n        val getAllArticles = client.get(Articles())\n        val newArticle = client.get(Articles.New())\n        val postArticle = client.post(Articles()) { setBody(\"Article content\") }\n        val getArticle = client.get(Articles.Id(id = 12))\n        val editArticlePage = client.get(Articles.Id.Edit(Articles.Id(id = 12)))\n        val putArticle = client.put(Articles.Id(id = 12)) { setBody(\"New article content\") }\n        val deleteArticle = client.delete(Articles.Id(id = 12))\n}\n```\n\nThe defaultRequest function is used to specify a default URL for all requests.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-resources.html", "title": "Client Plugin Type-safe requests", "description": "Ktor provides the Resources plugin that allows you to implement type-safe requests. To accomplish this, you need to create a class that describes resources available on a server and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:37:05", "type": "overview", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.96199568", "language": "en-US", "twitter:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-resources.html", "twitter:title": "Type-safe requests | Ktor", "og:title": "Type-safe requests | Ktor", "ogTitle": "Type-safe requests | Ktor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "title": "Type-safe requests | Ktor Documentation", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/client-resources.html", "og:locale": "en_US", "scrapeId": "86eece30-c941-4179-8a55-b12e5a5b1094", "sourceURL": "https://ktor.io/docs/client-resources.html", "url": "https://ktor.io/docs/client-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\n### Add kotlinx.serialization\n\nGiven that resource classes should have @Serializable behavior, you need to add the Kotlin serialization plugin as described in the Setup section.\n\n### Add Resources dependencies\n\nTo use Resources, you need to include the ktor-client-resources artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-resources:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-resources:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-resources-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nYou can learn more about artifacts required by the Ktor client from Adding client dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-resources.html", "title": "Client Plugin Type-safe requests", "description": "Ktor provides the Resources plugin that allows you to implement type-safe requests. To accomplish this, you need to create a class that describes resources available on a server and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:37:05", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.96199568", "language": "en-US", "twitter:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-resources.html", "twitter:title": "Type-safe requests | Ktor", "og:title": "Type-safe requests | Ktor", "ogTitle": "Type-safe requests | Ktor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "title": "Type-safe requests | Ktor Documentation", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/client-resources.html", "og:locale": "en_US", "scrapeId": "86eece30-c941-4179-8a55-b12e5a5b1094", "sourceURL": "https://ktor.io/docs/client-resources.html", "url": "https://ktor.io/docs/client-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install resources in ktor?\n\nAssistant: To install resources in ktor, here's what you do:\nTo install Resources, pass it to the install function inside a client configuration block:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.resources.*\n//...\nval client = HttpClient(CIO) {\n    install(Resources)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-resources.html", "title": "Client Plugin Type-safe requests", "description": "Ktor provides the Resources plugin that allows you to implement type-safe requests. To accomplish this, you need to create a class that describes resources available on a server and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:37:05", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.96199568", "language": "en-US", "twitter:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-resources.html", "twitter:title": "Type-safe requests | Ktor", "og:title": "Type-safe requests | Ktor", "ogTitle": "Type-safe requests | Ktor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "title": "Type-safe requests | Ktor Documentation", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/client-resources.html", "og:locale": "en_US", "scrapeId": "86eece30-c941-4179-8a55-b12e5a5b1094", "sourceURL": "https://ktor.io/docs/client-resources.html", "url": "https://ktor.io/docs/client-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create resource classes in ktor?\n\nAssistant: To create resource classes in ktor, here's what you do:\nEach resource class should have the @Resource annotation. Below, we'll take a look at several examples of resource classes - defining a single path segment, query and path parameters, and so on.\n\n### Resource URL\n\nThe example below shows how to define the Articles class that specifies a resource responding on the /articles path.\n\n```\nimport io.ktor.resources.*\n\n@Resource(\"/articles\")\nclass Articles()\n```\n\n### Resources with a query parameter\n\nThe Articles class below has the sort string property that acts as a query parameter and allows you to define a resource responding on the following path with the sort query parameter: /articles?sort=new.\n\n```\n@Resource(\"/articles\")\nclass Articles(val sort: String? = \"new\")\n```\n\n### Resources with nested classes\n\nYou can nest classes to create resources that contain several path segments. Note that in this case nested classes should have a property with an outer class type. The example below shows a resource responding on the /articles/new path.\n\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"new\")\n    class New(val parent: Articles = Articles())\n}\n```\n\n### Resources with a path parameter\n\nThe example below demonstrates how to add the nested {id} integer path parameter that matches a path segment and captures it as a parameter named id.\n\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"{id}\")\n    class Id(val parent: Articles = Articles(), val id: Long)\n}\n```\n\nAs an example, this resource can be used to respond on /articles/12.\n\n### Example: A resource for CRUD operations\n\nLet's summarize the examples above and create the Articles resource for CRUD operations.\n\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"new\")\n    class New(val parent: Articles = Articles())\n\n    @Resource(\"{id}\")\n    class Id(val parent: Articles = Articles(), val id: Long) {\n        @Resource(\"edit\")\n        class Edit(val parent: Id)\n    }\n}\n```\n\nThis resource can be used to list all articles, post a new article, edit it, and so on. We'll see how to make type-safe requests to this resource in the next section..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-resources.html", "title": "Client Plugin Type-safe requests", "description": "Ktor provides the Resources plugin that allows you to implement type-safe requests. To accomplish this, you need to create a class that describes resources available on a server and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:37:05", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.96199568", "language": "en-US", "twitter:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-resources.html", "twitter:title": "Type-safe requests | Ktor", "og:title": "Type-safe requests | Ktor", "ogTitle": "Type-safe requests | Ktor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "title": "Type-safe requests | Ktor Documentation", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/client-resources.html", "og:locale": "en_US", "scrapeId": "86eece30-c941-4179-8a55-b12e5a5b1094", "sourceURL": "https://ktor.io/docs/client-resources.html", "url": "https://ktor.io/docs/client-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I make type-safe requests in ktor?\n\nAssistant: To make type-safe requests in ktor, here's what you do:\nTo make a request to a typed resource, you need to pass a resource class instance to a request function (request, get, post, put, and so on). For example, the sample below shows how to make a request to the /articles path.\n\n```\n@Resource(\"/articles\")\nclass Articles()\n\nfun main() {\n    runBlocking {\n        val client = HttpClient(CIO) {\n            install(Resources)\n            // ...\n        }\n        val getAllArticles = client.get(Articles())\n    }\n}\n```\n\nThe example below shows how to make typed requests to the Articles resource created in Example: A resource for CRUD operations.\n\n```\nfun main() {\n    defaultServer(Application::module).start()\n    runBlocking {\n        val client = HttpClient(CIO) {\n            install(Resources)\n            defaultRequest {\n                host = \"0.0.0.0\"\n                port = 8080\n                url { protocol = URLProtocol.HTTP }\n            }\n        }\n\n        val getAllArticles = client.get(Articles())\n        val newArticle = client.get(Articles.New())\n        val postArticle = client.post(Articles()) { setBody(\"Article content\") }\n        val getArticle = client.get(Articles.Id(id = 12))\n        val editArticlePage = client.get(Articles.Id.Edit(Articles.Id(id = 12)))\n        val putArticle = client.put(Articles.Id(id = 12)) { setBody(\"New article content\") }\n        val deleteArticle = client.delete(Articles.Id(id = 12))\n}\n```\n\nThe defaultRequest function is used to specify a default URL for all requests..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-resources.html", "title": "Client Plugin Type-safe requests", "description": "Ktor provides the Resources plugin that allows you to implement type-safe requests. To accomplish this, you need to create a class that describes resources available on a server and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:37:05", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.96199568", "language": "en-US", "twitter:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-resources.html", "twitter:title": "Type-safe requests | Ktor", "og:title": "Type-safe requests | Ktor", "ogTitle": "Type-safe requests | Ktor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "title": "Type-safe requests | Ktor Documentation", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/client-resources.html", "og:locale": "en_US", "scrapeId": "86eece30-c941-4179-8a55-b12e5a5b1094", "sourceURL": "https://ktor.io/docs/client-resources.html", "url": "https://ktor.io/docs/client-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Type-safe requests in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add Resources dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-client-resources:$ktor_version\")\n```\n\nThis snippet shows you how to add resources dependencies, which is an important aspect of client plugin type-safe requests.\n\n**Add Resources dependencies (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-client-resources:$ktor_version\"\n```\n\nThis snippet shows you how to add resources dependencies (groovy), which is an important aspect of client plugin type-safe requests.\n\n**Add Resources dependencies (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-resources-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add resources dependencies (maven), which is an important aspect of client plugin type-safe requests.\n\n**Install Resources**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.resources.*\n//...\nval client = HttpClient(CIO) {\n    install(Resources)\n}\n```\n\nThis snippet shows you how to install resources, which is an important aspect of client plugin type-safe requests.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-resources.html", "title": "Client Plugin Type-safe requests", "description": "Ktor provides the Resources plugin that allows you to implement type-safe requests. To accomplish this, you need to create a class that describes resources available on a server and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:37:05", "type": "code_examples", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.96199568", "language": "en-US", "twitter:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-resources.html", "twitter:title": "Type-safe requests | Ktor", "og:title": "Type-safe requests | Ktor", "ogTitle": "Type-safe requests | Ktor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "title": "Type-safe requests | Ktor Documentation", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/client-resources.html", "og:locale": "en_US", "scrapeId": "86eece30-c941-4179-8a55-b12e5a5b1094", "sourceURL": "https://ktor.io/docs/client-resources.html", "url": "https://ktor.io/docs/client-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Type-safe requests in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe Ktor server provides the capability to implement type-safe routing.\n\nYou can find the full example here: client-type-safe-requests.\n\nYou can find the full example here: client-type-safe-requests.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-resources.html", "title": "Client Plugin Type-safe requests", "description": "Ktor provides the Resources plugin that allows you to implement type-safe requests. To accomplish this, you need to create a class that describes resources available on a server and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:37:05", "type": "best_practices", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.96199568", "language": "en-US", "twitter:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-resources.html", "twitter:title": "Type-safe requests | Ktor", "og:title": "Type-safe requests | Ktor", "ogTitle": "Type-safe requests | Ktor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "title": "Type-safe requests | Ktor Documentation", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/client-resources.html", "og:locale": "en_US", "scrapeId": "86eece30-c941-4179-8a55-b12e5a5b1094", "sourceURL": "https://ktor.io/docs/client-resources.html", "url": "https://ktor.io/docs/client-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Caching is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Caching in ktor.\n\n# Client Plugin Caching\n\nThe Ktor client provides the HttpCache plugin that allows you to save previously fetched resources in an in-memory or persistent cache.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nHttpCache only requires the ktor-client-core artifact and doesn't need any specific dependencies.\n\n## In-memory cache\n\nTo install HttpCache, pass it to the install function inside a client configuration block:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.cache.*\n//...\nval client = HttpClient(CIO) {\n    install(HttpCache)\n}\n```\n\nThis is enough to enable the client to save previously fetched resources in an in-memory cache. For example, if you make two consequent requests to a resource with the configured Cache-Control header, the client executes only the first request and skips the second one since data is already saved in a cache.\n\n## Persistent cache\n\nKtor allows you to create a persistent cache by implementing the CacheStorage interface. On JVM, you can create a file storage by calling the FileStorage function.\n\nTo create a file cache storage, pass the File instance to the FileStorage function. Then, pass the created storage to the publicStorage or privateStorage function depending on whether this storage is used as a shared or private cache.\n\n```\nval client = HttpClient(CIO) {\n    install(HttpCache) {\n        val cacheFile = Files.createDirectories(Paths.get(\"build/cache\")).toFile()\n        publicStorage(FileStorage(cacheFile))\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-caching.html", "title": "Client Plugin Caching", "description": "The Ktor client provides the HttpCache plugin that allows you to save previously fetched resources in an in-memory or persistent cache.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:37:14", "type": "overview", "page_metadata": {"built-on": "2025-02-26T14:01:04.000035209", "ogDescription": "", "og:type": "website", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Caching | Ktor", "title": "Caching | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-caching.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-caching.html", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:title": "Caching | Ktor", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Caching | Ktor", "build-number": "707", "scrapeId": "2d3820a2-8093-43f6-ab08-e6e1db8546a2", "sourceURL": "https://ktor.io/docs/client-caching.html", "url": "https://ktor.io/docs/client-caching.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nHttpCache only requires the ktor-client-core artifact and doesn't need any specific dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-caching.html", "title": "Client Plugin Caching", "description": "The Ktor client provides the HttpCache plugin that allows you to save previously fetched resources in an in-memory or persistent cache.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:37:14", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:04.000035209", "ogDescription": "", "og:type": "website", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Caching | Ktor", "title": "Caching | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-caching.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-caching.html", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:title": "Caching | Ktor", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Caching | Ktor", "build-number": "707", "scrapeId": "2d3820a2-8093-43f6-ab08-e6e1db8546a2", "sourceURL": "https://ktor.io/docs/client-caching.html", "url": "https://ktor.io/docs/client-caching.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I in-memory cache in ktor?\n\nAssistant: To in-memory cache in ktor, here's what you do:\nTo install HttpCache, pass it to the install function inside a client configuration block:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.cache.*\n//...\nval client = HttpClient(CIO) {\n    install(HttpCache)\n}\n```\n\nThis is enough to enable the client to save previously fetched resources in an in-memory cache. For example, if you make two consequent requests to a resource with the configured Cache-Control header, the client executes only the first request and skips the second one since data is already saved in a cache..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-caching.html", "title": "Client Plugin Caching", "description": "The Ktor client provides the HttpCache plugin that allows you to save previously fetched resources in an in-memory or persistent cache.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:37:14", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:04.000035209", "ogDescription": "", "og:type": "website", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Caching | Ktor", "title": "Caching | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-caching.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-caching.html", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:title": "Caching | Ktor", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Caching | Ktor", "build-number": "707", "scrapeId": "2d3820a2-8093-43f6-ab08-e6e1db8546a2", "sourceURL": "https://ktor.io/docs/client-caching.html", "url": "https://ktor.io/docs/client-caching.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I persistent cache in ktor?\n\nAssistant: To persistent cache in ktor, here's what you do:\nKtor allows you to create a persistent cache by implementing the CacheStorage interface. On JVM, you can create a file storage by calling the FileStorage function.\n\nTo create a file cache storage, pass the File instance to the FileStorage function. Then, pass the created storage to the publicStorage or privateStorage function depending on whether this storage is used as a shared or private cache.\n\n```\nval client = HttpClient(CIO) {\n    install(HttpCache) {\n        val cacheFile = Files.createDirectories(Paths.get(\"build/cache\")).toFile()\n        publicStorage(FileStorage(cacheFile))\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-caching.html", "title": "Client Plugin Caching", "description": "The Ktor client provides the HttpCache plugin that allows you to save previously fetched resources in an in-memory or persistent cache.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:37:14", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:04.000035209", "ogDescription": "", "og:type": "website", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Caching | Ktor", "title": "Caching | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-caching.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-caching.html", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:title": "Caching | Ktor", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Caching | Ktor", "build-number": "707", "scrapeId": "2d3820a2-8093-43f6-ab08-e6e1db8546a2", "sourceURL": "https://ktor.io/docs/client-caching.html", "url": "https://ktor.io/docs/client-caching.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Caching in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**In-memory cache example**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.cache.*\n//...\nval client = HttpClient(CIO) {\n    install(HttpCache)\n}\n```\n\nThis snippet shows you how to in-memory cache example, which is an important aspect of client plugin caching.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-caching.html", "title": "Client Plugin Caching", "description": "The Ktor client provides the HttpCache plugin that allows you to save previously fetched resources in an in-memory or persistent cache.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:37:14", "type": "code_examples", "page_metadata": {"built-on": "2025-02-26T14:01:04.000035209", "ogDescription": "", "og:type": "website", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Caching | Ktor", "title": "Caching | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-caching.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-caching.html", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:title": "Caching | Ktor", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Caching | Ktor", "build-number": "707", "scrapeId": "2d3820a2-8093-43f6-ab08-e6e1db8546a2", "sourceURL": "https://ktor.io/docs/client-caching.html", "url": "https://ktor.io/docs/client-caching.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Caching in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can find the full example here: client-caching\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-caching.html", "title": "Client Plugin Caching", "description": "The Ktor client provides the HttpCache plugin that allows you to save previously fetched resources in an in-memory or persistent cache.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:37:14", "type": "best_practices", "page_metadata": {"built-on": "2025-02-26T14:01:04.000035209", "ogDescription": "", "og:type": "website", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Caching | Ktor", "title": "Caching | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-caching.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-caching.html", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:title": "Caching | Ktor", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Caching | Ktor", "build-number": "707", "scrapeId": "2d3820a2-8093-43f6-ab08-e6e1db8546a2", "sourceURL": "https://ktor.io/docs/client-caching.html", "url": "https://ktor.io/docs/client-caching.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Content negotiation and serialization in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Content negotiation and serialization in Ktor Client in ktor.\n\n# Client Plugin Content negotiation and serialization in Ktor Client\n\nThis page covers the ContentNegotiation plugin in Ktor Client, detailing how to negotiate media types and serialize/deserialize content in various formats.Here's a quick rundown of what this is about:\n\n## Client Plugin Content negotiation and serialization in Ktor Client\n\nThe ContentNegotiation plugin serves two primary purposes:\n\n- Negotiating media types between the client and server. For this, it uses the Accept and Content-Type headers.\n\n- Serializing/deserializing the content in a specific format when sending requests and receiving responses. Ktor supports the following formats out-of-the-box: JSON, XML, CBOR, and ProtoBuf. Note that the XML serializer is supported on JVM only.\n\n## Add dependencies\n\nTo use ContentNegotiation, you need to include the ktor-client-content-negotiation artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-content-negotiation:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-content-negotiation:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-content-negotiation-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nYou can learn more about artifacts required by the Ktor client from Adding client dependencies. Note that serializers for specific formats require additional artifacts.\n\n## Serialization\n\nBefore using kotlinx.serialization converters, you need to add the Kotlin serialization plugin as described in the Setup section.\n\n### JSON\nTo serialize/deserialize JSON data, you can choose one of the following libraries: kotlinx.serialization, Gson, or Jackson.\n\nAdd the ktor-serialization-kotlinx-json artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### XML\nTo serialize/deserialize XML, add the ktor-serialization-kotlinx-xml in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### CBOR\nTo serialize/deserialize CBOR, add the ktor-serialization-kotlinx-cbor in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### ProtoBuf\nTo serialize/deserialize ProtoBuf, add the ktor-serialization-kotlinx-protobuf in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install ContentNegotiation\n\nTo install ContentNegotiation, pass it to the install function inside a client configuration block:\n\n```\nval client = HttpClient(CIO) {\n    install(ContentNegotiation)\n}\n```\n\nNow you can configure the required JSON serializer.\n\n## Configure a serializer\n\nTo register the JSON serializer in your application, call the json method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.json.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        json()\n    }\n}\n```\n\nIn the json constructor, you can access the JsonBuilder API, for example:\n\n```\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        json(Json {\n            prettyPrint = true\n            isLenient = true\n        })\n    }\n}\n```\n\nTo register the Gson serializer in your application, call the gson method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.gson.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        gson()\n    }\n}\n```\n\nTo register the Jackson serializer in your application, call the jackson method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.jackson.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        jackson()\n    }\n}\n```\n\n### XML serializer\nTo register the XML serializer in your application, call the xml method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.xml.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        xml()\n    }\n}\n```\n\n### CBOR serializer\nTo register the CBOR serializer in your application, call the cbor method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.cbor.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        cbor()\n    }\n}\n```\n\n### ProtoBuf serializer\nTo register the ProtoBuf serializer in your application, call the protobuf method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.protobuf.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        protobuf()\n    }\n}\n```\n\n## Receive and send data\n\n### Create a data class\nTo receive and send data, you need to have a data class, for example:\n\n```\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\nIf you use kotlinx.serialization, make sure that this class has the @Serializable annotation:\n\n```\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\n### Send data\nTo send a class instance within a request body as JSON, assign this instance using setBody function and set the content type to application/json by calling contentType:\n\n```\nval response: HttpResponse = client.post(\"http://localhost:8080/customer\") {\n    contentType(ContentType.Application.Json)\n    setBody(Customer(3, \"Jet\", \"Brains\"))\n}\n```\n\n### Receive data\nWhen a server sends a response with the application/json, application/xml, or application/cbor content, you can deserialize it by specifying a data class as a parameter of a function used to receive a response payload:\n\n```\nval customer: Customer = client.get(\"http://localhost:8080/customer/3\").body()\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/serialization-client.html", "title": "Client Plugin Content negotiation and serialization in Ktor Client", "description": "This page covers the ContentNegotiation plugin in Ktor Client, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:15", "type": "overview", "page_metadata": {"ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.109773929", "og:title": "Content negotiation and serialization in Ktor Client | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/client-serialization.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-serialization.html", "twitter:site": "@JetBrainsKtor", "title": "Content negotiation and serialization in Ktor Client | Ktor Documentation", "ogTitle": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:title": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d6765a21-654e-4118-9e0c-c997700c0dc0", "sourceURL": "https://ktor.io/docs/serialization-client.html", "url": "https://ktor.io/docs/client-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I client plugin content negotiation and serialization in ktor client in ktor?\n\nAssistant: To client plugin content negotiation and serialization in ktor client in ktor, here's what you do:\nThe ContentNegotiation plugin serves two primary purposes:\n\n- Negotiating media types between the client and server. For this, it uses the Accept and Content-Type headers.\n\n- Serializing/deserializing the content in a specific format when sending requests and receiving responses. Ktor supports the following formats out-of-the-box: JSON, XML, CBOR, and ProtoBuf. Note that the XML serializer is supported on JVM only..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/serialization-client.html", "title": "Client Plugin Content negotiation and serialization in Ktor Client", "description": "This page covers the ContentNegotiation plugin in Ktor Client, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:15", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.109773929", "og:title": "Content negotiation and serialization in Ktor Client | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/client-serialization.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-serialization.html", "twitter:site": "@JetBrainsKtor", "title": "Content negotiation and serialization in Ktor Client | Ktor Documentation", "ogTitle": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:title": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d6765a21-654e-4118-9e0c-c997700c0dc0", "sourceURL": "https://ktor.io/docs/serialization-client.html", "url": "https://ktor.io/docs/client-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use ContentNegotiation, you need to include the ktor-client-content-negotiation artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-content-negotiation:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-content-negotiation:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-content-negotiation-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nYou can learn more about artifacts required by the Ktor client from Adding client dependencies. Note that serializers for specific formats require additional artifacts..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/serialization-client.html", "title": "Client Plugin Content negotiation and serialization in Ktor Client", "description": "This page covers the ContentNegotiation plugin in Ktor Client, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:15", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.109773929", "og:title": "Content negotiation and serialization in Ktor Client | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/client-serialization.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-serialization.html", "twitter:site": "@JetBrainsKtor", "title": "Content negotiation and serialization in Ktor Client | Ktor Documentation", "ogTitle": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:title": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d6765a21-654e-4118-9e0c-c997700c0dc0", "sourceURL": "https://ktor.io/docs/serialization-client.html", "url": "https://ktor.io/docs/client-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I serialization in ktor?\n\nAssistant: To serialization in ktor, here's what you do:\nBefore using kotlinx.serialization converters, you need to add the Kotlin serialization plugin as described in the Setup section.\n\n### JSON\nTo serialize/deserialize JSON data, you can choose one of the following libraries: kotlinx.serialization, Gson, or Jackson.\n\nAdd the ktor-serialization-kotlinx-json artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### XML\nTo serialize/deserialize XML, add the ktor-serialization-kotlinx-xml in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### CBOR\nTo serialize/deserialize CBOR, add the ktor-serialization-kotlinx-cbor in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### ProtoBuf\nTo serialize/deserialize ProtoBuf, add the ktor-serialization-kotlinx-protobuf in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/serialization-client.html", "title": "Client Plugin Content negotiation and serialization in Ktor Client", "description": "This page covers the ContentNegotiation plugin in Ktor Client, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:15", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.109773929", "og:title": "Content negotiation and serialization in Ktor Client | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/client-serialization.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-serialization.html", "twitter:site": "@JetBrainsKtor", "title": "Content negotiation and serialization in Ktor Client | Ktor Documentation", "ogTitle": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:title": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d6765a21-654e-4118-9e0c-c997700c0dc0", "sourceURL": "https://ktor.io/docs/serialization-client.html", "url": "https://ktor.io/docs/client-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install contentnegotiation in ktor?\n\nAssistant: To install contentnegotiation in ktor, here's what you do:\nTo install ContentNegotiation, pass it to the install function inside a client configuration block:\n\n```\nval client = HttpClient(CIO) {\n    install(ContentNegotiation)\n}\n```\n\nNow you can configure the required JSON serializer..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/serialization-client.html", "title": "Client Plugin Content negotiation and serialization in Ktor Client", "description": "This page covers the ContentNegotiation plugin in Ktor Client, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:15", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.109773929", "og:title": "Content negotiation and serialization in Ktor Client | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/client-serialization.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-serialization.html", "twitter:site": "@JetBrainsKtor", "title": "Content negotiation and serialization in Ktor Client | Ktor Documentation", "ogTitle": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:title": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d6765a21-654e-4118-9e0c-c997700c0dc0", "sourceURL": "https://ktor.io/docs/serialization-client.html", "url": "https://ktor.io/docs/client-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure a serializer in ktor?\n\nAssistant: To configure a serializer in ktor, here's what you do:\nTo register the JSON serializer in your application, call the json method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.json.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        json()\n    }\n}\n```\n\nIn the json constructor, you can access the JsonBuilder API, for example:\n\n```\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        json(Json {\n            prettyPrint = true\n            isLenient = true\n        })\n    }\n}\n```\n\nTo register the Gson serializer in your application, call the gson method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.gson.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        gson()\n    }\n}\n```\n\nTo register the Jackson serializer in your application, call the jackson method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.jackson.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        jackson()\n    }\n}\n```\n\n### XML serializer\nTo register the XML serializer in your application, call the xml method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.xml.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        xml()\n    }\n}\n```\n\n### CBOR serializer\nTo register the CBOR serializer in your application, call the cbor method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.cbor.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        cbor()\n    }\n}\n```\n\n### ProtoBuf serializer\nTo register the ProtoBuf serializer in your application, call the protobuf method:\n\n```\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.serialization.kotlinx.protobuf.*\n\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        protobuf()\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/serialization-client.html", "title": "Client Plugin Content negotiation and serialization in Ktor Client", "description": "This page covers the ContentNegotiation plugin in Ktor Client, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:15", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.109773929", "og:title": "Content negotiation and serialization in Ktor Client | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/client-serialization.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-serialization.html", "twitter:site": "@JetBrainsKtor", "title": "Content negotiation and serialization in Ktor Client | Ktor Documentation", "ogTitle": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:title": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d6765a21-654e-4118-9e0c-c997700c0dc0", "sourceURL": "https://ktor.io/docs/serialization-client.html", "url": "https://ktor.io/docs/client-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I receive and send data in ktor?\n\nAssistant: To receive and send data in ktor, here's what you do:\n### Create a data class\nTo receive and send data, you need to have a data class, for example:\n\n```\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\nIf you use kotlinx.serialization, make sure that this class has the @Serializable annotation:\n\n```\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\n### Send data\nTo send a class instance within a request body as JSON, assign this instance using setBody function and set the content type to application/json by calling contentType:\n\n```\nval response: HttpResponse = client.post(\"http://localhost:8080/customer\") {\n    contentType(ContentType.Application.Json)\n    setBody(Customer(3, \"Jet\", \"Brains\"))\n}\n```\n\n### Receive data\nWhen a server sends a response with the application/json, application/xml, or application/cbor content, you can deserialize it by specifying a data class as a parameter of a function used to receive a response payload:\n\n```\nval customer: Customer = client.get(\"http://localhost:8080/customer/3\").body()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/serialization-client.html", "title": "Client Plugin Content negotiation and serialization in Ktor Client", "description": "This page covers the ContentNegotiation plugin in Ktor Client, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:15", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.109773929", "og:title": "Content negotiation and serialization in Ktor Client | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/client-serialization.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-serialization.html", "twitter:site": "@JetBrainsKtor", "title": "Content negotiation and serialization in Ktor Client | Ktor Documentation", "ogTitle": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:title": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d6765a21-654e-4118-9e0c-c997700c0dc0", "sourceURL": "https://ktor.io/docs/serialization-client.html", "url": "https://ktor.io/docs/client-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Content negotiation and serialization in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add ContentNegotiation Dependency**:\n\n```yaml\nimplementation(\"io.ktor:ktor-client-content-negotiation:$ktor_version\")\n```\n\nThis snippet shows you how to add contentnegotiation dependency, which is an important aspect of client plugin content negotiation and serialization in ktor client.\n\n**Install ContentNegotiation**:\n\n```yaml\nval client = HttpClient(CIO) {\n    install(ContentNegotiation)\n}\n```\n\nThis snippet shows you how to install contentnegotiation, which is an important aspect of client plugin content negotiation and serialization in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/serialization-client.html", "title": "Client Plugin Content negotiation and serialization in Ktor Client", "description": "This page covers the ContentNegotiation plugin in Ktor Client, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:15", "type": "code_examples", "page_metadata": {"ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.109773929", "og:title": "Content negotiation and serialization in Ktor Client | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/client-serialization.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-serialization.html", "twitter:site": "@JetBrainsKtor", "title": "Content negotiation and serialization in Ktor Client | Ktor Documentation", "ogTitle": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:title": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d6765a21-654e-4118-9e0c-c997700c0dc0", "sourceURL": "https://ktor.io/docs/serialization-client.html", "url": "https://ktor.io/docs/client-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Content negotiation and serialization in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn the server, Ktor provides the ContentNegotiation plugin for serializing/deserializing content.\n\nNote that XML serialization is not supported on jsNode target.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/serialization-client.html", "title": "Client Plugin Content negotiation and serialization in Ktor Client", "description": "This page covers the ContentNegotiation plugin in Ktor Client, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:39:15", "type": "best_practices", "page_metadata": {"ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.109773929", "og:title": "Content negotiation and serialization in Ktor Client | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/client-serialization.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "build-number": "707", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-serialization.html", "twitter:site": "@JetBrainsKtor", "title": "Content negotiation and serialization in Ktor Client | Ktor Documentation", "ogTitle": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:title": "Content negotiation and serialization in Ktor Client | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d6765a21-654e-4118-9e0c-c997700c0dc0", "sourceURL": "https://ktor.io/docs/serialization-client.html", "url": "https://ktor.io/docs/client-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Sending responses is in ktor?\n\nAssistant: Sure, I'd be happy to explain Sending responses in ktor.\n\n# Sending responses\n\nKtor allows you to handle incoming requests and send responses inside route handlers. You can send different types of responses: plain text, HTML documents and templates, serialized data objects, and so on. For each response, you can also configure various response parameters, such as a content type, headers, and cookies.Here's a quick rundown of what this is about:\n\n## Set response payload\n\n### Plain text\nTo send a plain text in a response, use the [call.respondText](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond-text.html) function:\n\n```\nget(\"/\") {\n    call.respondText(\"Hello, world!\")\n}\n```\n\n### HTML\nKtor provides two main ways to send HTML responses to a client:\n\n- By building HTML using Kotlin HTML DSL.\n- By using JVM template engines, such as FreeMarker, Velocity, and so on.\n\nTo send HTML build using Kotlin DSL, use the [call.respondHtml](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-html-builder/io.ktor.server.html/respond-html.html) function:\n\n```\nrouting {\n    get(\"/\") {\n        val name = \"Ktor\"\n        call.respondHtml(HttpStatusCode.OK) {\n            head {\n                title {\n                    +name\n                }\n            }\n            body {\n                h1 {\n                    +\"Hello from $name!\"\n                }\n            }\n        }\n    }\n}\n```\n\nTo send a template in a response, call the [call.respond](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond.html) function with a specific content ...\n\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respond(FreeMarkerContent(\"index.ftl\", mapOf(\"user\" to sampleUser)))\n}\n```\n\n... or use an appropriate [call.respondTemplate](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-freemarker/io.ktor.server.freemarker/respond-template.html) function:\n\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respondTemplate(\"index.ftl\", mapOf(\"user\" to sampleUser))\n}\n```\n\nYou can learn more from the [Templating](https://ktor.io/docs/server-templating.html) help section.\n\n### Object\nTo enable serialization of data objects in Ktor, you need to install the [ContentNegotiation](https://ktor.io/docs/server-serialization.html) plugin and register a required converter (for example, JSON). Then, you can use the [call.respond](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond.html) function to pass a data object in a response:\n\n```\nget(\"/customer/{id}\") {\n    val id = call.parameters[\"id\"]\n    val customer: Customer = customerStorage.find { it.id == id!!.toInt() }!!\n    call.respond(customer)\n}\n```\n\nYou can find the full example here: [json-kotlinx](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/json-kotlinx).\n\n### File\nTo respond to a client with a content of a file, you have two options:\n\n- For `File` resources, use the [call.respondFile](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond-file.html) function.\n- For `Path` resources, use the `call.respond()` function with the [LocalPathContent](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/-local-path-content/index.html) class.\n\nA code sample below shows how to send a specified file in a response and make this file downloadable by adding the `Content-Disposition` [header](https://ktor.io/docs/server-responses.html#headers):\n\n```\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.plugins.autohead.*\nimport io.ktor.server.plugins.partialcontent.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport java.io.File\nimport java.nio.file.Path\n\nfun Application.main() {\n    install(PartialContent)\n    install(AutoHeadResponse)\n    routing {\n        get(\"/download\") {\n            val file = File(\"files/ktor_logo.png\")\n            call.response.header(\n                HttpHeaders.ContentDisposition,\n                ContentDisposition.Attachment.withParameter(ContentDisposition.Parameters.FileName, \"ktor_logo.png\")\n                    .toString()\n            )\n            call.respondFile(file)\n        }\n        get(\"/downloadFromPath\") {\n            val filePath = Path.of(\"files/file.txt\")\n            call.response.header(\n                HttpHeaders.ContentDisposition,\n                ContentDisposition.Attachment.withParameter(ContentDisposition.Parameters.FileName, \"file.txt\")\n                    .toString()\n            )\n            call.respond(LocalPathContent(filePath))\n        }\n    }\n}\n```\n\nNote that this sample has two plugins installed:\n\n- [PartialContent](https://ktor.io/docs/server-partial-content.html) enables the server to respond to requests with the `Range` header and send only a portion of content.\n- [AutoHeadResponse](https://ktor.io/docs/server-autoheadresponse.html) provides the ability to automatically respond to `HEAD` request for every route that has a `GET` defined. This allows the client application to determine the file size by reading the `Content-Length` header value.\n\nFor the full code sample, see [download-file](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/download-file).\n\n### Raw payload\nIf you need to send the raw body payload, use the [call.respondBytes](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond-bytes.html) function.\n\n## Set response parameters\n\n### Status code\nTo set a status code for a response, call [ApplicationResponse.status](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/-application-response/status.html). You can pass a predefined status code value ...\n\n```\nget(\"/\") {\n    call.response.status(HttpStatusCode.OK)\n}\n```\n\n... or specify a custom status code:\n\n```\nget(\"/\") {\n    call.response.status(HttpStatusCode(418, \"I'm a tea pot\"))\n}\n```\n\nNote that functions for sending a [payload](https://ktor.io/docs/server-responses.html#payload) have overloads for specifying a status code.\n\n### Content type\nWith the installed [ContentNegotiation](https://ktor.io/docs/server-serialization.html) plugin, Ktor chooses a content type for a [response](https://ktor.io/docs/server-responses.html#payload) automatically. If required, you can specify a content type manually by passing a corresponding parameter. For example, the `call.respondText` function in a code snippet below accepts `ContentType.Text.Plain` as a parameter:\n\n```\nget(\"/\") {\n    call.respondText(\"Hello, world!\", ContentType.Text.Plain, HttpStatusCode.OK)\n}\n```\n\n### Headers\nThere are several ways to send specific headers in a response:\n\n- Add a header to the [ApplicationResponse.headers](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/-application-response/headers.html) collection:\n\n```\nget(\"/\") {\n      call.response.headers.append(HttpHeaders.ETag, \"7c876b7e\")\n}\n```\n\n- Call the [ApplicationResponse.header](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/header.html) function:\n\n```\nget(\"/\") {\n      call.response.header(HttpHeaders.ETag, \"7c876b7e\")\n}\n```\n\n- Use functions dedicated to specifying concrete headers, for example, `ApplicationResponse.etag`, `ApplicationResponse.link`, and so on.\n\n```\nget(\"/\") {\n      call.response.etag(\"7c876b7e\")\n}\n```\n\n- To add a custom header, pass its name as a string value to any function mentioned above, for example:\n\n```\nget(\"/\") {\n      call.response.header(\"Custom-Header\", \"Some value\")\n}\n```\n\n> ### tip\n> To add the standard `Server` and `Date` headers into each response, install the [DefaultHeaders](https://ktor.io/docs/server-default-headers.html) plugin.\n\n### Cookies\nTo configure cookies sent in a response, use the [ApplicationResponse.cookies](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/-application-response/cookies.html) property:\n\n```\nget(\"/\") {\n    call.response.cookies.append(\"yummy_cookie\", \"choco\")\n}\n```\n\nKtor also provides the capability to handle sessions using cookies. You can learn more from the [Sessions](https://ktor.io/docs/server-sessions.html) section.\n\n## Redirects\n\nTo generate a redirection response, call the [respondRedirect](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond-redirect.html) function:\n\n```\nget(\"/\") {\n    call.respondRedirect(\"/moved\", permanent = true)\n}\n\nget(\"/moved\") {\n    call.respondText(\"Moved content\")\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-responses.html", "title": "Sending responses", "description": "Ktor allows you to handle incoming requests and send responses inside route handlers. You can send different types of responses: plain text, HTML documents and templates, serialized data objects, and so on. For each response, you can also configure various response parameters, such as a content type, headers, and cookies.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:59", "type": "overview", "page_metadata": {"build-number": "707", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.786310626", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:title": "Sending responses | Ktor", "twitter:card": "summary_large_image", "og:description": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "twitter:title": "Sending responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-responses.html", "ogDescription": "", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-responses.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "title": "Sending responses | Ktor Documentation", "ogTitle": "Sending responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "3cadafe9-c6b6-4ead-8009-8dfcbfd4d689", "sourceURL": "https://ktor.io/docs/server-responses.html", "url": "https://ktor.io/docs/server-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I set response payload in ktor?\n\nAssistant: To set response payload in ktor, here's what you do:\n### Plain text\nTo send a plain text in a response, use the [call.respondText](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond-text.html) function:\n\n```\nget(\"/\") {\n    call.respondText(\"Hello, world!\")\n}\n```\n\n### HTML\nKtor provides two main ways to send HTML responses to a client:\n\n- By building HTML using Kotlin HTML DSL.\n- By using JVM template engines, such as FreeMarker, Velocity, and so on.\n\nTo send HTML build using Kotlin DSL, use the [call.respondHtml](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-html-builder/io.ktor.server.html/respond-html.html) function:\n\n```\nrouting {\n    get(\"/\") {\n        val name = \"Ktor\"\n        call.respondHtml(HttpStatusCode.OK) {\n            head {\n                title {\n                    +name\n                }\n            }\n            body {\n                h1 {\n                    +\"Hello from $name!\"\n                }\n            }\n        }\n    }\n}\n```\n\nTo send a template in a response, call the [call.respond](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond.html) function with a specific content ...\n\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respond(FreeMarkerContent(\"index.ftl\", mapOf(\"user\" to sampleUser)))\n}\n```\n\n... or use an appropriate [call.respondTemplate](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-freemarker/io.ktor.server.freemarker/respond-template.html) function:\n\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respondTemplate(\"index.ftl\", mapOf(\"user\" to sampleUser))\n}\n```\n\nYou can learn more from the [Templating](https://ktor.io/docs/server-templating.html) help section.\n\n### Object\nTo enable serialization of data objects in Ktor, you need to install the [ContentNegotiation](https://ktor.io/docs/server-serialization.html) plugin and register a required converter (for example, JSON). Then, you can use the [call.respond](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond.html) function to pass a data object in a response:\n\n```\nget(\"/customer/{id}\") {\n    val id = call.parameters[\"id\"]\n    val customer: Customer = customerStorage.find { it.id == id!!.toInt() }!!\n    call.respond(customer)\n}\n```\n\nYou can find the full example here: [json-kotlinx](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/json-kotlinx).\n\n### File\nTo respond to a client with a content of a file, you have two options:\n\n- For `File` resources, use the [call.respondFile](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond-file.html) function.\n- For `Path` resources, use the `call.respond()` function with the [LocalPathContent](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/-local-path-content/index.html) class.\n\nA code sample below shows how to send a specified file in a response and make this file downloadable by adding the `Content-Disposition` [header](https://ktor.io/docs/server-responses.html#headers):\n\n```\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.plugins.autohead.*\nimport io.ktor.server.plugins.partialcontent.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport java.io.File\nimport java.nio.file.Path\n\nfun Application.main() {\n    install(PartialContent)\n    install(AutoHeadResponse)\n    routing {\n        get(\"/download\") {\n            val file = File(\"files/ktor_logo.png\")\n            call.response.header(\n                HttpHeaders.ContentDisposition,\n                ContentDisposition.Attachment.withParameter(ContentDisposition.Parameters.FileName, \"ktor_logo.png\")\n                    .toString()\n            )\n            call.respondFile(file)\n        }\n        get(\"/downloadFromPath\") {\n            val filePath = Path.of(\"files/file.txt\")\n            call.response.header(\n                HttpHeaders.ContentDisposition,\n                ContentDisposition.Attachment.withParameter(ContentDisposition.Parameters.FileName, \"file.txt\")\n                    .toString()\n            )\n            call.respond(LocalPathContent(filePath))\n        }\n    }\n}\n```\n\nNote that this sample has two plugins installed:\n\n- [PartialContent](https://ktor.io/docs/server-partial-content.html) enables the server to respond to requests with the `Range` header and send only a portion of content.\n- [AutoHeadResponse](https://ktor.io/docs/server-autoheadresponse.html) provides the ability to automatically respond to `HEAD` request for every route that has a `GET` defined. This allows the client application to determine the file size by reading the `Content-Length` header value.\n\nFor the full code sample, see [download-file](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/download-file).\n\n### Raw payload\nIf you need to send the raw body payload, use the [call.respondBytes](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond-bytes.html) function..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-responses.html", "title": "Sending responses", "description": "Ktor allows you to handle incoming requests and send responses inside route handlers. You can send different types of responses: plain text, HTML documents and templates, serialized data objects, and so on. For each response, you can also configure various response parameters, such as a content type, headers, and cookies.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:59", "type": "section_detail", "page_metadata": {"build-number": "707", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.786310626", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:title": "Sending responses | Ktor", "twitter:card": "summary_large_image", "og:description": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "twitter:title": "Sending responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-responses.html", "ogDescription": "", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-responses.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "title": "Sending responses | Ktor Documentation", "ogTitle": "Sending responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "3cadafe9-c6b6-4ead-8009-8dfcbfd4d689", "sourceURL": "https://ktor.io/docs/server-responses.html", "url": "https://ktor.io/docs/server-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I set response parameters in ktor?\n\nAssistant: To set response parameters in ktor, here's what you do:\n### Status code\nTo set a status code for a response, call [ApplicationResponse.status](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/-application-response/status.html). You can pass a predefined status code value ...\n\n```\nget(\"/\") {\n    call.response.status(HttpStatusCode.OK)\n}\n```\n\n... or specify a custom status code:\n\n```\nget(\"/\") {\n    call.response.status(HttpStatusCode(418, \"I'm a tea pot\"))\n}\n```\n\nNote that functions for sending a [payload](https://ktor.io/docs/server-responses.html#payload) have overloads for specifying a status code.\n\n### Content type\nWith the installed [ContentNegotiation](https://ktor.io/docs/server-serialization.html) plugin, Ktor chooses a content type for a [response](https://ktor.io/docs/server-responses.html#payload) automatically. If required, you can specify a content type manually by passing a corresponding parameter. For example, the `call.respondText` function in a code snippet below accepts `ContentType.Text.Plain` as a parameter:\n\n```\nget(\"/\") {\n    call.respondText(\"Hello, world!\", ContentType.Text.Plain, HttpStatusCode.OK)\n}\n```\n\n### Headers\nThere are several ways to send specific headers in a response:\n\n- Add a header to the [ApplicationResponse.headers](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/-application-response/headers.html) collection:\n\n```\nget(\"/\") {\n      call.response.headers.append(HttpHeaders.ETag, \"7c876b7e\")\n}\n```\n\n- Call the [ApplicationResponse.header](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/header.html) function:\n\n```\nget(\"/\") {\n      call.response.header(HttpHeaders.ETag, \"7c876b7e\")\n}\n```\n\n- Use functions dedicated to specifying concrete headers, for example, `ApplicationResponse.etag`, `ApplicationResponse.link`, and so on.\n\n```\nget(\"/\") {\n      call.response.etag(\"7c876b7e\")\n}\n```\n\n- To add a custom header, pass its name as a string value to any function mentioned above, for example:\n\n```\nget(\"/\") {\n      call.response.header(\"Custom-Header\", \"Some value\")\n}\n```\n\n> ### tip\n> To add the standard `Server` and `Date` headers into each response, install the [DefaultHeaders](https://ktor.io/docs/server-default-headers.html) plugin.\n\n### Cookies\nTo configure cookies sent in a response, use the [ApplicationResponse.cookies](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/-application-response/cookies.html) property:\n\n```\nget(\"/\") {\n    call.response.cookies.append(\"yummy_cookie\", \"choco\")\n}\n```\n\nKtor also provides the capability to handle sessions using cookies. You can learn more from the [Sessions](https://ktor.io/docs/server-sessions.html) section..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-responses.html", "title": "Sending responses", "description": "Ktor allows you to handle incoming requests and send responses inside route handlers. You can send different types of responses: plain text, HTML documents and templates, serialized data objects, and so on. For each response, you can also configure various response parameters, such as a content type, headers, and cookies.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:59", "type": "section_detail", "page_metadata": {"build-number": "707", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.786310626", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:title": "Sending responses | Ktor", "twitter:card": "summary_large_image", "og:description": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "twitter:title": "Sending responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-responses.html", "ogDescription": "", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-responses.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "title": "Sending responses | Ktor Documentation", "ogTitle": "Sending responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "3cadafe9-c6b6-4ead-8009-8dfcbfd4d689", "sourceURL": "https://ktor.io/docs/server-responses.html", "url": "https://ktor.io/docs/server-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I redirects in ktor?\n\nAssistant: To redirects in ktor, here's what you do:\nTo generate a redirection response, call the [respondRedirect](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.response/respond-redirect.html) function:\n\n```\nget(\"/\") {\n    call.respondRedirect(\"/moved\", permanent = true)\n}\n\nget(\"/moved\") {\n    call.respondText(\"Moved content\")\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-responses.html", "title": "Sending responses", "description": "Ktor allows you to handle incoming requests and send responses inside route handlers. You can send different types of responses: plain text, HTML documents and templates, serialized data objects, and so on. For each response, you can also configure various response parameters, such as a content type, headers, and cookies.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:59", "type": "section_detail", "page_metadata": {"build-number": "707", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.786310626", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:title": "Sending responses | Ktor", "twitter:card": "summary_large_image", "og:description": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "twitter:title": "Sending responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-responses.html", "ogDescription": "", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-responses.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "title": "Sending responses | Ktor Documentation", "ogTitle": "Sending responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "3cadafe9-c6b6-4ead-8009-8dfcbfd4d689", "sourceURL": "https://ktor.io/docs/server-responses.html", "url": "https://ktor.io/docs/server-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Sending responses in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Sending plain text response**:\n\n```yaml\nget(\"/\") {\n    call.respondText(\"Hello, world!\")\n}\n```\n\nThis snippet shows you how to sending plain text response, which is an important aspect of sending responses.\n\n**Sending HTML response using Kotlin DSL**:\n\n```yaml\nrouting {\n    get(\"/\") {\n        val name = \"Ktor\"\n        call.respondHtml(HttpStatusCode.OK) {\n            head {\n                title {\n                    +name\n                }\n            }\n            body {\n                h1 {\n                    +\"Hello from $name!\"\n                }\n            }\n        }\n    }\n}\n```\n\nThis snippet shows you how to sending html response using kotlin dsl, which is an important aspect of sending responses.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-responses.html", "title": "Sending responses", "description": "Ktor allows you to handle incoming requests and send responses inside route handlers. You can send different types of responses: plain text, HTML documents and templates, serialized data objects, and so on. For each response, you can also configure various response parameters, such as a content type, headers, and cookies.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:59", "type": "code_examples", "page_metadata": {"build-number": "707", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.786310626", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:title": "Sending responses | Ktor", "twitter:card": "summary_large_image", "og:description": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "twitter:title": "Sending responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-responses.html", "ogDescription": "", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-responses.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "title": "Sending responses | Ktor Documentation", "ogTitle": "Sending responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "3cadafe9-c6b6-4ead-8009-8dfcbfd4d689", "sourceURL": "https://ktor.io/docs/server-responses.html", "url": "https://ktor.io/docs/server-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Sending responses in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo add the standard Server and Date headers into each response, install the DefaultHeaders plugin.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-responses.html", "title": "Sending responses", "description": "Ktor allows you to handle incoming requests and send responses inside route handlers. You can send different types of responses: plain text, HTML documents and templates, serialized data objects, and so on. For each response, you can also configure various response parameters, such as a content type, headers, and cookies.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:59", "type": "best_practices", "page_metadata": {"build-number": "707", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.786310626", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "og:title": "Sending responses | Ktor", "twitter:card": "summary_large_image", "og:description": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "twitter:title": "Sending responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-responses.html", "ogDescription": "", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-responses.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "title": "Sending responses | Ktor Documentation", "ogTitle": "Sending responses | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "3cadafe9-c6b6-4ead-8009-8dfcbfd4d689", "sourceURL": "https://ktor.io/docs/server-responses.html", "url": "https://ktor.io/docs/server-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server engines is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server engines in ktor.\n\n# Server engines\n\nTo run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.Here's a quick rundown of what this is about:\n\n## Supported engines\n\nThe table below lists engines supported by Ktor, along with the supported platforms:\n\n| Engine | Platforms | HTTP/2 |\n| --- | --- | --- |\n| `Netty` | JVM | ✅ |\n| `Jetty` | JVM | ✅ |\n| `Tomcat` | JVM | ✅ |\n| `CIO` (Coroutine-based I/O) | JVM, [Native](https://ktor.io/docs/server-native.html), [GraalVM](https://ktor.io/docs/graalvm.html) | ✖️ |\n| [ServletApplicationEngine](https://ktor.io/docs/server-war.html) | JVM | ✅ |\n\n## Add dependencies\n\nBefore using the desired engine, you need to add the corresponding dependency to your [build script](https://ktor.io/docs/server-dependencies.html):\n\n- `ktor-server-netty`\n- `ktor-server-jetty-jakarta`\n- `ktor-server-tomcat-jakarta`\n- `ktor-server-cio`\n\nBelow are examples of adding a dependency for Netty:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-netty:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-netty:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-netty-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Choose how to create a server\n\nA Ktor server application can be [created and run in two ways](https://ktor.io/docs/server-create-and-configure.html#embedded): using the [embeddedServer](https://ktor.io/docs/server-engines.html#embeddedServer) to quickly pass server parameters in code, or using [EngineMain](https://ktor.io/docs/server-engines.html#EngineMain) to load the configuration from the external `application.conf` or `application.yaml` file.\n\n### embeddedServer\n\nThe [embeddedServer](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/embedded-server.html) function accepts an engine factory used to create an engine of a specific type. In the example below, we pass the [Netty](https://api.ktor.io/ktor-server/ktor-server-netty/io.ktor.server.netty/-netty/index.html) factory to run a server with the Netty engine and listen on the `8080` port:\n\n```\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\n### EngineMain\n\n`EngineMain` represents an engine for running a server. You can use the following engines:\n\n- `io.ktor.server.netty.EngineMain`\n- `io.ktor.server.jetty.jakarta.EngineMain`\n- `io.ktor.server.tomcat.jakarta.EngineMain`\n- `io.ktor.server.cio.EngineMain`\n\nThe `EngineMain.main` function is used to start a server with the selected engine and loads the [application module](https://ktor.io/docs/server-modules.html) specified in the external [configuration file](https://ktor.io/docs/server-configuration-file.html). In the example below, we start a server from the application's `main` function:\n\nApplication.kt\n\n```\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondText(\"Hello, world!\")\n        }\n    }\n}\n```\n\napplication.conf\n\n```\nktor {\n    deployment {\n        port = 8080\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\napplication.yaml\n\n```\nktor:\n    deployment:\n        port: 8080\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n```\n\nIf you need to start a server using a build system task, you need to configure the required `EngineMain` as the main class:\n\nGradle (Kotlin)\n\n```\napplication {\n    mainClass.set(\"io.ktor.server.netty.EngineMain\")\n}\n```\n\nGradle (Groovy)\n\n```\nmainClassName = \"io.ktor.server.netty.EngineMain\"\n```\n\nMaven\n\n```\n<properties>\n    <main.class>io.ktor.server.netty.EngineMain</main.class>\n</properties>\n```\n\n## Configure an engine\n\nIn this section, we'll take a look at how to specify various engine-specific options.\n\n### In code\n\nThe `embeddedServer` function allows you to pass engine-specific options using the `configure` parameter. This parameter includes options common for all engines and exposed by the [ApplicationEngine.Configuration](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-application-engine/-configuration/index.html) class.\n\nThe example below shows how to configure a server using the `Netty` engine. Within the `configure` block, we define a `connector` to specify the host and port, and customize various server parameters:\n\n```\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, configure = {\n        connectors.add(EngineConnectorBuilder().apply {\n            host = \"127.0.0.1\"\n            port = 8080\n        })\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nThe `connectors.add()` method defines a connector with the specified host ( `127.0.0.1`) and port ( `8080`).\n\nIn addition to these options, you can configure other engine-specific properties.\n\n#### Netty\n\nNetty-specific options are exposed by the [NettyApplicationEngine.Configuration](https://api.ktor.io/ktor-server/ktor-server-netty/io.ktor.server.netty/-netty-application-engine/-configuration/index.html) class.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    embeddedServer(Netty, configure = {\n        requestQueueLimit = 16\n        shareWorkGroup = false\n        configureBootstrap = {\n            // ...\n        }\n        responseWriteTimeoutSeconds = 10\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n#### Jetty\n\nJetty-specific options are exposed by the [JettyApplicationEngineBase.Configuration](https://api.ktor.io/ktor-server/ktor-server-jetty-jakarta/io.ktor.server.jetty.jakarta/-jetty-application-engine-base/-configuration/index.html) class.\n\nYou can configure the Jetty server inside the [configureServer](https://api.ktor.io/ktor-server/ktor-server-jetty-jakarta/io.ktor.server.jetty.jakarta/-jetty-application-engine-base/-configuration/configure-server.html) block, which provides access to a [Server](https://www.eclipse.org/jetty/javadoc/jetty-11/org/eclipse/jetty/server/Server.html) instance.\n\nUse the `idleTimeout` property to specify the duration of time a connection can be idle before it gets closed.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.jetty.jakarta.*\n\nfun main() {\n    embeddedServer(Jetty, configure = {\n        configureServer = { // this: Server -&gt;\n            // ...\n        }\n        idleTimeout = 30.seconds\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n#### CIO\n\nCIO-specific options are exposed by the [CIOApplicationEngine.Configuration](https://api.ktor.io/ktor-server/ktor-server-cio/io.ktor.server.cio/-c-i-o-application-engine/-configuration/index.html) class.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.cio.*\n\nfun main() {\n    embeddedServer(CIO, configure = {\n        connectionIdleTimeoutSeconds = 45\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n#### Tomcat\n\nIf you use Tomcat as the engine, you can configure it using the [configureTomcat](https://api.ktor.io/ktor-server/ktor-server-tomcat-jakarta/io.ktor.server.tomcat.jakarta/-tomcat-application-engine/-configuration/configure-tomcat.html) property, which provides access to a [Tomcat](https://tomcat.apache.org/tomcat-10.1-doc/api/org/apache/catalina/startup/Tomcat.html) instance.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.tomcat.jakarta.*\n\nfun main() {\n    embeddedServer(Tomcat, configure = {\n        configureTomcat = { // this: Tomcat -&gt;\n            // ...\n        }\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n### In a configuration file\n\nIf you use `EngineMain`, you can specify options common for all engines within the `ktor.deployment` group.\n\napplication.conf\n\n```\nktor {\n    deployment {\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }\n}\n```\n\napplication.yaml\n\n```\nktor:\n    deployment:\n        connectionGroupSize: 2\n        workerGroupSize: 5\n        callGroupSize: 10\n        shutdownGracePeriod: 2000\n        shutdownTimeout: 3000\n```\n\n#### Netty\n\nYou can also configure Netty-specific options in a configuration file within the `ktor.deployment` group:\n\napplication.conf\n\n```\nktor {\n    deployment {\n        maxInitialLineLength = 2048\n        maxHeaderSize = 1024\n        maxChunkSize = 42\n    }\n}\n```\n\napplication.yaml\n\n```\nktor:\n    deployment:\n        maxInitialLineLength: 2048\n        maxHeaderSize: 1024\n        maxChunkSize: 42\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-engines.html", "title": "Server engines", "description": "To run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:43", "type": "overview", "page_metadata": {"og:title": "Server engines | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "title": "Server engines | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-engines.html", "built-on": "2025-02-26T14:01:05.257764441", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server engines | Ktor", "og:description": "", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-engines.html", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Server engines | Ktor", "ogLocale": "en_US", "build-number": "707", "twitter:description": "", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "d300bde7-8512-45ca-8aeb-6e6be8dd6462", "sourceURL": "https://ktor.io/docs/server-engines.html", "url": "https://ktor.io/docs/server-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I supported engines in ktor?\n\nAssistant: To supported engines in ktor, here's what you do:\nThe table below lists engines supported by Ktor, along with the supported platforms:\n\n| Engine | Platforms | HTTP/2 |\n| --- | --- | --- |\n| `Netty` | JVM | ✅ |\n| `Jetty` | JVM | ✅ |\n| `Tomcat` | JVM | ✅ |\n| `CIO` (Coroutine-based I/O) | JVM, [Native](https://ktor.io/docs/server-native.html), [GraalVM](https://ktor.io/docs/graalvm.html) | ✖️ |\n| [ServletApplicationEngine](https://ktor.io/docs/server-war.html) | JVM | ✅ |.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-engines.html", "title": "Server engines", "description": "To run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:43", "type": "section_detail", "page_metadata": {"og:title": "Server engines | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "title": "Server engines | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-engines.html", "built-on": "2025-02-26T14:01:05.257764441", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server engines | Ktor", "og:description": "", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-engines.html", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Server engines | Ktor", "ogLocale": "en_US", "build-number": "707", "twitter:description": "", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "d300bde7-8512-45ca-8aeb-6e6be8dd6462", "sourceURL": "https://ktor.io/docs/server-engines.html", "url": "https://ktor.io/docs/server-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nBefore using the desired engine, you need to add the corresponding dependency to your [build script](https://ktor.io/docs/server-dependencies.html):\n\n- `ktor-server-netty`\n- `ktor-server-jetty-jakarta`\n- `ktor-server-tomcat-jakarta`\n- `ktor-server-cio`\n\nBelow are examples of adding a dependency for Netty:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-netty:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-netty:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-netty-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-engines.html", "title": "Server engines", "description": "To run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:43", "type": "section_detail", "page_metadata": {"og:title": "Server engines | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "title": "Server engines | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-engines.html", "built-on": "2025-02-26T14:01:05.257764441", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server engines | Ktor", "og:description": "", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-engines.html", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Server engines | Ktor", "ogLocale": "en_US", "build-number": "707", "twitter:description": "", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "d300bde7-8512-45ca-8aeb-6e6be8dd6462", "sourceURL": "https://ktor.io/docs/server-engines.html", "url": "https://ktor.io/docs/server-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I choose how to create a server in ktor?\n\nAssistant: To choose how to create a server in ktor, here's what you do:\nA Ktor server application can be [created and run in two ways](https://ktor.io/docs/server-create-and-configure.html#embedded): using the [embeddedServer](https://ktor.io/docs/server-engines.html#embeddedServer) to quickly pass server parameters in code, or using [EngineMain](https://ktor.io/docs/server-engines.html#EngineMain) to load the configuration from the external `application.conf` or `application.yaml` file.\n\n### embeddedServer\n\nThe [embeddedServer](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/embedded-server.html) function accepts an engine factory used to create an engine of a specific type. In the example below, we pass the [Netty](https://api.ktor.io/ktor-server/ktor-server-netty/io.ktor.server.netty/-netty/index.html) factory to run a server with the Netty engine and listen on the `8080` port:\n\n```\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\n### EngineMain\n\n`EngineMain` represents an engine for running a server. You can use the following engines:\n\n- `io.ktor.server.netty.EngineMain`\n- `io.ktor.server.jetty.jakarta.EngineMain`\n- `io.ktor.server.tomcat.jakarta.EngineMain`\n- `io.ktor.server.cio.EngineMain`\n\nThe `EngineMain.main` function is used to start a server with the selected engine and loads the [application module](https://ktor.io/docs/server-modules.html) specified in the external [configuration file](https://ktor.io/docs/server-configuration-file.html). In the example below, we start a server from the application's `main` function:\n\nApplication.kt\n\n```\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondText(\"Hello, world!\")\n        }\n    }\n}\n```\n\napplication.conf\n\n```\nktor {\n    deployment {\n        port = 8080\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\napplication.yaml\n\n```\nktor:\n    deployment:\n        port: 8080\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n```\n\nIf you need to start a server using a build system task, you need to configure the required `EngineMain` as the main class:\n\nGradle (Kotlin)\n\n```\napplication {\n    mainClass.set(\"io.ktor.server.netty.EngineMain\")\n}\n```\n\nGradle (Groovy)\n\n```\nmainClassName = \"io.ktor.server.netty.EngineMain\"\n```\n\nMaven\n\n```\n<properties>\n    <main.class>io.ktor.server.netty.EngineMain</main.class>\n</properties>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-engines.html", "title": "Server engines", "description": "To run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:43", "type": "section_detail", "page_metadata": {"og:title": "Server engines | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "title": "Server engines | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-engines.html", "built-on": "2025-02-26T14:01:05.257764441", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server engines | Ktor", "og:description": "", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-engines.html", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Server engines | Ktor", "ogLocale": "en_US", "build-number": "707", "twitter:description": "", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "d300bde7-8512-45ca-8aeb-6e6be8dd6462", "sourceURL": "https://ktor.io/docs/server-engines.html", "url": "https://ktor.io/docs/server-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure an engine in ktor?\n\nAssistant: To configure an engine in ktor, here's what you do:\nIn this section, we'll take a look at how to specify various engine-specific options.\n\n### In code\n\nThe `embeddedServer` function allows you to pass engine-specific options using the `configure` parameter. This parameter includes options common for all engines and exposed by the [ApplicationEngine.Configuration](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-application-engine/-configuration/index.html) class.\n\nThe example below shows how to configure a server using the `Netty` engine. Within the `configure` block, we define a `connector` to specify the host and port, and customize various server parameters:\n\n```\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, configure = {\n        connectors.add(EngineConnectorBuilder().apply {\n            host = \"127.0.0.1\"\n            port = 8080\n        })\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nThe `connectors.add()` method defines a connector with the specified host ( `127.0.0.1`) and port ( `8080`).\n\nIn addition to these options, you can configure other engine-specific properties.\n\n#### Netty\n\nNetty-specific options are exposed by the [NettyApplicationEngine.Configuration](https://api.ktor.io/ktor-server/ktor-server-netty/io.ktor.server.netty/-netty-application-engine/-configuration/index.html) class.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    embeddedServer(Netty, configure = {\n        requestQueueLimit = 16\n        shareWorkGroup = false\n        configureBootstrap = {\n            // ...\n        }\n        responseWriteTimeoutSeconds = 10\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n#### Jetty\n\nJetty-specific options are exposed by the [JettyApplicationEngineBase.Configuration](https://api.ktor.io/ktor-server/ktor-server-jetty-jakarta/io.ktor.server.jetty.jakarta/-jetty-application-engine-base/-configuration/index.html) class.\n\nYou can configure the Jetty server inside the [configureServer](https://api.ktor.io/ktor-server/ktor-server-jetty-jakarta/io.ktor.server.jetty.jakarta/-jetty-application-engine-base/-configuration/configure-server.html) block, which provides access to a [Server](https://www.eclipse.org/jetty/javadoc/jetty-11/org/eclipse/jetty/server/Server.html) instance.\n\nUse the `idleTimeout` property to specify the duration of time a connection can be idle before it gets closed.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.jetty.jakarta.*\n\nfun main() {\n    embeddedServer(Jetty, configure = {\n        configureServer = { // this: Server -&gt;\n            // ...\n        }\n        idleTimeout = 30.seconds\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n#### CIO\n\nCIO-specific options are exposed by the [CIOApplicationEngine.Configuration](https://api.ktor.io/ktor-server/ktor-server-cio/io.ktor.server.cio/-c-i-o-application-engine/-configuration/index.html) class.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.cio.*\n\nfun main() {\n    embeddedServer(CIO, configure = {\n        connectionIdleTimeoutSeconds = 45\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n#### Tomcat\n\nIf you use Tomcat as the engine, you can configure it using the [configureTomcat](https://api.ktor.io/ktor-server/ktor-server-tomcat-jakarta/io.ktor.server.tomcat.jakarta/-tomcat-application-engine/-configuration/configure-tomcat.html) property, which provides access to a [Tomcat](https://tomcat.apache.org/tomcat-10.1-doc/api/org/apache/catalina/startup/Tomcat.html) instance.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.tomcat.jakarta.*\n\nfun main() {\n    embeddedServer(Tomcat, configure = {\n        configureTomcat = { // this: Tomcat -&gt;\n            // ...\n        }\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n### In a configuration file\n\nIf you use `EngineMain`, you can specify options common for all engines within the `ktor.deployment` group.\n\napplication.conf\n\n```\nktor {\n    deployment {\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }\n}\n```\n\napplication.yaml\n\n```\nktor:\n    deployment:\n        connectionGroupSize: 2\n        workerGroupSize: 5\n        callGroupSize: 10\n        shutdownGracePeriod: 2000\n        shutdownTimeout: 3000\n```\n\n#### Netty\n\nYou can also configure Netty-specific options in a configuration file within the `ktor.deployment` group:\n\napplication.conf\n\n```\nktor {\n    deployment {\n        maxInitialLineLength = 2048\n        maxHeaderSize = 1024\n        maxChunkSize = 42\n    }\n}\n```\n\napplication.yaml\n\n```\nktor:\n    deployment:\n        maxInitialLineLength: 2048\n        maxHeaderSize: 1024\n        maxChunkSize: 42\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-engines.html", "title": "Server engines", "description": "To run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:43", "type": "section_detail", "page_metadata": {"og:title": "Server engines | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "title": "Server engines | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-engines.html", "built-on": "2025-02-26T14:01:05.257764441", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server engines | Ktor", "og:description": "", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-engines.html", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Server engines | Ktor", "ogLocale": "en_US", "build-number": "707", "twitter:description": "", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "d300bde7-8512-45ca-8aeb-6e6be8dd6462", "sourceURL": "https://ktor.io/docs/server-engines.html", "url": "https://ktor.io/docs/server-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server engines in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependency for Netty (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-netty:$ktor_version\")\n```\n\nThis snippet shows you how to add dependency for netty (gradle kotlin), which is an important aspect of server engines.\n\n**Add dependency for Netty (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-netty:$ktor_version\"\n```\n\nThis snippet shows you how to add dependency for netty (gradle groovy), which is an important aspect of server engines.\n\n**Add dependency for Netty (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-netty-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependency for netty (maven), which is an important aspect of server engines.\n\n**Create a server using embeddedServer**:\n\n```yaml\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to create a server using embeddedserver, which is an important aspect of server engines.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-engines.html", "title": "Server engines", "description": "To run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:43", "type": "code_examples", "page_metadata": {"og:title": "Server engines | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "title": "Server engines | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-engines.html", "built-on": "2025-02-26T14:01:05.257764441", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server engines | Ktor", "og:description": "", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-engines.html", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Server engines | Ktor", "ogLocale": "en_US", "build-number": "707", "twitter:description": "", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "d300bde7-8512-45ca-8aeb-6e6be8dd6462", "sourceURL": "https://ktor.io/docs/server-engines.html", "url": "https://ktor.io/docs/server-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server engines in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to add the required dependencies for the engine you are using in your build script.\n\nUse the embeddedServer function for quick server setup in code.\n\nFor production applications, consider using EngineMain to load configurations from external files.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-engines.html", "title": "Server engines", "description": "To run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:43", "type": "best_practices", "page_metadata": {"og:title": "Server engines | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "title": "Server engines | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-engines.html", "built-on": "2025-02-26T14:01:05.257764441", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server engines | Ktor", "og:description": "", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-engines.html", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Server engines | Ktor", "ogLocale": "en_US", "build-number": "707", "twitter:description": "", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "d300bde7-8512-45ca-8aeb-6e6be8dd6462", "sourceURL": "https://ktor.io/docs/server-engines.html", "url": "https://ktor.io/docs/server-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin HSTS is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin HSTS in ktor.\n\n# Server Plugin HSTS\n\nThis page covers the HSTS plugin for Ktor, detailing its installation, configuration, and usage.Here's a quick rundown of what this is about:\n\n## Server Plugin HSTS\n\nThe HSTS plugin adds the required HTTP Strict Transport Security headers to the request according to the RFC 6797. When the browser receives HSTS policy headers, it no longer attempts to connect to the server with insecure connections for a given period.\n\n## Add dependencies\n\nTo use HSTS, you need to include the ktor-server-hsts artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-hsts:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-hsts:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-hsts-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install HSTS\n\nTo install the HSTS plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install HSTS...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.hsts.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(HSTS)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.hsts.*\n// ...\nfun Application.module() {\n    install(HSTS)\n    // ...\n}\n```\n\n## Configure HSTS\n\nHSTS exposes its settings via HSTSConfig. The example below shows how to use the maxAgeInSeconds property to specify how long the client should keep the host in a list of known HSTS hosts:\n```\ninstall(HSTS) {\n    maxAgeInSeconds = 10\n}\n```\n\nYou can also provide different HSTS configurations for different hosts using withHost:\n```\ninstall(HSTS) {\n    maxAgeInSeconds = 10\n    withHost(\"sample-host\") {\n        maxAgeInSeconds = 60\n        includeSubDomains = false\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-hsts.html", "title": "Server Plugin HSTS", "description": "This page covers the HSTS plugin for Ktor, detailing its installation, configuration, and usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:41:29", "type": "overview", "page_metadata": {"og:locale": "en_US", "built-on": "2025-02-26T14:01:05.377594496", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "HSTS | Ktor", "twitter:card": "summary_large_image", "og:type": "website", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-hsts.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:title": "HSTS | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-hsts.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:title": "HSTS | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "title": "HSTS | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "2a8ae4d5-f592-4fd6-a7c9-400db134a228", "sourceURL": "https://ktor.io/docs/server-hsts.html", "url": "https://ktor.io/docs/server-hsts.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I server plugin hsts in ktor?\n\nAssistant: To server plugin hsts in ktor, here's what you do:\nThe HSTS plugin adds the required HTTP Strict Transport Security headers to the request according to the RFC 6797. When the browser receives HSTS policy headers, it no longer attempts to connect to the server with insecure connections for a given period..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-hsts.html", "title": "Server Plugin HSTS", "description": "This page covers the HSTS plugin for Ktor, detailing its installation, configuration, and usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:41:29", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "built-on": "2025-02-26T14:01:05.377594496", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "HSTS | Ktor", "twitter:card": "summary_large_image", "og:type": "website", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-hsts.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:title": "HSTS | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-hsts.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:title": "HSTS | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "title": "HSTS | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "2a8ae4d5-f592-4fd6-a7c9-400db134a228", "sourceURL": "https://ktor.io/docs/server-hsts.html", "url": "https://ktor.io/docs/server-hsts.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use HSTS, you need to include the ktor-server-hsts artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-hsts:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-hsts:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-hsts-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-hsts.html", "title": "Server Plugin HSTS", "description": "This page covers the HSTS plugin for Ktor, detailing its installation, configuration, and usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:41:29", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "built-on": "2025-02-26T14:01:05.377594496", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "HSTS | Ktor", "twitter:card": "summary_large_image", "og:type": "website", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-hsts.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:title": "HSTS | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-hsts.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:title": "HSTS | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "title": "HSTS | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "2a8ae4d5-f592-4fd6-a7c9-400db134a228", "sourceURL": "https://ktor.io/docs/server-hsts.html", "url": "https://ktor.io/docs/server-hsts.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install hsts in ktor?\n\nAssistant: To install hsts in ktor, here's what you do:\nTo install the HSTS plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install HSTS...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.hsts.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(HSTS)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.hsts.*\n// ...\nfun Application.module() {\n    install(HSTS)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-hsts.html", "title": "Server Plugin HSTS", "description": "This page covers the HSTS plugin for Ktor, detailing its installation, configuration, and usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:41:29", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "built-on": "2025-02-26T14:01:05.377594496", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "HSTS | Ktor", "twitter:card": "summary_large_image", "og:type": "website", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-hsts.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:title": "HSTS | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-hsts.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:title": "HSTS | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "title": "HSTS | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "2a8ae4d5-f592-4fd6-a7c9-400db134a228", "sourceURL": "https://ktor.io/docs/server-hsts.html", "url": "https://ktor.io/docs/server-hsts.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure hsts in ktor?\n\nAssistant: To configure hsts in ktor, here's what you do:\nHSTS exposes its settings via HSTSConfig. The example below shows how to use the maxAgeInSeconds property to specify how long the client should keep the host in a list of known HSTS hosts:\n```\ninstall(HSTS) {\n    maxAgeInSeconds = 10\n}\n```\n\nYou can also provide different HSTS configurations for different hosts using withHost:\n```\ninstall(HSTS) {\n    maxAgeInSeconds = 10\n    withHost(\"sample-host\") {\n        maxAgeInSeconds = 60\n        includeSubDomains = false\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-hsts.html", "title": "Server Plugin HSTS", "description": "This page covers the HSTS plugin for Ktor, detailing its installation, configuration, and usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:41:29", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "built-on": "2025-02-26T14:01:05.377594496", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "HSTS | Ktor", "twitter:card": "summary_large_image", "og:type": "website", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-hsts.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:title": "HSTS | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-hsts.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:title": "HSTS | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "title": "HSTS | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "2a8ae4d5-f592-4fd6-a7c9-400db134a228", "sourceURL": "https://ktor.io/docs/server-hsts.html", "url": "https://ktor.io/docs/server-hsts.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin HSTS in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HSTS Installation Example**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.hsts.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(HSTS)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to hsts installation example, which is an important aspect of server plugin hsts.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-hsts.html", "title": "Server Plugin HSTS", "description": "This page covers the HSTS plugin for Ktor, detailing its installation, configuration, and usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:41:29", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "built-on": "2025-02-26T14:01:05.377594496", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "HSTS | Ktor", "twitter:card": "summary_large_image", "og:type": "website", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-hsts.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:title": "HSTS | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-hsts.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:title": "HSTS | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "title": "HSTS | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "2a8ae4d5-f592-4fd6-a7c9-400db134a228", "sourceURL": "https://ktor.io/docs/server-hsts.html", "url": "https://ktor.io/docs/server-hsts.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin HSTS in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nHSTS policy headers are ignored over an insecure HTTP connection. For HSTS to take effect, it should be served over a secure connection.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-hsts.html", "title": "Server Plugin HSTS", "description": "This page covers the HSTS plugin for Ktor, detailing its installation, configuration, and usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:41:29", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "built-on": "2025-02-26T14:01:05.377594496", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "HSTS | Ktor", "twitter:card": "summary_large_image", "og:type": "website", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-hsts.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:title": "HSTS | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-hsts.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:title": "HSTS | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "title": "HSTS | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "2a8ae4d5-f592-4fd6-a7c9-400db134a228", "sourceURL": "https://ktor.io/docs/server-hsts.html", "url": "https://ktor.io/docs/server-hsts.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin JSON Web Tokens is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin JSON Web Tokens in ktor.\n\n# Server Plugin JSON Web Tokens\n\nThis page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\nTo enable JWT authentication, you need to include the `ktor-server-auth` and `ktor-server-auth-jwt` artifacts in the build script.\n\n## JWT authorization flow\n\nThe JWT authorization flow in Ktor might look as follows:\n\n1. A client makes a `POST` request with the credentials to a specific authentication route in a server application.\n2. If the credentials are valid, a server generates a JSON web token and signs it with the specified algorithm.\n3. A server sends a generated JWT to a client.\n4. A client can now make a request to a protected resource with a JSON web token passed in the `Authorization` header using the `Bearer` schema.\n5. A server receives a request and performs validations on the JWT.\n6. After validation, a server responds with the contents of a protected resource.\n\n## Install JWT\n\nTo install the `jwt` authentication provider, call the `jwt` function inside the `install` block.\n\n## Configure JWT\n\nIn this section, we'll see how to use JSON web tokens in a server Ktor application. We'll demonstrate two approaches to signing tokens since they require slightly different ways to verify tokens.\n\n## Step 1: Configure JWT settings\n\nTo configure JWT-related settings, you can create a custom `jwt` group in a configuration file.\n\n## Step 2: Generate a token\n\nTo generate a JSON web token, you can use `JWTCreator.Builder`. Code snippets below show how to do this for both `HS256` and `RS256` algorithms.\n\n## Step 3: Configure realm\n\nThe `realm` property allows you to set the realm to be passed in the `WWW-Authenticate` header when accessing a protected route.\n\n## Step 4: Configure a token verifier\n\nThe `verifier` function allows you to verify a token format and its signature.\n\n## Step 5: Validate JWT payload\n\nThe `validate` function allows you to perform additional validations on the JWT payload.\n\n## Step 6: Protect specific resources\n\nAfter configuring the `jwt` provider, you can protect specific resources in our application using the `authenticate` function.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "overview", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\nTo enable JWT authentication, you need to include the `ktor-server-auth` and `ktor-server-auth-jwt` artifacts in the build script..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I jwt authorization flow in ktor?\n\nAssistant: To jwt authorization flow in ktor, here's what you do:\nThe JWT authorization flow in Ktor might look as follows:\n\n1. A client makes a `POST` request with the credentials to a specific authentication route in a server application.\n2. If the credentials are valid, a server generates a JSON web token and signs it with the specified algorithm.\n3. A server sends a generated JWT to a client.\n4. A client can now make a request to a protected resource with a JSON web token passed in the `Authorization` header using the `Bearer` schema.\n5. A server receives a request and performs validations on the JWT.\n6. After validation, a server responds with the contents of a protected resource..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install jwt in ktor?\n\nAssistant: To install jwt in ktor, here's what you do:\nTo install the `jwt` authentication provider, call the `jwt` function inside the `install` block..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure jwt in ktor?\n\nAssistant: To configure jwt in ktor, here's what you do:\nIn this section, we'll see how to use JSON web tokens in a server Ktor application. We'll demonstrate two approaches to signing tokens since they require slightly different ways to verify tokens..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I step 1: configure jwt settings in ktor?\n\nAssistant: To step 1: configure jwt settings in ktor, here's what you do:\nTo configure JWT-related settings, you can create a custom `jwt` group in a configuration file..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I step 2: generate a token in ktor?\n\nAssistant: To step 2: generate a token in ktor, here's what you do:\nTo generate a JSON web token, you can use `JWTCreator.Builder`. Code snippets below show how to do this for both `HS256` and `RS256` algorithms..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I step 3: configure realm in ktor?\n\nAssistant: To step 3: configure realm in ktor, here's what you do:\nThe `realm` property allows you to set the realm to be passed in the `WWW-Authenticate` header when accessing a protected route..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I step 4: configure a token verifier in ktor?\n\nAssistant: To step 4: configure a token verifier in ktor, here's what you do:\nThe `verifier` function allows you to verify a token format and its signature..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I step 5: validate jwt payload in ktor?\n\nAssistant: To step 5: validate jwt payload in ktor, here's what you do:\nThe `validate` function allows you to perform additional validations on the JWT payload..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I step 6: protect specific resources in ktor?\n\nAssistant: To step 6: protect specific resources in ktor, here's what you do:\nAfter configuring the `jwt` provider, you can protect specific resources in our application using the `authenticate` function..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin JSON Web Tokens in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\nimplementation(\"io.ktor:ktor-server-auth-jwt:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies (gradle kotlin), which is an important aspect of server plugin json web tokens.\n\n**Add dependencies (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\nimplementation \"io.ktor:ktor-server-auth-jwt:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies (gradle groovy), which is an important aspect of server plugin json web tokens.\n\n**Add dependencies (Maven)**:\n\n```yaml\n<dependency>\n<groupId>io.ktor</groupId>\n<artifactId>ktor-server-auth-jvm</artifactId>\n<version>${ktor_version}</version>\n</dependency>\n<dependency>\n<groupId>io.ktor</groupId>\n<artifactId>ktor-server-auth-jwt-jvm</artifactId>\n<version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies (maven), which is an important aspect of server plugin json web tokens.\n\n**JWT authorization flow example**:\n\n```yaml\nPOST http://localhost:8080/login\nContent-Type: application/json\n\n{\n     \"username\": \"jetbrains\",\n     \"password\": \"foobar\"\n}\n```\n\nThis snippet shows you how to jwt authorization flow example, which is an important aspect of server plugin json web tokens.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "code_examples", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin JSON Web Tokens in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can get general information about authentication and authorization in Ktor in the Authentication and authorization in Ktor Server section.\n\nNote that secret information should not be stored in the configuration file as plain text. Consider using environment variables to specify such parameters.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-jwt.html", "title": "Server Plugin JSON Web Tokens", "description": "This page covers the implementation and configuration of JSON Web Tokens (JWT) in Ktor server applications, including dependencies, authorization flow, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 03:41:54", "type": "best_practices", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "title": "JSON Web Tokens | Ktor Documentation", "ogSiteName": "Ktor Help", "language": "en-US", "ogTitle": "JSON Web Tokens | Ktor", "built-on": "2025-02-26T14:01:04.105513704", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-jwt.html", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:title": "JSON Web Tokens | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-jwt.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "JSON Web Tokens | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "scrapeId": "7b0da511-b871-4521-9ce6-c7555ed83c01", "sourceURL": "https://ktor.io/docs/server-jwt.html", "url": "https://ktor.io/docs/server-jwt.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Content negotiation and serialization in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Content negotiation and serialization in Ktor Server in ktor.\n\n# Content negotiation and serialization in Ktor Server\n\nThis page covers the ContentNegotiation plugin in Ktor Server, detailing how to negotiate media types and serialize/deserialize content in various formats.Here's a quick rundown of what this is about:\n\n## Server Plugin Content negotiation and serialization in Ktor Server\n\nThe ContentNegotiation plugin serves two primary purposes:\n\n- Negotiating media types between the client and server. For this, it uses the Accept and Content-Type headers.\n\n- Serializing/deserializing the content in a specific format. Ktor supports the following formats out-of-the-box: JSON, XML, CBOR, and ProtoBuf.\n\n## Add dependencies\n\nTo use ContentNegotiation, you need to include the ktor-server-content-negotiation artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-content-negotiation:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-content-negotiation:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-content-negotiation-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nNote that serializers for specific formats require additional artifacts. For example, kotlinx.serialization requires the ktor-serialization-kotlinx-json dependency for JSON.\n\n## Install ContentNegotiation\n\nTo install the ContentNegotiation plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install ContentNegotiation...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\n```kotlin\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.contentnegotiation.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(ContentNegotiation)\n        // ...\n    }.start(wait = true)\n}\n```\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.contentnegotiation.*\n// ...\nfun Application.module() {\n    install(ContentNegotiation)\n    // ...\n}\n```\n\n## Configure a serializer\n\nKtor supports the following formats out-of-the-box: JSON, XML, CBOR. You can also implement your own custom serializer.\n\n## Receive and send data\n\nTo deserialize received data into an object, you need to create a data class, for example:\n\n```kotlin\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\nIf you use kotlinx.serialization, make sure that this class has the @Serializable annotation:\n\n```kotlin\nimport kotlinx.serialization.*\n\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\nTo receive and convert a content for a request, call the receive method that accepts a data class as a parameter:\n\n```kotlin\npost(\"/customer\") {\n    val customer = call.receive<Customer>()\n    customerStorage.add(customer)\n    call.respondText(\"Customer stored correctly\", status = HttpStatusCode.Created)\n}\n```\n\nTo pass a data object in a response, you can use the respond method:\n\n```kotlin\nget(\"/customer/{id}\") {\n    val id = call.parameters[\"id\"]\n    val customer: Customer = customerStorage.find { it.id == id!!.toInt() }!!\n    call.respond(customer)\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-serialization.html", "title": "Content negotiation and serialization in Ktor Server", "description": "This page covers the ContentNegotiation plugin in Ktor Server, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:42:46", "type": "overview", "page_metadata": {"twitter:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-serialization.html", "og:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.887942594", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content negotiation and serialization in Ktor Server | Ktor", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Content negotiation and serialization in Ktor Server | Ktor Documentation", "language": "en-US", "og:description": "", "og:site_name": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-serialization.html", "twitter:card": "summary_large_image", "scrapeId": "db80b743-8ccd-4e06-9eb0-629b5580b0a2", "sourceURL": "https://ktor.io/docs/server-serialization.html", "url": "https://ktor.io/docs/server-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I server plugin content negotiation and serialization in ktor server in ktor?\n\nAssistant: To server plugin content negotiation and serialization in ktor server in ktor, here's what you do:\nThe ContentNegotiation plugin serves two primary purposes:\n\n- Negotiating media types between the client and server. For this, it uses the Accept and Content-Type headers.\n\n- Serializing/deserializing the content in a specific format. Ktor supports the following formats out-of-the-box: JSON, XML, CBOR, and ProtoBuf..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-serialization.html", "title": "Content negotiation and serialization in Ktor Server", "description": "This page covers the ContentNegotiation plugin in Ktor Server, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:42:46", "type": "section_detail", "page_metadata": {"twitter:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-serialization.html", "og:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.887942594", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content negotiation and serialization in Ktor Server | Ktor", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Content negotiation and serialization in Ktor Server | Ktor Documentation", "language": "en-US", "og:description": "", "og:site_name": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-serialization.html", "twitter:card": "summary_large_image", "scrapeId": "db80b743-8ccd-4e06-9eb0-629b5580b0a2", "sourceURL": "https://ktor.io/docs/server-serialization.html", "url": "https://ktor.io/docs/server-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use ContentNegotiation, you need to include the ktor-server-content-negotiation artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-content-negotiation:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-content-negotiation:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-content-negotiation-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nNote that serializers for specific formats require additional artifacts. For example, kotlinx.serialization requires the ktor-serialization-kotlinx-json dependency for JSON..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-serialization.html", "title": "Content negotiation and serialization in Ktor Server", "description": "This page covers the ContentNegotiation plugin in Ktor Server, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:42:46", "type": "section_detail", "page_metadata": {"twitter:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-serialization.html", "og:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.887942594", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content negotiation and serialization in Ktor Server | Ktor", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Content negotiation and serialization in Ktor Server | Ktor Documentation", "language": "en-US", "og:description": "", "og:site_name": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-serialization.html", "twitter:card": "summary_large_image", "scrapeId": "db80b743-8ccd-4e06-9eb0-629b5580b0a2", "sourceURL": "https://ktor.io/docs/server-serialization.html", "url": "https://ktor.io/docs/server-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install contentnegotiation in ktor?\n\nAssistant: To install contentnegotiation in ktor, here's what you do:\nTo install the ContentNegotiation plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install ContentNegotiation...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\n```kotlin\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.contentnegotiation.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(ContentNegotiation)\n        // ...\n    }.start(wait = true)\n}\n```\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.contentnegotiation.*\n// ...\nfun Application.module() {\n    install(ContentNegotiation)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-serialization.html", "title": "Content negotiation and serialization in Ktor Server", "description": "This page covers the ContentNegotiation plugin in Ktor Server, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:42:46", "type": "section_detail", "page_metadata": {"twitter:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-serialization.html", "og:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.887942594", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content negotiation and serialization in Ktor Server | Ktor", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Content negotiation and serialization in Ktor Server | Ktor Documentation", "language": "en-US", "og:description": "", "og:site_name": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-serialization.html", "twitter:card": "summary_large_image", "scrapeId": "db80b743-8ccd-4e06-9eb0-629b5580b0a2", "sourceURL": "https://ktor.io/docs/server-serialization.html", "url": "https://ktor.io/docs/server-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure a serializer in ktor?\n\nAssistant: To configure a serializer in ktor, here's what you do:\nKtor supports the following formats out-of-the-box: JSON, XML, CBOR. You can also implement your own custom serializer..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-serialization.html", "title": "Content negotiation and serialization in Ktor Server", "description": "This page covers the ContentNegotiation plugin in Ktor Server, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:42:46", "type": "section_detail", "page_metadata": {"twitter:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-serialization.html", "og:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.887942594", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content negotiation and serialization in Ktor Server | Ktor", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Content negotiation and serialization in Ktor Server | Ktor Documentation", "language": "en-US", "og:description": "", "og:site_name": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-serialization.html", "twitter:card": "summary_large_image", "scrapeId": "db80b743-8ccd-4e06-9eb0-629b5580b0a2", "sourceURL": "https://ktor.io/docs/server-serialization.html", "url": "https://ktor.io/docs/server-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I receive and send data in ktor?\n\nAssistant: To receive and send data in ktor, here's what you do:\nTo deserialize received data into an object, you need to create a data class, for example:\n\n```kotlin\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\nIf you use kotlinx.serialization, make sure that this class has the @Serializable annotation:\n\n```kotlin\nimport kotlinx.serialization.*\n\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\nTo receive and convert a content for a request, call the receive method that accepts a data class as a parameter:\n\n```kotlin\npost(\"/customer\") {\n    val customer = call.receive<Customer>()\n    customerStorage.add(customer)\n    call.respondText(\"Customer stored correctly\", status = HttpStatusCode.Created)\n}\n```\n\nTo pass a data object in a response, you can use the respond method:\n\n```kotlin\nget(\"/customer/{id}\") {\n    val id = call.parameters[\"id\"]\n    val customer: Customer = customerStorage.find { it.id == id!!.toInt() }!!\n    call.respond(customer)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-serialization.html", "title": "Content negotiation and serialization in Ktor Server", "description": "This page covers the ContentNegotiation plugin in Ktor Server, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:42:46", "type": "section_detail", "page_metadata": {"twitter:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-serialization.html", "og:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.887942594", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content negotiation and serialization in Ktor Server | Ktor", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Content negotiation and serialization in Ktor Server | Ktor Documentation", "language": "en-US", "og:description": "", "og:site_name": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-serialization.html", "twitter:card": "summary_large_image", "scrapeId": "db80b743-8ccd-4e06-9eb0-629b5580b0a2", "sourceURL": "https://ktor.io/docs/server-serialization.html", "url": "https://ktor.io/docs/server-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Content negotiation and serialization in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add ContentNegotiation dependency**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-content-negotiation:$ktor_version\")\n```\n\nThis snippet shows you how to add contentnegotiation dependency, which is an important aspect of content negotiation and serialization in ktor server.\n\n**Install ContentNegotiation in embeddedServer**:\n\n```yaml\nembeddedServer(Netty, port = 8080) {\n    install(ContentNegotiation)\n}\n```\n\nThis snippet shows you how to install contentnegotiation in embeddedserver, which is an important aspect of content negotiation and serialization in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-serialization.html", "title": "Content negotiation and serialization in Ktor Server", "description": "This page covers the ContentNegotiation plugin in Ktor Server, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:42:46", "type": "code_examples", "page_metadata": {"twitter:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-serialization.html", "og:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.887942594", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content negotiation and serialization in Ktor Server | Ktor", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Content negotiation and serialization in Ktor Server | Ktor Documentation", "language": "en-US", "og:description": "", "og:site_name": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-serialization.html", "twitter:card": "summary_large_image", "scrapeId": "db80b743-8ccd-4e06-9eb0-629b5580b0a2", "sourceURL": "https://ktor.io/docs/server-serialization.html", "url": "https://ktor.io/docs/server-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Content negotiation and serialization in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn the client, Ktor provides the ContentNegotiation plugin for serializing/deserializing content.\n\nNote that XML serialization is not supported on jsNode target.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-serialization.html", "title": "Content negotiation and serialization in Ktor Server", "description": "This page covers the ContentNegotiation plugin in Ktor Server, detailing how to negotiate media types and serialize/deserialize content in various formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:42:46", "type": "best_practices", "page_metadata": {"twitter:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-serialization.html", "og:title": "Content negotiation and serialization in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.887942594", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content negotiation and serialization in Ktor Server | Ktor", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Content negotiation and serialization in Ktor Server | Ktor Documentation", "language": "en-US", "og:description": "", "og:site_name": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-serialization.html", "twitter:card": "summary_large_image", "scrapeId": "db80b743-8ccd-4e06-9eb0-629b5580b0a2", "sourceURL": "https://ktor.io/docs/server-serialization.html", "url": "https://ktor.io/docs/server-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Supported platforms is in ktor?\n\nAssistant: Sure, I'd be happy to explain Supported platforms in ktor.\n\n# Supported platforms\n\nThe Ktor server can be used on the following platforms supported by Kotlin:Here's a quick rundown of what this is about:\n\n## Supported platforms\n\nThe Ktor server can be used on the following platforms supported by Kotlin:\n\n- JVM\n\n- [Native](https://ktor.io/docs/server-native.html)\n\n> ### tip\n>\n> Using Ktor in a Kotlin/Native project requires a [new memory manager](https://kotlinlang.org/docs/native-memory-manager.html), which is enabled by default starting with Kotlin 1.7.20.\n\nThe following [targets](https://kotlinlang.org/docs/multiplatform-dsl-reference.html#targets) are supported:\n\n| Target platform | Target preset |\n| --- | --- |\n| Kotlin/JVM | - `jvm` |\n| iOS | - `iosArm32`<br>  <br>- `iosArm64`<br>  <br>- `iosX64`<br>  <br>- `iosSimulatorArm64` |\n| watchOS | - `watchosArm32`<br>  <br>- `watchosArm64`<br>  <br>- `watchosX86`<br>  <br>- `watchosX64`<br>  <br>- `watchosSimulatorArm64` |\n| tvOS | - `tvosArm64`<br>  <br>- `tvosX64`<br>  <br>- `tvosSimulatorArm64` |\n| macOS | - `macosX64`<br>  <br>- `macosArm64` |\n| Linux | - `linuxX64` |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-platforms.html", "title": "Supported platforms", "description": "The Ktor server can be used on the following platforms supported by Kotlin:", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:43:03", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Supported platforms | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Supported platforms | Ktor", "og:locale": "en_US", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-platforms.html", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-platforms.html", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:title": "Supported platforms | Ktor", "built-on": "2025-02-26T14:01:04.938142807", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Supported platforms | Ktor Documentation", "scrapeId": "07088f86-462e-428b-b18f-6488139166d9", "sourceURL": "https://ktor.io/docs/server-platforms.html", "url": "https://ktor.io/docs/server-platforms.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I supported platforms in ktor?\n\nAssistant: To supported platforms in ktor, here's what you do:\nThe Ktor server can be used on the following platforms supported by Kotlin:\n\n- JVM\n\n- [Native](https://ktor.io/docs/server-native.html)\n\n> ### tip\n>\n> Using Ktor in a Kotlin/Native project requires a [new memory manager](https://kotlinlang.org/docs/native-memory-manager.html), which is enabled by default starting with Kotlin 1.7.20.\n\nThe following [targets](https://kotlinlang.org/docs/multiplatform-dsl-reference.html#targets) are supported:\n\n| Target platform | Target preset |\n| --- | --- |\n| Kotlin/JVM | - `jvm` |\n| iOS | - `iosArm32`<br>  <br>- `iosArm64`<br>  <br>- `iosX64`<br>  <br>- `iosSimulatorArm64` |\n| watchOS | - `watchosArm32`<br>  <br>- `watchosArm64`<br>  <br>- `watchosX86`<br>  <br>- `watchosX64`<br>  <br>- `watchosSimulatorArm64` |\n| tvOS | - `tvosArm64`<br>  <br>- `tvosX64`<br>  <br>- `tvosSimulatorArm64` |\n| macOS | - `macosX64`<br>  <br>- `macosArm64` |\n| Linux | - `linuxX64` |.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-platforms.html", "title": "Supported platforms", "description": "The Ktor server can be used on the following platforms supported by Kotlin:", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:43:03", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Supported platforms | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Supported platforms | Ktor", "og:locale": "en_US", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-platforms.html", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-platforms.html", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:title": "Supported platforms | Ktor", "built-on": "2025-02-26T14:01:04.938142807", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Supported platforms | Ktor Documentation", "scrapeId": "07088f86-462e-428b-b18f-6488139166d9", "sourceURL": "https://ktor.io/docs/server-platforms.html", "url": "https://ktor.io/docs/server-platforms.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Supported platforms in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUsing Ktor in a Kotlin/Native project requires a new memory manager, which is enabled by default starting with Kotlin 1.7.20.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-platforms.html", "title": "Supported platforms", "description": "The Ktor server can be used on the following platforms supported by Kotlin:", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:43:03", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Supported platforms | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Supported platforms | Ktor", "og:locale": "en_US", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-platforms.html", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-platforms.html", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:title": "Supported platforms | Ktor", "built-on": "2025-02-26T14:01:04.938142807", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Supported platforms | Ktor Documentation", "scrapeId": "07088f86-462e-428b-b18f-6488139166d9", "sourceURL": "https://ktor.io/docs/server-platforms.html", "url": "https://ktor.io/docs/server-platforms.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin OAuth is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin OAuth in ktor.\n\n# Server Plugin OAuth\n\nThis page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\nTo use OAuth, you need to include the `ktor-server-auth` artifact in the build script.\n\n## Add dependencies\n\nTo use `OAuth`, you need to include the `ktor-server-auth` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install the Sessions plugin\n\nTo avoid requesting authorization every time a client tries to access a protected resource, you can store the access token in the session upon successful authorization. You can then retrieve the access token from the current session within the handler of the protected route.\n\n```kotlin\nimport io.ktor.server.sessions.*\n\nfun Application.main(httpClient: HttpClient = applicationHttpClient) {\n    install(Sessions) {\n        cookie<UserSession>(\"user_session\")\n    }\n}\n@Serializable\ndata class UserSession(val state: String, val token: String)\n```\n\n## OAuth authorization flow\n\nThe OAuth authorization flow in a Ktor application might look as follows:\n\n1. A user opens a login page in a Ktor application.\n2. Ktor makes an automatic redirect to the authorization page for a specific provider and passes the necessary parameters:\n   - A client ID used to access APIs of the selected provider.\n   - A callback or redirect URL specifying a Ktor application page that will be opened after authorization is completed.\n   - Scopes of third-party resources required for a Ktor application.\n   - A grant type used to get an access token (Authorization Code).\n   - A `state` parameter used to mitigate CSRF attacks and redirect users.\n   - Optional parameters specific for a certain provider.\n3. The authorization page shows a consent screen with the level of permissions required for a Ktor application. These permissions depend on the specified scopes, as configured in the OAuth provider.\n4. If a user approves the requested permissions, the authorization server redirects back to the designated redirect URL and sends the authorization code.\n5. Ktor makes one more automatic request to the specified access token URL, including the following parameters:\n   - Authorization code.\n   - Client ID and client secret.\n6. The authorization server responds by returning an access token.\n7. The client can then use this token to make a request to the required service of the selected provider.\n\n## Install OAuth\n\nTo install the `oauth` authentication provider, call the `oauth` function inside the `install` block. Optionally, you can specify a provider name. For example, to install an `oauth` provider with the name \"auth-oauth-google\" it would look like the following:\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n\nfun Application.main(httpClient: HttpClient = applicationHttpClient) {\n    install(Authentication) {\n        oauth(\"auth-oauth-google\") {\n            // Configure oauth authentication\n        }\n    }\n}\n```\n\n## Configure OAuth\n\nThis section demonstrates how to configure the `oauth` provider for authorizing users of your application using Google. For the complete runnable example, see auth-oauth-google.\n\n### Prerequisites: Create authorization credentials\n1. Open the Credentials page in the Google Cloud Console.\n2. Click CREATE CREDENTIALS and choose `OAuth client ID`.\n3. Choose `Web application` from the dropdown.\n4. Specify the following settings:\n   - Authorised JavaScript origins: `http://localhost:8080`.\n   - Authorised redirect URIs: `http://localhost:8080/callback`.\n5. Click CREATE.\n6. In the invoked dialog, copy the created client ID and client secret that will be used to configure the `oauth` provider.\n\n### Step 1: Create the HTTP client\nBefore configuring the `oauth` provider, you need to create the `HttpClient` that will be used by the server to make requests to the OAuth server.\n\n```kotlin\nval applicationHttpClient = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        json()\n    }\n}\n```\n\n### Step 2: Configure the OAuth provider\nThe code snippet below shows how to create and configure the `oauth` provider with the `auth-oauth-google` name.\n\n```kotlin\nval redirects = mutableMapOf<String, String>()\ninstall(Authentication) {\n    oauth(\"auth-oauth-google\") {\n        // Configure oauth authentication\n        urlProvider = { \"http://localhost:8080/callback\" }\n        providerLookup = {\n            OAuthServerSettings.OAuth2ServerSettings(\n                name = \"google\",\n                authorizeUrl = \"https://accounts.google.com/o/oauth2/auth\",\n                accessTokenUrl = \"https://accounts.google.com/o/oauth2/token\",\n                requestMethod = HttpMethod.Post,\n                clientId = System.getenv(\"GOOGLE_CLIENT_ID\"),\n                clientSecret = System.getenv(\"GOOGLE_CLIENT_SECRET\"),\n                defaultScopes = listOf(\"https://www.googleapis.com/auth/userinfo.profile\"),\n                extraAuthParameters = listOf(\"access_type\" to \"offline\"),\n                onStateCreated = { call, state ->\n                    //saves new state with redirect url value\n                    call.request.queryParameters[\"redirectUrl\"]?.let {\n                        redirects[state] = it\n                    }\n                }\n            )\n        }\n        client = httpClient\n    }\n}\n```\n\n## Add a login route\n\nAfter configuring the `oauth` provider, you need to create a protected login route inside the `authenticate` function that accepts the name of the `oauth` provider. When Ktor receives a request to this route, it will be automatically redirected to `authorizeUrl` defined in `providerLookup`.\n\n```kotlin\nrouting {\n    authenticate(\"auth-oauth-google\") {\n        get(\"/login\") {\n            // Redirects to 'authorizeUrl' automatically\n        }\n    }\n}\n```\n\n## Add a redirect route\n\nApart from the login route, you need to create the redirect route for the `urlProvider`, as specified in Step 2: Configure the OAuth provider. Inside this route you can retrieve the `OAuthAccessTokenResponse` object using the `call.principal` function. `OAuthAccessTokenResponse` allows you to access a token and other parameters returned by the OAuth server.\n\n```kotlin\nrouting {\n    authenticate(\"auth-oauth-google\") {\n        get(\"/login\") {\n            // Redirects to 'authorizeUrl' automatically\n        }\n\n        get(\"/callback\") {\n            val currentPrincipal: OAuthAccessTokenResponse.OAuth2? = call.principal()\n            // redirects home if the url is not found before authorization\n            currentPrincipal?.let { principal ->\n                principal.state?.let { state ->\n                    call.sessions.set(UserSession(state, principal.accessToken))\n                    redirects[state]?.let { redirect ->\n                        call.respondRedirect(redirect)\n                        return@get\n                    }\n                }\n            }\n            call.respondRedirect(\"/home\")\n        }\n    }\n}\n```\n\n## Make a request to API\n\nAfter receiving a token inside the redirect route and saving it to a session, you can make the request to external APIs using this token. The code snippet below shows how to use the `HttpClient` to make such a request and get a user's information by sending this token in the `Authorization` header.\n\nCreate a new function called `getPersonalGreeting` which will make the request and return the response body:\n\n```kotlin\nprivate suspend fun getPersonalGreeting(\n    httpClient: HttpClient,\n    userSession: UserSession\n): UserInfo = httpClient.get(\"https://www.googleapis.com/oauth2/v2/userinfo\") {\n    headers {\n        append(HttpHeaders.Authorization, \"Bearer \\\\$userSession.token\")\n    }\n}.body()\n```\n\nThen, you can call the function within a `get` route to retrieve a user's information:\n\n```kotlin\nget(\"/{path}\") {\n    val userSession: UserSession? = getSession(call)\n    if (userSession != null) {\n        val userInfo: UserInfo = getPersonalGreeting(httpClient, userSession)\n        call.respondText(\"Hello, \\\\$userInfo.name!\")\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "overview", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\nTo use OAuth, you need to include the `ktor-server-auth` artifact in the build script..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `OAuth`, you need to include the `ktor-server-auth` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install the sessions plugin in ktor?\n\nAssistant: To install the sessions plugin in ktor, here's what you do:\nTo avoid requesting authorization every time a client tries to access a protected resource, you can store the access token in the session upon successful authorization. You can then retrieve the access token from the current session within the handler of the protected route.\n\n```kotlin\nimport io.ktor.server.sessions.*\n\nfun Application.main(httpClient: HttpClient = applicationHttpClient) {\n    install(Sessions) {\n        cookie<UserSession>(\"user_session\")\n    }\n}\n@Serializable\ndata class UserSession(val state: String, val token: String)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I oauth authorization flow in ktor?\n\nAssistant: To oauth authorization flow in ktor, here's what you do:\nThe OAuth authorization flow in a Ktor application might look as follows:\n\n1. A user opens a login page in a Ktor application.\n2. Ktor makes an automatic redirect to the authorization page for a specific provider and passes the necessary parameters:\n   - A client ID used to access APIs of the selected provider.\n   - A callback or redirect URL specifying a Ktor application page that will be opened after authorization is completed.\n   - Scopes of third-party resources required for a Ktor application.\n   - A grant type used to get an access token (Authorization Code).\n   - A `state` parameter used to mitigate CSRF attacks and redirect users.\n   - Optional parameters specific for a certain provider.\n3. The authorization page shows a consent screen with the level of permissions required for a Ktor application. These permissions depend on the specified scopes, as configured in the OAuth provider.\n4. If a user approves the requested permissions, the authorization server redirects back to the designated redirect URL and sends the authorization code.\n5. Ktor makes one more automatic request to the specified access token URL, including the following parameters:\n   - Authorization code.\n   - Client ID and client secret.\n6. The authorization server responds by returning an access token.\n7. The client can then use this token to make a request to the required service of the selected provider..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install oauth in ktor?\n\nAssistant: To install oauth in ktor, here's what you do:\nTo install the `oauth` authentication provider, call the `oauth` function inside the `install` block. Optionally, you can specify a provider name. For example, to install an `oauth` provider with the name \"auth-oauth-google\" it would look like the following:\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n\nfun Application.main(httpClient: HttpClient = applicationHttpClient) {\n    install(Authentication) {\n        oauth(\"auth-oauth-google\") {\n            // Configure oauth authentication\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure oauth in ktor?\n\nAssistant: To configure oauth in ktor, here's what you do:\nThis section demonstrates how to configure the `oauth` provider for authorizing users of your application using Google. For the complete runnable example, see auth-oauth-google.\n\n### Prerequisites: Create authorization credentials\n1. Open the Credentials page in the Google Cloud Console.\n2. Click CREATE CREDENTIALS and choose `OAuth client ID`.\n3. Choose `Web application` from the dropdown.\n4. Specify the following settings:\n   - Authorised JavaScript origins: `http://localhost:8080`.\n   - Authorised redirect URIs: `http://localhost:8080/callback`.\n5. Click CREATE.\n6. In the invoked dialog, copy the created client ID and client secret that will be used to configure the `oauth` provider.\n\n### Step 1: Create the HTTP client\nBefore configuring the `oauth` provider, you need to create the `HttpClient` that will be used by the server to make requests to the OAuth server.\n\n```kotlin\nval applicationHttpClient = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        json()\n    }\n}\n```\n\n### Step 2: Configure the OAuth provider\nThe code snippet below shows how to create and configure the `oauth` provider with the `auth-oauth-google` name.\n\n```kotlin\nval redirects = mutableMapOf<String, String>()\ninstall(Authentication) {\n    oauth(\"auth-oauth-google\") {\n        // Configure oauth authentication\n        urlProvider = { \"http://localhost:8080/callback\" }\n        providerLookup = {\n            OAuthServerSettings.OAuth2ServerSettings(\n                name = \"google\",\n                authorizeUrl = \"https://accounts.google.com/o/oauth2/auth\",\n                accessTokenUrl = \"https://accounts.google.com/o/oauth2/token\",\n                requestMethod = HttpMethod.Post,\n                clientId = System.getenv(\"GOOGLE_CLIENT_ID\"),\n                clientSecret = System.getenv(\"GOOGLE_CLIENT_SECRET\"),\n                defaultScopes = listOf(\"https://www.googleapis.com/auth/userinfo.profile\"),\n                extraAuthParameters = listOf(\"access_type\" to \"offline\"),\n                onStateCreated = { call, state ->\n                    //saves new state with redirect url value\n                    call.request.queryParameters[\"redirectUrl\"]?.let {\n                        redirects[state] = it\n                    }\n                }\n            )\n        }\n        client = httpClient\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add a login route in ktor?\n\nAssistant: To add a login route in ktor, here's what you do:\nAfter configuring the `oauth` provider, you need to create a protected login route inside the `authenticate` function that accepts the name of the `oauth` provider. When Ktor receives a request to this route, it will be automatically redirected to `authorizeUrl` defined in `providerLookup`.\n\n```kotlin\nrouting {\n    authenticate(\"auth-oauth-google\") {\n        get(\"/login\") {\n            // Redirects to 'authorizeUrl' automatically\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add a redirect route in ktor?\n\nAssistant: To add a redirect route in ktor, here's what you do:\nApart from the login route, you need to create the redirect route for the `urlProvider`, as specified in Step 2: Configure the OAuth provider. Inside this route you can retrieve the `OAuthAccessTokenResponse` object using the `call.principal` function. `OAuthAccessTokenResponse` allows you to access a token and other parameters returned by the OAuth server.\n\n```kotlin\nrouting {\n    authenticate(\"auth-oauth-google\") {\n        get(\"/login\") {\n            // Redirects to 'authorizeUrl' automatically\n        }\n\n        get(\"/callback\") {\n            val currentPrincipal: OAuthAccessTokenResponse.OAuth2? = call.principal()\n            // redirects home if the url is not found before authorization\n            currentPrincipal?.let { principal ->\n                principal.state?.let { state ->\n                    call.sessions.set(UserSession(state, principal.accessToken))\n                    redirects[state]?.let { redirect ->\n                        call.respondRedirect(redirect)\n                        return@get\n                    }\n                }\n            }\n            call.respondRedirect(\"/home\")\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I make a request to api in ktor?\n\nAssistant: To make a request to api in ktor, here's what you do:\nAfter receiving a token inside the redirect route and saving it to a session, you can make the request to external APIs using this token. The code snippet below shows how to use the `HttpClient` to make such a request and get a user's information by sending this token in the `Authorization` header.\n\nCreate a new function called `getPersonalGreeting` which will make the request and return the response body:\n\n```kotlin\nprivate suspend fun getPersonalGreeting(\n    httpClient: HttpClient,\n    userSession: UserSession\n): UserInfo = httpClient.get(\"https://www.googleapis.com/oauth2/v2/userinfo\") {\n    headers {\n        append(HttpHeaders.Authorization, \"Bearer \\\\$userSession.token\")\n    }\n}.body()\n```\n\nThen, you can call the function within a `get` route to retrieve a user's information:\n\n```kotlin\nget(\"/{path}\") {\n    val userSession: UserSession? = getSession(call)\n    if (userSession != null) {\n        val userInfo: UserInfo = getPersonalGreeting(httpClient, userSession)\n        call.respondText(\"Hello, \\\\$userInfo.name!\")\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin OAuth in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of server plugin oauth.\n\n**Install the Sessions plugin**:\n\n```yaml\nimport io.ktor.server.sessions.*\n\nfun Application.main(httpClient: HttpClient = applicationHttpClient) {\n    install(Sessions) {\n        cookie<UserSession>(\"user_session\")\n    }\n}\n@Serializable\ndata class UserSession(val state: String, val token: String)\n\n```\n\nThis snippet shows you how to install the sessions plugin, which is an important aspect of server plugin oauth.\n\n**OAuth authorization flow**:\n\n```yaml\n1. A user opens a login page in a Ktor application.\n2. Ktor makes an automatic redirect to the authorization page for a specific provider and passes the necessary parameters:\n   - A client ID used to access APIs of the selected provider.\n   - A callback or redirect URL specifying a Ktor application page that will be opened after authorization is completed.\n   - Scopes of third-party resources required for a Ktor application.\n   - A grant type used to get an access token (Authorization Code).\n   - A `state` parameter used to mitigate CSRF attacks and redirect users.\n   - Optional parameters specific for a certain provider.\n3. The authorization page shows a consent screen with the level of permissions required for a Ktor application. These permissions depend on the specified scopes, as configured in the OAuth provider.\n4. If a user approves the requested permissions, the authorization server redirects back to the designated redirect URL and sends the authorization code.\n5. Ktor makes one more automatic request to the specified access token URL, including the following parameters:\n   - Authorization code.\n   - Client ID and client secret.\n6. The authorization server responds by returning an access token.\n7. The client can then use this token to make a request to the required service of the selected provider.\n```\n\nThis snippet shows you how to oauth authorization flow, which is an important aspect of server plugin oauth.\n\n**Install OAuth**:\n\n```yaml\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n\nfun Application.main(httpClient: HttpClient = applicationHttpClient) {\n    install(Authentication) {\n        oauth(\"auth-oauth-google\") {\n            // Configure oauth authentication\n        }\n    }\n}\n\n```\n\nThis snippet shows you how to install oauth, which is an important aspect of server plugin oauth.\n\n**Configure OAuth**:\n\n```yaml\nval redirects = mutableMapOf<String, String>()\ninstall(Authentication) {\n    oauth(\"auth-oauth-google\") {\n        // Configure oauth authentication\n        urlProvider = { \"http://localhost:8080/callback\" }\n        providerLookup = {\n            OAuthServerSettings.OAuth2ServerSettings(\n                name = \"google\",\n                authorizeUrl = \"https://accounts.google.com/o/oauth2/auth\",\n                accessTokenUrl = \"https://accounts.google.com/o/oauth2/token\",\n                requestMethod = HttpMethod.Post,\n                clientId = System.getenv(\"GOOGLE_CLIENT_ID\"),\n                clientSecret = System.getenv(\"GOOGLE_CLIENT_SECRET\"),\n                defaultScopes = listOf(\"https://www.googleapis.com/auth/userinfo.profile\"),\n                extraAuthParameters = listOf(\"access_type\" to \"offline\"),\n                onStateCreated = { call, state ->\n                    //saves new state with redirect url value\n                    call.request.queryParameters[\"redirectUrl\"]?.let {\n                        redirects[state] = it\n                    }\n                }\n            )\n        }\n        client = httpClient\n    }\n}\n```\n\nThis snippet shows you how to configure oauth, which is an important aspect of server plugin oauth.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "code_examples", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin OAuth in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can get general information about authentication and authorization in Ktor in the Authentication and authorization in Ktor Server section.\n\nMake sure that the redirect route is added to a list of Authorised redirect URIs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-oauth.html", "title": "Server Plugin OAuth", "description": "This page covers the implementation of OAuth authentication in Ktor applications, including setup, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:43:46", "type": "best_practices", "page_metadata": {"twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "ogTitle": "OAuth | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-oauth.html", "twitter:creator": "@JetBrainsKtor", "og:title": "OAuth | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "title": "OAuth | Ktor Documentation", "build-number": "707", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-oauth.html", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OAuth | Ktor", "og:description": "", "built-on": "2025-02-26T14:01:04.461515937", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "4a2ccc87-caea-42be-b662-4b007151adb1", "sourceURL": "https://ktor.io/docs/server-oauth.html", "url": "https://ktor.io/docs/server-oauth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Pebble is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Pebble in ktor.\n\n# Server Plugin Pebble\n\nKtor allows you to use Pebble templates as views within your application by installing the Pebble plugin.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `Pebble`, you need to include the `ktor-server-pebble` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-pebble:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-pebble:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-pebble-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install Pebble\n\nTo install the `Pebble` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `Pebble`...\n\n- ... inside the `embeddedServer` function call.\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\n### embeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.pebble.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Pebble)\n        // ...\n    }.start(wait = true)\n}\n```\n\n### module\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.pebble.*\n// ...\nfun Application.module() {\n    install(Pebble)\n    // ...\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-pebble.html", "title": "Server Plugin Pebble", "description": "Ktor allows you to use Pebble templates as views within your application by installing the Pebble plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:44:27", "type": "overview", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "title": "Pebble | Ktor Documentation", "ogLocale": "en_US", "twitter:title": "Pebble | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-pebble.html", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Pebble | Ktor", "ogDescription": "", "ogTitle": "Pebble | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.050787407", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-pebble.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "scrapeId": "c4c3c5ab-f237-4eb3-b11f-df4463112558", "sourceURL": "https://ktor.io/docs/server-pebble.html", "url": "https://ktor.io/docs/server-pebble.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `Pebble`, you need to include the `ktor-server-pebble` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-pebble:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-pebble:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-pebble-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-pebble.html", "title": "Server Plugin Pebble", "description": "Ktor allows you to use Pebble templates as views within your application by installing the Pebble plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:44:27", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "title": "Pebble | Ktor Documentation", "ogLocale": "en_US", "twitter:title": "Pebble | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-pebble.html", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Pebble | Ktor", "ogDescription": "", "ogTitle": "Pebble | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.050787407", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-pebble.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "scrapeId": "c4c3c5ab-f237-4eb3-b11f-df4463112558", "sourceURL": "https://ktor.io/docs/server-pebble.html", "url": "https://ktor.io/docs/server-pebble.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install pebble in ktor?\n\nAssistant: To install pebble in ktor, here's what you do:\nTo install the `Pebble` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `Pebble`...\n\n- ... inside the `embeddedServer` function call.\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\n### embeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.pebble.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Pebble)\n        // ...\n    }.start(wait = true)\n}\n```\n\n### module\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.pebble.*\n// ...\nfun Application.module() {\n    install(Pebble)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-pebble.html", "title": "Server Plugin Pebble", "description": "Ktor allows you to use Pebble templates as views within your application by installing the Pebble plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:44:27", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "title": "Pebble | Ktor Documentation", "ogLocale": "en_US", "twitter:title": "Pebble | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-pebble.html", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Pebble | Ktor", "ogDescription": "", "ogTitle": "Pebble | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.050787407", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-pebble.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "scrapeId": "c4c3c5ab-f237-4eb3-b11f-df4463112558", "sourceURL": "https://ktor.io/docs/server-pebble.html", "url": "https://ktor.io/docs/server-pebble.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Pebble in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure template loading**:\n\n```yaml\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.pebble.*\nimport io.ktor.server.response.*\n\nfun Application.module() {\n    install(Pebble) {\n        loader(ClasspathLoader().apply {\n            prefix = \"templates\"\n        })\n    }\n}\n```\n```\n\nThis snippet shows you how to configure template loading, which is an important aspect of server plugin pebble.\n\n**Send a template in response**:\n\n```yaml\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respond(PebbleContent(\"index.html\", mapOf(\"user\" to sampleUser)))\n}\n```\n```\n\nThis snippet shows you how to send a template in response, which is an important aspect of server plugin pebble.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-pebble.html", "title": "Server Plugin Pebble", "description": "Ktor allows you to use Pebble templates as views within your application by installing the Pebble plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:44:27", "type": "code_examples", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "title": "Pebble | Ktor Documentation", "ogLocale": "en_US", "twitter:title": "Pebble | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-pebble.html", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Pebble | Ktor", "ogDescription": "", "ogTitle": "Pebble | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.050787407", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-pebble.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "scrapeId": "c4c3c5ab-f237-4eb3-b11f-df4463112558", "sourceURL": "https://ktor.io/docs/server-pebble.html", "url": "https://ktor.io/docs/server-pebble.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Pebble in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to include the required dependencies in your build script before using Pebble.\n\nConfigure the PebbleEngine.Builder for loading templates appropriately.\n\nUse the PebbleContent class to respond with templates in your routes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-pebble.html", "title": "Server Plugin Pebble", "description": "Ktor allows you to use Pebble templates as views within your application by installing the Pebble plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:44:27", "type": "best_practices", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "title": "Pebble | Ktor Documentation", "ogLocale": "en_US", "twitter:title": "Pebble | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-pebble.html", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Pebble | Ktor", "ogDescription": "", "ogTitle": "Pebble | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.050787407", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-pebble.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "scrapeId": "c4c3c5ab-f237-4eb3-b11f-df4463112558", "sourceURL": "https://ktor.io/docs/server-pebble.html", "url": "https://ktor.io/docs/server-pebble.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin  SSL in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin  SSL in Ktor Client in ktor.\n\n# Client Plugin  SSL in Ktor Client\n\nThis documentation page covers how to configure SSL in the Ktor client, including loading SSL settings and configuring SSL for different engines.Here's a quick rundown of what this is about:\n\n## Load SSL settings\n\nIn this topic, the Ktor client will be using a certificate loaded from the existing KeyStore file ( `keystore.jks`) generated for the server. Given that different engines use different [JSSE API](https://docs.oracle.com/en/java/javase/17/security/java-secure-socket-extension-jsse-reference-guide.html#GUID-B7AB25FA-7F0C-4EFA-A827-813B2CE7FBDC) to configure SSL (for example, `SSLContext` for Apache or `TrustManager` for Jetty), we need to have the capability to obtain corresponding SSL configurations. The code snippet below creates the `SslSettings` object that loads a certificate from the existing KeyStore file ( `keystore.jks`) and provides functions for loading SSL configurations:\n\n```kotlin\nobject SslSettings {\n    fun getKeyStore(): KeyStore {\n        val keyStoreFile = FileInputStream(\"keystore.jks\")\n        val keyStorePassword = \"foobar\".toCharArray()\n        val keyStore: KeyStore = KeyStore.getInstance(KeyStore.getDefaultType())\n        keyStore.load(keyStoreFile, keyStorePassword)\n        return keyStore\n    }\n\n    fun getTrustManagerFactory(): TrustManagerFactory? {\n        val trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())\n        trustManagerFactory.init(getKeyStore())\n        return trustManagerFactory\n    }\n\n    fun getSslContext(): SSLContext? {\n        val sslContext = SSLContext.getInstance(\"TLS\")\n        sslContext.init(null, getTrustManagerFactory()?.trustManagers, null)\n        return sslContext\n    }\n\n    fun getTrustManager(): X509TrustManager {\n        return getTrustManagerFactory()?.trustManagers?.first { it is X509TrustManager } as X509TrustManager\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-ssl.html", "title": "Client Plugin  SSL in Ktor Client", "description": "This documentation page covers how to configure SSL in the Ktor client, including loading SSL settings and configuring SSL for different engines.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:51", "type": "overview", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:locale": "en_US", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "language": "en-US", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-ssl.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "SSL in Ktor Client | Ktor Documentation", "ogTitle": "SSL in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:06.298689322", "og:title": "SSL in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:title": "SSL in Ktor Client | Ktor", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-ssl.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "7aeb717b-2c7d-41ce-9bd9-f39fb7754f4f", "sourceURL": "https://ktor.io/docs/client-ssl.html", "url": "https://ktor.io/docs/client-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I load ssl settings in ktor?\n\nAssistant: To load ssl settings in ktor, here's what you do:\nIn this topic, the Ktor client will be using a certificate loaded from the existing KeyStore file ( `keystore.jks`) generated for the server. Given that different engines use different [JSSE API](https://docs.oracle.com/en/java/javase/17/security/java-secure-socket-extension-jsse-reference-guide.html#GUID-B7AB25FA-7F0C-4EFA-A827-813B2CE7FBDC) to configure SSL (for example, `SSLContext` for Apache or `TrustManager` for Jetty), we need to have the capability to obtain corresponding SSL configurations. The code snippet below creates the `SslSettings` object that loads a certificate from the existing KeyStore file ( `keystore.jks`) and provides functions for loading SSL configurations:\n\n```kotlin\nobject SslSettings {\n    fun getKeyStore(): KeyStore {\n        val keyStoreFile = FileInputStream(\"keystore.jks\")\n        val keyStorePassword = \"foobar\".toCharArray()\n        val keyStore: KeyStore = KeyStore.getInstance(KeyStore.getDefaultType())\n        keyStore.load(keyStoreFile, keyStorePassword)\n        return keyStore\n    }\n\n    fun getTrustManagerFactory(): TrustManagerFactory? {\n        val trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())\n        trustManagerFactory.init(getKeyStore())\n        return trustManagerFactory\n    }\n\n    fun getSslContext(): SSLContext? {\n        val sslContext = SSLContext.getInstance(\"TLS\")\n        sslContext.init(null, getTrustManagerFactory()?.trustManagers, null)\n        return sslContext\n    }\n\n    fun getTrustManager(): X509TrustManager {\n        return getTrustManagerFactory()?.trustManagers?.first { it is X509TrustManager } as X509TrustManager\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-ssl.html", "title": "Client Plugin  SSL in Ktor Client", "description": "This documentation page covers how to configure SSL in the Ktor client, including loading SSL settings and configuring SSL for different engines.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:51", "type": "section_detail", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:locale": "en_US", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "language": "en-US", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-ssl.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "SSL in Ktor Client | Ktor Documentation", "ogTitle": "SSL in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:06.298689322", "og:title": "SSL in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:title": "SSL in Ktor Client | Ktor", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-ssl.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "7aeb717b-2c7d-41ce-9bd9-f39fb7754f4f", "sourceURL": "https://ktor.io/docs/client-ssl.html", "url": "https://ktor.io/docs/client-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin  SSL in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Load SSL settings**:\n\n```yaml\nobject SslSettings {\n    fun getKeyStore(): KeyStore {\n        val keyStoreFile = FileInputStream(\"keystore.jks\")\n        val keyStorePassword = \"foobar\".toCharArray()\n        val keyStore: KeyStore = KeyStore.getInstance(KeyStore.getDefaultType())\n        keyStore.load(keyStoreFile, keyStorePassword)\n        return keyStore\n    }\n\n    fun getTrustManagerFactory(): TrustManagerFactory? {\n        val trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())\n        trustManagerFactory.init(getKeyStore())\n        return trustManagerFactory\n    }\n\n    fun getSslContext(): SSLContext? {\n        val sslContext = SSLContext.getInstance(\"TLS\")\n        sslContext.init(null, getTrustManagerFactory()?.trustManagers, null)\n        return sslContext\n    }\n\n    fun getTrustManager(): X509TrustManager {\n        return getTrustManagerFactory()?.trustManagers?.first { it is X509TrustManager } as X509TrustManager\n    }\n}\n```\n\nThis snippet shows you how to load ssl settings, which is an important aspect of client plugin  ssl in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-ssl.html", "title": "Client Plugin  SSL in Ktor Client", "description": "This documentation page covers how to configure SSL in the Ktor client, including loading SSL settings and configuring SSL for different engines.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:51", "type": "code_examples", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:locale": "en_US", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "language": "en-US", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-ssl.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "SSL in Ktor Client | Ktor Documentation", "ogTitle": "SSL in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:06.298689322", "og:title": "SSL in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:title": "SSL in Ktor Client | Ktor", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-ssl.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "7aeb717b-2c7d-41ce-9bd9-f39fb7754f4f", "sourceURL": "https://ktor.io/docs/client-ssl.html", "url": "https://ktor.io/docs/client-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin  SSL in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo learn how to generate a self-signed certificate using the Ktor API, see [Generate a self-signed certificate](https://ktor.io/docs/server-ssl.html#self-signed).\n\nAll engines targeted for Android use [network security configuration](https://developer.android.com/training/articles/security-config).\n\nThe [sockets-client-tls](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/sockets-client-tls) example shows how to trust all certificates. This approach should be used for development purposes only.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-ssl.html", "title": "Client Plugin  SSL in Ktor Client", "description": "This documentation page covers how to configure SSL in the Ktor client, including loading SSL settings and configuring SSL for different engines.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:51", "type": "best_practices", "page_metadata": {"twitter:creator": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:locale": "en_US", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "language": "en-US", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-ssl.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "SSL in Ktor Client | Ktor Documentation", "ogTitle": "SSL in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:06.298689322", "og:title": "SSL in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:title": "SSL in Ktor Client | Ktor", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-ssl.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "7aeb717b-2c7d-41ce-9bd9-f39fb7754f4f", "sourceURL": "https://ktor.io/docs/client-ssl.html", "url": "https://ktor.io/docs/client-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Proxy is in ktor?\n\nAssistant: Sure, I'd be happy to explain Proxy in ktor.\n\n# Proxy\n\nKtor HTTP client allows you to configure proxy settings in multiplatform projects. There are two supported types of proxies: HTTP and SOCKS.Here's a quick rundown of what this is about:\n\n## Supported engines\n\nThe table below shows supported proxy types for specific engines:\n\n| Engine | HTTP proxy | SOCKS proxy |\n| --- | --- | --- |\n| Apache | ✅ | ✖️ |\n| Java | ✅ | ✖️ |\n| Jetty | ✖️ | ✖️ |\n| CIO | ✅ | ✖️ |\n| Android | ✅ | ✅ |\n| OkHttp | ✅ | ✅ |\n| JavaScript | ✖️ | ✖️ |\n| Darwin | ✅ | ✖️ |\n| Curl | ✅ | ✅ | \n\n> ### tip\n>\n> Note that HTTPS requests are currently not supported with the HTTP proxy for the Darwin engine.\n\n## Add dependencies\n\nTo configure the proxy in the client, you don't need to add a specific dependency. The required dependencies are:\n\n- ktor-client-core;\n- an engine dependency.\n\n## Configure proxy\n\nTo configure proxy settings, call the `engine` function inside a client configuration block and then use the `proxy` property. This property accepts the `ProxyConfig` instance that can be created using the `ProxyBuilder` factory.\n\n```\nval client = HttpClient() {\n    engine {\n        proxy = // Create proxy configuration\n    }\n}\n```\n\n## HTTP proxy\n\nThe example below shows how to configure HTTP proxy using `ProxyBuilder`:\n\n```\nval client = HttpClient() {\n    engine {\n        proxy = ProxyBuilder.http(\"http://sample-proxy-server:3128/\")\n    }\n}\n```\n\nOn JVM, `ProxyConfig` is mapped to the `Proxy` class, so you can configure the proxy as follows:\n\n```\nval client = HttpClient() {\n    engine {\n        proxy = Proxy(Proxy.Type.HTTP, InetSocketAddress(\"sample-proxy-server\", 3128))\n    }\n}\n```\n\n## SOCKS proxy\n\nThe example below shows how to configure SOCKS proxy using `ProxyBuilder`:\n\n```\nval client = HttpClient() {\n    engine {\n        proxy = ProxyBuilder.socks(host = \"sample-proxy-server\", port = 1080)\n    }\n}\n```\n\nAs for the HTTP proxy, on JVM you can use `Proxy` to configure proxy settings:\n\n```\nval client = HttpClient() {\n    engine {\n        proxy = Proxy(Proxy.Type.SOCKS, InetSocketAddress(\"sample-proxy-server\", 1080))\n    }\n}\n```\n\n## Proxy authentication and authorization\n\nProxy authentication and authorization are engine-specific and should be handled manually. For example, to authenticate a Ktor client to an HTTP proxy server using basic authentication, append the `Proxy-Authorization` header to each request as follows:\n\n```\nval client = HttpClient() {\n    defaultRequest {\n        val credentials = Base64.getEncoder().encodeToString(\"jetbrains:foobar\".toByteArray())\n        header(HttpHeaders.ProxyAuthorization, \"Basic $credentials\")\n    }\n}\n```\n\nTo authenticate a Ktor client to a SOCKS proxy on JVM, you can use the `java.net.socks.username` and `java.net.socks.password` system properties.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-proxy.html", "title": "Proxy", "description": "Ktor HTTP client allows you to configure proxy settings in multiplatform projects. There are two supported types of proxies: HTTP and SOCKS.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:45:09", "type": "overview", "page_metadata": {"ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-proxy.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.33725502", "og:description": "", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "build-number": "707", "og:title": "Proxy | Ktor", "og:url": "https://ktor.io/docs/3.1.1/client-proxy.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogTitle": "Proxy | Ktor", "twitter:title": "Proxy | Ktor", "title": "Proxy | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "e90158f9-5e1a-46ee-a935-dee134e3da55", "sourceURL": "https://ktor.io/docs/client-proxy.html", "url": "https://ktor.io/docs/client-proxy.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I supported engines in ktor?\n\nAssistant: To supported engines in ktor, here's what you do:\nThe table below shows supported proxy types for specific engines:\n\n| Engine | HTTP proxy | SOCKS proxy |\n| --- | --- | --- |\n| Apache | ✅ | ✖️ |\n| Java | ✅ | ✖️ |\n| Jetty | ✖️ | ✖️ |\n| CIO | ✅ | ✖️ |\n| Android | ✅ | ✅ |\n| OkHttp | ✅ | ✅ |\n| JavaScript | ✖️ | ✖️ |\n| Darwin | ✅ | ✖️ |\n| Curl | ✅ | ✅ | \n\n> ### tip\n>\n> Note that HTTPS requests are currently not supported with the HTTP proxy for the Darwin engine..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-proxy.html", "title": "Proxy", "description": "Ktor HTTP client allows you to configure proxy settings in multiplatform projects. There are two supported types of proxies: HTTP and SOCKS.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:45:09", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-proxy.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.33725502", "og:description": "", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "build-number": "707", "og:title": "Proxy | Ktor", "og:url": "https://ktor.io/docs/3.1.1/client-proxy.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogTitle": "Proxy | Ktor", "twitter:title": "Proxy | Ktor", "title": "Proxy | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "e90158f9-5e1a-46ee-a935-dee134e3da55", "sourceURL": "https://ktor.io/docs/client-proxy.html", "url": "https://ktor.io/docs/client-proxy.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo configure the proxy in the client, you don't need to add a specific dependency. The required dependencies are:\n\n- ktor-client-core;\n- an engine dependency..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-proxy.html", "title": "Proxy", "description": "Ktor HTTP client allows you to configure proxy settings in multiplatform projects. There are two supported types of proxies: HTTP and SOCKS.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:45:09", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-proxy.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.33725502", "og:description": "", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "build-number": "707", "og:title": "Proxy | Ktor", "og:url": "https://ktor.io/docs/3.1.1/client-proxy.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogTitle": "Proxy | Ktor", "twitter:title": "Proxy | Ktor", "title": "Proxy | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "e90158f9-5e1a-46ee-a935-dee134e3da55", "sourceURL": "https://ktor.io/docs/client-proxy.html", "url": "https://ktor.io/docs/client-proxy.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure proxy in ktor?\n\nAssistant: To configure proxy in ktor, here's what you do:\nTo configure proxy settings, call the `engine` function inside a client configuration block and then use the `proxy` property. This property accepts the `ProxyConfig` instance that can be created using the `ProxyBuilder` factory.\n\n```\nval client = HttpClient() {\n    engine {\n        proxy = // Create proxy configuration\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-proxy.html", "title": "Proxy", "description": "Ktor HTTP client allows you to configure proxy settings in multiplatform projects. There are two supported types of proxies: HTTP and SOCKS.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:45:09", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-proxy.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.33725502", "og:description": "", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "build-number": "707", "og:title": "Proxy | Ktor", "og:url": "https://ktor.io/docs/3.1.1/client-proxy.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogTitle": "Proxy | Ktor", "twitter:title": "Proxy | Ktor", "title": "Proxy | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "e90158f9-5e1a-46ee-a935-dee134e3da55", "sourceURL": "https://ktor.io/docs/client-proxy.html", "url": "https://ktor.io/docs/client-proxy.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I http proxy in ktor?\n\nAssistant: To http proxy in ktor, here's what you do:\nThe example below shows how to configure HTTP proxy using `ProxyBuilder`:\n\n```\nval client = HttpClient() {\n    engine {\n        proxy = ProxyBuilder.http(\"http://sample-proxy-server:3128/\")\n    }\n}\n```\n\nOn JVM, `ProxyConfig` is mapped to the `Proxy` class, so you can configure the proxy as follows:\n\n```\nval client = HttpClient() {\n    engine {\n        proxy = Proxy(Proxy.Type.HTTP, InetSocketAddress(\"sample-proxy-server\", 3128))\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-proxy.html", "title": "Proxy", "description": "Ktor HTTP client allows you to configure proxy settings in multiplatform projects. There are two supported types of proxies: HTTP and SOCKS.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:45:09", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-proxy.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.33725502", "og:description": "", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "build-number": "707", "og:title": "Proxy | Ktor", "og:url": "https://ktor.io/docs/3.1.1/client-proxy.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogTitle": "Proxy | Ktor", "twitter:title": "Proxy | Ktor", "title": "Proxy | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "e90158f9-5e1a-46ee-a935-dee134e3da55", "sourceURL": "https://ktor.io/docs/client-proxy.html", "url": "https://ktor.io/docs/client-proxy.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I socks proxy in ktor?\n\nAssistant: To socks proxy in ktor, here's what you do:\nThe example below shows how to configure SOCKS proxy using `ProxyBuilder`:\n\n```\nval client = HttpClient() {\n    engine {\n        proxy = ProxyBuilder.socks(host = \"sample-proxy-server\", port = 1080)\n    }\n}\n```\n\nAs for the HTTP proxy, on JVM you can use `Proxy` to configure proxy settings:\n\n```\nval client = HttpClient() {\n    engine {\n        proxy = Proxy(Proxy.Type.SOCKS, InetSocketAddress(\"sample-proxy-server\", 1080))\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-proxy.html", "title": "Proxy", "description": "Ktor HTTP client allows you to configure proxy settings in multiplatform projects. There are two supported types of proxies: HTTP and SOCKS.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:45:09", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-proxy.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.33725502", "og:description": "", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "build-number": "707", "og:title": "Proxy | Ktor", "og:url": "https://ktor.io/docs/3.1.1/client-proxy.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogTitle": "Proxy | Ktor", "twitter:title": "Proxy | Ktor", "title": "Proxy | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "e90158f9-5e1a-46ee-a935-dee134e3da55", "sourceURL": "https://ktor.io/docs/client-proxy.html", "url": "https://ktor.io/docs/client-proxy.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I proxy authentication and authorization in ktor?\n\nAssistant: To proxy authentication and authorization in ktor, here's what you do:\nProxy authentication and authorization are engine-specific and should be handled manually. For example, to authenticate a Ktor client to an HTTP proxy server using basic authentication, append the `Proxy-Authorization` header to each request as follows:\n\n```\nval client = HttpClient() {\n    defaultRequest {\n        val credentials = Base64.getEncoder().encodeToString(\"jetbrains:foobar\".toByteArray())\n        header(HttpHeaders.ProxyAuthorization, \"Basic $credentials\")\n    }\n}\n```\n\nTo authenticate a Ktor client to a SOCKS proxy on JVM, you can use the `java.net.socks.username` and `java.net.socks.password` system properties..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-proxy.html", "title": "Proxy", "description": "Ktor HTTP client allows you to configure proxy settings in multiplatform projects. There are two supported types of proxies: HTTP and SOCKS.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:45:09", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-proxy.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.33725502", "og:description": "", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "build-number": "707", "og:title": "Proxy | Ktor", "og:url": "https://ktor.io/docs/3.1.1/client-proxy.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogTitle": "Proxy | Ktor", "twitter:title": "Proxy | Ktor", "title": "Proxy | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "e90158f9-5e1a-46ee-a935-dee134e3da55", "sourceURL": "https://ktor.io/docs/client-proxy.html", "url": "https://ktor.io/docs/client-proxy.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Proxy in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure HTTP Proxy using ProxyBuilder**:\n\n```yaml\nval client = HttpClient() {\n    engine {\n        proxy = ProxyBuilder.http(\"http://sample-proxy-server:3128/\")\n    }\n}\n```\n\nThis snippet shows you how to configure http proxy using proxybuilder, which is an important aspect of proxy.\n\n**Configure HTTP Proxy on JVM**:\n\n```yaml\nval client = HttpClient() {\n    engine {\n        proxy = Proxy(Proxy.Type.HTTP, InetSocketAddress(\"sample-proxy-server\", 3128))\n    }\n}\n```\n\nThis snippet shows you how to configure http proxy on jvm, which is an important aspect of proxy.\n\n**Configure SOCKS Proxy using ProxyBuilder**:\n\n```yaml\nval client = HttpClient() {\n    engine {\n        proxy = ProxyBuilder.socks(host = \"sample-proxy-server\", port = 1080)\n    }\n}\n```\n\nThis snippet shows you how to configure socks proxy using proxybuilder, which is an important aspect of proxy.\n\n**Configure SOCKS Proxy on JVM**:\n\n```yaml\nval client = HttpClient() {\n    engine {\n        proxy = Proxy(Proxy.Type.SOCKS, InetSocketAddress(\"sample-proxy-server\", 1080))\n    }\n}\n```\n\nThis snippet shows you how to configure socks proxy on jvm, which is an important aspect of proxy.\n\n**Proxy Authentication Example**:\n\n```yaml\nval client = HttpClient() {\n    defaultRequest {\n        val credentials = Base64.getEncoder().encodeToString(\"jetbrains:foobar\".toByteArray())\n        header(HttpHeaders.ProxyAuthorization, \"Basic $credentials\")\n    }\n}\n```\n\nThis snippet shows you how to proxy authentication example, which is an important aspect of proxy.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-proxy.html", "title": "Proxy", "description": "Ktor HTTP client allows you to configure proxy settings in multiplatform projects. There are two supported types of proxies: HTTP and SOCKS.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:45:09", "type": "code_examples", "page_metadata": {"ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-proxy.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.33725502", "og:description": "", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "build-number": "707", "og:title": "Proxy | Ktor", "og:url": "https://ktor.io/docs/3.1.1/client-proxy.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogTitle": "Proxy | Ktor", "twitter:title": "Proxy | Ktor", "title": "Proxy | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "e90158f9-5e1a-46ee-a935-dee134e3da55", "sourceURL": "https://ktor.io/docs/client-proxy.html", "url": "https://ktor.io/docs/client-proxy.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Proxy in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNote that HTTPS requests are currently not supported with the HTTP proxy for the Darwin engine.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-proxy.html", "title": "Proxy", "description": "Ktor HTTP client allows you to configure proxy settings in multiplatform projects. There are two supported types of proxies: HTTP and SOCKS.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:45:09", "type": "best_practices", "page_metadata": {"ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-proxy.html", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.33725502", "og:description": "", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "build-number": "707", "og:title": "Proxy | Ktor", "og:url": "https://ktor.io/docs/3.1.1/client-proxy.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogTitle": "Proxy | Ktor", "twitter:title": "Proxy | Ktor", "title": "Proxy | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "e90158f9-5e1a-46ee-a935-dee134e3da55", "sourceURL": "https://ktor.io/docs/client-proxy.html", "url": "https://ktor.io/docs/client-proxy.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Velocity is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Velocity in ktor.\n\n# Server Plugin Velocity\n\nKtor allows you to use Velocity templates as views within your application by installing the Velocity plugin.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `Velocity`, you need to include the `ktor-server-velocity` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-velocity:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-velocity:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-velocity-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install Velocity\n\nTo install the `Velocity` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `Velocity`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.velocity.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Velocity)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.velocity.*\n// ...\nfun Application.module() {\n    install(Velocity)\n    // ...\n}\n```\n\n## Configure Velocity\n\n### Configure template loading\n\nInside the `install` block, you can configure the `VelocityEngine`. For example, if you want to use templates from the classpath, use a resource loader for `classpath`:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.velocity.*\nimport org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\nimport org.apache.velocity.runtime.RuntimeConstants\n\nfun Application.module() {\n    install(Velocity) {\n        setProperty(RuntimeConstants.RESOURCE_LOADER, \"classpath\")\n        setProperty(\"classpath.resource.loader.class\", ClasspathResourceLoader::class.java.name)\n    }\n}\n```\n\n### Send a template in response\n\nImagine you have the `index.vl` template in `resources/templates`:\n\n```\n<html>\n    <body>\n        <h1>Hello, $user.name</h1>\n    </body>\n</html>\n```\n\nA data model for a user looks as follows:\n\n```\ndata class User(val id: Int, val name: String)\n```\n\nTo use the template for the specified route, pass `VelocityContent` to the `call.respond` method in the following way:\n\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respond(VelocityContent(\"templates/index.vl\", mapOf(\"user\" to sampleUser)))\n}\n```\n\n### Add Velocity tools\n\nIf you've installed the `VelocityTools` plugin, you can access the `EasyFactoryConfiguration` instance inside the `install` block to add standard and custom Velocity tools, for example:\n\n```\ninstall(VelocityTools) {\n    engine {\n        // Engine configuration\n        setProperty(\"resource.loader\", \"string\")\n        addProperty(\"resource.loader.string.name\", \"myRepo\")\n        addProperty(\"resource.loader.string.class\", StringResourceLoader::class.java.name)\n        addProperty(\"resource.loader.string.repository.name\", \"myRepo\")\n    }\n    addDefaultTools() // Add a default tool\n    tool(\"foo\", MyCustomTool::class.java) // Add a custom tool\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-velocity.html", "title": "Server Plugin Velocity", "description": "Ktor allows you to use Velocity templates as views within your application by installing the Velocity plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:37", "type": "overview", "page_metadata": {"og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Velocity | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-velocity.html", "language": "en-US", "twitter:title": "Velocity | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Velocity | Ktor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-velocity.html", "og:title": "Velocity | Ktor", "built-on": "2025-02-26T14:01:02.680258968", "ogDescription": "", "ogLocale": "en_US", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "scrapeId": "854bc49b-1689-4678-abca-5852255ab5a2", "sourceURL": "https://ktor.io/docs/server-velocity.html", "url": "https://ktor.io/docs/server-velocity.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `Velocity`, you need to include the `ktor-server-velocity` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-velocity:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-velocity:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-velocity-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-velocity.html", "title": "Server Plugin Velocity", "description": "Ktor allows you to use Velocity templates as views within your application by installing the Velocity plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:37", "type": "section_detail", "page_metadata": {"og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Velocity | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-velocity.html", "language": "en-US", "twitter:title": "Velocity | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Velocity | Ktor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-velocity.html", "og:title": "Velocity | Ktor", "built-on": "2025-02-26T14:01:02.680258968", "ogDescription": "", "ogLocale": "en_US", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "scrapeId": "854bc49b-1689-4678-abca-5852255ab5a2", "sourceURL": "https://ktor.io/docs/server-velocity.html", "url": "https://ktor.io/docs/server-velocity.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install velocity in ktor?\n\nAssistant: To install velocity in ktor, here's what you do:\nTo install the `Velocity` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `Velocity`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.velocity.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Velocity)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.velocity.*\n// ...\nfun Application.module() {\n    install(Velocity)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-velocity.html", "title": "Server Plugin Velocity", "description": "Ktor allows you to use Velocity templates as views within your application by installing the Velocity plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:37", "type": "section_detail", "page_metadata": {"og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Velocity | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-velocity.html", "language": "en-US", "twitter:title": "Velocity | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Velocity | Ktor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-velocity.html", "og:title": "Velocity | Ktor", "built-on": "2025-02-26T14:01:02.680258968", "ogDescription": "", "ogLocale": "en_US", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "scrapeId": "854bc49b-1689-4678-abca-5852255ab5a2", "sourceURL": "https://ktor.io/docs/server-velocity.html", "url": "https://ktor.io/docs/server-velocity.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure velocity in ktor?\n\nAssistant: To configure velocity in ktor, here's what you do:\n### Configure template loading\n\nInside the `install` block, you can configure the `VelocityEngine`. For example, if you want to use templates from the classpath, use a resource loader for `classpath`:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.velocity.*\nimport org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\nimport org.apache.velocity.runtime.RuntimeConstants\n\nfun Application.module() {\n    install(Velocity) {\n        setProperty(RuntimeConstants.RESOURCE_LOADER, \"classpath\")\n        setProperty(\"classpath.resource.loader.class\", ClasspathResourceLoader::class.java.name)\n    }\n}\n```\n\n### Send a template in response\n\nImagine you have the `index.vl` template in `resources/templates`:\n\n```\n<html>\n    <body>\n        <h1>Hello, $user.name</h1>\n    </body>\n</html>\n```\n\nA data model for a user looks as follows:\n\n```\ndata class User(val id: Int, val name: String)\n```\n\nTo use the template for the specified route, pass `VelocityContent` to the `call.respond` method in the following way:\n\n```\nget(\"/index\") {\n    val sampleUser = User(1, \"John\")\n    call.respond(VelocityContent(\"templates/index.vl\", mapOf(\"user\" to sampleUser)))\n}\n```\n\n### Add Velocity tools\n\nIf you've installed the `VelocityTools` plugin, you can access the `EasyFactoryConfiguration` instance inside the `install` block to add standard and custom Velocity tools, for example:\n\n```\ninstall(VelocityTools) {\n    engine {\n        // Engine configuration\n        setProperty(\"resource.loader\", \"string\")\n        addProperty(\"resource.loader.string.name\", \"myRepo\")\n        addProperty(\"resource.loader.string.class\", StringResourceLoader::class.java.name)\n        addProperty(\"resource.loader.string.repository.name\", \"myRepo\")\n    }\n    addDefaultTools() // Add a default tool\n    tool(\"foo\", MyCustomTool::class.java) // Add a custom tool\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-velocity.html", "title": "Server Plugin Velocity", "description": "Ktor allows you to use Velocity templates as views within your application by installing the Velocity plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:37", "type": "section_detail", "page_metadata": {"og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Velocity | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-velocity.html", "language": "en-US", "twitter:title": "Velocity | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Velocity | Ktor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-velocity.html", "og:title": "Velocity | Ktor", "built-on": "2025-02-26T14:01:02.680258968", "ogDescription": "", "ogLocale": "en_US", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "scrapeId": "854bc49b-1689-4678-abca-5852255ab5a2", "sourceURL": "https://ktor.io/docs/server-velocity.html", "url": "https://ktor.io/docs/server-velocity.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Velocity in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-velocity:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of server plugin velocity.\n\n**Add dependencies (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-velocity:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies (gradle groovy), which is an important aspect of server plugin velocity.\n\n**Add dependencies (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-velocity-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies (maven), which is an important aspect of server plugin velocity.\n\n**Install Velocity (embeddedServer)**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.velocity.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Velocity)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install velocity (embeddedserver), which is an important aspect of server plugin velocity.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-velocity.html", "title": "Server Plugin Velocity", "description": "Ktor allows you to use Velocity templates as views within your application by installing the Velocity plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:37", "type": "code_examples", "page_metadata": {"og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Velocity | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-velocity.html", "language": "en-US", "twitter:title": "Velocity | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Velocity | Ktor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-velocity.html", "og:title": "Velocity | Ktor", "built-on": "2025-02-26T14:01:02.680258968", "ogDescription": "", "ogLocale": "en_US", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "scrapeId": "854bc49b-1689-4678-abca-5852255ab5a2", "sourceURL": "https://ktor.io/docs/server-velocity.html", "url": "https://ktor.io/docs/server-velocity.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Velocity in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOptionally, you can install the `VelocityTools` plugin to have the capability to add standard and custom Velocity tools.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-velocity.html", "title": "Server Plugin Velocity", "description": "Ktor allows you to use Velocity templates as views within your application by installing the Velocity plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:45:37", "type": "best_practices", "page_metadata": {"og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Velocity | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-velocity.html", "language": "en-US", "twitter:title": "Velocity | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Velocity | Ktor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-velocity.html", "og:title": "Velocity | Ktor", "built-on": "2025-02-26T14:01:02.680258968", "ogDescription": "", "ogLocale": "en_US", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "scrapeId": "854bc49b-1689-4678-abca-5852255ab5a2", "sourceURL": "https://ktor.io/docs/server-velocity.html", "url": "https://ktor.io/docs/server-velocity.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Modules is in ktor?\n\nAssistant: Sure, I'd be happy to explain Modules in ktor.\n\n# Modules\n\nKtor allows you to use modules to structure your application by defining a specific set of routes inside a specific module. A module is an extension function of the Application class.Here's a quick rundown of what this is about:\n\n## Modules\n\nKtor allows you to use modules to structure your application by defining a specific set of routes inside a specific module. A module is an extension function of the Application class. In the example below, the `module1` extension function defines a module that accepts GET requests made to the `/module1` URL path.\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module1() {\n    routing {\n        get(\"/module1\") {\n            call.respondText(\"Hello from 'module1'!\")\n        }\n    }\n}\n```\n\nLoading modules in your application depends on the way used to create a server: in code using the `embeddedServer` function or by using the `application.conf` configuration file.\n\n> ### tip\n>\n> Note that plugins installed in a specified module are in effect for other loaded modules.\n\n## embeddedServer\n\nTypically, the `embeddedServer` function accepts a module implicitly as a lambda argument. You can see the example in the Configuration in code section. You can also extract application logic into a separate module and pass a reference to this module as the `module` parameter:\n\n```kotlin\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080, module = Application::module).start(wait = true)\n}\n\nfun Application.module() {\n    module1()\n    module2()\n}\n\nfun Application.module1() {\n    routing {\n        get(\"/module1\") {\n            call.respondText(\"Hello from 'module1'!\")\n        }\n    }\n}\n\nfun Application.module2() {\n    routing {\n        get(\"/module2\") {\n            call.respondText(\"Hello from 'module2'!\")\n        }\n    }\n}\n```\n\nYou can find the full example here: [embedded-server-modules](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/embedded-server-modules).\n\n## Configuration file\n\nIf you use the `application.conf` or `application.yaml` file to configure a server, you need to specify modules to load using the `ktor.application.modules` property.\n\nSuppose you have three modules defined in two packages: two modules in the `com.example` package and one in the `org.sample` package.\n\nApplication.kt\n\nSample.kt\n\n```kotlin\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module1() {\n    routing {\n        get(\"/module1\") {\n            call.respondText(\"Hello from 'module1'!\")\n        }\n    }\n}\n\nfun Application.module2() {\n    routing {\n        get(\"/module2\") {\n            call.respondText(\"Hello from 'module2'!\")\n        }\n    }\n}\n```\n\n```kotlin\npackage org.sample\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module3() {\n    routing {\n        get(\"/module3\") {\n            call.respondText(\"Hello from 'module3'!\")\n        }\n    }\n}\n```\n\nTo reference these modules in a configuration file, you need to provide their fully qualified names. A fully qualified module name includes a fully qualified name of the class and an extension function name.\n\napplication.conf\n\napplication.yaml\n\n```hocon\nktor {\n    application {\n        modules = [ com.example.ApplicationKt.module1,\\\n                    com.example.ApplicationKt.module2,\\\n                    org.sample.SampleKt.module3 ]\n    }\n}\n```\n\n```yaml\nktor:\n    application:\n        modules:\n            - com.example.ApplicationKt.module1\n            - com.example.ApplicationKt.module2\n            - org.sample.SampleKt.module3\n```\n\nYou can find the full example here: [engine-main-modules](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main-modules).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-modules.html", "title": "Modules", "description": "Ktor allows you to use modules to structure your application by defining a specific set of routes inside a specific module. A module is an extension function of the Application class.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:46:02", "type": "overview", "page_metadata": {"twitter:title": "Modules | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "og:description": "", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-modules.html", "built-on": "2025-02-26T14:01:05.775349743", "ogTitle": "Modules | Ktor", "title": "Modules | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "og:title": "Modules | Ktor", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-modules.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "scrapeId": "a958ce65-fffc-4342-a153-54a94e8a6269", "sourceURL": "https://ktor.io/docs/server-modules.html", "url": "https://ktor.io/docs/server-modules.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I modules in ktor?\n\nAssistant: To modules in ktor, here's what you do:\nKtor allows you to use modules to structure your application by defining a specific set of routes inside a specific module. A module is an extension function of the Application class. In the example below, the `module1` extension function defines a module that accepts GET requests made to the `/module1` URL path.\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module1() {\n    routing {\n        get(\"/module1\") {\n            call.respondText(\"Hello from 'module1'!\")\n        }\n    }\n}\n```\n\nLoading modules in your application depends on the way used to create a server: in code using the `embeddedServer` function or by using the `application.conf` configuration file.\n\n> ### tip\n>\n> Note that plugins installed in a specified module are in effect for other loaded modules..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-modules.html", "title": "Modules", "description": "Ktor allows you to use modules to structure your application by defining a specific set of routes inside a specific module. A module is an extension function of the Application class.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:46:02", "type": "section_detail", "page_metadata": {"twitter:title": "Modules | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "og:description": "", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-modules.html", "built-on": "2025-02-26T14:01:05.775349743", "ogTitle": "Modules | Ktor", "title": "Modules | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "og:title": "Modules | Ktor", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-modules.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "scrapeId": "a958ce65-fffc-4342-a153-54a94e8a6269", "sourceURL": "https://ktor.io/docs/server-modules.html", "url": "https://ktor.io/docs/server-modules.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I embeddedserver in ktor?\n\nAssistant: To embeddedserver in ktor, here's what you do:\nTypically, the `embeddedServer` function accepts a module implicitly as a lambda argument. You can see the example in the Configuration in code section. You can also extract application logic into a separate module and pass a reference to this module as the `module` parameter:\n\n```kotlin\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080, module = Application::module).start(wait = true)\n}\n\nfun Application.module() {\n    module1()\n    module2()\n}\n\nfun Application.module1() {\n    routing {\n        get(\"/module1\") {\n            call.respondText(\"Hello from 'module1'!\")\n        }\n    }\n}\n\nfun Application.module2() {\n    routing {\n        get(\"/module2\") {\n            call.respondText(\"Hello from 'module2'!\")\n        }\n    }\n}\n```\n\nYou can find the full example here: [embedded-server-modules](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/embedded-server-modules)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-modules.html", "title": "Modules", "description": "Ktor allows you to use modules to structure your application by defining a specific set of routes inside a specific module. A module is an extension function of the Application class.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:46:02", "type": "section_detail", "page_metadata": {"twitter:title": "Modules | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "og:description": "", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-modules.html", "built-on": "2025-02-26T14:01:05.775349743", "ogTitle": "Modules | Ktor", "title": "Modules | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "og:title": "Modules | Ktor", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-modules.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "scrapeId": "a958ce65-fffc-4342-a153-54a94e8a6269", "sourceURL": "https://ktor.io/docs/server-modules.html", "url": "https://ktor.io/docs/server-modules.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configuration file in ktor?\n\nAssistant: To configuration file in ktor, here's what you do:\nIf you use the `application.conf` or `application.yaml` file to configure a server, you need to specify modules to load using the `ktor.application.modules` property.\n\nSuppose you have three modules defined in two packages: two modules in the `com.example` package and one in the `org.sample` package.\n\nApplication.kt\n\nSample.kt\n\n```kotlin\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module1() {\n    routing {\n        get(\"/module1\") {\n            call.respondText(\"Hello from 'module1'!\")\n        }\n    }\n}\n\nfun Application.module2() {\n    routing {\n        get(\"/module2\") {\n            call.respondText(\"Hello from 'module2'!\")\n        }\n    }\n}\n```\n\n```kotlin\npackage org.sample\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module3() {\n    routing {\n        get(\"/module3\") {\n            call.respondText(\"Hello from 'module3'!\")\n        }\n    }\n}\n```\n\nTo reference these modules in a configuration file, you need to provide their fully qualified names. A fully qualified module name includes a fully qualified name of the class and an extension function name.\n\napplication.conf\n\napplication.yaml\n\n```hocon\nktor {\n    application {\n        modules = [ com.example.ApplicationKt.module1,\\\n                    com.example.ApplicationKt.module2,\\\n                    org.sample.SampleKt.module3 ]\n    }\n}\n```\n\n```yaml\nktor:\n    application:\n        modules:\n            - com.example.ApplicationKt.module1\n            - com.example.ApplicationKt.module2\n            - org.sample.SampleKt.module3\n```\n\nYou can find the full example here: [engine-main-modules](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/engine-main-modules)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-modules.html", "title": "Modules", "description": "Ktor allows you to use modules to structure your application by defining a specific set of routes inside a specific module. A module is an extension function of the Application class.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:46:02", "type": "section_detail", "page_metadata": {"twitter:title": "Modules | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "og:description": "", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-modules.html", "built-on": "2025-02-26T14:01:05.775349743", "ogTitle": "Modules | Ktor", "title": "Modules | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "og:title": "Modules | Ktor", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-modules.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "scrapeId": "a958ce65-fffc-4342-a153-54a94e8a6269", "sourceURL": "https://ktor.io/docs/server-modules.html", "url": "https://ktor.io/docs/server-modules.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Modules in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Module Example**:\n\n```yaml\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module1() {\n    routing {\n        get(\"/module1\") {\n            call.respondText(\"Hello from 'module1'!\")\n        }\n    }\n}\n```\n```\n\nThis snippet shows you how to module example, which is an important aspect of modules.\n\n**Embedded Server Example**:\n\n```yaml\n```kotlin\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080, module = Application::module).start(wait = true)\n}\n\nfun Application.module() {\n    module1()\n    module2()\n}\n\nfun Application.module1() {\n    routing {\n        get(\"/module1\") {\n            call.respondText(\"Hello from 'module1'!\")\n        }\n    }\n}\n\nfun Application.module2() {\n    routing {\n        get(\"/module2\") {\n            call.respondText(\"Hello from 'module2'!\")\n        }\n    }\n}\n```\n```\n\nThis snippet shows you how to embedded server example, which is an important aspect of modules.\n\n**Configuration File Example**:\n\n```yaml\n```hocon\nktor {\n    application {\n        modules = [ com.example.ApplicationKt.module1,\\\n                    com.example.ApplicationKt.module2,\\\n                    org.sample.SampleKt.module3 ]\n    }\n}\n```\n```\n\nThis snippet shows you how to configuration file example, which is an important aspect of modules.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-modules.html", "title": "Modules", "description": "Ktor allows you to use modules to structure your application by defining a specific set of routes inside a specific module. A module is an extension function of the Application class.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:46:02", "type": "code_examples", "page_metadata": {"twitter:title": "Modules | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "og:description": "", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-modules.html", "built-on": "2025-02-26T14:01:05.775349743", "ogTitle": "Modules | Ktor", "title": "Modules | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "og:title": "Modules | Ktor", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-modules.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "scrapeId": "a958ce65-fffc-4342-a153-54a94e8a6269", "sourceURL": "https://ktor.io/docs/server-modules.html", "url": "https://ktor.io/docs/server-modules.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Modules in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNote that plugins installed in a specified module are in effect for other loaded modules.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-modules.html", "title": "Modules", "description": "Ktor allows you to use modules to structure your application by defining a specific set of routes inside a specific module. A module is an extension function of the Application class.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:46:02", "type": "best_practices", "page_metadata": {"twitter:title": "Modules | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "og:description": "", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-modules.html", "built-on": "2025-02-26T14:01:05.775349743", "ogTitle": "Modules | Ktor", "title": "Modules | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "og:title": "Modules | Ktor", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-modules.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogDescription": "", "og:site_name": "Ktor Help", "language": "en-US", "scrapeId": "a958ce65-fffc-4342-a153-54a94e8a6269", "sourceURL": "https://ktor.io/docs/server-modules.html", "url": "https://ktor.io/docs/server-modules.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Native server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Native server in ktor.\n\n# Native server\n\nKtor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine. This page covers the limitations, dependencies, configuration, and creation of a Ktor server in a Kotlin/Native project.Here's a quick rundown of what this is about:\n\n## Native server\n\nKtor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine. Currently, running a Ktor server under Kotlin/Native has the following limitations:\n\n- a server should be created using embeddedServer\n- only the CIO engine is supported\n- HTTPS without a reverse proxy is not supported\n- Windows target is not supported\n\n> ### tip\n>\n> Using Ktor in a Kotlin/Native project requires a new memory manager, which is enabled by default starting with Kotlin 1.7.20.\n\n## Add dependencies\n\nKtor server in a Kotlin/Native project requires at least two dependencies: a ktor-server-core dependency and an engine dependency (CIO). The code snippet below shows how to add dependencies to the nativeMain source set in the build.gradle.kts file:\n\n```\nsourceSets {\n    val nativeMain by getting {\n        dependencies {\n            implementation(\"io.ktor:ktor-server-core:$ktor_version\")\n            implementation(\"io.ktor:ktor-server-cio:$ktor_version\")\n        }\n    }\n}\n```\n\nTo test a Native server, add the ktor-server-test-host artifact to the nativeTest source set:\n\n```\nsourceSets {\n    val nativeTest by getting {\n        dependencies {\n            implementation(kotlin(\"test\"))\n            implementation(\"io.ktor:ktor-server-test-host:$ktor_version\")\n        }\n    }\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-native.html", "title": "Native server", "description": "Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine. This page covers the limitations, dependencies, configuration, and creation of a Ktor server in a Kotlin/Native project.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:46:41", "type": "overview", "page_metadata": {"og:site_name": "Ktor Help", "title": "Native server | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Native server | Ktor", "og:title": "Native server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Native server | Ktor", "ogDescription": "", "built-on": "2025-02-26T14:01:05.069449377", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-native.html", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogLocale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-native.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "fa7662f7-51b2-44db-86a6-dfeba04a4349", "sourceURL": "https://ktor.io/docs/server-native.html", "url": "https://ktor.io/docs/server-native.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I native server in ktor?\n\nAssistant: To native server in ktor, here's what you do:\nKtor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine. Currently, running a Ktor server under Kotlin/Native has the following limitations:\n\n- a server should be created using embeddedServer\n- only the CIO engine is supported\n- HTTPS without a reverse proxy is not supported\n- Windows target is not supported\n\n> ### tip\n>\n> Using Ktor in a Kotlin/Native project requires a new memory manager, which is enabled by default starting with Kotlin 1.7.20..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-native.html", "title": "Native server", "description": "Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine. This page covers the limitations, dependencies, configuration, and creation of a Ktor server in a Kotlin/Native project.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:46:41", "type": "section_detail", "page_metadata": {"og:site_name": "Ktor Help", "title": "Native server | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Native server | Ktor", "og:title": "Native server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Native server | Ktor", "ogDescription": "", "built-on": "2025-02-26T14:01:05.069449377", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-native.html", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogLocale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-native.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "fa7662f7-51b2-44db-86a6-dfeba04a4349", "sourceURL": "https://ktor.io/docs/server-native.html", "url": "https://ktor.io/docs/server-native.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nKtor server in a Kotlin/Native project requires at least two dependencies: a ktor-server-core dependency and an engine dependency (CIO). The code snippet below shows how to add dependencies to the nativeMain source set in the build.gradle.kts file:\n\n```\nsourceSets {\n    val nativeMain by getting {\n        dependencies {\n            implementation(\"io.ktor:ktor-server-core:$ktor_version\")\n            implementation(\"io.ktor:ktor-server-cio:$ktor_version\")\n        }\n    }\n}\n```\n\nTo test a Native server, add the ktor-server-test-host artifact to the nativeTest source set:\n\n```\nsourceSets {\n    val nativeTest by getting {\n        dependencies {\n            implementation(kotlin(\"test\"))\n            implementation(\"io.ktor:ktor-server-test-host:$ktor_version\")\n        }\n    }\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-native.html", "title": "Native server", "description": "Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine. This page covers the limitations, dependencies, configuration, and creation of a Ktor server in a Kotlin/Native project.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:46:41", "type": "section_detail", "page_metadata": {"og:site_name": "Ktor Help", "title": "Native server | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Native server | Ktor", "og:title": "Native server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Native server | Ktor", "ogDescription": "", "built-on": "2025-02-26T14:01:05.069449377", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-native.html", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogLocale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-native.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "fa7662f7-51b2-44db-86a6-dfeba04a4349", "sourceURL": "https://ktor.io/docs/server-native.html", "url": "https://ktor.io/docs/server-native.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Native server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies to nativeMain**:\n\n```yaml\nsourceSets {\n    val nativeMain by getting {\n        dependencies {\n            implementation(\"io.ktor:ktor-server-core:$ktor_version\")\n            implementation(\"io.ktor:ktor-server-cio:$ktor_version\")\n        }\n    }\n}\n```\n\nThis snippet shows you how to add dependencies to nativemain, which is an important aspect of native server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-native.html", "title": "Native server", "description": "Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine. This page covers the limitations, dependencies, configuration, and creation of a Ktor server in a Kotlin/Native project.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:46:41", "type": "code_examples", "page_metadata": {"og:site_name": "Ktor Help", "title": "Native server | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Native server | Ktor", "og:title": "Native server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Native server | Ktor", "ogDescription": "", "built-on": "2025-02-26T14:01:05.069449377", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-native.html", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogLocale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-native.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "fa7662f7-51b2-44db-86a6-dfeba04a4349", "sourceURL": "https://ktor.io/docs/server-native.html", "url": "https://ktor.io/docs/server-native.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Native server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUsing Ktor in a Kotlin/Native project requires a new memory manager, which is enabled by default starting with Kotlin 1.7.20.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-native.html", "title": "Native server", "description": "Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine. This page covers the limitations, dependencies, configuration, and creation of a Ktor server in a Kotlin/Native project.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:46:41", "type": "best_practices", "page_metadata": {"og:site_name": "Ktor Help", "title": "Native server | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Native server | Ktor", "og:title": "Native server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Native server | Ktor", "ogDescription": "", "built-on": "2025-02-26T14:01:05.069449377", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/server-native.html", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogLocale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-native.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "fa7662f7-51b2-44db-86a6-dfeba04a4349", "sourceURL": "https://ktor.io/docs/server-native.html", "url": "https://ktor.io/docs/server-native.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin JTE is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin JTE in ktor.\n\n# Server Plugin JTE\n\nKtor allows you to use JTE templates as views within your application by installing the Jte plugin.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `Jte`, you need to include the `ktor-server-jte` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-jte:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-jte:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-jte-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install Jte\n\nTo install the `Jte` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `Jte`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\n**embeddedServer**\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.jte.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Jte)\n        // ...\n    }.start(wait = true)\n}\n```\n\n**module**\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.jte.*\n// ...\nfun Application.module() {\n    install(Jte)\n    // ...\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-jte.html", "title": "Server Plugin JTE", "description": "Ktor allows you to use JTE templates as views within your application by installing the Jte plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:46:55", "type": "overview", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-jte.html", "ogTitle": "JTE | Ktor", "built-on": "2025-02-26T14:01:03.178988151", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-jte.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:title": "JTE | Ktor", "build-number": "707", "og:title": "JTE | Ktor", "language": "en-US", "title": "JTE | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "33fcd17a-23bb-4ee5-97b0-dd954ea207f7", "sourceURL": "https://ktor.io/docs/server-jte.html", "url": "https://ktor.io/docs/server-jte.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `Jte`, you need to include the `ktor-server-jte` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-jte:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-jte:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-jte-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jte.html", "title": "Server Plugin JTE", "description": "Ktor allows you to use JTE templates as views within your application by installing the Jte plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:46:55", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-jte.html", "ogTitle": "JTE | Ktor", "built-on": "2025-02-26T14:01:03.178988151", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-jte.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:title": "JTE | Ktor", "build-number": "707", "og:title": "JTE | Ktor", "language": "en-US", "title": "JTE | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "33fcd17a-23bb-4ee5-97b0-dd954ea207f7", "sourceURL": "https://ktor.io/docs/server-jte.html", "url": "https://ktor.io/docs/server-jte.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install jte in ktor?\n\nAssistant: To install jte in ktor, here's what you do:\nTo install the `Jte` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `Jte`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\n**embeddedServer**\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.jte.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Jte)\n        // ...\n    }.start(wait = true)\n}\n```\n\n**module**\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.jte.*\n// ...\nfun Application.module() {\n    install(Jte)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-jte.html", "title": "Server Plugin JTE", "description": "Ktor allows you to use JTE templates as views within your application by installing the Jte plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:46:55", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-jte.html", "ogTitle": "JTE | Ktor", "built-on": "2025-02-26T14:01:03.178988151", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-jte.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:title": "JTE | Ktor", "build-number": "707", "og:title": "JTE | Ktor", "language": "en-US", "title": "JTE | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "33fcd17a-23bb-4ee5-97b0-dd954ea207f7", "sourceURL": "https://ktor.io/docs/server-jte.html", "url": "https://ktor.io/docs/server-jte.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin JTE in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure Jte**:\n\n```yaml\nimport gg.jte.TemplateEngine\nimport gg.jte.resolve.DirectoryCodeResolver\nimport io.ktor.server.application.*\nimport io.ktor.server.jte.*\nimport java.nio.file.Path\n\nfun Application.module() {\n    install(Jte) {\n        val resolver = DirectoryCodeResolver(Path.of(\"templates\"))\n        templateEngine = TemplateEngine.create(resolver, gg.jte.ContentType.Html)\n    }\n}\n```\n\nThis snippet shows you how to configure jte, which is an important aspect of server plugin jte.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-jte.html", "title": "Server Plugin JTE", "description": "Ktor allows you to use JTE templates as views within your application by installing the Jte plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:46:55", "type": "code_examples", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-jte.html", "ogTitle": "JTE | Ktor", "built-on": "2025-02-26T14:01:03.178988151", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-jte.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:title": "JTE | Ktor", "build-number": "707", "og:title": "JTE | Ktor", "language": "en-US", "title": "JTE | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "33fcd17a-23bb-4ee5-97b0-dd954ea207f7", "sourceURL": "https://ktor.io/docs/server-jte.html", "url": "https://ktor.io/docs/server-jte.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin JTE in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo handle `.kte` files, you need to add the `gg.jte:jte-kotlin` artifact to your project.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-jte.html", "title": "Server Plugin JTE", "description": "Ktor allows you to use JTE templates as views within your application by installing the Jte plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:46:55", "type": "best_practices", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-jte.html", "ogTitle": "JTE | Ktor", "built-on": "2025-02-26T14:01:03.178988151", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-jte.html", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "twitter:title": "JTE | Ktor", "build-number": "707", "og:title": "JTE | Ktor", "language": "en-US", "title": "JTE | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "33fcd17a-23bb-4ee5-97b0-dd954ea207f7", "sourceURL": "https://ktor.io/docs/server-jte.html", "url": "https://ktor.io/docs/server-jte.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin OpenAPI is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin OpenAPI in ktor.\n\n# Server Plugin OpenAPI\n\nKtor allows you to generate and serve OpenAPI documentation for your project based on the existing OpenAPI specification.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\n- Serving OpenAPI documentation requires adding the `ktor-server-openapi` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-openapi:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-openapi:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-openapi-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Optionally, add the `swagger-codegen-generators` dependency if you want to customize a [code generator](https://github.com/swagger-api/swagger-codegen-generators):\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.swagger.codegen.v3:swagger-codegen-generators:$swagger_codegen_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.swagger.codegen.v3:swagger-codegen-generators:$swagger_codegen_version\"\n```\n\nMaven\n\n```\n<dependency>\n      <groupId>io.swagger.codegen.v3</groupId>\n      <artifactId>swagger-codegen-generators</artifactId>\n      <version>${swagger_codegen_version}</version>\n</dependency>\n```\n\nYou can replace `$swagger_codegen_version` with the required version of the `swagger-codegen-generators` artifact, for example, `1.0.36`.\n\n## Configure OpenAPI\n\nTo serve OpenAPI documentation, you need to call the [openAPI](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-openapi/io.ktor.server.plugins.openapi/open-a-p-i.html) method that creates a `GET` endpoint with documentation at the `path` rendered from the OpenAPI specification placed at `swaggerFile`:\n\n```\nimport io.ktor.server.plugins.openapi.*\n\n// ...\nrouting {\n    openAPI(path=\"openapi\", swaggerFile = \"openapi/documentation.yaml\")\n}\n```\n\nThis method tries to look up the OpenAPI specification in the application resources. Otherwise, it tries to read the OpenAPI specification from the file system using `java.io.File`.\n\nBy default, the documentation is generated using `StaticHtml2Codegen`. You can customize generation settings inside the `openAPI` block:\n\n```\nrouting {\n    openAPI(path=\"openapi\", swaggerFile = \"openapi/documentation.yaml\") {\n        codegen = StaticHtmlCodegen()\n    }\n}\n```\n\nYou can now [run](https://ktor.io/docs/server-run.html) the application and open the `/openapi` page to see the generated documentation.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-openapi.html", "title": "Server Plugin OpenAPI", "description": "Ktor allows you to generate and serve OpenAPI documentation for your project based on the existing OpenAPI specification.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:47:11", "type": "overview", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/server-openapi.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "title": "OpenAPI | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "OpenAPI | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-openapi.html", "ogSiteName": "Ktor Help", "ogDescription": "", "built-on": "2025-02-26T14:01:04.819143562", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OpenAPI | Ktor", "ogTitle": "OpenAPI | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:description": "", "scrapeId": "7c36b4cb-15d3-445d-b72c-70924477a03c", "sourceURL": "https://ktor.io/docs/server-openapi.html", "url": "https://ktor.io/docs/server-openapi.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\n- Serving OpenAPI documentation requires adding the `ktor-server-openapi` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-openapi:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-openapi:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-openapi-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Optionally, add the `swagger-codegen-generators` dependency if you want to customize a [code generator](https://github.com/swagger-api/swagger-codegen-generators):\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.swagger.codegen.v3:swagger-codegen-generators:$swagger_codegen_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.swagger.codegen.v3:swagger-codegen-generators:$swagger_codegen_version\"\n```\n\nMaven\n\n```\n<dependency>\n      <groupId>io.swagger.codegen.v3</groupId>\n      <artifactId>swagger-codegen-generators</artifactId>\n      <version>${swagger_codegen_version}</version>\n</dependency>\n```\n\nYou can replace `$swagger_codegen_version` with the required version of the `swagger-codegen-generators` artifact, for example, `1.0.36`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-openapi.html", "title": "Server Plugin OpenAPI", "description": "Ktor allows you to generate and serve OpenAPI documentation for your project based on the existing OpenAPI specification.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:47:11", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/server-openapi.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "title": "OpenAPI | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "OpenAPI | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-openapi.html", "ogSiteName": "Ktor Help", "ogDescription": "", "built-on": "2025-02-26T14:01:04.819143562", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OpenAPI | Ktor", "ogTitle": "OpenAPI | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:description": "", "scrapeId": "7c36b4cb-15d3-445d-b72c-70924477a03c", "sourceURL": "https://ktor.io/docs/server-openapi.html", "url": "https://ktor.io/docs/server-openapi.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure openapi in ktor?\n\nAssistant: To configure openapi in ktor, here's what you do:\nTo serve OpenAPI documentation, you need to call the [openAPI](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-openapi/io.ktor.server.plugins.openapi/open-a-p-i.html) method that creates a `GET` endpoint with documentation at the `path` rendered from the OpenAPI specification placed at `swaggerFile`:\n\n```\nimport io.ktor.server.plugins.openapi.*\n\n// ...\nrouting {\n    openAPI(path=\"openapi\", swaggerFile = \"openapi/documentation.yaml\")\n}\n```\n\nThis method tries to look up the OpenAPI specification in the application resources. Otherwise, it tries to read the OpenAPI specification from the file system using `java.io.File`.\n\nBy default, the documentation is generated using `StaticHtml2Codegen`. You can customize generation settings inside the `openAPI` block:\n\n```\nrouting {\n    openAPI(path=\"openapi\", swaggerFile = \"openapi/documentation.yaml\") {\n        codegen = StaticHtmlCodegen()\n    }\n}\n```\n\nYou can now [run](https://ktor.io/docs/server-run.html) the application and open the `/openapi` page to see the generated documentation..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-openapi.html", "title": "Server Plugin OpenAPI", "description": "Ktor allows you to generate and serve OpenAPI documentation for your project based on the existing OpenAPI specification.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:47:11", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/server-openapi.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "title": "OpenAPI | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "OpenAPI | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-openapi.html", "ogSiteName": "Ktor Help", "ogDescription": "", "built-on": "2025-02-26T14:01:04.819143562", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OpenAPI | Ktor", "ogTitle": "OpenAPI | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:description": "", "scrapeId": "7c36b4cb-15d3-445d-b72c-70924477a03c", "sourceURL": "https://ktor.io/docs/server-openapi.html", "url": "https://ktor.io/docs/server-openapi.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin OpenAPI in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add ktor-server-openapi dependency**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-openapi:$ktor_version\")\n```\n\nThis snippet shows you how to add ktor-server-openapi dependency, which is an important aspect of server plugin openapi.\n\n**Add swagger-codegen-generators dependency**:\n\n```yaml\nimplementation(\"io.swagger.codegen.v3:swagger-codegen-generators:$swagger_codegen_version\")\n```\n\nThis snippet shows you how to add swagger-codegen-generators dependency, which is an important aspect of server plugin openapi.\n\n**Configure OpenAPI**:\n\n```yaml\nrouting {\n    openAPI(path=\"openapi\", swaggerFile = \"openapi/documentation.yaml\")\n}\n```\n\nThis snippet shows you how to configure openapi, which is an important aspect of server plugin openapi.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-openapi.html", "title": "Server Plugin OpenAPI", "description": "Ktor allows you to generate and serve OpenAPI documentation for your project based on the existing OpenAPI specification.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:47:11", "type": "code_examples", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/server-openapi.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "title": "OpenAPI | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "OpenAPI | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-openapi.html", "ogSiteName": "Ktor Help", "ogDescription": "", "built-on": "2025-02-26T14:01:04.819143562", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OpenAPI | Ktor", "ogTitle": "OpenAPI | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:description": "", "scrapeId": "7c36b4cb-15d3-445d-b72c-70924477a03c", "sourceURL": "https://ktor.io/docs/server-openapi.html", "url": "https://ktor.io/docs/server-openapi.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin OpenAPI in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe following tools are available for generating OpenAPI definitions from code and vice versa:\n\nThe Ktor plugin for IntelliJ IDEA provides the ability to generate OpenAPI documentation for server-side Ktor applications.\n\nThe OpenAPI generator allows you to create a Ktor project from your API definitions by using the kotlin-server generator. Alternatively, you can use IntelliJ IDEA's functionality.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-openapi.html", "title": "Server Plugin OpenAPI", "description": "Ktor allows you to generate and serve OpenAPI documentation for your project based on the existing OpenAPI specification.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:47:11", "type": "best_practices", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/server-openapi.html", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "title": "OpenAPI | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:title": "OpenAPI | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-openapi.html", "ogSiteName": "Ktor Help", "ogDescription": "", "built-on": "2025-02-26T14:01:04.819143562", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "OpenAPI | Ktor", "ogTitle": "OpenAPI | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:description": "", "scrapeId": "7c36b4cb-15d3-445d-b72c-70924477a03c", "sourceURL": "https://ktor.io/docs/server-openapi.html", "url": "https://ktor.io/docs/server-openapi.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin WebSockets in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin WebSockets in Ktor Client in ktor.\n\n# Client Plugin WebSockets in Ktor Client\n\nThis page covers the usage of the WebSockets plugin in the Ktor Client, including installation, configuration, and working with WebSocket sessions.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `WebSockets`, you need to include the `ktor-client-websockets` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-websockets:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-websockets:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-websockets-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nYou can learn more about artifacts required by the Ktor client from [Adding client dependencies](https://ktor.io/docs/client-dependencies.html).\n\n## Install WebSockets\n\nTo install the `WebSockets` plugin, pass it to the `install` function inside a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.websocket.*\n\n//...\nval client = HttpClient(CIO) {\n    install(WebSockets)\n}\n```\n\n## Configuration\n\nOptionally, you can configure the plugin inside the `install` block by passing the supported properties of the [WebSockets.Config](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.websocket/-web-sockets/-config/index.html).\n\n`maxFrameSize`\n\nSet a maximum `Frame` size that could be received or sent.\n\n`contentConverter`\n\nSet a converter for serialization/deserialization.\n\n`pingIntervalMillis`\n\nSpecify the duration between pings in a `Long` format.\n\n`pingInterval`\n\nSpecify the duration between pings in a `Duration` format.\n\n> ### warning\n>\n> The `pingInterval` and `pingIntervalMillis` properties are not applicable for the OkHttp engine. To set the ping interval for OkHttp, you can use the [engine configuration](https://ktor.io/docs/client-engines.html#okhttp):\n>\n> ```\n> import io.ktor.client.engine.okhttp.OkHttp\n>\n> val client = HttpClient(OkHttp) {\n>     engine {\n>         preconfigured = OkHttpClient.Builder()\n>             .pingInterval(20, TimeUnit.SECONDS)\n>             .build()\n>     }\n> }\n> ```\n\nIn the following example, the WebSockets plugin is configured with a ping interval of 20 seconds ( `20_000` milliseconds) to automatically send ping frames and keep the WebSocket connection alive:\n\n```\nval client = HttpClient(CIO) {\n    install(WebSockets) {\n        pingIntervalMillis = 20_000\n    }\n}\n```\n\n## Working with WebSocket sessions\n\nA client's WebSocket session is represented by the [DefaultClientWebSocketSession](https://api.ktor.io/ktor-shared/ktor-websockets/io.ktor.websocket/-default-web-socket-session/index.html) interface. This interface exposes the API that allows you to send and receive WebSocket frames, and close a session.\n\n### Access a WebSocket session\n\n`HttpClient` provides two primary ways to access a WebSocket session:\n\n- The [webSocket()](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.websocket/web-socket.html) function accepts `DefaultClientWebSocketSession` as a block argument.\n\n```\nrunBlocking {\n      client.webSocket(\n          method = HttpMethod.Get,\n          host = \"127.0.0.1\",\n          port = 8080,\n          path = \"/echo\"\n      ) {\n          // this: DefaultClientWebSocketSession\n      }\n}\n```\n\n- The [webSocketSession()](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.websocket/web-socket-session.html) function returns the `DefaultClientWebSocketSession` instance and allows you to access a session outside the `runBlocking` or `launch` scope.\n\n### Handle WebSocket sessions\n\nWithin the function block, you define the handler for the specified path. The following functions and properties are available within the block:\n\n`send()`\n\nUse the `send()` function to send text content to the server.\n\n`outgoing`\n\nUse the `outgoing` property to access the channels for sending WebSocket frames. A frame is represented by the `Frame` class.\n\n`incoming`\n\nUse the `incoming` property to access the channels for receiving WebSocket frames. A frame is represented by the `Frame` class.\n\n`close()`\n\nUse the `close()` function to send a close frame with the specified reason.\n\n### Frame types\n\nYou can inspect the type of WebSocket frame and handle it accordingly. Some common frame types are:\n\n- `Frame.Text` represents a text frame. Use `Frame.Text.readText()` to read its content.\n\n- `Frame.Binary` represents a binary frame. Use `Frame.Binary.readBytes()` to read its content.\n\n- `Frame.Close` represents a closing frame. Use `Frame.Close.readReason()` to get the reason for the session's closure.\n\n## Example\n\nThe example below creates the `echo` WebSocket endpoint and shows how to send and receive a message to and from a server.\n\n```\nfun main() {\n    val client = HttpClient(CIO) {\n        install(WebSockets) {\n            pingIntervalMillis = 20_000\n        }\n    }\n    runBlocking {\n        client.webSocket(method = HttpMethod.Get, host = \"127.0.0.1\", port = 8080, path = \"/echo\") {\n            while(true) {\n                val othersMessage = incoming.receive() as? Frame.Text\n                println(othersMessage?.readText())\n                val myMessage = Scanner(System.`in`).next()\n                if(myMessage != null) {\n                    send(myMessage)\n                }\n            }\n        }\n    }\n    client.close()\n}\n```\n\nFor the full example, see [client-websockets](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-websockets).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-websockets.html", "title": "Client Plugin WebSockets in Ktor Client", "description": "This page covers the usage of the WebSockets plugin in the Ktor Client, including installation, configuration, and working with WebSocket sessions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:47", "type": "overview", "page_metadata": {"ogDescription": "", "twitter:description": "", "og:description": "", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WebSockets in Ktor Client | Ktor", "language": "en-US", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-websockets.html", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "ogLocale": "en_US", "twitter:title": "WebSockets in Ktor Client | Ktor", "og:locale": "en_US", "title": "WebSockets in Ktor Client | Ktor Documentation", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-websockets.html", "og:title": "WebSockets in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.334624484", "scrapeId": "9ff74a9d-5ea4-4c2f-9f25-afdda20784af", "sourceURL": "https://ktor.io/docs/client-websockets.html", "url": "https://ktor.io/docs/client-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `WebSockets`, you need to include the `ktor-client-websockets` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-websockets:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-websockets:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-websockets-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nYou can learn more about artifacts required by the Ktor client from [Adding client dependencies](https://ktor.io/docs/client-dependencies.html)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-websockets.html", "title": "Client Plugin WebSockets in Ktor Client", "description": "This page covers the usage of the WebSockets plugin in the Ktor Client, including installation, configuration, and working with WebSocket sessions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:47", "type": "section_detail", "page_metadata": {"ogDescription": "", "twitter:description": "", "og:description": "", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WebSockets in Ktor Client | Ktor", "language": "en-US", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-websockets.html", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "ogLocale": "en_US", "twitter:title": "WebSockets in Ktor Client | Ktor", "og:locale": "en_US", "title": "WebSockets in Ktor Client | Ktor Documentation", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-websockets.html", "og:title": "WebSockets in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.334624484", "scrapeId": "9ff74a9d-5ea4-4c2f-9f25-afdda20784af", "sourceURL": "https://ktor.io/docs/client-websockets.html", "url": "https://ktor.io/docs/client-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install websockets in ktor?\n\nAssistant: To install websockets in ktor, here's what you do:\nTo install the `WebSockets` plugin, pass it to the `install` function inside a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.websocket.*\n\n//...\nval client = HttpClient(CIO) {\n    install(WebSockets)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-websockets.html", "title": "Client Plugin WebSockets in Ktor Client", "description": "This page covers the usage of the WebSockets plugin in the Ktor Client, including installation, configuration, and working with WebSocket sessions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:47", "type": "section_detail", "page_metadata": {"ogDescription": "", "twitter:description": "", "og:description": "", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WebSockets in Ktor Client | Ktor", "language": "en-US", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-websockets.html", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "ogLocale": "en_US", "twitter:title": "WebSockets in Ktor Client | Ktor", "og:locale": "en_US", "title": "WebSockets in Ktor Client | Ktor Documentation", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-websockets.html", "og:title": "WebSockets in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.334624484", "scrapeId": "9ff74a9d-5ea4-4c2f-9f25-afdda20784af", "sourceURL": "https://ktor.io/docs/client-websockets.html", "url": "https://ktor.io/docs/client-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configuration in ktor?\n\nAssistant: To configuration in ktor, here's what you do:\nOptionally, you can configure the plugin inside the `install` block by passing the supported properties of the [WebSockets.Config](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.websocket/-web-sockets/-config/index.html).\n\n`maxFrameSize`\n\nSet a maximum `Frame` size that could be received or sent.\n\n`contentConverter`\n\nSet a converter for serialization/deserialization.\n\n`pingIntervalMillis`\n\nSpecify the duration between pings in a `Long` format.\n\n`pingInterval`\n\nSpecify the duration between pings in a `Duration` format.\n\n> ### warning\n>\n> The `pingInterval` and `pingIntervalMillis` properties are not applicable for the OkHttp engine. To set the ping interval for OkHttp, you can use the [engine configuration](https://ktor.io/docs/client-engines.html#okhttp):\n>\n> ```\n> import io.ktor.client.engine.okhttp.OkHttp\n>\n> val client = HttpClient(OkHttp) {\n>     engine {\n>         preconfigured = OkHttpClient.Builder()\n>             .pingInterval(20, TimeUnit.SECONDS)\n>             .build()\n>     }\n> }\n> ```\n\nIn the following example, the WebSockets plugin is configured with a ping interval of 20 seconds ( `20_000` milliseconds) to automatically send ping frames and keep the WebSocket connection alive:\n\n```\nval client = HttpClient(CIO) {\n    install(WebSockets) {\n        pingIntervalMillis = 20_000\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-websockets.html", "title": "Client Plugin WebSockets in Ktor Client", "description": "This page covers the usage of the WebSockets plugin in the Ktor Client, including installation, configuration, and working with WebSocket sessions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:47", "type": "section_detail", "page_metadata": {"ogDescription": "", "twitter:description": "", "og:description": "", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WebSockets in Ktor Client | Ktor", "language": "en-US", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-websockets.html", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "ogLocale": "en_US", "twitter:title": "WebSockets in Ktor Client | Ktor", "og:locale": "en_US", "title": "WebSockets in Ktor Client | Ktor Documentation", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-websockets.html", "og:title": "WebSockets in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.334624484", "scrapeId": "9ff74a9d-5ea4-4c2f-9f25-afdda20784af", "sourceURL": "https://ktor.io/docs/client-websockets.html", "url": "https://ktor.io/docs/client-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I working with websocket sessions in ktor?\n\nAssistant: To working with websocket sessions in ktor, here's what you do:\nA client's WebSocket session is represented by the [DefaultClientWebSocketSession](https://api.ktor.io/ktor-shared/ktor-websockets/io.ktor.websocket/-default-web-socket-session/index.html) interface. This interface exposes the API that allows you to send and receive WebSocket frames, and close a session.\n\n### Access a WebSocket session\n\n`HttpClient` provides two primary ways to access a WebSocket session:\n\n- The [webSocket()](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.websocket/web-socket.html) function accepts `DefaultClientWebSocketSession` as a block argument.\n\n```\nrunBlocking {\n      client.webSocket(\n          method = HttpMethod.Get,\n          host = \"127.0.0.1\",\n          port = 8080,\n          path = \"/echo\"\n      ) {\n          // this: DefaultClientWebSocketSession\n      }\n}\n```\n\n- The [webSocketSession()](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.websocket/web-socket-session.html) function returns the `DefaultClientWebSocketSession` instance and allows you to access a session outside the `runBlocking` or `launch` scope.\n\n### Handle WebSocket sessions\n\nWithin the function block, you define the handler for the specified path. The following functions and properties are available within the block:\n\n`send()`\n\nUse the `send()` function to send text content to the server.\n\n`outgoing`\n\nUse the `outgoing` property to access the channels for sending WebSocket frames. A frame is represented by the `Frame` class.\n\n`incoming`\n\nUse the `incoming` property to access the channels for receiving WebSocket frames. A frame is represented by the `Frame` class.\n\n`close()`\n\nUse the `close()` function to send a close frame with the specified reason.\n\n### Frame types\n\nYou can inspect the type of WebSocket frame and handle it accordingly. Some common frame types are:\n\n- `Frame.Text` represents a text frame. Use `Frame.Text.readText()` to read its content.\n\n- `Frame.Binary` represents a binary frame. Use `Frame.Binary.readBytes()` to read its content.\n\n- `Frame.Close` represents a closing frame. Use `Frame.Close.readReason()` to get the reason for the session's closure..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-websockets.html", "title": "Client Plugin WebSockets in Ktor Client", "description": "This page covers the usage of the WebSockets plugin in the Ktor Client, including installation, configuration, and working with WebSocket sessions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:47", "type": "section_detail", "page_metadata": {"ogDescription": "", "twitter:description": "", "og:description": "", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WebSockets in Ktor Client | Ktor", "language": "en-US", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-websockets.html", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "ogLocale": "en_US", "twitter:title": "WebSockets in Ktor Client | Ktor", "og:locale": "en_US", "title": "WebSockets in Ktor Client | Ktor Documentation", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-websockets.html", "og:title": "WebSockets in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.334624484", "scrapeId": "9ff74a9d-5ea4-4c2f-9f25-afdda20784af", "sourceURL": "https://ktor.io/docs/client-websockets.html", "url": "https://ktor.io/docs/client-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example in ktor?\n\nAssistant: To example in ktor, here's what you do:\nThe example below creates the `echo` WebSocket endpoint and shows how to send and receive a message to and from a server.\n\n```\nfun main() {\n    val client = HttpClient(CIO) {\n        install(WebSockets) {\n            pingIntervalMillis = 20_000\n        }\n    }\n    runBlocking {\n        client.webSocket(method = HttpMethod.Get, host = \"127.0.0.1\", port = 8080, path = \"/echo\") {\n            while(true) {\n                val othersMessage = incoming.receive() as? Frame.Text\n                println(othersMessage?.readText())\n                val myMessage = Scanner(System.`in`).next()\n                if(myMessage != null) {\n                    send(myMessage)\n                }\n            }\n        }\n    }\n    client.close()\n}\n```\n\nFor the full example, see [client-websockets](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-websockets)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-websockets.html", "title": "Client Plugin WebSockets in Ktor Client", "description": "This page covers the usage of the WebSockets plugin in the Ktor Client, including installation, configuration, and working with WebSocket sessions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:47", "type": "section_detail", "page_metadata": {"ogDescription": "", "twitter:description": "", "og:description": "", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WebSockets in Ktor Client | Ktor", "language": "en-US", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-websockets.html", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "ogLocale": "en_US", "twitter:title": "WebSockets in Ktor Client | Ktor", "og:locale": "en_US", "title": "WebSockets in Ktor Client | Ktor Documentation", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-websockets.html", "og:title": "WebSockets in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.334624484", "scrapeId": "9ff74a9d-5ea4-4c2f-9f25-afdda20784af", "sourceURL": "https://ktor.io/docs/client-websockets.html", "url": "https://ktor.io/docs/client-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin WebSockets in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-client-websockets:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies - gradle (kotlin), which is an important aspect of client plugin websockets in ktor client.\n\n**Add dependencies - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-client-websockets:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies - gradle (groovy), which is an important aspect of client plugin websockets in ktor client.\n\n**Add dependencies - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-websockets-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies - maven, which is an important aspect of client plugin websockets in ktor client.\n\n**Install WebSockets**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.websocket.*\n\n//...\nval client = HttpClient(CIO) {\n    install(WebSockets)\n}\n```\n\nThis snippet shows you how to install websockets, which is an important aspect of client plugin websockets in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-websockets.html", "title": "Client Plugin WebSockets in Ktor Client", "description": "This page covers the usage of the WebSockets plugin in the Ktor Client, including installation, configuration, and working with WebSocket sessions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:47", "type": "code_examples", "page_metadata": {"ogDescription": "", "twitter:description": "", "og:description": "", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WebSockets in Ktor Client | Ktor", "language": "en-US", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-websockets.html", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "ogLocale": "en_US", "twitter:title": "WebSockets in Ktor Client | Ktor", "og:locale": "en_US", "title": "WebSockets in Ktor Client | Ktor Documentation", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-websockets.html", "og:title": "WebSockets in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.334624484", "scrapeId": "9ff74a9d-5ea4-4c2f-9f25-afdda20784af", "sourceURL": "https://ktor.io/docs/client-websockets.html", "url": "https://ktor.io/docs/client-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin WebSockets in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNot all engines support WebSockets. For an overview of the supported engines, refer to Limitations.\n\nTo learn about WebSocket support on the server-side, see WebSockets in Ktor Server.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-websockets.html", "title": "Client Plugin WebSockets in Ktor Client", "description": "This page covers the usage of the WebSockets plugin in the Ktor Client, including installation, configuration, and working with WebSocket sessions.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:47:47", "type": "best_practices", "page_metadata": {"ogDescription": "", "twitter:description": "", "og:description": "", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WebSockets in Ktor Client | Ktor", "language": "en-US", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/client-websockets.html", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "ogLocale": "en_US", "twitter:title": "WebSockets in Ktor Client | Ktor", "og:locale": "en_US", "title": "WebSockets in Ktor Client | Ktor Documentation", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-websockets.html", "og:title": "WebSockets in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:04.334624484", "scrapeId": "9ff74a9d-5ea4-4c2f-9f25-afdda20784af", "sourceURL": "https://ktor.io/docs/client-websockets.html", "url": "https://ktor.io/docs/client-websockets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin  Logging in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin  Logging in Ktor Client in ktor.\n\n# Client Plugin  Logging in Ktor Client\n\nLogging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\n`io.ktor:ktor-client-logging`\n\n## JVM\n\nOn JVM, Ktor uses the Simple Logging Facade for Java (SLF4J) as an abstraction layer for logging. SLF4J decouples the logging API from the underlying logging implementation, allowing you to integrate the logging framework that best suits your application's requirements. Common choices include Logback or Log4j. If no framework is provided, SLF4J will default to a no-operation (NOP) implementation, which essentially disables logging.\n\nTo enable logging, include an artifact with the required SLF4J implementation, such as Logback:\n\nGradle (Kotlin)\n\n```\nimplementation(\"ch.qos.logback:logback-classic:$logback_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"ch.qos.logback:logback-classic:$logback_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>${logback_version}</version>\n</dependency>\n```\n\n## Android\n\nOn Android, we recommend to use the SLF4J Android library:\n\nGradle (Kotlin)\n\n```\nimplementation(\"org.slf4j:slf4j-android:$slf4j_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"org.slf4j:slf4j-android:$slf4j_version\"\n```\n\n## Native\n\nFor Native targets, the Logging plugin provides a logger that prints everything to the standard output stream (STDOUT).\n\n## Multiplatform\n\nIn multiplatform projects, you can specify a custom logger, such as Napier.\n\n## Add dependencies\n\nTo add the Logging plugin, include the following artifact to your build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-logging:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-logging:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-logging-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install Logging\n\nTo install Logging, pass it to the install function inside a client configuration block:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.logging.*\n//...\nval client = HttpClient(CIO) {\n    install(Logging)\n}\n```\n\n## Configure Logging\n\nThe Logging plugin configuration is provided by the Logging.Config class. The example below shows a sample configuration:\n\n`logger`\nSpecifies a Logger instance. Logger.DEFAULT uses an SLF4J logging framework. For Native targets, set this property to Logger.SIMPLE.\n\n`level`\nSpecifies the logging level. LogLevel.HEADERS will log only request/response headers.\n\n`filter()`\nAllows you to filter log messages for requests matching the specified predicate. In the example below, only requests made to ktor.io get into the log.\n\n`sanitizeHeader()`\nAllows you to sanitize sensitive headers to avoid their values appearing in the logs. In the example below, the Authorization header value will be replaced with '***' when logged.\n\n```\npackage com.example\n\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.logging.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport kotlinx.coroutines.runBlocking\n\nfun main() {\n    runBlocking {\n        val client = HttpClient(CIO) {\n            install(Logging) {\n                logger = Logger.DEFAULT\n                level = LogLevel.HEADERS\n                filter { request ->\n                    request.url.host.contains(\"ktor.io\")\n                }\n                sanitizeHeader { header -> header == HttpHeaders.Authorization }\n            }\n        }\n\n        val response1: HttpResponse = client.get(\"https://ktor.io/\")\n        val response2: HttpResponse = client.get(\"https://jetbrains.com/\")\n    }\n}\n```\n\n## Provide a custom logger\n\nTo use a custom logger in your client application, you need to create a Logger instance and override the log function. The example below shows how to use the Napier library to log HTTP calls:\n\n```\nfun main() {\n    runBlocking {\n        val client = HttpClient(CIO) {\n            install(Logging) {\n                logger = object: Logger {\n                    override fun log(message: String) {\n                        Napier.v(\"HTTP Client\", null, message)\n                    }\n                }\n                level = LogLevel.HEADERS\n            }\n        }.also { Napier.base(DebugAntilog()) }\n\n        val response: HttpResponse = client.get(\"https://ktor.io/\")\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "overview", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\n`io.ktor:ktor-client-logging`.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "section_detail", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I jvm in ktor?\n\nAssistant: To jvm in ktor, here's what you do:\nOn JVM, Ktor uses the Simple Logging Facade for Java (SLF4J) as an abstraction layer for logging. SLF4J decouples the logging API from the underlying logging implementation, allowing you to integrate the logging framework that best suits your application's requirements. Common choices include Logback or Log4j. If no framework is provided, SLF4J will default to a no-operation (NOP) implementation, which essentially disables logging.\n\nTo enable logging, include an artifact with the required SLF4J implementation, such as Logback:\n\nGradle (Kotlin)\n\n```\nimplementation(\"ch.qos.logback:logback-classic:$logback_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"ch.qos.logback:logback-classic:$logback_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>ch.qos.logback</groupId>\n    <artifactId>logback-classic</artifactId>\n    <version>${logback_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "section_detail", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I android in ktor?\n\nAssistant: To android in ktor, here's what you do:\nOn Android, we recommend to use the SLF4J Android library:\n\nGradle (Kotlin)\n\n```\nimplementation(\"org.slf4j:slf4j-android:$slf4j_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"org.slf4j:slf4j-android:$slf4j_version\"\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "section_detail", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I native in ktor?\n\nAssistant: To native in ktor, here's what you do:\nFor Native targets, the Logging plugin provides a logger that prints everything to the standard output stream (STDOUT)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "section_detail", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I multiplatform in ktor?\n\nAssistant: To multiplatform in ktor, here's what you do:\nIn multiplatform projects, you can specify a custom logger, such as Napier..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "section_detail", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo add the Logging plugin, include the following artifact to your build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-logging:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-logging:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-logging-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "section_detail", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install logging in ktor?\n\nAssistant: To install logging in ktor, here's what you do:\nTo install Logging, pass it to the install function inside a client configuration block:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.logging.*\n//...\nval client = HttpClient(CIO) {\n    install(Logging)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "section_detail", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure logging in ktor?\n\nAssistant: To configure logging in ktor, here's what you do:\nThe Logging plugin configuration is provided by the Logging.Config class. The example below shows a sample configuration:\n\n`logger`\nSpecifies a Logger instance. Logger.DEFAULT uses an SLF4J logging framework. For Native targets, set this property to Logger.SIMPLE.\n\n`level`\nSpecifies the logging level. LogLevel.HEADERS will log only request/response headers.\n\n`filter()`\nAllows you to filter log messages for requests matching the specified predicate. In the example below, only requests made to ktor.io get into the log.\n\n`sanitizeHeader()`\nAllows you to sanitize sensitive headers to avoid their values appearing in the logs. In the example below, the Authorization header value will be replaced with '***' when logged.\n\n```\npackage com.example\n\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.logging.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport kotlinx.coroutines.runBlocking\n\nfun main() {\n    runBlocking {\n        val client = HttpClient(CIO) {\n            install(Logging) {\n                logger = Logger.DEFAULT\n                level = LogLevel.HEADERS\n                filter { request ->\n                    request.url.host.contains(\"ktor.io\")\n                }\n                sanitizeHeader { header -> header == HttpHeaders.Authorization }\n            }\n        }\n\n        val response1: HttpResponse = client.get(\"https://ktor.io/\")\n        val response2: HttpResponse = client.get(\"https://jetbrains.com/\")\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "section_detail", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I provide a custom logger in ktor?\n\nAssistant: To provide a custom logger in ktor, here's what you do:\nTo use a custom logger in your client application, you need to create a Logger instance and override the log function. The example below shows how to use the Napier library to log HTTP calls:\n\n```\nfun main() {\n    runBlocking {\n        val client = HttpClient(CIO) {\n            install(Logging) {\n                logger = object: Logger {\n                    override fun log(message: String) {\n                        Napier.v(\"HTTP Client\", null, message)\n                    }\n                }\n                level = LogLevel.HEADERS\n            }\n        }.also { Napier.base(DebugAntilog()) }\n\n        val response: HttpResponse = client.get(\"https://ktor.io/\")\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "section_detail", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin  Logging in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Enable logging on JVM**:\n\n```yaml\nimplementation(\"ch.qos.logback:logback-classic:$logback_version\")\n```\n\nThis snippet shows you how to enable logging on jvm, which is an important aspect of client plugin  logging in ktor client.\n\n**Enable logging on Android**:\n\n```yaml\nimplementation(\"org.slf4j:slf4j-android:$slf4j_version\")\n```\n\nThis snippet shows you how to enable logging on android, which is an important aspect of client plugin  logging in ktor client.\n\n**Install Logging**:\n\n```yaml\nval client = HttpClient(CIO) {\n    install(Logging)\n}\n```\n\nThis snippet shows you how to install logging, which is an important aspect of client plugin  logging in ktor client.\n\n**Configure Logging**:\n\n```yaml\nlogger = Logger.DEFAULT\nlevel = LogLevel.HEADERS\nfilter { request ->\n    request.url.host.contains(\"ktor.io\")\n}\nsanitizeHeader { header -> header == HttpHeaders.Authorization }\n```\n\nThis snippet shows you how to configure logging, which is an important aspect of client plugin  logging in ktor client.\n\n**Provide a custom logger**:\n\n```yaml\nlogger = object: Logger {\n    override fun log(message: String) {\n        Napier.v(\"HTTP Client\", null, message)\n    }\n}\n```\n\nThis snippet shows you how to provide a custom logger, which is an important aspect of client plugin  logging in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "code_examples", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin  Logging in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn the server, Ktor provides the Logging plugin for application logging and the CallLogging plugin for logging client requests.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-logging.html", "title": "Client Plugin  Logging in Ktor Client", "description": "Logging is a way to keep track of what your program is doing and diagnose problems by recording important events, errors, or informational messages. Ktor provides the capability to log HTTP calls using the Logging plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 03:48:22", "type": "best_practices", "page_metadata": {"og:title": "Logging in Ktor Client | Ktor", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "og:site_name": "Ktor Help", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-logging.html", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Logging in Ktor Client | Ktor", "ogLocale": "en_US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-logging.html", "title": "Logging in Ktor Client | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "built-on": "2025-02-26T14:01:04.163665431", "ogTitle": "Logging in Ktor Client | Ktor", "scrapeId": "3a07b1e9-ebcb-4b40-9bdb-2a425c808c6f", "sourceURL": "https://ktor.io/docs/client-logging.html", "url": "https://ktor.io/docs/client-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Creating fat JARs using the Ktor Gradle plugin is in ktor?\n\nAssistant: Sure, I'd be happy to explain Creating fat JARs using the Ktor Gradle plugin in ktor.\n\n# Creating fat JARs using the Ktor Gradle plugin\n\nThis page covers how to create and run an executable JAR that includes all code dependencies using the Ktor Gradle plugin.Here's a quick rundown of what this is about:\n\n## Configure the Ktor plugin\n\nTo build a fat JAR, you need to configure the Ktor plugin first:\n\n1. Open the `build.gradle.kts` file and add the plugin to the `plugins` block:\n\n```\nplugins {\n       id(\"io.ktor.plugin\") version \"3.1.1\"\n}\n```\n\n2. Make sure the [main application class](https://ktor.io/docs/server-dependencies.html#create-entry-point) is configured:\n\n```\napplication {\n       mainClass.set(\"com.example.ApplicationKt\")\n}\n```\n\n3. Optionally, you can configure the name of the fat JAR to be generated using the `ktor.fatJar` extension:\n\n```\nktor {\n       fatJar {\n           archiveFileName.set(\"fat.jar\")\n       }\n}\n```\n\n## Build and run a fat JAR\n\nThe Ktor plugin provides the following tasks for creating and running fat JARs:\n\n- `buildFatJar`: builds a combined JAR of a project and runtime dependencies. You should see the `***-all.jar` file in the `build/libs` directory when this build completes.\n\n- `runFatJar`: builds a fat JAR of a project and runs it.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-fatjar.html", "title": "Creating fat JARs using the Ktor Gradle plugin", "description": "This page covers how to create and run an executable JAR that includes all code dependencies using the Ktor Gradle plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:49:19", "type": "overview", "page_metadata": {"og:type": "website", "built-on": "2025-02-26T14:01:03.954452235", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-fatjar.html", "og:url": "https://ktor.io/docs/3.1.1/server-fatjar.html", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "title": "Creating fat JARs using the Ktor Gradle plugin | Ktor Documentation", "og:title": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "build-number": "707", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "2c2ada8c-a6e2-4f65-ab18-5b73aa87c51e", "sourceURL": "https://ktor.io/docs/server-fatjar.html", "url": "https://ktor.io/docs/server-fatjar.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure the ktor plugin in ktor?\n\nAssistant: To configure the ktor plugin in ktor, here's what you do:\nTo build a fat JAR, you need to configure the Ktor plugin first:\n\n1. Open the `build.gradle.kts` file and add the plugin to the `plugins` block:\n\n```\nplugins {\n       id(\"io.ktor.plugin\") version \"3.1.1\"\n}\n```\n\n2. Make sure the [main application class](https://ktor.io/docs/server-dependencies.html#create-entry-point) is configured:\n\n```\napplication {\n       mainClass.set(\"com.example.ApplicationKt\")\n}\n```\n\n3. Optionally, you can configure the name of the fat JAR to be generated using the `ktor.fatJar` extension:\n\n```\nktor {\n       fatJar {\n           archiveFileName.set(\"fat.jar\")\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-fatjar.html", "title": "Creating fat JARs using the Ktor Gradle plugin", "description": "This page covers how to create and run an executable JAR that includes all code dependencies using the Ktor Gradle plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:49:19", "type": "section_detail", "page_metadata": {"og:type": "website", "built-on": "2025-02-26T14:01:03.954452235", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-fatjar.html", "og:url": "https://ktor.io/docs/3.1.1/server-fatjar.html", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "title": "Creating fat JARs using the Ktor Gradle plugin | Ktor Documentation", "og:title": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "build-number": "707", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "2c2ada8c-a6e2-4f65-ab18-5b73aa87c51e", "sourceURL": "https://ktor.io/docs/server-fatjar.html", "url": "https://ktor.io/docs/server-fatjar.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I build and run a fat jar in ktor?\n\nAssistant: To build and run a fat jar in ktor, here's what you do:\nThe Ktor plugin provides the following tasks for creating and running fat JARs:\n\n- `buildFatJar`: builds a combined JAR of a project and runtime dependencies. You should see the `***-all.jar` file in the `build/libs` directory when this build completes.\n\n- `runFatJar`: builds a fat JAR of a project and runs it..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-fatjar.html", "title": "Creating fat JARs using the Ktor Gradle plugin", "description": "This page covers how to create and run an executable JAR that includes all code dependencies using the Ktor Gradle plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:49:19", "type": "section_detail", "page_metadata": {"og:type": "website", "built-on": "2025-02-26T14:01:03.954452235", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-fatjar.html", "og:url": "https://ktor.io/docs/3.1.1/server-fatjar.html", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "title": "Creating fat JARs using the Ktor Gradle plugin | Ktor Documentation", "og:title": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "build-number": "707", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "2c2ada8c-a6e2-4f65-ab18-5b73aa87c51e", "sourceURL": "https://ktor.io/docs/server-fatjar.html", "url": "https://ktor.io/docs/server-fatjar.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Creating fat JARs using the Ktor Gradle plugin in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Ktor Plugin Configuration**:\n\n```yaml\nplugins {\n       id(\"io.ktor.plugin\") version \"3.1.1\"\n}\n```\n\nThis snippet shows you how to ktor plugin configuration, which is an important aspect of creating fat jars using the ktor gradle plugin.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-fatjar.html", "title": "Creating fat JARs using the Ktor Gradle plugin", "description": "This page covers how to create and run an executable JAR that includes all code dependencies using the Ktor Gradle plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:49:19", "type": "code_examples", "page_metadata": {"og:type": "website", "built-on": "2025-02-26T14:01:03.954452235", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-fatjar.html", "og:url": "https://ktor.io/docs/3.1.1/server-fatjar.html", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "title": "Creating fat JARs using the Ktor Gradle plugin | Ktor Documentation", "og:title": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "build-number": "707", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "2c2ada8c-a6e2-4f65-ab18-5b73aa87c51e", "sourceURL": "https://ktor.io/docs/server-fatjar.html", "url": "https://ktor.io/docs/server-fatjar.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Creating fat JARs using the Ktor Gradle plugin in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo learn how to minimize the generated JAR using ProGuard, refer to the proguard sample.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-fatjar.html", "title": "Creating fat JARs using the Ktor Gradle plugin", "description": "This page covers how to create and run an executable JAR that includes all code dependencies using the Ktor Gradle plugin.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:49:19", "type": "best_practices", "page_metadata": {"og:type": "website", "built-on": "2025-02-26T14:01:03.954452235", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-fatjar.html", "og:url": "https://ktor.io/docs/3.1.1/server-fatjar.html", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "title": "Creating fat JARs using the Ktor Gradle plugin | Ktor Documentation", "og:title": "Creating fat JARs using the Ktor Gradle plugin | Ktor", "twitter:card": "summary_large_image", "twitter:description": "", "build-number": "707", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "2c2ada8c-a6e2-4f65-ab18-5b73aa87c51e", "sourceURL": "https://ktor.io/docs/server-fatjar.html", "url": "https://ktor.io/docs/server-fatjar.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Adding server dependencies is in ktor?\n\nAssistant: Sure, I'd be happy to explain Adding server dependencies in ktor.\n\n# Adding server dependencies\n\nIn this topic, we'll show you how to add dependencies required for Ktor Server to an existing Gradle/Maven project.Here's a quick rundown of what this is about:\n\n## Configure the repositories\n\nBefore adding Ktor dependencies, you need to configure the repositories for this project:\n\n- Production\n\nProduction releases of Ktor are available in the Maven central repository. You can declare this repository in your build script as follows:\n\n```\nrepositories {\n      mavenCentral()\n}\n```\n\n> ### note\n>\n> You don't need to add the Maven central repository in the pom.xml file since your project inherits the central repository from [Super POM](https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#super-pom).\n\n- Early Access Program (EAP)\n\nTo get access to the [EAP](https://ktor.io/eap/) versions of Ktor, you need to reference the [Space repository](https://maven.pkg.jetbrains.space/public/p/ktor/eap/io/ktor/):\n\n```\nrepositories {\n      maven {\n          url = uri(\"https://maven.pkg.jetbrains.space/public/p/ktor/eap\")\n      }\n}\n```\n\nNote that Ktor EAPs might require the [Kotlin dev repository](https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev):\n\n```\nrepositories {\n      maven {\n          url = uri(\"https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev\")\n      }\n}\n```\n\n## Add dependencies\n\n### Core dependencies\n\nEvery Ktor application requires at least the following dependencies:\n\n- `ktor-server-core`: contains core Ktor functionality.\n- A dependency for an [engine](https://ktor.io/docs/server-engines.html) (for example, `ktor-server-netty`).\n\nFor different platforms, Ktor provides platform-specific artifacts with suffixes such as `-jvm`, for example, `ktor-server-core-jvm` or `ktor-server-netty-jvm`. Note that Gradle resolves artifacts appropriate for a given platform while Maven doesn't support this capability. This means that for Maven you need to add a platform-specific suffix manually. The `dependencies` block for a basic Ktor application might look as follows:\n\n```\ndependencies {\n    implementation(\"io.ktor:ktor-server-core:3.1.0\")\n    implementation(\"io.ktor:ktor-server-netty:3.1.0\")\n}\n```\n\n### Plugin dependencies\n\n[Plugins](https://ktor.io/docs/server-plugins.html) that extend Ktor functionality might require additional dependencies. You can learn more from corresponding topics.\n\n### Ensure dependencies consistency\n\nApplying the [Ktor Gradle plugin](https://github.com/ktorio/ktor-build-plugins) implicitly adds the Ktor BOM dependency and allows you to ensure that all Ktor dependencies are at the same version. In this case, you no longer need to specify a version when depending on Ktor artifacts:\n\n```\nplugins {\n    // ...\n    id(\"io.ktor.plugin\") version \"3.1.0\"\n}\ndependencies {\n    implementation(\"io.ktor:ktor-server-core\")\n    implementation(\"io.ktor:ktor-server-netty\")\n    // ...\n}\n```\n\n## Add logging dependency\n\nKtor uses SLF4J API as a facade for various logging frameworks (for example, Logback or Log4j) and allows you to log application events. To learn how to add the required artifacts, see [Add logger dependencies](https://ktor.io/docs/server-logging.html#add_dependencies).\n\n## Create an entry point for running an application\n\n[Running](https://ktor.io/docs/server-run.html) a Ktor server using Gradle/Maven depends on the way used to [create a server](https://ktor.io/docs/server-create-and-configure.html). You can specify the application main class in one of the following ways:\n\n- If you use [embeddedServer](https://ktor.io/docs/server-create-and-configure.html#embedded-server), specify the main class as follows:\n\n```\napplication {\n      mainClass.set(\"com.example.ApplicationKt\")\n}\n```\n\n- If you use [EngineMain](https://ktor.io/docs/server-create-and-configure.html#engine-main), you need to configure it as the main class. For Netty, it will look as follows:\n\n```\napplication {\n      mainClass.set(\"io.ktor.server.netty.EngineMain\")\n}\n```\n\n> ### note\n>\n> If you are going to package your application as a Fat JAR, you also need to take into account the way used to create a server when configuring corresponding plugins. Learn more from the following topics:\n>\n> - [Creating fat JARs using the Ktor Gradle plugin](https://ktor.io/docs/server-fatjar.html)\n> - [Creating fat JARs using the Maven Assembly plugin](https://ktor.io/docs/maven-assembly-plugin.html)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-dependencies.html", "title": "Adding server dependencies", "description": "In this topic, we'll show you how to add dependencies required for Ktor Server to an existing Gradle/Maven project.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:50:02", "type": "overview", "page_metadata": {"ogTitle": "Adding server dependencies | Ktor", "twitter:title": "Adding server dependencies | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding server dependencies | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:title": "Adding server dependencies | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-dependencies.html", "built-on": "2025-02-26T14:01:04.988930411", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-dependencies.html", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "aea4de02-66e6-4f4d-a274-0cc328e34605", "sourceURL": "https://ktor.io/docs/server-dependencies.html", "url": "https://ktor.io/docs/server-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure the repositories in ktor?\n\nAssistant: To configure the repositories in ktor, here's what you do:\nBefore adding Ktor dependencies, you need to configure the repositories for this project:\n\n- Production\n\nProduction releases of Ktor are available in the Maven central repository. You can declare this repository in your build script as follows:\n\n```\nrepositories {\n      mavenCentral()\n}\n```\n\n> ### note\n>\n> You don't need to add the Maven central repository in the pom.xml file since your project inherits the central repository from [Super POM](https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#super-pom).\n\n- Early Access Program (EAP)\n\nTo get access to the [EAP](https://ktor.io/eap/) versions of Ktor, you need to reference the [Space repository](https://maven.pkg.jetbrains.space/public/p/ktor/eap/io/ktor/):\n\n```\nrepositories {\n      maven {\n          url = uri(\"https://maven.pkg.jetbrains.space/public/p/ktor/eap\")\n      }\n}\n```\n\nNote that Ktor EAPs might require the [Kotlin dev repository](https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev):\n\n```\nrepositories {\n      maven {\n          url = uri(\"https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev\")\n      }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-dependencies.html", "title": "Adding server dependencies", "description": "In this topic, we'll show you how to add dependencies required for Ktor Server to an existing Gradle/Maven project.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:50:02", "type": "section_detail", "page_metadata": {"ogTitle": "Adding server dependencies | Ktor", "twitter:title": "Adding server dependencies | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding server dependencies | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:title": "Adding server dependencies | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-dependencies.html", "built-on": "2025-02-26T14:01:04.988930411", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-dependencies.html", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "aea4de02-66e6-4f4d-a274-0cc328e34605", "sourceURL": "https://ktor.io/docs/server-dependencies.html", "url": "https://ktor.io/docs/server-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\n### Core dependencies\n\nEvery Ktor application requires at least the following dependencies:\n\n- `ktor-server-core`: contains core Ktor functionality.\n- A dependency for an [engine](https://ktor.io/docs/server-engines.html) (for example, `ktor-server-netty`).\n\nFor different platforms, Ktor provides platform-specific artifacts with suffixes such as `-jvm`, for example, `ktor-server-core-jvm` or `ktor-server-netty-jvm`. Note that Gradle resolves artifacts appropriate for a given platform while Maven doesn't support this capability. This means that for Maven you need to add a platform-specific suffix manually. The `dependencies` block for a basic Ktor application might look as follows:\n\n```\ndependencies {\n    implementation(\"io.ktor:ktor-server-core:3.1.0\")\n    implementation(\"io.ktor:ktor-server-netty:3.1.0\")\n}\n```\n\n### Plugin dependencies\n\n[Plugins](https://ktor.io/docs/server-plugins.html) that extend Ktor functionality might require additional dependencies. You can learn more from corresponding topics.\n\n### Ensure dependencies consistency\n\nApplying the [Ktor Gradle plugin](https://github.com/ktorio/ktor-build-plugins) implicitly adds the Ktor BOM dependency and allows you to ensure that all Ktor dependencies are at the same version. In this case, you no longer need to specify a version when depending on Ktor artifacts:\n\n```\nplugins {\n    // ...\n    id(\"io.ktor.plugin\") version \"3.1.0\"\n}\ndependencies {\n    implementation(\"io.ktor:ktor-server-core\")\n    implementation(\"io.ktor:ktor-server-netty\")\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-dependencies.html", "title": "Adding server dependencies", "description": "In this topic, we'll show you how to add dependencies required for Ktor Server to an existing Gradle/Maven project.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:50:02", "type": "section_detail", "page_metadata": {"ogTitle": "Adding server dependencies | Ktor", "twitter:title": "Adding server dependencies | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding server dependencies | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:title": "Adding server dependencies | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-dependencies.html", "built-on": "2025-02-26T14:01:04.988930411", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-dependencies.html", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "aea4de02-66e6-4f4d-a274-0cc328e34605", "sourceURL": "https://ktor.io/docs/server-dependencies.html", "url": "https://ktor.io/docs/server-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add logging dependency in ktor?\n\nAssistant: To add logging dependency in ktor, here's what you do:\nKtor uses SLF4J API as a facade for various logging frameworks (for example, Logback or Log4j) and allows you to log application events. To learn how to add the required artifacts, see [Add logger dependencies](https://ktor.io/docs/server-logging.html#add_dependencies)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-dependencies.html", "title": "Adding server dependencies", "description": "In this topic, we'll show you how to add dependencies required for Ktor Server to an existing Gradle/Maven project.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:50:02", "type": "section_detail", "page_metadata": {"ogTitle": "Adding server dependencies | Ktor", "twitter:title": "Adding server dependencies | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding server dependencies | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:title": "Adding server dependencies | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-dependencies.html", "built-on": "2025-02-26T14:01:04.988930411", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-dependencies.html", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "aea4de02-66e6-4f4d-a274-0cc328e34605", "sourceURL": "https://ktor.io/docs/server-dependencies.html", "url": "https://ktor.io/docs/server-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create an entry point for running an application in ktor?\n\nAssistant: To create an entry point for running an application in ktor, here's what you do:\n[Running](https://ktor.io/docs/server-run.html) a Ktor server using Gradle/Maven depends on the way used to [create a server](https://ktor.io/docs/server-create-and-configure.html). You can specify the application main class in one of the following ways:\n\n- If you use [embeddedServer](https://ktor.io/docs/server-create-and-configure.html#embedded-server), specify the main class as follows:\n\n```\napplication {\n      mainClass.set(\"com.example.ApplicationKt\")\n}\n```\n\n- If you use [EngineMain](https://ktor.io/docs/server-create-and-configure.html#engine-main), you need to configure it as the main class. For Netty, it will look as follows:\n\n```\napplication {\n      mainClass.set(\"io.ktor.server.netty.EngineMain\")\n}\n```\n\n> ### note\n>\n> If you are going to package your application as a Fat JAR, you also need to take into account the way used to create a server when configuring corresponding plugins. Learn more from the following topics:\n>\n> - [Creating fat JARs using the Ktor Gradle plugin](https://ktor.io/docs/server-fatjar.html)\n> - [Creating fat JARs using the Maven Assembly plugin](https://ktor.io/docs/maven-assembly-plugin.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-dependencies.html", "title": "Adding server dependencies", "description": "In this topic, we'll show you how to add dependencies required for Ktor Server to an existing Gradle/Maven project.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:50:02", "type": "section_detail", "page_metadata": {"ogTitle": "Adding server dependencies | Ktor", "twitter:title": "Adding server dependencies | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding server dependencies | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:title": "Adding server dependencies | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-dependencies.html", "built-on": "2025-02-26T14:01:04.988930411", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-dependencies.html", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "aea4de02-66e6-4f4d-a274-0cc328e34605", "sourceURL": "https://ktor.io/docs/server-dependencies.html", "url": "https://ktor.io/docs/server-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Adding server dependencies in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure Maven Central Repository**:\n\n```yaml\nrepositories {\n      mavenCentral()\n}\n```\n\nThis snippet shows you how to configure maven central repository, which is an important aspect of adding server dependencies.\n\n**Configure EAP Repository**:\n\n```yaml\nrepositories {\n      maven {\n          url = uri(\"https://maven.pkg.jetbrains.space/public/p/ktor/eap\")\n      }\n}\n```\n\nThis snippet shows you how to configure eap repository, which is an important aspect of adding server dependencies.\n\n**Add Core Dependencies (Gradle Kotlin)**:\n\n```yaml\ndependencies {\n    implementation(\"io.ktor:ktor-server-core:3.1.0\")\n    implementation(\"io.ktor:ktor-server-netty:3.1.0\")\n}\n```\n\nThis snippet shows you how to add core dependencies (gradle kotlin), which is an important aspect of adding server dependencies.\n\n**Add Core Dependencies (Maven)**:\n\n```yaml\n<dependencies>\n    <dependency>\n        <groupId>io.ktor</groupId>\n        <artifactId>ktor-server-core-jvm</artifactId>\n        <version>3.1.0</version>\n    </dependency>\n    <dependency>\n        <groupId>io.ktor</groupId>\n        <artifactId>ktor-server-netty-jvm</artifactId>\n        <version>3.1.0</version>\n    </dependency>\n</dependencies>\n```\n\nThis snippet shows you how to add core dependencies (maven), which is an important aspect of adding server dependencies.\n\n**Set Main Class for Embedded Server (Gradle Kotlin)**:\n\n```yaml\napplication {\n      mainClass.set(\"com.example.ApplicationKt\")\n}\n```\n\nThis snippet shows you how to set main class for embedded server (gradle kotlin), which is an important aspect of adding server dependencies.\n\n**Set Main Class for EngineMain (Gradle Kotlin)**:\n\n```yaml\napplication {\n      mainClass.set(\"io.ktor.server.netty.EngineMain\")\n}\n```\n\nThis snippet shows you how to set main class for enginemain (gradle kotlin), which is an important aspect of adding server dependencies.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-dependencies.html", "title": "Adding server dependencies", "description": "In this topic, we'll show you how to add dependencies required for Ktor Server to an existing Gradle/Maven project.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:50:02", "type": "code_examples", "page_metadata": {"ogTitle": "Adding server dependencies | Ktor", "twitter:title": "Adding server dependencies | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding server dependencies | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:title": "Adding server dependencies | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-dependencies.html", "built-on": "2025-02-26T14:01:04.988930411", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-dependencies.html", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "aea4de02-66e6-4f4d-a274-0cc328e34605", "sourceURL": "https://ktor.io/docs/server-dependencies.html", "url": "https://ktor.io/docs/server-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Adding server dependencies in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou don't need to add the Maven central repository in the pom.xml file since your project inherits the central repository from Super POM.\n\nKtor EAPs might require the Kotlin dev repository.\n\nIf you are going to package your application as a Fat JAR, you also need to take into account the way used to create a server when configuring corresponding plugins.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-dependencies.html", "title": "Adding server dependencies", "description": "In this topic, we'll show you how to add dependencies required for Ktor Server to an existing Gradle/Maven project.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:50:02", "type": "best_practices", "page_metadata": {"ogTitle": "Adding server dependencies | Ktor", "twitter:title": "Adding server dependencies | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Adding server dependencies | Ktor Documentation", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "build-number": "707", "ogLocale": "en_US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:title": "Adding server dependencies | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-dependencies.html", "built-on": "2025-02-26T14:01:04.988930411", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/server-dependencies.html", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "aea4de02-66e6-4f4d-a274-0cc328e34605", "sourceURL": "https://ktor.io/docs/server-dependencies.html", "url": "https://ktor.io/docs/server-dependencies.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Receiving responses is in ktor?\n\nAssistant: Sure, I'd be happy to explain Receiving responses in ktor.\n\n# Receiving responses\n\nThis page covers how to receive and handle HTTP responses using Ktor Client, including accessing response parameters, body, and handling JSON data.Here's a quick rundown of what this is about:\n\n## Receiving responses\n\nAll functions used to make an HTTP request (request, get, post, etc.) allow you to receive a response as an HttpResponse object. HttpResponse exposes the API required to get a response body in various ways (raw bytes, JSON objects, etc.) and obtain response parameters, such as a status code, content type, headers, and so on. For example, you can receive HttpResponse for a GET request without parameters as follows:\n\n```\nval response: HttpResponse = client.get(\"https://ktor.io/docs/welcome.html\")\n```\n\n## Receive response parameters\n\nThe HttpResponse class allows you to get various response parameters, such as a status code, headers, HTTP version, and so on.\n\n### Status code\nTo get the status code of a response, use the HttpResponse.status property, for example:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.call.*\nimport io.ktor.client.request.*\nimport io.ktor.http.*\n\nval httpResponse: HttpResponse = client.get(\"https://ktor.io/\")\nif (httpResponse.status.value in 200..299) {\n    println(\"Successful response!\")\n}\n```\n\n### Headers\nThe HttpResponse.headers property allows you to get a Headers map containing all response headers. HttpResponse also exposes a bunch of specific functions for receiving specific header values, for example:\n\n- contentType for the Content-Type header value\n- charset for a charset from the Content-Type header value.\n- etag for the E-Tag header value.\n- setCookie for the Set-Cookie header value.\n\n> ### tip\n>\n> Ktor also provides the HttpCookies plugin that allows you to keep cookies between calls.\n\n## Receive response body\n\n### Raw body\nTo receive a raw body of a response, call the body function and pass the required type as a parameter. The code snippet below shows how to receive a raw body as String:\n\n```\nval httpResponse: HttpResponse = client.get(\"https://ktor.io/\")\nval stringBody: String = httpResponse.body()\n```\n\nSimilarly, you can get a body as ByteArray:\n\n```\nval httpResponse: HttpResponse = client.get(\"https://ktor.io/\")\nval byteArrayBody: ByteArray = httpResponse.body()\n```\n\nA runnable example below shows how to get a response as a byte array and save it to a file:\n\n```\nval client = HttpClient()\nval file = File.createTempFile(\"files\", \"index\")\n\nrunBlocking {\n    val httpResponse: HttpResponse = client.get(\"https://ktor.io/\") {\n        onDownload { bytesSentTotal, contentLength ->\n            println(\"Received $bytesSentTotal bytes from $contentLength\")\n        }\n    }\n    val responseBody: ByteArray = httpResponse.body()\n    file.writeBytes(responseBody)\n    println(\"A file saved to ${file.path}\")\n}\n```\n\n> ### tip\n>\n> The onDownload extension function in the example above is used to display download progress.\n\n### JSON object\nWith the ContentNegotiation plugin installed, you can deserialize JSON data into a data class when receiving responses, for example:\n\n```\nval customer: Customer = client.get(\"http://localhost:8080/customer/3\").body()\n```\n\nTo learn more, see Receive and send data.\n\nNote: there are ContentNegotiation plugins for both client and server, make sure to use proper one (client in this case).\n\n### Streaming data\nWhen you call the HttpResponse.body function to get a body, Ktor processes a response in memory and returns a full response body. If you need to get chunks of a response sequentially instead of waiting for the entire response, use HttpStatement with scoped execute block. A runnable example below shows how to receive a response content in chunks (byte packets) and save them in a file:\n\n```\nval client = HttpClient(CIO)\nval file = File.createTempFile(\"files\", \"index\")\n\nrunBlocking {\n    client.prepareGet(\"https://ktor.io/\").execute { httpResponse ->\n        val channel: ByteReadChannel = httpResponse.body()\n        while (!channel.isClosedForRead) {\n            val packet = channel.readRemaining(DEFAULT_BUFFER_SIZE.toLong())\n            while (!packet.isEmpty) {\n                val bytes = packet.readBytes()\n                file.appendBytes(bytes)\n                println(\"Received ${file.length()} bytes from ${httpResponse.contentLength()}\")\n            }\n        }\n        println(\"A file saved to ${file.path}\")\n    }\n}\n```\n\nIn this example, ByteReadChannel is used to read data asynchronously using byte packets (ByteReadPacket) and append the content of these packets to the content of a file.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-responses.html", "title": "Receiving responses", "description": "This page covers how to receive and handle HTTP responses using Ktor Client, including accessing response parameters, body, and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:50:26", "type": "overview", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-responses.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:02.716433954", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Receiving responses | Ktor", "og:description": "", "language": "en-US", "og:title": "Receiving responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-responses.html", "ogTitle": "Receiving responses | Ktor", "title": "Receiving responses | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "1a24729c-e7dd-478f-b388-7ad9b1fbd66b", "sourceURL": "https://ktor.io/docs/client-responses.html", "url": "https://ktor.io/docs/client-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I receiving responses in ktor?\n\nAssistant: To receiving responses in ktor, here's what you do:\nAll functions used to make an HTTP request (request, get, post, etc.) allow you to receive a response as an HttpResponse object. HttpResponse exposes the API required to get a response body in various ways (raw bytes, JSON objects, etc.) and obtain response parameters, such as a status code, content type, headers, and so on. For example, you can receive HttpResponse for a GET request without parameters as follows:\n\n```\nval response: HttpResponse = client.get(\"https://ktor.io/docs/welcome.html\")\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-responses.html", "title": "Receiving responses", "description": "This page covers how to receive and handle HTTP responses using Ktor Client, including accessing response parameters, body, and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:50:26", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-responses.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:02.716433954", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Receiving responses | Ktor", "og:description": "", "language": "en-US", "og:title": "Receiving responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-responses.html", "ogTitle": "Receiving responses | Ktor", "title": "Receiving responses | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "1a24729c-e7dd-478f-b388-7ad9b1fbd66b", "sourceURL": "https://ktor.io/docs/client-responses.html", "url": "https://ktor.io/docs/client-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I receive response parameters in ktor?\n\nAssistant: To receive response parameters in ktor, here's what you do:\nThe HttpResponse class allows you to get various response parameters, such as a status code, headers, HTTP version, and so on.\n\n### Status code\nTo get the status code of a response, use the HttpResponse.status property, for example:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.call.*\nimport io.ktor.client.request.*\nimport io.ktor.http.*\n\nval httpResponse: HttpResponse = client.get(\"https://ktor.io/\")\nif (httpResponse.status.value in 200..299) {\n    println(\"Successful response!\")\n}\n```\n\n### Headers\nThe HttpResponse.headers property allows you to get a Headers map containing all response headers. HttpResponse also exposes a bunch of specific functions for receiving specific header values, for example:\n\n- contentType for the Content-Type header value\n- charset for a charset from the Content-Type header value.\n- etag for the E-Tag header value.\n- setCookie for the Set-Cookie header value.\n\n> ### tip\n>\n> Ktor also provides the HttpCookies plugin that allows you to keep cookies between calls..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-responses.html", "title": "Receiving responses", "description": "This page covers how to receive and handle HTTP responses using Ktor Client, including accessing response parameters, body, and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:50:26", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-responses.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:02.716433954", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Receiving responses | Ktor", "og:description": "", "language": "en-US", "og:title": "Receiving responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-responses.html", "ogTitle": "Receiving responses | Ktor", "title": "Receiving responses | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "1a24729c-e7dd-478f-b388-7ad9b1fbd66b", "sourceURL": "https://ktor.io/docs/client-responses.html", "url": "https://ktor.io/docs/client-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I receive response body in ktor?\n\nAssistant: To receive response body in ktor, here's what you do:\n### Raw body\nTo receive a raw body of a response, call the body function and pass the required type as a parameter. The code snippet below shows how to receive a raw body as String:\n\n```\nval httpResponse: HttpResponse = client.get(\"https://ktor.io/\")\nval stringBody: String = httpResponse.body()\n```\n\nSimilarly, you can get a body as ByteArray:\n\n```\nval httpResponse: HttpResponse = client.get(\"https://ktor.io/\")\nval byteArrayBody: ByteArray = httpResponse.body()\n```\n\nA runnable example below shows how to get a response as a byte array and save it to a file:\n\n```\nval client = HttpClient()\nval file = File.createTempFile(\"files\", \"index\")\n\nrunBlocking {\n    val httpResponse: HttpResponse = client.get(\"https://ktor.io/\") {\n        onDownload { bytesSentTotal, contentLength ->\n            println(\"Received $bytesSentTotal bytes from $contentLength\")\n        }\n    }\n    val responseBody: ByteArray = httpResponse.body()\n    file.writeBytes(responseBody)\n    println(\"A file saved to ${file.path}\")\n}\n```\n\n> ### tip\n>\n> The onDownload extension function in the example above is used to display download progress.\n\n### JSON object\nWith the ContentNegotiation plugin installed, you can deserialize JSON data into a data class when receiving responses, for example:\n\n```\nval customer: Customer = client.get(\"http://localhost:8080/customer/3\").body()\n```\n\nTo learn more, see Receive and send data.\n\nNote: there are ContentNegotiation plugins for both client and server, make sure to use proper one (client in this case).\n\n### Streaming data\nWhen you call the HttpResponse.body function to get a body, Ktor processes a response in memory and returns a full response body. If you need to get chunks of a response sequentially instead of waiting for the entire response, use HttpStatement with scoped execute block. A runnable example below shows how to receive a response content in chunks (byte packets) and save them in a file:\n\n```\nval client = HttpClient(CIO)\nval file = File.createTempFile(\"files\", \"index\")\n\nrunBlocking {\n    client.prepareGet(\"https://ktor.io/\").execute { httpResponse ->\n        val channel: ByteReadChannel = httpResponse.body()\n        while (!channel.isClosedForRead) {\n            val packet = channel.readRemaining(DEFAULT_BUFFER_SIZE.toLong())\n            while (!packet.isEmpty) {\n                val bytes = packet.readBytes()\n                file.appendBytes(bytes)\n                println(\"Received ${file.length()} bytes from ${httpResponse.contentLength()}\")\n            }\n        }\n        println(\"A file saved to ${file.path}\")\n    }\n}\n```\n\nIn this example, ByteReadChannel is used to read data asynchronously using byte packets (ByteReadPacket) and append the content of these packets to the content of a file..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-responses.html", "title": "Receiving responses", "description": "This page covers how to receive and handle HTTP responses using Ktor Client, including accessing response parameters, body, and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:50:26", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-responses.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:02.716433954", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Receiving responses | Ktor", "og:description": "", "language": "en-US", "og:title": "Receiving responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-responses.html", "ogTitle": "Receiving responses | Ktor", "title": "Receiving responses | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "1a24729c-e7dd-478f-b388-7ad9b1fbd66b", "sourceURL": "https://ktor.io/docs/client-responses.html", "url": "https://ktor.io/docs/client-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Receiving responses in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**GET request example**:\n\n```yaml\nval response: HttpResponse = client.get(\"https://ktor.io/docs/welcome.html\")\n```\n\nThis snippet shows you how to get request example, which is an important aspect of receiving responses.\n\n**Status code check example**:\n\n```yaml\nval httpResponse: HttpResponse = client.get(\"https://ktor.io/\")\nif (httpResponse.status.value in 200..299) {\n    println(\"Successful response!\")\n}\n```\n\nThis snippet shows you how to status code check example, which is an important aspect of receiving responses.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-responses.html", "title": "Receiving responses", "description": "This page covers how to receive and handle HTTP responses using Ktor Client, including accessing response parameters, body, and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:50:26", "type": "code_examples", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-responses.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:02.716433954", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Receiving responses | Ktor", "og:description": "", "language": "en-US", "og:title": "Receiving responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-responses.html", "ogTitle": "Receiving responses | Ktor", "title": "Receiving responses | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "1a24729c-e7dd-478f-b388-7ad9b1fbd66b", "sourceURL": "https://ktor.io/docs/client-responses.html", "url": "https://ktor.io/docs/client-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Receiving responses in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nKtor also provides the HttpCookies plugin that allows you to keep cookies between calls.\n\nThe onDownload extension function in the example above is used to display download progress.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-responses.html", "title": "Receiving responses", "description": "This page covers how to receive and handle HTTP responses using Ktor Client, including accessing response parameters, body, and handling JSON data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:50:26", "type": "best_practices", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-responses.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:02.716433954", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Receiving responses | Ktor", "og:description": "", "language": "en-US", "og:title": "Receiving responses | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-responses.html", "ogTitle": "Receiving responses | Ktor", "title": "Receiving responses | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "1a24729c-e7dd-478f-b388-7ad9b1fbd66b", "sourceURL": "https://ktor.io/docs/client-responses.html", "url": "https://ktor.io/docs/client-responses.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Application monitoring is in ktor?\n\nAssistant: Sure, I'd be happy to explain Application monitoring in ktor.\n\n# Application monitoring\n\nKtor provides the ability to monitor your server application by using events. You can handle predefined events related to an application's lifecycle (application starting, stopping, etc.), or you can use custom events to handle specific cases.Here's a quick rundown of what this is about:\n\n## Event definition\n\nEach event is represented by the [EventDefinition](https://api.ktor.io/ktor-shared/ktor-events/io.ktor.events/-event-definition/index.html) class instance. This class has a `T` type parameter specifying the type of value passed to the event. This value can be accessed in the [event handler](https://ktor.io/docs/server-events.html#handle-events-application) as a lambda argument. For example, most of the [predefined events](https://ktor.io/docs/server-events.html#predefined-events) accept `Application` as a parameter allowing you to access application properties inside the event handler.\n\nFor a [custom event](https://ktor.io/docs/server-events.html#custom-events), you can pass a type parameter required for this event. The code snippet below shows how to create a custom `NotFoundEvent` that accepts the `ApplicationCall` instance.\n\n```\nval NotFoundEvent: EventDefinition<ApplicationCall> = EventDefinition()\n``` \n\nThe [Custom events](https://ktor.io/docs/server-events.html#custom-events) section shows how to raise this event in a custom plugin when a server returns the `404 Not Found` status code for a resource.\n\n## Predefined application events\n\nKtor provides the following predefined events related to an application's lifecycle:\n\n- [ApplicationStarting](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-starting.html)\n- [ApplicationStarted](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-started.html)\n- [ServerReady](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-server-ready.html)\n- [ApplicationStopPreparing](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stop-preparing.html)\n- [ApplicationStopping](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stopping.html)\n- [ApplicationStopped](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stopped.html)\n\nFor example, you can subscribe to the `ApplicationStopped` event to release application resources.\n\n## Handle events in an application\n\nTo handle events for the specified `Application` instance, use the `monitor` property. This property provides access to the [Events](https://api.ktor.io/ktor-shared/ktor-events/io.ktor.events/-events/index.html) instance that exposes the following functions allowing you to handle application events:\n\n- `subscribe`: subscribes to an event specified by [EventDefinition](https://ktor.io/docs/server-events.html#event-definition).\n- `unsubscribe`: unsubscribes from an event specified by [EventDefinition](https://ktor.io/docs/server-events.html#event-definition).\n- `raise`: raises an event specified by [EventDefinition](https://ktor.io/docs/server-events.html#event-definition) with the specified value.\n\n> ### tip\n>\n> The [Custom events](https://ktor.io/docs/server-events.html#custom-events) section shows how to raise custom events.\n\nThe `subscribe`/ `unsubscribe` functions accept the `EventDefinition` instance with the `T` value as a lambda argument. The example below shows how to subscribe to the `ApplicationStarted` event and [log](https://ktor.io/docs/server-logging.html) a message in the event handler:\n\n```\nfun Application.module() {\n    monitor.subscribe(ApplicationStarted) { application ->\n        application.environment.log.info(\"Server is started\")\n    }\n}\n```\n\nIn this example, you can see how to handle the `ApplicationStopped` event:\n\n```\nfun Application.module() {\n    monitor.subscribe(ApplicationStopped) { application ->\n        application.environment.log.info(\"Server is stopped\")\n        // Release resources and unsubscribe from events\n        monitor.unsubscribe(ApplicationStarted) {}\n        monitor.unsubscribe(ApplicationStopped) {}\n    }\n}\n```\n\nFor the full example, see [events](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/events).\n\n## Handle events in a custom plugin\n\nYou can handle events in [custom plugins](https://ktor.io/docs/server-custom-plugins.html#handle-app-events) using the `MonitoringEvent` hook. The example below shows how to create the `ApplicationMonitoringPlugin` plugin and handle the `ApplicationStarted` and `ApplicationStopped` events:\n\n```\nimport io.ktor.events.EventDefinition\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.application.hooks.*\n\nval ApplicationMonitoringPlugin = createApplicationPlugin(name = \"ApplicationMonitoringPlugin\") {\n    on(MonitoringEvent(ApplicationStarted)) { application ->\n        application.log.info(\"Server is started\")\n    }\n    on(MonitoringEvent(ApplicationStopped)) { application ->\n        application.log.info(\"Server is stopped\")\n        // Release resources and unsubscribe from events\n        application.monitor.unsubscribe(ApplicationStarted) {}\n        application.monitor.unsubscribe(ApplicationStopped) {}\n    }\n}\n```\n\nYou can find the full example here: [events](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/events).\n\n## Custom events\n\nIn this section, we'll take a look at how to create a custom event raised when a server returns the `404 Not Found` status code for a resource.\n\n1. First, you need to create the [event definition](https://ktor.io/docs/server-events.html#event-definition). The code snippet below shows how to create a custom `NotFoundEvent` event that accepts `ApplicationCall` as a parameter.\n\n```\nval NotFoundEvent: EventDefinition<ApplicationCall> = EventDefinition()\n```\n\n2. To raise the event, call the `Events.raise` function. The sample below shows how to handle the `ResponseSent` [hook](https://ktor.io/docs/server-custom-plugins.html#other) to raise the newly created event if the status code for a call is `404`.\n\n```\nimport io.ktor.events.EventDefinition\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.application.hooks.*\n\nval ApplicationMonitoringPlugin = createApplicationPlugin(name = \"ApplicationMonitoringPlugin\") {\n       on(ResponseSent) { call ->\n           if (call.response.status() == HttpStatusCode.NotFound) {\n               this@createApplicationPlugin.application.monitor.raise(NotFoundEvent, call)\n           }\n       }\n}\n```\n\n3. To handle the created event in the Application, [install](https://ktor.io/docs/server-plugins.html#install) the plugin:\n\n```\nfun Application.module() {\n       install(ApplicationMonitoringPlugin)\n}\n```\n\n4. Then, subscribe to the event using `Events.subscribe`:\n\n```\nfun Application.module() {\n       install(ApplicationMonitoringPlugin)\n       monitor.subscribe(NotFoundEvent) { call ->\n           log.info(\"No page was found for the URI: ${call.request.uri}\")\n       }\n}\n```\n\nFor the full example, see [events](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/events).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-events.html", "title": "Application monitoring", "description": "Ktor provides the ability to monitor your server application by using events. You can handle predefined events related to an application's lifecycle (application starting, stopping, etc.), or you can use custom events to handle specific cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:51:25", "type": "overview", "page_metadata": {"ogDescription": "", "ogTitle": "Application monitoring | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Application monitoring | Ktor", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-events.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-events.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "title": "Application monitoring | Ktor Documentation", "og:title": "Application monitoring | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.188113264", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ae6b8983-04c2-4e80-ad97-099aba76a814", "sourceURL": "https://ktor.io/docs/server-events.html", "url": "https://ktor.io/docs/server-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I event definition in ktor?\n\nAssistant: To event definition in ktor, here's what you do:\nEach event is represented by the [EventDefinition](https://api.ktor.io/ktor-shared/ktor-events/io.ktor.events/-event-definition/index.html) class instance. This class has a `T` type parameter specifying the type of value passed to the event. This value can be accessed in the [event handler](https://ktor.io/docs/server-events.html#handle-events-application) as a lambda argument. For example, most of the [predefined events](https://ktor.io/docs/server-events.html#predefined-events) accept `Application` as a parameter allowing you to access application properties inside the event handler.\n\nFor a [custom event](https://ktor.io/docs/server-events.html#custom-events), you can pass a type parameter required for this event. The code snippet below shows how to create a custom `NotFoundEvent` that accepts the `ApplicationCall` instance.\n\n```\nval NotFoundEvent: EventDefinition<ApplicationCall> = EventDefinition()\n``` \n\nThe [Custom events](https://ktor.io/docs/server-events.html#custom-events) section shows how to raise this event in a custom plugin when a server returns the `404 Not Found` status code for a resource..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-events.html", "title": "Application monitoring", "description": "Ktor provides the ability to monitor your server application by using events. You can handle predefined events related to an application's lifecycle (application starting, stopping, etc.), or you can use custom events to handle specific cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:51:25", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogTitle": "Application monitoring | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Application monitoring | Ktor", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-events.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-events.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "title": "Application monitoring | Ktor Documentation", "og:title": "Application monitoring | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.188113264", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ae6b8983-04c2-4e80-ad97-099aba76a814", "sourceURL": "https://ktor.io/docs/server-events.html", "url": "https://ktor.io/docs/server-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I predefined application events in ktor?\n\nAssistant: To predefined application events in ktor, here's what you do:\nKtor provides the following predefined events related to an application's lifecycle:\n\n- [ApplicationStarting](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-starting.html)\n- [ApplicationStarted](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-started.html)\n- [ServerReady](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-server-ready.html)\n- [ApplicationStopPreparing](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stop-preparing.html)\n- [ApplicationStopping](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stopping.html)\n- [ApplicationStopped](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stopped.html)\n\nFor example, you can subscribe to the `ApplicationStopped` event to release application resources..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-events.html", "title": "Application monitoring", "description": "Ktor provides the ability to monitor your server application by using events. You can handle predefined events related to an application's lifecycle (application starting, stopping, etc.), or you can use custom events to handle specific cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:51:25", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogTitle": "Application monitoring | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Application monitoring | Ktor", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-events.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-events.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "title": "Application monitoring | Ktor Documentation", "og:title": "Application monitoring | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.188113264", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ae6b8983-04c2-4e80-ad97-099aba76a814", "sourceURL": "https://ktor.io/docs/server-events.html", "url": "https://ktor.io/docs/server-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I handle events in an application in ktor?\n\nAssistant: To handle events in an application in ktor, here's what you do:\nTo handle events for the specified `Application` instance, use the `monitor` property. This property provides access to the [Events](https://api.ktor.io/ktor-shared/ktor-events/io.ktor.events/-events/index.html) instance that exposes the following functions allowing you to handle application events:\n\n- `subscribe`: subscribes to an event specified by [EventDefinition](https://ktor.io/docs/server-events.html#event-definition).\n- `unsubscribe`: unsubscribes from an event specified by [EventDefinition](https://ktor.io/docs/server-events.html#event-definition).\n- `raise`: raises an event specified by [EventDefinition](https://ktor.io/docs/server-events.html#event-definition) with the specified value.\n\n> ### tip\n>\n> The [Custom events](https://ktor.io/docs/server-events.html#custom-events) section shows how to raise custom events.\n\nThe `subscribe`/ `unsubscribe` functions accept the `EventDefinition` instance with the `T` value as a lambda argument. The example below shows how to subscribe to the `ApplicationStarted` event and [log](https://ktor.io/docs/server-logging.html) a message in the event handler:\n\n```\nfun Application.module() {\n    monitor.subscribe(ApplicationStarted) { application ->\n        application.environment.log.info(\"Server is started\")\n    }\n}\n```\n\nIn this example, you can see how to handle the `ApplicationStopped` event:\n\n```\nfun Application.module() {\n    monitor.subscribe(ApplicationStopped) { application ->\n        application.environment.log.info(\"Server is stopped\")\n        // Release resources and unsubscribe from events\n        monitor.unsubscribe(ApplicationStarted) {}\n        monitor.unsubscribe(ApplicationStopped) {}\n    }\n}\n```\n\nFor the full example, see [events](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/events)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-events.html", "title": "Application monitoring", "description": "Ktor provides the ability to monitor your server application by using events. You can handle predefined events related to an application's lifecycle (application starting, stopping, etc.), or you can use custom events to handle specific cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:51:25", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogTitle": "Application monitoring | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Application monitoring | Ktor", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-events.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-events.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "title": "Application monitoring | Ktor Documentation", "og:title": "Application monitoring | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.188113264", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ae6b8983-04c2-4e80-ad97-099aba76a814", "sourceURL": "https://ktor.io/docs/server-events.html", "url": "https://ktor.io/docs/server-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I handle events in a custom plugin in ktor?\n\nAssistant: To handle events in a custom plugin in ktor, here's what you do:\nYou can handle events in [custom plugins](https://ktor.io/docs/server-custom-plugins.html#handle-app-events) using the `MonitoringEvent` hook. The example below shows how to create the `ApplicationMonitoringPlugin` plugin and handle the `ApplicationStarted` and `ApplicationStopped` events:\n\n```\nimport io.ktor.events.EventDefinition\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.application.hooks.*\n\nval ApplicationMonitoringPlugin = createApplicationPlugin(name = \"ApplicationMonitoringPlugin\") {\n    on(MonitoringEvent(ApplicationStarted)) { application ->\n        application.log.info(\"Server is started\")\n    }\n    on(MonitoringEvent(ApplicationStopped)) { application ->\n        application.log.info(\"Server is stopped\")\n        // Release resources and unsubscribe from events\n        application.monitor.unsubscribe(ApplicationStarted) {}\n        application.monitor.unsubscribe(ApplicationStopped) {}\n    }\n}\n```\n\nYou can find the full example here: [events](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/events)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-events.html", "title": "Application monitoring", "description": "Ktor provides the ability to monitor your server application by using events. You can handle predefined events related to an application's lifecycle (application starting, stopping, etc.), or you can use custom events to handle specific cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:51:25", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogTitle": "Application monitoring | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Application monitoring | Ktor", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-events.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-events.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "title": "Application monitoring | Ktor Documentation", "og:title": "Application monitoring | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.188113264", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ae6b8983-04c2-4e80-ad97-099aba76a814", "sourceURL": "https://ktor.io/docs/server-events.html", "url": "https://ktor.io/docs/server-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I custom events in ktor?\n\nAssistant: To custom events in ktor, here's what you do:\nIn this section, we'll take a look at how to create a custom event raised when a server returns the `404 Not Found` status code for a resource.\n\n1. First, you need to create the [event definition](https://ktor.io/docs/server-events.html#event-definition). The code snippet below shows how to create a custom `NotFoundEvent` event that accepts `ApplicationCall` as a parameter.\n\n```\nval NotFoundEvent: EventDefinition<ApplicationCall> = EventDefinition()\n```\n\n2. To raise the event, call the `Events.raise` function. The sample below shows how to handle the `ResponseSent` [hook](https://ktor.io/docs/server-custom-plugins.html#other) to raise the newly created event if the status code for a call is `404`.\n\n```\nimport io.ktor.events.EventDefinition\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.application.hooks.*\n\nval ApplicationMonitoringPlugin = createApplicationPlugin(name = \"ApplicationMonitoringPlugin\") {\n       on(ResponseSent) { call ->\n           if (call.response.status() == HttpStatusCode.NotFound) {\n               this@createApplicationPlugin.application.monitor.raise(NotFoundEvent, call)\n           }\n       }\n}\n```\n\n3. To handle the created event in the Application, [install](https://ktor.io/docs/server-plugins.html#install) the plugin:\n\n```\nfun Application.module() {\n       install(ApplicationMonitoringPlugin)\n}\n```\n\n4. Then, subscribe to the event using `Events.subscribe`:\n\n```\nfun Application.module() {\n       install(ApplicationMonitoringPlugin)\n       monitor.subscribe(NotFoundEvent) { call ->\n           log.info(\"No page was found for the URI: ${call.request.uri}\")\n       }\n}\n```\n\nFor the full example, see [events](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/events)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-events.html", "title": "Application monitoring", "description": "Ktor provides the ability to monitor your server application by using events. You can handle predefined events related to an application's lifecycle (application starting, stopping, etc.), or you can use custom events to handle specific cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:51:25", "type": "section_detail", "page_metadata": {"ogDescription": "", "ogTitle": "Application monitoring | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Application monitoring | Ktor", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-events.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-events.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "title": "Application monitoring | Ktor Documentation", "og:title": "Application monitoring | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.188113264", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ae6b8983-04c2-4e80-ad97-099aba76a814", "sourceURL": "https://ktor.io/docs/server-events.html", "url": "https://ktor.io/docs/server-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Application monitoring in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a custom NotFoundEvent**:\n\n```yaml\nval NotFoundEvent: EventDefinition<ApplicationCall> = EventDefinition()\n```\n\nThis snippet shows you how to creating a custom notfoundevent, which is an important aspect of application monitoring.\n\n**Subscribing to ApplicationStarted event**:\n\n```yaml\nfun Application.module() {\n    monitor.subscribe(ApplicationStarted) { application ->\n        application.environment.log.info(\"Server is started\")\n    }\n}\n```\n\nThis snippet shows you how to subscribing to applicationstarted event, which is an important aspect of application monitoring.\n\n**Handling ApplicationStopped event**:\n\n```yaml\nfun Application.module() {\n    monitor.subscribe(ApplicationStopped) { application ->\n        application.environment.log.info(\"Server is stopped\")\n        // Release resources and unsubscribe from events\n        monitor.unsubscribe(ApplicationStarted) {}\n        monitor.unsubscribe(ApplicationStopped) {}\n    }\n}\n```\n\nThis snippet shows you how to handling applicationstopped event, which is an important aspect of application monitoring.\n\n**Creating ApplicationMonitoringPlugin**:\n\n```yaml\nimport io.ktor.events.EventDefinition\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.application.hooks.*\n\nval ApplicationMonitoringPlugin = createApplicationPlugin(name = \"ApplicationMonitoringPlugin\") {\n    on(MonitoringEvent(ApplicationStarted)) { application ->\n        application.log.info(\"Server is started\")\n    }\n    on(MonitoringEvent(ApplicationStopped)) { application ->\n        application.log.info(\"Server is stopped\")\n        // Release resources and unsubscribe from events\n        application.monitor.unsubscribe(ApplicationStarted) {}\n        application.monitor.unsubscribe(ApplicationStopped) {}\n    }\n}\n```\n\nThis snippet shows you how to creating applicationmonitoringplugin, which is an important aspect of application monitoring.\n\n**Raising NotFoundEvent on 404 response**:\n\n```yaml\nimport io.ktor.events.EventDefinition\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.application.hooks.*\n\nval ApplicationMonitoringPlugin = createApplicationPlugin(name = \"ApplicationMonitoringPlugin\") {\n       on(ResponseSent) { call ->\n           if (call.response.status() == HttpStatusCode.NotFound) {\n               this@createApplicationPlugin.application.monitor.raise(NotFoundEvent, call)\n           }\n       }\n}\n```\n\nThis snippet shows you how to raising notfoundevent on 404 response, which is an important aspect of application monitoring.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-events.html", "title": "Application monitoring", "description": "Ktor provides the ability to monitor your server application by using events. You can handle predefined events related to an application's lifecycle (application starting, stopping, etc.), or you can use custom events to handle specific cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:51:25", "type": "code_examples", "page_metadata": {"ogDescription": "", "ogTitle": "Application monitoring | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Application monitoring | Ktor", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-events.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-events.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "title": "Application monitoring | Ktor Documentation", "og:title": "Application monitoring | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.188113264", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ae6b8983-04c2-4e80-ad97-099aba76a814", "sourceURL": "https://ktor.io/docs/server-events.html", "url": "https://ktor.io/docs/server-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Application monitoring in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe [Custom events](https://ktor.io/docs/server-events.html#custom-events) section shows how to raise custom events.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-events.html", "title": "Application monitoring", "description": "Ktor provides the ability to monitor your server application by using events. You can handle predefined events related to an application's lifecycle (application starting, stopping, etc.), or you can use custom events to handle specific cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:51:25", "type": "best_practices", "page_metadata": {"ogDescription": "", "ogTitle": "Application monitoring | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Application monitoring | Ktor", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-events.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-events.html", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "title": "Application monitoring | Ktor Documentation", "og:title": "Application monitoring | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "twitter:description": "", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.188113264", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ae6b8983-04c2-4e80-ad97-099aba76a814", "sourceURL": "https://ktor.io/docs/server-events.html", "url": "https://ktor.io/docs/server-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what WAR is in ktor?\n\nAssistant: Sure, I'd be happy to explain WAR in ktor.\n\n# WAR\n\nA Ktor application can be run and deployed inside servlet containers that include Tomcat and Jetty. To deploy inside a servlet container, you need to generate a WAR archive and then deploy it to a server or a cloud service that supports WARs.Here's a quick rundown of what this is about:\n\n## Configure Ktor in a servlet application\n\nKtor allows you to [create and start a server](https://ktor.io/docs/server-create-and-configure.html) with the desired engine (such as Netty, Jetty, or Tomcat) right in the application. In this case, your application has control over engine settings, connection, and SSL options.\n\nIn contrast to the approach above, a servlet container should control the application lifecycle and connection settings. Ktor provides a special [ServletApplicationEngine](https://api.ktor.io/ktor-server/ktor-server-servlet/io.ktor.server.servlet/-servlet-application-engine/index.html) engine that delegates control over your application to a servlet container.\n\n> ### tip\n>\n> Note that [connection and SSL settings](https://ktor.io/docs/server-configuration-file.html) are not in effect when a Ktor application is deployed inside a servlet container. The [tomcat-war-ssl](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/tomcat-war-ssl) sample demonstrates how to configure SSL in Tomcat.\n\n## Add dependencies\n\nTo use Ktor in a servlet application, you need to include the `ktor-server-servlet-jakarta` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-servlet-jakarta:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-servlet-jakarta:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-servlet-jakarta-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nIf you use the 9.x or earlier version of Tomcat/Jetty, add the `ktor-server-servlet` artifact instead.\n\n> ### tip\n>\n> Note that you don't need the separate [Jetty or Tomcat artifacts](https://ktor.io/docs/server-engines.html#dependencies) when a Ktor application is deployed inside a servlet container.\n\n## Configure a servlet\n\nTo register a Ktor servlet in your application, open the `WEB-INF/web.xml` file and assign `ServletApplicationEngine` to the `servlet-class` attribute:\n\nTomcat/Jetty v10.x+\n\n```\n<servlet>\n    <display-name>KtorServlet</display-name>\n    <servlet-name>KtorServlet</servlet-name>\n    <servlet-class>io.ktor.server.servlet.jakarta.ServletApplicationEngine</servlet-class>\n    <init-param>\n        <param-name>io.ktor.ktor.config</param-name>\n        <param-value>application.conf</param-value>\n    </init-param>\n    <async-supported>true</async-supported>\n</servlet>\n```\n\nTomcat/Jetty v9.x\n\n```\n<servlet>\n    <display-name>KtorServlet</display-name>\n    <servlet-name>KtorServlet</servlet-name>\n    <servlet-class>io.ktor.server.servlet.ServletApplicationEngine</servlet-class>\n    <init-param>\n        <param-name>io.ktor.ktor.config</param-name>\n        <param-value>application.conf</param-value>\n    </init-param>\n    <async-supported>true</async-supported>\n</servlet>\n```\n\nThen, configure the URL pattern for this servlet:\n\n```\n<servlet-mapping>\n    <servlet-name>KtorServlet</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-war.html", "title": "WAR", "description": "A Ktor application can be run and deployed inside servlet containers that include Tomcat and Jetty. To deploy inside a servlet container, you need to generate a WAR archive and then deploy it to a server or a cloud service that supports WARs.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:54", "type": "overview", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:title": "WAR | Ktor", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-war.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:04.173168343", "og:locale": "en_US", "language": "en-US", "ogLocale": "en_US", "twitter:title": "WAR | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WAR | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "build-number": "707", "title": "WAR | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-war.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "0c842368-b28a-4969-9be9-d0ca0075dc6c", "sourceURL": "https://ktor.io/docs/server-war.html", "url": "https://ktor.io/docs/server-war.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure ktor in a servlet application in ktor?\n\nAssistant: To configure ktor in a servlet application in ktor, here's what you do:\nKtor allows you to [create and start a server](https://ktor.io/docs/server-create-and-configure.html) with the desired engine (such as Netty, Jetty, or Tomcat) right in the application. In this case, your application has control over engine settings, connection, and SSL options.\n\nIn contrast to the approach above, a servlet container should control the application lifecycle and connection settings. Ktor provides a special [ServletApplicationEngine](https://api.ktor.io/ktor-server/ktor-server-servlet/io.ktor.server.servlet/-servlet-application-engine/index.html) engine that delegates control over your application to a servlet container.\n\n> ### tip\n>\n> Note that [connection and SSL settings](https://ktor.io/docs/server-configuration-file.html) are not in effect when a Ktor application is deployed inside a servlet container. The [tomcat-war-ssl](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/tomcat-war-ssl) sample demonstrates how to configure SSL in Tomcat..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-war.html", "title": "WAR", "description": "A Ktor application can be run and deployed inside servlet containers that include Tomcat and Jetty. To deploy inside a servlet container, you need to generate a WAR archive and then deploy it to a server or a cloud service that supports WARs.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:54", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:title": "WAR | Ktor", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-war.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:04.173168343", "og:locale": "en_US", "language": "en-US", "ogLocale": "en_US", "twitter:title": "WAR | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WAR | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "build-number": "707", "title": "WAR | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-war.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "0c842368-b28a-4969-9be9-d0ca0075dc6c", "sourceURL": "https://ktor.io/docs/server-war.html", "url": "https://ktor.io/docs/server-war.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use Ktor in a servlet application, you need to include the `ktor-server-servlet-jakarta` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-servlet-jakarta:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-servlet-jakarta:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-servlet-jakarta-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nIf you use the 9.x or earlier version of Tomcat/Jetty, add the `ktor-server-servlet` artifact instead.\n\n> ### tip\n>\n> Note that you don't need the separate [Jetty or Tomcat artifacts](https://ktor.io/docs/server-engines.html#dependencies) when a Ktor application is deployed inside a servlet container..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-war.html", "title": "WAR", "description": "A Ktor application can be run and deployed inside servlet containers that include Tomcat and Jetty. To deploy inside a servlet container, you need to generate a WAR archive and then deploy it to a server or a cloud service that supports WARs.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:54", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:title": "WAR | Ktor", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-war.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:04.173168343", "og:locale": "en_US", "language": "en-US", "ogLocale": "en_US", "twitter:title": "WAR | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WAR | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "build-number": "707", "title": "WAR | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-war.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "0c842368-b28a-4969-9be9-d0ca0075dc6c", "sourceURL": "https://ktor.io/docs/server-war.html", "url": "https://ktor.io/docs/server-war.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure a servlet in ktor?\n\nAssistant: To configure a servlet in ktor, here's what you do:\nTo register a Ktor servlet in your application, open the `WEB-INF/web.xml` file and assign `ServletApplicationEngine` to the `servlet-class` attribute:\n\nTomcat/Jetty v10.x+\n\n```\n<servlet>\n    <display-name>KtorServlet</display-name>\n    <servlet-name>KtorServlet</servlet-name>\n    <servlet-class>io.ktor.server.servlet.jakarta.ServletApplicationEngine</servlet-class>\n    <init-param>\n        <param-name>io.ktor.ktor.config</param-name>\n        <param-value>application.conf</param-value>\n    </init-param>\n    <async-supported>true</async-supported>\n</servlet>\n```\n\nTomcat/Jetty v9.x\n\n```\n<servlet>\n    <display-name>KtorServlet</display-name>\n    <servlet-name>KtorServlet</servlet-name>\n    <servlet-class>io.ktor.server.servlet.ServletApplicationEngine</servlet-class>\n    <init-param>\n        <param-name>io.ktor.ktor.config</param-name>\n        <param-value>application.conf</param-value>\n    </init-param>\n    <async-supported>true</async-supported>\n</servlet>\n```\n\nThen, configure the URL pattern for this servlet:\n\n```\n<servlet-mapping>\n    <servlet-name>KtorServlet</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-war.html", "title": "WAR", "description": "A Ktor application can be run and deployed inside servlet containers that include Tomcat and Jetty. To deploy inside a servlet container, you need to generate a WAR archive and then deploy it to a server or a cloud service that supports WARs.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:54", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:title": "WAR | Ktor", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-war.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:04.173168343", "og:locale": "en_US", "language": "en-US", "ogLocale": "en_US", "twitter:title": "WAR | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WAR | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "build-number": "707", "title": "WAR | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-war.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "0c842368-b28a-4969-9be9-d0ca0075dc6c", "sourceURL": "https://ktor.io/docs/server-war.html", "url": "https://ktor.io/docs/server-war.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for WAR in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies for Ktor in a servlet application (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-servlet-jakarta:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies for ktor in a servlet application (gradle kotlin), which is an important aspect of war.\n\n**Add dependencies for Ktor in a servlet application (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-servlet-jakarta:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies for ktor in a servlet application (gradle groovy), which is an important aspect of war.\n\n**Add dependencies for Ktor in a servlet application (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-servlet-jakarta-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies for ktor in a servlet application (maven), which is an important aspect of war.\n\n**Configure a servlet for Tomcat/Jetty v10.x+**:\n\n```yaml\n<servlet>\n    <display-name>KtorServlet</display-name>\n    <servlet-name>KtorServlet</servlet-name>\n    <servlet-class>io.ktor.server.servlet.jakarta.ServletApplicationEngine</servlet-class>\n    <init-param>\n        <param-name>io.ktor.ktor.config</param-name>\n        <param-value>application.conf</param-value>\n    </init-param>\n    <async-supported>true</async-supported>\n</servlet>\n\n```\n\nThis snippet shows you how to configure a servlet for tomcat/jetty v10.x+, which is an important aspect of war.\n\n**Configure a servlet for Tomcat/Jetty v9.x**:\n\n```yaml\n<servlet>\n    <display-name>KtorServlet</display-name>\n    <servlet-name>KtorServlet</servlet-name>\n    <servlet-class>io.ktor.server.servlet.ServletApplicationEngine</servlet-class>\n    <init-param>\n        <param-name>io.ktor.ktor.config</param-name>\n        <param-value>application.conf</param-value>\n    </init-param>\n    <async-supported>true</async-supported>\n</servlet>\n\n```\n\nThis snippet shows you how to configure a servlet for tomcat/jetty v9.x, which is an important aspect of war.\n\n**Configure Gretty for Jetty**:\n\n```yaml\ngretty {\n    servletContainer = \"jetty11\"\n    contextPath = \"/\"\n    logbackConfigFile = \"src/main/resources/logback.xml\"\n}\n```\n\nThis snippet shows you how to configure gretty for jetty, which is an important aspect of war.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-war.html", "title": "WAR", "description": "A Ktor application can be run and deployed inside servlet containers that include Tomcat and Jetty. To deploy inside a servlet container, you need to generate a WAR archive and then deploy it to a server or a cloud service that supports WARs.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:54", "type": "code_examples", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:title": "WAR | Ktor", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-war.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:04.173168343", "og:locale": "en_US", "language": "en-US", "ogLocale": "en_US", "twitter:title": "WAR | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WAR | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "build-number": "707", "title": "WAR | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-war.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "0c842368-b28a-4969-9be9-d0ca0075dc6c", "sourceURL": "https://ktor.io/docs/server-war.html", "url": "https://ktor.io/docs/server-war.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using WAR in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNote that connection and SSL settings are not in effect when a Ktor application is deployed inside a servlet container. The tomcat-war-ssl sample demonstrates how to configure SSL in Tomcat.\n\nNote that you don't need the separate Jetty or Tomcat artifacts when a Ktor application is deployed inside a servlet container.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-war.html", "title": "WAR", "description": "A Ktor application can be run and deployed inside servlet containers that include Tomcat and Jetty. To deploy inside a servlet container, you need to generate a WAR archive and then deploy it to a server or a cloud service that supports WARs.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:54", "type": "best_practices", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:title": "WAR | Ktor", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-war.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:04.173168343", "og:locale": "en_US", "language": "en-US", "ogLocale": "en_US", "twitter:title": "WAR | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "WAR | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "build-number": "707", "title": "WAR | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-war.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "0c842368-b28a-4969-9be9-d0ca0075dc6c", "sourceURL": "https://ktor.io/docs/server-war.html", "url": "https://ktor.io/docs/server-war.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Deployment is in ktor?\n\nAssistant: Sure, I'd be happy to explain Deployment in ktor.\n\n# Deployment\n\nIn this topic, we'll make an overview of how to deploy a Ktor application.Here's a quick rundown of what this is about:\n\n## Ktor deployment specifics\n\nThe deployment process for a server Ktor application depends on the following specifics:\n\n- Whether you are going to deploy your application as a self-contained package or inside a servlet container.\n- Which approach do you use to create and configure a server.\n\n## Self-contained app vs Servlet container\n\nKtor allows you to create and start a server with the desired network engine (such as Netty, Jetty, or Tomcat) right in the application. In this case, an engine is a part of your application. Your application has control over engine settings, connection, and SSL options. To deploy your application, you can package it as a fat JAR or an executable JVM application.\n\nIn contrast to the approach above, a servlet container should control the application lifecycle and connection settings. Ktor provides a special `ServletApplicationEngine` engine that delegates control over your application to a servlet container. To deploy inside a servlet container, you need to generate a WAR archive.\n\n## Configuration: code vs configuration file\n\nConfiguring a self-contained Ktor application for deployment might depend on the approach used to create and configure a server: in code or by using a configuration file. As an example, a hosting provider may require specifying a port used to listen for incoming requests. In this case, you need to configure a port either in code or in the application.conf/ application.yaml.\n\n## Packaging\n\nBefore deploying your application, you need to package it in one of the following ways:\n\n- Fat JAR\n\nA fat JAR is an executable JAR that includes all code dependencies. You can deploy it to any cloud service that supports fat JARs. A fat JAR is also required if you need to generate a native binary for GraalVM. To create a fat JAR, you can use the Ktor plugin for Gradle or the Assembly plugin for Maven.\n\n- Executable JVM application\n\nAn executable JVM application is a packaged application that includes code dependencies and generated start scripts. For Gradle, you can use the Application plugin to generate an application.\n\n- WAR\n\nA WAR archive lets you deploy your application inside a servlet container, such as Tomcat or Jetty.\n\n- GraalVM\n\nKtor server applications can make use of GraalVM in order to have native images for different platforms.\n\n## Containerizing\n\nAfter you package your application (for example, to an executable JVM application or a fat JAR), you can prepare a Docker image with this application. This image can then be used to run your application on Kubernetes, Swarm, or a required cloud service container instance.\n\n## Publishing\n\nTutorials below show how to deploy a Ktor application to specific cloud providers:\n\n- Google App Engine\n- Heroku\n- AWS Elastic Beanstalk.\n\n## SSL\n\nIf your Ktor server is placed behind a reverse proxy (such as Nginx or Apache) or runs inside a servlet container (Tomcat or Jetty), SSL settings are managed by a reverse proxy or a servlet container. If required, you can configure Ktor to serve SSL directly by using Java KeyStore.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-deployment.html", "title": "Deployment", "description": "In this topic, we'll make an overview of how to deploy a Ktor application.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:52:24", "type": "overview", "page_metadata": {"built-on": "2025-02-26T14:01:03.858218608", "ogLocale": "en_US", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Deployment | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-deployment.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "twitter:title": "Deployment | Ktor", "build-number": "707", "ogDescription": "", "og:title": "Deployment | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-deployment.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Deployment | Ktor", "scrapeId": "d0ff4cf4-cec5-4f45-82d9-5ed34eaea7bf", "sourceURL": "https://ktor.io/docs/server-deployment.html", "url": "https://ktor.io/docs/server-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I ktor deployment specifics in ktor?\n\nAssistant: To ktor deployment specifics in ktor, here's what you do:\nThe deployment process for a server Ktor application depends on the following specifics:\n\n- Whether you are going to deploy your application as a self-contained package or inside a servlet container.\n- Which approach do you use to create and configure a server..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-deployment.html", "title": "Deployment", "description": "In this topic, we'll make an overview of how to deploy a Ktor application.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:52:24", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:03.858218608", "ogLocale": "en_US", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Deployment | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-deployment.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "twitter:title": "Deployment | Ktor", "build-number": "707", "ogDescription": "", "og:title": "Deployment | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-deployment.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Deployment | Ktor", "scrapeId": "d0ff4cf4-cec5-4f45-82d9-5ed34eaea7bf", "sourceURL": "https://ktor.io/docs/server-deployment.html", "url": "https://ktor.io/docs/server-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I self-contained app vs servlet container in ktor?\n\nAssistant: To self-contained app vs servlet container in ktor, here's what you do:\nKtor allows you to create and start a server with the desired network engine (such as Netty, Jetty, or Tomcat) right in the application. In this case, an engine is a part of your application. Your application has control over engine settings, connection, and SSL options. To deploy your application, you can package it as a fat JAR or an executable JVM application.\n\nIn contrast to the approach above, a servlet container should control the application lifecycle and connection settings. Ktor provides a special `ServletApplicationEngine` engine that delegates control over your application to a servlet container. To deploy inside a servlet container, you need to generate a WAR archive..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-deployment.html", "title": "Deployment", "description": "In this topic, we'll make an overview of how to deploy a Ktor application.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:52:24", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:03.858218608", "ogLocale": "en_US", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Deployment | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-deployment.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "twitter:title": "Deployment | Ktor", "build-number": "707", "ogDescription": "", "og:title": "Deployment | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-deployment.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Deployment | Ktor", "scrapeId": "d0ff4cf4-cec5-4f45-82d9-5ed34eaea7bf", "sourceURL": "https://ktor.io/docs/server-deployment.html", "url": "https://ktor.io/docs/server-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configuration: code vs configuration file in ktor?\n\nAssistant: To configuration: code vs configuration file in ktor, here's what you do:\nConfiguring a self-contained Ktor application for deployment might depend on the approach used to create and configure a server: in code or by using a configuration file. As an example, a hosting provider may require specifying a port used to listen for incoming requests. In this case, you need to configure a port either in code or in the application.conf/ application.yaml..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-deployment.html", "title": "Deployment", "description": "In this topic, we'll make an overview of how to deploy a Ktor application.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:52:24", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:03.858218608", "ogLocale": "en_US", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Deployment | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-deployment.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "twitter:title": "Deployment | Ktor", "build-number": "707", "ogDescription": "", "og:title": "Deployment | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-deployment.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Deployment | Ktor", "scrapeId": "d0ff4cf4-cec5-4f45-82d9-5ed34eaea7bf", "sourceURL": "https://ktor.io/docs/server-deployment.html", "url": "https://ktor.io/docs/server-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I packaging in ktor?\n\nAssistant: To packaging in ktor, here's what you do:\nBefore deploying your application, you need to package it in one of the following ways:\n\n- Fat JAR\n\nA fat JAR is an executable JAR that includes all code dependencies. You can deploy it to any cloud service that supports fat JARs. A fat JAR is also required if you need to generate a native binary for GraalVM. To create a fat JAR, you can use the Ktor plugin for Gradle or the Assembly plugin for Maven.\n\n- Executable JVM application\n\nAn executable JVM application is a packaged application that includes code dependencies and generated start scripts. For Gradle, you can use the Application plugin to generate an application.\n\n- WAR\n\nA WAR archive lets you deploy your application inside a servlet container, such as Tomcat or Jetty.\n\n- GraalVM\n\nKtor server applications can make use of GraalVM in order to have native images for different platforms..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-deployment.html", "title": "Deployment", "description": "In this topic, we'll make an overview of how to deploy a Ktor application.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:52:24", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:03.858218608", "ogLocale": "en_US", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Deployment | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-deployment.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "twitter:title": "Deployment | Ktor", "build-number": "707", "ogDescription": "", "og:title": "Deployment | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-deployment.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Deployment | Ktor", "scrapeId": "d0ff4cf4-cec5-4f45-82d9-5ed34eaea7bf", "sourceURL": "https://ktor.io/docs/server-deployment.html", "url": "https://ktor.io/docs/server-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I containerizing in ktor?\n\nAssistant: To containerizing in ktor, here's what you do:\nAfter you package your application (for example, to an executable JVM application or a fat JAR), you can prepare a Docker image with this application. This image can then be used to run your application on Kubernetes, Swarm, or a required cloud service container instance..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-deployment.html", "title": "Deployment", "description": "In this topic, we'll make an overview of how to deploy a Ktor application.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:52:24", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:03.858218608", "ogLocale": "en_US", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Deployment | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-deployment.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "twitter:title": "Deployment | Ktor", "build-number": "707", "ogDescription": "", "og:title": "Deployment | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-deployment.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Deployment | Ktor", "scrapeId": "d0ff4cf4-cec5-4f45-82d9-5ed34eaea7bf", "sourceURL": "https://ktor.io/docs/server-deployment.html", "url": "https://ktor.io/docs/server-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I publishing in ktor?\n\nAssistant: To publishing in ktor, here's what you do:\nTutorials below show how to deploy a Ktor application to specific cloud providers:\n\n- Google App Engine\n- Heroku\n- AWS Elastic Beanstalk..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-deployment.html", "title": "Deployment", "description": "In this topic, we'll make an overview of how to deploy a Ktor application.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:52:24", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:03.858218608", "ogLocale": "en_US", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Deployment | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-deployment.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "twitter:title": "Deployment | Ktor", "build-number": "707", "ogDescription": "", "og:title": "Deployment | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-deployment.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Deployment | Ktor", "scrapeId": "d0ff4cf4-cec5-4f45-82d9-5ed34eaea7bf", "sourceURL": "https://ktor.io/docs/server-deployment.html", "url": "https://ktor.io/docs/server-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I ssl in ktor?\n\nAssistant: To ssl in ktor, here's what you do:\nIf your Ktor server is placed behind a reverse proxy (such as Nginx or Apache) or runs inside a servlet container (Tomcat or Jetty), SSL settings are managed by a reverse proxy or a servlet container. If required, you can configure Ktor to serve SSL directly by using Java KeyStore..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-deployment.html", "title": "Deployment", "description": "In this topic, we'll make an overview of how to deploy a Ktor application.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:52:24", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:03.858218608", "ogLocale": "en_US", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Deployment | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-deployment.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "twitter:title": "Deployment | Ktor", "build-number": "707", "ogDescription": "", "og:title": "Deployment | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-deployment.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Deployment | Ktor", "scrapeId": "d0ff4cf4-cec5-4f45-82d9-5ed34eaea7bf", "sourceURL": "https://ktor.io/docs/server-deployment.html", "url": "https://ktor.io/docs/server-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Deployment in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**deployment-ktor-plugin**:\n\n```yaml\n[deployment-ktor-plugin](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/deployment-ktor-plugin)\n```\n\nThis snippet shows you how to deployment-ktor-plugin, which is an important aspect of deployment.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-deployment.html", "title": "Deployment", "description": "In this topic, we'll make an overview of how to deploy a Ktor application.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:52:24", "type": "code_examples", "page_metadata": {"built-on": "2025-02-26T14:01:03.858218608", "ogLocale": "en_US", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Deployment | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-deployment.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "twitter:title": "Deployment | Ktor", "build-number": "707", "ogDescription": "", "og:title": "Deployment | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-deployment.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Deployment | Ktor", "scrapeId": "d0ff4cf4-cec5-4f45-82d9-5ed34eaea7bf", "sourceURL": "https://ktor.io/docs/server-deployment.html", "url": "https://ktor.io/docs/server-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Deployment in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo simplify the deployment process of server Ktor applications, you can use the Ktor plugin for Gradle, which provides the following capabilities: Building fat JARs, Dockerizing your applications.\n\nNote that SSL settings are not in effect when a Ktor application is deployed inside a servlet container.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-deployment.html", "title": "Deployment", "description": "In this topic, we'll make an overview of how to deploy a Ktor application.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:52:24", "type": "best_practices", "page_metadata": {"built-on": "2025-02-26T14:01:03.858218608", "ogLocale": "en_US", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Deployment | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-deployment.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "twitter:title": "Deployment | Ktor", "build-number": "707", "ogDescription": "", "og:title": "Deployment | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-deployment.html", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "language": "en-US", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Deployment | Ktor", "scrapeId": "d0ff4cf4-cec5-4f45-82d9-5ed34eaea7bf", "sourceURL": "https://ktor.io/docs/server-deployment.html", "url": "https://ktor.io/docs/server-deployment.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Handling requests is in ktor?\n\nAssistant: Sure, I'd be happy to explain Handling requests in ktor.\n\n# Handling requests\n\nKtor allows you to handle incoming requests and send responses inside route handlers. You can perform various actions when handling requests, such as getting request information, path parameters, query parameters, and body contents.Here's a quick rundown of what this is about:\n\n## General request information\n\nInside a route handler, you can get access to a request using the call.request property. This returns the ApplicationRequest instance and provides access to various request parameters. For example, the code snippet below shows how to get a request URI:\n\n```\nrouting {\n    get(\"/\") {\n        val uri = call.request.uri\n        call.respondText(\"Request uri: $uri\")\n    }\n}\n```\n\nThe ApplicationRequest object allows you to get access to various request data, for example:\n\n- **Headers**: To access all request headers, use the ApplicationRequest.headers property. You can also get access to specific headers using dedicated extension functions, such as acceptEncoding, contentType, cacheControl, and so on.\n\n- **Cookies**: The ApplicationRequest.cookies property provides access to cookies related to a request. To learn how to handle sessions using cookies, see the Sessions section.\n\n- **Connection details**: Use the ApplicationRequest.local property to get access to connection details such as a host name, port, scheme, and so on.\n\n- **X-Forwarded- headers**: To get information about a request passed through an HTTP proxy or a load balancer, install the Forwarded headers plugin and use the ApplicationRequest.origin property.\n\n## Path parameters\n\nWhen handling requests, you can get access to path parameter values using the call.parameters property. For example, call.parameters[\"login\"] in the code snippet below will return admin for the /user/admin path:\n\n```\nget(\"/user/{login}\") {\n    if (call.parameters[\"login\"] == \"admin\") {\n        // ...\n    }\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-requests.html", "title": "Handling requests", "description": "Ktor allows you to handle incoming requests and send responses inside route handlers. You can perform various actions when handling requests, such as getting request information, path parameters, query parameters, and body contents.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:53:07", "type": "overview", "page_metadata": {"og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.583345455", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "Handling requests | Ktor", "ogLocale": "en_US", "og:type": "website", "og:locale": "en_US", "og:description": "", "build-number": "707", "twitter:card": "summary_large_image", "og:title": "Handling requests | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Handling requests | Ktor Documentation", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-requests.html", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-requests.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Handling requests | Ktor", "scrapeId": "9dc68e32-c6ee-4ddf-bfec-0701d195ae27", "sourceURL": "https://ktor.io/docs/server-requests.html", "url": "https://ktor.io/docs/server-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I general request information in ktor?\n\nAssistant: To general request information in ktor, here's what you do:\nInside a route handler, you can get access to a request using the call.request property. This returns the ApplicationRequest instance and provides access to various request parameters. For example, the code snippet below shows how to get a request URI:\n\n```\nrouting {\n    get(\"/\") {\n        val uri = call.request.uri\n        call.respondText(\"Request uri: $uri\")\n    }\n}\n```\n\nThe ApplicationRequest object allows you to get access to various request data, for example:\n\n- **Headers**: To access all request headers, use the ApplicationRequest.headers property. You can also get access to specific headers using dedicated extension functions, such as acceptEncoding, contentType, cacheControl, and so on.\n\n- **Cookies**: The ApplicationRequest.cookies property provides access to cookies related to a request. To learn how to handle sessions using cookies, see the Sessions section.\n\n- **Connection details**: Use the ApplicationRequest.local property to get access to connection details such as a host name, port, scheme, and so on.\n\n- **X-Forwarded- headers**: To get information about a request passed through an HTTP proxy or a load balancer, install the Forwarded headers plugin and use the ApplicationRequest.origin property..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-requests.html", "title": "Handling requests", "description": "Ktor allows you to handle incoming requests and send responses inside route handlers. You can perform various actions when handling requests, such as getting request information, path parameters, query parameters, and body contents.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:53:07", "type": "section_detail", "page_metadata": {"og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.583345455", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "Handling requests | Ktor", "ogLocale": "en_US", "og:type": "website", "og:locale": "en_US", "og:description": "", "build-number": "707", "twitter:card": "summary_large_image", "og:title": "Handling requests | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Handling requests | Ktor Documentation", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-requests.html", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-requests.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Handling requests | Ktor", "scrapeId": "9dc68e32-c6ee-4ddf-bfec-0701d195ae27", "sourceURL": "https://ktor.io/docs/server-requests.html", "url": "https://ktor.io/docs/server-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I path parameters in ktor?\n\nAssistant: To path parameters in ktor, here's what you do:\nWhen handling requests, you can get access to path parameter values using the call.parameters property. For example, call.parameters[\"login\"] in the code snippet below will return admin for the /user/admin path:\n\n```\nget(\"/user/{login}\") {\n    if (call.parameters[\"login\"] == \"admin\") {\n        // ...\n    }\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-requests.html", "title": "Handling requests", "description": "Ktor allows you to handle incoming requests and send responses inside route handlers. You can perform various actions when handling requests, such as getting request information, path parameters, query parameters, and body contents.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:53:07", "type": "section_detail", "page_metadata": {"og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.583345455", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "Handling requests | Ktor", "ogLocale": "en_US", "og:type": "website", "og:locale": "en_US", "og:description": "", "build-number": "707", "twitter:card": "summary_large_image", "og:title": "Handling requests | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Handling requests | Ktor Documentation", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-requests.html", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-requests.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Handling requests | Ktor", "scrapeId": "9dc68e32-c6ee-4ddf-bfec-0701d195ae27", "sourceURL": "https://ktor.io/docs/server-requests.html", "url": "https://ktor.io/docs/server-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Handling requests in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Getting Request URI**:\n\n```yaml\nrouting {\n    get(\"/\") {\n        val uri = call.request.uri\n        call.respondText(\"Request uri: $uri\")\n    }\n}\n```\n\nThis snippet shows you how to getting request uri, which is an important aspect of handling requests.\n\n**Accessing Path Parameter**:\n\n```yaml\nget(\"/user/{login}\") {\n    if (call.parameters[\"login\"] == \"admin\") {\n        // ...\n    }\n}\n```\n\nThis snippet shows you how to accessing path parameter, which is an important aspect of handling requests.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-requests.html", "title": "Handling requests", "description": "Ktor allows you to handle incoming requests and send responses inside route handlers. You can perform various actions when handling requests, such as getting request information, path parameters, query parameters, and body contents.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:53:07", "type": "code_examples", "page_metadata": {"og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.583345455", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "Handling requests | Ktor", "ogLocale": "en_US", "og:type": "website", "og:locale": "en_US", "og:description": "", "build-number": "707", "twitter:card": "summary_large_image", "og:title": "Handling requests | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Handling requests | Ktor Documentation", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-requests.html", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-requests.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Handling requests | Ktor", "scrapeId": "9dc68e32-c6ee-4ddf-bfec-0701d195ae27", "sourceURL": "https://ktor.io/docs/server-requests.html", "url": "https://ktor.io/docs/server-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Handling requests in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe call.respondText method is used to send a response back to the client.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-requests.html", "title": "Handling requests", "description": "Ktor allows you to handle incoming requests and send responses inside route handlers. You can perform various actions when handling requests, such as getting request information, path parameters, query parameters, and body contents.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:53:07", "type": "best_practices", "page_metadata": {"og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.583345455", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "Handling requests | Ktor", "ogLocale": "en_US", "og:type": "website", "og:locale": "en_US", "og:description": "", "build-number": "707", "twitter:card": "summary_large_image", "og:title": "Handling requests | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "Handling requests | Ktor Documentation", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-requests.html", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-requests.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Handling requests | Ktor", "scrapeId": "9dc68e32-c6ee-4ddf-bfec-0701d195ae27", "sourceURL": "https://ktor.io/docs/server-requests.html", "url": "https://ktor.io/docs/server-requests.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin SSL and certificates in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin SSL and certificates in Ktor Server in ktor.\n\n# Server Plugin SSL and certificates in Ktor Server\n\nThis page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\n`io.ktor:ktor-network-tls-certificates`\n\n## Code examples\n\n[ssl-engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-engine-main), [ssl-embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-embedded-server)\n\n## Overview\n\nIn most cases, your Ktor services are placed behind a reverse proxy such as Nginx or Apache. This means that a reverse proxy server handles security concerns, including SSL.\n\nIf necessary, you can configure Ktor to serve SSL directly by providing a path to a certificate. Ktor uses [Java KeyStore (JKS)](https://docs.oracle.com/javase/8/docs/api/java/security/KeyStore.html) as a storage facility for certificates. You can use [keytool](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html) to convert and manage certificates stored in KeyStore. This might be useful if you need to convert a PEM certificate issued by a certificate authority to the JKS format supported by Ktor.\n\n## Generate a self-signed certificate\n\n### Generate a certificate in code\n\nKtor provides the ability to generate self-signed certificates for testing purposes by calling the [buildKeyStore](https://api.ktor.io/ktor-network/ktor-network-tls/ktor-network-tls-certificates/io.ktor.network.tls.certificates/build-key-store.html) function, which returns a [KeyStore](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/security/KeyStore.html) instance. To use this function, you need to add the `ktor-network-tls-certificates` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-network-tls-certificates:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-network-tls-certificates:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-network-tls-certificates-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThe code snippet below shows how to generate a certificate and save it to a keystore file:\n\n```\nprivate fun ApplicationEngine.Configuration.envConfig() {\n\n    val keyStoreFile = File(\"build/keystore.jks\")\n    val keyStore = buildKeyStore {\n        certificate(\"sampleAlias\") {\n            password = \"foobar\"\n            domains = listOf(\"127.0.0.1\", \"0.0.0.0\", \"localhost\")\n        }\n    }\n    keyStore.saveToFile(keyStoreFile, \"123456\")\n}\n```\n\nSince Ktor requires a certificate when it starts, you have to create a certificate before starting the server. You can find the full example here: [ssl-embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-embedded-server).\n\n## Generate a certificate using keytool\n\nYou can use [keytool](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html) to generate a self-signed certificate:\n\n```\nkeytool -keystore keystore.jks -alias sampleAlias -genkeypair -keyalg RSA -keysize 4096 -validity 3 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US'\n```\n\nAfter executing this command, `keytool` suggests you specify a keystore password and then generates a JKS file.\n\n## Convert PEM certificates to JKS\n\nIf your certificate authority issues certificates in a PEM format, you need to convert it to the JKS format before [configuring SSL in Ktor](https://ktor.io/docs/server-ssl.html#configure-ssl-ktor). You can use `openssl` and `keytool` utilities to do this. For example, if you have a private key in the `key.pem` file and a public certificate in `cert.pem`, a conversion process might look as follows:\n\n1. Convert PEM into the PKCS12 format using `openssl` by using the following command:\n\n```\nopenssl pkcs12 -export -in cert.pem -inkey key.pem -out keystore.p12 -name \"sampleAlias\"\n```\n\nYou will be prompted to enter a passphrase for `key.pem` and a new password for `keystore.p12`.\n\n2. Convert PKCS12 to the JKS format using `keytool`:\n\n```\nkeytool -importkeystore -srckeystore keystore.p12 -srcstoretype pkcs12 -destkeystore keystore.jks\n```\n\nYou will be prompted to enter a password for the `keystore.p12` file and a new password for `keystore.jks`. The `keystore.jks` will be generated.\n\n## Configure SSL in Ktor\n\nSpecifying SSL settings in Ktor depends on the way used to [configure a Ktor server](https://ktor.io/docs/server-create-and-configure.html): by using a configuration file or in code using the `embeddedServer` function.\n\n### Configuration file\n\nIf your server is configured in the `application.conf` or `application.yaml` [configuration file](https://ktor.io/docs/server-configuration-file.html), you can enable SSL using the following [properties](https://ktor.io/docs/server-configuration-file.html#predefined-properties):\n\n1. Specify the SSL port using the `ktor.deployment.sslPort` property:\n\n```\nktor {\n       deployment {\n           sslPort = 8443\n       }\n}\n```\n\n```\nktor:\n       deployment:\n           sslPort: 8443\n```\n\n2. Provide keystore settings in a separate `security` group:\n\n```\nktor {\n       security {\n           ssl {\n               keyStore = keystore.jks\n               keyAlias = sampleAlias\n               keyStorePassword = foobar\n               privateKeyPassword = foobar\n           }\n       }\n}\n```\n\n```\nktor:\n       security:\n           ssl:\n               keyStore: keystore.jks\n               keyAlias: sampleAlias\n               keyStorePassword: foobar\n               privateKeyPassword: foobar\n```\n\nFor the full example, see [ssl-engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-engine-main).\n\n## embeddedServer\n\nIf you use the `embeddedServer` function to run your server, you need to configure a [custom environment](https://ktor.io/docs/server-configuration-code.html#embedded-custom) in the [ApplicationEngine.Configuration](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-application-engine/-configuration/index.html) and provide SSL settings there using [sslConnector](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/ssl-connector.html):\n\n```\nimport io.ktor.network.tls.certificates.*\nimport io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport org.slf4j.*\nimport java.io.*\nimport java.security.KeyStore\n\nfun main() {\n    embeddedServer(Netty, applicationEnvironment { log = LoggerFactory.getLogger(\"ktor.application\") }, {\n        envConfig()\n    }, module = Application::module).start(wait = true)\n}\n\nprivate fun ApplicationEngine.Configuration.envConfig() {\n\n    val keyStoreFile = File(\"build/keystore.jks\")\n    val keyStore = buildKeyStore {\n        certificate(\"sampleAlias\") {\n            password = \"foobar\"\n            domains = listOf(\"127.0.0.1\", \"0.0.0.0\", \"localhost\")\n        }\n    }\n    keyStore.saveToFile(keyStoreFile, \"123456\")\n\n    connector {\n        port = 8080\n    }\n    sslConnector(\n        keyStore = keyStore,\n        keyAlias = \"sampleAlias\",\n        keyStorePassword = { \"123456\".toCharArray() },\n        privateKeyPassword = { \"foobar\".toCharArray() }) {\n        port = 8443\n        keyStorePath = keyStoreFile\n    }\n}\n```\n\nFor the full example, see [ssl-embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-embedded-server).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-ssl.html", "title": "Server Plugin SSL and certificates in Ktor Server", "description": "This page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:56:56", "type": "overview", "page_metadata": {"ogTitle": "SSL and certificates in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "twitter:title": "SSL and certificates in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-ssl.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "title": "SSL and certificates in Ktor Server | Ktor Documentation", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-ssl.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "SSL and certificates in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "build-number": "707", "built-on": "2025-02-26T14:01:05.942603315", "og:locale": "en_US", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8c7a4814-31d7-4158-9947-5d7cc249f16a", "sourceURL": "https://ktor.io/docs/server-ssl.html", "url": "https://ktor.io/docs/server-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\n`io.ktor:ktor-network-tls-certificates`.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-ssl.html", "title": "Server Plugin SSL and certificates in Ktor Server", "description": "This page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:56:56", "type": "section_detail", "page_metadata": {"ogTitle": "SSL and certificates in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "twitter:title": "SSL and certificates in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-ssl.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "title": "SSL and certificates in Ktor Server | Ktor Documentation", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-ssl.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "SSL and certificates in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "build-number": "707", "built-on": "2025-02-26T14:01:05.942603315", "og:locale": "en_US", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8c7a4814-31d7-4158-9947-5d7cc249f16a", "sourceURL": "https://ktor.io/docs/server-ssl.html", "url": "https://ktor.io/docs/server-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I code examples in ktor?\n\nAssistant: To code examples in ktor, here's what you do:\n[ssl-engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-engine-main), [ssl-embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-embedded-server).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-ssl.html", "title": "Server Plugin SSL and certificates in Ktor Server", "description": "This page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:56:56", "type": "section_detail", "page_metadata": {"ogTitle": "SSL and certificates in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "twitter:title": "SSL and certificates in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-ssl.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "title": "SSL and certificates in Ktor Server | Ktor Documentation", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-ssl.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "SSL and certificates in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "build-number": "707", "built-on": "2025-02-26T14:01:05.942603315", "og:locale": "en_US", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8c7a4814-31d7-4158-9947-5d7cc249f16a", "sourceURL": "https://ktor.io/docs/server-ssl.html", "url": "https://ktor.io/docs/server-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I overview in ktor?\n\nAssistant: To overview in ktor, here's what you do:\nIn most cases, your Ktor services are placed behind a reverse proxy such as Nginx or Apache. This means that a reverse proxy server handles security concerns, including SSL.\n\nIf necessary, you can configure Ktor to serve SSL directly by providing a path to a certificate. Ktor uses [Java KeyStore (JKS)](https://docs.oracle.com/javase/8/docs/api/java/security/KeyStore.html) as a storage facility for certificates. You can use [keytool](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html) to convert and manage certificates stored in KeyStore. This might be useful if you need to convert a PEM certificate issued by a certificate authority to the JKS format supported by Ktor..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-ssl.html", "title": "Server Plugin SSL and certificates in Ktor Server", "description": "This page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:56:56", "type": "section_detail", "page_metadata": {"ogTitle": "SSL and certificates in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "twitter:title": "SSL and certificates in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-ssl.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "title": "SSL and certificates in Ktor Server | Ktor Documentation", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-ssl.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "SSL and certificates in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "build-number": "707", "built-on": "2025-02-26T14:01:05.942603315", "og:locale": "en_US", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8c7a4814-31d7-4158-9947-5d7cc249f16a", "sourceURL": "https://ktor.io/docs/server-ssl.html", "url": "https://ktor.io/docs/server-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I generate a self-signed certificate in ktor?\n\nAssistant: To generate a self-signed certificate in ktor, here's what you do:\n### Generate a certificate in code\n\nKtor provides the ability to generate self-signed certificates for testing purposes by calling the [buildKeyStore](https://api.ktor.io/ktor-network/ktor-network-tls/ktor-network-tls-certificates/io.ktor.network.tls.certificates/build-key-store.html) function, which returns a [KeyStore](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/security/KeyStore.html) instance. To use this function, you need to add the `ktor-network-tls-certificates` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-network-tls-certificates:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-network-tls-certificates:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-network-tls-certificates-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThe code snippet below shows how to generate a certificate and save it to a keystore file:\n\n```\nprivate fun ApplicationEngine.Configuration.envConfig() {\n\n    val keyStoreFile = File(\"build/keystore.jks\")\n    val keyStore = buildKeyStore {\n        certificate(\"sampleAlias\") {\n            password = \"foobar\"\n            domains = listOf(\"127.0.0.1\", \"0.0.0.0\", \"localhost\")\n        }\n    }\n    keyStore.saveToFile(keyStoreFile, \"123456\")\n}\n```\n\nSince Ktor requires a certificate when it starts, you have to create a certificate before starting the server. You can find the full example here: [ssl-embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-embedded-server)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-ssl.html", "title": "Server Plugin SSL and certificates in Ktor Server", "description": "This page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:56:56", "type": "section_detail", "page_metadata": {"ogTitle": "SSL and certificates in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "twitter:title": "SSL and certificates in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-ssl.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "title": "SSL and certificates in Ktor Server | Ktor Documentation", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-ssl.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "SSL and certificates in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "build-number": "707", "built-on": "2025-02-26T14:01:05.942603315", "og:locale": "en_US", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8c7a4814-31d7-4158-9947-5d7cc249f16a", "sourceURL": "https://ktor.io/docs/server-ssl.html", "url": "https://ktor.io/docs/server-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I generate a certificate using keytool in ktor?\n\nAssistant: To generate a certificate using keytool in ktor, here's what you do:\nYou can use [keytool](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html) to generate a self-signed certificate:\n\n```\nkeytool -keystore keystore.jks -alias sampleAlias -genkeypair -keyalg RSA -keysize 4096 -validity 3 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US'\n```\n\nAfter executing this command, `keytool` suggests you specify a keystore password and then generates a JKS file..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-ssl.html", "title": "Server Plugin SSL and certificates in Ktor Server", "description": "This page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:56:56", "type": "section_detail", "page_metadata": {"ogTitle": "SSL and certificates in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "twitter:title": "SSL and certificates in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-ssl.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "title": "SSL and certificates in Ktor Server | Ktor Documentation", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-ssl.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "SSL and certificates in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "build-number": "707", "built-on": "2025-02-26T14:01:05.942603315", "og:locale": "en_US", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8c7a4814-31d7-4158-9947-5d7cc249f16a", "sourceURL": "https://ktor.io/docs/server-ssl.html", "url": "https://ktor.io/docs/server-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I convert pem certificates to jks in ktor?\n\nAssistant: To convert pem certificates to jks in ktor, here's what you do:\nIf your certificate authority issues certificates in a PEM format, you need to convert it to the JKS format before [configuring SSL in Ktor](https://ktor.io/docs/server-ssl.html#configure-ssl-ktor). You can use `openssl` and `keytool` utilities to do this. For example, if you have a private key in the `key.pem` file and a public certificate in `cert.pem`, a conversion process might look as follows:\n\n1. Convert PEM into the PKCS12 format using `openssl` by using the following command:\n\n```\nopenssl pkcs12 -export -in cert.pem -inkey key.pem -out keystore.p12 -name \"sampleAlias\"\n```\n\nYou will be prompted to enter a passphrase for `key.pem` and a new password for `keystore.p12`.\n\n2. Convert PKCS12 to the JKS format using `keytool`:\n\n```\nkeytool -importkeystore -srckeystore keystore.p12 -srcstoretype pkcs12 -destkeystore keystore.jks\n```\n\nYou will be prompted to enter a password for the `keystore.p12` file and a new password for `keystore.jks`. The `keystore.jks` will be generated..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-ssl.html", "title": "Server Plugin SSL and certificates in Ktor Server", "description": "This page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:56:56", "type": "section_detail", "page_metadata": {"ogTitle": "SSL and certificates in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "twitter:title": "SSL and certificates in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-ssl.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "title": "SSL and certificates in Ktor Server | Ktor Documentation", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-ssl.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "SSL and certificates in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "build-number": "707", "built-on": "2025-02-26T14:01:05.942603315", "og:locale": "en_US", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8c7a4814-31d7-4158-9947-5d7cc249f16a", "sourceURL": "https://ktor.io/docs/server-ssl.html", "url": "https://ktor.io/docs/server-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure ssl in ktor in ktor?\n\nAssistant: To configure ssl in ktor in ktor, here's what you do:\nSpecifying SSL settings in Ktor depends on the way used to [configure a Ktor server](https://ktor.io/docs/server-create-and-configure.html): by using a configuration file or in code using the `embeddedServer` function.\n\n### Configuration file\n\nIf your server is configured in the `application.conf` or `application.yaml` [configuration file](https://ktor.io/docs/server-configuration-file.html), you can enable SSL using the following [properties](https://ktor.io/docs/server-configuration-file.html#predefined-properties):\n\n1. Specify the SSL port using the `ktor.deployment.sslPort` property:\n\n```\nktor {\n       deployment {\n           sslPort = 8443\n       }\n}\n```\n\n```\nktor:\n       deployment:\n           sslPort: 8443\n```\n\n2. Provide keystore settings in a separate `security` group:\n\n```\nktor {\n       security {\n           ssl {\n               keyStore = keystore.jks\n               keyAlias = sampleAlias\n               keyStorePassword = foobar\n               privateKeyPassword = foobar\n           }\n       }\n}\n```\n\n```\nktor:\n       security:\n           ssl:\n               keyStore: keystore.jks\n               keyAlias: sampleAlias\n               keyStorePassword: foobar\n               privateKeyPassword: foobar\n```\n\nFor the full example, see [ssl-engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-engine-main)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-ssl.html", "title": "Server Plugin SSL and certificates in Ktor Server", "description": "This page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:56:56", "type": "section_detail", "page_metadata": {"ogTitle": "SSL and certificates in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "twitter:title": "SSL and certificates in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-ssl.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "title": "SSL and certificates in Ktor Server | Ktor Documentation", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-ssl.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "SSL and certificates in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "build-number": "707", "built-on": "2025-02-26T14:01:05.942603315", "og:locale": "en_US", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8c7a4814-31d7-4158-9947-5d7cc249f16a", "sourceURL": "https://ktor.io/docs/server-ssl.html", "url": "https://ktor.io/docs/server-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I embeddedserver in ktor?\n\nAssistant: To embeddedserver in ktor, here's what you do:\nIf you use the `embeddedServer` function to run your server, you need to configure a [custom environment](https://ktor.io/docs/server-configuration-code.html#embedded-custom) in the [ApplicationEngine.Configuration](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-application-engine/-configuration/index.html) and provide SSL settings there using [sslConnector](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/ssl-connector.html):\n\n```\nimport io.ktor.network.tls.certificates.*\nimport io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport org.slf4j.*\nimport java.io.*\nimport java.security.KeyStore\n\nfun main() {\n    embeddedServer(Netty, applicationEnvironment { log = LoggerFactory.getLogger(\"ktor.application\") }, {\n        envConfig()\n    }, module = Application::module).start(wait = true)\n}\n\nprivate fun ApplicationEngine.Configuration.envConfig() {\n\n    val keyStoreFile = File(\"build/keystore.jks\")\n    val keyStore = buildKeyStore {\n        certificate(\"sampleAlias\") {\n            password = \"foobar\"\n            domains = listOf(\"127.0.0.1\", \"0.0.0.0\", \"localhost\")\n        }\n    }\n    keyStore.saveToFile(keyStoreFile, \"123456\")\n\n    connector {\n        port = 8080\n    }\n    sslConnector(\n        keyStore = keyStore,\n        keyAlias = \"sampleAlias\",\n        keyStorePassword = { \"123456\".toCharArray() },\n        privateKeyPassword = { \"foobar\".toCharArray() }) {\n        port = 8443\n        keyStorePath = keyStoreFile\n    }\n}\n```\n\nFor the full example, see [ssl-embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-embedded-server)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-ssl.html", "title": "Server Plugin SSL and certificates in Ktor Server", "description": "This page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:56:56", "type": "section_detail", "page_metadata": {"ogTitle": "SSL and certificates in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "twitter:title": "SSL and certificates in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-ssl.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "title": "SSL and certificates in Ktor Server | Ktor Documentation", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-ssl.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "SSL and certificates in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "build-number": "707", "built-on": "2025-02-26T14:01:05.942603315", "og:locale": "en_US", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8c7a4814-31d7-4158-9947-5d7cc249f16a", "sourceURL": "https://ktor.io/docs/server-ssl.html", "url": "https://ktor.io/docs/server-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin SSL and certificates in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Generate a certificate in code**:\n\n```yaml\nprivate fun ApplicationEngine.Configuration.envConfig() {\n\n    val keyStoreFile = File(\"build/keystore.jks\")\n    val keyStore = buildKeyStore {\n        certificate(\"sampleAlias\") {\n            password = \"foobar\"\n            domains = listOf(\"127.0.0.1\", \"0.0.0.0\", \"localhost\")\n        }\n    }\n    keyStore.saveToFile(keyStoreFile, \"123456\")\n}\n```\n\nThis snippet shows you how to generate a certificate in code, which is an important aspect of server plugin ssl and certificates in ktor server.\n\n**Generate a certificate using keytool**:\n\n```yaml\nkeytool -keystore keystore.jks -alias sampleAlias -genkeypair -keyalg RSA -keysize 4096 -validity 3 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US'\n```\n\nThis snippet shows you how to generate a certificate using keytool, which is an important aspect of server plugin ssl and certificates in ktor server.\n\n**Convert PEM into PKCS12 format**:\n\n```yaml\nopenssl pkcs12 -export -in cert.pem -inkey key.pem -out keystore.p12 -name \"sampleAlias\"\n```\n\nThis snippet shows you how to convert pem into pkcs12 format, which is an important aspect of server plugin ssl and certificates in ktor server.\n\n**Convert PKCS12 to JKS format**:\n\n```yaml\nkeytool -importkeystore -srckeystore keystore.p12 -srcstoretype pkcs12 -destkeystore keystore.jks\n```\n\nThis snippet shows you how to convert pkcs12 to jks format, which is an important aspect of server plugin ssl and certificates in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-ssl.html", "title": "Server Plugin SSL and certificates in Ktor Server", "description": "This page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:56:56", "type": "code_examples", "page_metadata": {"ogTitle": "SSL and certificates in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "twitter:title": "SSL and certificates in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-ssl.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "title": "SSL and certificates in Ktor Server | Ktor Documentation", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-ssl.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "SSL and certificates in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "build-number": "707", "built-on": "2025-02-26T14:01:05.942603315", "og:locale": "en_US", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8c7a4814-31d7-4158-9947-5d7cc249f16a", "sourceURL": "https://ktor.io/docs/server-ssl.html", "url": "https://ktor.io/docs/server-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin SSL and certificates in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can use Let's Encrypt to get a free certificate to serve `https://` and `wss://` requests with Ktor.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-ssl.html", "title": "Server Plugin SSL and certificates in Ktor Server", "description": "This page covers how to configure SSL and manage certificates in Ktor Server, including generating self-signed certificates and converting PEM certificates to JKS format.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 03:56:56", "type": "best_practices", "page_metadata": {"ogTitle": "SSL and certificates in Ktor Server | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "twitter:title": "SSL and certificates in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-ssl.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "title": "SSL and certificates in Ktor Server | Ktor Documentation", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-ssl.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "SSL and certificates in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "build-number": "707", "built-on": "2025-02-26T14:01:05.942603315", "og:locale": "en_US", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8c7a4814-31d7-4158-9947-5d7cc249f16a", "sourceURL": "https://ktor.io/docs/server-ssl.html", "url": "https://ktor.io/docs/server-ssl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Templating is in ktor?\n\nAssistant: Sure, I'd be happy to explain Templating in ktor.\n\n# Templating\n\nKtor provides different ways for working with views: you can build HTML/CSS using Kotlin DSL, or you can choose between JVM template engines, such as FreeMarker, Velocity, and so on.Here's a quick rundown of what this is about:\n\n## Overview\n\nKtor provides different ways for working with views: you can build HTML/CSS using Kotlin DSL, or you can choose between JVM template engines, such as FreeMarker, Velocity, and so on.\n\n## Template Engines\n\n- HTML DSL: [HTML DSL](https://ktor.io/docs/server-html-dsl.html)\n- CSS DSL: [CSS DSL](https://ktor.io/docs/server-css-dsl.html)\n- FreeMarker: [FreeMarker](https://ktor.io/docs/server-freemarker.html)\n- Velocity: [Velocity](https://ktor.io/docs/server-velocity.html)\n- Mustache: [Mustache](https://ktor.io/docs/server-mustache.html)\n- Thymeleaf: [Thymeleaf](https://ktor.io/docs/server-thymeleaf.html)\n- Pebble: [Pebble](https://ktor.io/docs/server-pebble.html)\n- JTE: [JTE](https://ktor.io/docs/server-jte.html)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-templating.html", "title": "Templating", "description": "Ktor provides different ways for working with views: you can build HTML/CSS using Kotlin DSL, or you can choose between JVM template engines, such as FreeMarker, Velocity, and so on.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:57:15", "type": "overview", "page_metadata": {"ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-templating.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Templating | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-templating.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "build-number": "707", "title": "Templating | Ktor Documentation", "ogTitle": "Templating | Ktor", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:01.928780415", "og:site_name": "Ktor Help", "og:title": "Templating | Ktor", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "scrapeId": "e884c8bf-dc30-49ab-a17f-6f656827c9a0", "sourceURL": "https://ktor.io/docs/server-templating.html", "url": "https://ktor.io/docs/server-templating.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I overview in ktor?\n\nAssistant: To overview in ktor, here's what you do:\nKtor provides different ways for working with views: you can build HTML/CSS using Kotlin DSL, or you can choose between JVM template engines, such as FreeMarker, Velocity, and so on..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-templating.html", "title": "Templating", "description": "Ktor provides different ways for working with views: you can build HTML/CSS using Kotlin DSL, or you can choose between JVM template engines, such as FreeMarker, Velocity, and so on.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:57:15", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-templating.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Templating | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-templating.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "build-number": "707", "title": "Templating | Ktor Documentation", "ogTitle": "Templating | Ktor", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:01.928780415", "og:site_name": "Ktor Help", "og:title": "Templating | Ktor", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "scrapeId": "e884c8bf-dc30-49ab-a17f-6f656827c9a0", "sourceURL": "https://ktor.io/docs/server-templating.html", "url": "https://ktor.io/docs/server-templating.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I template engines in ktor?\n\nAssistant: To template engines in ktor, here's what you do:\n- HTML DSL: [HTML DSL](https://ktor.io/docs/server-html-dsl.html)\n- CSS DSL: [CSS DSL](https://ktor.io/docs/server-css-dsl.html)\n- FreeMarker: [FreeMarker](https://ktor.io/docs/server-freemarker.html)\n- Velocity: [Velocity](https://ktor.io/docs/server-velocity.html)\n- Mustache: [Mustache](https://ktor.io/docs/server-mustache.html)\n- Thymeleaf: [Thymeleaf](https://ktor.io/docs/server-thymeleaf.html)\n- Pebble: [Pebble](https://ktor.io/docs/server-pebble.html)\n- JTE: [JTE](https://ktor.io/docs/server-jte.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-templating.html", "title": "Templating", "description": "Ktor provides different ways for working with views: you can build HTML/CSS using Kotlin DSL, or you can choose between JVM template engines, such as FreeMarker, Velocity, and so on.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:57:15", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-templating.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Templating | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-templating.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "build-number": "707", "title": "Templating | Ktor Documentation", "ogTitle": "Templating | Ktor", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:01.928780415", "og:site_name": "Ktor Help", "og:title": "Templating | Ktor", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "scrapeId": "e884c8bf-dc30-49ab-a17f-6f656827c9a0", "sourceURL": "https://ktor.io/docs/server-templating.html", "url": "https://ktor.io/docs/server-templating.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Templating in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo learn how to serve static HTML files, see Serving static content.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-templating.html", "title": "Templating", "description": "Ktor provides different ways for working with views: you can build HTML/CSS using Kotlin DSL, or you can choose between JVM template engines, such as FreeMarker, Velocity, and so on.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:57:15", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-templating.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Templating | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-templating.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "build-number": "707", "title": "Templating | Ktor Documentation", "ogTitle": "Templating | Ktor", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:01.928780415", "og:site_name": "Ktor Help", "og:title": "Templating | Ktor", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "scrapeId": "e884c8bf-dc30-49ab-a17f-6f656827c9a0", "sourceURL": "https://ktor.io/docs/server-templating.html", "url": "https://ktor.io/docs/server-templating.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Redirect is in ktor?\n\nAssistant: Sure, I'd be happy to explain Redirect in ktor.\n\n# Redirect\n\nBy default, the Ktor client redirects to URLs provided in the `Location` header. If required, you can disable redirections.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\n`HttpRedirect` only requires the [ktor-client-core](https://ktor.io/docs/client-dependencies.html) artifact and doesn't need any specific dependencies.\n\n## Disable redirects\n\nTo disable redirections, set the `followRedirects` property to `false` in a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```kotlin\nval client = HttpClient(CIO) {\n    followRedirects = false\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-redirect.html", "title": "Redirect", "description": "By default, the Ktor client redirects to URLs provided in the `Location` header. If required, you can disable redirections.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:58:35", "type": "overview", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-redirect.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "ogTitle": "Redirect | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-redirect.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:title": "Redirect | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:title": "Redirect | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.052134746", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "title": "Redirect | Ktor Documentation", "scrapeId": "0489dbda-6cfd-466f-af8e-cd3949cf4590", "sourceURL": "https://ktor.io/docs/client-redirect.html", "url": "https://ktor.io/docs/client-redirect.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\n`HttpRedirect` only requires the [ktor-client-core](https://ktor.io/docs/client-dependencies.html) artifact and doesn't need any specific dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-redirect.html", "title": "Redirect", "description": "By default, the Ktor client redirects to URLs provided in the `Location` header. If required, you can disable redirections.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:58:35", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-redirect.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "ogTitle": "Redirect | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-redirect.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:title": "Redirect | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:title": "Redirect | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.052134746", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "title": "Redirect | Ktor Documentation", "scrapeId": "0489dbda-6cfd-466f-af8e-cd3949cf4590", "sourceURL": "https://ktor.io/docs/client-redirect.html", "url": "https://ktor.io/docs/client-redirect.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I disable redirects in ktor?\n\nAssistant: To disable redirects in ktor, here's what you do:\nTo disable redirections, set the `followRedirects` property to `false` in a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```kotlin\nval client = HttpClient(CIO) {\n    followRedirects = false\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-redirect.html", "title": "Redirect", "description": "By default, the Ktor client redirects to URLs provided in the `Location` header. If required, you can disable redirections.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:58:35", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-redirect.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "ogTitle": "Redirect | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-redirect.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:title": "Redirect | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:title": "Redirect | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.052134746", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "title": "Redirect | Ktor Documentation", "scrapeId": "0489dbda-6cfd-466f-af8e-cd3949cf4590", "sourceURL": "https://ktor.io/docs/client-redirect.html", "url": "https://ktor.io/docs/client-redirect.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Redirect in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Disable Redirects Example**:\n\n```yaml\nval client = HttpClient(CIO) {\n    followRedirects = false\n}\n```\n\nThis snippet shows you how to disable redirects example, which is an important aspect of redirect.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-redirect.html", "title": "Redirect", "description": "By default, the Ktor client redirects to URLs provided in the `Location` header. If required, you can disable redirections.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:58:35", "type": "code_examples", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-redirect.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "ogTitle": "Redirect | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-redirect.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:title": "Redirect | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:title": "Redirect | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.052134746", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "title": "Redirect | Ktor Documentation", "scrapeId": "0489dbda-6cfd-466f-af8e-cd3949cf4590", "sourceURL": "https://ktor.io/docs/client-redirect.html", "url": "https://ktor.io/docs/client-redirect.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Redirect in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to add the necessary dependencies for HttpRedirect.\n\nConsider the implications of disabling redirects in your application.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-redirect.html", "title": "Redirect", "description": "By default, the Ktor client redirects to URLs provided in the `Location` header. If required, you can disable redirections.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:58:35", "type": "best_practices", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-redirect.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "ogTitle": "Redirect | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-redirect.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:title": "Redirect | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:title": "Redirect | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.052134746", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "title": "Redirect | Ktor Documentation", "scrapeId": "0489dbda-6cfd-466f-af8e-cd3949cf4590", "sourceURL": "https://ktor.io/docs/client-redirect.html", "url": "https://ktor.io/docs/client-redirect.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Full-stack development with Kotlin Multiplatform is in ktor?\n\nAssistant: Sure, I'd be happy to explain Full-stack development with Kotlin Multiplatform in ktor.\n\n# Full-stack development with Kotlin Multiplatform\n\nIn this article, you will learn how to develop a full-stack application in Kotlin that runs on Android, iOS, and desktop platforms, all while leveraging Ktor for seamless data handling.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nIn previous articles, IntelliJ IDEA was used as the IDE. In this case, because you will be working with mobile applications, Fleet will be used instead. To learn how to install and configure your environment, see the Fleet for Multiplatform development tutorial.\n\nIf this is the first time you use Compose Multiplatform we recommend that you complete the Get started with Compose Multiplatform tutorial before starting this one. To reduce the complexity of the task, you can focus on a single client platform. For example, if you have never used iOS, it might be wise to focus on desktop or Android development.\n\n## Create a new project\n\nInstead of choosing the Ktor Project Generator to create the initial project, you will use the Kotlin Multiplatform Wizard. This will create a project to which you can add clients and services. The clients can either use a native UI library, such as SwiftUI, or share the same UI by using Compose Multiplatform.\n\n1. Open the Kotlin Multiplatform Wizard.\n2. Enter full-stack-task-manager as the name of the project, and org.example.ktor as the project ID.\n3. Select Android, iOS, Desktop, and Server as the targeted platforms.\n4. Click the Download button to download the project.\n5. Unpack the resulting ZIP file into a folder of your choice.\n\n## Examine the project\n\n1. Launch Fleet.\n2. On the Welcome screen, click Open, or select File | Open in the editor.\n3. Navigate to the unpacked project folder and then click Open.\n4. When opening a folder with a build file, Fleet gives you the option to enable Smart Mode. Click Trust and Open.\n5. Wait until the project has been fully imported and indexed.\n6. In the Files panel, navigate to server/src/main/kotlin/org/example/ktor and open the Application.kt file.\n\nIt isn't immediately clear by looking at the project structure, but the server folder is one of three Kotlin modules in the project. The other two are shared and composeApp.\n\n## Run the service\n\nYou can run this service by executing the run configuration for the target.\n\n1. Press `⌘Cmd+R` or select Run | Run & Debug from the main menu to access the run configurations. A new popup window will open displaying a list of available configurations.\n2. Click Run for the server configuration. The service will start in a new Terminal panel at the bottom of the IDE.\n3. Navigate to http://0.0.0.0:8080/ to open the application. You should see a message from Ktor displayed in the browser.\n\n## Add the model types\n\n1. Navigate to shared/src/commonMain/kotlin/org/example/ktor and create a new package called model.\n2. Inside the new package, create a new file called Task.kt.\n3. Add an enum to represent priorities and a class to represent tasks. The Task class is annotated with the Serializable type from the kotlinx.serialization library:\n\n```\nimport kotlinx.serialization.Serializable\n\nenum class Priority {\n       Low, Medium, High, Vital\n}\n\n@Serializable\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```\n\n## Create the server\n\n1. Navigate to the server/src/main/kotlin/org/example/ktor folder and create a sub-package called model.\n2. Inside this package, create a new TaskRepository.kt file and add the following interface for our repository:\n\n```\ninterface TaskRepository {\n       fun allTasks(): List<Task>\n       fun tasksByPriority(priority: Priority): List<Task>\n       fun taskByName(name: String): Task?\n       fun addOrUpdateTask(task: Task)\n       fun removeTask(name: String): Boolean\n}\n```\n3. In the same package, create a new file called InMemoryTaskRepository.kt containing the following class:\n\n```\nclass InMemoryTaskRepository : TaskRepository {\n       private var tasks = listOf(\n           Task(\"Cleaning\", \"Clean the house\", Priority.Low),\n           Task(\"Gardening\", \"Mow the lawn\", Priority.Medium),\n           Task(\"Shopping\", \"Buy the groceries\", Priority.High),\n           Task(\"Painting\", \"Paint the fence\", Priority.Low),\n           Task(\"Cooking\", \"Cook the dinner\", Priority.Medium),\n           Task(\"Relaxing\", \"Take a walk\", Priority.High),\n           Task(\"Exercising\", \"Go to the gym\", Priority.Low),\n           Task(\"Learning\", \"Read a book\", Priority.Medium),\n           Task(\"Snoozing\", \"Go for a nap\", Priority.High),\n           Task(\"Socializing\", \"Go to a party\", Priority.High)\n       )\n\n       override fun allTasks(): List<Task> = tasks\n\n       override fun tasksByPriority(priority: Priority) = tasks.filter {\n           it.priority == priority\n       }\n\n       override fun taskByName(name: String) = tasks.find {\n           it.name.equals(name, ignoreCase = true)\n       }\n\n       override fun addOrUpdateTask(task: Task) {\n           var notFound = true\n\n           tasks = tasks.map {\n               if (it.name == task.name) {\n                   notFound = false\n                   task\n               } else {\n                   it\n               }\n           }\n           if (notFound) {\n               tasks = tasks.plus(task)\n           }\n       }\n\n       override fun removeTask(name: String): Boolean {\n           val oldTasks = tasks\n           tasks = tasks.filterNot { it.name == name }\n           return oldTasks.size > tasks.size\n       }\n}\n```},{\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "title": "Full-stack development with Kotlin Multiplatform", "description": "In this article, you will learn how to develop a full-stack application in Kotlin that runs on Android, iOS, and desktop platforms, all while leveraging Ktor for seamless data handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:02:38", "type": "overview", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.021487057", "language": "en-US", "og:title": "Full-stack development with Kotlin Multiplatform | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "build-number": "707", "description": "\n        Learn how to develop a cross-platform full-stack application in Kotlin and Ktor. In this tutorial, you will\n        discover how to use Kotlin Multiplatform to build for Android, iOS, and desktop, and handle data effortlessly\n        using Ktor.\n    ", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Full-stack development with Kotlin Multiplatform | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Full-stack development with Kotlin Multiplatform | Ktor", "og:description": "", "title": "Full-stack development with Kotlin Multiplatform | Ktor Documentation", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "be2c7caf-9b2e-40a0-99c8-c44daa43e489", "sourceURL": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nIn previous articles, IntelliJ IDEA was used as the IDE. In this case, because you will be working with mobile applications, Fleet will be used instead. To learn how to install and configure your environment, see the Fleet for Multiplatform development tutorial.\n\nIf this is the first time you use Compose Multiplatform we recommend that you complete the Get started with Compose Multiplatform tutorial before starting this one. To reduce the complexity of the task, you can focus on a single client platform. For example, if you have never used iOS, it might be wise to focus on desktop or Android development..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "title": "Full-stack development with Kotlin Multiplatform", "description": "In this article, you will learn how to develop a full-stack application in Kotlin that runs on Android, iOS, and desktop platforms, all while leveraging Ktor for seamless data handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:02:38", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.021487057", "language": "en-US", "og:title": "Full-stack development with Kotlin Multiplatform | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "build-number": "707", "description": "\n        Learn how to develop a cross-platform full-stack application in Kotlin and Ktor. In this tutorial, you will\n        discover how to use Kotlin Multiplatform to build for Android, iOS, and desktop, and handle data effortlessly\n        using Ktor.\n    ", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Full-stack development with Kotlin Multiplatform | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Full-stack development with Kotlin Multiplatform | Ktor", "og:description": "", "title": "Full-stack development with Kotlin Multiplatform | Ktor Documentation", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "be2c7caf-9b2e-40a0-99c8-c44daa43e489", "sourceURL": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a new project in ktor?\n\nAssistant: To create a new project in ktor, here's what you do:\nInstead of choosing the Ktor Project Generator to create the initial project, you will use the Kotlin Multiplatform Wizard. This will create a project to which you can add clients and services. The clients can either use a native UI library, such as SwiftUI, or share the same UI by using Compose Multiplatform.\n\n1. Open the Kotlin Multiplatform Wizard.\n2. Enter full-stack-task-manager as the name of the project, and org.example.ktor as the project ID.\n3. Select Android, iOS, Desktop, and Server as the targeted platforms.\n4. Click the Download button to download the project.\n5. Unpack the resulting ZIP file into a folder of your choice..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "title": "Full-stack development with Kotlin Multiplatform", "description": "In this article, you will learn how to develop a full-stack application in Kotlin that runs on Android, iOS, and desktop platforms, all while leveraging Ktor for seamless data handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:02:38", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.021487057", "language": "en-US", "og:title": "Full-stack development with Kotlin Multiplatform | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "build-number": "707", "description": "\n        Learn how to develop a cross-platform full-stack application in Kotlin and Ktor. In this tutorial, you will\n        discover how to use Kotlin Multiplatform to build for Android, iOS, and desktop, and handle data effortlessly\n        using Ktor.\n    ", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Full-stack development with Kotlin Multiplatform | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Full-stack development with Kotlin Multiplatform | Ktor", "og:description": "", "title": "Full-stack development with Kotlin Multiplatform | Ktor Documentation", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "be2c7caf-9b2e-40a0-99c8-c44daa43e489", "sourceURL": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I examine the project in ktor?\n\nAssistant: To examine the project in ktor, here's what you do:\n1. Launch Fleet.\n2. On the Welcome screen, click Open, or select File | Open in the editor.\n3. Navigate to the unpacked project folder and then click Open.\n4. When opening a folder with a build file, Fleet gives you the option to enable Smart Mode. Click Trust and Open.\n5. Wait until the project has been fully imported and indexed.\n6. In the Files panel, navigate to server/src/main/kotlin/org/example/ktor and open the Application.kt file.\n\nIt isn't immediately clear by looking at the project structure, but the server folder is one of three Kotlin modules in the project. The other two are shared and composeApp..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "title": "Full-stack development with Kotlin Multiplatform", "description": "In this article, you will learn how to develop a full-stack application in Kotlin that runs on Android, iOS, and desktop platforms, all while leveraging Ktor for seamless data handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:02:38", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.021487057", "language": "en-US", "og:title": "Full-stack development with Kotlin Multiplatform | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "build-number": "707", "description": "\n        Learn how to develop a cross-platform full-stack application in Kotlin and Ktor. In this tutorial, you will\n        discover how to use Kotlin Multiplatform to build for Android, iOS, and desktop, and handle data effortlessly\n        using Ktor.\n    ", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Full-stack development with Kotlin Multiplatform | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Full-stack development with Kotlin Multiplatform | Ktor", "og:description": "", "title": "Full-stack development with Kotlin Multiplatform | Ktor Documentation", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "be2c7caf-9b2e-40a0-99c8-c44daa43e489", "sourceURL": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run the service in ktor?\n\nAssistant: To run the service in ktor, here's what you do:\nYou can run this service by executing the run configuration for the target.\n\n1. Press `⌘Cmd+R` or select Run | Run & Debug from the main menu to access the run configurations. A new popup window will open displaying a list of available configurations.\n2. Click Run for the server configuration. The service will start in a new Terminal panel at the bottom of the IDE.\n3. Navigate to http://0.0.0.0:8080/ to open the application. You should see a message from Ktor displayed in the browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "title": "Full-stack development with Kotlin Multiplatform", "description": "In this article, you will learn how to develop a full-stack application in Kotlin that runs on Android, iOS, and desktop platforms, all while leveraging Ktor for seamless data handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:02:38", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.021487057", "language": "en-US", "og:title": "Full-stack development with Kotlin Multiplatform | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "build-number": "707", "description": "\n        Learn how to develop a cross-platform full-stack application in Kotlin and Ktor. In this tutorial, you will\n        discover how to use Kotlin Multiplatform to build for Android, iOS, and desktop, and handle data effortlessly\n        using Ktor.\n    ", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Full-stack development with Kotlin Multiplatform | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Full-stack development with Kotlin Multiplatform | Ktor", "og:description": "", "title": "Full-stack development with Kotlin Multiplatform | Ktor Documentation", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "be2c7caf-9b2e-40a0-99c8-c44daa43e489", "sourceURL": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add the model types in ktor?\n\nAssistant: To add the model types in ktor, here's what you do:\n1. Navigate to shared/src/commonMain/kotlin/org/example/ktor and create a new package called model.\n2. Inside the new package, create a new file called Task.kt.\n3. Add an enum to represent priorities and a class to represent tasks. The Task class is annotated with the Serializable type from the kotlinx.serialization library:\n\n```\nimport kotlinx.serialization.Serializable\n\nenum class Priority {\n       Low, Medium, High, Vital\n}\n\n@Serializable\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "title": "Full-stack development with Kotlin Multiplatform", "description": "In this article, you will learn how to develop a full-stack application in Kotlin that runs on Android, iOS, and desktop platforms, all while leveraging Ktor for seamless data handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:02:38", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.021487057", "language": "en-US", "og:title": "Full-stack development with Kotlin Multiplatform | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "build-number": "707", "description": "\n        Learn how to develop a cross-platform full-stack application in Kotlin and Ktor. In this tutorial, you will\n        discover how to use Kotlin Multiplatform to build for Android, iOS, and desktop, and handle data effortlessly\n        using Ktor.\n    ", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Full-stack development with Kotlin Multiplatform | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Full-stack development with Kotlin Multiplatform | Ktor", "og:description": "", "title": "Full-stack development with Kotlin Multiplatform | Ktor Documentation", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "be2c7caf-9b2e-40a0-99c8-c44daa43e489", "sourceURL": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create the server in ktor?\n\nAssistant: To create the server in ktor, here's what you do:\n1. Navigate to the server/src/main/kotlin/org/example/ktor folder and create a sub-package called model.\n2. Inside this package, create a new TaskRepository.kt file and add the following interface for our repository:\n\n```\ninterface TaskRepository {\n       fun allTasks(): List<Task>\n       fun tasksByPriority(priority: Priority): List<Task>\n       fun taskByName(name: String): Task?\n       fun addOrUpdateTask(task: Task)\n       fun removeTask(name: String): Boolean\n}\n```\n3. In the same package, create a new file called InMemoryTaskRepository.kt containing the following class:\n\n```\nclass InMemoryTaskRepository : TaskRepository {\n       private var tasks = listOf(\n           Task(\"Cleaning\", \"Clean the house\", Priority.Low),\n           Task(\"Gardening\", \"Mow the lawn\", Priority.Medium),\n           Task(\"Shopping\", \"Buy the groceries\", Priority.High),\n           Task(\"Painting\", \"Paint the fence\", Priority.Low),\n           Task(\"Cooking\", \"Cook the dinner\", Priority.Medium),\n           Task(\"Relaxing\", \"Take a walk\", Priority.High),\n           Task(\"Exercising\", \"Go to the gym\", Priority.Low),\n           Task(\"Learning\", \"Read a book\", Priority.Medium),\n           Task(\"Snoozing\", \"Go for a nap\", Priority.High),\n           Task(\"Socializing\", \"Go to a party\", Priority.High)\n       )\n\n       override fun allTasks(): List<Task> = tasks\n\n       override fun tasksByPriority(priority: Priority) = tasks.filter {\n           it.priority == priority\n       }\n\n       override fun taskByName(name: String) = tasks.find {\n           it.name.equals(name, ignoreCase = true)\n       }\n\n       override fun addOrUpdateTask(task: Task) {\n           var notFound = true\n\n           tasks = tasks.map {\n               if (it.name == task.name) {\n                   notFound = false\n                   task\n               } else {\n                   it\n               }\n           }\n           if (notFound) {\n               tasks = tasks.plus(task)\n           }\n       }\n\n       override fun removeTask(name: String): Boolean {\n           val oldTasks = tasks\n           tasks = tasks.filterNot { it.name == name }\n           return oldTasks.size > tasks.size\n       }\n}\n```},{.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "title": "Full-stack development with Kotlin Multiplatform", "description": "In this article, you will learn how to develop a full-stack application in Kotlin that runs on Android, iOS, and desktop platforms, all while leveraging Ktor for seamless data handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:02:38", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.021487057", "language": "en-US", "og:title": "Full-stack development with Kotlin Multiplatform | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "build-number": "707", "description": "\n        Learn how to develop a cross-platform full-stack application in Kotlin and Ktor. In this tutorial, you will\n        discover how to use Kotlin Multiplatform to build for Android, iOS, and desktop, and handle data effortlessly\n        using Ktor.\n    ", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Full-stack development with Kotlin Multiplatform | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Full-stack development with Kotlin Multiplatform | Ktor", "og:description": "", "title": "Full-stack development with Kotlin Multiplatform | Ktor Documentation", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "be2c7caf-9b2e-40a0-99c8-c44daa43e489", "sourceURL": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Full-stack development with Kotlin Multiplatform in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Greeting Type Example**:\n\n```yaml\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondText(\"Ktor: \\\",${Greeting().greet()}\\\")\n        }\n    }\n}\n```\n\nThis snippet shows you how to greeting type example, which is an important aspect of full-stack development with kotlin multiplatform.\n\n", "metadata": {"source_url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "title": "Full-stack development with Kotlin Multiplatform", "description": "In this article, you will learn how to develop a full-stack application in Kotlin that runs on Android, iOS, and desktop platforms, all while leveraging Ktor for seamless data handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:02:38", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.021487057", "language": "en-US", "og:title": "Full-stack development with Kotlin Multiplatform | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "build-number": "707", "description": "\n        Learn how to develop a cross-platform full-stack application in Kotlin and Ktor. In this tutorial, you will\n        discover how to use Kotlin Multiplatform to build for Android, iOS, and desktop, and handle data effortlessly\n        using Ktor.\n    ", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Full-stack development with Kotlin Multiplatform | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Full-stack development with Kotlin Multiplatform | Ktor", "og:description": "", "title": "Full-stack development with Kotlin Multiplatform | Ktor Documentation", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "be2c7caf-9b2e-40a0-99c8-c44daa43e489", "sourceURL": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Full-stack development with Kotlin Multiplatform in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIn real-world applications, it is crucial to avoid sending unencrypted data over the network.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "title": "Full-stack development with Kotlin Multiplatform", "description": "In this article, you will learn how to develop a full-stack application in Kotlin that runs on Android, iOS, and desktop platforms, all while leveraging Ktor for seamless data handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:02:38", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.021487057", "language": "en-US", "og:title": "Full-stack development with Kotlin Multiplatform | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "", "og:url": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "build-number": "707", "description": "\n        Learn how to develop a cross-platform full-stack application in Kotlin and Ktor. In this tutorial, you will\n        discover how to use Kotlin Multiplatform to build for Android, iOS, and desktop, and handle data effortlessly\n        using Ktor.\n    ", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/full-stack-development-with-kotlin-multiplatform.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Full-stack development with Kotlin Multiplatform | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Full-stack development with Kotlin Multiplatform | Ktor", "og:description": "", "title": "Full-stack development with Kotlin Multiplatform | Ktor Documentation", "og:type": "website", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "be2c7caf-9b2e-40a0-99c8-c44daa43e489", "sourceURL": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "url": "https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Status pages is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Status pages in ktor.\n\n# Server Plugin Status pages\n\nThe StatusPages plugin allows Ktor applications to respond appropriately to any failure state based on a thrown exception or status code.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `StatusPages`, you need to include the `ktor-server-status-pages` artifact in the build script:\n\nGradle (Kotlin)\n\nGradle (Groovy)\n\nMaven\n\n```\nimplementation(\"io.ktor:ktor-server-status-pages:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-server-status-pages:$ktor_version\"\n```\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-status-pages-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install StatusPages\n\nTo install the `StatusPages` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `StatusPages`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.statuspages.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(StatusPages)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.statuspages.*\n// ...\nfun Application.module() {\n    install(StatusPages)\n    // ...\n}\n```\n\n## Configure StatusPages\n\nThere are three main configuration options provided by the `StatusPages` plugin:\n\n- exceptions: configures a response based on mapped exception classes\n\n- status: configures a response to a status code value\n\n- statusFile: configures a file response from the classpath\n\n### Exceptions\n\nThe `exception` handler allows you to handle calls that result in a `Throwable` exception. In the most basic case, the `500` HTTP status code can be configured for any exception:\n\n```\ninstall(StatusPages) {\n    exception<Throwable> { call, cause ->\n        call.respondText(text = \"500: $cause\" , status = HttpStatusCode.InternalServerError)\n    }\n}\n```\n\nYou can also check specific exceptions and respond with the required content:\n\n```\ninstall(StatusPages) {\n    exception<Throwable> { call, cause ->\n        if(cause is AuthorizationException) {\n            call.respondText(text = \"403: $cause\" , status = HttpStatusCode.Forbidden)\n        } else {\n            call.respondText(text = \"500: $cause\" , status = HttpStatusCode.InternalServerError)\n        }\n    }\n}\n```\n\n### Status\n\nThe `status` handler provides the capability to respond with specific content based on the status code. The example below shows how to respond on requests if the resource is missing on a server (the `404` status code):\n\n```\ninstall(StatusPages) {\n    status(HttpStatusCode.NotFound) { call, status ->\n        call.respondText(text = \"404: Page Not Found\", status = status)\n    }\n}\n```\n\n### Status file\n\nThe `statusFile` handler allows you to serve HTML pages based on the status code. Suppose your project contains the `error401.html` and `error402.html` HTML pages in the `resources` folder. In this case, you can handle the `401` and `402` status codes using `statusFile` as follows:\n\n```\ninstall(StatusPages) {\n    statusFile(HttpStatusCode.Unauthorized, HttpStatusCode.PaymentRequired, filePattern = \"error#.html\")\n}\n```\n\nThe `statusFile` handler replaces any `#` character with the value of the status code within the list of configured statuses.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-status-pages.html", "title": "Server Plugin Status pages", "description": "The StatusPages plugin allows Ktor applications to respond appropriately to any failure state based on a thrown exception or status code.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:03:25", "type": "overview", "page_metadata": {"twitter:title": "Status pages | Ktor", "ogTitle": "Status pages | Ktor", "built-on": "2025-02-26T14:01:06.851273635", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "og:title": "Status pages | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Status pages | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-status-pages.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:description": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-status-pages.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "7f74dfae-0077-4719-9b61-c72277d81174", "sourceURL": "https://ktor.io/docs/server-status-pages.html", "url": "https://ktor.io/docs/server-status-pages.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `StatusPages`, you need to include the `ktor-server-status-pages` artifact in the build script:\n\nGradle (Kotlin)\n\nGradle (Groovy)\n\nMaven\n\n```\nimplementation(\"io.ktor:ktor-server-status-pages:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-server-status-pages:$ktor_version\"\n```\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-status-pages-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-status-pages.html", "title": "Server Plugin Status pages", "description": "The StatusPages plugin allows Ktor applications to respond appropriately to any failure state based on a thrown exception or status code.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:03:25", "type": "section_detail", "page_metadata": {"twitter:title": "Status pages | Ktor", "ogTitle": "Status pages | Ktor", "built-on": "2025-02-26T14:01:06.851273635", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "og:title": "Status pages | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Status pages | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-status-pages.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:description": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-status-pages.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "7f74dfae-0077-4719-9b61-c72277d81174", "sourceURL": "https://ktor.io/docs/server-status-pages.html", "url": "https://ktor.io/docs/server-status-pages.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install statuspages in ktor?\n\nAssistant: To install statuspages in ktor, here's what you do:\nTo install the `StatusPages` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `StatusPages`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.statuspages.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(StatusPages)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.statuspages.*\n// ...\nfun Application.module() {\n    install(StatusPages)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-status-pages.html", "title": "Server Plugin Status pages", "description": "The StatusPages plugin allows Ktor applications to respond appropriately to any failure state based on a thrown exception or status code.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:03:25", "type": "section_detail", "page_metadata": {"twitter:title": "Status pages | Ktor", "ogTitle": "Status pages | Ktor", "built-on": "2025-02-26T14:01:06.851273635", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "og:title": "Status pages | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Status pages | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-status-pages.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:description": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-status-pages.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "7f74dfae-0077-4719-9b61-c72277d81174", "sourceURL": "https://ktor.io/docs/server-status-pages.html", "url": "https://ktor.io/docs/server-status-pages.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure statuspages in ktor?\n\nAssistant: To configure statuspages in ktor, here's what you do:\nThere are three main configuration options provided by the `StatusPages` plugin:\n\n- exceptions: configures a response based on mapped exception classes\n\n- status: configures a response to a status code value\n\n- statusFile: configures a file response from the classpath\n\n### Exceptions\n\nThe `exception` handler allows you to handle calls that result in a `Throwable` exception. In the most basic case, the `500` HTTP status code can be configured for any exception:\n\n```\ninstall(StatusPages) {\n    exception<Throwable> { call, cause ->\n        call.respondText(text = \"500: $cause\" , status = HttpStatusCode.InternalServerError)\n    }\n}\n```\n\nYou can also check specific exceptions and respond with the required content:\n\n```\ninstall(StatusPages) {\n    exception<Throwable> { call, cause ->\n        if(cause is AuthorizationException) {\n            call.respondText(text = \"403: $cause\" , status = HttpStatusCode.Forbidden)\n        } else {\n            call.respondText(text = \"500: $cause\" , status = HttpStatusCode.InternalServerError)\n        }\n    }\n}\n```\n\n### Status\n\nThe `status` handler provides the capability to respond with specific content based on the status code. The example below shows how to respond on requests if the resource is missing on a server (the `404` status code):\n\n```\ninstall(StatusPages) {\n    status(HttpStatusCode.NotFound) { call, status ->\n        call.respondText(text = \"404: Page Not Found\", status = status)\n    }\n}\n```\n\n### Status file\n\nThe `statusFile` handler allows you to serve HTML pages based on the status code. Suppose your project contains the `error401.html` and `error402.html` HTML pages in the `resources` folder. In this case, you can handle the `401` and `402` status codes using `statusFile` as follows:\n\n```\ninstall(StatusPages) {\n    statusFile(HttpStatusCode.Unauthorized, HttpStatusCode.PaymentRequired, filePattern = \"error#.html\")\n}\n```\n\nThe `statusFile` handler replaces any `#` character with the value of the status code within the list of configured statuses..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-status-pages.html", "title": "Server Plugin Status pages", "description": "The StatusPages plugin allows Ktor applications to respond appropriately to any failure state based on a thrown exception or status code.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:03:25", "type": "section_detail", "page_metadata": {"twitter:title": "Status pages | Ktor", "ogTitle": "Status pages | Ktor", "built-on": "2025-02-26T14:01:06.851273635", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "og:title": "Status pages | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Status pages | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-status-pages.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:description": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-status-pages.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "7f74dfae-0077-4719-9b61-c72277d81174", "sourceURL": "https://ktor.io/docs/server-status-pages.html", "url": "https://ktor.io/docs/server-status-pages.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Status pages in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-status-pages:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies - gradle (kotlin), which is an important aspect of server plugin status pages.\n\n**Add dependencies - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-status-pages:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies - gradle (groovy), which is an important aspect of server plugin status pages.\n\n**Add dependencies - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-status-pages-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies - maven, which is an important aspect of server plugin status pages.\n\n**Install StatusPages - embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.statuspages.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(StatusPages)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install statuspages - embeddedserver, which is an important aspect of server plugin status pages.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-status-pages.html", "title": "Server Plugin Status pages", "description": "The StatusPages plugin allows Ktor applications to respond appropriately to any failure state based on a thrown exception or status code.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:03:25", "type": "code_examples", "page_metadata": {"twitter:title": "Status pages | Ktor", "ogTitle": "Status pages | Ktor", "built-on": "2025-02-26T14:01:06.851273635", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "og:title": "Status pages | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Status pages | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-status-pages.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:description": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-status-pages.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "7f74dfae-0077-4719-9b61-c72277d81174", "sourceURL": "https://ktor.io/docs/server-status-pages.html", "url": "https://ktor.io/docs/server-status-pages.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Status pages in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can find the full example here: status-pages\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-status-pages.html", "title": "Server Plugin Status pages", "description": "The StatusPages plugin allows Ktor applications to respond appropriately to any failure state based on a thrown exception or status code.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:03:25", "type": "best_practices", "page_metadata": {"twitter:title": "Status pages | Ktor", "ogTitle": "Status pages | Ktor", "built-on": "2025-02-26T14:01:06.851273635", "og:locale": "en_US", "ogSiteName": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "og:title": "Status pages | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Status pages | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-status-pages.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:description": "", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-status-pages.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "7f74dfae-0077-4719-9b61-c72277d81174", "sourceURL": "https://ktor.io/docs/server-status-pages.html", "url": "https://ktor.io/docs/server-status-pages.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what WebSockets serialization in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain WebSockets serialization in Ktor Client in ktor.\n\n# WebSockets serialization in Ktor Client\n\nThis page covers how to serialize and deserialize text frames in WebSockets using Ktor Client, including setup, configuration, and examples for various serialization formats.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nBefore using kotlinx.serialization converters, you need to add the Kotlin serialization plugin as described in the Setup section.\n\n### JSON\nTo serialize/deserialize JSON data, you can choose one of the following libraries: kotlinx.serialization, Gson, or Jackson.\n\nAdd the `ktor-serialization-kotlinx-json` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nAdd the `ktor-serialization-gson` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-gson:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-gson:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-gson-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nAdd the `ktor-serialization-jackson` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-jackson:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-jackson:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-jackson-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### XML\nTo serialize/deserialize XML, add the `ktor-serialization-kotlinx-xml` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n> ### note\n> Note that XML serialization is not supported on `jsNode` target.\n\n### CBOR\nTo serialize/deserialize CBOR, add the `ktor-serialization-kotlinx-cbor` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### ProtoBuf\nTo serialize/deserialize ProtoBuf, add the `ktor-serialization-kotlinx-protobuf` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Configure a serializer\n\n### JSON serializer\nTo register the JSON serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `Json` parameter and assign this instance to the `contentConverter` property:\n```\nimport io.ktor.serialization.kotlinx.*\nimport kotlinx.serialization.json.*\n\nval client = HttpClient(CIO) {\n    install(WebSockets) {\n        contentConverter = KotlinxWebsocketSerializationConverter(Json)\n    }\n}\n```\n\nTo register the Gson serializer, assign `GsonWebsocketContentConverter` to the `contentConverter` property:\n```\nimport io.ktor.serialization.gson.*\n\ninstall(WebSockets) {\n    contentConverter = GsonWebsocketContentConverter()\n}\n```\n\nTo register the Jackson serializer, assign `JacksonWebsocketContentConverter` to the `contentConverter` property:\n```\nimport io.ktor.serialization.jackson.*\n\ninstall(WebSockets) {\n    contentConverter = JacksonWebsocketContentConverter()\n}\n```\n\n### XML serializer\nTo register the XML serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `XML` parameter and assign this instance to the `contentConverter` property:\n```\nimport nl.adaptivity.xmlutil.serialization.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(XML)\n}\n```\n\n### CBOR serializer\nTo register the CBOR serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `Cbor` parameter and assign this instance to the `contentConverter` property:\n```\nimport io.ktor.serialization.kotlinx.cbor.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(Cbor)\n}\n```\n\n### ProtoBuf serializer\nTo register the ProtoBuf serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `ProtoBuf` parameter and assign this instance to the `contentConverter` property:\n```\nimport io.ktor.serialization.kotlinx.protobuf.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(ProtoBuf)\n}\n```\n\n## Receive and send data\n\n### Create a data class\nTo serialize/deserialize text frames into/from an object, you need to create a data class, for example:\n```\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\nIf you use kotlinx.serialization, make sure that this class has the `@Serializable` annotation:\n```\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\n### Send data\nTo send a class instance within a text frame in a specified format, use the `sendSerialized` function:\n```\nclient.webSocket(method = HttpMethod.Get, host = \"127.0.0.1\", port = 8080, path = \"/customer\") {\n    sendSerialized(Customer(1, \"Jane\", \"Smith\"))\n}\n```\n\n### Receive data\nTo receive and convert a content of a text frame, call the `receiveDeserialized` function that accepts a data class as a parameter:\n```\nclient.webSocket(method = HttpMethod.Get, host = \"127.0.0.1\", port = 8080, path = \"/customer/1\") {\n    val customer = receiveDeserialized<Customer>()\n    println(\"A customer with id ${customer.id} is received by the client.\")\n}\n```\n\nTo receive deserialized frames from the incoming channel, use the WebsocketContentConverter.deserialize function. `WebsocketContentConverter` is available via the `DefaultClientWebSocketSession.converter` property.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-websocket-serialization.html", "title": "WebSockets serialization in Ktor Client", "description": "This page covers how to serialize and deserialize text frames in WebSockets using Ktor Client, including setup, configuration, and examples for various serialization formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:06", "type": "overview", "page_metadata": {"twitter:title": "WebSockets serialization in Ktor Client | Ktor", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "og:title": "WebSockets serialization in Ktor Client | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:04.417012623", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "language": "en-US", "title": "WebSockets serialization in Ktor Client | Ktor Documentation", "ogTitle": "WebSockets serialization in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "scrapeId": "c0de5705-79c4-4a60-b1a7-3df8548d8949", "sourceURL": "https://ktor.io/docs/client-websocket-serialization.html", "url": "https://ktor.io/docs/client-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nBefore using kotlinx.serialization converters, you need to add the Kotlin serialization plugin as described in the Setup section.\n\n### JSON\nTo serialize/deserialize JSON data, you can choose one of the following libraries: kotlinx.serialization, Gson, or Jackson.\n\nAdd the `ktor-serialization-kotlinx-json` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nAdd the `ktor-serialization-gson` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-gson:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-gson:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-gson-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nAdd the `ktor-serialization-jackson` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-jackson:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-jackson:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-jackson-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### XML\nTo serialize/deserialize XML, add the `ktor-serialization-kotlinx-xml` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n> ### note\n> Note that XML serialization is not supported on `jsNode` target.\n\n### CBOR\nTo serialize/deserialize CBOR, add the `ktor-serialization-kotlinx-cbor` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### ProtoBuf\nTo serialize/deserialize ProtoBuf, add the `ktor-serialization-kotlinx-protobuf` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-websocket-serialization.html", "title": "WebSockets serialization in Ktor Client", "description": "This page covers how to serialize and deserialize text frames in WebSockets using Ktor Client, including setup, configuration, and examples for various serialization formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:06", "type": "section_detail", "page_metadata": {"twitter:title": "WebSockets serialization in Ktor Client | Ktor", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "og:title": "WebSockets serialization in Ktor Client | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:04.417012623", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "language": "en-US", "title": "WebSockets serialization in Ktor Client | Ktor Documentation", "ogTitle": "WebSockets serialization in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "scrapeId": "c0de5705-79c4-4a60-b1a7-3df8548d8949", "sourceURL": "https://ktor.io/docs/client-websocket-serialization.html", "url": "https://ktor.io/docs/client-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure a serializer in ktor?\n\nAssistant: To configure a serializer in ktor, here's what you do:\n### JSON serializer\nTo register the JSON serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `Json` parameter and assign this instance to the `contentConverter` property:\n```\nimport io.ktor.serialization.kotlinx.*\nimport kotlinx.serialization.json.*\n\nval client = HttpClient(CIO) {\n    install(WebSockets) {\n        contentConverter = KotlinxWebsocketSerializationConverter(Json)\n    }\n}\n```\n\nTo register the Gson serializer, assign `GsonWebsocketContentConverter` to the `contentConverter` property:\n```\nimport io.ktor.serialization.gson.*\n\ninstall(WebSockets) {\n    contentConverter = GsonWebsocketContentConverter()\n}\n```\n\nTo register the Jackson serializer, assign `JacksonWebsocketContentConverter` to the `contentConverter` property:\n```\nimport io.ktor.serialization.jackson.*\n\ninstall(WebSockets) {\n    contentConverter = JacksonWebsocketContentConverter()\n}\n```\n\n### XML serializer\nTo register the XML serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `XML` parameter and assign this instance to the `contentConverter` property:\n```\nimport nl.adaptivity.xmlutil.serialization.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(XML)\n}\n```\n\n### CBOR serializer\nTo register the CBOR serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `Cbor` parameter and assign this instance to the `contentConverter` property:\n```\nimport io.ktor.serialization.kotlinx.cbor.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(Cbor)\n}\n```\n\n### ProtoBuf serializer\nTo register the ProtoBuf serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `ProtoBuf` parameter and assign this instance to the `contentConverter` property:\n```\nimport io.ktor.serialization.kotlinx.protobuf.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(ProtoBuf)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-websocket-serialization.html", "title": "WebSockets serialization in Ktor Client", "description": "This page covers how to serialize and deserialize text frames in WebSockets using Ktor Client, including setup, configuration, and examples for various serialization formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:06", "type": "section_detail", "page_metadata": {"twitter:title": "WebSockets serialization in Ktor Client | Ktor", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "og:title": "WebSockets serialization in Ktor Client | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:04.417012623", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "language": "en-US", "title": "WebSockets serialization in Ktor Client | Ktor Documentation", "ogTitle": "WebSockets serialization in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "scrapeId": "c0de5705-79c4-4a60-b1a7-3df8548d8949", "sourceURL": "https://ktor.io/docs/client-websocket-serialization.html", "url": "https://ktor.io/docs/client-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I receive and send data in ktor?\n\nAssistant: To receive and send data in ktor, here's what you do:\n### Create a data class\nTo serialize/deserialize text frames into/from an object, you need to create a data class, for example:\n```\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\nIf you use kotlinx.serialization, make sure that this class has the `@Serializable` annotation:\n```\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\n### Send data\nTo send a class instance within a text frame in a specified format, use the `sendSerialized` function:\n```\nclient.webSocket(method = HttpMethod.Get, host = \"127.0.0.1\", port = 8080, path = \"/customer\") {\n    sendSerialized(Customer(1, \"Jane\", \"Smith\"))\n}\n```\n\n### Receive data\nTo receive and convert a content of a text frame, call the `receiveDeserialized` function that accepts a data class as a parameter:\n```\nclient.webSocket(method = HttpMethod.Get, host = \"127.0.0.1\", port = 8080, path = \"/customer/1\") {\n    val customer = receiveDeserialized<Customer>()\n    println(\"A customer with id ${customer.id} is received by the client.\")\n}\n```\n\nTo receive deserialized frames from the incoming channel, use the WebsocketContentConverter.deserialize function. `WebsocketContentConverter` is available via the `DefaultClientWebSocketSession.converter` property..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-websocket-serialization.html", "title": "WebSockets serialization in Ktor Client", "description": "This page covers how to serialize and deserialize text frames in WebSockets using Ktor Client, including setup, configuration, and examples for various serialization formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:06", "type": "section_detail", "page_metadata": {"twitter:title": "WebSockets serialization in Ktor Client | Ktor", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "og:title": "WebSockets serialization in Ktor Client | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:04.417012623", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "language": "en-US", "title": "WebSockets serialization in Ktor Client | Ktor Documentation", "ogTitle": "WebSockets serialization in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "scrapeId": "c0de5705-79c4-4a60-b1a7-3df8548d8949", "sourceURL": "https://ktor.io/docs/client-websocket-serialization.html", "url": "https://ktor.io/docs/client-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for WebSockets serialization in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add JSON serialization dependency**:\n\n```yaml\nimplementation(\"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\")\n```\n\nThis snippet shows you how to add json serialization dependency, which is an important aspect of websockets serialization in ktor client.\n\n**Register JSON serializer**:\n\n```yaml\ncontentConverter = KotlinxWebsocketSerializationConverter(Json)\n```\n\nThis snippet shows you how to register json serializer, which is an important aspect of websockets serialization in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-websocket-serialization.html", "title": "WebSockets serialization in Ktor Client", "description": "This page covers how to serialize and deserialize text frames in WebSockets using Ktor Client, including setup, configuration, and examples for various serialization formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:06", "type": "code_examples", "page_metadata": {"twitter:title": "WebSockets serialization in Ktor Client | Ktor", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "og:title": "WebSockets serialization in Ktor Client | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:04.417012623", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "language": "en-US", "title": "WebSockets serialization in Ktor Client | Ktor Documentation", "ogTitle": "WebSockets serialization in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "scrapeId": "c0de5705-79c4-4a60-b1a7-3df8548d8949", "sourceURL": "https://ktor.io/docs/client-websocket-serialization.html", "url": "https://ktor.io/docs/client-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using WebSockets serialization in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNote that XML serialization is not supported on `jsNode` target.\n\nYou can find the full example here: client-websockets-serialization.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-websocket-serialization.html", "title": "WebSockets serialization in Ktor Client", "description": "This page covers how to serialize and deserialize text frames in WebSockets using Ktor Client, including setup, configuration, and examples for various serialization formats.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:06", "type": "best_practices", "page_metadata": {"twitter:title": "WebSockets serialization in Ktor Client | Ktor", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "og:title": "WebSockets serialization in Ktor Client | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-websocket-serialization.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:04.417012623", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "language": "en-US", "title": "WebSockets serialization in Ktor Client | Ktor Documentation", "ogTitle": "WebSockets serialization in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:site_name": "Ktor Help", "scrapeId": "c0de5705-79c4-4a60-b1a7-3df8548d8949", "sourceURL": "https://ktor.io/docs/client-websocket-serialization.html", "url": "https://ktor.io/docs/client-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Retrying failed requests is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Retrying failed requests in ktor.\n\n# Client Plugin Retrying failed requests\n\nThis page covers how to configure the HttpRequestRetry plugin in Ktor to handle failed requests by retrying them based on specified conditions and policies.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\n`HttpRequestRetry` only requires the [ktor-client-core](https://ktor.io/docs/client-dependencies.html) artifact and doesn't need any specific dependencies.\n\n## Install HttpRequestRetry\n\nTo install `HttpRequestRetry`, pass it to the `install` function inside a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.*\n//...\nval client = HttpClient(CIO) {\n    install(HttpRequestRetry)\n}\n```\n\n## Configure HttpRequestRetry\n\n### Basic retry configuration\n\nA [runnable example](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-retry) below shows how to configure the basic retry policy:\n\n```\nval client = HttpClient(CIO) {\n    install(HttpRequestRetry) {\n        retryOnServerErrors(maxRetries = 5)\n        exponentialDelay()\n    }\n}\n```\n\n- The `retryOnServerErrors` function enables retrying a request if a `5xx` response is received from a server and specifies the number of retries.\n\n- `exponentialDelay` specifies an exponential delay between retries, which is calculated using the Exponential backoff algorithm.\n\nYou can learn more about supported configuration options from [HttpRequestRetryConfig](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-request-retry-config).\n\n## Configure retry conditions\n\nThere are also configuration settings that allow you to configure conditions for retrying a request or specify delay logic:\n\n```\ninstall(HttpRequestRetry) {\n    maxRetries = 5\n    retryIf { request, response ->\n        !response.status.isSuccess()\n    }\n    retryOnExceptionIf { request, cause ->\n        cause is NetworkError\n    }\n    delayMillis { retry ->\n        retry * 3000L\n    } // retries in 3, 6, 9, etc. seconds\n}\n```\n\n## Modify a request before retrying\n\nIf you need to modify a request before retrying, use `modifyRequest`:\n\n```\ninstall(HttpRequestRetry) {\n    // Retry conditions\n    modifyRequest { request ->\n        request.headers.append(\"x-retry-count\", retryCount.toString())\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-request-retry.html", "title": "Client Plugin Retrying failed requests", "description": "This page covers how to configure the HttpRequestRetry plugin in Ktor to handle failed requests by retrying them based on specified conditions and policies.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:04:25", "type": "overview", "page_metadata": {"ogTitle": "Retrying failed requests | Ktor", "ogLocale": "en_US", "og:title": "Retrying failed requests | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-request-retry.html", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.547000566", "og:url": "https://ktor.io/docs/3.1.1/client-request-retry.html", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Retrying failed requests | Ktor Documentation", "ogDescription": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:title": "Retrying failed requests | Ktor", "scrapeId": "66088e2b-76c6-4ed6-929b-e075845c7111", "sourceURL": "https://ktor.io/docs/client-request-retry.html", "url": "https://ktor.io/docs/client-request-retry.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\n`HttpRequestRetry` only requires the [ktor-client-core](https://ktor.io/docs/client-dependencies.html) artifact and doesn't need any specific dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-request-retry.html", "title": "Client Plugin Retrying failed requests", "description": "This page covers how to configure the HttpRequestRetry plugin in Ktor to handle failed requests by retrying them based on specified conditions and policies.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:04:25", "type": "section_detail", "page_metadata": {"ogTitle": "Retrying failed requests | Ktor", "ogLocale": "en_US", "og:title": "Retrying failed requests | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-request-retry.html", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.547000566", "og:url": "https://ktor.io/docs/3.1.1/client-request-retry.html", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Retrying failed requests | Ktor Documentation", "ogDescription": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:title": "Retrying failed requests | Ktor", "scrapeId": "66088e2b-76c6-4ed6-929b-e075845c7111", "sourceURL": "https://ktor.io/docs/client-request-retry.html", "url": "https://ktor.io/docs/client-request-retry.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install httprequestretry in ktor?\n\nAssistant: To install httprequestretry in ktor, here's what you do:\nTo install `HttpRequestRetry`, pass it to the `install` function inside a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.*\n//...\nval client = HttpClient(CIO) {\n    install(HttpRequestRetry)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-request-retry.html", "title": "Client Plugin Retrying failed requests", "description": "This page covers how to configure the HttpRequestRetry plugin in Ktor to handle failed requests by retrying them based on specified conditions and policies.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:04:25", "type": "section_detail", "page_metadata": {"ogTitle": "Retrying failed requests | Ktor", "ogLocale": "en_US", "og:title": "Retrying failed requests | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-request-retry.html", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.547000566", "og:url": "https://ktor.io/docs/3.1.1/client-request-retry.html", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Retrying failed requests | Ktor Documentation", "ogDescription": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:title": "Retrying failed requests | Ktor", "scrapeId": "66088e2b-76c6-4ed6-929b-e075845c7111", "sourceURL": "https://ktor.io/docs/client-request-retry.html", "url": "https://ktor.io/docs/client-request-retry.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure httprequestretry in ktor?\n\nAssistant: To configure httprequestretry in ktor, here's what you do:\n### Basic retry configuration\n\nA [runnable example](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-retry) below shows how to configure the basic retry policy:\n\n```\nval client = HttpClient(CIO) {\n    install(HttpRequestRetry) {\n        retryOnServerErrors(maxRetries = 5)\n        exponentialDelay()\n    }\n}\n```\n\n- The `retryOnServerErrors` function enables retrying a request if a `5xx` response is received from a server and specifies the number of retries.\n\n- `exponentialDelay` specifies an exponential delay between retries, which is calculated using the Exponential backoff algorithm.\n\nYou can learn more about supported configuration options from [HttpRequestRetryConfig](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-request-retry-config)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-request-retry.html", "title": "Client Plugin Retrying failed requests", "description": "This page covers how to configure the HttpRequestRetry plugin in Ktor to handle failed requests by retrying them based on specified conditions and policies.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:04:25", "type": "section_detail", "page_metadata": {"ogTitle": "Retrying failed requests | Ktor", "ogLocale": "en_US", "og:title": "Retrying failed requests | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-request-retry.html", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.547000566", "og:url": "https://ktor.io/docs/3.1.1/client-request-retry.html", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Retrying failed requests | Ktor Documentation", "ogDescription": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:title": "Retrying failed requests | Ktor", "scrapeId": "66088e2b-76c6-4ed6-929b-e075845c7111", "sourceURL": "https://ktor.io/docs/client-request-retry.html", "url": "https://ktor.io/docs/client-request-retry.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure retry conditions in ktor?\n\nAssistant: To configure retry conditions in ktor, here's what you do:\nThere are also configuration settings that allow you to configure conditions for retrying a request or specify delay logic:\n\n```\ninstall(HttpRequestRetry) {\n    maxRetries = 5\n    retryIf { request, response ->\n        !response.status.isSuccess()\n    }\n    retryOnExceptionIf { request, cause ->\n        cause is NetworkError\n    }\n    delayMillis { retry ->\n        retry * 3000L\n    } // retries in 3, 6, 9, etc. seconds\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-request-retry.html", "title": "Client Plugin Retrying failed requests", "description": "This page covers how to configure the HttpRequestRetry plugin in Ktor to handle failed requests by retrying them based on specified conditions and policies.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:04:25", "type": "section_detail", "page_metadata": {"ogTitle": "Retrying failed requests | Ktor", "ogLocale": "en_US", "og:title": "Retrying failed requests | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-request-retry.html", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.547000566", "og:url": "https://ktor.io/docs/3.1.1/client-request-retry.html", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Retrying failed requests | Ktor Documentation", "ogDescription": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:title": "Retrying failed requests | Ktor", "scrapeId": "66088e2b-76c6-4ed6-929b-e075845c7111", "sourceURL": "https://ktor.io/docs/client-request-retry.html", "url": "https://ktor.io/docs/client-request-retry.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I modify a request before retrying in ktor?\n\nAssistant: To modify a request before retrying in ktor, here's what you do:\nIf you need to modify a request before retrying, use `modifyRequest`:\n\n```\ninstall(HttpRequestRetry) {\n    // Retry conditions\n    modifyRequest { request ->\n        request.headers.append(\"x-retry-count\", retryCount.toString())\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-request-retry.html", "title": "Client Plugin Retrying failed requests", "description": "This page covers how to configure the HttpRequestRetry plugin in Ktor to handle failed requests by retrying them based on specified conditions and policies.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:04:25", "type": "section_detail", "page_metadata": {"ogTitle": "Retrying failed requests | Ktor", "ogLocale": "en_US", "og:title": "Retrying failed requests | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-request-retry.html", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.547000566", "og:url": "https://ktor.io/docs/3.1.1/client-request-retry.html", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Retrying failed requests | Ktor Documentation", "ogDescription": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:title": "Retrying failed requests | Ktor", "scrapeId": "66088e2b-76c6-4ed6-929b-e075845c7111", "sourceURL": "https://ktor.io/docs/client-request-retry.html", "url": "https://ktor.io/docs/client-request-retry.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Retrying failed requests in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install HttpRequestRetry**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.*\n//...\nval client = HttpClient(CIO) {\n    install(HttpRequestRetry)\n}\n```\n\nThis snippet shows you how to install httprequestretry, which is an important aspect of client plugin retrying failed requests.\n\n**Basic retry configuration**:\n\n```yaml\nval client = HttpClient(CIO) {\n    install(HttpRequestRetry) {\n        retryOnServerErrors(maxRetries = 5)\n        exponentialDelay()\n    }\n}\n```\n\nThis snippet shows you how to basic retry configuration, which is an important aspect of client plugin retrying failed requests.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-request-retry.html", "title": "Client Plugin Retrying failed requests", "description": "This page covers how to configure the HttpRequestRetry plugin in Ktor to handle failed requests by retrying them based on specified conditions and policies.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:04:25", "type": "code_examples", "page_metadata": {"ogTitle": "Retrying failed requests | Ktor", "ogLocale": "en_US", "og:title": "Retrying failed requests | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-request-retry.html", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.547000566", "og:url": "https://ktor.io/docs/3.1.1/client-request-retry.html", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Retrying failed requests | Ktor Documentation", "ogDescription": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:title": "Retrying failed requests | Ktor", "scrapeId": "66088e2b-76c6-4ed6-929b-e075845c7111", "sourceURL": "https://ktor.io/docs/client-request-retry.html", "url": "https://ktor.io/docs/client-request-retry.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Retrying failed requests in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `retryOnServerErrors` function to specify the number of retries for server errors.\n\nImplement `exponentialDelay` for better handling of retries with increasing wait times.\n\nConfigure retry conditions using `retryIf` and `retryOnExceptionIf` for more control over when to retry requests.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-request-retry.html", "title": "Client Plugin Retrying failed requests", "description": "This page covers how to configure the HttpRequestRetry plugin in Ktor to handle failed requests by retrying them based on specified conditions and policies.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:04:25", "type": "best_practices", "page_metadata": {"ogTitle": "Retrying failed requests | Ktor", "ogLocale": "en_US", "og:title": "Retrying failed requests | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogUrl": "https://ktor.io/docs/3.1.1/client-request-retry.html", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.547000566", "og:url": "https://ktor.io/docs/3.1.1/client-request-retry.html", "language": "en-US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Retrying failed requests | Ktor Documentation", "ogDescription": "", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:title": "Retrying failed requests | Ktor", "scrapeId": "66088e2b-76c6-4ed6-929b-e075845c7111", "sourceURL": "https://ktor.io/docs/client-request-retry.html", "url": "https://ktor.io/docs/client-request-retry.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Dropwizard metrics is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Dropwizard metrics in ktor.\n\n# Server Plugin Dropwizard metrics\n\nThis page covers the DropwizardMetrics plugin for Ktor, detailing how to add dependencies, install the plugin, configure it, and the metrics it exposes.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo enable `DropwizardMetrics`, you need to include the following artifacts in the build script:\n\n- Add the `ktor-server-metrics` dependency:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-metrics:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-metrics:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-metrics-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Optionally, add a dependency required for a specific reporter. The example below shows how to add an artifact required to report metrics via JMX:\n\nGradle (Kotlin)\n```\nimplementation(\"io.dropwizard.metrics:metrics-jmx:$dropwizard_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.dropwizard.metrics:metrics-jmx:$dropwizard_version\"\n```\n\nMaven\n```\n<dependency>\n      <groupId>io.dropwizard.metrics</groupId>\n      <artifactId>metrics-jmx</artifactId>\n      <version>${dropwizard_version}</version>\n</dependency>\n```\n\nYou can replace `$dropwizard_version` with the required version of the `metrics-jmx` artifact, for example, `4.2.15`.\n\n## Install DropwizardMetrics\n\nTo [install](https://ktor.io/docs/server-plugins.html#install) the `DropwizardMetrics` plugin to the application, pass it to the `install` function in the specified [module](https://ktor.io/docs/server-modules.html). The code snippets below show how to install `DropwizardMetrics`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.metrics.dropwizard.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DropwizardMetrics)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.metrics.dropwizard.*\n// ...\nfun Application.module() {\n    install(DropwizardMetrics)\n    // ...\n}\n```\n\n## Configure DropwizardMetrics\n\n`DropwizardMetrics` allows you to use any supported [Metric reporter](http://metrics.dropwizard.io/) using the `registry` property. Let's take a look at how to configure the SLF4J and JMX reporters.\n\n### SLF4J reporter\nThe SLF4J reporter allows you to periodically emit reports to any output supported by SLF4J. For example, to output the metrics every 10 seconds, you would:\n```\ninstall(DropwizardMetrics) {\n    Slf4jReporter.forRegistry(registry)\n        .outputTo(this@module.log)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .build()\n        .start(10, TimeUnit.SECONDS)\n}\n```\n\nYou can find the full example here: [dropwizard-metrics](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/dropwizard-metrics).\n\nIf you run the application and open [http://0.0.0.0:8080](http://0.0.0.0:8080/), the output will look like this:\n```\n[DefaultDispatcher-worker-1] INFO  Application - Responding at http://0.0.0.0:8080\n... type=COUNTER, name=ktor.calls.active, count=0\n... type=METER, name=ktor.calls./(method:GET).200, count=6, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.98655785084844, rate_unit=events/second\n... type=METER, name=ktor.calls./(method:GET).meter, count=6, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.9841134429134598, rate_unit=events/second\n... type=METER, name=ktor.calls.exceptions, count=0, m1_rate=0.0, m5_rate=0.0, m15_rate=0.0, mean_rate=0.0, rate_unit=events/second\n... type=METER, name=ktor.calls.status.200, count=6, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.9866015088545449, rate_unit=events/second\n... type=TIMER, name=ktor.calls./(method:GET).timer, count=6, min=0.359683, max=14.213046, mean=2.691307542732234, stddev=5.099546889849414, p50=0.400967, p75=0.618972, p95=14.213046, p98=14.213046, p99=14.213046, p999=14.213046, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.9830677128229028, rate_unit=events/second, duration_unit=milliseconds\n... type=TIMER, name=ktor.calls.duration, count=6, min=0.732149, max=33.735719, mean=6.238046092985701, stddev=12.169258340009847, p50=0.778864, p75=1.050454, p95=33.735719, p98=33.735719, p99=33.735719, p999=33.735719, m1_rate=0.2, m5_rate=0.2, m15_rate=0.2, mean_rate=0.6040311229887146, rate_unit=events/second, duration_unit=milliseconds\n```\n\n### JMX reporter\nThe JMX reporter allows you to expose all the metrics to JMX, allowing you to view those metrics using `jconsole`.\n```\ninstall(DropwizardMetrics) {\n    JmxReporter.forRegistry(registry)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .build()\n        .start()\n}\n```\n\nYou can find the full example here: [dropwizard-metrics](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/dropwizard-metrics).\n\nIf you run the application and connect to its process using the [JConsole](https://docs.oracle.com/en/java/javase/17/management/using-jconsole.html), metrics will look like this:\n![Ktor Metrics: JMX](https://ktor.io/docs/images/jmx.png)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-dropwizard.html", "title": "Server Plugin Dropwizard metrics", "description": "This page covers the DropwizardMetrics plugin for Ktor, detailing how to add dependencies, install the plugin, configure it, and the metrics it exposes.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:57", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.172264202", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Dropwizard metrics | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "og:title": "Dropwizard metrics | Ktor", "title": "Dropwizard metrics | Ktor Documentation", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "build-number": "707", "ogTitle": "Dropwizard metrics | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "scrapeId": "29d70a4e-af68-44b5-b0aa-1d036aa3970b", "sourceURL": "https://ktor.io/docs/server-metrics-dropwizard.html", "url": "https://ktor.io/docs/server-metrics-dropwizard.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo enable `DropwizardMetrics`, you need to include the following artifacts in the build script:\n\n- Add the `ktor-server-metrics` dependency:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-metrics:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-metrics:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-metrics-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Optionally, add a dependency required for a specific reporter. The example below shows how to add an artifact required to report metrics via JMX:\n\nGradle (Kotlin)\n```\nimplementation(\"io.dropwizard.metrics:metrics-jmx:$dropwizard_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.dropwizard.metrics:metrics-jmx:$dropwizard_version\"\n```\n\nMaven\n```\n<dependency>\n      <groupId>io.dropwizard.metrics</groupId>\n      <artifactId>metrics-jmx</artifactId>\n      <version>${dropwizard_version}</version>\n</dependency>\n```\n\nYou can replace `$dropwizard_version` with the required version of the `metrics-jmx` artifact, for example, `4.2.15`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-dropwizard.html", "title": "Server Plugin Dropwizard metrics", "description": "This page covers the DropwizardMetrics plugin for Ktor, detailing how to add dependencies, install the plugin, configure it, and the metrics it exposes.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.172264202", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Dropwizard metrics | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "og:title": "Dropwizard metrics | Ktor", "title": "Dropwizard metrics | Ktor Documentation", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "build-number": "707", "ogTitle": "Dropwizard metrics | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "scrapeId": "29d70a4e-af68-44b5-b0aa-1d036aa3970b", "sourceURL": "https://ktor.io/docs/server-metrics-dropwizard.html", "url": "https://ktor.io/docs/server-metrics-dropwizard.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install dropwizardmetrics in ktor?\n\nAssistant: To install dropwizardmetrics in ktor, here's what you do:\nTo [install](https://ktor.io/docs/server-plugins.html#install) the `DropwizardMetrics` plugin to the application, pass it to the `install` function in the specified [module](https://ktor.io/docs/server-modules.html). The code snippets below show how to install `DropwizardMetrics`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.metrics.dropwizard.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DropwizardMetrics)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.metrics.dropwizard.*\n// ...\nfun Application.module() {\n    install(DropwizardMetrics)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-dropwizard.html", "title": "Server Plugin Dropwizard metrics", "description": "This page covers the DropwizardMetrics plugin for Ktor, detailing how to add dependencies, install the plugin, configure it, and the metrics it exposes.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.172264202", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Dropwizard metrics | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "og:title": "Dropwizard metrics | Ktor", "title": "Dropwizard metrics | Ktor Documentation", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "build-number": "707", "ogTitle": "Dropwizard metrics | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "scrapeId": "29d70a4e-af68-44b5-b0aa-1d036aa3970b", "sourceURL": "https://ktor.io/docs/server-metrics-dropwizard.html", "url": "https://ktor.io/docs/server-metrics-dropwizard.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure dropwizardmetrics in ktor?\n\nAssistant: To configure dropwizardmetrics in ktor, here's what you do:\n`DropwizardMetrics` allows you to use any supported [Metric reporter](http://metrics.dropwizard.io/) using the `registry` property. Let's take a look at how to configure the SLF4J and JMX reporters.\n\n### SLF4J reporter\nThe SLF4J reporter allows you to periodically emit reports to any output supported by SLF4J. For example, to output the metrics every 10 seconds, you would:\n```\ninstall(DropwizardMetrics) {\n    Slf4jReporter.forRegistry(registry)\n        .outputTo(this@module.log)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .build()\n        .start(10, TimeUnit.SECONDS)\n}\n```\n\nYou can find the full example here: [dropwizard-metrics](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/dropwizard-metrics).\n\nIf you run the application and open [http://0.0.0.0:8080](http://0.0.0.0:8080/), the output will look like this:\n```\n[DefaultDispatcher-worker-1] INFO  Application - Responding at http://0.0.0.0:8080\n... type=COUNTER, name=ktor.calls.active, count=0\n... type=METER, name=ktor.calls./(method:GET).200, count=6, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.98655785084844, rate_unit=events/second\n... type=METER, name=ktor.calls./(method:GET).meter, count=6, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.9841134429134598, rate_unit=events/second\n... type=METER, name=ktor.calls.exceptions, count=0, m1_rate=0.0, m5_rate=0.0, m15_rate=0.0, mean_rate=0.0, rate_unit=events/second\n... type=METER, name=ktor.calls.status.200, count=6, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.9866015088545449, rate_unit=events/second\n... type=TIMER, name=ktor.calls./(method:GET).timer, count=6, min=0.359683, max=14.213046, mean=2.691307542732234, stddev=5.099546889849414, p50=0.400967, p75=0.618972, p95=14.213046, p98=14.213046, p99=14.213046, p999=14.213046, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.9830677128229028, rate_unit=events/second, duration_unit=milliseconds\n... type=TIMER, name=ktor.calls.duration, count=6, min=0.732149, max=33.735719, mean=6.238046092985701, stddev=12.169258340009847, p50=0.778864, p75=1.050454, p95=33.735719, p98=33.735719, p99=33.735719, p999=33.735719, m1_rate=0.2, m5_rate=0.2, m15_rate=0.2, mean_rate=0.6040311229887146, rate_unit=events/second, duration_unit=milliseconds\n```\n\n### JMX reporter\nThe JMX reporter allows you to expose all the metrics to JMX, allowing you to view those metrics using `jconsole`.\n```\ninstall(DropwizardMetrics) {\n    JmxReporter.forRegistry(registry)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .build()\n        .start()\n}\n```\n\nYou can find the full example here: [dropwizard-metrics](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/dropwizard-metrics).\n\nIf you run the application and connect to its process using the [JConsole](https://docs.oracle.com/en/java/javase/17/management/using-jconsole.html), metrics will look like this:\n![Ktor Metrics: JMX](https://ktor.io/docs/images/jmx.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-dropwizard.html", "title": "Server Plugin Dropwizard metrics", "description": "This page covers the DropwizardMetrics plugin for Ktor, detailing how to add dependencies, install the plugin, configure it, and the metrics it exposes.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:57", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.172264202", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Dropwizard metrics | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "og:title": "Dropwizard metrics | Ktor", "title": "Dropwizard metrics | Ktor Documentation", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "build-number": "707", "ogTitle": "Dropwizard metrics | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "scrapeId": "29d70a4e-af68-44b5-b0aa-1d036aa3970b", "sourceURL": "https://ktor.io/docs/server-metrics-dropwizard.html", "url": "https://ktor.io/docs/server-metrics-dropwizard.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Dropwizard metrics in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add ktor-server-metrics dependency**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-metrics:$ktor_version\")\n```\n\nThis snippet shows you how to add ktor-server-metrics dependency, which is an important aspect of server plugin dropwizard metrics.\n\n**Add ktor-server-metrics dependency (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-metrics:$ktor_version\"\n```\n\nThis snippet shows you how to add ktor-server-metrics dependency (groovy), which is an important aspect of server plugin dropwizard metrics.\n\n**Add ktor-server-metrics dependency (Maven)**:\n\n```yaml\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-metrics-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add ktor-server-metrics dependency (maven), which is an important aspect of server plugin dropwizard metrics.\n\n**Add metrics-jmx dependency (Kotlin)**:\n\n```yaml\nimplementation(\"io.dropwizard.metrics:metrics-jmx:$dropwizard_version\")\n```\n\nThis snippet shows you how to add metrics-jmx dependency (kotlin), which is an important aspect of server plugin dropwizard metrics.\n\n**Add metrics-jmx dependency (Groovy)**:\n\n```yaml\nimplementation \"io.dropwizard.metrics:metrics-jmx:$dropwizard_version\"\n```\n\nThis snippet shows you how to add metrics-jmx dependency (groovy), which is an important aspect of server plugin dropwizard metrics.\n\n**Add metrics-jmx dependency (Maven)**:\n\n```yaml\n<dependency>\n      <groupId>io.dropwizard.metrics</groupId>\n      <artifactId>metrics-jmx</artifactId>\n      <version>${dropwizard_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add metrics-jmx dependency (maven), which is an important aspect of server plugin dropwizard metrics.\n\n**Install DropwizardMetrics in embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.metrics.dropwizard.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DropwizardMetrics)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install dropwizardmetrics in embeddedserver, which is an important aspect of server plugin dropwizard metrics.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-dropwizard.html", "title": "Server Plugin Dropwizard metrics", "description": "This page covers the DropwizardMetrics plugin for Ktor, detailing how to add dependencies, install the plugin, configure it, and the metrics it exposes.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:57", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.172264202", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Dropwizard metrics | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "og:title": "Dropwizard metrics | Ktor", "title": "Dropwizard metrics | Ktor Documentation", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "build-number": "707", "ogTitle": "Dropwizard metrics | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "scrapeId": "29d70a4e-af68-44b5-b0aa-1d036aa3970b", "sourceURL": "https://ktor.io/docs/server-metrics-dropwizard.html", "url": "https://ktor.io/docs/server-metrics-dropwizard.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Dropwizard metrics in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can replace `$dropwizard_version` with the required version of the `metrics-jmx` artifact, for example, `4.2.15`.\n\nYou can customize the metric name using the `baseName` property: `install(DropwizardMetrics) { baseName = \"my.prefix\" }`\n\nYou can disable JVM metrics using the `registerJvmMetricSets` property: `install(DropwizardMetrics) { registerJvmMetricSets = false }`\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-dropwizard.html", "title": "Server Plugin Dropwizard metrics", "description": "This page covers the DropwizardMetrics plugin for Ktor, detailing how to add dependencies, install the plugin, configure it, and the metrics it exposes.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:04:57", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:03.172264202", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Dropwizard metrics | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-dropwizard.html", "og:title": "Dropwizard metrics | Ktor", "title": "Dropwizard metrics | Ktor Documentation", "og:site_name": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "build-number": "707", "ogTitle": "Dropwizard metrics | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "scrapeId": "29d70a4e-af68-44b5-b0aa-1d036aa3970b", "sourceURL": "https://ktor.io/docs/server-metrics-dropwizard.html", "url": "https://ktor.io/docs/server-metrics-dropwizard.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Caching headers is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Caching headers in ktor.\n\n# Server Plugin Caching headers\n\nThis page covers the CachingHeaders plugin in Ktor, which allows configuring Cache-Control and Expires headers for HTTP caching.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `CachingHeaders`, you need to include the `ktor-server-caching-headers` artifact in the build script:\n\nGradle (Kotlin)\n\nGradle (Groovy)\n\nMaven\n\n```\nimplementation(\"io.ktor:ktor-server-caching-headers:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-server-caching-headers:$ktor_version\"\n```\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-caching-headers-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install CachingHeaders\n\nTo [install](https://ktor.io/docs/server-plugins.html#install) the `CachingHeaders` plugin to the application, pass it to the `install` function in the specified [module](https://ktor.io/docs/server-modules.html). The code snippets below show how to install `CachingHeaders`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cachingheaders.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CachingHeaders)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cachingheaders.*\n// ...\nfun Application.module() {\n    install(CachingHeaders)\n    // ...\n}\n```\n\nThe `CachingHeaders` plugin can also be [installed to specific routes](https://ktor.io/docs/server-plugins.html#install-route). This might be useful if you need different `CachingHeaders` configurations for different application resources.\n\nAfter installing `CachingHeaders`, you can [configure](https://ktor.io/docs/server-caching-headers.html#configure) caching settings for various content types.\n\n## Configure caching\n\nTo configure the `CachingHeaders` plugin, you need to define the [options](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-caching-headers/io.ktor.server.plugins.cachingheaders/-caching-headers-config/options.html) function to provide specified caching options for a given `ApplicationCall` and content type. The code snippet from the [caching-headers](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/caching-headers) example shows how to add the `Cache-Control` header with the `max-age` option for a plain text and HTML:\n\n```\nfun Application.module() {\n    routing {\n        install(CachingHeaders) {\n            options { call, content ->\n                when (content.contentType?.withoutParameters()) {\n                    ContentType.Text.Plain -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 3600))\n                    ContentType.Text.Html -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 60))\n                    else -> null\n                }\n            }\n        }\n    }\n}\n```\n\nThe [CachingOptions](https://api.ktor.io/ktor-http/io.ktor.http.content/-caching-options/index.html) object accepts `Cache-Control` and `Expires` header values as parameters:\n\n- The `cacheControl` parameter accepts a [CacheControl](https://api.ktor.io/ktor-http/io.ktor.http/-cache-control/index.html) value. You can use `CacheControl.MaxAge` to specify the `max-age` parameter and related settings, such as visibility, revalidation options, and so on. You can disable caching by using `CacheControl.NoCache`/ `CacheControl.NoStore`.\n\n- The `expires` parameter allows you to specify the `Expires` header as a `GMTDate` or `ZonedDateTime` value.\n\n## Route level\n\nYou can install plugins not only globally but also to [specific routes](https://ktor.io/docs/server-plugins.html#install-route). For instance, the example below shows how to add the specified caching header for the `/index` route:\n\n```\nroute(\"/index\") {\n    install(CachingHeaders) {\n        options { call, content -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 1800)) }\n    }\n    get {\n        call.respondText(\"Index page\")\n    }\n}\n```\n\n## Call level\n\nIf you need more fine-grained caching setup, you can configure caching options on a call level using the `ApplicationCall.caching` property. The example below shows how to configure caching options depending on whether a user is logged in or not:\n\n```\nroute(\"/profile\") {\n    get {\n        val userLoggedIn = true\n        if(userLoggedIn) {\n            call.caching = CachingOptions(CacheControl.NoStore(CacheControl.Visibility.Private))\n            call.respondText(\"Profile page\")\n        } else {\n            call.caching = CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 900))\n            call.respondText(\"Login page\")\n        }\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-caching-headers.html", "title": "Server Plugin Caching headers", "description": "This page covers the CachingHeaders plugin in Ktor, which allows configuring Cache-Control and Expires headers for HTTP caching.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:09:44", "type": "overview", "page_metadata": {"title": "Caching headers | Ktor Documentation", "built-on": "2025-02-26T14:01:04.997020362", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Caching headers | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "twitter:card": "summary_large_image", "twitter:title": "Caching headers | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogTitle": "Caching headers | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:description": "", "og:type": "website", "scrapeId": "6560f432-91eb-4196-b115-75d71e973ac9", "sourceURL": "https://ktor.io/docs/server-caching-headers.html", "url": "https://ktor.io/docs/server-caching-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `CachingHeaders`, you need to include the `ktor-server-caching-headers` artifact in the build script:\n\nGradle (Kotlin)\n\nGradle (Groovy)\n\nMaven\n\n```\nimplementation(\"io.ktor:ktor-server-caching-headers:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-server-caching-headers:$ktor_version\"\n```\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-caching-headers-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-caching-headers.html", "title": "Server Plugin Caching headers", "description": "This page covers the CachingHeaders plugin in Ktor, which allows configuring Cache-Control and Expires headers for HTTP caching.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:09:44", "type": "section_detail", "page_metadata": {"title": "Caching headers | Ktor Documentation", "built-on": "2025-02-26T14:01:04.997020362", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Caching headers | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "twitter:card": "summary_large_image", "twitter:title": "Caching headers | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogTitle": "Caching headers | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:description": "", "og:type": "website", "scrapeId": "6560f432-91eb-4196-b115-75d71e973ac9", "sourceURL": "https://ktor.io/docs/server-caching-headers.html", "url": "https://ktor.io/docs/server-caching-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install cachingheaders in ktor?\n\nAssistant: To install cachingheaders in ktor, here's what you do:\nTo [install](https://ktor.io/docs/server-plugins.html#install) the `CachingHeaders` plugin to the application, pass it to the `install` function in the specified [module](https://ktor.io/docs/server-modules.html). The code snippets below show how to install `CachingHeaders`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cachingheaders.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CachingHeaders)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cachingheaders.*\n// ...\nfun Application.module() {\n    install(CachingHeaders)\n    // ...\n}\n```\n\nThe `CachingHeaders` plugin can also be [installed to specific routes](https://ktor.io/docs/server-plugins.html#install-route). This might be useful if you need different `CachingHeaders` configurations for different application resources.\n\nAfter installing `CachingHeaders`, you can [configure](https://ktor.io/docs/server-caching-headers.html#configure) caching settings for various content types..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-caching-headers.html", "title": "Server Plugin Caching headers", "description": "This page covers the CachingHeaders plugin in Ktor, which allows configuring Cache-Control and Expires headers for HTTP caching.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:09:44", "type": "section_detail", "page_metadata": {"title": "Caching headers | Ktor Documentation", "built-on": "2025-02-26T14:01:04.997020362", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Caching headers | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "twitter:card": "summary_large_image", "twitter:title": "Caching headers | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogTitle": "Caching headers | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:description": "", "og:type": "website", "scrapeId": "6560f432-91eb-4196-b115-75d71e973ac9", "sourceURL": "https://ktor.io/docs/server-caching-headers.html", "url": "https://ktor.io/docs/server-caching-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure caching in ktor?\n\nAssistant: To configure caching in ktor, here's what you do:\nTo configure the `CachingHeaders` plugin, you need to define the [options](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-caching-headers/io.ktor.server.plugins.cachingheaders/-caching-headers-config/options.html) function to provide specified caching options for a given `ApplicationCall` and content type. The code snippet from the [caching-headers](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/caching-headers) example shows how to add the `Cache-Control` header with the `max-age` option for a plain text and HTML:\n\n```\nfun Application.module() {\n    routing {\n        install(CachingHeaders) {\n            options { call, content ->\n                when (content.contentType?.withoutParameters()) {\n                    ContentType.Text.Plain -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 3600))\n                    ContentType.Text.Html -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 60))\n                    else -> null\n                }\n            }\n        }\n    }\n}\n```\n\nThe [CachingOptions](https://api.ktor.io/ktor-http/io.ktor.http.content/-caching-options/index.html) object accepts `Cache-Control` and `Expires` header values as parameters:\n\n- The `cacheControl` parameter accepts a [CacheControl](https://api.ktor.io/ktor-http/io.ktor.http/-cache-control/index.html) value. You can use `CacheControl.MaxAge` to specify the `max-age` parameter and related settings, such as visibility, revalidation options, and so on. You can disable caching by using `CacheControl.NoCache`/ `CacheControl.NoStore`.\n\n- The `expires` parameter allows you to specify the `Expires` header as a `GMTDate` or `ZonedDateTime` value..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-caching-headers.html", "title": "Server Plugin Caching headers", "description": "This page covers the CachingHeaders plugin in Ktor, which allows configuring Cache-Control and Expires headers for HTTP caching.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:09:44", "type": "section_detail", "page_metadata": {"title": "Caching headers | Ktor Documentation", "built-on": "2025-02-26T14:01:04.997020362", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Caching headers | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "twitter:card": "summary_large_image", "twitter:title": "Caching headers | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogTitle": "Caching headers | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:description": "", "og:type": "website", "scrapeId": "6560f432-91eb-4196-b115-75d71e973ac9", "sourceURL": "https://ktor.io/docs/server-caching-headers.html", "url": "https://ktor.io/docs/server-caching-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I route level in ktor?\n\nAssistant: To route level in ktor, here's what you do:\nYou can install plugins not only globally but also to [specific routes](https://ktor.io/docs/server-plugins.html#install-route). For instance, the example below shows how to add the specified caching header for the `/index` route:\n\n```\nroute(\"/index\") {\n    install(CachingHeaders) {\n        options { call, content -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 1800)) }\n    }\n    get {\n        call.respondText(\"Index page\")\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-caching-headers.html", "title": "Server Plugin Caching headers", "description": "This page covers the CachingHeaders plugin in Ktor, which allows configuring Cache-Control and Expires headers for HTTP caching.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:09:44", "type": "section_detail", "page_metadata": {"title": "Caching headers | Ktor Documentation", "built-on": "2025-02-26T14:01:04.997020362", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Caching headers | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "twitter:card": "summary_large_image", "twitter:title": "Caching headers | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogTitle": "Caching headers | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:description": "", "og:type": "website", "scrapeId": "6560f432-91eb-4196-b115-75d71e973ac9", "sourceURL": "https://ktor.io/docs/server-caching-headers.html", "url": "https://ktor.io/docs/server-caching-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I call level in ktor?\n\nAssistant: To call level in ktor, here's what you do:\nIf you need more fine-grained caching setup, you can configure caching options on a call level using the `ApplicationCall.caching` property. The example below shows how to configure caching options depending on whether a user is logged in or not:\n\n```\nroute(\"/profile\") {\n    get {\n        val userLoggedIn = true\n        if(userLoggedIn) {\n            call.caching = CachingOptions(CacheControl.NoStore(CacheControl.Visibility.Private))\n            call.respondText(\"Profile page\")\n        } else {\n            call.caching = CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 900))\n            call.respondText(\"Login page\")\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-caching-headers.html", "title": "Server Plugin Caching headers", "description": "This page covers the CachingHeaders plugin in Ktor, which allows configuring Cache-Control and Expires headers for HTTP caching.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:09:44", "type": "section_detail", "page_metadata": {"title": "Caching headers | Ktor Documentation", "built-on": "2025-02-26T14:01:04.997020362", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Caching headers | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "twitter:card": "summary_large_image", "twitter:title": "Caching headers | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogTitle": "Caching headers | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:description": "", "og:type": "website", "scrapeId": "6560f432-91eb-4196-b115-75d71e973ac9", "sourceURL": "https://ktor.io/docs/server-caching-headers.html", "url": "https://ktor.io/docs/server-caching-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Caching headers in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-caching-headers:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies - gradle (kotlin), which is an important aspect of server plugin caching headers.\n\n**Add dependencies - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-caching-headers:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies - gradle (groovy), which is an important aspect of server plugin caching headers.\n\n**Add dependencies - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-caching-headers-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies - maven, which is an important aspect of server plugin caching headers.\n\n**Install CachingHeaders - embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.cachingheaders.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CachingHeaders)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install cachingheaders - embeddedserver, which is an important aspect of server plugin caching headers.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-caching-headers.html", "title": "Server Plugin Caching headers", "description": "This page covers the CachingHeaders plugin in Ktor, which allows configuring Cache-Control and Expires headers for HTTP caching.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:09:44", "type": "code_examples", "page_metadata": {"title": "Caching headers | Ktor Documentation", "built-on": "2025-02-26T14:01:04.997020362", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Caching headers | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "twitter:card": "summary_large_image", "twitter:title": "Caching headers | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogTitle": "Caching headers | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:description": "", "og:type": "website", "scrapeId": "6560f432-91eb-4196-b115-75d71e973ac9", "sourceURL": "https://ktor.io/docs/server-caching-headers.html", "url": "https://ktor.io/docs/server-caching-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Caching headers in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor logging in users, you can use the [Authentication](https://ktor.io/docs/server-auth.html) and [Sessions](https://ktor.io/docs/server-sessions.html) plugins.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-caching-headers.html", "title": "Server Plugin Caching headers", "description": "This page covers the CachingHeaders plugin in Ktor, which allows configuring Cache-Control and Expires headers for HTTP caching.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:09:44", "type": "best_practices", "page_metadata": {"title": "Caching headers | Ktor Documentation", "built-on": "2025-02-26T14:01:04.997020362", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:locale": "en_US", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Caching headers | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-caching-headers.html", "twitter:card": "summary_large_image", "twitter:title": "Caching headers | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogTitle": "Caching headers | Ktor", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:description": "", "og:type": "website", "scrapeId": "6560f432-91eb-4196-b115-75d71e973ac9", "sourceURL": "https://ktor.io/docs/server-caching-headers.html", "url": "https://ktor.io/docs/server-caching-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what HTML DSL is in ktor?\n\nAssistant: Sure, I'd be happy to explain HTML DSL in ktor.\n\n# HTML DSL\n\nHTML DSL integrates the kotlinx.html library into Ktor and allows you to respond to a client with HTML blocks. With HTML DSL, you can write pure HTML in Kotlin, interpolate variables into views, and even build complex HTML layouts using templates.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nHTML DSL doesn't need installation but requires the `ktor-server-html-builder` artifact. You can include it in the build script as follows:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-html-builder:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-html-builder:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-html-builder-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Send HTML in response\n\nTo send an HTML response, call the respondHtml method inside the required route. The example below shows a sample HTML DSL and a corresponding HTML to be sent to the client:\n\nKotlin\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.html.*\nimport io.ktor.http.*\nimport io.ktor.server.routing.*\nimport kotlinx.html.*\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            val name = \"Ktor\"\n            call.respondHtml(HttpStatusCode.OK) {\n                head {\n                    title {\n                        +name\n                    }\n                }\n                body {\n                    h1 {\n                        +\"Hello from $name!\"\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nHTML\n\n```\n<html>\n<head>\n    <title>Ktor</title>\n</head>\n<body>\n<h1>Hello from Ktor!</h1>\n</body>\n</html>\n```\n\nThe following example shows how to respond with an HTML form used to collect credential information from a user:\n\nKotlin\n\n```\nget(\"/login\") {\n    call.respondHtml {\n        body {\n            form(action = \"/login\", encType = FormEncType.applicationXWwwFormUrlEncoded, method = FormMethod.post) {\n                p {\n                    +\"Username:\"\n                    textInput(name = \"username\")\n                }\n                p {\n                    +\"Password:\"\n                    passwordInput(name = \"password\")\n                }\n                p {\n                    submitInput() { value = \"Login\" }\n                }\n            }\n        }\n    }\n}\n```\n\nHTML\n\n```\n<html>\n<body>\n<form action=\"/login\" enctype=\"application/x-www-form-urlencoded\" method=\"post\">\n    <p>Username:<input type=\"text\" name=\"username\"></p>\n    <p>Password:<input type=\"password\" name=\"password\"></p>\n    <p><input type=\"submit\" value=\"Login\"></p>\n</form>\n</body>\n</html>\n```\n\n## Templates\n\nIn addition to generating plain HTML, Ktor provides a template engine that can be used to build complex layouts. You can create a hierarchy of templates for different parts of an HTML page, for example, a root template for the entire page, child templates for a page header and footer, and so on. Ktor exposes the following API for working with templates:\n\n1. To respond with an HTML built based on a specified template, call the respondHtmlTemplate method.\n2. To create a template, you need to implement the Template interface and override the Template.apply method providing HTML.\n3. Inside a created template class, you can define placeholders for different content types:\n   - Placeholder is used to insert the content. PlaceholderList can be used to insert the content that appears multiple times (for example, list items).\n   - TemplatePlaceholder can be used to insert child templates and create nested layouts.\n\n## Example\n\nLet's see an example of how to create a hierarchical layout using templates. Imagine we have the following HTML:\n\n```\n<body>\n<h1>Ktor</h1>\n<article>\n    <h2>Hello from Ktor!</h2>\n    <p>Kotlin Framework for creating connected systems.</p>\n    <ul>\n       <li><b>One</b></li>\n       <li>Two</li>\n    </ul>\n</article>\n</body>\n```\n\nWe can split the layout of this page into two parts:\n\n- A root layout template for a page header and a child template for an article.\n- A child template for the article content.\n\nLet's implement these layouts step-by-step:\n\n1. Call the respondHtmlTemplate method and pass a template class as a parameter. In our case, this is the LayoutTemplate class that should implement the Template interface:\n\n```\nget(\"/\") {\n       call.respondHtmlTemplate(LayoutTemplate()) {\n           // ...\n       }\n}\n```\n\n2. A root layout template will look in the following way:\n\n```\nclass LayoutTemplate: Template<HTML> {\n       val header = Placeholder<FlowContent>()\n       val content = TemplatePlaceholder<ArticleTemplate>()\n       override fun HTML.apply() {\n           body {\n               h1 {\n                   insert(header)\n               }\n               insert(ArticleTemplate(), content)\n           }\n       }\n}\n```\n\n3. A child template will look as follows:\n\n```\nclass ArticleTemplate : Template<FlowContent> {\n       val articleTitle = Placeholder<FlowContent>()\n       val articleText = Placeholder<FlowContent>()\n       val list = TemplatePlaceholder<ListTemplate>()\n       override fun FlowContent.apply() {\n           article {\n               h2 {\n                   insert(articleTitle)\n               }\n               p {\n                   insert(articleText)\n               }\n               insert(ListTemplate(), list)\n           }\n       }\n}\n```\n\n4. To provide a list of values as the template, create the following new class:\n\n```\nclass ListTemplate : Template<FlowContent> {\n       val item = PlaceholderList<UL, FlowContent>()\n       override fun FlowContent.apply() {\n           if (!item.isEmpty()) {\n               ul {\n                   each(item) {\n                       li {\n                           if (it.first) {\n                               b {\n                                   insert(it)\n                               }\n                           } else {\n                               insert(it)\n                           }\n                       }\n                   }\n               }\n           }\n       }\n}\n```\n\n5. Now we are ready to send HTML built using the specified property values:\n\n```\nget(\"/\") {\n       call.respondHtmlTemplate(LayoutTemplate()) {\n           header {\n               +\"Ktor\"\n           }\n           content {\n               articleTitle {\n                   +\"Hello from Ktor!\"\n               }\n               articleText {\n                   +\"Kotlin Framework for creating connected systems.\"\n               }\n               list {\n                   item { +\"One\" }\n                   item { +\"Two\" }\n               }\n           }\n       }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-html-dsl.html", "title": "HTML DSL", "description": "HTML DSL integrates the kotlinx.html library into Ktor and allows you to respond to a client with HTML blocks. With HTML DSL, you can write pure HTML in Kotlin, interpolate variables into views, and even build complex HTML layouts using templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:10:18", "type": "overview", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "language": "en-US", "ogTitle": "HTML DSL | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "og:title": "HTML DSL | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "HTML DSL | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:02.186924239", "twitter:title": "HTML DSL | Ktor", "og:locale": "en_US", "ogLocale": "en_US", "scrapeId": "7f264a81-7730-45fa-b97b-f3de09d8e88b", "sourceURL": "https://ktor.io/docs/server-html-dsl.html", "url": "https://ktor.io/docs/server-html-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nHTML DSL doesn't need installation but requires the `ktor-server-html-builder` artifact. You can include it in the build script as follows:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-html-builder:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-html-builder:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-html-builder-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-html-dsl.html", "title": "HTML DSL", "description": "HTML DSL integrates the kotlinx.html library into Ktor and allows you to respond to a client with HTML blocks. With HTML DSL, you can write pure HTML in Kotlin, interpolate variables into views, and even build complex HTML layouts using templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:10:18", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "language": "en-US", "ogTitle": "HTML DSL | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "og:title": "HTML DSL | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "HTML DSL | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:02.186924239", "twitter:title": "HTML DSL | Ktor", "og:locale": "en_US", "ogLocale": "en_US", "scrapeId": "7f264a81-7730-45fa-b97b-f3de09d8e88b", "sourceURL": "https://ktor.io/docs/server-html-dsl.html", "url": "https://ktor.io/docs/server-html-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I send html in response in ktor?\n\nAssistant: To send html in response in ktor, here's what you do:\nTo send an HTML response, call the respondHtml method inside the required route. The example below shows a sample HTML DSL and a corresponding HTML to be sent to the client:\n\nKotlin\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.html.*\nimport io.ktor.http.*\nimport io.ktor.server.routing.*\nimport kotlinx.html.*\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            val name = \"Ktor\"\n            call.respondHtml(HttpStatusCode.OK) {\n                head {\n                    title {\n                        +name\n                    }\n                }\n                body {\n                    h1 {\n                        +\"Hello from $name!\"\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nHTML\n\n```\n<html>\n<head>\n    <title>Ktor</title>\n</head>\n<body>\n<h1>Hello from Ktor!</h1>\n</body>\n</html>\n```\n\nThe following example shows how to respond with an HTML form used to collect credential information from a user:\n\nKotlin\n\n```\nget(\"/login\") {\n    call.respondHtml {\n        body {\n            form(action = \"/login\", encType = FormEncType.applicationXWwwFormUrlEncoded, method = FormMethod.post) {\n                p {\n                    +\"Username:\"\n                    textInput(name = \"username\")\n                }\n                p {\n                    +\"Password:\"\n                    passwordInput(name = \"password\")\n                }\n                p {\n                    submitInput() { value = \"Login\" }\n                }\n            }\n        }\n    }\n}\n```\n\nHTML\n\n```\n<html>\n<body>\n<form action=\"/login\" enctype=\"application/x-www-form-urlencoded\" method=\"post\">\n    <p>Username:<input type=\"text\" name=\"username\"></p>\n    <p>Password:<input type=\"password\" name=\"password\"></p>\n    <p><input type=\"submit\" value=\"Login\"></p>\n</form>\n</body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-html-dsl.html", "title": "HTML DSL", "description": "HTML DSL integrates the kotlinx.html library into Ktor and allows you to respond to a client with HTML blocks. With HTML DSL, you can write pure HTML in Kotlin, interpolate variables into views, and even build complex HTML layouts using templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:10:18", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "language": "en-US", "ogTitle": "HTML DSL | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "og:title": "HTML DSL | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "HTML DSL | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:02.186924239", "twitter:title": "HTML DSL | Ktor", "og:locale": "en_US", "ogLocale": "en_US", "scrapeId": "7f264a81-7730-45fa-b97b-f3de09d8e88b", "sourceURL": "https://ktor.io/docs/server-html-dsl.html", "url": "https://ktor.io/docs/server-html-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I templates in ktor?\n\nAssistant: To templates in ktor, here's what you do:\nIn addition to generating plain HTML, Ktor provides a template engine that can be used to build complex layouts. You can create a hierarchy of templates for different parts of an HTML page, for example, a root template for the entire page, child templates for a page header and footer, and so on. Ktor exposes the following API for working with templates:\n\n1. To respond with an HTML built based on a specified template, call the respondHtmlTemplate method.\n2. To create a template, you need to implement the Template interface and override the Template.apply method providing HTML.\n3. Inside a created template class, you can define placeholders for different content types:\n   - Placeholder is used to insert the content. PlaceholderList can be used to insert the content that appears multiple times (for example, list items).\n   - TemplatePlaceholder can be used to insert child templates and create nested layouts..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-html-dsl.html", "title": "HTML DSL", "description": "HTML DSL integrates the kotlinx.html library into Ktor and allows you to respond to a client with HTML blocks. With HTML DSL, you can write pure HTML in Kotlin, interpolate variables into views, and even build complex HTML layouts using templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:10:18", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "language": "en-US", "ogTitle": "HTML DSL | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "og:title": "HTML DSL | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "HTML DSL | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:02.186924239", "twitter:title": "HTML DSL | Ktor", "og:locale": "en_US", "ogLocale": "en_US", "scrapeId": "7f264a81-7730-45fa-b97b-f3de09d8e88b", "sourceURL": "https://ktor.io/docs/server-html-dsl.html", "url": "https://ktor.io/docs/server-html-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example in ktor?\n\nAssistant: To example in ktor, here's what you do:\nLet's see an example of how to create a hierarchical layout using templates. Imagine we have the following HTML:\n\n```\n<body>\n<h1>Ktor</h1>\n<article>\n    <h2>Hello from Ktor!</h2>\n    <p>Kotlin Framework for creating connected systems.</p>\n    <ul>\n       <li><b>One</b></li>\n       <li>Two</li>\n    </ul>\n</article>\n</body>\n```\n\nWe can split the layout of this page into two parts:\n\n- A root layout template for a page header and a child template for an article.\n- A child template for the article content.\n\nLet's implement these layouts step-by-step:\n\n1. Call the respondHtmlTemplate method and pass a template class as a parameter. In our case, this is the LayoutTemplate class that should implement the Template interface:\n\n```\nget(\"/\") {\n       call.respondHtmlTemplate(LayoutTemplate()) {\n           // ...\n       }\n}\n```\n\n2. A root layout template will look in the following way:\n\n```\nclass LayoutTemplate: Template<HTML> {\n       val header = Placeholder<FlowContent>()\n       val content = TemplatePlaceholder<ArticleTemplate>()\n       override fun HTML.apply() {\n           body {\n               h1 {\n                   insert(header)\n               }\n               insert(ArticleTemplate(), content)\n           }\n       }\n}\n```\n\n3. A child template will look as follows:\n\n```\nclass ArticleTemplate : Template<FlowContent> {\n       val articleTitle = Placeholder<FlowContent>()\n       val articleText = Placeholder<FlowContent>()\n       val list = TemplatePlaceholder<ListTemplate>()\n       override fun FlowContent.apply() {\n           article {\n               h2 {\n                   insert(articleTitle)\n               }\n               p {\n                   insert(articleText)\n               }\n               insert(ListTemplate(), list)\n           }\n       }\n}\n```\n\n4. To provide a list of values as the template, create the following new class:\n\n```\nclass ListTemplate : Template<FlowContent> {\n       val item = PlaceholderList<UL, FlowContent>()\n       override fun FlowContent.apply() {\n           if (!item.isEmpty()) {\n               ul {\n                   each(item) {\n                       li {\n                           if (it.first) {\n                               b {\n                                   insert(it)\n                               }\n                           } else {\n                               insert(it)\n                           }\n                       }\n                   }\n               }\n           }\n       }\n}\n```\n\n5. Now we are ready to send HTML built using the specified property values:\n\n```\nget(\"/\") {\n       call.respondHtmlTemplate(LayoutTemplate()) {\n           header {\n               +\"Ktor\"\n           }\n           content {\n               articleTitle {\n                   +\"Hello from Ktor!\"\n               }\n               articleText {\n                   +\"Kotlin Framework for creating connected systems.\"\n               }\n               list {\n                   item { +\"One\" }\n                   item { +\"Two\" }\n               }\n           }\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-html-dsl.html", "title": "HTML DSL", "description": "HTML DSL integrates the kotlinx.html library into Ktor and allows you to respond to a client with HTML blocks. With HTML DSL, you can write pure HTML in Kotlin, interpolate variables into views, and even build complex HTML layouts using templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:10:18", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "language": "en-US", "ogTitle": "HTML DSL | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "og:title": "HTML DSL | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "HTML DSL | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:02.186924239", "twitter:title": "HTML DSL | Ktor", "og:locale": "en_US", "ogLocale": "en_US", "scrapeId": "7f264a81-7730-45fa-b97b-f3de09d8e88b", "sourceURL": "https://ktor.io/docs/server-html-dsl.html", "url": "https://ktor.io/docs/server-html-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for HTML DSL in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HTML Response Example**:\n\n```yaml\nimport io.ktor.server.application.*\nimport io.ktor.server.html.*\nimport io.ktor.http.*\nimport io.ktor.server.routing.*\nimport kotlinx.html.*\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            val name = \"Ktor\"\n            call.respondHtml(HttpStatusCode.OK) {\n                head {\n                    title {\n                        +name\n                    }\n                }\n                body {\n                    h1 {\n                        +\"Hello from $name!\"\n                    }\n                }\n            }\n        }\n    }\n}\n\n```\n\nThis snippet shows you how to html response example, which is an important aspect of html dsl.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-html-dsl.html", "title": "HTML DSL", "description": "HTML DSL integrates the kotlinx.html library into Ktor and allows you to respond to a client with HTML blocks. With HTML DSL, you can write pure HTML in Kotlin, interpolate variables into views, and even build complex HTML layouts using templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:10:18", "type": "code_examples", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "language": "en-US", "ogTitle": "HTML DSL | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "og:title": "HTML DSL | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "HTML DSL | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:02.186924239", "twitter:title": "HTML DSL | Ktor", "og:locale": "en_US", "ogLocale": "en_US", "scrapeId": "7f264a81-7730-45fa-b97b-f3de09d8e88b", "sourceURL": "https://ktor.io/docs/server-html-dsl.html", "url": "https://ktor.io/docs/server-html-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using HTML DSL in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo learn more about generating HTML using kotlinx.html, see the kotlinx.html wiki.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-html-dsl.html", "title": "HTML DSL", "description": "HTML DSL integrates the kotlinx.html library into Ktor and allows you to respond to a client with HTML blocks. With HTML DSL, you can write pure HTML in Kotlin, interpolate variables into views, and even build complex HTML layouts using templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:10:18", "type": "best_practices", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "language": "en-US", "ogTitle": "HTML DSL | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-html-dsl.html", "og:title": "HTML DSL | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "title": "HTML DSL | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "built-on": "2025-02-26T14:01:02.186924239", "twitter:title": "HTML DSL | Ktor", "og:locale": "en_US", "ogLocale": "en_US", "scrapeId": "7f264a81-7730-45fa-b97b-f3de09d8e88b", "sourceURL": "https://ktor.io/docs/server-html-dsl.html", "url": "https://ktor.io/docs/server-html-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Custom server plugins is in ktor?\n\nAssistant: Sure, I'd be happy to explain Custom server plugins in ktor.\n\n# Custom server plugins\n\nThis page covers how to create and install custom plugins in Ktor, handle requests and responses, and provide plugin configuration.Here's a quick rundown of what this is about:\n\n## Create and install your first plugin\n\nIn this section, we'll demonstrate how to create and install your first plugin. You can use an application created in the Create, open and run a new Ktor project tutorial as a starting project.\n\n1. To create a plugin, call the createApplicationPlugin function and pass a plugin name:\n\n```kotlin\nimport io.ktor.server.application.*\n\nval SimplePlugin = createApplicationPlugin(name = \"SimplePlugin\") {\n       println(\"SimplePlugin is installed!\")\n}\n```\n\nThis function returns the ApplicationPlugin instance that will be used in the next step to install a plugin.\n\n2. To install a plugin, pass the created ApplicationPlugin instance to the install function in the application's initialization code:\n\n```kotlin\nfun Application.module() {\n       install(SimplePlugin)\n}\n```\n\n3. Finally, run your application to see the plugin's greeting in the console output:\n\n```plaintext\n2021-10-14 14:54:08.269 [main] INFO  Application - Autoreload is disabled because the development mode is off.\nSimplePlugin is installed!\n2021-10-14 14:54:08.900 [main] INFO  Application - Responding at http://0.0.0.0:8080\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins.html", "title": "Custom server plugins", "description": "This page covers how to create and install custom plugins in Ktor, handle requests and responses, and provide plugin configuration.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:10:55", "type": "overview", "page_metadata": {"og:type": "website", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins.html", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins.html", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "language": "en-US", "title": "Custom server plugins | Ktor Documentation", "twitter:card": "summary_large_image", "og:title": "Custom server plugins | Ktor", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Custom server plugins | Ktor", "built-on": "2025-02-26T14:01:04.869653884", "og:site_name": "Ktor Help", "twitter:title": "Custom server plugins | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "6e88ca67-2428-48e1-b663-b80f5be97541", "sourceURL": "https://ktor.io/docs/server-custom-plugins.html", "url": "https://ktor.io/docs/server-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create and install your first plugin in ktor?\n\nAssistant: To create and install your first plugin in ktor, here's what you do:\nIn this section, we'll demonstrate how to create and install your first plugin. You can use an application created in the Create, open and run a new Ktor project tutorial as a starting project.\n\n1. To create a plugin, call the createApplicationPlugin function and pass a plugin name:\n\n```kotlin\nimport io.ktor.server.application.*\n\nval SimplePlugin = createApplicationPlugin(name = \"SimplePlugin\") {\n       println(\"SimplePlugin is installed!\")\n}\n```\n\nThis function returns the ApplicationPlugin instance that will be used in the next step to install a plugin.\n\n2. To install a plugin, pass the created ApplicationPlugin instance to the install function in the application's initialization code:\n\n```kotlin\nfun Application.module() {\n       install(SimplePlugin)\n}\n```\n\n3. Finally, run your application to see the plugin's greeting in the console output:\n\n```plaintext\n2021-10-14 14:54:08.269 [main] INFO  Application - Autoreload is disabled because the development mode is off.\nSimplePlugin is installed!\n2021-10-14 14:54:08.900 [main] INFO  Application - Responding at http://0.0.0.0:8080\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins.html", "title": "Custom server plugins", "description": "This page covers how to create and install custom plugins in Ktor, handle requests and responses, and provide plugin configuration.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:10:55", "type": "section_detail", "page_metadata": {"og:type": "website", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins.html", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins.html", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "language": "en-US", "title": "Custom server plugins | Ktor Documentation", "twitter:card": "summary_large_image", "og:title": "Custom server plugins | Ktor", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Custom server plugins | Ktor", "built-on": "2025-02-26T14:01:04.869653884", "og:site_name": "Ktor Help", "twitter:title": "Custom server plugins | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "6e88ca67-2428-48e1-b663-b80f5be97541", "sourceURL": "https://ktor.io/docs/server-custom-plugins.html", "url": "https://ktor.io/docs/server-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Custom server plugins in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a Simple Plugin**:\n\n```yaml\nimport io.ktor.server.application.*\n\nval SimplePlugin = createApplicationPlugin(name = \"SimplePlugin\") {\n       println(\"SimplePlugin is installed!\")\n}\n```\n\nThis snippet shows you how to creating a simple plugin, which is an important aspect of custom server plugins.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins.html", "title": "Custom server plugins", "description": "This page covers how to create and install custom plugins in Ktor, handle requests and responses, and provide plugin configuration.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:10:55", "type": "code_examples", "page_metadata": {"og:type": "website", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins.html", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins.html", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "language": "en-US", "title": "Custom server plugins | Ktor Documentation", "twitter:card": "summary_large_image", "og:title": "Custom server plugins | Ktor", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Custom server plugins | Ktor", "built-on": "2025-02-26T14:01:04.869653884", "og:site_name": "Ktor Help", "twitter:title": "Custom server plugins | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "6e88ca67-2428-48e1-b663-b80f5be97541", "sourceURL": "https://ktor.io/docs/server-custom-plugins.html", "url": "https://ktor.io/docs/server-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Custom server plugins in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe API described in this topic is in effect for v2.0.0 and higher. For the old versions, you can use the base API.\n\nThere is also the createRouteScopedPlugin function allowing you to create plugins that can be installed to a specific route.\n\nGiven that plugin configuration fields are mutable, saving them in local variables is recommended.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins.html", "title": "Custom server plugins", "description": "This page covers how to create and install custom plugins in Ktor, handle requests and responses, and provide plugin configuration.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 04:10:55", "type": "best_practices", "page_metadata": {"og:type": "website", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins.html", "ogSiteName": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins.html", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "language": "en-US", "title": "Custom server plugins | Ktor Documentation", "twitter:card": "summary_large_image", "og:title": "Custom server plugins | Ktor", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Custom server plugins | Ktor", "built-on": "2025-02-26T14:01:04.869653884", "og:site_name": "Ktor Help", "twitter:title": "Custom server plugins | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "6e88ca67-2428-48e1-b663-b80f5be97541", "sourceURL": "https://ktor.io/docs/server-custom-plugins.html", "url": "https://ktor.io/docs/server-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Configuration in code is in ktor?\n\nAssistant: Sure, I'd be happy to explain Configuration in code in ktor.\n\n# Configuration in code\n\nKtor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.Here's a quick rundown of what this is about:\n\n## Basic configuration\n\nThe code snippet below shows a basic server setup with the Netty engine and the `8080` port.\n\n```\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nNote that you can set the `port` parameter to `0` to run the server on a random port. The `embeddedServer` function returns an engine instance, so you can get a port value in code using the ApplicationEngine.resolvedConnectors function.\n\n## Engine configuration\n\nThe `embeddedServer` function allows you to pass engine-specific options using the `configure` parameter. This parameter includes options common for all engines and exposed by the ApplicationEngine.Configuration class.\n\nThe example below shows how to configure a server using the `Netty` engine. Within the `configure` block, we define a `connector` to specify the host and port, and customize various server parameters:\n\n```\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, configure = {\n        connectors.add(EngineConnectorBuilder().apply {\n            host = \"127.0.0.1\"\n            port = 8080\n        })\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nThe `connectors.add()` method defines a connector with the specified host ( `127.0.0.1`) and port ( `8080`).\n\nIn addition to these options, you can configure other engine-specific properties.\n\n## Netty\n\nNetty-specific options are exposed by the NettyApplicationEngine.Configuration class.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    embeddedServer(Netty, configure = {\n        requestQueueLimit = 16\n        shareWorkGroup = false\n        configureBootstrap = {\n            // ...\n        }\n        responseWriteTimeoutSeconds = 10\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n## Jetty\n\nJetty-specific options are exposed by the JettyApplicationEngineBase.Configuration class.\n\nYou can configure the Jetty server inside the configureServer block, which provides access to a Server instance.\n\nUse the idleTimeout property to specify the duration of time a connection can be idle before it gets closed.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.jetty.jakarta.*\n\nfun main() {\n    embeddedServer(Jetty, configure = {\n        configureServer = { // this: Server -&gt;\n            // ...\n        }\n        idleTimeout = 30.seconds\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n## CIO\n\nCIO-specific options are exposed by the CIOApplicationEngine.Configuration class.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.cio.*\n\nfun main() {\n    embeddedServer(CIO, configure = {\n        connectionIdleTimeoutSeconds = 45\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n## Tomcat\n\nIf you use Tomcat as the engine, you can configure it using the configureTomcat property, which provides access to a Tomcat instance.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.tomcat.jakarta.*\n\nfun main() {\n    embeddedServer(Tomcat, configure = {\n        configureTomcat = { // this: Tomcat -&gt;\n            // ...\n        }\n    }) {\n        // ...\n    }.start(true)\n}\n```\n\n## Custom environment\n\nThe example below shows how to run a server with multiple connector endpoints using a custom configuration represented by the ApplicationEngine interface.\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    val appProperties = serverConfig {\n        module { module() }\n    }\n    embeddedServer(Netty, appProperties) {\n        envConfig()\n    }.start(true)\n}\n\nfun ApplicationEngine.Configuration.envConfig() {\n    connector {\n        host = \"0.0.0.0\"\n        port = 8080\n    }\n    connector {\n        host = \"127.0.0.1\"\n        port = 9090\n    }\n}\n```\n\nFor the complete example, see embedded-server-multiple-connectors.\n\n> ### tip\n>\n> You can also use a custom environment to serve HTTPS.\n\n## Command-line configuration\n\nKtor allows you to dynamically configure an embeddedServer using command-line arguments. This can be particularly useful in cases where configurations like ports, hosts, or timeouts need to be specified at runtime.\n\nTo achieve this, use the CommandLineConfig class to parse command-line arguments into a configuration object and pass it within the configuration block:\n\n```\nfun main(args: Array<String>) {\n    embeddedServer(\n        factory = Netty,\n        configure = {\n            val cliConfig = CommandLineConfig(args)\n            takeFrom(cliConfig.engineConfig)\n            loadCommonConfiguration(cliConfig.rootConfig.environment.config)\n        }\n    ) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nIn this example, the takeFrom() function from Application.Configuration is used to override engine configuration values, such as port and host. The loadCommonConfiguration() function loads configuration from the root environment, such as timeouts.\n\nTo run the server, specify arguments in the following way:\n\n```\n./gradlew run --args=\"-port=8080\"\n```\n\n> ### tip\n>\n> For static configurations, you can use a configuration file or environment variables. To learn more, see Configuration in a file.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-code.html", "title": "Configuration in code", "description": "Ktor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:16:07", "type": "overview", "page_metadata": {"ogTitle": "Configuration in code | Ktor", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.430082059", "og:title": "Configuration in code | Ktor", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "build-number": "707", "og:type": "website", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "twitter:title": "Configuration in code | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Configuration in code | Ktor Documentation", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "scrapeId": "7c58e322-df42-487d-a1f8-c676734f780f", "sourceURL": "https://ktor.io/docs/server-configuration-code.html", "url": "https://ktor.io/docs/server-configuration-code.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I basic configuration in ktor?\n\nAssistant: To basic configuration in ktor, here's what you do:\nThe code snippet below shows a basic server setup with the Netty engine and the `8080` port.\n\n```\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nNote that you can set the `port` parameter to `0` to run the server on a random port. The `embeddedServer` function returns an engine instance, so you can get a port value in code using the ApplicationEngine.resolvedConnectors function..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-code.html", "title": "Configuration in code", "description": "Ktor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:16:07", "type": "section_detail", "page_metadata": {"ogTitle": "Configuration in code | Ktor", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.430082059", "og:title": "Configuration in code | Ktor", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "build-number": "707", "og:type": "website", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "twitter:title": "Configuration in code | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Configuration in code | Ktor Documentation", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "scrapeId": "7c58e322-df42-487d-a1f8-c676734f780f", "sourceURL": "https://ktor.io/docs/server-configuration-code.html", "url": "https://ktor.io/docs/server-configuration-code.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I engine configuration in ktor?\n\nAssistant: To engine configuration in ktor, here's what you do:\nThe `embeddedServer` function allows you to pass engine-specific options using the `configure` parameter. This parameter includes options common for all engines and exposed by the ApplicationEngine.Configuration class.\n\nThe example below shows how to configure a server using the `Netty` engine. Within the `configure` block, we define a `connector` to specify the host and port, and customize various server parameters:\n\n```\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, configure = {\n        connectors.add(EngineConnectorBuilder().apply {\n            host = \"127.0.0.1\"\n            port = 8080\n        })\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nThe `connectors.add()` method defines a connector with the specified host ( `127.0.0.1`) and port ( `8080`).\n\nIn addition to these options, you can configure other engine-specific properties..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-code.html", "title": "Configuration in code", "description": "Ktor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:16:07", "type": "section_detail", "page_metadata": {"ogTitle": "Configuration in code | Ktor", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.430082059", "og:title": "Configuration in code | Ktor", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "build-number": "707", "og:type": "website", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "twitter:title": "Configuration in code | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Configuration in code | Ktor Documentation", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "scrapeId": "7c58e322-df42-487d-a1f8-c676734f780f", "sourceURL": "https://ktor.io/docs/server-configuration-code.html", "url": "https://ktor.io/docs/server-configuration-code.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I netty in ktor?\n\nAssistant: To netty in ktor, here's what you do:\nNetty-specific options are exposed by the NettyApplicationEngine.Configuration class.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    embeddedServer(Netty, configure = {\n        requestQueueLimit = 16\n        shareWorkGroup = false\n        configureBootstrap = {\n            // ...\n        }\n        responseWriteTimeoutSeconds = 10\n    }) {\n        // ...\n    }.start(true)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-code.html", "title": "Configuration in code", "description": "Ktor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:16:07", "type": "section_detail", "page_metadata": {"ogTitle": "Configuration in code | Ktor", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.430082059", "og:title": "Configuration in code | Ktor", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "build-number": "707", "og:type": "website", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "twitter:title": "Configuration in code | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Configuration in code | Ktor Documentation", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "scrapeId": "7c58e322-df42-487d-a1f8-c676734f780f", "sourceURL": "https://ktor.io/docs/server-configuration-code.html", "url": "https://ktor.io/docs/server-configuration-code.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I jetty in ktor?\n\nAssistant: To jetty in ktor, here's what you do:\nJetty-specific options are exposed by the JettyApplicationEngineBase.Configuration class.\n\nYou can configure the Jetty server inside the configureServer block, which provides access to a Server instance.\n\nUse the idleTimeout property to specify the duration of time a connection can be idle before it gets closed.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.jetty.jakarta.*\n\nfun main() {\n    embeddedServer(Jetty, configure = {\n        configureServer = { // this: Server -&gt;\n            // ...\n        }\n        idleTimeout = 30.seconds\n    }) {\n        // ...\n    }.start(true)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-code.html", "title": "Configuration in code", "description": "Ktor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:16:07", "type": "section_detail", "page_metadata": {"ogTitle": "Configuration in code | Ktor", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.430082059", "og:title": "Configuration in code | Ktor", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "build-number": "707", "og:type": "website", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "twitter:title": "Configuration in code | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Configuration in code | Ktor Documentation", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "scrapeId": "7c58e322-df42-487d-a1f8-c676734f780f", "sourceURL": "https://ktor.io/docs/server-configuration-code.html", "url": "https://ktor.io/docs/server-configuration-code.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I cio in ktor?\n\nAssistant: To cio in ktor, here's what you do:\nCIO-specific options are exposed by the CIOApplicationEngine.Configuration class.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.cio.*\n\nfun main() {\n    embeddedServer(CIO, configure = {\n        connectionIdleTimeoutSeconds = 45\n    }) {\n        // ...\n    }.start(true)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-code.html", "title": "Configuration in code", "description": "Ktor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:16:07", "type": "section_detail", "page_metadata": {"ogTitle": "Configuration in code | Ktor", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.430082059", "og:title": "Configuration in code | Ktor", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "build-number": "707", "og:type": "website", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "twitter:title": "Configuration in code | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Configuration in code | Ktor Documentation", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "scrapeId": "7c58e322-df42-487d-a1f8-c676734f780f", "sourceURL": "https://ktor.io/docs/server-configuration-code.html", "url": "https://ktor.io/docs/server-configuration-code.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I tomcat in ktor?\n\nAssistant: To tomcat in ktor, here's what you do:\nIf you use Tomcat as the engine, you can configure it using the configureTomcat property, which provides access to a Tomcat instance.\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.tomcat.jakarta.*\n\nfun main() {\n    embeddedServer(Tomcat, configure = {\n        configureTomcat = { // this: Tomcat -&gt;\n            // ...\n        }\n    }) {\n        // ...\n    }.start(true)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-code.html", "title": "Configuration in code", "description": "Ktor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:16:07", "type": "section_detail", "page_metadata": {"ogTitle": "Configuration in code | Ktor", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.430082059", "og:title": "Configuration in code | Ktor", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "build-number": "707", "og:type": "website", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "twitter:title": "Configuration in code | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Configuration in code | Ktor Documentation", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "scrapeId": "7c58e322-df42-487d-a1f8-c676734f780f", "sourceURL": "https://ktor.io/docs/server-configuration-code.html", "url": "https://ktor.io/docs/server-configuration-code.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I custom environment in ktor?\n\nAssistant: To custom environment in ktor, here's what you do:\nThe example below shows how to run a server with multiple connector endpoints using a custom configuration represented by the ApplicationEngine interface.\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    val appProperties = serverConfig {\n        module { module() }\n    }\n    embeddedServer(Netty, appProperties) {\n        envConfig()\n    }.start(true)\n}\n\nfun ApplicationEngine.Configuration.envConfig() {\n    connector {\n        host = \"0.0.0.0\"\n        port = 8080\n    }\n    connector {\n        host = \"127.0.0.1\"\n        port = 9090\n    }\n}\n```\n\nFor the complete example, see embedded-server-multiple-connectors.\n\n> ### tip\n>\n> You can also use a custom environment to serve HTTPS..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-code.html", "title": "Configuration in code", "description": "Ktor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:16:07", "type": "section_detail", "page_metadata": {"ogTitle": "Configuration in code | Ktor", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.430082059", "og:title": "Configuration in code | Ktor", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "build-number": "707", "og:type": "website", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "twitter:title": "Configuration in code | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Configuration in code | Ktor Documentation", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "scrapeId": "7c58e322-df42-487d-a1f8-c676734f780f", "sourceURL": "https://ktor.io/docs/server-configuration-code.html", "url": "https://ktor.io/docs/server-configuration-code.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I command-line configuration in ktor?\n\nAssistant: To command-line configuration in ktor, here's what you do:\nKtor allows you to dynamically configure an embeddedServer using command-line arguments. This can be particularly useful in cases where configurations like ports, hosts, or timeouts need to be specified at runtime.\n\nTo achieve this, use the CommandLineConfig class to parse command-line arguments into a configuration object and pass it within the configuration block:\n\n```\nfun main(args: Array<String>) {\n    embeddedServer(\n        factory = Netty,\n        configure = {\n            val cliConfig = CommandLineConfig(args)\n            takeFrom(cliConfig.engineConfig)\n            loadCommonConfiguration(cliConfig.rootConfig.environment.config)\n        }\n    ) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nIn this example, the takeFrom() function from Application.Configuration is used to override engine configuration values, such as port and host. The loadCommonConfiguration() function loads configuration from the root environment, such as timeouts.\n\nTo run the server, specify arguments in the following way:\n\n```\n./gradlew run --args=\"-port=8080\"\n```\n\n> ### tip\n>\n> For static configurations, you can use a configuration file or environment variables. To learn more, see Configuration in a file..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-code.html", "title": "Configuration in code", "description": "Ktor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:16:07", "type": "section_detail", "page_metadata": {"ogTitle": "Configuration in code | Ktor", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.430082059", "og:title": "Configuration in code | Ktor", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "build-number": "707", "og:type": "website", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "twitter:title": "Configuration in code | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Configuration in code | Ktor Documentation", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "scrapeId": "7c58e322-df42-487d-a1f8-c676734f780f", "sourceURL": "https://ktor.io/docs/server-configuration-code.html", "url": "https://ktor.io/docs/server-configuration-code.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Configuration in code in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic server setup with Netty engine**:\n\n```yaml\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n\n```\n\nThis snippet shows you how to basic server setup with netty engine, which is an important aspect of configuration in code.\n\n**Server configuration with Netty engine**:\n\n```yaml\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, configure = {\n        connectors.add(EngineConnectorBuilder().apply {\n            host = \"127.0.0.1\"\n            port = 8080\n        })\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n\n```\n\nThis snippet shows you how to server configuration with netty engine, which is an important aspect of configuration in code.\n\n**Netty-specific options**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    embeddedServer(Netty, configure = {\n        requestQueueLimit = 16\n        shareWorkGroup = false\n        configureBootstrap = {\n            // ...\n        }\n        responseWriteTimeoutSeconds = 10\n    }) {\n        // ...\n    }.start(true)\n}\n\n```\n\nThis snippet shows you how to netty-specific options, which is an important aspect of configuration in code.\n\n**Jetty-specific options**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.jetty.jakarta.*\n\nfun main() {\n    embeddedServer(Jetty, configure = {\n        configureServer = { // this: Server -&gt;\n            // ...\n        }\n        idleTimeout = 30.seconds\n    }) {\n        // ...\n    }.start(true)\n}\n\n```\n\nThis snippet shows you how to jetty-specific options, which is an important aspect of configuration in code.\n\n**CIO-specific options**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.cio.*\n\nfun main() {\n    embeddedServer(CIO, configure = {\n        connectionIdleTimeoutSeconds = 45\n    }) {\n        // ...\n    }.start(true)\n}\n\n```\n\nThis snippet shows you how to cio-specific options, which is an important aspect of configuration in code.\n\n**Tomcat configuration**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.tomcat.jakarta.*\n\nfun main() {\n    embeddedServer(Tomcat, configure = {\n        configureTomcat = { // this: Tomcat -&gt;\n            // ...\n        }\n    }) {\n        // ...\n    }.start(true)\n}\n\n```\n\nThis snippet shows you how to tomcat configuration, which is an important aspect of configuration in code.\n\n**Custom environment with multiple connectors**:\n\n```yaml\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main() {\n    val appProperties = serverConfig {\n        module { module() }\n    }\n    embeddedServer(Netty, appProperties) {\n        envConfig()\n    }.start(true)\n}\n\nfun ApplicationEngine.Configuration.envConfig() {\n    connector {\n        host = \"0.0.0.0\"\n        port = 8080\n    }\n    connector {\n        host = \"127.0.0.1\"\n        port = 9090\n    }\n}\n\n```\n\nThis snippet shows you how to custom environment with multiple connectors, which is an important aspect of configuration in code.\n\n**Command-line configuration example**:\n\n```yaml\nfun main(args: Array<String>) {\n    embeddedServer(\n        factory = Netty,\n        configure = {\n            val cliConfig = CommandLineConfig(args)\n            takeFrom(cliConfig.engineConfig)\n            loadCommonConfiguration(cliConfig.rootConfig.environment.config)\n        }\n    ) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n\n```\n\nThis snippet shows you how to command-line configuration example, which is an important aspect of configuration in code.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-code.html", "title": "Configuration in code", "description": "Ktor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:16:07", "type": "code_examples", "page_metadata": {"ogTitle": "Configuration in code | Ktor", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.430082059", "og:title": "Configuration in code | Ktor", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "build-number": "707", "og:type": "website", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "twitter:title": "Configuration in code | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Configuration in code | Ktor Documentation", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "scrapeId": "7c58e322-df42-487d-a1f8-c676734f780f", "sourceURL": "https://ktor.io/docs/server-configuration-code.html", "url": "https://ktor.io/docs/server-configuration-code.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Configuration in code in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can also use a custom environment to serve HTTPS.\n\nFor static configurations, you can use a configuration file or environment variables.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-code.html", "title": "Configuration in code", "description": "Ktor allows you to configure various server parameters directly in code, including the host address, port, server modules, and more. The method of configuration depends on the way you set up a server - using embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 04:16:07", "type": "best_practices", "page_metadata": {"ogTitle": "Configuration in code | Ktor", "og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.430082059", "og:title": "Configuration in code | Ktor", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-code.html", "build-number": "707", "og:type": "website", "og:site_name": "Ktor Help", "ogLocale": "en_US", "ogDescription": "", "twitter:title": "Configuration in code | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Configuration in code | Ktor Documentation", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "scrapeId": "7c58e322-df42-487d-a1f8-c676734f780f", "sourceURL": "https://ktor.io/docs/server-configuration-code.html", "url": "https://ktor.io/docs/server-configuration-code.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what WebSocket extensions API is in ktor?\n\nAssistant: Sure, I'd be happy to explain WebSocket extensions API in ktor.\n\n# WebSocket extensions API\n\nKtor WebSocket API supports writing your own extensions(such as RFC-7692) or any custom extensions.Here's a quick rundown of what this is about:\n\n## Install extension\n\nTo install and configure the extensions, we provide two methods: `extensions` and `install` which can be used in the following way:\n\n```\ninstall(WebSockets) {\n    extensions { /* WebSocketExtensionConfig.() -> Unit */\n        install(MyWebSocketExtension) { /* MyWebSocketExtensionConfig.() -> Unit */\n        /* Optional extension configuration. */\n        }\n    }\n}\n```\n\nThe extensions are used in order of installation.\n\n## Check if the extension is negotiated\n\nAll installed extensions go through the negotiation process, and those that are successfully negotiated are used during the request. You can use `WebSocketSession.extensions: : List<WebSocketExtension<*>>` property with a list of all extensions used by for the current session.\n\nThere are two methods to check if the extension is in use: `WebSocketSession.extension` and `WebSocketSession.extensionOrNull`:\n\n```\nwebSocket(\"/echo\") {\n    val myExtension = extension(MyWebSocketExtension) // will throw if `MyWebSocketExtension` is not negotiated\n    // or\n    val myExtension = extensionOrNull(MyWebSocketExtension) ?: close() // will close the session if `MyWebSocketExtension` is not negotiated\n}\n```\n\n## Write a new extension\n\nThere are two interfaces for implementing a new extension: `WebSocketExtension<ConfigType: Any>` and `WebSocketExtensionFactory<ConfigType : Any, ExtensionType : WebSocketExtension<ConfigType>>`. A single implementation can work for both clients and servers.\n\nBelow is an example of how a simple frame logging extension can be implemented:\n\n```\nclass FrameLoggerExtension(val logger: Logger) : WebSocketExtension<FrameLogger.Config> {\n```\n\nThe plugin has two groups of fields and methods. The first group is for extension negotiation:\n\n```\n/** A list of protocols to be sent in a client request for negotiation **/\noverride val protocols: List<WebSocketExtensionHeader> = emptyList()\n\n/**\n  * This method will be called for server and will process `requestedProtocols` from the client.\n  * As a result, it will return a list of extensions that server agrees to use.\n  */\noverride fun serverNegotiation(requestedProtocols: List<WebSocketExtensionHeader>): List<WebSocketExtensionHeader> {\n    logger.log(\"Server negotiation\")\n    return emptyList()\n}\n\n/**\n  * This method will be called on the client with a list of protocols, produced by `serverNegotiation`. It will decide if these extensions should be used.\n  */\noverride fun clientNegotiation(negotiatedProtocols: List<WebSocketExtensionHeader>): Boolean {\n    logger.log(\"Client negotiation\")\n    return true\n}\n```\n\nThe second group is the place for actual frame processing. Methods will take a frame and produce a new processed frame if necessary:\n\n```\noverride fun processOutgoingFrame(frame: Frame): Frame {\n    logger.log(\"Process outgoing frame: $frame\")\n    return frame\n}\n\noverride fun processIncomingFrame(frame: Frame): Frame {\n    logger.log(\"Process incoming frame: $frame\")\n    return frame\n}\n```\n\nThere are also some implementation details: the plugin has `Config` and reference to the origin `factory`.\n\n```\nclass Config {\n    lateinit var logger: Logger\n}\n\n/**\n* A factory which can create a current extension instance.\n*/\noverride val factory: WebSocketExtensionFactory<Config, FrameLogger> = FrameLoggerExtension\n```\n\nThe factory is usually implemented in a companion object (similar to regular plugins):\n\n```\ncompanion object : WebSocketExtensionFactory<Config, FrameLogger> {\n        /* Key to discover installed extension instance */\n        override val key: AttributeKey<FrameLogger> = AttributeKey(\"frame-logger\")\n\n        /** List of occupied rsv bits.\n         * If the extension occupies a bit, it can't be used in other installed extensions. We use these bits to prevent plugin conflicts(prevent installing multiple compression plugins). If you're implementing a plugin using some RFC, rsv occupied bits should be referenced there.\n         */\n        override val rsv1: Boolean = false\n        override val rsv2: Boolean = false\n        override val rsv3: Boolean = false\n\n       /** Create plugin instance. Will be called for each WebSocket session **/\n        override fun install(config: Config.() -> Unit): FrameLogger {\n            return FrameLogger(Config().apply(config).logger)\n        }\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-extensions.html", "title": "WebSocket extensions API", "description": "Ktor WebSocket API supports writing your own extensions(such as RFC-7692) or any custom extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:17:01", "type": "overview", "page_metadata": {"ogDescription": "", "og:title": "WebSocket extensions API | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:description": "", "ogLocale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "WebSocket extensions API | Ktor", "title": "WebSocket extensions API | Ktor Documentation", "built-on": "2025-02-26T14:01:01.929117145", "ogTitle": "WebSocket extensions API | Ktor", "og:type": "website", "twitter:description": "", "scrapeId": "046c0295-ec25-4f36-9ea8-90362882780a", "sourceURL": "https://ktor.io/docs/server-websocket-extensions.html", "url": "https://ktor.io/docs/server-websocket-extensions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install extension in ktor?\n\nAssistant: To install extension in ktor, here's what you do:\nTo install and configure the extensions, we provide two methods: `extensions` and `install` which can be used in the following way:\n\n```\ninstall(WebSockets) {\n    extensions { /* WebSocketExtensionConfig.() -> Unit */\n        install(MyWebSocketExtension) { /* MyWebSocketExtensionConfig.() -> Unit */\n        /* Optional extension configuration. */\n        }\n    }\n}\n```\n\nThe extensions are used in order of installation..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-extensions.html", "title": "WebSocket extensions API", "description": "Ktor WebSocket API supports writing your own extensions(such as RFC-7692) or any custom extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:17:01", "type": "section_detail", "page_metadata": {"ogDescription": "", "og:title": "WebSocket extensions API | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:description": "", "ogLocale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "WebSocket extensions API | Ktor", "title": "WebSocket extensions API | Ktor Documentation", "built-on": "2025-02-26T14:01:01.929117145", "ogTitle": "WebSocket extensions API | Ktor", "og:type": "website", "twitter:description": "", "scrapeId": "046c0295-ec25-4f36-9ea8-90362882780a", "sourceURL": "https://ktor.io/docs/server-websocket-extensions.html", "url": "https://ktor.io/docs/server-websocket-extensions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I check if the extension is negotiated in ktor?\n\nAssistant: To check if the extension is negotiated in ktor, here's what you do:\nAll installed extensions go through the negotiation process, and those that are successfully negotiated are used during the request. You can use `WebSocketSession.extensions: : List<WebSocketExtension<*>>` property with a list of all extensions used by for the current session.\n\nThere are two methods to check if the extension is in use: `WebSocketSession.extension` and `WebSocketSession.extensionOrNull`:\n\n```\nwebSocket(\"/echo\") {\n    val myExtension = extension(MyWebSocketExtension) // will throw if `MyWebSocketExtension` is not negotiated\n    // or\n    val myExtension = extensionOrNull(MyWebSocketExtension) ?: close() // will close the session if `MyWebSocketExtension` is not negotiated\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-extensions.html", "title": "WebSocket extensions API", "description": "Ktor WebSocket API supports writing your own extensions(such as RFC-7692) or any custom extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:17:01", "type": "section_detail", "page_metadata": {"ogDescription": "", "og:title": "WebSocket extensions API | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:description": "", "ogLocale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "WebSocket extensions API | Ktor", "title": "WebSocket extensions API | Ktor Documentation", "built-on": "2025-02-26T14:01:01.929117145", "ogTitle": "WebSocket extensions API | Ktor", "og:type": "website", "twitter:description": "", "scrapeId": "046c0295-ec25-4f36-9ea8-90362882780a", "sourceURL": "https://ktor.io/docs/server-websocket-extensions.html", "url": "https://ktor.io/docs/server-websocket-extensions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I write a new extension in ktor?\n\nAssistant: To write a new extension in ktor, here's what you do:\nThere are two interfaces for implementing a new extension: `WebSocketExtension<ConfigType: Any>` and `WebSocketExtensionFactory<ConfigType : Any, ExtensionType : WebSocketExtension<ConfigType>>`. A single implementation can work for both clients and servers.\n\nBelow is an example of how a simple frame logging extension can be implemented:\n\n```\nclass FrameLoggerExtension(val logger: Logger) : WebSocketExtension<FrameLogger.Config> {\n```\n\nThe plugin has two groups of fields and methods. The first group is for extension negotiation:\n\n```\n/** A list of protocols to be sent in a client request for negotiation **/\noverride val protocols: List<WebSocketExtensionHeader> = emptyList()\n\n/**\n  * This method will be called for server and will process `requestedProtocols` from the client.\n  * As a result, it will return a list of extensions that server agrees to use.\n  */\noverride fun serverNegotiation(requestedProtocols: List<WebSocketExtensionHeader>): List<WebSocketExtensionHeader> {\n    logger.log(\"Server negotiation\")\n    return emptyList()\n}\n\n/**\n  * This method will be called on the client with a list of protocols, produced by `serverNegotiation`. It will decide if these extensions should be used.\n  */\noverride fun clientNegotiation(negotiatedProtocols: List<WebSocketExtensionHeader>): Boolean {\n    logger.log(\"Client negotiation\")\n    return true\n}\n```\n\nThe second group is the place for actual frame processing. Methods will take a frame and produce a new processed frame if necessary:\n\n```\noverride fun processOutgoingFrame(frame: Frame): Frame {\n    logger.log(\"Process outgoing frame: $frame\")\n    return frame\n}\n\noverride fun processIncomingFrame(frame: Frame): Frame {\n    logger.log(\"Process incoming frame: $frame\")\n    return frame\n}\n```\n\nThere are also some implementation details: the plugin has `Config` and reference to the origin `factory`.\n\n```\nclass Config {\n    lateinit var logger: Logger\n}\n\n/**\n* A factory which can create a current extension instance.\n*/\noverride val factory: WebSocketExtensionFactory<Config, FrameLogger> = FrameLoggerExtension\n```\n\nThe factory is usually implemented in a companion object (similar to regular plugins):\n\n```\ncompanion object : WebSocketExtensionFactory<Config, FrameLogger> {\n        /* Key to discover installed extension instance */\n        override val key: AttributeKey<FrameLogger> = AttributeKey(\"frame-logger\")\n\n        /** List of occupied rsv bits.\n         * If the extension occupies a bit, it can't be used in other installed extensions. We use these bits to prevent plugin conflicts(prevent installing multiple compression plugins). If you're implementing a plugin using some RFC, rsv occupied bits should be referenced there.\n         */\n        override val rsv1: Boolean = false\n        override val rsv2: Boolean = false\n        override val rsv3: Boolean = false\n\n       /** Create plugin instance. Will be called for each WebSocket session **/\n        override fun install(config: Config.() -> Unit): FrameLogger {\n            return FrameLogger(Config().apply(config).logger)\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-extensions.html", "title": "WebSocket extensions API", "description": "Ktor WebSocket API supports writing your own extensions(such as RFC-7692) or any custom extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:17:01", "type": "section_detail", "page_metadata": {"ogDescription": "", "og:title": "WebSocket extensions API | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:description": "", "ogLocale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "WebSocket extensions API | Ktor", "title": "WebSocket extensions API | Ktor Documentation", "built-on": "2025-02-26T14:01:01.929117145", "ogTitle": "WebSocket extensions API | Ktor", "og:type": "website", "twitter:description": "", "scrapeId": "046c0295-ec25-4f36-9ea8-90362882780a", "sourceURL": "https://ktor.io/docs/server-websocket-extensions.html", "url": "https://ktor.io/docs/server-websocket-extensions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for WebSocket extensions API in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install extension example**:\n\n```yaml\ninstall(WebSockets) {\n    extensions { /* WebSocketExtensionConfig.() -> Unit */\n        install(MyWebSocketExtension) { /* MyWebSocketExtensionConfig.() -> Unit */\n        /* Optional extension configuration. */\n        }\n    }\n}\n```\n\nThis snippet shows you how to install extension example, which is an important aspect of websocket extensions api.\n\n**Check if the extension is negotiated example**:\n\n```yaml\nwebSocket(\"/echo\") {\n    val myExtension = extension(MyWebSocketExtension) // will throw if `MyWebSocketExtension` is not negotiated\n    // or\n    val myExtension = extensionOrNull(MyWebSocketExtension) ?: close() // will close the session if `MyWebSocketExtension` is not negotiated\n}\n```\n\nThis snippet shows you how to check if the extension is negotiated example, which is an important aspect of websocket extensions api.\n\n**Frame Logger Extension example**:\n\n```yaml\nclass FrameLoggerExtension(val logger: Logger) : WebSocketExtension<FrameLogger.Config> {\n    override val protocols: List<WebSocketExtensionHeader> = emptyList()\n    override fun serverNegotiation(requestedProtocols: List<WebSocketExtensionHeader>): List<WebSocketExtensionHeader> {\n        logger.log(\"Server negotiation\")\n        return emptyList()\n    }\n    override fun clientNegotiation(negotiatedProtocols: List<WebSocketExtensionHeader>): Boolean {\n        logger.log(\"Client negotiation\")\n        return true\n    }\n    override fun processOutgoingFrame(frame: Frame): Frame {\n        logger.log(\"Process outgoing frame: $frame\")\n        return frame\n    }\n    override fun processIncomingFrame(frame: Frame): Frame {\n        logger.log(\"Process incoming frame: $frame\")\n        return frame\n    }\n}\n```\n\nThis snippet shows you how to frame logger extension example, which is an important aspect of websocket extensions api.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-extensions.html", "title": "WebSocket extensions API", "description": "Ktor WebSocket API supports writing your own extensions(such as RFC-7692) or any custom extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:17:01", "type": "code_examples", "page_metadata": {"ogDescription": "", "og:title": "WebSocket extensions API | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:description": "", "ogLocale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "WebSocket extensions API | Ktor", "title": "WebSocket extensions API | Ktor Documentation", "built-on": "2025-02-26T14:01:01.929117145", "ogTitle": "WebSocket extensions API | Ktor", "og:type": "website", "twitter:description": "", "scrapeId": "046c0295-ec25-4f36-9ea8-90362882780a", "sourceURL": "https://ktor.io/docs/server-websocket-extensions.html", "url": "https://ktor.io/docs/server-websocket-extensions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using WebSocket extensions API in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nExtensions are used in order of installation.\n\nUse `WebSocketSession.extension` to check if an extension is negotiated, or `WebSocketSession.extensionOrNull` to safely check and handle the case where it is not negotiated.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-extensions.html", "title": "WebSocket extensions API", "description": "Ktor WebSocket API supports writing your own extensions(such as RFC-7692) or any custom extensions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:17:01", "type": "best_practices", "page_metadata": {"ogDescription": "", "og:title": "WebSocket extensions API | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-extensions.html", "og:description": "", "ogLocale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "WebSocket extensions API | Ktor", "title": "WebSocket extensions API | Ktor Documentation", "built-on": "2025-02-26T14:01:01.929117145", "ogTitle": "WebSocket extensions API | Ktor", "og:type": "website", "twitter:description": "", "scrapeId": "046c0295-ec25-4f36-9ea8-90362882780a", "sourceURL": "https://ktor.io/docs/server-websocket-extensions.html", "url": "https://ktor.io/docs/server-websocket-extensions.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Session authentication in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Session authentication in Ktor Server in ktor.\n\n# Session authentication in Ktor Server\n\nThis page covers how to implement session authentication in Ktor Server, including dependencies, configuration, and flow.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\nTo enable `session` authentication, you need to include the following artifacts in the build script:\n\n- Add the `ktor-server-sessions` dependency for using sessions:\n\n```gradle\nimplementation(\"io.ktor:ktor-server-sessions:$ktor_version\")\n```\n\n```gradle\nimplementation \"io.ktor:ktor-server-sessions:$ktor_version\"\n```\n\n```xml\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-sessions-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Add the `ktor-server-auth` dependency for authentication:\n\n```gradle\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\n```gradle\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\n```xml\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-auth-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n## Session authentication flow\n\nThe authentication flow with sessions might vary and depends on how users are authenticated in your application. Let's see how it might look with the [form-based authentication](https://ktor.io/docs/server-form-based-auth.html):\n\n1. A client makes a request containing web form data (which includes the username and password) to a server.\n2. A server validates credentials sent by a client, saves a username to a cookie session, and responds with the requested content and a cookie containing a username.\n3. A client makes a subsequent request with a cookie to the protected resource.\n4. Based on received cookie data, Ktor checks that a cookie session exists for this user and, optionally, performs additional validations on received session data. In a case of successful validation, a server responds with the requested content.\n\n## Install session authentication\n\nTo install the `session` authentication provider, call the [session](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/session.html) function with the required session type inside the `install` block:\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\nimport io.ktor.server.sessions.*\n//...\ninstall(Authentication) {\n    session<UserSession> {\n        // Configure session authentication\n    }\n}\n```\n\n## Configure session authentication\n\nThis section demonstrates how to authenticate a user with a [form-based authentication](https://ktor.io/docs/server-form-based-auth.html), save information about this user to a cookie session, and then authorize this user on subsequent requests using the `session` provider.\n\n### Step 1: Create a data class\n\nFirst, you need to create a data class for storing session data:\n\n```kotlin\n@Serializable\ndata class UserSession(val name: String, val count: Int)\n```\n\n### Step 2: Install and configure a session\n\nAfter creating a data class, you need to install and configure the `Sessions` plugin. The example below installs and configures a cookie session with a specified cookie path and expiration time.\n\n```kotlin\ncookie<UserSession>(\"user_session\") {\n        cookie.path = \"/\"\n        cookie.maxAgeInSeconds = 60\n    }\n}\n```\n\n### Step 3: Configure session authentication\n\nThe `session` authentication provider exposes its settings via the [`SessionAuthenticationProvider.Config`](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-session-authentication-provider/-config/index.html) class. In the example below, the following settings are specified:\n\n- The `validate()` function checks the [session instance](https://ktor.io/docs/server-session-auth.html#data-class) and returns a principal of type `Any` in the case of successful authentication.\n- The `challenge()` function specifies an action performed if authentication fails. For instance, you can redirect back to a login page or send an [`UnauthorizedResponse`](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-unauthorized-response/index.html).\n\n```kotlin\ninstall(Authentication) {\n    session<UserSession>(\"auth-session\") {\n        validate { session ->\n            if(session.name.startsWith(\"jet\")) {\n                session\n            } else {\n                null\n            }\n        }\n        challenge {\n            call.respondRedirect(\"/login\")\n        }\n    }\n}\n```\n\n## Save user data in a session\n\nTo save information about a logged-in user to a session, use the [`call.sessions.set()`](https://ktor.io/docs/server-sessions.html#use_sessions) function.\n\nThe following example shows a simple authentication flow using a web form:\n\n```kotlin\nauthenticate(\"auth-form\") {\n    post(\"/login\") {\n        val userName = call.principal<UserIdPrincipal>()?.name.toString()\n        call.sessions.set(UserSession(name = userName, count = 1))\n        call.respondRedirect(\"/hello\")\n    }\n}\n```\n\n## Protect specific resources\n\nAfter configuring the `session` provider, you can protect specific resources in your application with the [`authenticate()`](https://ktor.io/docs/server-auth.html#authenticate-route) function.\n\nUpon successful authentication, you can retrieve an authenticated principal (in this case, the [`UserSession`](https://ktor.io/docs/server-session-auth.html#data-class) instance) by using the `call.principal()` function inside a route handler:\n\n```kotlin\nauthenticate(\"auth-session\") {\n    get(\"/hello\") {\n        val userSession = call.principal<UserSession>()\n        call.sessions.set(userSession?.copy(count = userSession.count + 1))\n        call.respondText(\"Hello, ${userSession?.name}! Visit count is ${userSession?.count}.\")\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-session-auth.html", "title": "Session authentication in Ktor Server", "description": "This page covers how to implement session authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:17:30", "type": "overview", "page_metadata": {"og:title": "Session authentication in Ktor Server | Ktor", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:title": "Session authentication in Ktor Server | Ktor", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogTitle": "Session authentication in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.900564761", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-session-auth.html", "twitter:card": "summary_large_image", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Session authentication in Ktor Server | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-session-auth.html", "scrapeId": "242894c8-aaea-4aa4-9ff3-5dab999119f1", "sourceURL": "https://ktor.io/docs/server-session-auth.html", "url": "https://ktor.io/docs/server-session-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\nTo enable `session` authentication, you need to include the following artifacts in the build script:\n\n- Add the `ktor-server-sessions` dependency for using sessions:\n\n```gradle\nimplementation(\"io.ktor:ktor-server-sessions:$ktor_version\")\n```\n\n```gradle\nimplementation \"io.ktor:ktor-server-sessions:$ktor_version\"\n```\n\n```xml\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-sessions-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Add the `ktor-server-auth` dependency for authentication:\n\n```gradle\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\n```gradle\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\n```xml\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-auth-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-session-auth.html", "title": "Session authentication in Ktor Server", "description": "This page covers how to implement session authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:17:30", "type": "section_detail", "page_metadata": {"og:title": "Session authentication in Ktor Server | Ktor", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:title": "Session authentication in Ktor Server | Ktor", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogTitle": "Session authentication in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.900564761", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-session-auth.html", "twitter:card": "summary_large_image", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Session authentication in Ktor Server | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-session-auth.html", "scrapeId": "242894c8-aaea-4aa4-9ff3-5dab999119f1", "sourceURL": "https://ktor.io/docs/server-session-auth.html", "url": "https://ktor.io/docs/server-session-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I session authentication flow in ktor?\n\nAssistant: To session authentication flow in ktor, here's what you do:\nThe authentication flow with sessions might vary and depends on how users are authenticated in your application. Let's see how it might look with the [form-based authentication](https://ktor.io/docs/server-form-based-auth.html):\n\n1. A client makes a request containing web form data (which includes the username and password) to a server.\n2. A server validates credentials sent by a client, saves a username to a cookie session, and responds with the requested content and a cookie containing a username.\n3. A client makes a subsequent request with a cookie to the protected resource.\n4. Based on received cookie data, Ktor checks that a cookie session exists for this user and, optionally, performs additional validations on received session data. In a case of successful validation, a server responds with the requested content..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-session-auth.html", "title": "Session authentication in Ktor Server", "description": "This page covers how to implement session authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:17:30", "type": "section_detail", "page_metadata": {"og:title": "Session authentication in Ktor Server | Ktor", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:title": "Session authentication in Ktor Server | Ktor", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogTitle": "Session authentication in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.900564761", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-session-auth.html", "twitter:card": "summary_large_image", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Session authentication in Ktor Server | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-session-auth.html", "scrapeId": "242894c8-aaea-4aa4-9ff3-5dab999119f1", "sourceURL": "https://ktor.io/docs/server-session-auth.html", "url": "https://ktor.io/docs/server-session-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install session authentication in ktor?\n\nAssistant: To install session authentication in ktor, here's what you do:\nTo install the `session` authentication provider, call the [session](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/session.html) function with the required session type inside the `install` block:\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\nimport io.ktor.server.sessions.*\n//...\ninstall(Authentication) {\n    session<UserSession> {\n        // Configure session authentication\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-session-auth.html", "title": "Session authentication in Ktor Server", "description": "This page covers how to implement session authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:17:30", "type": "section_detail", "page_metadata": {"og:title": "Session authentication in Ktor Server | Ktor", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:title": "Session authentication in Ktor Server | Ktor", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogTitle": "Session authentication in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.900564761", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-session-auth.html", "twitter:card": "summary_large_image", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Session authentication in Ktor Server | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-session-auth.html", "scrapeId": "242894c8-aaea-4aa4-9ff3-5dab999119f1", "sourceURL": "https://ktor.io/docs/server-session-auth.html", "url": "https://ktor.io/docs/server-session-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure session authentication in ktor?\n\nAssistant: To configure session authentication in ktor, here's what you do:\nThis section demonstrates how to authenticate a user with a [form-based authentication](https://ktor.io/docs/server-form-based-auth.html), save information about this user to a cookie session, and then authorize this user on subsequent requests using the `session` provider.\n\n### Step 1: Create a data class\n\nFirst, you need to create a data class for storing session data:\n\n```kotlin\n@Serializable\ndata class UserSession(val name: String, val count: Int)\n```\n\n### Step 2: Install and configure a session\n\nAfter creating a data class, you need to install and configure the `Sessions` plugin. The example below installs and configures a cookie session with a specified cookie path and expiration time.\n\n```kotlin\ncookie<UserSession>(\"user_session\") {\n        cookie.path = \"/\"\n        cookie.maxAgeInSeconds = 60\n    }\n}\n```\n\n### Step 3: Configure session authentication\n\nThe `session` authentication provider exposes its settings via the [`SessionAuthenticationProvider.Config`](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-session-authentication-provider/-config/index.html) class. In the example below, the following settings are specified:\n\n- The `validate()` function checks the [session instance](https://ktor.io/docs/server-session-auth.html#data-class) and returns a principal of type `Any` in the case of successful authentication.\n- The `challenge()` function specifies an action performed if authentication fails. For instance, you can redirect back to a login page or send an [`UnauthorizedResponse`](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-unauthorized-response/index.html).\n\n```kotlin\ninstall(Authentication) {\n    session<UserSession>(\"auth-session\") {\n        validate { session ->\n            if(session.name.startsWith(\"jet\")) {\n                session\n            } else {\n                null\n            }\n        }\n        challenge {\n            call.respondRedirect(\"/login\")\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-session-auth.html", "title": "Session authentication in Ktor Server", "description": "This page covers how to implement session authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:17:30", "type": "section_detail", "page_metadata": {"og:title": "Session authentication in Ktor Server | Ktor", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:title": "Session authentication in Ktor Server | Ktor", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogTitle": "Session authentication in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.900564761", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-session-auth.html", "twitter:card": "summary_large_image", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Session authentication in Ktor Server | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-session-auth.html", "scrapeId": "242894c8-aaea-4aa4-9ff3-5dab999119f1", "sourceURL": "https://ktor.io/docs/server-session-auth.html", "url": "https://ktor.io/docs/server-session-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I save user data in a session in ktor?\n\nAssistant: To save user data in a session in ktor, here's what you do:\nTo save information about a logged-in user to a session, use the [`call.sessions.set()`](https://ktor.io/docs/server-sessions.html#use_sessions) function.\n\nThe following example shows a simple authentication flow using a web form:\n\n```kotlin\nauthenticate(\"auth-form\") {\n    post(\"/login\") {\n        val userName = call.principal<UserIdPrincipal>()?.name.toString()\n        call.sessions.set(UserSession(name = userName, count = 1))\n        call.respondRedirect(\"/hello\")\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-session-auth.html", "title": "Session authentication in Ktor Server", "description": "This page covers how to implement session authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:17:30", "type": "section_detail", "page_metadata": {"og:title": "Session authentication in Ktor Server | Ktor", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:title": "Session authentication in Ktor Server | Ktor", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogTitle": "Session authentication in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.900564761", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-session-auth.html", "twitter:card": "summary_large_image", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Session authentication in Ktor Server | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-session-auth.html", "scrapeId": "242894c8-aaea-4aa4-9ff3-5dab999119f1", "sourceURL": "https://ktor.io/docs/server-session-auth.html", "url": "https://ktor.io/docs/server-session-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I protect specific resources in ktor?\n\nAssistant: To protect specific resources in ktor, here's what you do:\nAfter configuring the `session` provider, you can protect specific resources in your application with the [`authenticate()`](https://ktor.io/docs/server-auth.html#authenticate-route) function.\n\nUpon successful authentication, you can retrieve an authenticated principal (in this case, the [`UserSession`](https://ktor.io/docs/server-session-auth.html#data-class) instance) by using the `call.principal()` function inside a route handler:\n\n```kotlin\nauthenticate(\"auth-session\") {\n    get(\"/hello\") {\n        val userSession = call.principal<UserSession>()\n        call.sessions.set(userSession?.copy(count = userSession.count + 1))\n        call.respondText(\"Hello, ${userSession?.name}! Visit count is ${userSession?.count}.\")\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-session-auth.html", "title": "Session authentication in Ktor Server", "description": "This page covers how to implement session authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:17:30", "type": "section_detail", "page_metadata": {"og:title": "Session authentication in Ktor Server | Ktor", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:title": "Session authentication in Ktor Server | Ktor", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogTitle": "Session authentication in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.900564761", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-session-auth.html", "twitter:card": "summary_large_image", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Session authentication in Ktor Server | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-session-auth.html", "scrapeId": "242894c8-aaea-4aa4-9ff3-5dab999119f1", "sourceURL": "https://ktor.io/docs/server-session-auth.html", "url": "https://ktor.io/docs/server-session-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Session authentication in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add ktor-server-sessions dependency**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-sessions:$ktor_version\")\n```\n\nThis snippet shows you how to add ktor-server-sessions dependency, which is an important aspect of session authentication in ktor server.\n\n**Add ktor-server-auth dependency**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nThis snippet shows you how to add ktor-server-auth dependency, which is an important aspect of session authentication in ktor server.\n\n**Create UserSession data class**:\n\n```yaml\n@Serializable\ndata class UserSession(val name: String, val count: Int)\n```\n\nThis snippet shows you how to create usersession data class, which is an important aspect of session authentication in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-session-auth.html", "title": "Session authentication in Ktor Server", "description": "This page covers how to implement session authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:17:30", "type": "code_examples", "page_metadata": {"og:title": "Session authentication in Ktor Server | Ktor", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:title": "Session authentication in Ktor Server | Ktor", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogTitle": "Session authentication in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.900564761", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-session-auth.html", "twitter:card": "summary_large_image", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Session authentication in Ktor Server | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-session-auth.html", "scrapeId": "242894c8-aaea-4aa4-9ff3-5dab999119f1", "sourceURL": "https://ktor.io/docs/server-session-auth.html", "url": "https://ktor.io/docs/server-session-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Session authentication in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can get general information about authentication and authorization in Ktor in the Authentication and authorization in Ktor Server section.\n\nFor the complete example, see auth-form-session.\n\nTo learn more about configuring sessions, see Session configuration overview.\n\nFor more details on the form-based authentication flow, refer to the Form-based authentication documentation.\n\nFor the full example, see auth-form-session.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-session-auth.html", "title": "Session authentication in Ktor Server", "description": "This page covers how to implement session authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:17:30", "type": "best_practices", "page_metadata": {"og:title": "Session authentication in Ktor Server | Ktor", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:title": "Session authentication in Ktor Server | Ktor", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:site_name": "Ktor Help", "ogTitle": "Session authentication in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.900564761", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-session-auth.html", "twitter:card": "summary_large_image", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Session authentication in Ktor Server | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-session-auth.html", "scrapeId": "242894c8-aaea-4aa4-9ff3-5dab999119f1", "sourceURL": "https://ktor.io/docs/server-session-auth.html", "url": "https://ktor.io/docs/server-session-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin HttpsRedirect is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin HttpsRedirect in ktor.\n\n# Server Plugin HttpsRedirect\n\nThis page covers the HttpsRedirect plugin for Ktor, which redirects all HTTP requests to their HTTPS counterparts before processing.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `HttpsRedirect`, you need to include the `ktor-server-http-redirect` artifact in the build script:\n\nGradle (Kotlin)\n\nGradle (Groovy)\n\nMaven\n\n```\nimplementation(\"io.ktor:ktor-server-http-redirect:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-server-http-redirect:$ktor_version\"\n```\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-http-redirect-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install HttpsRedirect\n\nTo [install](https://ktor.io/docs/server-plugins.html#install) the `HttpsRedirect` plugin to the application, pass it to the `install` function in the specified [module](https://ktor.io/docs/server-modules.html). The code snippets below show how to install `HttpsRedirect`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.httpsredirect.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(HttpsRedirect)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.httpsredirect.*\n// ...\nfun Application.module() {\n    install(HttpsRedirect)\n    // ...\n}\n```\n\nThe code above installs the `HttpsRedirect` plugin with the default configuration.\n\n## Configure HttpsRedirect\n\nThe code snippet below shows how to configure the desired HTTPS port and return `301 Moved Permanently` for the requested resource:\n\n```\ninstall(HttpsRedirect) {\n    sslPort = 8443\n    permanentRedirect = true\n}\n```\n\nYou can find the full example here: [ssl-engine-main-redirect](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-engine-main-redirect).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-https-redirect.html", "title": "Server Plugin HttpsRedirect", "description": "This page covers the HttpsRedirect plugin for Ktor, which redirects all HTTP requests to their HTTPS counterparts before processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:18:13", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "HttpsRedirect | Ktor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "HttpsRedirect | Ktor", "twitter:title": "HttpsRedirect | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "title": "HttpsRedirect | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.458042858", "og:locale": "en_US", "twitter:description": "", "scrapeId": "28056e36-9418-4e8f-9f14-72625629fb00", "sourceURL": "https://ktor.io/docs/server-https-redirect.html", "url": "https://ktor.io/docs/server-https-redirect.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `HttpsRedirect`, you need to include the `ktor-server-http-redirect` artifact in the build script:\n\nGradle (Kotlin)\n\nGradle (Groovy)\n\nMaven\n\n```\nimplementation(\"io.ktor:ktor-server-http-redirect:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-server-http-redirect:$ktor_version\"\n```\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-http-redirect-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-https-redirect.html", "title": "Server Plugin HttpsRedirect", "description": "This page covers the HttpsRedirect plugin for Ktor, which redirects all HTTP requests to their HTTPS counterparts before processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:18:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "HttpsRedirect | Ktor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "HttpsRedirect | Ktor", "twitter:title": "HttpsRedirect | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "title": "HttpsRedirect | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.458042858", "og:locale": "en_US", "twitter:description": "", "scrapeId": "28056e36-9418-4e8f-9f14-72625629fb00", "sourceURL": "https://ktor.io/docs/server-https-redirect.html", "url": "https://ktor.io/docs/server-https-redirect.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install httpsredirect in ktor?\n\nAssistant: To install httpsredirect in ktor, here's what you do:\nTo [install](https://ktor.io/docs/server-plugins.html#install) the `HttpsRedirect` plugin to the application, pass it to the `install` function in the specified [module](https://ktor.io/docs/server-modules.html). The code snippets below show how to install `HttpsRedirect`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.httpsredirect.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(HttpsRedirect)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.httpsredirect.*\n// ...\nfun Application.module() {\n    install(HttpsRedirect)\n    // ...\n}\n```\n\nThe code above installs the `HttpsRedirect` plugin with the default configuration..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-https-redirect.html", "title": "Server Plugin HttpsRedirect", "description": "This page covers the HttpsRedirect plugin for Ktor, which redirects all HTTP requests to their HTTPS counterparts before processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:18:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "HttpsRedirect | Ktor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "HttpsRedirect | Ktor", "twitter:title": "HttpsRedirect | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "title": "HttpsRedirect | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.458042858", "og:locale": "en_US", "twitter:description": "", "scrapeId": "28056e36-9418-4e8f-9f14-72625629fb00", "sourceURL": "https://ktor.io/docs/server-https-redirect.html", "url": "https://ktor.io/docs/server-https-redirect.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure httpsredirect in ktor?\n\nAssistant: To configure httpsredirect in ktor, here's what you do:\nThe code snippet below shows how to configure the desired HTTPS port and return `301 Moved Permanently` for the requested resource:\n\n```\ninstall(HttpsRedirect) {\n    sslPort = 8443\n    permanentRedirect = true\n}\n```\n\nYou can find the full example here: [ssl-engine-main-redirect](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/ssl-engine-main-redirect)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-https-redirect.html", "title": "Server Plugin HttpsRedirect", "description": "This page covers the HttpsRedirect plugin for Ktor, which redirects all HTTP requests to their HTTPS counterparts before processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:18:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "HttpsRedirect | Ktor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "HttpsRedirect | Ktor", "twitter:title": "HttpsRedirect | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "title": "HttpsRedirect | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.458042858", "og:locale": "en_US", "twitter:description": "", "scrapeId": "28056e36-9418-4e8f-9f14-72625629fb00", "sourceURL": "https://ktor.io/docs/server-https-redirect.html", "url": "https://ktor.io/docs/server-https-redirect.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin HttpsRedirect in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install HttpsRedirect in embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.httpsredirect.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(HttpsRedirect)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install httpsredirect in embeddedserver, which is an important aspect of server plugin httpsredirect.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-https-redirect.html", "title": "Server Plugin HttpsRedirect", "description": "This page covers the HttpsRedirect plugin for Ktor, which redirects all HTTP requests to their HTTPS counterparts before processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:18:13", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "HttpsRedirect | Ktor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "HttpsRedirect | Ktor", "twitter:title": "HttpsRedirect | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "title": "HttpsRedirect | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.458042858", "og:locale": "en_US", "twitter:description": "", "scrapeId": "28056e36-9418-4e8f-9f14-72625629fb00", "sourceURL": "https://ktor.io/docs/server-https-redirect.html", "url": "https://ktor.io/docs/server-https-redirect.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin HttpsRedirect in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen behind a reverse proxy, you need to install the `ForwardedHeader` or the `XForwardedHeader` plugin to detect HTTPS requests properly. If you get infinite redirect after installing one of these plugins, check out [this FAQ entry](https://ktor.io/docs/faq.html#infinite-redirect) for more details.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-https-redirect.html", "title": "Server Plugin HttpsRedirect", "description": "This page covers the HttpsRedirect plugin for Ktor, which redirects all HTTP requests to their HTTPS counterparts before processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:18:13", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "HttpsRedirect | Ktor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:title": "HttpsRedirect | Ktor", "twitter:title": "HttpsRedirect | Ktor", "twitter:site": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "title": "HttpsRedirect | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-https-redirect.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:05.458042858", "og:locale": "en_US", "twitter:description": "", "scrapeId": "28056e36-9418-4e8f-9f14-72625629fb00", "sourceURL": "https://ktor.io/docs/server-https-redirect.html", "url": "https://ktor.io/docs/server-https-redirect.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what WebSocket Deflate extension is in ktor?\n\nAssistant: Sure, I'd be happy to explain WebSocket Deflate extension in ktor.\n\n# WebSocket Deflate extension\n\nKtor implements Deflate WebSocket extensions RFC-7692 for the client and server. The extension can transparently compress frame before sending, and decompress after receiving. It's useful to enable this extension if you're sending large amounts of text data.Here's a quick rundown of what this is about:\n\n## Installation\n\nTo use the extension, it should be installed first. To do that we can use install method in extensions block:\n\n```kotlin\n// For client and server\ninstall(WebSockets) {\n    extensions {\n        install(WebSocketDeflateExtension) {\n            /**\n             * Compression level to use for [java.util.zip.Deflater].\n             */\n            compressionLevel = Deflater.DEFAULT_COMPRESSION\n\n            /**\n             * Prevent compressing small outgoing frames.\n             */\n            compressIfBiggerThan(bytes = 4 * 1024)\n        }\n    }\n}\n```\n\n## Advanced configuration parameters\n\n### Context takeover\n\nSpecify if the client (and server) should use a compression window. Enabling these parameters reduces the amount of space allocated per single session. Note that the window size cannot be configured due to limitations of `java.util.zip.Deflater` API. The value is fixed to `15`.\n\n```\nclientNoContextTakeOver = false\n\nserverNoContextTakeOver = false\n```\n\nThese parameters are described in [RFC-7692 Section 7.1.1](https://tools.ietf.org/html/rfc7692#section-7.1.1)\n\n### Specify compress condition\n\nTo specify a compress condition explicitly, you can use the `compressIf` method. For instance, to compress text-only:\n\n```\ncompressIf { frame ->\n    frame is Frame.Text\n}\n```\n\nAll calls to `compressIf` will be evaluated before compression takes place.\n\n### Fine-tune list of protocols\n\nThe list of protocols to send can be edited as needed using the `configureProtocols` method:\n\n```\nconfigureProtocols { protocols ->\n    protocols.clear()\n    protocols.add(...)\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-deflate.html", "title": "WebSocket Deflate extension", "description": "Ktor implements Deflate WebSocket extensions RFC-7692 for the client and server. The extension can transparently compress frame before sending, and decompress after receiving. It's useful to enable this extension if you're sending large amounts of text data.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:18:41", "type": "overview", "page_metadata": {"twitter:title": "WebSocket Deflate extension | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-deflate.html", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "WebSocket Deflate extension | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "ogDescription": "", "twitter:description": "", "og:title": "WebSocket Deflate extension | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-deflate.html", "og:site_name": "Ktor Help", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.008305596", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "WebSocket Deflate extension | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "1878d3bf-6041-405d-bb22-3bb490ca9477", "sourceURL": "https://ktor.io/docs/server-websocket-deflate.html", "url": "https://ktor.io/docs/server-websocket-deflate.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I installation in ktor?\n\nAssistant: To installation in ktor, here's what you do:\nTo use the extension, it should be installed first. To do that we can use install method in extensions block:\n\n```kotlin\n// For client and server\ninstall(WebSockets) {\n    extensions {\n        install(WebSocketDeflateExtension) {\n            /**\n             * Compression level to use for [java.util.zip.Deflater].\n             */\n            compressionLevel = Deflater.DEFAULT_COMPRESSION\n\n            /**\n             * Prevent compressing small outgoing frames.\n             */\n            compressIfBiggerThan(bytes = 4 * 1024)\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-deflate.html", "title": "WebSocket Deflate extension", "description": "Ktor implements Deflate WebSocket extensions RFC-7692 for the client and server. The extension can transparently compress frame before sending, and decompress after receiving. It's useful to enable this extension if you're sending large amounts of text data.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:18:41", "type": "section_detail", "page_metadata": {"twitter:title": "WebSocket Deflate extension | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-deflate.html", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "WebSocket Deflate extension | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "ogDescription": "", "twitter:description": "", "og:title": "WebSocket Deflate extension | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-deflate.html", "og:site_name": "Ktor Help", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.008305596", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "WebSocket Deflate extension | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "1878d3bf-6041-405d-bb22-3bb490ca9477", "sourceURL": "https://ktor.io/docs/server-websocket-deflate.html", "url": "https://ktor.io/docs/server-websocket-deflate.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I advanced configuration parameters in ktor?\n\nAssistant: To advanced configuration parameters in ktor, here's what you do:\n### Context takeover\n\nSpecify if the client (and server) should use a compression window. Enabling these parameters reduces the amount of space allocated per single session. Note that the window size cannot be configured due to limitations of `java.util.zip.Deflater` API. The value is fixed to `15`.\n\n```\nclientNoContextTakeOver = false\n\nserverNoContextTakeOver = false\n```\n\nThese parameters are described in [RFC-7692 Section 7.1.1](https://tools.ietf.org/html/rfc7692#section-7.1.1)\n\n### Specify compress condition\n\nTo specify a compress condition explicitly, you can use the `compressIf` method. For instance, to compress text-only:\n\n```\ncompressIf { frame ->\n    frame is Frame.Text\n}\n```\n\nAll calls to `compressIf` will be evaluated before compression takes place.\n\n### Fine-tune list of protocols\n\nThe list of protocols to send can be edited as needed using the `configureProtocols` method:\n\n```\nconfigureProtocols { protocols ->\n    protocols.clear()\n    protocols.add(...)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-deflate.html", "title": "WebSocket Deflate extension", "description": "Ktor implements Deflate WebSocket extensions RFC-7692 for the client and server. The extension can transparently compress frame before sending, and decompress after receiving. It's useful to enable this extension if you're sending large amounts of text data.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:18:41", "type": "section_detail", "page_metadata": {"twitter:title": "WebSocket Deflate extension | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-deflate.html", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "WebSocket Deflate extension | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "ogDescription": "", "twitter:description": "", "og:title": "WebSocket Deflate extension | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-deflate.html", "og:site_name": "Ktor Help", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.008305596", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "WebSocket Deflate extension | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "1878d3bf-6041-405d-bb22-3bb490ca9477", "sourceURL": "https://ktor.io/docs/server-websocket-deflate.html", "url": "https://ktor.io/docs/server-websocket-deflate.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for WebSocket Deflate extension in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Installation Example**:\n\n```yaml\n// For client and server\ninstall(WebSockets) {\n    extensions {\n        install(WebSocketDeflateExtension) {\n            /**\n             * Compression level to use for [java.util.zip.Deflater].\n             */\n            compressionLevel = Deflater.DEFAULT_COMPRESSION\n\n            /**\n             * Prevent compressing small outgoing frames.\n             */\n            compressIfBiggerThan(bytes = 4 * 1024)\n        }\n    }\n}\n```\n\nThis snippet shows you how to installation example, which is an important aspect of websocket deflate extension.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-deflate.html", "title": "WebSocket Deflate extension", "description": "Ktor implements Deflate WebSocket extensions RFC-7692 for the client and server. The extension can transparently compress frame before sending, and decompress after receiving. It's useful to enable this extension if you're sending large amounts of text data.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:18:41", "type": "code_examples", "page_metadata": {"twitter:title": "WebSocket Deflate extension | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-deflate.html", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "WebSocket Deflate extension | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "ogDescription": "", "twitter:description": "", "og:title": "WebSocket Deflate extension | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-deflate.html", "og:site_name": "Ktor Help", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.008305596", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "WebSocket Deflate extension | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "1878d3bf-6041-405d-bb22-3bb490ca9477", "sourceURL": "https://ktor.io/docs/server-websocket-deflate.html", "url": "https://ktor.io/docs/server-websocket-deflate.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using WebSocket Deflate extension in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnable the Deflate extension when sending large amounts of text data to optimize performance.\n\nUse the compressIf method to specify conditions under which frames should be compressed.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-deflate.html", "title": "WebSocket Deflate extension", "description": "Ktor implements Deflate WebSocket extensions RFC-7692 for the client and server. The extension can transparently compress frame before sending, and decompress after receiving. It's useful to enable this extension if you're sending large amounts of text data.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:18:41", "type": "best_practices", "page_metadata": {"twitter:title": "WebSocket Deflate extension | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-deflate.html", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "WebSocket Deflate extension | Ktor Documentation", "ogSiteName": "Ktor Help", "og:description": "", "ogDescription": "", "twitter:description": "", "og:title": "WebSocket Deflate extension | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-deflate.html", "og:site_name": "Ktor Help", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:06.008305596", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogTitle": "WebSocket Deflate extension | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "1878d3bf-6041-405d-bb22-3bb490ca9477", "sourceURL": "https://ktor.io/docs/server-websocket-deflate.html", "url": "https://ktor.io/docs/server-websocket-deflate.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Default request is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Default request in ktor.\n\n# Client Plugin Default request\n\nThe DefaultRequest plugin allows you to configure default parameters for all requests: specify a base URL, add headers, configure query parameters, and so on.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nDefaultRequest only requires the ktor-client-core artifact and doesn't need any specific dependencies.\n\n## Install DefaultRequest\n\nTo install DefaultRequest, pass it to the install function inside a client configuration block or call the defaultRequest function and configure required request parameters.\n\n## Configure DefaultRequest\n\nDefaultRequest allows you to configure a base part of the URL that is merged with a request URL. You can also specify URL components separately, add headers, and avoid duplicating headers.\n\n## Example\n\nThe example below uses the DefaultRequest configuration to define an HTTP scheme, a host, a base URL path, and a query parameter, along with a custom header.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-default-request.html", "title": "Client Plugin Default request", "description": "The DefaultRequest plugin allows you to configure default parameters for all requests: specify a base URL, add headers, configure query parameters, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:24:23", "type": "overview", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-default-request.html", "ogDescription": "", "ogLocale": "en_US", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-default-request.html", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Default request | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Default request | Ktor", "twitter:description": "", "og:title": "Default request | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "ogTitle": "Default request | Ktor", "built-on": "2025-02-26T14:01:02.361836661", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a37688d7-04f2-4576-adf8-f37d9583a36e", "sourceURL": "https://ktor.io/docs/client-default-request.html", "url": "https://ktor.io/docs/client-default-request.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nDefaultRequest only requires the ktor-client-core artifact and doesn't need any specific dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-default-request.html", "title": "Client Plugin Default request", "description": "The DefaultRequest plugin allows you to configure default parameters for all requests: specify a base URL, add headers, configure query parameters, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:24:23", "type": "section_detail", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-default-request.html", "ogDescription": "", "ogLocale": "en_US", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-default-request.html", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Default request | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Default request | Ktor", "twitter:description": "", "og:title": "Default request | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "ogTitle": "Default request | Ktor", "built-on": "2025-02-26T14:01:02.361836661", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a37688d7-04f2-4576-adf8-f37d9583a36e", "sourceURL": "https://ktor.io/docs/client-default-request.html", "url": "https://ktor.io/docs/client-default-request.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install defaultrequest in ktor?\n\nAssistant: To install defaultrequest in ktor, here's what you do:\nTo install DefaultRequest, pass it to the install function inside a client configuration block or call the defaultRequest function and configure required request parameters..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-default-request.html", "title": "Client Plugin Default request", "description": "The DefaultRequest plugin allows you to configure default parameters for all requests: specify a base URL, add headers, configure query parameters, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:24:23", "type": "section_detail", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-default-request.html", "ogDescription": "", "ogLocale": "en_US", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-default-request.html", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Default request | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Default request | Ktor", "twitter:description": "", "og:title": "Default request | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "ogTitle": "Default request | Ktor", "built-on": "2025-02-26T14:01:02.361836661", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a37688d7-04f2-4576-adf8-f37d9583a36e", "sourceURL": "https://ktor.io/docs/client-default-request.html", "url": "https://ktor.io/docs/client-default-request.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure defaultrequest in ktor?\n\nAssistant: To configure defaultrequest in ktor, here's what you do:\nDefaultRequest allows you to configure a base part of the URL that is merged with a request URL. You can also specify URL components separately, add headers, and avoid duplicating headers..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-default-request.html", "title": "Client Plugin Default request", "description": "The DefaultRequest plugin allows you to configure default parameters for all requests: specify a base URL, add headers, configure query parameters, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:24:23", "type": "section_detail", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-default-request.html", "ogDescription": "", "ogLocale": "en_US", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-default-request.html", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Default request | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Default request | Ktor", "twitter:description": "", "og:title": "Default request | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "ogTitle": "Default request | Ktor", "built-on": "2025-02-26T14:01:02.361836661", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a37688d7-04f2-4576-adf8-f37d9583a36e", "sourceURL": "https://ktor.io/docs/client-default-request.html", "url": "https://ktor.io/docs/client-default-request.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example in ktor?\n\nAssistant: To example in ktor, here's what you do:\nThe example below uses the DefaultRequest configuration to define an HTTP scheme, a host, a base URL path, and a query parameter, along with a custom header..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-default-request.html", "title": "Client Plugin Default request", "description": "The DefaultRequest plugin allows you to configure default parameters for all requests: specify a base URL, add headers, configure query parameters, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:24:23", "type": "section_detail", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-default-request.html", "ogDescription": "", "ogLocale": "en_US", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-default-request.html", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Default request | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Default request | Ktor", "twitter:description": "", "og:title": "Default request | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "ogTitle": "Default request | Ktor", "built-on": "2025-02-26T14:01:02.361836661", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a37688d7-04f2-4576-adf8-f37d9583a36e", "sourceURL": "https://ktor.io/docs/client-default-request.html", "url": "https://ktor.io/docs/client-default-request.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Default request in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install DefaultRequest**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.*\n//...\nval client = HttpClient(CIO) {\n    install(DefaultRequest)\n}\n```\n\nThis snippet shows you how to install defaultrequest, which is an important aspect of client plugin default request.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-default-request.html", "title": "Client Plugin Default request", "description": "The DefaultRequest plugin allows you to configure default parameters for all requests: specify a base URL, add headers, configure query parameters, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:24:23", "type": "code_examples", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-default-request.html", "ogDescription": "", "ogLocale": "en_US", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-default-request.html", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Default request | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Default request | Ktor", "twitter:description": "", "og:title": "Default request | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "ogTitle": "Default request | Ktor", "built-on": "2025-02-26T14:01:02.361836661", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a37688d7-04f2-4576-adf8-f37d9583a36e", "sourceURL": "https://ktor.io/docs/client-default-request.html", "url": "https://ktor.io/docs/client-default-request.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Default request in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the header function to add a specific header to each request.\n\nTo avoid duplicating headers, use appendIfNameAbsent, appendIfNameAndValueAbsent, and contains functions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-default-request.html", "title": "Client Plugin Default request", "description": "The DefaultRequest plugin allows you to configure default parameters for all requests: specify a base URL, add headers, configure query parameters, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:24:23", "type": "best_practices", "page_metadata": {"og:description": "", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-default-request.html", "ogDescription": "", "ogLocale": "en_US", "og:type": "website", "ogUrl": "https://ktor.io/docs/3.1.1/client-default-request.html", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Default request | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Default request | Ktor", "twitter:description": "", "og:title": "Default request | Ktor", "ogSiteName": "Ktor Help", "build-number": "707", "ogTitle": "Default request | Ktor", "built-on": "2025-02-26T14:01:02.361836661", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a37688d7-04f2-4576-adf8-f37d9583a36e", "sourceURL": "https://ktor.io/docs/client-default-request.html", "url": "https://ktor.io/docs/client-default-request.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Basic authentication in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Basic authentication in Ktor Server in ktor.\n\n# Basic authentication in Ktor Server\n\nThis page covers how to implement basic authentication in Ktor Server, including setup, configuration, and best practices.Here's a quick rundown of what this is about:\n\n## Basic authentication scheme\n\nThe Basic authentication scheme is a part of the HTTP framework used for access control and authentication. In this scheme, user credentials are transmitted as username/password pairs encoded using Base64.\n\nKtor allows you to use basic authentication for logging in users and protecting specific routes. You can get general information about authentication in Ktor in the Authentication and authorization in Ktor Server section.\n\n## Add dependencies\n\nTo enable basic authentication, you need to include the ktor-server-auth artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Basic authentication flow\n\nThe basic authentication flow looks as follows:\n\n1. A client makes a request without the Authorization header to a specific route in a server application.\n\n2. A server responds to a client with a 401 (Unauthorized) response status and uses a WWW-Authenticate response header to provide information that the basic authentication scheme is used to protect a route. A typical WWW-Authenticate header looks like this:\n```\nWWW-Authenticate: Basic realm=\"Access to the '/' path\", charset=\"UTF-8\"\n```\n\n3. Usually, a client displays a login dialog where a user can enter credentials. Then, a client makes a request with the Authorization header containing a username and password pair encoded using Base64, for example:\n```\nAuthorization: Basic amV0YnJhaW5zOmZvb2Jhcg\n```\n\n4. A server validates credentials sent by a client and responds with the requested content.\n\n## Install basic authentication\n\nTo install the basic authentication provider, call the basic function inside the install block:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    basic {\n        // Configure basic authentication\n    }\n}\n```\n\n## Configure basic authentication\n\nTo get a general idea of how to configure different authentication providers in Ktor, see Configure Authentication. In this section, we'll see on configuration specifics of the basic authentication provider.\n\n### Step 1: Configure a basic provider\nThe basic authentication provider exposes its settings via the BasicAuthenticationProvider.Configuration class. In the example below, the following settings are specified:\n- The realm property sets the realm to be passed in the WWW-Authenticate header.\n- The validate function validates a username and password.\n```\ninstall(Authentication) {\n    basic(\"auth-basic\") {\n        realm = \"Access to the '/' path\"\n        validate { credentials ->\n            if (credentials.name == \"jetbrains\" && credentials.password == \"foobar\") {\n                UserIdPrincipal(credentials.name)\n            } else {\n                null\n            }\n        }\n    }\n}\n```\nThe validate function checks UserPasswordCredential and returns a UserIdPrincipal in the case of successful authentication or null if authentication fails.\n\n## Validate with UserHashedTableAuth\n\nKtor allows you to use UserHashedTableAuth to validate users stored in an in-memory table that keeps usernames and password hashes. This allows you not to compromise user passwords if your data source is leaked.\n\nTo use UserHashedTableAuth for validating users, follow the steps below:\n\n1. Create a digest function with the specified algorithm and salt provider using the getDigestFunction function:\n```\nval digestFunction = getDigestFunction(\"SHA-256\") { \"ktor${it.length}\" }\n```\n\n2. Initialize a new instance of UserHashedTableAuth and specify the following properties:\n   - Provide a table of usernames and hashed passwords using the table property.\n   - Assign a digest function to the digester property.\n```\nval hashedUserTable = UserHashedTableAuth(\n    table = mapOf(\n        \"jetbrains\" to digestFunction(\"foobar\"),\n        \"admin\" to digestFunction(\"password\")\n    ),\n    digester = digestFunction\n)\n```\n\n3. Inside the validate function, call the UserHashedTableAuth.authenticate function to authenticate a user and return an instance of UserIdPrincipal if the credentials are valid:\n```\ninstall(Authentication) {\n       basic(\"auth-basic-hashed\") {\n           realm = \"Access to the '/' path\"\n           validate { credentials ->\n               hashedUserTable.authenticate(credentials)\n           }\n       }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-basic-auth.html", "title": "Basic authentication in Ktor Server", "description": "This page covers how to implement basic authentication in Ktor Server, including setup, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:24:52", "type": "overview", "page_metadata": {"build-number": "707", "og:description": "", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Basic authentication in Ktor Server | Ktor", "built-on": "2025-02-26T14:01:03.456918335", "og:url": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "og:type": "website", "ogSiteName": "Ktor Help", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Basic authentication in Ktor Server | Ktor", "title": "Basic authentication in Ktor Server | Ktor Documentation", "ogLocale": "en_US", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Basic authentication in Ktor Server | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a52f63aa-96b3-4458-9ed5-eb5b93af7fe1", "sourceURL": "https://ktor.io/docs/server-basic-auth.html", "url": "https://ktor.io/docs/server-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I basic authentication scheme in ktor?\n\nAssistant: To basic authentication scheme in ktor, here's what you do:\nThe Basic authentication scheme is a part of the HTTP framework used for access control and authentication. In this scheme, user credentials are transmitted as username/password pairs encoded using Base64.\n\nKtor allows you to use basic authentication for logging in users and protecting specific routes. You can get general information about authentication in Ktor in the Authentication and authorization in Ktor Server section..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-basic-auth.html", "title": "Basic authentication in Ktor Server", "description": "This page covers how to implement basic authentication in Ktor Server, including setup, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:24:52", "type": "section_detail", "page_metadata": {"build-number": "707", "og:description": "", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Basic authentication in Ktor Server | Ktor", "built-on": "2025-02-26T14:01:03.456918335", "og:url": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "og:type": "website", "ogSiteName": "Ktor Help", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Basic authentication in Ktor Server | Ktor", "title": "Basic authentication in Ktor Server | Ktor Documentation", "ogLocale": "en_US", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Basic authentication in Ktor Server | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a52f63aa-96b3-4458-9ed5-eb5b93af7fe1", "sourceURL": "https://ktor.io/docs/server-basic-auth.html", "url": "https://ktor.io/docs/server-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo enable basic authentication, you need to include the ktor-server-auth artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-basic-auth.html", "title": "Basic authentication in Ktor Server", "description": "This page covers how to implement basic authentication in Ktor Server, including setup, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:24:52", "type": "section_detail", "page_metadata": {"build-number": "707", "og:description": "", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Basic authentication in Ktor Server | Ktor", "built-on": "2025-02-26T14:01:03.456918335", "og:url": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "og:type": "website", "ogSiteName": "Ktor Help", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Basic authentication in Ktor Server | Ktor", "title": "Basic authentication in Ktor Server | Ktor Documentation", "ogLocale": "en_US", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Basic authentication in Ktor Server | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a52f63aa-96b3-4458-9ed5-eb5b93af7fe1", "sourceURL": "https://ktor.io/docs/server-basic-auth.html", "url": "https://ktor.io/docs/server-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I basic authentication flow in ktor?\n\nAssistant: To basic authentication flow in ktor, here's what you do:\nThe basic authentication flow looks as follows:\n\n1. A client makes a request without the Authorization header to a specific route in a server application.\n\n2. A server responds to a client with a 401 (Unauthorized) response status and uses a WWW-Authenticate response header to provide information that the basic authentication scheme is used to protect a route. A typical WWW-Authenticate header looks like this:\n```\nWWW-Authenticate: Basic realm=\"Access to the '/' path\", charset=\"UTF-8\"\n```\n\n3. Usually, a client displays a login dialog where a user can enter credentials. Then, a client makes a request with the Authorization header containing a username and password pair encoded using Base64, for example:\n```\nAuthorization: Basic amV0YnJhaW5zOmZvb2Jhcg\n```\n\n4. A server validates credentials sent by a client and responds with the requested content..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-basic-auth.html", "title": "Basic authentication in Ktor Server", "description": "This page covers how to implement basic authentication in Ktor Server, including setup, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:24:52", "type": "section_detail", "page_metadata": {"build-number": "707", "og:description": "", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Basic authentication in Ktor Server | Ktor", "built-on": "2025-02-26T14:01:03.456918335", "og:url": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "og:type": "website", "ogSiteName": "Ktor Help", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Basic authentication in Ktor Server | Ktor", "title": "Basic authentication in Ktor Server | Ktor Documentation", "ogLocale": "en_US", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Basic authentication in Ktor Server | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a52f63aa-96b3-4458-9ed5-eb5b93af7fe1", "sourceURL": "https://ktor.io/docs/server-basic-auth.html", "url": "https://ktor.io/docs/server-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install basic authentication in ktor?\n\nAssistant: To install basic authentication in ktor, here's what you do:\nTo install the basic authentication provider, call the basic function inside the install block:\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    basic {\n        // Configure basic authentication\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-basic-auth.html", "title": "Basic authentication in Ktor Server", "description": "This page covers how to implement basic authentication in Ktor Server, including setup, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:24:52", "type": "section_detail", "page_metadata": {"build-number": "707", "og:description": "", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Basic authentication in Ktor Server | Ktor", "built-on": "2025-02-26T14:01:03.456918335", "og:url": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "og:type": "website", "ogSiteName": "Ktor Help", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Basic authentication in Ktor Server | Ktor", "title": "Basic authentication in Ktor Server | Ktor Documentation", "ogLocale": "en_US", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Basic authentication in Ktor Server | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a52f63aa-96b3-4458-9ed5-eb5b93af7fe1", "sourceURL": "https://ktor.io/docs/server-basic-auth.html", "url": "https://ktor.io/docs/server-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure basic authentication in ktor?\n\nAssistant: To configure basic authentication in ktor, here's what you do:\nTo get a general idea of how to configure different authentication providers in Ktor, see Configure Authentication. In this section, we'll see on configuration specifics of the basic authentication provider.\n\n### Step 1: Configure a basic provider\nThe basic authentication provider exposes its settings via the BasicAuthenticationProvider.Configuration class. In the example below, the following settings are specified:\n- The realm property sets the realm to be passed in the WWW-Authenticate header.\n- The validate function validates a username and password.\n```\ninstall(Authentication) {\n    basic(\"auth-basic\") {\n        realm = \"Access to the '/' path\"\n        validate { credentials ->\n            if (credentials.name == \"jetbrains\" && credentials.password == \"foobar\") {\n                UserIdPrincipal(credentials.name)\n            } else {\n                null\n            }\n        }\n    }\n}\n```\nThe validate function checks UserPasswordCredential and returns a UserIdPrincipal in the case of successful authentication or null if authentication fails..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-basic-auth.html", "title": "Basic authentication in Ktor Server", "description": "This page covers how to implement basic authentication in Ktor Server, including setup, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:24:52", "type": "section_detail", "page_metadata": {"build-number": "707", "og:description": "", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Basic authentication in Ktor Server | Ktor", "built-on": "2025-02-26T14:01:03.456918335", "og:url": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "og:type": "website", "ogSiteName": "Ktor Help", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Basic authentication in Ktor Server | Ktor", "title": "Basic authentication in Ktor Server | Ktor Documentation", "ogLocale": "en_US", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Basic authentication in Ktor Server | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a52f63aa-96b3-4458-9ed5-eb5b93af7fe1", "sourceURL": "https://ktor.io/docs/server-basic-auth.html", "url": "https://ktor.io/docs/server-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I validate with userhashedtableauth in ktor?\n\nAssistant: To validate with userhashedtableauth in ktor, here's what you do:\nKtor allows you to use UserHashedTableAuth to validate users stored in an in-memory table that keeps usernames and password hashes. This allows you not to compromise user passwords if your data source is leaked.\n\nTo use UserHashedTableAuth for validating users, follow the steps below:\n\n1. Create a digest function with the specified algorithm and salt provider using the getDigestFunction function:\n```\nval digestFunction = getDigestFunction(\"SHA-256\") { \"ktor${it.length}\" }\n```\n\n2. Initialize a new instance of UserHashedTableAuth and specify the following properties:\n   - Provide a table of usernames and hashed passwords using the table property.\n   - Assign a digest function to the digester property.\n```\nval hashedUserTable = UserHashedTableAuth(\n    table = mapOf(\n        \"jetbrains\" to digestFunction(\"foobar\"),\n        \"admin\" to digestFunction(\"password\")\n    ),\n    digester = digestFunction\n)\n```\n\n3. Inside the validate function, call the UserHashedTableAuth.authenticate function to authenticate a user and return an instance of UserIdPrincipal if the credentials are valid:\n```\ninstall(Authentication) {\n       basic(\"auth-basic-hashed\") {\n           realm = \"Access to the '/' path\"\n           validate { credentials ->\n               hashedUserTable.authenticate(credentials)\n           }\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-basic-auth.html", "title": "Basic authentication in Ktor Server", "description": "This page covers how to implement basic authentication in Ktor Server, including setup, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:24:52", "type": "section_detail", "page_metadata": {"build-number": "707", "og:description": "", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Basic authentication in Ktor Server | Ktor", "built-on": "2025-02-26T14:01:03.456918335", "og:url": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "og:type": "website", "ogSiteName": "Ktor Help", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Basic authentication in Ktor Server | Ktor", "title": "Basic authentication in Ktor Server | Ktor Documentation", "ogLocale": "en_US", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Basic authentication in Ktor Server | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a52f63aa-96b3-4458-9ed5-eb5b93af7fe1", "sourceURL": "https://ktor.io/docs/server-basic-auth.html", "url": "https://ktor.io/docs/server-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Basic authentication in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies (gradle kotlin), which is an important aspect of basic authentication in ktor server.\n\n**Add dependencies (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies (gradle groovy), which is an important aspect of basic authentication in ktor server.\n\n**Add dependencies (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies (maven), which is an important aspect of basic authentication in ktor server.\n\n**Basic authentication flow (WWW-Authenticate header)**:\n\n```yaml\nWWW-Authenticate: Basic realm=\"Access to the '/' path\", charset=\"UTF-8\"\n```\n\nThis snippet shows you how to basic authentication flow (www-authenticate header), which is an important aspect of basic authentication in ktor server.\n\n**Basic authentication flow (Authorization header)**:\n\n```yaml\nAuthorization: Basic amV0YnJhaW5zOmZvb2Jhcg\n```\n\nThis snippet shows you how to basic authentication flow (authorization header), which is an important aspect of basic authentication in ktor server.\n\n**Install basic authentication**:\n\n```yaml\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    basic {\n        // Configure basic authentication\n    }\n}\n```\n\nThis snippet shows you how to install basic authentication, which is an important aspect of basic authentication in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-basic-auth.html", "title": "Basic authentication in Ktor Server", "description": "This page covers how to implement basic authentication in Ktor Server, including setup, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:24:52", "type": "code_examples", "page_metadata": {"build-number": "707", "og:description": "", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Basic authentication in Ktor Server | Ktor", "built-on": "2025-02-26T14:01:03.456918335", "og:url": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "og:type": "website", "ogSiteName": "Ktor Help", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Basic authentication in Ktor Server | Ktor", "title": "Basic authentication in Ktor Server | Ktor Documentation", "ogLocale": "en_US", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Basic authentication in Ktor Server | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a52f63aa-96b3-4458-9ed5-eb5b93af7fe1", "sourceURL": "https://ktor.io/docs/server-basic-auth.html", "url": "https://ktor.io/docs/server-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Basic authentication in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nGiven that basic authentication passes username and password as a clear text, you need to use HTTPS/TLS to protect sensitive information.\n\nYou can also use UserHashedTableAuth to validate users stored in an in-memory table that keeps usernames and password hashes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-basic-auth.html", "title": "Basic authentication in Ktor Server", "description": "This page covers how to implement basic authentication in Ktor Server, including setup, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 04:24:52", "type": "best_practices", "page_metadata": {"build-number": "707", "og:description": "", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:title": "Basic authentication in Ktor Server | Ktor", "built-on": "2025-02-26T14:01:03.456918335", "og:url": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-basic-auth.html", "og:type": "website", "ogSiteName": "Ktor Help", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Basic authentication in Ktor Server | Ktor", "title": "Basic authentication in Ktor Server | Ktor Documentation", "ogLocale": "en_US", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Basic authentication in Ktor Server | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a52f63aa-96b3-4458-9ed5-eb5b93af7fe1", "sourceURL": "https://ktor.io/docs/server-basic-auth.html", "url": "https://ktor.io/docs/server-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Shutdown URL is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Shutdown URL in ktor.\n\n# Server Plugin Shutdown URL\n\nThe ShutDownUrl plugin allows you to configure a URL used to shut down the server.Here's a quick rundown of what this is about:\n\n## Configure shutdown URL in a configuration file\n\nYou can configure a shutdown URL in a configuration file using the ktor.deployment.shutdown.url property.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        shutdown.url = \"/shutdown\"\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        shutdown:\n            url: \"/shutdown\"\n```\n\n## Configure shutdown URL by installing the plugin\n\nTo install and configure shutdown URL in code, pass ShutDownUrl.ApplicationCallPlugin to the install function and use the shutDownUrl property:\n\n```\ninstall(ShutDownUrl.ApplicationCallPlugin) {\n    shutDownUrl = \"/shutdown\"\n    exitCodeSupplier = { 0 }\n}\n```\n\nFor the full example, see shutdown-url.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-shutdown-url.html", "title": "Server Plugin Shutdown URL", "description": "The ShutDownUrl plugin allows you to configure a URL used to shut down the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:25:30", "type": "overview", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "og:description": "", "title": "Shutdown URL | Ktor Documentation", "og:locale": "en_US", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:03.369835182", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Shutdown URL | Ktor", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-shutdown-url.html", "og:title": "Shutdown URL | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Shutdown URL | Ktor", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-shutdown-url.html", "og:type": "website", "scrapeId": "b1446d38-e0c0-4d83-a605-085b65863a24", "sourceURL": "https://ktor.io/docs/server-shutdown-url.html", "url": "https://ktor.io/docs/server-shutdown-url.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure shutdown url in a configuration file in ktor?\n\nAssistant: To configure shutdown url in a configuration file in ktor, here's what you do:\nYou can configure a shutdown URL in a configuration file using the ktor.deployment.shutdown.url property.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        shutdown.url = \"/shutdown\"\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        shutdown:\n            url: \"/shutdown\"\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-shutdown-url.html", "title": "Server Plugin Shutdown URL", "description": "The ShutDownUrl plugin allows you to configure a URL used to shut down the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:25:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "og:description": "", "title": "Shutdown URL | Ktor Documentation", "og:locale": "en_US", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:03.369835182", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Shutdown URL | Ktor", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-shutdown-url.html", "og:title": "Shutdown URL | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Shutdown URL | Ktor", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-shutdown-url.html", "og:type": "website", "scrapeId": "b1446d38-e0c0-4d83-a605-085b65863a24", "sourceURL": "https://ktor.io/docs/server-shutdown-url.html", "url": "https://ktor.io/docs/server-shutdown-url.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure shutdown url by installing the plugin in ktor?\n\nAssistant: To configure shutdown url by installing the plugin in ktor, here's what you do:\nTo install and configure shutdown URL in code, pass ShutDownUrl.ApplicationCallPlugin to the install function and use the shutDownUrl property:\n\n```\ninstall(ShutDownUrl.ApplicationCallPlugin) {\n    shutDownUrl = \"/shutdown\"\n    exitCodeSupplier = { 0 }\n}\n```\n\nFor the full example, see shutdown-url..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-shutdown-url.html", "title": "Server Plugin Shutdown URL", "description": "The ShutDownUrl plugin allows you to configure a URL used to shut down the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:25:30", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "og:description": "", "title": "Shutdown URL | Ktor Documentation", "og:locale": "en_US", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:03.369835182", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Shutdown URL | Ktor", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-shutdown-url.html", "og:title": "Shutdown URL | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Shutdown URL | Ktor", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-shutdown-url.html", "og:type": "website", "scrapeId": "b1446d38-e0c0-4d83-a605-085b65863a24", "sourceURL": "https://ktor.io/docs/server-shutdown-url.html", "url": "https://ktor.io/docs/server-shutdown-url.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Shutdown URL in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configure shutdown URL in a configuration file**:\n\n```yaml\nktor {\n    deployment {\n        shutdown.url = \"/shutdown\"\n    }\n}\n\n```\n\nThis snippet shows you how to configure shutdown url in a configuration file, which is an important aspect of server plugin shutdown url.\n\n**Configure shutdown URL by installing the plugin**:\n\n```yaml\ninstall(ShutDownUrl.ApplicationCallPlugin) {\n    shutDownUrl = \"/shutdown\"\n    exitCodeSupplier = { 0 }\n}\n```\n\nThis snippet shows you how to configure shutdown url by installing the plugin, which is an important aspect of server plugin shutdown url.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-shutdown-url.html", "title": "Server Plugin Shutdown URL", "description": "The ShutDownUrl plugin allows you to configure a URL used to shut down the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:25:30", "type": "code_examples", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "og:description": "", "title": "Shutdown URL | Ktor Documentation", "og:locale": "en_US", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:03.369835182", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Shutdown URL | Ktor", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-shutdown-url.html", "og:title": "Shutdown URL | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Shutdown URL | Ktor", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-shutdown-url.html", "og:type": "website", "scrapeId": "b1446d38-e0c0-4d83-a605-085b65863a24", "sourceURL": "https://ktor.io/docs/server-shutdown-url.html", "url": "https://ktor.io/docs/server-shutdown-url.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Shutdown URL in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse a configuration file for easier management of server settings.\n\nEnsure the shutdown URL is secured and not publicly accessible.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-shutdown-url.html", "title": "Server Plugin Shutdown URL", "description": "The ShutDownUrl plugin allows you to configure a URL used to shut down the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:25:30", "type": "best_practices", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "og:description": "", "title": "Shutdown URL | Ktor Documentation", "og:locale": "en_US", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:03.369835182", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "ogTitle": "Shutdown URL | Ktor", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-shutdown-url.html", "og:title": "Shutdown URL | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Shutdown URL | Ktor", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-shutdown-url.html", "og:type": "website", "scrapeId": "b1446d38-e0c0-4d83-a605-085b65863a24", "sourceURL": "https://ktor.io/docs/server-shutdown-url.html", "url": "https://ktor.io/docs/server-shutdown-url.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Creating fat JARs using the Maven Assembly plugin is in ktor?\n\nAssistant: Sure, I'd be happy to explain Creating fat JARs using the Maven Assembly plugin in ktor.\n\n# Creating fat JARs using the Maven Assembly plugin\n\nThis page provides instructions on how to create fat JARs using the Maven Assembly plugin for Ktor applications.Here's a quick rundown of what this is about:\n\n## Configure the Assembly plugin\n\nTo build an assembly, you need to configure the Assembly plugin first:\n\n1. Navigate to the pom.xml file and ensure the main application class is specified:\n\n```xml\n<properties>\n       <main.class>com.example.ApplicationKt</main.class>\n</properties>\n```\n\n> ### tip\n>\n> If you use EngineMain without the explicit `main()` function, the application's main class depends on the used engine and might look as follows: `io.ktor.server.netty.EngineMain`.\n\n2. Add the `maven-assembly-plugin` to the `plugins` block as follows:\n\n```xml\n<plugin>\n       <groupId>org.apache.maven.plugins</groupId>\n       <artifactId>maven-assembly-plugin</artifactId>\n       <version>2.6</version>\n       <configuration>\n           <descriptorRefs>\n               <descriptorRef>jar-with-dependencies</descriptorRef>\n           </descriptorRefs>\n           <archive>\n               <manifest>\n                   <addClasspath>true</addClasspath>\n                   <mainClass>${main.class}</mainClass>\n               </manifest>\n           </archive>\n       </configuration>\n       <executions>\n           <execution>\n               <id>assemble-all</id>\n               <phase>package</phase>\n               <goals>\n                   <goal>single</goal>\n               </goals>\n           </execution>\n       </executions>\n</plugin>\n```\n\n## Build an assembly\n\nTo build an assembly for the application, open the terminal and execute the following command:\n\n```\nmvn package\n```\n\nThis will create a new target directory for the assembly, including the .jar files.\n\n> ### tip\n>\n> To learn how to use the resulting package to deploy your application using Docker, see the Docker help topic.\n\n## Run the application\n\nTo run the built application, follow the steps below:\n\n1. In a new terminal window, use the `java -jar` command to run the application. For the sample project it looks like the following:\n\n```\njava -jar target/tutorial-server-get-started-maven-0.0.1-jar-with-dependencies.jar\n```\n\n2. You will see a confirmation message once your app is running:\n\n```\n[main] INFO  Application - Responding at http://0.0.0.0:8080\n```\n\n3. Click on the URL link to open the application in your default browser:\n![Output of generated ktor project](https://ktor.io/docs/images/server_get_started_ktor_sample_app_output.png)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/maven-assembly-plugin.html", "title": "Creating fat JARs using the Maven Assembly plugin", "description": "This page provides instructions on how to create fat JARs using the Maven Assembly plugin for Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:26:05", "type": "overview", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.00920465", "ogDescription": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "title": "Creating fat JARs using the Maven Assembly plugin | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "build-number": "707", "ogTitle": "Creating fat JARs using the Maven Assembly plugin | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "24acb0be-063b-4af9-a8ae-5010c01c4a2d", "sourceURL": "https://ktor.io/docs/maven-assembly-plugin.html", "url": "https://ktor.io/docs/maven-assembly-plugin.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure the assembly plugin in ktor?\n\nAssistant: To configure the assembly plugin in ktor, here's what you do:\nTo build an assembly, you need to configure the Assembly plugin first:\n\n1. Navigate to the pom.xml file and ensure the main application class is specified:\n\n```xml\n<properties>\n       <main.class>com.example.ApplicationKt</main.class>\n</properties>\n```\n\n> ### tip\n>\n> If you use EngineMain without the explicit `main()` function, the application's main class depends on the used engine and might look as follows: `io.ktor.server.netty.EngineMain`.\n\n2. Add the `maven-assembly-plugin` to the `plugins` block as follows:\n\n```xml\n<plugin>\n       <groupId>org.apache.maven.plugins</groupId>\n       <artifactId>maven-assembly-plugin</artifactId>\n       <version>2.6</version>\n       <configuration>\n           <descriptorRefs>\n               <descriptorRef>jar-with-dependencies</descriptorRef>\n           </descriptorRefs>\n           <archive>\n               <manifest>\n                   <addClasspath>true</addClasspath>\n                   <mainClass>${main.class}</mainClass>\n               </manifest>\n           </archive>\n       </configuration>\n       <executions>\n           <execution>\n               <id>assemble-all</id>\n               <phase>package</phase>\n               <goals>\n                   <goal>single</goal>\n               </goals>\n           </execution>\n       </executions>\n</plugin>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/maven-assembly-plugin.html", "title": "Creating fat JARs using the Maven Assembly plugin", "description": "This page provides instructions on how to create fat JARs using the Maven Assembly plugin for Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:26:05", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.00920465", "ogDescription": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "title": "Creating fat JARs using the Maven Assembly plugin | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "build-number": "707", "ogTitle": "Creating fat JARs using the Maven Assembly plugin | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "24acb0be-063b-4af9-a8ae-5010c01c4a2d", "sourceURL": "https://ktor.io/docs/maven-assembly-plugin.html", "url": "https://ktor.io/docs/maven-assembly-plugin.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I build an assembly in ktor?\n\nAssistant: To build an assembly in ktor, here's what you do:\nTo build an assembly for the application, open the terminal and execute the following command:\n\n```\nmvn package\n```\n\nThis will create a new target directory for the assembly, including the .jar files.\n\n> ### tip\n>\n> To learn how to use the resulting package to deploy your application using Docker, see the Docker help topic..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/maven-assembly-plugin.html", "title": "Creating fat JARs using the Maven Assembly plugin", "description": "This page provides instructions on how to create fat JARs using the Maven Assembly plugin for Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:26:05", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.00920465", "ogDescription": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "title": "Creating fat JARs using the Maven Assembly plugin | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "build-number": "707", "ogTitle": "Creating fat JARs using the Maven Assembly plugin | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "24acb0be-063b-4af9-a8ae-5010c01c4a2d", "sourceURL": "https://ktor.io/docs/maven-assembly-plugin.html", "url": "https://ktor.io/docs/maven-assembly-plugin.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run the application in ktor?\n\nAssistant: To run the application in ktor, here's what you do:\nTo run the built application, follow the steps below:\n\n1. In a new terminal window, use the `java -jar` command to run the application. For the sample project it looks like the following:\n\n```\njava -jar target/tutorial-server-get-started-maven-0.0.1-jar-with-dependencies.jar\n```\n\n2. You will see a confirmation message once your app is running:\n\n```\n[main] INFO  Application - Responding at http://0.0.0.0:8080\n```\n\n3. Click on the URL link to open the application in your default browser:\n![Output of generated ktor project](https://ktor.io/docs/images/server_get_started_ktor_sample_app_output.png).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/maven-assembly-plugin.html", "title": "Creating fat JARs using the Maven Assembly plugin", "description": "This page provides instructions on how to create fat JARs using the Maven Assembly plugin for Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:26:05", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.00920465", "ogDescription": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "title": "Creating fat JARs using the Maven Assembly plugin | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "build-number": "707", "ogTitle": "Creating fat JARs using the Maven Assembly plugin | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "24acb0be-063b-4af9-a8ae-5010c01c4a2d", "sourceURL": "https://ktor.io/docs/maven-assembly-plugin.html", "url": "https://ktor.io/docs/maven-assembly-plugin.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Creating fat JARs using the Maven Assembly plugin in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Main Class Configuration**:\n\n```yaml\n<properties>\n       <main.class>com.example.ApplicationKt</main.class>\n</properties>\n```\n\nThis snippet shows you how to main class configuration, which is an important aspect of creating fat jars using the maven assembly plugin.\n\n**Maven Assembly Plugin Configuration**:\n\n```yaml\n<plugin>\n       <groupId>org.apache.maven.plugins</groupId>\n       <artifactId>maven-assembly-plugin</artifactId>\n       <version>2.6</version>\n       <configuration>\n           <descriptorRefs>\n               <descriptorRef>jar-with-dependencies</descriptorRef>\n           </descriptorRefs>\n           <archive>\n               <manifest>\n                   <addClasspath>true</addClasspath>\n                   <mainClass>${main.class}</mainClass>\n               </manifest>\n           </archive>\n       </configuration>\n       <executions>\n           <execution>\n               <id>assemble-all</id>\n               <phase>package</phase>\n               <goals>\n                   <goal>single</goal>\n               </goals>\n           </execution>\n       </executions>\n</plugin>\n```\n\nThis snippet shows you how to maven assembly plugin configuration, which is an important aspect of creating fat jars using the maven assembly plugin.\n\n**Build Command**:\n\n```yaml\nmvn package\n```\n\nThis snippet shows you how to build command, which is an important aspect of creating fat jars using the maven assembly plugin.\n\n**Run Command**:\n\n```yaml\njava -jar target/tutorial-server-get-started-maven-0.0.1-jar-with-dependencies.jar\n```\n\nThis snippet shows you how to run command, which is an important aspect of creating fat jars using the maven assembly plugin.\n\n", "metadata": {"source_url": "https://ktor.io/docs/maven-assembly-plugin.html", "title": "Creating fat JARs using the Maven Assembly plugin", "description": "This page provides instructions on how to create fat JARs using the Maven Assembly plugin for Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:26:05", "type": "code_examples", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.00920465", "ogDescription": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "title": "Creating fat JARs using the Maven Assembly plugin | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "build-number": "707", "ogTitle": "Creating fat JARs using the Maven Assembly plugin | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "24acb0be-063b-4af9-a8ae-5010c01c4a2d", "sourceURL": "https://ktor.io/docs/maven-assembly-plugin.html", "url": "https://ktor.io/docs/maven-assembly-plugin.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Creating fat JARs using the Maven Assembly plugin in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you use EngineMain without the explicit `main()` function, the application's main class depends on the used engine and might look as follows: `io.ktor.server.netty.EngineMain`.\n\nTo learn how to use the resulting package to deploy your application using Docker, see the Docker help topic.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/maven-assembly-plugin.html", "title": "Creating fat JARs using the Maven Assembly plugin", "description": "This page provides instructions on how to create fat JARs using the Maven Assembly plugin for Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:26:05", "type": "best_practices", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.00920465", "ogDescription": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "title": "Creating fat JARs using the Maven Assembly plugin | Ktor Documentation", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating fat JARs using the Maven Assembly plugin | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/maven-assembly-plugin.html", "build-number": "707", "ogTitle": "Creating fat JARs using the Maven Assembly plugin | Ktor", "ogSiteName": "Ktor Help", "scrapeId": "24acb0be-063b-4af9-a8ae-5010c01c4a2d", "sourceURL": "https://ktor.io/docs/maven-assembly-plugin.html", "url": "https://ktor.io/docs/maven-assembly-plugin.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Serving single-page applications is in ktor?\n\nAssistant: Sure, I'd be happy to explain Serving single-page applications in ktor.\n\n# Serving single-page applications\n\nKtor provides the ability to serve single-page applications, including React, Angular, or Vue.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo serve a single-page application, you only need the ktor-server-core dependency. Any specific dependencies are not required.\n\n## Serve an application\n\nTo serve a single-page application, you need to define where you want the content to be served from: a local filesystem or the classpath. You need at least to specify a folder/resource package containing a single-page application.\n\n## Serve framework-specific applications\n\nYou can serve a build of your single-page application created using a specific framework, such as React, Angular, Vue, and so on. Suppose we have the `react-app` folder in a project root containing a React application. The application has the following structure and the `index.html` file as the main page:\n\n```\nreact-app\n├── index.html\n├── ...\n└── static\n    └── ...\n```\n\nTo serve this application, call singlePageApplication inside the routing block and pass the folder name to the `react` function:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    routing {\n        singlePageApplication {\n            react(\"react-app\")\n        }\n    }\n}\n```\n\nKtor looks up `index.html` automatically. To learn how to customize a default page, see Customize serving settings.\n\n## Customize serving settings\n\nTo demonstrate how to serve a single-page application from resources, let's suppose our application is placed inside the `sample-web-app` resource package, which has the following structure:\n\n```\nsample-web-app\n├── main.html\n├── ktor_logo.png\n├── css\n│   └──styles.css\n└── js\n    └── script.js\n```\n\nTo serve this application, the following configuration is used:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    routing {\n        singlePageApplication {\n            useResources = true\n            filesPath = \"sample-web-app\"\n            defaultPage = \"main.html\"\n            ignoreFiles { it.endsWith(\".txt\") }\n        }\n    }\n}\n```\n\n- `useResources`: Enables serving an application from a resource package.\n\n- `filesPath`: Specifies the path under which an application is located.\n\n- `defaultPage`: Specifies `main.html` as a default resource to serve.\n\n- `ignoreFiles`: Ignores paths that contain `.txt` at the end.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-serving-spa.html", "title": "Serving single-page applications", "description": "Ktor provides the ability to serve single-page applications, including React, Angular, or Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:28:46", "type": "overview", "page_metadata": {"twitter:description": "", "ogDescription": "", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "language": "en-US", "twitter:title": "Serving single-page applications | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Serving single-page applications | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving single-page applications | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:07.000038267", "twitter:site": "@JetBrainsKtor", "title": "Serving single-page applications | Ktor Documentation", "scrapeId": "636c33cd-24c2-4383-aa52-a4a7469c158c", "sourceURL": "https://ktor.io/docs/server-serving-spa.html", "url": "https://ktor.io/docs/server-serving-spa.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo serve a single-page application, you only need the ktor-server-core dependency. Any specific dependencies are not required..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-serving-spa.html", "title": "Serving single-page applications", "description": "Ktor provides the ability to serve single-page applications, including React, Angular, or Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:28:46", "type": "section_detail", "page_metadata": {"twitter:description": "", "ogDescription": "", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "language": "en-US", "twitter:title": "Serving single-page applications | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Serving single-page applications | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving single-page applications | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:07.000038267", "twitter:site": "@JetBrainsKtor", "title": "Serving single-page applications | Ktor Documentation", "scrapeId": "636c33cd-24c2-4383-aa52-a4a7469c158c", "sourceURL": "https://ktor.io/docs/server-serving-spa.html", "url": "https://ktor.io/docs/server-serving-spa.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I serve an application in ktor?\n\nAssistant: To serve an application in ktor, here's what you do:\nTo serve a single-page application, you need to define where you want the content to be served from: a local filesystem or the classpath. You need at least to specify a folder/resource package containing a single-page application..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-serving-spa.html", "title": "Serving single-page applications", "description": "Ktor provides the ability to serve single-page applications, including React, Angular, or Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:28:46", "type": "section_detail", "page_metadata": {"twitter:description": "", "ogDescription": "", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "language": "en-US", "twitter:title": "Serving single-page applications | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Serving single-page applications | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving single-page applications | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:07.000038267", "twitter:site": "@JetBrainsKtor", "title": "Serving single-page applications | Ktor Documentation", "scrapeId": "636c33cd-24c2-4383-aa52-a4a7469c158c", "sourceURL": "https://ktor.io/docs/server-serving-spa.html", "url": "https://ktor.io/docs/server-serving-spa.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I serve framework-specific applications in ktor?\n\nAssistant: To serve framework-specific applications in ktor, here's what you do:\nYou can serve a build of your single-page application created using a specific framework, such as React, Angular, Vue, and so on. Suppose we have the `react-app` folder in a project root containing a React application. The application has the following structure and the `index.html` file as the main page:\n\n```\nreact-app\n├── index.html\n├── ...\n└── static\n    └── ...\n```\n\nTo serve this application, call singlePageApplication inside the routing block and pass the folder name to the `react` function:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    routing {\n        singlePageApplication {\n            react(\"react-app\")\n        }\n    }\n}\n```\n\nKtor looks up `index.html` automatically. To learn how to customize a default page, see Customize serving settings..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-serving-spa.html", "title": "Serving single-page applications", "description": "Ktor provides the ability to serve single-page applications, including React, Angular, or Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:28:46", "type": "section_detail", "page_metadata": {"twitter:description": "", "ogDescription": "", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "language": "en-US", "twitter:title": "Serving single-page applications | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Serving single-page applications | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving single-page applications | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:07.000038267", "twitter:site": "@JetBrainsKtor", "title": "Serving single-page applications | Ktor Documentation", "scrapeId": "636c33cd-24c2-4383-aa52-a4a7469c158c", "sourceURL": "https://ktor.io/docs/server-serving-spa.html", "url": "https://ktor.io/docs/server-serving-spa.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I customize serving settings in ktor?\n\nAssistant: To customize serving settings in ktor, here's what you do:\nTo demonstrate how to serve a single-page application from resources, let's suppose our application is placed inside the `sample-web-app` resource package, which has the following structure:\n\n```\nsample-web-app\n├── main.html\n├── ktor_logo.png\n├── css\n│   └──styles.css\n└── js\n    └── script.js\n```\n\nTo serve this application, the following configuration is used:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    routing {\n        singlePageApplication {\n            useResources = true\n            filesPath = \"sample-web-app\"\n            defaultPage = \"main.html\"\n            ignoreFiles { it.endsWith(\".txt\") }\n        }\n    }\n}\n```\n\n- `useResources`: Enables serving an application from a resource package.\n\n- `filesPath`: Specifies the path under which an application is located.\n\n- `defaultPage`: Specifies `main.html` as a default resource to serve.\n\n- `ignoreFiles`: Ignores paths that contain `.txt` at the end..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-serving-spa.html", "title": "Serving single-page applications", "description": "Ktor provides the ability to serve single-page applications, including React, Angular, or Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:28:46", "type": "section_detail", "page_metadata": {"twitter:description": "", "ogDescription": "", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "language": "en-US", "twitter:title": "Serving single-page applications | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Serving single-page applications | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving single-page applications | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:07.000038267", "twitter:site": "@JetBrainsKtor", "title": "Serving single-page applications | Ktor Documentation", "scrapeId": "636c33cd-24c2-4383-aa52-a4a7469c158c", "sourceURL": "https://ktor.io/docs/server-serving-spa.html", "url": "https://ktor.io/docs/server-serving-spa.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Serving single-page applications in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Serve framework-specific applications**:\n\n```yaml\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    routing {\n        singlePageApplication {\n            react(\"react-app\")\n        }\n    }\n}\n```\n\n```\n\nThis snippet shows you how to serve framework-specific applications, which is an important aspect of serving single-page applications.\n\n**Customize serving settings**:\n\n```yaml\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    routing {\n        singlePageApplication {\n            useResources = true\n            filesPath = \"sample-web-app\"\n            defaultPage = \"main.html\"\n            ignoreFiles { it.endsWith(\".txt\") }\n        }\n    }\n}\n```\n\n```\n\nThis snippet shows you how to customize serving settings, which is an important aspect of serving single-page applications.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-serving-spa.html", "title": "Serving single-page applications", "description": "Ktor provides the ability to serve single-page applications, including React, Angular, or Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:28:46", "type": "code_examples", "page_metadata": {"twitter:description": "", "ogDescription": "", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "language": "en-US", "twitter:title": "Serving single-page applications | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Serving single-page applications | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving single-page applications | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:07.000038267", "twitter:site": "@JetBrainsKtor", "title": "Serving single-page applications | Ktor Documentation", "scrapeId": "636c33cd-24c2-4383-aa52-a4a7469c158c", "sourceURL": "https://ktor.io/docs/server-serving-spa.html", "url": "https://ktor.io/docs/server-serving-spa.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Serving single-page applications in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor other frameworks, use corresponding functions, such as `angular`, `vue`, `ember`, and so on.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-serving-spa.html", "title": "Serving single-page applications", "description": "Ktor provides the ability to serve single-page applications, including React, Angular, or Vue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:28:46", "type": "best_practices", "page_metadata": {"twitter:description": "", "ogDescription": "", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "ogSiteName": "Ktor Help", "og:description": "", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-serving-spa.html", "language": "en-US", "twitter:title": "Serving single-page applications | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Serving single-page applications | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving single-page applications | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:07.000038267", "twitter:site": "@JetBrainsKtor", "title": "Serving single-page applications | Ktor Documentation", "scrapeId": "636c33cd-24c2-4383-aa52-a4a7469c158c", "sourceURL": "https://ktor.io/docs/server-serving-spa.html", "url": "https://ktor.io/docs/server-serving-spa.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Content encoding is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Content encoding in ktor.\n\n# Client Plugin Content encoding\n\nThe Ktor client provides the ContentEncoding plugin that allows you to enable specified compression algorithms (such as gzip and deflate) and configure their settings.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use ContentEncoding, you need to include the ktor-client-encoding artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-encoding:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-encoding:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-encoding-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install ContentEncoding\n\nTo install ContentEncoding, pass it to the install function inside a client configuration block:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.compression.*\n//...\nval client = HttpClient(CIO) {\n    install(ContentEncoding)\n}\n```\n\n## Configure ContentEncoding\n\nThe example below shows how to enable the deflate and gzip encoders on the client with the specified quality values:\n\n```\nval client = HttpClient(CIO) {\n    install(ContentEncoding) {\n        deflate(1.0F)\n        gzip(0.9F)\n    }\n}\n```\n\nIf required, you can implement the ContentEncoder interface to create a custom encoder and pass it to the customEncoder function.\n\n## Encode request body\n\nTo encode the request body, use the compress() function inside the HttpRequestBuilder block.\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.compression.*\n//...\nval client = HttpClient(CIO) {\n    install(ContentEncoding)\n}\nclient.post(\"/upload\") {\n    compress(\"gzip\")\n    setBody(someLongBody)\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-content-encoding.html", "title": "Client Plugin Content encoding", "description": "The Ktor client provides the ContentEncoding plugin that allows you to enable specified compression algorithms (such as gzip and deflate) and configure their settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:09", "type": "overview", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.870094813", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content encoding | Ktor", "og:site_name": "Ktor Help", "og:title": "Content encoding | Ktor", "title": "Content encoding | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Content encoding | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "e95cbf85-a764-4168-abae-61a65b15ee9c", "sourceURL": "https://ktor.io/docs/client-content-encoding.html", "url": "https://ktor.io/docs/client-content-encoding.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use ContentEncoding, you need to include the ktor-client-encoding artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-encoding:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-encoding:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-encoding-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-content-encoding.html", "title": "Client Plugin Content encoding", "description": "The Ktor client provides the ContentEncoding plugin that allows you to enable specified compression algorithms (such as gzip and deflate) and configure their settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:09", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.870094813", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content encoding | Ktor", "og:site_name": "Ktor Help", "og:title": "Content encoding | Ktor", "title": "Content encoding | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Content encoding | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "e95cbf85-a764-4168-abae-61a65b15ee9c", "sourceURL": "https://ktor.io/docs/client-content-encoding.html", "url": "https://ktor.io/docs/client-content-encoding.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install contentencoding in ktor?\n\nAssistant: To install contentencoding in ktor, here's what you do:\nTo install ContentEncoding, pass it to the install function inside a client configuration block:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.compression.*\n//...\nval client = HttpClient(CIO) {\n    install(ContentEncoding)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-content-encoding.html", "title": "Client Plugin Content encoding", "description": "The Ktor client provides the ContentEncoding plugin that allows you to enable specified compression algorithms (such as gzip and deflate) and configure their settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:09", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.870094813", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content encoding | Ktor", "og:site_name": "Ktor Help", "og:title": "Content encoding | Ktor", "title": "Content encoding | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Content encoding | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "e95cbf85-a764-4168-abae-61a65b15ee9c", "sourceURL": "https://ktor.io/docs/client-content-encoding.html", "url": "https://ktor.io/docs/client-content-encoding.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure contentencoding in ktor?\n\nAssistant: To configure contentencoding in ktor, here's what you do:\nThe example below shows how to enable the deflate and gzip encoders on the client with the specified quality values:\n\n```\nval client = HttpClient(CIO) {\n    install(ContentEncoding) {\n        deflate(1.0F)\n        gzip(0.9F)\n    }\n}\n```\n\nIf required, you can implement the ContentEncoder interface to create a custom encoder and pass it to the customEncoder function..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-content-encoding.html", "title": "Client Plugin Content encoding", "description": "The Ktor client provides the ContentEncoding plugin that allows you to enable specified compression algorithms (such as gzip and deflate) and configure their settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:09", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.870094813", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content encoding | Ktor", "og:site_name": "Ktor Help", "og:title": "Content encoding | Ktor", "title": "Content encoding | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Content encoding | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "e95cbf85-a764-4168-abae-61a65b15ee9c", "sourceURL": "https://ktor.io/docs/client-content-encoding.html", "url": "https://ktor.io/docs/client-content-encoding.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I encode request body in ktor?\n\nAssistant: To encode request body in ktor, here's what you do:\nTo encode the request body, use the compress() function inside the HttpRequestBuilder block.\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.compression.*\n//...\nval client = HttpClient(CIO) {\n    install(ContentEncoding)\n}\nclient.post(\"/upload\") {\n    compress(\"gzip\")\n    setBody(someLongBody)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-content-encoding.html", "title": "Client Plugin Content encoding", "description": "The Ktor client provides the ContentEncoding plugin that allows you to enable specified compression algorithms (such as gzip and deflate) and configure their settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:09", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.870094813", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content encoding | Ktor", "og:site_name": "Ktor Help", "og:title": "Content encoding | Ktor", "title": "Content encoding | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Content encoding | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "e95cbf85-a764-4168-abae-61a65b15ee9c", "sourceURL": "https://ktor.io/docs/client-content-encoding.html", "url": "https://ktor.io/docs/client-content-encoding.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Content encoding in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-client-encoding:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies - gradle (kotlin), which is an important aspect of client plugin content encoding.\n\n**Add dependencies - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-client-encoding:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies - gradle (groovy), which is an important aspect of client plugin content encoding.\n\n**Add dependencies - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-encoding-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies - maven, which is an important aspect of client plugin content encoding.\n\n**Install ContentEncoding**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.compression.*\n//...\nval client = HttpClient(CIO) {\n    install(ContentEncoding)\n}\n```\n\nThis snippet shows you how to install contentencoding, which is an important aspect of client plugin content encoding.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-content-encoding.html", "title": "Client Plugin Content encoding", "description": "The Ktor client provides the ContentEncoding plugin that allows you to enable specified compression algorithms (such as gzip and deflate) and configure their settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:09", "type": "code_examples", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.870094813", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content encoding | Ktor", "og:site_name": "Ktor Help", "og:title": "Content encoding | Ktor", "title": "Content encoding | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Content encoding | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "e95cbf85-a764-4168-abae-61a65b15ee9c", "sourceURL": "https://ktor.io/docs/client-content-encoding.html", "url": "https://ktor.io/docs/client-content-encoding.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Content encoding in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can learn more about artifacts required by the Ktor client from Adding client dependencies.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-content-encoding.html", "title": "Client Plugin Content encoding", "description": "The Ktor client provides the ContentEncoding plugin that allows you to enable specified compression algorithms (such as gzip and deflate) and configure their settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:29:09", "type": "best_practices", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-content-encoding.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:03.870094813", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Content encoding | Ktor", "og:site_name": "Ktor Help", "og:title": "Content encoding | Ktor", "title": "Content encoding | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Content encoding | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "e95cbf85-a764-4168-abae-61a65b15ee9c", "sourceURL": "https://ktor.io/docs/client-content-encoding.html", "url": "https://ktor.io/docs/client-content-encoding.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Tracing requests in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Tracing requests in Ktor Server in ktor.\n\n# Server Plugin Tracing requests in Ktor Server\n\nThis page covers how to use the CallId plugin in Ktor Server to trace client requests using unique request IDs or call IDs.Here's a quick rundown of what this is about:\n\n## Introduction\n\nThe CallId plugin allows you to trace client requests end-to-end by using unique request IDs or call IDs. Typically, working with a call ID in Ktor might look as follows:\n\n1. First, you need to obtain a call ID for a specific request in one of the following ways:\n   - A reverse proxy (such as Nginx) or cloud provider (such as Heroku) might add a call ID in a specific header, for example, X-Request-Id. In this case, Ktor allows you to retrieve a call ID.\n   - Otherwise, if a request comes without a call ID, you can generate it on the Ktor server.\n2. Next, Ktor verifies a retrieved/generated call ID using a predefined dictionary. You can also provide your own condition to verify a call ID.\n3. Finally, you can send a call ID to the client in a specific header, for example, X-Request-Id.\n\n## Add dependencies\n\nTo use CallId, you need to include the ktor-server-call-id artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-call-id:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-call-id:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-call-id-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install CallId\n\nTo install the CallId plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install CallId...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.callid.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CallId)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.callid.*\n// ...\nfun Application.module() {\n    install(CallId)\n    // ...\n}\n```\n\n## Configure CallId\n\n### Retrieve a call ID\nCallId provides several ways to retrieve a call ID:\n- To retrieve a call ID from the specified header, use the retrieveFromHeader function, for example:\n```\ninstall(CallId) {\n      retrieveFromHeader(HttpHeaders.XRequestId)\n}\n```\n\nYou can also use the header function to retrieve and send a call ID in the same header.\n- If required, you can retrieve a call ID from the ApplicationCall:\n```\ninstall(CallId) {\n      retrieve { call ->\n          call.request.header(HttpHeaders.XRequestId)\n      }\n}\n```\n\n### Generate a call ID\nIf an incoming request doesn't include a call ID, you can generate it using the generate function:\n- The example below shows how to generate a call ID with a specific length from the predefined dictionary:\n```\ninstall(CallId) {\n      generate(10, \"abcde12345\")\n}\n```\n- In the example below, the generate function accepts a block for generating a call ID:\n```\ninstall(CallId) {\n      val counter = atomic(0)\n      generate {\n          \"generated-call-id-${counter.getAndIncrement()}\"\n      }\n}\n```\n\n### Verify a call ID\nAll retrieved/generated call IDs are verified using a default dictionary, which looks as follows:\n```\nCALL_ID_DEFAULT_DICTIONARY: String = \"abcdefghijklmnopqrstuvwxyz0123456789+/=-\"\n```\nThis means that call IDs containing capital letters won't pass verification. If required, you can apply less strict rules by using the verify function:\n```\ninstall(CallId) {\n    verify { callId: String ->\n        callId.isNotEmpty()\n    }\n}\n```\n\n### Send a call ID to the client\nAfter retrieving/generating a call ID, you can send it to the client:\n- The header function can be used to retrieve a call ID and send it in the same header:\n```\ninstall(CallId) {\n      header(HttpHeaders.XRequestId)\n}\n```\n- The replyToHeader function sends a call ID in the specified header:\n```\ninstall(CallId) {\n      replyToHeader(HttpHeaders.XRequestId)\n}\n```\n- If required, you can use ApplicationCall to send a call ID in a response:\n```\nreply { call, callId ->\n      call.response.header(HttpHeaders.XRequestId, callId)\n}\n```\n\n## Put a call ID into MDC\n\nUsing CallId along with CallLogging helps you troubleshoot calls by putting a call ID in the MDC context and configuring a logger to show a call ID for each request. To do this, call the callIdMdc function inside the CallLogging configuration block and specify the desired key to be put in the MDC context:\n```\ninstall(CallLogging) {\n    callIdMdc(\"call-id\")\n}\n```\nThis key can be passed to a logger configuration to show call IDs in the log. For instance, the logback.xml file might look as follows:\n```\n<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n        <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %X{call-id} %-5level %logger{36} - %msg%n</pattern>\n    </encoder>\n</appender>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-call-id.html", "title": "Server Plugin Tracing requests in Ktor Server", "description": "This page covers how to use the CallId plugin in Ktor Server to trace client requests using unique request IDs or call IDs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:29:54", "type": "overview", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Tracing requests in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogTitle": "Tracing requests in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Tracing requests in Ktor Server | Ktor Documentation", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "twitter:title": "Tracing requests in Ktor Server | Ktor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-id.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.783830169", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "02699cbb-ab11-469c-8a67-7f27dfa1b71b", "sourceURL": "https://ktor.io/docs/server-call-id.html", "url": "https://ktor.io/docs/server-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I introduction in ktor?\n\nAssistant: To introduction in ktor, here's what you do:\nThe CallId plugin allows you to trace client requests end-to-end by using unique request IDs or call IDs. Typically, working with a call ID in Ktor might look as follows:\n\n1. First, you need to obtain a call ID for a specific request in one of the following ways:\n   - A reverse proxy (such as Nginx) or cloud provider (such as Heroku) might add a call ID in a specific header, for example, X-Request-Id. In this case, Ktor allows you to retrieve a call ID.\n   - Otherwise, if a request comes without a call ID, you can generate it on the Ktor server.\n2. Next, Ktor verifies a retrieved/generated call ID using a predefined dictionary. You can also provide your own condition to verify a call ID.\n3. Finally, you can send a call ID to the client in a specific header, for example, X-Request-Id..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-call-id.html", "title": "Server Plugin Tracing requests in Ktor Server", "description": "This page covers how to use the CallId plugin in Ktor Server to trace client requests using unique request IDs or call IDs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:29:54", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Tracing requests in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogTitle": "Tracing requests in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Tracing requests in Ktor Server | Ktor Documentation", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "twitter:title": "Tracing requests in Ktor Server | Ktor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-id.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.783830169", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "02699cbb-ab11-469c-8a67-7f27dfa1b71b", "sourceURL": "https://ktor.io/docs/server-call-id.html", "url": "https://ktor.io/docs/server-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use CallId, you need to include the ktor-server-call-id artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-call-id:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-call-id:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-call-id-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-call-id.html", "title": "Server Plugin Tracing requests in Ktor Server", "description": "This page covers how to use the CallId plugin in Ktor Server to trace client requests using unique request IDs or call IDs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:29:54", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Tracing requests in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogTitle": "Tracing requests in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Tracing requests in Ktor Server | Ktor Documentation", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "twitter:title": "Tracing requests in Ktor Server | Ktor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-id.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.783830169", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "02699cbb-ab11-469c-8a67-7f27dfa1b71b", "sourceURL": "https://ktor.io/docs/server-call-id.html", "url": "https://ktor.io/docs/server-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install callid in ktor?\n\nAssistant: To install callid in ktor, here's what you do:\nTo install the CallId plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install CallId...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.callid.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CallId)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.callid.*\n// ...\nfun Application.module() {\n    install(CallId)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-call-id.html", "title": "Server Plugin Tracing requests in Ktor Server", "description": "This page covers how to use the CallId plugin in Ktor Server to trace client requests using unique request IDs or call IDs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:29:54", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Tracing requests in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogTitle": "Tracing requests in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Tracing requests in Ktor Server | Ktor Documentation", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "twitter:title": "Tracing requests in Ktor Server | Ktor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-id.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.783830169", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "02699cbb-ab11-469c-8a67-7f27dfa1b71b", "sourceURL": "https://ktor.io/docs/server-call-id.html", "url": "https://ktor.io/docs/server-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure callid in ktor?\n\nAssistant: To configure callid in ktor, here's what you do:\n### Retrieve a call ID\nCallId provides several ways to retrieve a call ID:\n- To retrieve a call ID from the specified header, use the retrieveFromHeader function, for example:\n```\ninstall(CallId) {\n      retrieveFromHeader(HttpHeaders.XRequestId)\n}\n```\n\nYou can also use the header function to retrieve and send a call ID in the same header.\n- If required, you can retrieve a call ID from the ApplicationCall:\n```\ninstall(CallId) {\n      retrieve { call ->\n          call.request.header(HttpHeaders.XRequestId)\n      }\n}\n```\n\n### Generate a call ID\nIf an incoming request doesn't include a call ID, you can generate it using the generate function:\n- The example below shows how to generate a call ID with a specific length from the predefined dictionary:\n```\ninstall(CallId) {\n      generate(10, \"abcde12345\")\n}\n```\n- In the example below, the generate function accepts a block for generating a call ID:\n```\ninstall(CallId) {\n      val counter = atomic(0)\n      generate {\n          \"generated-call-id-${counter.getAndIncrement()}\"\n      }\n}\n```\n\n### Verify a call ID\nAll retrieved/generated call IDs are verified using a default dictionary, which looks as follows:\n```\nCALL_ID_DEFAULT_DICTIONARY: String = \"abcdefghijklmnopqrstuvwxyz0123456789+/=-\"\n```\nThis means that call IDs containing capital letters won't pass verification. If required, you can apply less strict rules by using the verify function:\n```\ninstall(CallId) {\n    verify { callId: String ->\n        callId.isNotEmpty()\n    }\n}\n```\n\n### Send a call ID to the client\nAfter retrieving/generating a call ID, you can send it to the client:\n- The header function can be used to retrieve a call ID and send it in the same header:\n```\ninstall(CallId) {\n      header(HttpHeaders.XRequestId)\n}\n```\n- The replyToHeader function sends a call ID in the specified header:\n```\ninstall(CallId) {\n      replyToHeader(HttpHeaders.XRequestId)\n}\n```\n- If required, you can use ApplicationCall to send a call ID in a response:\n```\nreply { call, callId ->\n      call.response.header(HttpHeaders.XRequestId, callId)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-call-id.html", "title": "Server Plugin Tracing requests in Ktor Server", "description": "This page covers how to use the CallId plugin in Ktor Server to trace client requests using unique request IDs or call IDs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:29:54", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Tracing requests in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogTitle": "Tracing requests in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Tracing requests in Ktor Server | Ktor Documentation", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "twitter:title": "Tracing requests in Ktor Server | Ktor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-id.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.783830169", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "02699cbb-ab11-469c-8a67-7f27dfa1b71b", "sourceURL": "https://ktor.io/docs/server-call-id.html", "url": "https://ktor.io/docs/server-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I put a call id into mdc in ktor?\n\nAssistant: To put a call id into mdc in ktor, here's what you do:\nUsing CallId along with CallLogging helps you troubleshoot calls by putting a call ID in the MDC context and configuring a logger to show a call ID for each request. To do this, call the callIdMdc function inside the CallLogging configuration block and specify the desired key to be put in the MDC context:\n```\ninstall(CallLogging) {\n    callIdMdc(\"call-id\")\n}\n```\nThis key can be passed to a logger configuration to show call IDs in the log. For instance, the logback.xml file might look as follows:\n```\n<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n        <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %X{call-id} %-5level %logger{36} - %msg%n</pattern>\n    </encoder>\n</appender>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-call-id.html", "title": "Server Plugin Tracing requests in Ktor Server", "description": "This page covers how to use the CallId plugin in Ktor Server to trace client requests using unique request IDs or call IDs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:29:54", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Tracing requests in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogTitle": "Tracing requests in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Tracing requests in Ktor Server | Ktor Documentation", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "twitter:title": "Tracing requests in Ktor Server | Ktor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-id.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.783830169", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "02699cbb-ab11-469c-8a67-7f27dfa1b71b", "sourceURL": "https://ktor.io/docs/server-call-id.html", "url": "https://ktor.io/docs/server-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Tracing requests in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-call-id:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies - gradle (kotlin), which is an important aspect of server plugin tracing requests in ktor server.\n\n**Add dependencies - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-call-id:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies - gradle (groovy), which is an important aspect of server plugin tracing requests in ktor server.\n\n**Add dependencies - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-call-id-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies - maven, which is an important aspect of server plugin tracing requests in ktor server.\n\n**Install CallId - embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.callid.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CallId)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install callid - embeddedserver, which is an important aspect of server plugin tracing requests in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-call-id.html", "title": "Server Plugin Tracing requests in Ktor Server", "description": "This page covers how to use the CallId plugin in Ktor Server to trace client requests using unique request IDs or call IDs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:29:54", "type": "code_examples", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Tracing requests in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogTitle": "Tracing requests in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Tracing requests in Ktor Server | Ktor Documentation", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "twitter:title": "Tracing requests in Ktor Server | Ktor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-id.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.783830169", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "02699cbb-ab11-469c-8a67-7f27dfa1b71b", "sourceURL": "https://ktor.io/docs/server-call-id.html", "url": "https://ktor.io/docs/server-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Tracing requests in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn the client, Ktor provides the CallId plugin for tracing client requests.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-call-id.html", "title": "Server Plugin Tracing requests in Ktor Server", "description": "This page covers how to use the CallId plugin in Ktor Server to trace client requests using unique request IDs or call IDs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:29:54", "type": "best_practices", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Tracing requests in Ktor Server | Ktor", "ogSiteName": "Ktor Help", "ogTitle": "Tracing requests in Ktor Server | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Tracing requests in Ktor Server | Ktor Documentation", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "language": "en-US", "og:type": "website", "twitter:title": "Tracing requests in Ktor Server | Ktor", "ogDescription": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-id.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:02.783830169", "twitter:description": "", "twitter:site": "@JetBrainsKtor", "scrapeId": "02699cbb-ab11-469c-8a67-7f27dfa1b71b", "sourceURL": "https://ktor.io/docs/server-call-id.html", "url": "https://ktor.io/docs/server-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Forwarded headers is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Forwarded headers in ktor.\n\n# Server Plugin Forwarded headers\n\nThis page covers the usage of ForwardedHeaders and XForwardedHeaders plugins in Ktor to handle reverse proxy headers and obtain information about the original request.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\n`io.ktor:ktor-server-forwarded-header`\n\n## Code example\n\n[forwarded-header](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/forwarded-header)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-forward-headers.html", "title": "Server Plugin Forwarded headers", "description": "This page covers the usage of ForwardedHeaders and XForwardedHeaders plugins in Ktor to handle reverse proxy headers and obtain information about the original request.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:30:06", "type": "overview", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-forward-headers.html", "language": "en-US", "ogDescription": "", "og:title": "Forwarded headers | Ktor", "twitter:description": "", "twitter:title": "Forwarded headers | Ktor", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Forwarded headers | Ktor", "og:site_name": "Ktor Help", "title": "Forwarded headers | Ktor Documentation", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.247233139", "og:url": "https://ktor.io/docs/3.1.1/server-forward-headers.html", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "og:description": "", "og:type": "website", "scrapeId": "ee09acc9-fb4e-488a-93e2-e3bca59e3cf7", "sourceURL": "https://ktor.io/docs/server-forward-headers.html", "url": "https://ktor.io/docs/server-forward-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\n`io.ktor:ktor-server-forwarded-header`.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-forward-headers.html", "title": "Server Plugin Forwarded headers", "description": "This page covers the usage of ForwardedHeaders and XForwardedHeaders plugins in Ktor to handle reverse proxy headers and obtain information about the original request.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:30:06", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-forward-headers.html", "language": "en-US", "ogDescription": "", "og:title": "Forwarded headers | Ktor", "twitter:description": "", "twitter:title": "Forwarded headers | Ktor", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Forwarded headers | Ktor", "og:site_name": "Ktor Help", "title": "Forwarded headers | Ktor Documentation", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.247233139", "og:url": "https://ktor.io/docs/3.1.1/server-forward-headers.html", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "og:description": "", "og:type": "website", "scrapeId": "ee09acc9-fb4e-488a-93e2-e3bca59e3cf7", "sourceURL": "https://ktor.io/docs/server-forward-headers.html", "url": "https://ktor.io/docs/server-forward-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I code example in ktor?\n\nAssistant: To code example in ktor, here's what you do:\n[forwarded-header](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/forwarded-header).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-forward-headers.html", "title": "Server Plugin Forwarded headers", "description": "This page covers the usage of ForwardedHeaders and XForwardedHeaders plugins in Ktor to handle reverse proxy headers and obtain information about the original request.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:30:06", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-forward-headers.html", "language": "en-US", "ogDescription": "", "og:title": "Forwarded headers | Ktor", "twitter:description": "", "twitter:title": "Forwarded headers | Ktor", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Forwarded headers | Ktor", "og:site_name": "Ktor Help", "title": "Forwarded headers | Ktor Documentation", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.247233139", "og:url": "https://ktor.io/docs/3.1.1/server-forward-headers.html", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "og:description": "", "og:type": "website", "scrapeId": "ee09acc9-fb4e-488a-93e2-e3bca59e3cf7", "sourceURL": "https://ktor.io/docs/server-forward-headers.html", "url": "https://ktor.io/docs/server-forward-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Forwarded headers in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nGradle (Kotlin)\n\nimplementation(\"io.ktor:ktor-server-forwarded-header:$ktor_version\")\n\nGradle (Groovy)\n\nimplementation \"io.ktor:ktor-server-forwarded-header:$ktor_version\"\n\nMaven\n\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-forwarded-header-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of server plugin forwarded headers.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-forward-headers.html", "title": "Server Plugin Forwarded headers", "description": "This page covers the usage of ForwardedHeaders and XForwardedHeaders plugins in Ktor to handle reverse proxy headers and obtain information about the original request.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:30:06", "type": "code_examples", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-forward-headers.html", "language": "en-US", "ogDescription": "", "og:title": "Forwarded headers | Ktor", "twitter:description": "", "twitter:title": "Forwarded headers | Ktor", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Forwarded headers | Ktor", "og:site_name": "Ktor Help", "title": "Forwarded headers | Ktor Documentation", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.247233139", "og:url": "https://ktor.io/docs/3.1.1/server-forward-headers.html", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "og:description": "", "og:type": "website", "scrapeId": "ee09acc9-fb4e-488a-93e2-e3bca59e3cf7", "sourceURL": "https://ktor.io/docs/server-forward-headers.html", "url": "https://ktor.io/docs/server-forward-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Forwarded headers in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo prevent manipulating the `Forwarded` headers, install these plugins if your application only accepts the reverse proxy connections.\n\nYou can find the full example here: [forwarded-header](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/forwarded-header).\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-forward-headers.html", "title": "Server Plugin Forwarded headers", "description": "This page covers the usage of ForwardedHeaders and XForwardedHeaders plugins in Ktor to handle reverse proxy headers and obtain information about the original request.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:30:06", "type": "best_practices", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-forward-headers.html", "language": "en-US", "ogDescription": "", "og:title": "Forwarded headers | Ktor", "twitter:description": "", "twitter:title": "Forwarded headers | Ktor", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Forwarded headers | Ktor", "og:site_name": "Ktor Help", "title": "Forwarded headers | Ktor Documentation", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.247233139", "og:url": "https://ktor.io/docs/3.1.1/server-forward-headers.html", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:creator": "@JetBrainsKtor", "og:description": "", "og:type": "website", "scrapeId": "ee09acc9-fb4e-488a-93e2-e3bca59e3cf7", "sourceURL": "https://ktor.io/docs/server-forward-headers.html", "url": "https://ktor.io/docs/server-forward-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Digest authentication in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Digest authentication in Ktor Server in ktor.\n\n# Digest authentication in Ktor Server\n\nThis page covers how to implement digest authentication in Ktor Server, including dependencies, configuration, and usage examples.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo enable `digest` authentication, you need to include the `ktor-server-auth` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Digest authentication flow\n\nThe digest authentication flow looks as follows:\n\n1. A client makes a request without the `Authorization` header to a specific [route](https://ktor.io/docs/server-routing.html) in a server application.\n\n2. A server responds to a client with a `401` (Unauthorized) response status and uses a `WWW-Authenticate` response header to provide information that the digest authentication scheme is used to protect a route. A typical `WWW-Authenticate` header looks like this:\n\n```\nWWW-Authenticate: Digest\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           algorithm=\"MD5\"\n```\n\nIn Ktor, you can specify the realm and the way of generating a nonce value when [configuring](https://ktor.io/docs/server-digest-auth.html#configure-provider) the `digest` authentication provider.\n\n3. Usually a client displays a login dialog where a user can enter credentials. Then, a client makes a request with the following `Authorization` header:\n\n```\nAuthorization: Digest username=\"jetbrains\",\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           uri=\"/\",\n           algorithm=MD5,\n           response=\"6299988bb4f05c0d8ad44295873858cf\"\n```\n\nThe `response` value is generated in the following way:\n\na. `HA1 = MD5(username:realm:password)`\n\n> ### tip\n> This part [is stored](https://ktor.io/docs/server-digest-auth.html#digest-table) on a server and can be used by Ktor to validate user credentials.\n\nb. `HA2 = MD5(method:digestURI)`\n\nc. `response = MD5(HA1:nonce:HA2)`\n\n4. A server [validates](https://ktor.io/docs/server-digest-auth.html#configure-provider) credentials sent by a client and responds with the requested content.\n\n## Install digest authentication\n\nTo install the `digest` authentication provider, call the [digest](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/digest.html) function inside the `install` block:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    digest {\n        // Configure digest authentication\n    }\n}\n```\n\nYou can optionally specify a [provider name](https://ktor.io/docs/server-auth.html#provider-name) that can be used to [authenticate a specified route](https://ktor.io/docs/server-digest-auth.html#authenticate-route).\n\n## Configure digest authentication\n\nTo get a general idea of how to configure different authentication providers in Ktor, see [Configure Authentication](https://ktor.io/docs/server-auth.html#configure). In this section, we'll see on configuration specifics of the `digest` authentication provider.\n\n### Step 1: Provide a user table with digests\n\nThe `digest` authentication provider validates user credentials using the `HA1` part of a digest message. So, you can provide a user table that contains usernames and corresponding `HA1` hashes. In the example below, the `getMd5Digest` function is used to generate `HA1` hashes:\n\n```\nfun getMd5Digest(str: String): ByteArray = MessageDigest.getInstance(\"MD5\").digest(str.toByteArray(UTF_8))\n\nval myRealm = \"Access to the '/' path\"\nval userTable: Map<String, ByteArray> = mapOf(\n    \"jetbrains\" to getMd5Digest(\"jetbrains:$myRealm:foobar\"),\n    \"admin\" to getMd5Digest(\"admin:$myRealm:password\")\n)\n```\n\n### Step 2: Configure a digest provider\n\nThe `digest` authentication provider exposes its settings via the [DigestAuthenticationProvider.Config](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-digest-authentication-provider/-config/index.html) class. In the example below, the following settings are specified:\n\n- The `realm` property sets the realm to be passed in the `WWW-Authenticate` header.\n\n- The `digestProvider` function fetches the `HA1` part of digest for a specified username.\n\n- (Optional) The `validate` function allows you to map the credentials to a custom principal.\n\n```\nfun Application.main() {\n    install(Authentication) {\n        digest(\"auth-digest\") {\n            realm = myRealm\n            digestProvider { userName, realm ->\n                userTable[userName]\n            }\n            validate { credentials ->\n                if (credentials.userName.isNotEmpty()) {\n                    CustomPrincipal(credentials.userName, credentials.realm)\n                } else {\n                    null\n                }\n            }\n        }\n    }\n}\n\ndata class CustomPrincipal(val userName: String, val realm: String)\n```\n\nYou can also use the [nonceManager](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-digest-authentication-provider/-config/nonce-manager.html) property to specify how to generate nonce values.\n\n### Step 3: Protect specific resources\n\nAfter configuring the `digest` provider, you can protect specific resources in our application using the [authenticate](https://ktor.io/docs/server-auth.html#authenticate-route) function. In the case of successful authentication, you can retrieve an authenticated [Principal](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-principal/index.html) inside a route handler using the `call.principal` function and get a name of an authenticated user.\n\n```\nrouting {\n    authenticate(\"auth-digest\") {\n        get(\"/\") {\n            call.respondText(\"Hello, ${call.principal<CustomPrincipal>()?.userName}!\")\n        }\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-digest-auth.html", "title": "Digest authentication in Ktor Server", "description": "This page covers how to implement digest authentication in Ktor Server, including dependencies, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:30:38", "type": "overview", "page_metadata": {"twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Digest authentication in Ktor Server | Ktor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Digest authentication in Ktor Server | Ktor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "title": "Digest authentication in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:type": "website", "built-on": "2025-02-26T14:01:03.560962548", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "og:url": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "ogTitle": "Digest authentication in Ktor Server | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "scrapeId": "6dde5889-93b2-4552-a9ee-114b218b95e4", "sourceURL": "https://ktor.io/docs/server-digest-auth.html", "url": "https://ktor.io/docs/server-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo enable `digest` authentication, you need to include the `ktor-server-auth` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-digest-auth.html", "title": "Digest authentication in Ktor Server", "description": "This page covers how to implement digest authentication in Ktor Server, including dependencies, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:30:38", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Digest authentication in Ktor Server | Ktor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Digest authentication in Ktor Server | Ktor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "title": "Digest authentication in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:type": "website", "built-on": "2025-02-26T14:01:03.560962548", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "og:url": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "ogTitle": "Digest authentication in Ktor Server | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "scrapeId": "6dde5889-93b2-4552-a9ee-114b218b95e4", "sourceURL": "https://ktor.io/docs/server-digest-auth.html", "url": "https://ktor.io/docs/server-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I digest authentication flow in ktor?\n\nAssistant: To digest authentication flow in ktor, here's what you do:\nThe digest authentication flow looks as follows:\n\n1. A client makes a request without the `Authorization` header to a specific [route](https://ktor.io/docs/server-routing.html) in a server application.\n\n2. A server responds to a client with a `401` (Unauthorized) response status and uses a `WWW-Authenticate` response header to provide information that the digest authentication scheme is used to protect a route. A typical `WWW-Authenticate` header looks like this:\n\n```\nWWW-Authenticate: Digest\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           algorithm=\"MD5\"\n```\n\nIn Ktor, you can specify the realm and the way of generating a nonce value when [configuring](https://ktor.io/docs/server-digest-auth.html#configure-provider) the `digest` authentication provider.\n\n3. Usually a client displays a login dialog where a user can enter credentials. Then, a client makes a request with the following `Authorization` header:\n\n```\nAuthorization: Digest username=\"jetbrains\",\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           uri=\"/\",\n           algorithm=MD5,\n           response=\"6299988bb4f05c0d8ad44295873858cf\"\n```\n\nThe `response` value is generated in the following way:\n\na. `HA1 = MD5(username:realm:password)`\n\n> ### tip\n> This part [is stored](https://ktor.io/docs/server-digest-auth.html#digest-table) on a server and can be used by Ktor to validate user credentials.\n\nb. `HA2 = MD5(method:digestURI)`\n\nc. `response = MD5(HA1:nonce:HA2)`\n\n4. A server [validates](https://ktor.io/docs/server-digest-auth.html#configure-provider) credentials sent by a client and responds with the requested content..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-digest-auth.html", "title": "Digest authentication in Ktor Server", "description": "This page covers how to implement digest authentication in Ktor Server, including dependencies, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:30:38", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Digest authentication in Ktor Server | Ktor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Digest authentication in Ktor Server | Ktor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "title": "Digest authentication in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:type": "website", "built-on": "2025-02-26T14:01:03.560962548", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "og:url": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "ogTitle": "Digest authentication in Ktor Server | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "scrapeId": "6dde5889-93b2-4552-a9ee-114b218b95e4", "sourceURL": "https://ktor.io/docs/server-digest-auth.html", "url": "https://ktor.io/docs/server-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install digest authentication in ktor?\n\nAssistant: To install digest authentication in ktor, here's what you do:\nTo install the `digest` authentication provider, call the [digest](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/digest.html) function inside the `install` block:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    digest {\n        // Configure digest authentication\n    }\n}\n```\n\nYou can optionally specify a [provider name](https://ktor.io/docs/server-auth.html#provider-name) that can be used to [authenticate a specified route](https://ktor.io/docs/server-digest-auth.html#authenticate-route)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-digest-auth.html", "title": "Digest authentication in Ktor Server", "description": "This page covers how to implement digest authentication in Ktor Server, including dependencies, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:30:38", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Digest authentication in Ktor Server | Ktor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Digest authentication in Ktor Server | Ktor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "title": "Digest authentication in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:type": "website", "built-on": "2025-02-26T14:01:03.560962548", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "og:url": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "ogTitle": "Digest authentication in Ktor Server | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "scrapeId": "6dde5889-93b2-4552-a9ee-114b218b95e4", "sourceURL": "https://ktor.io/docs/server-digest-auth.html", "url": "https://ktor.io/docs/server-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure digest authentication in ktor?\n\nAssistant: To configure digest authentication in ktor, here's what you do:\nTo get a general idea of how to configure different authentication providers in Ktor, see [Configure Authentication](https://ktor.io/docs/server-auth.html#configure). In this section, we'll see on configuration specifics of the `digest` authentication provider.\n\n### Step 1: Provide a user table with digests\n\nThe `digest` authentication provider validates user credentials using the `HA1` part of a digest message. So, you can provide a user table that contains usernames and corresponding `HA1` hashes. In the example below, the `getMd5Digest` function is used to generate `HA1` hashes:\n\n```\nfun getMd5Digest(str: String): ByteArray = MessageDigest.getInstance(\"MD5\").digest(str.toByteArray(UTF_8))\n\nval myRealm = \"Access to the '/' path\"\nval userTable: Map<String, ByteArray> = mapOf(\n    \"jetbrains\" to getMd5Digest(\"jetbrains:$myRealm:foobar\"),\n    \"admin\" to getMd5Digest(\"admin:$myRealm:password\")\n)\n```\n\n### Step 2: Configure a digest provider\n\nThe `digest` authentication provider exposes its settings via the [DigestAuthenticationProvider.Config](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-digest-authentication-provider/-config/index.html) class. In the example below, the following settings are specified:\n\n- The `realm` property sets the realm to be passed in the `WWW-Authenticate` header.\n\n- The `digestProvider` function fetches the `HA1` part of digest for a specified username.\n\n- (Optional) The `validate` function allows you to map the credentials to a custom principal.\n\n```\nfun Application.main() {\n    install(Authentication) {\n        digest(\"auth-digest\") {\n            realm = myRealm\n            digestProvider { userName, realm ->\n                userTable[userName]\n            }\n            validate { credentials ->\n                if (credentials.userName.isNotEmpty()) {\n                    CustomPrincipal(credentials.userName, credentials.realm)\n                } else {\n                    null\n                }\n            }\n        }\n    }\n}\n\ndata class CustomPrincipal(val userName: String, val realm: String)\n```\n\nYou can also use the [nonceManager](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-digest-authentication-provider/-config/nonce-manager.html) property to specify how to generate nonce values.\n\n### Step 3: Protect specific resources\n\nAfter configuring the `digest` provider, you can protect specific resources in our application using the [authenticate](https://ktor.io/docs/server-auth.html#authenticate-route) function. In the case of successful authentication, you can retrieve an authenticated [Principal](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-principal/index.html) inside a route handler using the `call.principal` function and get a name of an authenticated user.\n\n```\nrouting {\n    authenticate(\"auth-digest\") {\n        get(\"/\") {\n            call.respondText(\"Hello, ${call.principal<CustomPrincipal>()?.userName}!\")\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-digest-auth.html", "title": "Digest authentication in Ktor Server", "description": "This page covers how to implement digest authentication in Ktor Server, including dependencies, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:30:38", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Digest authentication in Ktor Server | Ktor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Digest authentication in Ktor Server | Ktor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "title": "Digest authentication in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:type": "website", "built-on": "2025-02-26T14:01:03.560962548", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "og:url": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "ogTitle": "Digest authentication in Ktor Server | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "scrapeId": "6dde5889-93b2-4552-a9ee-114b218b95e4", "sourceURL": "https://ktor.io/docs/server-digest-auth.html", "url": "https://ktor.io/docs/server-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Digest authentication in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of digest authentication in ktor server.\n\n**Add dependencies (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies (groovy), which is an important aspect of digest authentication in ktor server.\n\n**Add dependencies (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies (maven), which is an important aspect of digest authentication in ktor server.\n\n**Digest authentication flow - WWW-Authenticate header**:\n\n```yaml\nWWW-Authenticate: Digest\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           algorithm=\"MD5\"\n```\n\nThis snippet shows you how to digest authentication flow - www-authenticate header, which is an important aspect of digest authentication in ktor server.\n\n**Digest authentication flow - Authorization header**:\n\n```yaml\nAuthorization: Digest username=\"jetbrains\",\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           uri=\"/\",\n           algorithm=MD5,\n           response=\"6299988bb4f05c0d8ad44295873858cf\"\n```\n\nThis snippet shows you how to digest authentication flow - authorization header, which is an important aspect of digest authentication in ktor server.\n\n**Install digest authentication**:\n\n```yaml\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    digest {\n        // Configure digest authentication\n    }\n}\n```\n\nThis snippet shows you how to install digest authentication, which is an important aspect of digest authentication in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-digest-auth.html", "title": "Digest authentication in Ktor Server", "description": "This page covers how to implement digest authentication in Ktor Server, including dependencies, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:30:38", "type": "code_examples", "page_metadata": {"twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Digest authentication in Ktor Server | Ktor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Digest authentication in Ktor Server | Ktor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "title": "Digest authentication in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:type": "website", "built-on": "2025-02-26T14:01:03.560962548", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "og:url": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "ogTitle": "Digest authentication in Ktor Server | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "scrapeId": "6dde5889-93b2-4552-a9ee-114b218b95e4", "sourceURL": "https://ktor.io/docs/server-digest-auth.html", "url": "https://ktor.io/docs/server-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Digest authentication in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThis part is stored on a server and can be used by Ktor to validate user credentials.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-digest-auth.html", "title": "Digest authentication in Ktor Server", "description": "This page covers how to implement digest authentication in Ktor Server, including dependencies, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:30:38", "type": "best_practices", "page_metadata": {"twitter:site": "@JetBrainsKtor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:description": "", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Digest authentication in Ktor Server | Ktor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Digest authentication in Ktor Server | Ktor", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "title": "Digest authentication in Ktor Server | Ktor Documentation", "ogSiteName": "Ktor Help", "og:type": "website", "built-on": "2025-02-26T14:01:03.560962548", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "og:url": "https://ktor.io/docs/3.1.1/server-digest-auth.html", "ogTitle": "Digest authentication in Ktor Server | Ktor", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "scrapeId": "6dde5889-93b2-4552-a9ee-114b218b95e4", "sourceURL": "https://ktor.io/docs/server-digest-auth.html", "url": "https://ktor.io/docs/server-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin XHttpMethodOverride is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin XHttpMethodOverride in ktor.\n\n# Server Plugin XHttpMethodOverride\n\nThis page covers the XHttpMethodOverride plugin for Ktor, which enables the capability to tunnel HTTP verbs inside the X-HTTP-Method-Override header.Here's a quick rundown of what this is about:\n\n## Server Plugin XHttpMethodOverride\n\nThe XHttpMethodOverride plugin enables the capability to tunnel HTTP verbs inside the X-HTTP-Method-Override header. This might be useful if your server API handles multiple HTTP verbs (GET, PUT, POST, DELETE, and so on), but the client can only use a limited set of verbs (for example, GET and POST) due to specific limitations. For instance, if the client sends a request with the X-Http-Method-Override header set to DELETE, Ktor will process this request using the delete route handler.\n\n## Add dependencies\n\nTo use XHttpMethodOverride, you need to include the ktor-server-method-override artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-method-override:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-method-override:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-method-override-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install XHttpMethodOverride\n\nTo install the XHttpMethodOverride plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install XHttpMethodOverride...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.methodoverride.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(XHttpMethodOverride)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.methodoverride.*\n// ...\nfun Application.module() {\n    install(XHttpMethodOverride)\n    // ...\n}\n```\n\n## Configure XHttpMethodOverride\n\nBy default, XHttpMethodOverride checks the X-Http-Method-Override header to determine the route that should handle the request. You can customize a header name using the headerName property.\n\n## Example\n\nThe HTTP request below uses the POST verb with the X-Http-Method-Override header set to DELETE:\n\n```\nPOST http://0.0.0.0:8080/customer/3\nX-Http-Method-Override: DELETE\n```\n\nTo handle such requests using the delete route handler, you need to install XHttpMethodOverride:\n\n```\npackage com.example\n\nimport io.ktor.http.*\nimport io.ktor.serialization.kotlinx.json.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.contentnegotiation.*\nimport io.ktor.server.plugins.methodoverride.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport kotlinx.serialization.*\nimport kotlinx.serialization.json.*\n\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n\nfun Application.main() {\n    val customerStorage = mutableListOf<Customer>()\n    customerStorage.addAll(\n        arrayOf(\n            Customer(1, \"Jane\", \"Smith\"),\n            Customer(2, \"John\", \"Smith\"),\n            Customer(3, \"Jet\", \"Brains\")\n        )\n    )\n\n    install(XHttpMethodOverride)\n    install(ContentNegotiation) {\n        json(Json)\n    }\n    routing {\n        get(\"/customer/{id}\") {\n            val id = call.parameters[\"id\"]\n            val customer: Customer = customerStorage.find { it.id == id!!.toInt() }!!\n            call.respond(customer)\n        }\n\n        delete(\"/customer/{id}\") {\n            val id = call.parameters[\"id\"]\n            customerStorage.removeIf { it.id == id!!.toInt() }\n            call.respondText(\"Customer is removed\", status = HttpStatusCode.NoContent)\n        }\n    }\n}\n```\n\nYou can find the full example here: json-kotlinx-method-override.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-method-override.html", "title": "Server Plugin XHttpMethodOverride", "description": "This page covers the XHttpMethodOverride plugin for Ktor, which enables the capability to tunnel HTTP verbs inside the X-HTTP-Method-Override header.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:31:20", "type": "overview", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "XHttpMethodOverride | Ktor", "ogSiteName": "Ktor Help", "title": "XHttpMethodOverride | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:title": "XHttpMethodOverride | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-method-override.html", "og:title": "XHttpMethodOverride | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-method-override.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "language": "en-US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:06.551048487", "twitter:description": "", "ogLocale": "en_US", "scrapeId": "a3238db0-9af2-40c8-951b-d889af948df8", "sourceURL": "https://ktor.io/docs/server-method-override.html", "url": "https://ktor.io/docs/server-method-override.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I server plugin xhttpmethodoverride in ktor?\n\nAssistant: To server plugin xhttpmethodoverride in ktor, here's what you do:\nThe XHttpMethodOverride plugin enables the capability to tunnel HTTP verbs inside the X-HTTP-Method-Override header. This might be useful if your server API handles multiple HTTP verbs (GET, PUT, POST, DELETE, and so on), but the client can only use a limited set of verbs (for example, GET and POST) due to specific limitations. For instance, if the client sends a request with the X-Http-Method-Override header set to DELETE, Ktor will process this request using the delete route handler..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-method-override.html", "title": "Server Plugin XHttpMethodOverride", "description": "This page covers the XHttpMethodOverride plugin for Ktor, which enables the capability to tunnel HTTP verbs inside the X-HTTP-Method-Override header.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:31:20", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "XHttpMethodOverride | Ktor", "ogSiteName": "Ktor Help", "title": "XHttpMethodOverride | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:title": "XHttpMethodOverride | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-method-override.html", "og:title": "XHttpMethodOverride | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-method-override.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "language": "en-US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:06.551048487", "twitter:description": "", "ogLocale": "en_US", "scrapeId": "a3238db0-9af2-40c8-951b-d889af948df8", "sourceURL": "https://ktor.io/docs/server-method-override.html", "url": "https://ktor.io/docs/server-method-override.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use XHttpMethodOverride, you need to include the ktor-server-method-override artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-method-override:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-method-override:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-method-override-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-method-override.html", "title": "Server Plugin XHttpMethodOverride", "description": "This page covers the XHttpMethodOverride plugin for Ktor, which enables the capability to tunnel HTTP verbs inside the X-HTTP-Method-Override header.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:31:20", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "XHttpMethodOverride | Ktor", "ogSiteName": "Ktor Help", "title": "XHttpMethodOverride | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:title": "XHttpMethodOverride | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-method-override.html", "og:title": "XHttpMethodOverride | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-method-override.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "language": "en-US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:06.551048487", "twitter:description": "", "ogLocale": "en_US", "scrapeId": "a3238db0-9af2-40c8-951b-d889af948df8", "sourceURL": "https://ktor.io/docs/server-method-override.html", "url": "https://ktor.io/docs/server-method-override.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install xhttpmethodoverride in ktor?\n\nAssistant: To install xhttpmethodoverride in ktor, here's what you do:\nTo install the XHttpMethodOverride plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install XHttpMethodOverride...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.methodoverride.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(XHttpMethodOverride)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.methodoverride.*\n// ...\nfun Application.module() {\n    install(XHttpMethodOverride)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-method-override.html", "title": "Server Plugin XHttpMethodOverride", "description": "This page covers the XHttpMethodOverride plugin for Ktor, which enables the capability to tunnel HTTP verbs inside the X-HTTP-Method-Override header.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:31:20", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "XHttpMethodOverride | Ktor", "ogSiteName": "Ktor Help", "title": "XHttpMethodOverride | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:title": "XHttpMethodOverride | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-method-override.html", "og:title": "XHttpMethodOverride | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-method-override.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "language": "en-US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:06.551048487", "twitter:description": "", "ogLocale": "en_US", "scrapeId": "a3238db0-9af2-40c8-951b-d889af948df8", "sourceURL": "https://ktor.io/docs/server-method-override.html", "url": "https://ktor.io/docs/server-method-override.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure xhttpmethodoverride in ktor?\n\nAssistant: To configure xhttpmethodoverride in ktor, here's what you do:\nBy default, XHttpMethodOverride checks the X-Http-Method-Override header to determine the route that should handle the request. You can customize a header name using the headerName property..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-method-override.html", "title": "Server Plugin XHttpMethodOverride", "description": "This page covers the XHttpMethodOverride plugin for Ktor, which enables the capability to tunnel HTTP verbs inside the X-HTTP-Method-Override header.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:31:20", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "XHttpMethodOverride | Ktor", "ogSiteName": "Ktor Help", "title": "XHttpMethodOverride | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:title": "XHttpMethodOverride | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-method-override.html", "og:title": "XHttpMethodOverride | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-method-override.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "language": "en-US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:06.551048487", "twitter:description": "", "ogLocale": "en_US", "scrapeId": "a3238db0-9af2-40c8-951b-d889af948df8", "sourceURL": "https://ktor.io/docs/server-method-override.html", "url": "https://ktor.io/docs/server-method-override.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example in ktor?\n\nAssistant: To example in ktor, here's what you do:\nThe HTTP request below uses the POST verb with the X-Http-Method-Override header set to DELETE:\n\n```\nPOST http://0.0.0.0:8080/customer/3\nX-Http-Method-Override: DELETE\n```\n\nTo handle such requests using the delete route handler, you need to install XHttpMethodOverride:\n\n```\npackage com.example\n\nimport io.ktor.http.*\nimport io.ktor.serialization.kotlinx.json.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.contentnegotiation.*\nimport io.ktor.server.plugins.methodoverride.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport kotlinx.serialization.*\nimport kotlinx.serialization.json.*\n\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n\nfun Application.main() {\n    val customerStorage = mutableListOf<Customer>()\n    customerStorage.addAll(\n        arrayOf(\n            Customer(1, \"Jane\", \"Smith\"),\n            Customer(2, \"John\", \"Smith\"),\n            Customer(3, \"Jet\", \"Brains\")\n        )\n    )\n\n    install(XHttpMethodOverride)\n    install(ContentNegotiation) {\n        json(Json)\n    }\n    routing {\n        get(\"/customer/{id}\") {\n            val id = call.parameters[\"id\"]\n            val customer: Customer = customerStorage.find { it.id == id!!.toInt() }!!\n            call.respond(customer)\n        }\n\n        delete(\"/customer/{id}\") {\n            val id = call.parameters[\"id\"]\n            customerStorage.removeIf { it.id == id!!.toInt() }\n            call.respondText(\"Customer is removed\", status = HttpStatusCode.NoContent)\n        }\n    }\n}\n```\n\nYou can find the full example here: json-kotlinx-method-override..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-method-override.html", "title": "Server Plugin XHttpMethodOverride", "description": "This page covers the XHttpMethodOverride plugin for Ktor, which enables the capability to tunnel HTTP verbs inside the X-HTTP-Method-Override header.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:31:20", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "XHttpMethodOverride | Ktor", "ogSiteName": "Ktor Help", "title": "XHttpMethodOverride | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:title": "XHttpMethodOverride | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-method-override.html", "og:title": "XHttpMethodOverride | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-method-override.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "language": "en-US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:06.551048487", "twitter:description": "", "ogLocale": "en_US", "scrapeId": "a3238db0-9af2-40c8-951b-d889af948df8", "sourceURL": "https://ktor.io/docs/server-method-override.html", "url": "https://ktor.io/docs/server-method-override.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin XHttpMethodOverride in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-method-override:$ktor_version\")\nimplementation \"io.ktor:ktor-server-method-override:$ktor_version\"\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-method-override-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of server plugin xhttpmethodoverride.\n\n**Install XHttpMethodOverride**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.methodoverride.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(XHttpMethodOverride)\n        // ...\n    }.start(wait = true)\n}\n\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.methodoverride.*\n// ...\nfun Application.module() {\n    install(XHttpMethodOverride)\n    // ...\n}\n```\n\nThis snippet shows you how to install xhttpmethodoverride, which is an important aspect of server plugin xhttpmethodoverride.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-method-override.html", "title": "Server Plugin XHttpMethodOverride", "description": "This page covers the XHttpMethodOverride plugin for Ktor, which enables the capability to tunnel HTTP verbs inside the X-HTTP-Method-Override header.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:31:20", "type": "code_examples", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "XHttpMethodOverride | Ktor", "ogSiteName": "Ktor Help", "title": "XHttpMethodOverride | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:title": "XHttpMethodOverride | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-method-override.html", "og:title": "XHttpMethodOverride | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-method-override.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "language": "en-US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:06.551048487", "twitter:description": "", "ogLocale": "en_US", "scrapeId": "a3238db0-9af2-40c8-951b-d889af948df8", "sourceURL": "https://ktor.io/docs/server-method-override.html", "url": "https://ktor.io/docs/server-method-override.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin XHttpMethodOverride in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCustomize the header name using the headerName property if needed.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-method-override.html", "title": "Server Plugin XHttpMethodOverride", "description": "This page covers the XHttpMethodOverride plugin for Ktor, which enables the capability to tunnel HTTP verbs inside the X-HTTP-Method-Override header.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:31:20", "type": "best_practices", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "XHttpMethodOverride | Ktor", "ogSiteName": "Ktor Help", "title": "XHttpMethodOverride | Ktor Documentation", "og:site_name": "Ktor Help", "twitter:title": "XHttpMethodOverride | Ktor", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-method-override.html", "og:title": "XHttpMethodOverride | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-method-override.html", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "language": "en-US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:06.551048487", "twitter:description": "", "ogLocale": "en_US", "scrapeId": "a3238db0-9af2-40c8-951b-d889af948df8", "sourceURL": "https://ktor.io/docs/server-method-override.html", "url": "https://ktor.io/docs/server-method-override.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Serving static content is in ktor?\n\nAssistant: Sure, I'd be happy to explain Serving static content in ktor.\n\n# Serving static content\n\nThis page covers how to serve static content using Ktor, including serving from folders, ZIP files, and embedded resources.Here's a quick rundown of what this is about:\n\n## Folders\n\nTo serve static files from a local filesystem, use the [`staticFiles()`](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/static-files.html) function. In this case, relative paths are resolved using the current working directory.\n\n```\nrouting {\n    staticFiles(\"/resources\", File(\"files\"))\n}\n```\n\nIn the example above, any request from `/resources` is mapped to the `files` physical folder in the current working directory. Ktor recursively serves up any file from `files` as long as a URL path and a physical filename match.\n\nFor the full example, see [static-files](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/static-files).\n\n## ZIP files\n\nTo serve static content from a ZIP file, Ktor provides the [`staticZip()`](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/static-zip.html) function. This allows you to map requests directly to the contents of a ZIP archive, as shown in the example below:\n\n```\nrouting {\n    staticZip(\"/\", \"\", Paths.get(\"files/text-files.zip\"))\n}\n```\n\nIn this example, any request from the root URL `/` is mapped directly to the contents of the ZIP file `text-files.zip`.\n\n### Auto-reloading support\n\nThe `staticZip()` function also supports automatic reloading. If any changes are detected in the ZIP file's parent directory, the ZIP file system is reloaded on the next request. This ensures that the served content remains up-to-date without requiring a server restart.\n\nFor the full example, see [static-zip](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/static-zip).\n\n## Resources\n\nTo serve content from the classpath, use the [`staticResources()`](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/static-resources.html) function.\n\n```\nrouting {\n    staticResources(\"/resources\", \"static\")\n}\n```\n\nThis maps any request from `/resources` to the `static` package in application resources. In this case, Ktor recursively serves up any file from the `static` package as long as a URL path and a path to resource match.\n\nFor the full example, see [static-resources](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/static-resources).\n\n## Additional configuration\n\nKtor provides more configurations to static files and resources.\n\n### Index file\n\nIf a file with the name `index.html` exists, Ktor will serve it by default when the directory is requested. You can set a custom index file using the `index` parameter:\n\n```\nstaticResources(\"/custom\", \"static\", index = \"custom_index.html\")\n```\n\nIn this case, when `/custom` is requested, Ktor serves `/custom_index.html`.\n\n### Pre-compressed files\n\nKtor provides the ability to serve pre-compressed files and avoid using [dynamic compression](https://ktor.io/docs/server-compression.html). To use this functionality, define the `preCompressed()` function inside a block statement:\n\n```\nstaticFiles(\"/\", File(\"files\")) {\n    preCompressed(CompressedFileType.BROTLI, CompressedFileType.GZIP)\n}\n```\n\nIn this example, for a request made to `/js/script.js`, Ktor can serve `/js/script.js.br` or `/js/script.js.gz`.\n\n### HEAD requests\n\nThe `enableAutoHeadResponse()` function allows you to automatically respond to a `HEAD` request for every path inside a static route that has a `GET` defined.\n\n```\nstaticResources(\"/\", \"static\"){ \n    enableAutoHeadResponse()\n}\n```\n\n### Default file response\n\nThe `default()` function provides the ability to reply with a file for any request inside static route that has no corresponding file.\n\n```\nstaticFiles(\"/\", File(\"files\")) {\n    default(\"index.html\")\n}\n```\n\nIn this example when the client requests a resource that doesn't exist, the `index.html` file will be served as a response.\n\n### Content type\n\nBy default, Ktor tries to guess value of the `Content-Type` header from the file extension. You can use the `contentType()` function to set the `Content-Type` header explicitly.\n\n```\nstaticFiles(\"/files\", File(\"textFiles\")) {\n    contentType { file ->\n        when (file.name) {\n            \"html-file.txt\" -> ContentType.Text.Html\n            else -> null\n        }\n    }\n}\n```\n\nIn this example, the response for file `html-file.txt` will have `Content-Type: text/html` header and for every other file default behaviour will be applied.\n\n### Caching\n\nThe `cacheControl()` function allows you to configure the `Cache-Control` header for HTTP caching.\n\n```\nfun Application.module() {\n    routing {\n        staticFiles(\"/files\", File(\"textFiles\")) {\n            cacheControl { file ->\n                when (file.name) {\n                    \"file.txt\" -> listOf(Immutable, CacheControl.MaxAge(10000))\n                    else -> emptyList()\n                }\n            }\n        }\n    }\n}\nobject Immutable : CacheControl(null) {\n    override fun toString(): String = \"immutable\"\n}\n```\n\n> ### tip\n>\n> For more information on caching in Ktor, see [Caching headers](https://ktor.io/docs/server-caching-headers.html).\n\n### Excluded files\n\nThe `exclude()` function allows you to exclude files from being served. When excluded files are requested by the client, the server will respond with a `403 Forbidden` status code.\n\n```\nstaticFiles(\"/files\", File(\"textFiles\")) {\n    exclude { file -> file.path.contains(\"excluded\") }\n}\n```\n\n### File extensions fallbacks\n\nWhen a requested file is not found, Ktor can add the given extensions to the file name and search for it.\n\n```\nstaticResources(\"/\", \"static\"){ \n    extensions(\"html\", \"htm\")\n}\n```\n\nIn this example, when `/index` is requested, Ktor will search for `/index.html` and serve the found content.\n\n### Custom modifications\n\nThe `modify()` function allows you to apply custom modification to a resulting response.\n\n```\nstaticFiles(\"/\", File(\"files\")) {\n    modify { file, call ->\n        call.response.headers.append(HttpHeaders.ETag, file.name.toString())\n    }\n}\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-static-content.html", "title": "Serving static content", "description": "This page covers how to serve static content using Ktor, including serving from folders, ZIP files, and embedded resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:32:10", "type": "overview", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Serving static content | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving static content | Ktor", "og:type": "website", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Serving static content | Ktor", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-static-content.html", "title": "Serving static content | Ktor Documentation", "ogDescription": "", "built-on": "2025-02-26T14:01:06.957021471", "og:url": "https://ktor.io/docs/3.1.1/server-static-content.html", "scrapeId": "976be3a4-07ff-4df5-9ead-13e83bc88ccb", "sourceURL": "https://ktor.io/docs/server-static-content.html", "url": "https://ktor.io/docs/server-static-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I folders in ktor?\n\nAssistant: To folders in ktor, here's what you do:\nTo serve static files from a local filesystem, use the [`staticFiles()`](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/static-files.html) function. In this case, relative paths are resolved using the current working directory.\n\n```\nrouting {\n    staticFiles(\"/resources\", File(\"files\"))\n}\n```\n\nIn the example above, any request from `/resources` is mapped to the `files` physical folder in the current working directory. Ktor recursively serves up any file from `files` as long as a URL path and a physical filename match.\n\nFor the full example, see [static-files](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/static-files)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-static-content.html", "title": "Serving static content", "description": "This page covers how to serve static content using Ktor, including serving from folders, ZIP files, and embedded resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:32:10", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Serving static content | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving static content | Ktor", "og:type": "website", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Serving static content | Ktor", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-static-content.html", "title": "Serving static content | Ktor Documentation", "ogDescription": "", "built-on": "2025-02-26T14:01:06.957021471", "og:url": "https://ktor.io/docs/3.1.1/server-static-content.html", "scrapeId": "976be3a4-07ff-4df5-9ead-13e83bc88ccb", "sourceURL": "https://ktor.io/docs/server-static-content.html", "url": "https://ktor.io/docs/server-static-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I zip files in ktor?\n\nAssistant: To zip files in ktor, here's what you do:\nTo serve static content from a ZIP file, Ktor provides the [`staticZip()`](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/static-zip.html) function. This allows you to map requests directly to the contents of a ZIP archive, as shown in the example below:\n\n```\nrouting {\n    staticZip(\"/\", \"\", Paths.get(\"files/text-files.zip\"))\n}\n```\n\nIn this example, any request from the root URL `/` is mapped directly to the contents of the ZIP file `text-files.zip`.\n\n### Auto-reloading support\n\nThe `staticZip()` function also supports automatic reloading. If any changes are detected in the ZIP file's parent directory, the ZIP file system is reloaded on the next request. This ensures that the served content remains up-to-date without requiring a server restart.\n\nFor the full example, see [static-zip](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/static-zip)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-static-content.html", "title": "Serving static content", "description": "This page covers how to serve static content using Ktor, including serving from folders, ZIP files, and embedded resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:32:10", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Serving static content | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving static content | Ktor", "og:type": "website", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Serving static content | Ktor", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-static-content.html", "title": "Serving static content | Ktor Documentation", "ogDescription": "", "built-on": "2025-02-26T14:01:06.957021471", "og:url": "https://ktor.io/docs/3.1.1/server-static-content.html", "scrapeId": "976be3a4-07ff-4df5-9ead-13e83bc88ccb", "sourceURL": "https://ktor.io/docs/server-static-content.html", "url": "https://ktor.io/docs/server-static-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I resources in ktor?\n\nAssistant: To resources in ktor, here's what you do:\nTo serve content from the classpath, use the [`staticResources()`](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/static-resources.html) function.\n\n```\nrouting {\n    staticResources(\"/resources\", \"static\")\n}\n```\n\nThis maps any request from `/resources` to the `static` package in application resources. In this case, Ktor recursively serves up any file from the `static` package as long as a URL path and a path to resource match.\n\nFor the full example, see [static-resources](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/static-resources)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-static-content.html", "title": "Serving static content", "description": "This page covers how to serve static content using Ktor, including serving from folders, ZIP files, and embedded resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:32:10", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Serving static content | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving static content | Ktor", "og:type": "website", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Serving static content | Ktor", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-static-content.html", "title": "Serving static content | Ktor Documentation", "ogDescription": "", "built-on": "2025-02-26T14:01:06.957021471", "og:url": "https://ktor.io/docs/3.1.1/server-static-content.html", "scrapeId": "976be3a4-07ff-4df5-9ead-13e83bc88ccb", "sourceURL": "https://ktor.io/docs/server-static-content.html", "url": "https://ktor.io/docs/server-static-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I additional configuration in ktor?\n\nAssistant: To additional configuration in ktor, here's what you do:\nKtor provides more configurations to static files and resources.\n\n### Index file\n\nIf a file with the name `index.html` exists, Ktor will serve it by default when the directory is requested. You can set a custom index file using the `index` parameter:\n\n```\nstaticResources(\"/custom\", \"static\", index = \"custom_index.html\")\n```\n\nIn this case, when `/custom` is requested, Ktor serves `/custom_index.html`.\n\n### Pre-compressed files\n\nKtor provides the ability to serve pre-compressed files and avoid using [dynamic compression](https://ktor.io/docs/server-compression.html). To use this functionality, define the `preCompressed()` function inside a block statement:\n\n```\nstaticFiles(\"/\", File(\"files\")) {\n    preCompressed(CompressedFileType.BROTLI, CompressedFileType.GZIP)\n}\n```\n\nIn this example, for a request made to `/js/script.js`, Ktor can serve `/js/script.js.br` or `/js/script.js.gz`.\n\n### HEAD requests\n\nThe `enableAutoHeadResponse()` function allows you to automatically respond to a `HEAD` request for every path inside a static route that has a `GET` defined.\n\n```\nstaticResources(\"/\", \"static\"){ \n    enableAutoHeadResponse()\n}\n```\n\n### Default file response\n\nThe `default()` function provides the ability to reply with a file for any request inside static route that has no corresponding file.\n\n```\nstaticFiles(\"/\", File(\"files\")) {\n    default(\"index.html\")\n}\n```\n\nIn this example when the client requests a resource that doesn't exist, the `index.html` file will be served as a response.\n\n### Content type\n\nBy default, Ktor tries to guess value of the `Content-Type` header from the file extension. You can use the `contentType()` function to set the `Content-Type` header explicitly.\n\n```\nstaticFiles(\"/files\", File(\"textFiles\")) {\n    contentType { file ->\n        when (file.name) {\n            \"html-file.txt\" -> ContentType.Text.Html\n            else -> null\n        }\n    }\n}\n```\n\nIn this example, the response for file `html-file.txt` will have `Content-Type: text/html` header and for every other file default behaviour will be applied.\n\n### Caching\n\nThe `cacheControl()` function allows you to configure the `Cache-Control` header for HTTP caching.\n\n```\nfun Application.module() {\n    routing {\n        staticFiles(\"/files\", File(\"textFiles\")) {\n            cacheControl { file ->\n                when (file.name) {\n                    \"file.txt\" -> listOf(Immutable, CacheControl.MaxAge(10000))\n                    else -> emptyList()\n                }\n            }\n        }\n    }\n}\nobject Immutable : CacheControl(null) {\n    override fun toString(): String = \"immutable\"\n}\n```\n\n> ### tip\n>\n> For more information on caching in Ktor, see [Caching headers](https://ktor.io/docs/server-caching-headers.html).\n\n### Excluded files\n\nThe `exclude()` function allows you to exclude files from being served. When excluded files are requested by the client, the server will respond with a `403 Forbidden` status code.\n\n```\nstaticFiles(\"/files\", File(\"textFiles\")) {\n    exclude { file -> file.path.contains(\"excluded\") }\n}\n```\n\n### File extensions fallbacks\n\nWhen a requested file is not found, Ktor can add the given extensions to the file name and search for it.\n\n```\nstaticResources(\"/\", \"static\"){ \n    extensions(\"html\", \"htm\")\n}\n```\n\nIn this example, when `/index` is requested, Ktor will search for `/index.html` and serve the found content.\n\n### Custom modifications\n\nThe `modify()` function allows you to apply custom modification to a resulting response.\n\n```\nstaticFiles(\"/\", File(\"files\")) {\n    modify { file, call ->\n        call.response.headers.append(HttpHeaders.ETag, file.name.toString())\n    }\n}\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-static-content.html", "title": "Serving static content", "description": "This page covers how to serve static content using Ktor, including serving from folders, ZIP files, and embedded resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:32:10", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Serving static content | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving static content | Ktor", "og:type": "website", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Serving static content | Ktor", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-static-content.html", "title": "Serving static content | Ktor Documentation", "ogDescription": "", "built-on": "2025-02-26T14:01:06.957021471", "og:url": "https://ktor.io/docs/3.1.1/server-static-content.html", "scrapeId": "976be3a4-07ff-4df5-9ead-13e83bc88ccb", "sourceURL": "https://ktor.io/docs/server-static-content.html", "url": "https://ktor.io/docs/server-static-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Serving static content in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Serving static files from a local filesystem**:\n\n```yaml\nrouting {\n    staticFiles(\"/resources\", File(\"files\"))\n}\n```\n\nThis snippet shows you how to serving static files from a local filesystem, which is an important aspect of serving static content.\n\n**Serving static content from a ZIP file**:\n\n```yaml\nrouting {\n    staticZip(\"/\", \"\", Paths.get(\"files/text-files.zip\"))\n}\n```\n\nThis snippet shows you how to serving static content from a zip file, which is an important aspect of serving static content.\n\n**Serving content from the classpath**:\n\n```yaml\nrouting {\n    staticResources(\"/resources\", \"static\")\n}\n```\n\nThis snippet shows you how to serving content from the classpath, which is an important aspect of serving static content.\n\n**Custom index file**:\n\n```yaml\nstaticResources(\"/custom\", \"static\", index = \"custom_index.html\")\n```\n\nThis snippet shows you how to custom index file, which is an important aspect of serving static content.\n\n**Serving pre-compressed files**:\n\n```yaml\nstaticFiles(\"/\", File(\"files\")) {\n    preCompressed(CompressedFileType.BROTLI, CompressedFileType.GZIP)\n}\n```\n\nThis snippet shows you how to serving pre-compressed files, which is an important aspect of serving static content.\n\n**Automatically respond to HEAD requests**:\n\n```yaml\nstaticResources(\"/\", \"static\"){ \n    enableAutoHeadResponse()\n}\n```\n\nThis snippet shows you how to automatically respond to head requests, which is an important aspect of serving static content.\n\n**Default file response**:\n\n```yaml\nstaticFiles(\"/\", File(\"files\")) {\n    default(\"index.html\")\n}\n```\n\nThis snippet shows you how to default file response, which is an important aspect of serving static content.\n\n**Setting Content-Type header explicitly**:\n\n```yaml\nstaticFiles(\"/files\", File(\"textFiles\")) {\n    contentType { file ->\n        when (file.name) {\n            \"html-file.txt\" -> ContentType.Text.Html\n            else -> null\n        }\n    }\n}\n```\n\nThis snippet shows you how to setting content-type header explicitly, which is an important aspect of serving static content.\n\n**Configuring Cache-Control header**:\n\n```yaml\nfun Application.module() {\n    routing {\n        staticFiles(\"/files\", File(\"textFiles\")) {\n            cacheControl { file ->\n                when (file.name) {\n                    \"file.txt\" -> listOf(Immutable, CacheControl.MaxAge(10000))\n                    else -> emptyList()\n                }\n            }\n        }\n    }\n}\nobject Immutable : CacheControl(null) {\n    override fun toString(): String = \"immutable\"\n}\n```\n\nThis snippet shows you how to configuring cache-control header, which is an important aspect of serving static content.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-static-content.html", "title": "Serving static content", "description": "This page covers how to serve static content using Ktor, including serving from folders, ZIP files, and embedded resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:32:10", "type": "code_examples", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Serving static content | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving static content | Ktor", "og:type": "website", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Serving static content | Ktor", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-static-content.html", "title": "Serving static content | Ktor Documentation", "ogDescription": "", "built-on": "2025-02-26T14:01:06.957021471", "og:url": "https://ktor.io/docs/3.1.1/server-static-content.html", "scrapeId": "976be3a4-07ff-4df5-9ead-13e83bc88ccb", "sourceURL": "https://ktor.io/docs/server-static-content.html", "url": "https://ktor.io/docs/server-static-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Serving static content in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor more information on caching in Ktor, see [Caching headers](https://ktor.io/docs/server-caching-headers.html).\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-static-content.html", "title": "Serving static content", "description": "This page covers how to serve static content using Ktor, including serving from folders, ZIP files, and embedded resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:32:10", "type": "best_practices", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Serving static content | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "language": "en-US", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Serving static content | Ktor", "og:type": "website", "og:site_name": "Ktor Help", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:card": "summary_large_image", "twitter:title": "Serving static content | Ktor", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-static-content.html", "title": "Serving static content | Ktor Documentation", "ogDescription": "", "built-on": "2025-02-26T14:01:06.957021471", "og:url": "https://ktor.io/docs/3.1.1/server-static-content.html", "scrapeId": "976be3a4-07ff-4df5-9ead-13e83bc88ccb", "sourceURL": "https://ktor.io/docs/server-static-content.html", "url": "https://ktor.io/docs/server-static-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Rate limiting is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Rate limiting in ktor.\n\n# Server Plugin Rate limiting\n\nThe RateLimit plugin allows you to limit the number of requests a client can make within a certain time period. Ktor provides different means for configuring rate limiting, for example: enabling rate limiting globally or configuring different rate limits for different resources.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `RateLimit`, you need to include the `ktor-server-rate-limit` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-rate-limit:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-rate-limit:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-rate-limit-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install RateLimit\n\nTo install the `RateLimit` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `RateLimit`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.ratelimit.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(RateLimit)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.ratelimit.*\n// ...\nfun Application.module() {\n    install(RateLimit)\n    // ...\n}\n```\n\n## Configure RateLimit\n\nKtor uses the token bucket algorithm for rate limiting, which works as follows:\n\n1. In the beginning, we have a bucket defined by its capacity - the number of tokens.\n2. Each incoming request tries to consume one token from the bucket:\n   - If there is enough capacity, the server handles a request and sends a response with the following headers:\n     - `X-RateLimit-Limit`: a specified bucket capacity.\n     - `X-RateLimit-Remaining`: the number of tokens remaining in a bucket.\n     - `X-RateLimit-Reset`: a UTC timestamp (in seconds) that specifies the time of refilling a bucket.\n   - If there is insufficient capacity, the server rejects a request using a `429 Too Many Requests` response and adds the `Retry-After` header, indicating how long the client should wait (in seconds) before making a follow-up request.\n3. After a specified period of time, a bucket capacity is refilled.\n\n### Register a rate limiter\n\nKtor allows you to apply rate limiting globally to a whole application or to specific routes:\n\n- To apply rate limiting to a whole application, call the `global` method and pass a configured rate limiter.\n\n```\ninstall(RateLimit) {\n      global {\n          rateLimiter(limit = 5, refillPeriod = 60.seconds)\n      }\n}\n```\n\n- The `register` method registers a rate limiter that can be applied to specific routes.\n\n```\ninstall(RateLimit) {\n      register {\n          rateLimiter(limit = 5, refillPeriod = 60.seconds)\n      }\n}\n```\n\n## Example\n\nThe code sample below demonstrates how to use the `RateLimit` plugin to apply different rate limiters to different resources. The `StatusPages` plugin is used to handle rejected requests, for which the `429 Too Many Requests` response was sent.\n\n```\npackage com.example\n\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.ratelimit.*\nimport io.ktor.server.plugins.statuspages.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport kotlin.time.Duration.Companion.seconds\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    install(RateLimit) {\n        register {\n            rateLimiter(limit = 5, refillPeriod = 60.seconds)\n        }\n        register(RateLimitName(\"public\")) {\n            rateLimiter(limit = 10, refillPeriod = 60.seconds)\n        }\n        register(RateLimitName(\"protected\")) {\n            rateLimiter(limit = 30, refillPeriod = 60.seconds)\n            requestKey { applicationCall ->\n                applicationCall.request.queryParameters[\"login\"]!!\n            }\n            requestWeight { applicationCall, key ->\n                when(key) {\n                    \"jetbrains\" -> 1\n                    else -> 2\n                }\n            }\n        }\n    }\n    install(StatusPages) {\n        status(HttpStatusCode.TooManyRequests) { call, status ->\n            val retryAfter = call.response.headers[\"Retry-After\"]\n            call.respondText(text = \"429: Too many requests. Wait for $retryAfter seconds.\", status = status)\n        }\n    }\n    routing {\n        rateLimit {\n            get(\"/\") {\n                val requestsLeft = call.response.headers[\"X-RateLimit-Remaining\"]\n                call.respondText(\"Welcome to the home page! $requestsLeft requests left.\")\n            }\n        }\n        rateLimit(RateLimitName(\"public\")) {\n            get(\"/public-api\") {\n                val requestsLeft = call.response.headers[\"X-RateLimit-Remaining\"]\n                call.respondText(\"Welcome to public API! $requestsLeft requests left.\")\n            }\n        }\n        rateLimit(RateLimitName(\"protected\")) {\n            get(\"/protected-api\") {\n                val requestsLeft = call.response.headers[\"X-RateLimit-Remaining\"]\n                val login = call.request.queryParameters[\"login\"]\n                call.respondText(\"Welcome to protected API, $login! $requestsLeft requests left.\")\n            }\n        }\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-rate-limit.html", "title": "Server Plugin Rate limiting", "description": "The RateLimit plugin allows you to limit the number of requests a client can make within a certain time period. Ktor provides different means for configuring rate limiting, for example: enabling rate limiting globally or configuring different rate limits for different resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:33:07", "type": "overview", "page_metadata": {"title": "Rate limiting | Ktor Documentation", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "built-on": "2025-02-26T14:01:06.696500659", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "ogLocale": "en_US", "og:description": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "ogDescription": "", "ogTitle": "Rate limiting | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Rate limiting | Ktor", "og:title": "Rate limiting | Ktor", "scrapeId": "7d25ba25-e2d5-4b03-9cb8-64c605551eed", "sourceURL": "https://ktor.io/docs/server-rate-limit.html", "url": "https://ktor.io/docs/server-rate-limit.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `RateLimit`, you need to include the `ktor-server-rate-limit` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-rate-limit:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-rate-limit:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-rate-limit-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-rate-limit.html", "title": "Server Plugin Rate limiting", "description": "The RateLimit plugin allows you to limit the number of requests a client can make within a certain time period. Ktor provides different means for configuring rate limiting, for example: enabling rate limiting globally or configuring different rate limits for different resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:33:07", "type": "section_detail", "page_metadata": {"title": "Rate limiting | Ktor Documentation", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "built-on": "2025-02-26T14:01:06.696500659", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "ogLocale": "en_US", "og:description": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "ogDescription": "", "ogTitle": "Rate limiting | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Rate limiting | Ktor", "og:title": "Rate limiting | Ktor", "scrapeId": "7d25ba25-e2d5-4b03-9cb8-64c605551eed", "sourceURL": "https://ktor.io/docs/server-rate-limit.html", "url": "https://ktor.io/docs/server-rate-limit.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install ratelimit in ktor?\n\nAssistant: To install ratelimit in ktor, here's what you do:\nTo install the `RateLimit` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `RateLimit`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.ratelimit.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(RateLimit)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.ratelimit.*\n// ...\nfun Application.module() {\n    install(RateLimit)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-rate-limit.html", "title": "Server Plugin Rate limiting", "description": "The RateLimit plugin allows you to limit the number of requests a client can make within a certain time period. Ktor provides different means for configuring rate limiting, for example: enabling rate limiting globally or configuring different rate limits for different resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:33:07", "type": "section_detail", "page_metadata": {"title": "Rate limiting | Ktor Documentation", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "built-on": "2025-02-26T14:01:06.696500659", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "ogLocale": "en_US", "og:description": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "ogDescription": "", "ogTitle": "Rate limiting | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Rate limiting | Ktor", "og:title": "Rate limiting | Ktor", "scrapeId": "7d25ba25-e2d5-4b03-9cb8-64c605551eed", "sourceURL": "https://ktor.io/docs/server-rate-limit.html", "url": "https://ktor.io/docs/server-rate-limit.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure ratelimit in ktor?\n\nAssistant: To configure ratelimit in ktor, here's what you do:\nKtor uses the token bucket algorithm for rate limiting, which works as follows:\n\n1. In the beginning, we have a bucket defined by its capacity - the number of tokens.\n2. Each incoming request tries to consume one token from the bucket:\n   - If there is enough capacity, the server handles a request and sends a response with the following headers:\n     - `X-RateLimit-Limit`: a specified bucket capacity.\n     - `X-RateLimit-Remaining`: the number of tokens remaining in a bucket.\n     - `X-RateLimit-Reset`: a UTC timestamp (in seconds) that specifies the time of refilling a bucket.\n   - If there is insufficient capacity, the server rejects a request using a `429 Too Many Requests` response and adds the `Retry-After` header, indicating how long the client should wait (in seconds) before making a follow-up request.\n3. After a specified period of time, a bucket capacity is refilled.\n\n### Register a rate limiter\n\nKtor allows you to apply rate limiting globally to a whole application or to specific routes:\n\n- To apply rate limiting to a whole application, call the `global` method and pass a configured rate limiter.\n\n```\ninstall(RateLimit) {\n      global {\n          rateLimiter(limit = 5, refillPeriod = 60.seconds)\n      }\n}\n```\n\n- The `register` method registers a rate limiter that can be applied to specific routes.\n\n```\ninstall(RateLimit) {\n      register {\n          rateLimiter(limit = 5, refillPeriod = 60.seconds)\n      }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-rate-limit.html", "title": "Server Plugin Rate limiting", "description": "The RateLimit plugin allows you to limit the number of requests a client can make within a certain time period. Ktor provides different means for configuring rate limiting, for example: enabling rate limiting globally or configuring different rate limits for different resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:33:07", "type": "section_detail", "page_metadata": {"title": "Rate limiting | Ktor Documentation", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "built-on": "2025-02-26T14:01:06.696500659", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "ogLocale": "en_US", "og:description": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "ogDescription": "", "ogTitle": "Rate limiting | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Rate limiting | Ktor", "og:title": "Rate limiting | Ktor", "scrapeId": "7d25ba25-e2d5-4b03-9cb8-64c605551eed", "sourceURL": "https://ktor.io/docs/server-rate-limit.html", "url": "https://ktor.io/docs/server-rate-limit.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example in ktor?\n\nAssistant: To example in ktor, here's what you do:\nThe code sample below demonstrates how to use the `RateLimit` plugin to apply different rate limiters to different resources. The `StatusPages` plugin is used to handle rejected requests, for which the `429 Too Many Requests` response was sent.\n\n```\npackage com.example\n\nimport io.ktor.http.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.ratelimit.*\nimport io.ktor.server.plugins.statuspages.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport kotlin.time.Duration.Companion.seconds\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    install(RateLimit) {\n        register {\n            rateLimiter(limit = 5, refillPeriod = 60.seconds)\n        }\n        register(RateLimitName(\"public\")) {\n            rateLimiter(limit = 10, refillPeriod = 60.seconds)\n        }\n        register(RateLimitName(\"protected\")) {\n            rateLimiter(limit = 30, refillPeriod = 60.seconds)\n            requestKey { applicationCall ->\n                applicationCall.request.queryParameters[\"login\"]!!\n            }\n            requestWeight { applicationCall, key ->\n                when(key) {\n                    \"jetbrains\" -> 1\n                    else -> 2\n                }\n            }\n        }\n    }\n    install(StatusPages) {\n        status(HttpStatusCode.TooManyRequests) { call, status ->\n            val retryAfter = call.response.headers[\"Retry-After\"]\n            call.respondText(text = \"429: Too many requests. Wait for $retryAfter seconds.\", status = status)\n        }\n    }\n    routing {\n        rateLimit {\n            get(\"/\") {\n                val requestsLeft = call.response.headers[\"X-RateLimit-Remaining\"]\n                call.respondText(\"Welcome to the home page! $requestsLeft requests left.\")\n            }\n        }\n        rateLimit(RateLimitName(\"public\")) {\n            get(\"/public-api\") {\n                val requestsLeft = call.response.headers[\"X-RateLimit-Remaining\"]\n                call.respondText(\"Welcome to public API! $requestsLeft requests left.\")\n            }\n        }\n        rateLimit(RateLimitName(\"protected\")) {\n            get(\"/protected-api\") {\n                val requestsLeft = call.response.headers[\"X-RateLimit-Remaining\"]\n                val login = call.request.queryParameters[\"login\"]\n                call.respondText(\"Welcome to protected API, $login! $requestsLeft requests left.\")\n            }\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-rate-limit.html", "title": "Server Plugin Rate limiting", "description": "The RateLimit plugin allows you to limit the number of requests a client can make within a certain time period. Ktor provides different means for configuring rate limiting, for example: enabling rate limiting globally or configuring different rate limits for different resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:33:07", "type": "section_detail", "page_metadata": {"title": "Rate limiting | Ktor Documentation", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "built-on": "2025-02-26T14:01:06.696500659", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "ogLocale": "en_US", "og:description": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "ogDescription": "", "ogTitle": "Rate limiting | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Rate limiting | Ktor", "og:title": "Rate limiting | Ktor", "scrapeId": "7d25ba25-e2d5-4b03-9cb8-64c605551eed", "sourceURL": "https://ktor.io/docs/server-rate-limit.html", "url": "https://ktor.io/docs/server-rate-limit.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Rate limiting in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-rate-limit:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of server plugin rate limiting.\n\n**Add dependencies (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-rate-limit:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies (gradle groovy), which is an important aspect of server plugin rate limiting.\n\n**Add dependencies (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-rate-limit-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies (maven), which is an important aspect of server plugin rate limiting.\n\n**Install RateLimit (embeddedServer)**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.ratelimit.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(RateLimit)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install ratelimit (embeddedserver), which is an important aspect of server plugin rate limiting.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-rate-limit.html", "title": "Server Plugin Rate limiting", "description": "The RateLimit plugin allows you to limit the number of requests a client can make within a certain time period. Ktor provides different means for configuring rate limiting, for example: enabling rate limiting globally or configuring different rate limits for different resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:33:07", "type": "code_examples", "page_metadata": {"title": "Rate limiting | Ktor Documentation", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "built-on": "2025-02-26T14:01:06.696500659", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "ogLocale": "en_US", "og:description": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "ogDescription": "", "ogTitle": "Rate limiting | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Rate limiting | Ktor", "og:title": "Rate limiting | Ktor", "scrapeId": "7d25ba25-e2d5-4b03-9cb8-64c605551eed", "sourceURL": "https://ktor.io/docs/server-rate-limit.html", "url": "https://ktor.io/docs/server-rate-limit.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Rate limiting in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNote that keys should have good `equals` and `hashCode` implementations.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-rate-limit.html", "title": "Server Plugin Rate limiting", "description": "The RateLimit plugin allows you to limit the number of requests a client can make within a certain time period. Ktor provides different means for configuring rate limiting, for example: enabling rate limiting globally or configuring different rate limits for different resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:33:07", "type": "best_practices", "page_metadata": {"title": "Rate limiting | Ktor Documentation", "twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "built-on": "2025-02-26T14:01:06.696500659", "build-number": "707", "og:site_name": "Ktor Help", "og:type": "website", "ogLocale": "en_US", "og:description": "", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-rate-limit.html", "ogDescription": "", "ogTitle": "Rate limiting | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Rate limiting | Ktor", "og:title": "Rate limiting | Ktor", "scrapeId": "7d25ba25-e2d5-4b03-9cb8-64c605551eed", "sourceURL": "https://ktor.io/docs/server-rate-limit.html", "url": "https://ktor.io/docs/server-rate-limit.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Basic authentication in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Basic authentication in Ktor Client in ktor.\n\n# Basic authentication in Ktor Client\n\nThis page covers how to implement basic authentication in Ktor Client, including the flow of authentication and configuration steps.Here's a quick rundown of what this is about:\n\n## Basic authentication flow\n\nThe basic authentication flow looks as follows:\n\n1. A client makes a request without the `Authorization` header to a specific resource in a server application.\n\n2. A server responds to a client with a `401` (Unauthorized) response status and uses a `WWW-Authenticate` response header to provide information that the basic authentication scheme is used to protect a route. A typical `WWW-Authenticate` header looks like this:\n\n```\nWWW-Authenticate: Basic realm=\"Access to the '/' path\", charset=\"UTF-8\"\n```\n\nThe Ktor client allows you to send credentials without waiting the `WWW-Authenticate` header using the `sendWithoutRequest` function.\n\n3. Usually, a client displays a login dialog where a user can enter credentials. Then, a client makes a request with the `Authorization` header containing a username and password pair encoded using Base64, for example:\n\n```\nAuthorization: Basic amV0YnJhaW5zOmZvb2Jhcg\n```\n\n4. A server validates credentials sent by the client and responds with the requested content.\n\n## Configure basic authentication\n\nTo send user credentials in the `Authorization` header using the `Basic` scheme, you need to configure the `basic` authentication provider as follows:\n\n1. Call the `basic` function inside the `install` block.\n\n2. Provide the required credentials using `BasicAuthCredentials` and pass this object to the `credentials` function.\n\n3. Configure the realm using the `realm` property.\n\n```\nval client = HttpClient(CIO) {\n       install(Auth) {\n           basic {\n               credentials {\n                   BasicAuthCredentials(username = \"jetbrains\", password = \"foobar\")\n               }\n               realm = \"Access to the '/' path\"\n           }\n       }\n}\n```\n\n4. Optionally, enable sending credentials in the initial request without waiting for a `401` (Unauthorized) response with the `WWW-Authenticate` header. You need to call the `sendWithoutRequest` function returning boolean and check the request parameters.\n\n```\ninstall(Auth) {\n       basic {\n           // ...\n           sendWithoutRequest { request ->\n               request.url.host == \"0.0.0.0\"\n           }\n       }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-basic-auth.html", "title": "Basic authentication in Ktor Client", "description": "This page covers how to implement basic authentication in Ktor Client, including the flow of authentication and configuration steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:33:51", "type": "overview", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "ogTitle": "Basic authentication in Ktor Client | Ktor", "twitter:title": "Basic authentication in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-basic-auth.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:title": "Basic authentication in Ktor Client | Ktor", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.441118543", "title": "Basic authentication in Ktor Client | Ktor Documentation", "build-number": "707", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:url": "https://ktor.io/docs/3.1.1/client-basic-auth.html", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "df172c5c-b6cb-4c47-b6da-ab1b72b3fd55", "sourceURL": "https://ktor.io/docs/client-basic-auth.html", "url": "https://ktor.io/docs/client-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I basic authentication flow in ktor?\n\nAssistant: To basic authentication flow in ktor, here's what you do:\nThe basic authentication flow looks as follows:\n\n1. A client makes a request without the `Authorization` header to a specific resource in a server application.\n\n2. A server responds to a client with a `401` (Unauthorized) response status and uses a `WWW-Authenticate` response header to provide information that the basic authentication scheme is used to protect a route. A typical `WWW-Authenticate` header looks like this:\n\n```\nWWW-Authenticate: Basic realm=\"Access to the '/' path\", charset=\"UTF-8\"\n```\n\nThe Ktor client allows you to send credentials without waiting the `WWW-Authenticate` header using the `sendWithoutRequest` function.\n\n3. Usually, a client displays a login dialog where a user can enter credentials. Then, a client makes a request with the `Authorization` header containing a username and password pair encoded using Base64, for example:\n\n```\nAuthorization: Basic amV0YnJhaW5zOmZvb2Jhcg\n```\n\n4. A server validates credentials sent by the client and responds with the requested content..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-basic-auth.html", "title": "Basic authentication in Ktor Client", "description": "This page covers how to implement basic authentication in Ktor Client, including the flow of authentication and configuration steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:33:51", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "ogTitle": "Basic authentication in Ktor Client | Ktor", "twitter:title": "Basic authentication in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-basic-auth.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:title": "Basic authentication in Ktor Client | Ktor", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.441118543", "title": "Basic authentication in Ktor Client | Ktor Documentation", "build-number": "707", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:url": "https://ktor.io/docs/3.1.1/client-basic-auth.html", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "df172c5c-b6cb-4c47-b6da-ab1b72b3fd55", "sourceURL": "https://ktor.io/docs/client-basic-auth.html", "url": "https://ktor.io/docs/client-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure basic authentication in ktor?\n\nAssistant: To configure basic authentication in ktor, here's what you do:\nTo send user credentials in the `Authorization` header using the `Basic` scheme, you need to configure the `basic` authentication provider as follows:\n\n1. Call the `basic` function inside the `install` block.\n\n2. Provide the required credentials using `BasicAuthCredentials` and pass this object to the `credentials` function.\n\n3. Configure the realm using the `realm` property.\n\n```\nval client = HttpClient(CIO) {\n       install(Auth) {\n           basic {\n               credentials {\n                   BasicAuthCredentials(username = \"jetbrains\", password = \"foobar\")\n               }\n               realm = \"Access to the '/' path\"\n           }\n       }\n}\n```\n\n4. Optionally, enable sending credentials in the initial request without waiting for a `401` (Unauthorized) response with the `WWW-Authenticate` header. You need to call the `sendWithoutRequest` function returning boolean and check the request parameters.\n\n```\ninstall(Auth) {\n       basic {\n           // ...\n           sendWithoutRequest { request ->\n               request.url.host == \"0.0.0.0\"\n           }\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-basic-auth.html", "title": "Basic authentication in Ktor Client", "description": "This page covers how to implement basic authentication in Ktor Client, including the flow of authentication and configuration steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:33:51", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "ogTitle": "Basic authentication in Ktor Client | Ktor", "twitter:title": "Basic authentication in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-basic-auth.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:title": "Basic authentication in Ktor Client | Ktor", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.441118543", "title": "Basic authentication in Ktor Client | Ktor Documentation", "build-number": "707", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:url": "https://ktor.io/docs/3.1.1/client-basic-auth.html", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "df172c5c-b6cb-4c47-b6da-ab1b72b3fd55", "sourceURL": "https://ktor.io/docs/client-basic-auth.html", "url": "https://ktor.io/docs/client-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Basic authentication in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Authentication Flow Example**:\n\n```yaml\nWWW-Authenticate: Basic realm=\"Access to the '/' path\", charset=\"UTF-8\"\n```\n\nThis snippet shows you how to basic authentication flow example, which is an important aspect of basic authentication in ktor client.\n\n**Authorization Header Example**:\n\n```yaml\nAuthorization: Basic amV0YnJhaW5zOmZvb2Jhcg\n```\n\nThis snippet shows you how to authorization header example, which is an important aspect of basic authentication in ktor client.\n\n**HttpClient Configuration Example**:\n\n```yaml\nval client = HttpClient(CIO) {\n       install(Auth) {\n           basic {\n               credentials {\n                   BasicAuthCredentials(username = \"jetbrains\", password = \"foobar\")\n               }\n               realm = \"Access to the '/' path\"\n           }\n       }\n}\n```\n\nThis snippet shows you how to httpclient configuration example, which is an important aspect of basic authentication in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-basic-auth.html", "title": "Basic authentication in Ktor Client", "description": "This page covers how to implement basic authentication in Ktor Client, including the flow of authentication and configuration steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:33:51", "type": "code_examples", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "ogTitle": "Basic authentication in Ktor Client | Ktor", "twitter:title": "Basic authentication in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-basic-auth.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:title": "Basic authentication in Ktor Client | Ktor", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.441118543", "title": "Basic authentication in Ktor Client | Ktor Documentation", "build-number": "707", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:url": "https://ktor.io/docs/3.1.1/client-basic-auth.html", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "df172c5c-b6cb-4c47-b6da-ab1b72b3fd55", "sourceURL": "https://ktor.io/docs/client-basic-auth.html", "url": "https://ktor.io/docs/client-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Basic authentication in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn the server, Ktor provides the Authentication plugin for handling basic authentication.\n\nYou can find the full example here: client-auth-basic.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-basic-auth.html", "title": "Basic authentication in Ktor Client", "description": "This page covers how to implement basic authentication in Ktor Client, including the flow of authentication and configuration steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:33:51", "type": "best_practices", "page_metadata": {"twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "ogTitle": "Basic authentication in Ktor Client | Ktor", "twitter:title": "Basic authentication in Ktor Client | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-basic-auth.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:type": "website", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:title": "Basic authentication in Ktor Client | Ktor", "twitter:creator": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.441118543", "title": "Basic authentication in Ktor Client | Ktor Documentation", "build-number": "707", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:url": "https://ktor.io/docs/3.1.1/client-basic-auth.html", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "df172c5c-b6cb-4c47-b6da-ab1b72b3fd55", "sourceURL": "https://ktor.io/docs/client-basic-auth.html", "url": "https://ktor.io/docs/client-basic-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Request validation is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Request validation in ktor.\n\n# Server Plugin Request validation\n\nThis page covers the RequestValidation plugin in Ktor, which allows for validating the body of incoming requests.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\nTo use the RequestValidation plugin, include the following dependency in your build script:\n\n- Gradle (Kotlin): `implementation(\"io.ktor:ktor-server-request-validation:$ktor_version\")`\n- Gradle (Groovy): `implementation \"io.ktor:ktor-server-request-validation:$ktor_version\"`\n- Maven:\n```xml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-request-validation-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install RequestValidation\n\nTo install the RequestValidation plugin, pass it to the install function in the specified module. The following code snippets show how to install RequestValidation:\n\n- Inside the embeddedServer function call:\n```kotlin\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.requestvalidation.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(RequestValidation)\n        // ...\n    }.start(wait = true)\n}\n```\n- Inside the explicitly defined module:\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.requestvalidation.*\n// ...\nfun Application.module() {\n    install(RequestValidation)\n    // ...\n}\n```\n\n## Configure RequestValidation\n\nConfiguring RequestValidation involves three main steps:\n\n1. Receiving body contents\n2. Configuring a validation function\n3. Handling validation exceptions\n\n### 1. Receive body\nThe RequestValidation plugin validates a body of a request if you call the receive function with a type parameter. For instance:\n```kotlin\nrouting {\n    post(\"/text\") {\n        val body = call.receive<String>()\n        call.respond(body)\n    }\n}\n```\n\n### 2. Configure a validation function\nTo validate a request body, use the validate function. This function returns a ValidationResult object representing a successful or unsuccessful validation result. For an unsuccessful result, RequestValidationException is raised:\n```kotlin\ninstall(RequestValidation) {\n      validate<String> { bodyText ->\n          if (!bodyText.startsWith(\"Hello\"))\n              ValidationResult.Invalid(\"Body text should start with 'Hello'\")\n          else ValidationResult.Valid\n      }\n}\n```\n\n### 3. Handle validation exceptions\nIf request validation fails, RequestValidation raises RequestValidationException. You can handle it using the StatusPages plugin:\n```kotlin\ninstall(StatusPages) {\n    exception<RequestValidationException> { call, cause ->\n        call.respond(HttpStatusCode.BadRequest, cause.reasons.joinToString())\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-request-validation.html", "title": "Server Plugin Request validation", "description": "This page covers the RequestValidation plugin in Ktor, which allows for validating the body of incoming requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:34:23", "type": "overview", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Request validation | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Request validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:06.642005167", "ogDescription": "", "ogTitle": "Request validation | Ktor", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-request-validation.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-request-validation.html", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "og:title": "Request validation | Ktor", "og:description": "", "og:type": "website", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "cb99934e-367e-4213-bd31-ec25ccfb1de1", "sourceURL": "https://ktor.io/docs/server-request-validation.html", "url": "https://ktor.io/docs/server-request-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\nTo use the RequestValidation plugin, include the following dependency in your build script:\n\n- Gradle (Kotlin): `implementation(\"io.ktor:ktor-server-request-validation:$ktor_version\")`\n- Gradle (Groovy): `implementation \"io.ktor:ktor-server-request-validation:$ktor_version\"`\n- Maven:\n```xml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-request-validation-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-request-validation.html", "title": "Server Plugin Request validation", "description": "This page covers the RequestValidation plugin in Ktor, which allows for validating the body of incoming requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:34:23", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Request validation | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Request validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:06.642005167", "ogDescription": "", "ogTitle": "Request validation | Ktor", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-request-validation.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-request-validation.html", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "og:title": "Request validation | Ktor", "og:description": "", "og:type": "website", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "cb99934e-367e-4213-bd31-ec25ccfb1de1", "sourceURL": "https://ktor.io/docs/server-request-validation.html", "url": "https://ktor.io/docs/server-request-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install requestvalidation in ktor?\n\nAssistant: To install requestvalidation in ktor, here's what you do:\nTo install the RequestValidation plugin, pass it to the install function in the specified module. The following code snippets show how to install RequestValidation:\n\n- Inside the embeddedServer function call:\n```kotlin\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.requestvalidation.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(RequestValidation)\n        // ...\n    }.start(wait = true)\n}\n```\n- Inside the explicitly defined module:\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.requestvalidation.*\n// ...\nfun Application.module() {\n    install(RequestValidation)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-request-validation.html", "title": "Server Plugin Request validation", "description": "This page covers the RequestValidation plugin in Ktor, which allows for validating the body of incoming requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:34:23", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Request validation | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Request validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:06.642005167", "ogDescription": "", "ogTitle": "Request validation | Ktor", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-request-validation.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-request-validation.html", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "og:title": "Request validation | Ktor", "og:description": "", "og:type": "website", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "cb99934e-367e-4213-bd31-ec25ccfb1de1", "sourceURL": "https://ktor.io/docs/server-request-validation.html", "url": "https://ktor.io/docs/server-request-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure requestvalidation in ktor?\n\nAssistant: To configure requestvalidation in ktor, here's what you do:\nConfiguring RequestValidation involves three main steps:\n\n1. Receiving body contents\n2. Configuring a validation function\n3. Handling validation exceptions\n\n### 1. Receive body\nThe RequestValidation plugin validates a body of a request if you call the receive function with a type parameter. For instance:\n```kotlin\nrouting {\n    post(\"/text\") {\n        val body = call.receive<String>()\n        call.respond(body)\n    }\n}\n```\n\n### 2. Configure a validation function\nTo validate a request body, use the validate function. This function returns a ValidationResult object representing a successful or unsuccessful validation result. For an unsuccessful result, RequestValidationException is raised:\n```kotlin\ninstall(RequestValidation) {\n      validate<String> { bodyText ->\n          if (!bodyText.startsWith(\"Hello\"))\n              ValidationResult.Invalid(\"Body text should start with 'Hello'\")\n          else ValidationResult.Valid\n      }\n}\n```\n\n### 3. Handle validation exceptions\nIf request validation fails, RequestValidation raises RequestValidationException. You can handle it using the StatusPages plugin:\n```kotlin\ninstall(StatusPages) {\n    exception<RequestValidationException> { call, cause ->\n        call.respond(HttpStatusCode.BadRequest, cause.reasons.joinToString())\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-request-validation.html", "title": "Server Plugin Request validation", "description": "This page covers the RequestValidation plugin in Ktor, which allows for validating the body of incoming requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:34:23", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Request validation | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Request validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:06.642005167", "ogDescription": "", "ogTitle": "Request validation | Ktor", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-request-validation.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-request-validation.html", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "og:title": "Request validation | Ktor", "og:description": "", "og:type": "website", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "cb99934e-367e-4213-bd31-ec25ccfb1de1", "sourceURL": "https://ktor.io/docs/server-request-validation.html", "url": "https://ktor.io/docs/server-request-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Request validation in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Receive body as String**:\n\n```yaml\nrouting {\n    post(\"/text\") {\n        val body = call.receive<String>()\n        call.respond(body)\n    }\n}\n```\n\nThis snippet shows you how to receive body as string, which is an important aspect of server plugin request validation.\n\n**Install RequestValidation in embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.requestvalidation.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(RequestValidation)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install requestvalidation in embeddedserver, which is an important aspect of server plugin request validation.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-request-validation.html", "title": "Server Plugin Request validation", "description": "This page covers the RequestValidation plugin in Ktor, which allows for validating the body of incoming requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:34:23", "type": "code_examples", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Request validation | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Request validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:06.642005167", "ogDescription": "", "ogTitle": "Request validation | Ktor", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-request-validation.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-request-validation.html", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "og:title": "Request validation | Ktor", "og:description": "", "og:type": "website", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "cb99934e-367e-4213-bd31-ec25ccfb1de1", "sourceURL": "https://ktor.io/docs/server-request-validation.html", "url": "https://ktor.io/docs/server-request-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Request validation in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to handle RequestValidationException properly to provide meaningful feedback to the client.\n\nUse the validate function to enforce specific rules for request bodies, enhancing the robustness of your application.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-request-validation.html", "title": "Server Plugin Request validation", "description": "This page covers the RequestValidation plugin in Ktor, which allows for validating the body of incoming requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:34:23", "type": "best_practices", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "title": "Request validation | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:title": "Request validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:06.642005167", "ogDescription": "", "ogTitle": "Request validation | Ktor", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-request-validation.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-request-validation.html", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "build-number": "707", "og:title": "Request validation | Ktor", "og:description": "", "og:type": "website", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "cb99934e-367e-4213-bd31-ec25ccfb1de1", "sourceURL": "https://ktor.io/docs/server-request-validation.html", "url": "https://ktor.io/docs/server-request-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Call logging is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Call logging in ktor.\n\n# Server Plugin Call logging\n\nKtor provides the capability to log application events using the SLF4J library. The CallLogging plugin allows you to log incoming client requests.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use CallLogging, you need to include the ktor-server-call-logging artifact in the build script:\n\nGradle (Kotlin)\n\nGradle (Groovy)\n\nMaven\n\n```\nimplementation(\"io.ktor:ktor-server-call-logging:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-server-call-logging:$ktor_version\"\n```\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-call-logging-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install CallLogging\n\nTo install the CallLogging plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install CallLogging...\n\n- ... inside the embeddedServer function call.\n\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.calllogging.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CallLogging)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.calllogging.*\n// ...\nfun Application.module() {\n    install(CallLogging)\n    // ...\n}\n```\n\n## Configure logging settings\n\nYou can configure CallLogging in multiple ways: specify a logging level, filter requests based on a specified condition, customize log messages, and so on. You can see the available configuration settings at CallLoggingConfig.\n\n### Set the logging level\n\nBy default, Ktor uses the Level.INFO logging level. To change it, use the level property:\n\n```\ninstall(CallLogging) {\n    level = Level.INFO\n}\n```\n\n### Filter log requests\n\nThe filter property allows you to add conditions for filtering requests. In the example below, only requests made to /api/v1 get into a log:\n\n```\ninstall(CallLogging) {\n    filter { call ->\n        call.request.path().startsWith(\"/api/v1\")\n    }\n}\n```\n\n### Customize a log message format\n\nBy using the format function, you can put any data related to a request/response into a log. The example below shows how to log a response status, a request HTTP method, and the User-Agent header value for each request.\n\n```\ninstall(CallLogging) {\n    format { call ->\n        val status = call.response.status()\n        val httpMethod = call.request.httpMethod.value\n        val userAgent = call.request.headers[\"User-Agent\"]\n        \"Status: $status, HTTP method: $httpMethod, User agent: $userAgent\"\n    }\n}\n```\n\nYou can find the full example here: logging.\n\n### Put call parameters in MDC\n\nThe CallLogging plugin supports MDC (Mapped Diagnostic Context). You can put a desired context value with the specified name to MDC using the mdc function. For example, in the code snippet below, a name query parameter is added to MDC:\n\n```\ninstall(CallLogging) {\n    mdc(\"name-parameter\") { call ->\n        call.request.queryParameters[\"name\"]\n    }\n}\n```\n\nYou can access the added value during an ApplicationCall lifetime:\n\n```\nimport org.slf4j.MDC\n// ...\nMDC.get(\"name-parameter\")\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-call-logging.html", "title": "Server Plugin Call logging", "description": "Ktor provides the capability to log application events using the SLF4J library. The CallLogging plugin allows you to log incoming client requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:36:12", "type": "overview", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-call-logging.html", "og:title": "Call logging | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:02.659504859", "language": "en-US", "twitter:title": "Call logging | Ktor", "og:description": "", "title": "Call logging | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Call logging | Ktor", "ogDescription": "", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "281360b5-908f-4485-9805-ed6d97af956b", "sourceURL": "https://ktor.io/docs/server-call-logging.html", "url": "https://ktor.io/docs/server-call-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use CallLogging, you need to include the ktor-server-call-logging artifact in the build script:\n\nGradle (Kotlin)\n\nGradle (Groovy)\n\nMaven\n\n```\nimplementation(\"io.ktor:ktor-server-call-logging:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-server-call-logging:$ktor_version\"\n```\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-call-logging-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-call-logging.html", "title": "Server Plugin Call logging", "description": "Ktor provides the capability to log application events using the SLF4J library. The CallLogging plugin allows you to log incoming client requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:36:12", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-call-logging.html", "og:title": "Call logging | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:02.659504859", "language": "en-US", "twitter:title": "Call logging | Ktor", "og:description": "", "title": "Call logging | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Call logging | Ktor", "ogDescription": "", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "281360b5-908f-4485-9805-ed6d97af956b", "sourceURL": "https://ktor.io/docs/server-call-logging.html", "url": "https://ktor.io/docs/server-call-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install calllogging in ktor?\n\nAssistant: To install calllogging in ktor, here's what you do:\nTo install the CallLogging plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install CallLogging...\n\n- ... inside the embeddedServer function call.\n\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.calllogging.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CallLogging)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.calllogging.*\n// ...\nfun Application.module() {\n    install(CallLogging)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-call-logging.html", "title": "Server Plugin Call logging", "description": "Ktor provides the capability to log application events using the SLF4J library. The CallLogging plugin allows you to log incoming client requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:36:12", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-call-logging.html", "og:title": "Call logging | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:02.659504859", "language": "en-US", "twitter:title": "Call logging | Ktor", "og:description": "", "title": "Call logging | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Call logging | Ktor", "ogDescription": "", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "281360b5-908f-4485-9805-ed6d97af956b", "sourceURL": "https://ktor.io/docs/server-call-logging.html", "url": "https://ktor.io/docs/server-call-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure logging settings in ktor?\n\nAssistant: To configure logging settings in ktor, here's what you do:\nYou can configure CallLogging in multiple ways: specify a logging level, filter requests based on a specified condition, customize log messages, and so on. You can see the available configuration settings at CallLoggingConfig.\n\n### Set the logging level\n\nBy default, Ktor uses the Level.INFO logging level. To change it, use the level property:\n\n```\ninstall(CallLogging) {\n    level = Level.INFO\n}\n```\n\n### Filter log requests\n\nThe filter property allows you to add conditions for filtering requests. In the example below, only requests made to /api/v1 get into a log:\n\n```\ninstall(CallLogging) {\n    filter { call ->\n        call.request.path().startsWith(\"/api/v1\")\n    }\n}\n```\n\n### Customize a log message format\n\nBy using the format function, you can put any data related to a request/response into a log. The example below shows how to log a response status, a request HTTP method, and the User-Agent header value for each request.\n\n```\ninstall(CallLogging) {\n    format { call ->\n        val status = call.response.status()\n        val httpMethod = call.request.httpMethod.value\n        val userAgent = call.request.headers[\"User-Agent\"]\n        \"Status: $status, HTTP method: $httpMethod, User agent: $userAgent\"\n    }\n}\n```\n\nYou can find the full example here: logging.\n\n### Put call parameters in MDC\n\nThe CallLogging plugin supports MDC (Mapped Diagnostic Context). You can put a desired context value with the specified name to MDC using the mdc function. For example, in the code snippet below, a name query parameter is added to MDC:\n\n```\ninstall(CallLogging) {\n    mdc(\"name-parameter\") { call ->\n        call.request.queryParameters[\"name\"]\n    }\n}\n```\n\nYou can access the added value during an ApplicationCall lifetime:\n\n```\nimport org.slf4j.MDC\n// ...\nMDC.get(\"name-parameter\")\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-call-logging.html", "title": "Server Plugin Call logging", "description": "Ktor provides the capability to log application events using the SLF4J library. The CallLogging plugin allows you to log incoming client requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:36:12", "type": "section_detail", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-call-logging.html", "og:title": "Call logging | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:02.659504859", "language": "en-US", "twitter:title": "Call logging | Ktor", "og:description": "", "title": "Call logging | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Call logging | Ktor", "ogDescription": "", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "281360b5-908f-4485-9805-ed6d97af956b", "sourceURL": "https://ktor.io/docs/server-call-logging.html", "url": "https://ktor.io/docs/server-call-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Call logging in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-call-logging:$ktor_version\")\nimplementation \"io.ktor:ktor-server-call-logging:$ktor_version\"\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-call-logging-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of server plugin call logging.\n\n**Install CallLogging in embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.calllogging.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CallLogging)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install calllogging in embeddedserver, which is an important aspect of server plugin call logging.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-call-logging.html", "title": "Server Plugin Call logging", "description": "Ktor provides the capability to log application events using the SLF4J library. The CallLogging plugin allows you to log incoming client requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:36:12", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-call-logging.html", "og:title": "Call logging | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:02.659504859", "language": "en-US", "twitter:title": "Call logging | Ktor", "og:description": "", "title": "Call logging | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Call logging | Ktor", "ogDescription": "", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "281360b5-908f-4485-9805-ed6d97af956b", "sourceURL": "https://ktor.io/docs/server-call-logging.html", "url": "https://ktor.io/docs/server-call-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Call logging in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the appropriate logging level for your application needs.\n\nFilter log requests to reduce noise in your logs.\n\nCustomize log message formats to include relevant request/response data.\n\nUtilize MDC for better context in your logs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-call-logging.html", "title": "Server Plugin Call logging", "description": "Ktor provides the capability to log application events using the SLF4J library. The CallLogging plugin allows you to log incoming client requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:36:12", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-call-logging.html", "og:title": "Call logging | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:description": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:02.659504859", "language": "en-US", "twitter:title": "Call logging | Ktor", "og:description": "", "title": "Call logging | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/server-call-logging.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:card": "summary_large_image", "ogTitle": "Call logging | Ktor", "ogDescription": "", "ogSiteName": "Ktor Help", "og:type": "website", "scrapeId": "281360b5-908f-4485-9805-ed6d97af956b", "sourceURL": "https://ktor.io/docs/server-call-logging.html", "url": "https://ktor.io/docs/server-call-logging.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Micrometer metrics is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Micrometer metrics in ktor.\n\n# Server Plugin Micrometer metrics\n\nThis page covers the Micrometer metrics plugin for Ktor server applications, including installation, configuration, and usage examples.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\nTo use the Micrometer metrics plugin, you need to include the following dependency in your build script:\n\n- `io.ktor:ktor-server-metrics-micrometer`\n\nYou can find the code examples for different build tools below.\n\n## Add dependencies\n\nTo enable `MicrometerMetrics`, you need to include the following artifacts in the build script:\n\n- Add the `ktor-server-metrics-micrometer` dependency:\n\n```gradle\nimplementation(\"io.ktor:ktor-server-metrics-micrometer:$ktor_version\")\n```\n\n```gradle\nimplementation \"io.ktor:ktor-server-metrics-micrometer:$ktor_version\"\n```\n\n```xml\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-metrics-micrometer-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Add a dependency required for a monitoring system. The example below shows how to add an artifact for Prometheus:\n\n```gradle\nimplementation(\"io.micrometer:micrometer-registry-prometheus:$prometheus_version\")\n```\n\n```gradle\nimplementation \"io.micrometer:micrometer-registry-prometheus:$prometheus_version\"\n```\n\n```xml\n<dependency>\n      <groupId>io.micrometer</groupId>\n      <artifactId>micrometer-registry-prometheus</artifactId>\n      <version>${prometheus_version}</version>\n</dependency>\n```\n\nYou can replace `$prometheus_version` with the required version of the `micrometer-registry-prometheus` artifact, for example, `1.10.3`.\n\n## Install MicrometerMetrics\n\nTo install the `MicrometerMetrics` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `MicrometerMetrics`:\n\n- Inside the `embeddedServer` function call:\n\n```kotlin\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.metrics.micrometer.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(MicrometerMetrics)\n        // ...\n    }.start(wait = true)\n}\n```\n\n- Inside the explicitly defined module, which is an extension function of the `Application` class:\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.metrics.micrometer.*\n// ...\nfun Application.module() {\n    install(MicrometerMetrics)\n    // ...\n}\n```\n\n## Exposed metrics\n\nKtor exposes the following metrics for monitoring HTTP requests:\n\n- `ktor.http.server.requests.active`: a gauge that counts the number of concurrent HTTP requests. This metric doesn't provide any tags.\n- `ktor.http.server.requests`: a timer for measuring the time of each request. This metric provides a set of tags for monitoring request data, including `address` for a requested URL, `method` for an HTTP method, `route` for a Ktor route handling requests, and so on.\n\nYou can customize the default `ktor.http.server.requests` prefix using the `metricName` configuration property.\n\n## Create a registry\n\nAfter installing `MicrometerMetrics`, you need to create a registry for your monitoring system and assign it to the `registry` property. In the example below, the `PrometheusMeterRegistry` is created outside the `install` block to have the capability to reuse this registry in different route handlers:\n\n```kotlin\nfun Application.module() {\n    val appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)\n    install(MicrometerMetrics) {\n        registry = appMicrometerRegistry\n    }\n}\n```\n\n## Configure metrics\n\nThe `MicrometerMetrics` plugin provides various configuration options that can be accessed using `MicrometerMetricsConfig`.\n\n### Timers\nTo customize tags for each timer, you can use the `timers` function that is called for each request:\n\n```kotlin\ninstall(MicrometerMetrics) {\n    // ...\n    timers { call, exception ->\n        tag(\"region\", call.request.headers[\"regionId\"])\n    }\n}\n```\n\n### Distribution statistics\nYou configure distribution statistics using the `distributionStatisticConfig` property:\n\n```kotlin\ninstall(MicrometerMetrics) {\n    distributionStatisticConfig = DistributionStatisticConfig.Builder()\n        .percentilesHistogram(true)\n        .maximumExpectedValue(Duration.ofSeconds(20).toNanos().toDouble())\n        .serviceLevelObjectives(\n            Duration.ofMillis(100).toNanos().toDouble(),\n            Duration.ofMillis(500).toNanos().toDouble()\n        )\n        .build()\n}\n```\n\n### JVM and system metrics\nIn addition to HTTP metrics, Ktor exposes a set of metrics for monitoring the JVM. You can customize a list of these metrics using the `meterBinders` property:\n\n```kotlin\ninstall(MicrometerMetrics) {\n    meterBinders = listOf(\n        JvmMemoryMetrics(),\n        JvmGcMetrics(),\n        ProcessorMetrics()\n    )\n}\n```\n\n## Prometheus: expose a scrape endpoint\n\nIf you use Prometheus as a monitoring system, you need to expose an HTTP endpoint to the Prometheus scraper. In Ktor, you can do this in the following way:\n\n1. Create a dedicated route that accepts GET requests by the required address ( `/metrics` in the example below).\n2. Use `call.respond` to send scraping data to Prometheus.\n\n```kotlin\nfun Application.module() {\n       val appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)\n       install(MicrometerMetrics) {\n           registry = appMicrometerRegistry\n       }\n       routing {\n           get(\"/metrics\") {\n               call.respond(appMicrometerRegistry.scrape())\n           }\n       }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-micrometer.html", "title": "Server Plugin Micrometer metrics", "description": "This page covers the Micrometer metrics plugin for Ktor server applications, including installation, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:36:52", "type": "overview", "page_metadata": {"ogLocale": "en_US", "twitter:title": "Micrometer metrics | Ktor", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Micrometer metrics | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "twitter:site": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.028168665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Micrometer metrics | Ktor", "og:locale": "en_US", "og:title": "Micrometer metrics | Ktor", "scrapeId": "d5cd3b53-4f0c-4200-8b97-4a238d370ac0", "sourceURL": "https://ktor.io/docs/server-metrics-micrometer.html", "url": "https://ktor.io/docs/server-metrics-micrometer.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\nTo use the Micrometer metrics plugin, you need to include the following dependency in your build script:\n\n- `io.ktor:ktor-server-metrics-micrometer`\n\nYou can find the code examples for different build tools below..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-micrometer.html", "title": "Server Plugin Micrometer metrics", "description": "This page covers the Micrometer metrics plugin for Ktor server applications, including installation, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:36:52", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "twitter:title": "Micrometer metrics | Ktor", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Micrometer metrics | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "twitter:site": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.028168665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Micrometer metrics | Ktor", "og:locale": "en_US", "og:title": "Micrometer metrics | Ktor", "scrapeId": "d5cd3b53-4f0c-4200-8b97-4a238d370ac0", "sourceURL": "https://ktor.io/docs/server-metrics-micrometer.html", "url": "https://ktor.io/docs/server-metrics-micrometer.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo enable `MicrometerMetrics`, you need to include the following artifacts in the build script:\n\n- Add the `ktor-server-metrics-micrometer` dependency:\n\n```gradle\nimplementation(\"io.ktor:ktor-server-metrics-micrometer:$ktor_version\")\n```\n\n```gradle\nimplementation \"io.ktor:ktor-server-metrics-micrometer:$ktor_version\"\n```\n\n```xml\n<dependency>\n      <groupId>io.ktor</groupId>\n      <artifactId>ktor-server-metrics-micrometer-jvm</artifactId>\n      <version>${ktor_version}</version>\n</dependency>\n```\n\n- Add a dependency required for a monitoring system. The example below shows how to add an artifact for Prometheus:\n\n```gradle\nimplementation(\"io.micrometer:micrometer-registry-prometheus:$prometheus_version\")\n```\n\n```gradle\nimplementation \"io.micrometer:micrometer-registry-prometheus:$prometheus_version\"\n```\n\n```xml\n<dependency>\n      <groupId>io.micrometer</groupId>\n      <artifactId>micrometer-registry-prometheus</artifactId>\n      <version>${prometheus_version}</version>\n</dependency>\n```\n\nYou can replace `$prometheus_version` with the required version of the `micrometer-registry-prometheus` artifact, for example, `1.10.3`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-micrometer.html", "title": "Server Plugin Micrometer metrics", "description": "This page covers the Micrometer metrics plugin for Ktor server applications, including installation, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:36:52", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "twitter:title": "Micrometer metrics | Ktor", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Micrometer metrics | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "twitter:site": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.028168665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Micrometer metrics | Ktor", "og:locale": "en_US", "og:title": "Micrometer metrics | Ktor", "scrapeId": "d5cd3b53-4f0c-4200-8b97-4a238d370ac0", "sourceURL": "https://ktor.io/docs/server-metrics-micrometer.html", "url": "https://ktor.io/docs/server-metrics-micrometer.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install micrometermetrics in ktor?\n\nAssistant: To install micrometermetrics in ktor, here's what you do:\nTo install the `MicrometerMetrics` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `MicrometerMetrics`:\n\n- Inside the `embeddedServer` function call:\n\n```kotlin\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.metrics.micrometer.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(MicrometerMetrics)\n        // ...\n    }.start(wait = true)\n}\n```\n\n- Inside the explicitly defined module, which is an extension function of the `Application` class:\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.server.metrics.micrometer.*\n// ...\nfun Application.module() {\n    install(MicrometerMetrics)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-micrometer.html", "title": "Server Plugin Micrometer metrics", "description": "This page covers the Micrometer metrics plugin for Ktor server applications, including installation, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:36:52", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "twitter:title": "Micrometer metrics | Ktor", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Micrometer metrics | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "twitter:site": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.028168665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Micrometer metrics | Ktor", "og:locale": "en_US", "og:title": "Micrometer metrics | Ktor", "scrapeId": "d5cd3b53-4f0c-4200-8b97-4a238d370ac0", "sourceURL": "https://ktor.io/docs/server-metrics-micrometer.html", "url": "https://ktor.io/docs/server-metrics-micrometer.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I exposed metrics in ktor?\n\nAssistant: To exposed metrics in ktor, here's what you do:\nKtor exposes the following metrics for monitoring HTTP requests:\n\n- `ktor.http.server.requests.active`: a gauge that counts the number of concurrent HTTP requests. This metric doesn't provide any tags.\n- `ktor.http.server.requests`: a timer for measuring the time of each request. This metric provides a set of tags for monitoring request data, including `address` for a requested URL, `method` for an HTTP method, `route` for a Ktor route handling requests, and so on.\n\nYou can customize the default `ktor.http.server.requests` prefix using the `metricName` configuration property..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-micrometer.html", "title": "Server Plugin Micrometer metrics", "description": "This page covers the Micrometer metrics plugin for Ktor server applications, including installation, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:36:52", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "twitter:title": "Micrometer metrics | Ktor", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Micrometer metrics | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "twitter:site": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.028168665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Micrometer metrics | Ktor", "og:locale": "en_US", "og:title": "Micrometer metrics | Ktor", "scrapeId": "d5cd3b53-4f0c-4200-8b97-4a238d370ac0", "sourceURL": "https://ktor.io/docs/server-metrics-micrometer.html", "url": "https://ktor.io/docs/server-metrics-micrometer.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a registry in ktor?\n\nAssistant: To create a registry in ktor, here's what you do:\nAfter installing `MicrometerMetrics`, you need to create a registry for your monitoring system and assign it to the `registry` property. In the example below, the `PrometheusMeterRegistry` is created outside the `install` block to have the capability to reuse this registry in different route handlers:\n\n```kotlin\nfun Application.module() {\n    val appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)\n    install(MicrometerMetrics) {\n        registry = appMicrometerRegistry\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-micrometer.html", "title": "Server Plugin Micrometer metrics", "description": "This page covers the Micrometer metrics plugin for Ktor server applications, including installation, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:36:52", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "twitter:title": "Micrometer metrics | Ktor", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Micrometer metrics | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "twitter:site": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.028168665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Micrometer metrics | Ktor", "og:locale": "en_US", "og:title": "Micrometer metrics | Ktor", "scrapeId": "d5cd3b53-4f0c-4200-8b97-4a238d370ac0", "sourceURL": "https://ktor.io/docs/server-metrics-micrometer.html", "url": "https://ktor.io/docs/server-metrics-micrometer.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure metrics in ktor?\n\nAssistant: To configure metrics in ktor, here's what you do:\nThe `MicrometerMetrics` plugin provides various configuration options that can be accessed using `MicrometerMetricsConfig`.\n\n### Timers\nTo customize tags for each timer, you can use the `timers` function that is called for each request:\n\n```kotlin\ninstall(MicrometerMetrics) {\n    // ...\n    timers { call, exception ->\n        tag(\"region\", call.request.headers[\"regionId\"])\n    }\n}\n```\n\n### Distribution statistics\nYou configure distribution statistics using the `distributionStatisticConfig` property:\n\n```kotlin\ninstall(MicrometerMetrics) {\n    distributionStatisticConfig = DistributionStatisticConfig.Builder()\n        .percentilesHistogram(true)\n        .maximumExpectedValue(Duration.ofSeconds(20).toNanos().toDouble())\n        .serviceLevelObjectives(\n            Duration.ofMillis(100).toNanos().toDouble(),\n            Duration.ofMillis(500).toNanos().toDouble()\n        )\n        .build()\n}\n```\n\n### JVM and system metrics\nIn addition to HTTP metrics, Ktor exposes a set of metrics for monitoring the JVM. You can customize a list of these metrics using the `meterBinders` property:\n\n```kotlin\ninstall(MicrometerMetrics) {\n    meterBinders = listOf(\n        JvmMemoryMetrics(),\n        JvmGcMetrics(),\n        ProcessorMetrics()\n    )\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-micrometer.html", "title": "Server Plugin Micrometer metrics", "description": "This page covers the Micrometer metrics plugin for Ktor server applications, including installation, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:36:52", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "twitter:title": "Micrometer metrics | Ktor", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Micrometer metrics | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "twitter:site": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.028168665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Micrometer metrics | Ktor", "og:locale": "en_US", "og:title": "Micrometer metrics | Ktor", "scrapeId": "d5cd3b53-4f0c-4200-8b97-4a238d370ac0", "sourceURL": "https://ktor.io/docs/server-metrics-micrometer.html", "url": "https://ktor.io/docs/server-metrics-micrometer.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prometheus: expose a scrape endpoint in ktor?\n\nAssistant: To prometheus: expose a scrape endpoint in ktor, here's what you do:\nIf you use Prometheus as a monitoring system, you need to expose an HTTP endpoint to the Prometheus scraper. In Ktor, you can do this in the following way:\n\n1. Create a dedicated route that accepts GET requests by the required address ( `/metrics` in the example below).\n2. Use `call.respond` to send scraping data to Prometheus.\n\n```kotlin\nfun Application.module() {\n       val appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)\n       install(MicrometerMetrics) {\n           registry = appMicrometerRegistry\n       }\n       routing {\n           get(\"/metrics\") {\n               call.respond(appMicrometerRegistry.scrape())\n           }\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-micrometer.html", "title": "Server Plugin Micrometer metrics", "description": "This page covers the Micrometer metrics plugin for Ktor server applications, including installation, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:36:52", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "twitter:title": "Micrometer metrics | Ktor", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Micrometer metrics | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "twitter:site": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.028168665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Micrometer metrics | Ktor", "og:locale": "en_US", "og:title": "Micrometer metrics | Ktor", "scrapeId": "d5cd3b53-4f0c-4200-8b97-4a238d370ac0", "sourceURL": "https://ktor.io/docs/server-metrics-micrometer.html", "url": "https://ktor.io/docs/server-metrics-micrometer.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Micrometer metrics in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add ktor-server-metrics-micrometer dependency**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-metrics-micrometer:$ktor_version\")\n```\n\nThis snippet shows you how to add ktor-server-metrics-micrometer dependency, which is an important aspect of server plugin micrometer metrics.\n\n**Add micrometer-registry-prometheus dependency**:\n\n```yaml\nimplementation(\"io.micrometer:micrometer-registry-prometheus:$prometheus_version\")\n```\n\nThis snippet shows you how to add micrometer-registry-prometheus dependency, which is an important aspect of server plugin micrometer metrics.\n\n**Install MicrometerMetrics in embeddedServer**:\n\n```yaml\ninstall(MicrometerMetrics) {\n    // ...\n}\n```\n\nThis snippet shows you how to install micrometermetrics in embeddedserver, which is an important aspect of server plugin micrometer metrics.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-micrometer.html", "title": "Server Plugin Micrometer metrics", "description": "This page covers the Micrometer metrics plugin for Ktor server applications, including installation, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:36:52", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "twitter:title": "Micrometer metrics | Ktor", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Micrometer metrics | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "twitter:site": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.028168665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Micrometer metrics | Ktor", "og:locale": "en_US", "og:title": "Micrometer metrics | Ktor", "scrapeId": "d5cd3b53-4f0c-4200-8b97-4a238d370ac0", "sourceURL": "https://ktor.io/docs/server-metrics-micrometer.html", "url": "https://ktor.io/docs/server-metrics-micrometer.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Micrometer metrics in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe metric names may be different depending on the configured monitoring system.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-metrics-micrometer.html", "title": "Server Plugin Micrometer metrics", "description": "This page covers the Micrometer metrics plugin for Ktor server applications, including installation, configuration, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 04:36:52", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "twitter:title": "Micrometer metrics | Ktor", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Micrometer metrics | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "twitter:site": "@JetBrainsKtor", "built-on": "2025-02-26T14:01:03.028168665", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-metrics-micrometer.html", "twitter:card": "summary_large_image", "og:site_name": "Ktor Help", "twitter:description": "", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogTitle": "Micrometer metrics | Ktor", "og:locale": "en_US", "og:title": "Micrometer metrics | Ktor", "scrapeId": "d5cd3b53-4f0c-4200-8b97-4a238d370ac0", "sourceURL": "https://ktor.io/docs/server-metrics-micrometer.html", "url": "https://ktor.io/docs/server-metrics-micrometer.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Development mode is in ktor?\n\nAssistant: Sure, I'd be happy to explain Development mode in ktor.\n\n# Development mode\n\nKtor provides a special mode targeted for development, enabling features like auto-reload, extended debugging information, and more.Here's a quick rundown of what this is about:\n\n## Enable development mode\n\nYou can enable development mode in different ways: in the application configuration file, using a dedicated system property, or environment variable.\n\n## Configuration file\n\nTo enable development mode in a configuration file, set the `development` option to `true`:\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    development = true\n}\n```\n\n```\nktor:\n    development: true\n```\n\n## The 'io.ktor.development' system property\n\nThe io.ktor.development system property allows you to enable development mode when running your application:\n\n- To run an application in development mode using IntelliJ IDEA, pass `io.ktor.development` with the `-D` flag to VM options:\n\n```\n  -Dio.ktor.development=true\n```\n\n- If you run your application using a Gradle task, you can pass `io.ktor.development` to the `applicationDefaultJvmArgs` property in a build.gradle(.kts) file:\n\n```\napplication {\n      applicationDefaultJvmArgs = listOf(\"-Dio.ktor.development=true\")\n}\n```\n\n```\napplication {\n      applicationDefaultJvmArgs = [\"-Dio.ktor.development=true\"]\n}\n```\n\n## The 'io.ktor.development' environment variable\n\nTo enable development mode for a Native client, use the `io.ktor.development` environment variable.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-development-mode.html", "title": "Development mode", "description": "Ktor provides a special mode targeted for development, enabling features like auto-reload, extended debugging information, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:47:00", "type": "overview", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-development-mode.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-development-mode.html", "og:title": "Development mode | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Development mode | Ktor", "twitter:title": "Development mode | Ktor", "og:description": "", "ogSiteName": "Ktor Help", "twitter:description": "", "title": "Development mode | Ktor Documentation", "built-on": "2025-02-26T14:01:06.100568254", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "19bda239-8d7b-400c-85fd-31c059566e8e", "sourceURL": "https://ktor.io/docs/server-development-mode.html", "url": "https://ktor.io/docs/server-development-mode.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I enable development mode in ktor?\n\nAssistant: To enable development mode in ktor, here's what you do:\nYou can enable development mode in different ways: in the application configuration file, using a dedicated system property, or environment variable..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-development-mode.html", "title": "Development mode", "description": "Ktor provides a special mode targeted for development, enabling features like auto-reload, extended debugging information, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:47:00", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-development-mode.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-development-mode.html", "og:title": "Development mode | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Development mode | Ktor", "twitter:title": "Development mode | Ktor", "og:description": "", "ogSiteName": "Ktor Help", "twitter:description": "", "title": "Development mode | Ktor Documentation", "built-on": "2025-02-26T14:01:06.100568254", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "19bda239-8d7b-400c-85fd-31c059566e8e", "sourceURL": "https://ktor.io/docs/server-development-mode.html", "url": "https://ktor.io/docs/server-development-mode.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configuration file in ktor?\n\nAssistant: To configuration file in ktor, here's what you do:\nTo enable development mode in a configuration file, set the `development` option to `true`:\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    development = true\n}\n```\n\n```\nktor:\n    development: true\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-development-mode.html", "title": "Development mode", "description": "Ktor provides a special mode targeted for development, enabling features like auto-reload, extended debugging information, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:47:00", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-development-mode.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-development-mode.html", "og:title": "Development mode | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Development mode | Ktor", "twitter:title": "Development mode | Ktor", "og:description": "", "ogSiteName": "Ktor Help", "twitter:description": "", "title": "Development mode | Ktor Documentation", "built-on": "2025-02-26T14:01:06.100568254", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "19bda239-8d7b-400c-85fd-31c059566e8e", "sourceURL": "https://ktor.io/docs/server-development-mode.html", "url": "https://ktor.io/docs/server-development-mode.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I the 'io.ktor.development' system property in ktor?\n\nAssistant: To the 'io.ktor.development' system property in ktor, here's what you do:\nThe io.ktor.development system property allows you to enable development mode when running your application:\n\n- To run an application in development mode using IntelliJ IDEA, pass `io.ktor.development` with the `-D` flag to VM options:\n\n```\n  -Dio.ktor.development=true\n```\n\n- If you run your application using a Gradle task, you can pass `io.ktor.development` to the `applicationDefaultJvmArgs` property in a build.gradle(.kts) file:\n\n```\napplication {\n      applicationDefaultJvmArgs = listOf(\"-Dio.ktor.development=true\")\n}\n```\n\n```\napplication {\n      applicationDefaultJvmArgs = [\"-Dio.ktor.development=true\"]\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-development-mode.html", "title": "Development mode", "description": "Ktor provides a special mode targeted for development, enabling features like auto-reload, extended debugging information, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:47:00", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-development-mode.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-development-mode.html", "og:title": "Development mode | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Development mode | Ktor", "twitter:title": "Development mode | Ktor", "og:description": "", "ogSiteName": "Ktor Help", "twitter:description": "", "title": "Development mode | Ktor Documentation", "built-on": "2025-02-26T14:01:06.100568254", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "19bda239-8d7b-400c-85fd-31c059566e8e", "sourceURL": "https://ktor.io/docs/server-development-mode.html", "url": "https://ktor.io/docs/server-development-mode.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I the 'io.ktor.development' environment variable in ktor?\n\nAssistant: To the 'io.ktor.development' environment variable in ktor, here's what you do:\nTo enable development mode for a Native client, use the `io.ktor.development` environment variable..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-development-mode.html", "title": "Development mode", "description": "Ktor provides a special mode targeted for development, enabling features like auto-reload, extended debugging information, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:47:00", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-development-mode.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-development-mode.html", "og:title": "Development mode | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Development mode | Ktor", "twitter:title": "Development mode | Ktor", "og:description": "", "ogSiteName": "Ktor Help", "twitter:description": "", "title": "Development mode | Ktor Documentation", "built-on": "2025-02-26T14:01:06.100568254", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "19bda239-8d7b-400c-85fd-31c059566e8e", "sourceURL": "https://ktor.io/docs/server-development-mode.html", "url": "https://ktor.io/docs/server-development-mode.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Development mode in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Configuration file example**:\n\n```yaml\nktor {\n    development = true\n}\n```\n\nThis snippet shows you how to configuration file example, which is an important aspect of development mode.\n\n**Configuration file example (YAML)**:\n\n```yaml\nktor:\n    development: true\n```\n\nThis snippet shows you how to configuration file example (yaml), which is an important aspect of development mode.\n\n**System property for IntelliJ IDEA**:\n\n```yaml\n-Dio.ktor.development=true\n```\n\nThis snippet shows you how to system property for intellij idea, which is an important aspect of development mode.\n\n**Gradle (Kotlin) example**:\n\n```yaml\napplication {\n      applicationDefaultJvmArgs = listOf(\"-Dio.ktor.development=true\")\n}\n```\n\nThis snippet shows you how to gradle (kotlin) example, which is an important aspect of development mode.\n\n**Gradle (Groovy) example**:\n\n```yaml\napplication {\n      applicationDefaultJvmArgs = [\"-Dio.ktor.development=true\"]\n}\n```\n\nThis snippet shows you how to gradle (groovy) example, which is an important aspect of development mode.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-development-mode.html", "title": "Development mode", "description": "Ktor provides a special mode targeted for development, enabling features like auto-reload, extended debugging information, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:47:00", "type": "code_examples", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-development-mode.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-development-mode.html", "og:title": "Development mode | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Development mode | Ktor", "twitter:title": "Development mode | Ktor", "og:description": "", "ogSiteName": "Ktor Help", "twitter:description": "", "title": "Development mode | Ktor Documentation", "built-on": "2025-02-26T14:01:06.100568254", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "19bda239-8d7b-400c-85fd-31c059566e8e", "sourceURL": "https://ktor.io/docs/server-development-mode.html", "url": "https://ktor.io/docs/server-development-mode.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Development mode in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNote that development mode affects performance and shouldn't be used in production.\n\nYou can also use the `-ea` flag to enable development mode. Note that the `io.ktor.development` system property passed with the `-D` flag takes precedence over `-ea.`\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-development-mode.html", "title": "Development mode", "description": "Ktor provides a special mode targeted for development, enabling features like auto-reload, extended debugging information, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 04:47:00", "type": "best_practices", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogLocale": "en_US", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-development-mode.html", "ogUrl": "https://ktor.io/docs/3.1.1/server-development-mode.html", "og:title": "Development mode | Ktor", "og:type": "website", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Development mode | Ktor", "twitter:title": "Development mode | Ktor", "og:description": "", "ogSiteName": "Ktor Help", "twitter:description": "", "title": "Development mode | Ktor Documentation", "built-on": "2025-02-26T14:01:06.100568254", "build-number": "707", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "19bda239-8d7b-400c-85fd-31c059566e8e", "sourceURL": "https://ktor.io/docs/server-development-mode.html", "url": "https://ktor.io/docs/server-development-mode.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what CSS DSL is in ktor?\n\nAssistant: Sure, I'd be happy to explain CSS DSL in ktor.\n\n# CSS DSL\n\nCSS DSL extends HTML DSL and allows you to author stylesheets in Kotlin by using the kotlin-css wrapper.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\nio.ktor:ktor-server-html-builder, org.jetbrains.kotlin-wrappers:kotlin-css\n\n## Add dependencies\n\nCSS DSL doesn't need installation, but requires including the following artifacts in the build script:\n\n1. The `ktor-server-html-builder` artifact for HTML DSL:\n\n   Gradle (Kotlin)\n   ```\n   implementation(\"io.ktor:ktor-server-html-builder:$ktor_version\")\n   ```\n   Gradle (Groovy)\n   ```\n   implementation \"io.ktor:ktor-server-html-builder:$ktor_version\"\n   ```\n   Maven\n   ```\n   <dependency>\n          <groupId>io.ktor</groupId>\n          <artifactId>ktor-server-html-builder-jvm</artifactId>\n          <version>${ktor_version}</version>\n   </dependency>\n   ```\n\n2. The `kotlin-css-jvm` artifact for building CSS:\n\n   Gradle (Kotlin)\n   ```\n   implementation(\"org.jetbrains.kotlin-wrappers:kotlin-css:$kotlin_css_version\")\n   ```\n   Gradle (Groovy)\n   ```\n   implementation \"org.jetbrains.kotlin-wrappers:kotlin-css:$kotlin_css_version\"\n   ```\n   Maven\n   ```\n   <dependency>\n          <groupId>org.jetbrains.kotlin-wrappers</groupId>\n          <artifactId>kotlin-css</artifactId>\n          <version>${kotlin_css_version}</version>\n   </dependency>\n   ```\n\nYou can replace `$kotlin_css_version` with the required version of the `kotlin-css` artifact, for example, `1.0.0-pre.625`.\n\n## Serve CSS\n\nTo send a CSS response, you need to extend `ApplicationCall` by adding the `respondCss` method to serialize a stylesheet into a string and send it to the client with the `CSS` content type:\n\n```kotlin\nsuspend inline fun ApplicationCall.respondCss(builder: CssBuilder.() -> Unit) {\n    this.respondText(CssBuilder().apply(builder).toString(), ContentType.Text.CSS)\n}\n```\n\nThen, you can provide CSS inside the required route:\n\n```kotlin\nget(\"/styles.css\") {\n    call.respondCss {\n        body {\n            backgroundColor = Color.darkBlue\n            margin = Margin(0.px)\n        }\n        rule(\"h1.page-title\") {\n            color = Color.white\n        }\n    }\n}\n```\n\nFinally, you can use the specified CSS for an HTML document created with HTML DSL:\n\n```kotlin\nget(\"/html-dsl\") {\n    call.respondHtml {\n        head {\n            link(rel = \"stylesheet\", href = \"/styles.css\", type = \"text/css\")\n        }\n        body {\n            h1(classes = \"page-title\") {\n                +\"Hello from Ktor!\"\n            }\n        }\n    }\n}\n```\n\nYou can find the full example here: [css-dsl](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/css-dsl).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-css-dsl.html", "title": "CSS DSL", "description": "CSS DSL extends HTML DSL and allows you to author stylesheets in Kotlin by using the kotlin-css wrapper.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:49:00", "type": "overview", "page_metadata": {"ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.436768368", "ogDescription": "", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "CSS DSL | Ktor Documentation", "og:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "CSS DSL | Ktor", "ogTitle": "CSS DSL | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "twitter:title": "CSS DSL | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "182d6c06-7364-41cc-aa01-3e16790bd7bf", "sourceURL": "https://ktor.io/docs/server-css-dsl.html", "url": "https://ktor.io/docs/server-css-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\nio.ktor:ktor-server-html-builder, org.jetbrains.kotlin-wrappers:kotlin-css.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-css-dsl.html", "title": "CSS DSL", "description": "CSS DSL extends HTML DSL and allows you to author stylesheets in Kotlin by using the kotlin-css wrapper.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:49:00", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.436768368", "ogDescription": "", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "CSS DSL | Ktor Documentation", "og:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "CSS DSL | Ktor", "ogTitle": "CSS DSL | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "twitter:title": "CSS DSL | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "182d6c06-7364-41cc-aa01-3e16790bd7bf", "sourceURL": "https://ktor.io/docs/server-css-dsl.html", "url": "https://ktor.io/docs/server-css-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nCSS DSL doesn't need installation, but requires including the following artifacts in the build script:\n\n1. The `ktor-server-html-builder` artifact for HTML DSL:\n\n   Gradle (Kotlin)\n   ```\n   implementation(\"io.ktor:ktor-server-html-builder:$ktor_version\")\n   ```\n   Gradle (Groovy)\n   ```\n   implementation \"io.ktor:ktor-server-html-builder:$ktor_version\"\n   ```\n   Maven\n   ```\n   <dependency>\n          <groupId>io.ktor</groupId>\n          <artifactId>ktor-server-html-builder-jvm</artifactId>\n          <version>${ktor_version}</version>\n   </dependency>\n   ```\n\n2. The `kotlin-css-jvm` artifact for building CSS:\n\n   Gradle (Kotlin)\n   ```\n   implementation(\"org.jetbrains.kotlin-wrappers:kotlin-css:$kotlin_css_version\")\n   ```\n   Gradle (Groovy)\n   ```\n   implementation \"org.jetbrains.kotlin-wrappers:kotlin-css:$kotlin_css_version\"\n   ```\n   Maven\n   ```\n   <dependency>\n          <groupId>org.jetbrains.kotlin-wrappers</groupId>\n          <artifactId>kotlin-css</artifactId>\n          <version>${kotlin_css_version}</version>\n   </dependency>\n   ```\n\nYou can replace `$kotlin_css_version` with the required version of the `kotlin-css` artifact, for example, `1.0.0-pre.625`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-css-dsl.html", "title": "CSS DSL", "description": "CSS DSL extends HTML DSL and allows you to author stylesheets in Kotlin by using the kotlin-css wrapper.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:49:00", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.436768368", "ogDescription": "", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "CSS DSL | Ktor Documentation", "og:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "CSS DSL | Ktor", "ogTitle": "CSS DSL | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "twitter:title": "CSS DSL | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "182d6c06-7364-41cc-aa01-3e16790bd7bf", "sourceURL": "https://ktor.io/docs/server-css-dsl.html", "url": "https://ktor.io/docs/server-css-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I serve css in ktor?\n\nAssistant: To serve css in ktor, here's what you do:\nTo send a CSS response, you need to extend `ApplicationCall` by adding the `respondCss` method to serialize a stylesheet into a string and send it to the client with the `CSS` content type:\n\n```kotlin\nsuspend inline fun ApplicationCall.respondCss(builder: CssBuilder.() -> Unit) {\n    this.respondText(CssBuilder().apply(builder).toString(), ContentType.Text.CSS)\n}\n```\n\nThen, you can provide CSS inside the required route:\n\n```kotlin\nget(\"/styles.css\") {\n    call.respondCss {\n        body {\n            backgroundColor = Color.darkBlue\n            margin = Margin(0.px)\n        }\n        rule(\"h1.page-title\") {\n            color = Color.white\n        }\n    }\n}\n```\n\nFinally, you can use the specified CSS for an HTML document created with HTML DSL:\n\n```kotlin\nget(\"/html-dsl\") {\n    call.respondHtml {\n        head {\n            link(rel = \"stylesheet\", href = \"/styles.css\", type = \"text/css\")\n        }\n        body {\n            h1(classes = \"page-title\") {\n                +\"Hello from Ktor!\"\n            }\n        }\n    }\n}\n```\n\nYou can find the full example here: [css-dsl](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/css-dsl)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-css-dsl.html", "title": "CSS DSL", "description": "CSS DSL extends HTML DSL and allows you to author stylesheets in Kotlin by using the kotlin-css wrapper.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:49:00", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.436768368", "ogDescription": "", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "CSS DSL | Ktor Documentation", "og:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "CSS DSL | Ktor", "ogTitle": "CSS DSL | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "twitter:title": "CSS DSL | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "182d6c06-7364-41cc-aa01-3e16790bd7bf", "sourceURL": "https://ktor.io/docs/server-css-dsl.html", "url": "https://ktor.io/docs/server-css-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for CSS DSL in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Respond CSS Example**:\n\n```yaml\nsuspend inline fun ApplicationCall.respondCss(builder: CssBuilder.() -> Unit) {\n    this.respondText(CssBuilder().apply(builder).toString(), ContentType.Text.CSS)\n}\n```\n\nThis snippet shows you how to respond css example, which is an important aspect of css dsl.\n\n**CSS Route Example**:\n\n```yaml\nget(\"/styles.css\") {\n    call.respondCss {\n        body {\n            backgroundColor = Color.darkBlue\n            margin = Margin(0.px)\n        }\n        rule(\"h1.page-title\") {\n            color = Color.white\n        }\n    }\n}\n```\n\nThis snippet shows you how to css route example, which is an important aspect of css dsl.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-css-dsl.html", "title": "CSS DSL", "description": "CSS DSL extends HTML DSL and allows you to author stylesheets in Kotlin by using the kotlin-css wrapper.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:49:00", "type": "code_examples", "page_metadata": {"ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.436768368", "ogDescription": "", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "CSS DSL | Ktor Documentation", "og:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "CSS DSL | Ktor", "ogTitle": "CSS DSL | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "twitter:title": "CSS DSL | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "182d6c06-7364-41cc-aa01-3e16790bd7bf", "sourceURL": "https://ktor.io/docs/server-css-dsl.html", "url": "https://ktor.io/docs/server-css-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using CSS DSL in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nLearn how to serve stylesheets as static content from Serving static content.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-css-dsl.html", "title": "CSS DSL", "description": "CSS DSL extends HTML DSL and allows you to author stylesheets in Kotlin by using the kotlin-css wrapper.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 04:49:00", "type": "best_practices", "page_metadata": {"ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:02.436768368", "ogDescription": "", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "title": "CSS DSL | Ktor Documentation", "og:description": "", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "CSS DSL | Ktor", "ogTitle": "CSS DSL | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "ogLocale": "en_US", "twitter:title": "CSS DSL | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-css-dsl.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "182d6c06-7364-41cc-aa01-3e16790bd7bf", "sourceURL": "https://ktor.io/docs/server-css-dsl.html", "url": "https://ktor.io/docs/server-css-dsl.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Response validation is in ktor?\n\nAssistant: Sure, I'd be happy to explain Response validation in ktor.\n\n# Response validation\n\nThis page covers how to validate responses in Ktor client applications, including enabling default validation, customizing validation for 2xx and non-2xx responses, and handling exceptions.Here's a quick rundown of what this is about:\n\n## Enable default validation\n\nKtor allows you to enable default validation by setting the `expectSuccess` property to `true`. This can be done on a [client configuration](https://ktor.io/docs/client-create-and-configure.html#configure-client) level ...\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO) {\n    expectSuccess = true\n}\n```\n\n... or by using the same property on a [request](https://ktor.io/docs/client-requests.html#parameters) level. In this case, the following exceptions will be thrown for non-2xx error responses:\n\n- [RedirectResponseException](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-redirect-response-exception/index.html) for 3xx responses.\n- [ClientRequestException](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-client-request-exception/index.html) for 4xx responses.\n- [ServerResponseException](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-server-response-exception/index.html) for 5xx responses.\n\n## Custom validation\n\nYou can add additional validation for 2xx responses or customize default validation by using the [HttpCallValidator](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator) plugin. To install `HttpCallValidator`, call the [HttpResponseValidator](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-response-validator.html) function inside a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```\nval client = HttpClient(CIO) {\n    HttpResponseValidator {\n        // ...\n    }\n}\n```\n\n## Validate 2xx responses\n\nAs mentioned above, [default validation](https://ktor.io/docs/client-response-validation.html#default) throws exceptions for non-2xx error responses. If you need to add stricter validation and check 2xx responses, use the [validateResponse](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/validate-response.html) function available in `HttpCallValidator`.\n\nIn the [example](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-validate-2xx-response) below, a client receives a 2xx response with error details in a [JSON](https://ktor.io/docs/client-serialization.html) format. The `validateResponse` is used to raise a `CustomResponseException`:\n\n```\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) { json() }\n    HttpResponseValidator {\n        validateResponse { response ->\n            val error: Error = response.body()\n            if (error.code != 0) {\n                throw CustomResponseException(response, \"Code: ${error.code}, message: ${error.message}\")\n            }\n        }\n    }\n}\n```\n\n## Handle non-2xx exceptions\n\nIf you need to customize [default validation](https://ktor.io/docs/client-response-validation.html#default) and handle exceptions for non-2xx responses in a specific way, use [handleResponseExceptionWithRequest](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/handle-response-exception-with-request.html). In the [example](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-validate-non-2xx-response) below, a client raises a custom `MissingPageException` for 404 responses instead of the default `ClientRequestException`:\n\n```\nval client = HttpClient(CIO) {\n    expectSuccess = true\n    HttpResponseValidator {\n        handleResponseExceptionWithRequest { exception, request ->\n            val clientException = exception as? ClientRequestException ?: return@handleResponseExceptionWithRequest\n            val exceptionResponse = clientException.response\n            if (exceptionResponse.status == HttpStatusCode.NotFound) {\n                val exceptionResponseText = exceptionResponse.bodyAsText()\n                throw MissingPageException(exceptionResponse, exceptionResponseText)\n            }\n        }\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-response-validation.html", "title": "Response validation", "description": "This page covers how to validate responses in Ktor client applications, including enabling default validation, customizing validation for 2xx and non-2xx responses, and handling exceptions.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:49:31", "type": "overview", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-response-validation.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:description": "", "title": "Response validation | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Response validation | Ktor", "built-on": "2025-02-26T14:01:02.926881408", "ogTitle": "Response validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-response-validation.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:site_name": "Ktor Help", "twitter:title": "Response validation | Ktor", "twitter:creator": "@JetBrainsKtor", "scrapeId": "58a7d367-6a2b-4761-b52e-444cab677005", "sourceURL": "https://ktor.io/docs/client-response-validation.html", "url": "https://ktor.io/docs/client-response-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I enable default validation in ktor?\n\nAssistant: To enable default validation in ktor, here's what you do:\nKtor allows you to enable default validation by setting the `expectSuccess` property to `true`. This can be done on a [client configuration](https://ktor.io/docs/client-create-and-configure.html#configure-client) level ...\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO) {\n    expectSuccess = true\n}\n```\n\n... or by using the same property on a [request](https://ktor.io/docs/client-requests.html#parameters) level. In this case, the following exceptions will be thrown for non-2xx error responses:\n\n- [RedirectResponseException](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-redirect-response-exception/index.html) for 3xx responses.\n- [ClientRequestException](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-client-request-exception/index.html) for 4xx responses.\n- [ServerResponseException](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-server-response-exception/index.html) for 5xx responses..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-response-validation.html", "title": "Response validation", "description": "This page covers how to validate responses in Ktor client applications, including enabling default validation, customizing validation for 2xx and non-2xx responses, and handling exceptions.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:49:31", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-response-validation.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:description": "", "title": "Response validation | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Response validation | Ktor", "built-on": "2025-02-26T14:01:02.926881408", "ogTitle": "Response validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-response-validation.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:site_name": "Ktor Help", "twitter:title": "Response validation | Ktor", "twitter:creator": "@JetBrainsKtor", "scrapeId": "58a7d367-6a2b-4761-b52e-444cab677005", "sourceURL": "https://ktor.io/docs/client-response-validation.html", "url": "https://ktor.io/docs/client-response-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I custom validation in ktor?\n\nAssistant: To custom validation in ktor, here's what you do:\nYou can add additional validation for 2xx responses or customize default validation by using the [HttpCallValidator](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator) plugin. To install `HttpCallValidator`, call the [HttpResponseValidator](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-response-validator.html) function inside a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```\nval client = HttpClient(CIO) {\n    HttpResponseValidator {\n        // ...\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-response-validation.html", "title": "Response validation", "description": "This page covers how to validate responses in Ktor client applications, including enabling default validation, customizing validation for 2xx and non-2xx responses, and handling exceptions.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:49:31", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-response-validation.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:description": "", "title": "Response validation | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Response validation | Ktor", "built-on": "2025-02-26T14:01:02.926881408", "ogTitle": "Response validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-response-validation.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:site_name": "Ktor Help", "twitter:title": "Response validation | Ktor", "twitter:creator": "@JetBrainsKtor", "scrapeId": "58a7d367-6a2b-4761-b52e-444cab677005", "sourceURL": "https://ktor.io/docs/client-response-validation.html", "url": "https://ktor.io/docs/client-response-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I validate 2xx responses in ktor?\n\nAssistant: To validate 2xx responses in ktor, here's what you do:\nAs mentioned above, [default validation](https://ktor.io/docs/client-response-validation.html#default) throws exceptions for non-2xx error responses. If you need to add stricter validation and check 2xx responses, use the [validateResponse](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/validate-response.html) function available in `HttpCallValidator`.\n\nIn the [example](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-validate-2xx-response) below, a client receives a 2xx response with error details in a [JSON](https://ktor.io/docs/client-serialization.html) format. The `validateResponse` is used to raise a `CustomResponseException`:\n\n```\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) { json() }\n    HttpResponseValidator {\n        validateResponse { response ->\n            val error: Error = response.body()\n            if (error.code != 0) {\n                throw CustomResponseException(response, \"Code: ${error.code}, message: ${error.message}\")\n            }\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-response-validation.html", "title": "Response validation", "description": "This page covers how to validate responses in Ktor client applications, including enabling default validation, customizing validation for 2xx and non-2xx responses, and handling exceptions.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:49:31", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-response-validation.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:description": "", "title": "Response validation | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Response validation | Ktor", "built-on": "2025-02-26T14:01:02.926881408", "ogTitle": "Response validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-response-validation.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:site_name": "Ktor Help", "twitter:title": "Response validation | Ktor", "twitter:creator": "@JetBrainsKtor", "scrapeId": "58a7d367-6a2b-4761-b52e-444cab677005", "sourceURL": "https://ktor.io/docs/client-response-validation.html", "url": "https://ktor.io/docs/client-response-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I handle non-2xx exceptions in ktor?\n\nAssistant: To handle non-2xx exceptions in ktor, here's what you do:\nIf you need to customize [default validation](https://ktor.io/docs/client-response-validation.html#default) and handle exceptions for non-2xx responses in a specific way, use [handleResponseExceptionWithRequest](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/handle-response-exception-with-request.html). In the [example](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-validate-non-2xx-response) below, a client raises a custom `MissingPageException` for 404 responses instead of the default `ClientRequestException`:\n\n```\nval client = HttpClient(CIO) {\n    expectSuccess = true\n    HttpResponseValidator {\n        handleResponseExceptionWithRequest { exception, request ->\n            val clientException = exception as? ClientRequestException ?: return@handleResponseExceptionWithRequest\n            val exceptionResponse = clientException.response\n            if (exceptionResponse.status == HttpStatusCode.NotFound) {\n                val exceptionResponseText = exceptionResponse.bodyAsText()\n                throw MissingPageException(exceptionResponse, exceptionResponseText)\n            }\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-response-validation.html", "title": "Response validation", "description": "This page covers how to validate responses in Ktor client applications, including enabling default validation, customizing validation for 2xx and non-2xx responses, and handling exceptions.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:49:31", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-response-validation.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:description": "", "title": "Response validation | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Response validation | Ktor", "built-on": "2025-02-26T14:01:02.926881408", "ogTitle": "Response validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-response-validation.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:site_name": "Ktor Help", "twitter:title": "Response validation | Ktor", "twitter:creator": "@JetBrainsKtor", "scrapeId": "58a7d367-6a2b-4761-b52e-444cab677005", "sourceURL": "https://ktor.io/docs/client-response-validation.html", "url": "https://ktor.io/docs/client-response-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Response validation in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Enable default validation**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO) {\n    expectSuccess = true\n}\n```\n\nThis snippet shows you how to enable default validation, which is an important aspect of response validation.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-response-validation.html", "title": "Response validation", "description": "This page covers how to validate responses in Ktor client applications, including enabling default validation, customizing validation for 2xx and non-2xx responses, and handling exceptions.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 04:49:31", "type": "code_examples", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-response-validation.html", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "og:type": "website", "twitter:description": "", "title": "Response validation | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Response validation | Ktor", "built-on": "2025-02-26T14:01:02.926881408", "ogTitle": "Response validation | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-response-validation.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "og:site_name": "Ktor Help", "twitter:title": "Response validation | Ktor", "twitter:creator": "@JetBrainsKtor", "scrapeId": "58a7d367-6a2b-4761-b52e-444cab677005", "sourceURL": "https://ktor.io/docs/client-response-validation.html", "url": "https://ktor.io/docs/client-response-validation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Data conversion is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Data conversion in ktor.\n\n# Server Plugin Data conversion\n\nThe DataConversion plugin allows you to serialize and deserialize a list of values in Ktor applications.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo use `DataConversion`, you need to include the `ktor-server-data-conversion` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-data-conversion:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-data-conversion:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-data-conversion-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install DataConversion\n\nTo [install](https://ktor.io/docs/server-plugins.html#install) the `DataConversion` plugin to the application, pass it to the `install` function in the specified [module](https://ktor.io/docs/server-modules.html). The code snippets below show how to install `DataConversion`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.dataconversion.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DataConversion)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.dataconversion.*\n// ...\nfun Application.module() {\n    install(DataConversion)\n    // ...\n}\n```\n\n## Add converters\n\nYou can define type conversions within the `DataConversion` configuration. Provide a `convert<T>` method for the specified type and use the available functions to serialize and deserialize a list of values:\n\n- Use the `decode()` function to deserialize a list of values. It takes a list of strings, representing repeated values in the URL and returns the decoded value.\n\n```\ndecode { values -> // converter: (values: List<String>) -> Any?\n    //deserialize values\n}\n```\n\n- Use the `encode()` function to serialize a value. The function takes an arbitrary value and returns a list of strings representing it.\n\n```\nencode { value -> // converter: (value: Any?) -> List<String>\n    //serialize value\n}\n```\n\n## Access the service\n\nYou can access the `DataConversion` service from the current context:\n\n```\nval dataConversion = application.conversionService\n```\n\nYou can then use the converter service to call the callback functions:\n\n- The `fromValues(values: List<String>, type: TypeInfo)` callback function accepts `values` as a list of strings, and the `TypeInfo` to convert the value to and returns the decoded value.\n\n- The `toValues(value: Any?)` callback function accepts an arbitrary value and returns a list of strings representing it.\n\n## Example\n\nIn the following example, a converter for the type `LocalDate` is defined and configured to serialize and deserialize values. When the `encode` function is called, the service will convert the value using a `SimpleDateFormat` and return a list containing the formatted value. When the `decode` function is called, the service will format the date as a `LocalDate` and return it.\n\n```\ninstall(DataConversion) {\n    convert<LocalDate> { // this: DelegatingConversionService\n        val formatter = DateTimeFormatterBuilder()\n            .appendValue(ChronoField.YEAR, 4, 4, SignStyle.NEVER)\n            .appendValue(ChronoField.MONTH_OF_YEAR, 2)\n            .appendValue(ChronoField.DAY_OF_MONTH, 2)\n            .toFormatter(Locale.ROOT)\n\n        decode { values -> // converter: (values: List<String>) -> Any?\n            LocalDate.from(formatter.parse(values.single()))\n        }\n\n        encode { value -> // converter: (value: Any?) -> List<String>\n            listOf(SimpleDateFormat.getInstance().format(value))\n        }\n    }\n}\n```\n\nThe conversion service can then be called manually to retrieve the encoded and decoded values:\n\n```\nval encodedDate = application.conversionService.toValues(call.parameters[\"date\"])\nval decodedDate = application.conversionService.fromValues(encodedDate, typeInfo<LocalDate>())\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-data-conversion.html", "title": "Server Plugin Data conversion", "description": "The DataConversion plugin allows you to serialize and deserialize a list of values in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:52:24", "type": "overview", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "ogDescription": "", "ogTitle": "Data conversion | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Data conversion | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Data conversion | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.615530654", "title": "Data conversion | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "ad6d0422-4587-4d5e-87af-4ec760a9a6d1", "sourceURL": "https://ktor.io/docs/server-data-conversion.html", "url": "https://ktor.io/docs/server-data-conversion.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `DataConversion`, you need to include the `ktor-server-data-conversion` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-data-conversion:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-data-conversion:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-data-conversion-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-data-conversion.html", "title": "Server Plugin Data conversion", "description": "The DataConversion plugin allows you to serialize and deserialize a list of values in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:52:24", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "ogDescription": "", "ogTitle": "Data conversion | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Data conversion | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Data conversion | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.615530654", "title": "Data conversion | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "ad6d0422-4587-4d5e-87af-4ec760a9a6d1", "sourceURL": "https://ktor.io/docs/server-data-conversion.html", "url": "https://ktor.io/docs/server-data-conversion.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install dataconversion in ktor?\n\nAssistant: To install dataconversion in ktor, here's what you do:\nTo [install](https://ktor.io/docs/server-plugins.html#install) the `DataConversion` plugin to the application, pass it to the `install` function in the specified [module](https://ktor.io/docs/server-modules.html). The code snippets below show how to install `DataConversion`...\n\n- ... inside the `embeddedServer` function call.\n\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.dataconversion.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DataConversion)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.dataconversion.*\n// ...\nfun Application.module() {\n    install(DataConversion)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-data-conversion.html", "title": "Server Plugin Data conversion", "description": "The DataConversion plugin allows you to serialize and deserialize a list of values in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:52:24", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "ogDescription": "", "ogTitle": "Data conversion | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Data conversion | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Data conversion | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.615530654", "title": "Data conversion | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "ad6d0422-4587-4d5e-87af-4ec760a9a6d1", "sourceURL": "https://ktor.io/docs/server-data-conversion.html", "url": "https://ktor.io/docs/server-data-conversion.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add converters in ktor?\n\nAssistant: To add converters in ktor, here's what you do:\nYou can define type conversions within the `DataConversion` configuration. Provide a `convert<T>` method for the specified type and use the available functions to serialize and deserialize a list of values:\n\n- Use the `decode()` function to deserialize a list of values. It takes a list of strings, representing repeated values in the URL and returns the decoded value.\n\n```\ndecode { values -> // converter: (values: List<String>) -> Any?\n    //deserialize values\n}\n```\n\n- Use the `encode()` function to serialize a value. The function takes an arbitrary value and returns a list of strings representing it.\n\n```\nencode { value -> // converter: (value: Any?) -> List<String>\n    //serialize value\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-data-conversion.html", "title": "Server Plugin Data conversion", "description": "The DataConversion plugin allows you to serialize and deserialize a list of values in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:52:24", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "ogDescription": "", "ogTitle": "Data conversion | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Data conversion | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Data conversion | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.615530654", "title": "Data conversion | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "ad6d0422-4587-4d5e-87af-4ec760a9a6d1", "sourceURL": "https://ktor.io/docs/server-data-conversion.html", "url": "https://ktor.io/docs/server-data-conversion.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I access the service in ktor?\n\nAssistant: To access the service in ktor, here's what you do:\nYou can access the `DataConversion` service from the current context:\n\n```\nval dataConversion = application.conversionService\n```\n\nYou can then use the converter service to call the callback functions:\n\n- The `fromValues(values: List<String>, type: TypeInfo)` callback function accepts `values` as a list of strings, and the `TypeInfo` to convert the value to and returns the decoded value.\n\n- The `toValues(value: Any?)` callback function accepts an arbitrary value and returns a list of strings representing it..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-data-conversion.html", "title": "Server Plugin Data conversion", "description": "The DataConversion plugin allows you to serialize and deserialize a list of values in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:52:24", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "ogDescription": "", "ogTitle": "Data conversion | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Data conversion | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Data conversion | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.615530654", "title": "Data conversion | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "ad6d0422-4587-4d5e-87af-4ec760a9a6d1", "sourceURL": "https://ktor.io/docs/server-data-conversion.html", "url": "https://ktor.io/docs/server-data-conversion.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example in ktor?\n\nAssistant: To example in ktor, here's what you do:\nIn the following example, a converter for the type `LocalDate` is defined and configured to serialize and deserialize values. When the `encode` function is called, the service will convert the value using a `SimpleDateFormat` and return a list containing the formatted value. When the `decode` function is called, the service will format the date as a `LocalDate` and return it.\n\n```\ninstall(DataConversion) {\n    convert<LocalDate> { // this: DelegatingConversionService\n        val formatter = DateTimeFormatterBuilder()\n            .appendValue(ChronoField.YEAR, 4, 4, SignStyle.NEVER)\n            .appendValue(ChronoField.MONTH_OF_YEAR, 2)\n            .appendValue(ChronoField.DAY_OF_MONTH, 2)\n            .toFormatter(Locale.ROOT)\n\n        decode { values -> // converter: (values: List<String>) -> Any?\n            LocalDate.from(formatter.parse(values.single()))\n        }\n\n        encode { value -> // converter: (value: Any?) -> List<String>\n            listOf(SimpleDateFormat.getInstance().format(value))\n        }\n    }\n}\n```\n\nThe conversion service can then be called manually to retrieve the encoded and decoded values:\n\n```\nval encodedDate = application.conversionService.toValues(call.parameters[\"date\"])\nval decodedDate = application.conversionService.fromValues(encodedDate, typeInfo<LocalDate>())\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-data-conversion.html", "title": "Server Plugin Data conversion", "description": "The DataConversion plugin allows you to serialize and deserialize a list of values in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:52:24", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "ogDescription": "", "ogTitle": "Data conversion | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Data conversion | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Data conversion | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.615530654", "title": "Data conversion | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "ad6d0422-4587-4d5e-87af-4ec760a9a6d1", "sourceURL": "https://ktor.io/docs/server-data-conversion.html", "url": "https://ktor.io/docs/server-data-conversion.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Data conversion in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-data-conversion:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies - gradle (kotlin), which is an important aspect of server plugin data conversion.\n\n**Add dependencies - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-data-conversion:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies - gradle (groovy), which is an important aspect of server plugin data conversion.\n\n**Add dependencies - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-data-conversion-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies - maven, which is an important aspect of server plugin data conversion.\n\n**Install DataConversion - embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.dataconversion.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DataConversion)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install dataconversion - embeddedserver, which is an important aspect of server plugin data conversion.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-data-conversion.html", "title": "Server Plugin Data conversion", "description": "The DataConversion plugin allows you to serialize and deserialize a list of values in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:52:24", "type": "code_examples", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "ogDescription": "", "ogTitle": "Data conversion | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Data conversion | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Data conversion | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.615530654", "title": "Data conversion | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "ad6d0422-4587-4d5e-87af-4ec760a9a6d1", "sourceURL": "https://ktor.io/docs/server-data-conversion.html", "url": "https://ktor.io/docs/server-data-conversion.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Data conversion in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to include the required dependencies in your build script before using the DataConversion plugin.\n\nWhen defining converters, make sure to handle both serialization and deserialization properly to avoid data loss or errors.\n\nAccess the DataConversion service from the application context to utilize the conversion functions effectively.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-data-conversion.html", "title": "Server Plugin Data conversion", "description": "The DataConversion plugin allows you to serialize and deserialize a list of values in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 04:52:24", "type": "best_practices", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "ogDescription": "", "ogTitle": "Data conversion | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-data-conversion.html", "twitter:card": "summary_large_image", "language": "en-US", "og:title": "Data conversion | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Data conversion | Ktor", "ogSiteName": "Ktor Help", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "built-on": "2025-02-26T14:01:05.615530654", "title": "Data conversion | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:site_name": "Ktor Help", "build-number": "707", "scrapeId": "ad6d0422-4587-4d5e-87af-4ec760a9a6d1", "sourceURL": "https://ktor.io/docs/server-data-conversion.html", "url": "https://ktor.io/docs/server-data-conversion.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin BOM remover is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin BOM remover in ktor.\n\n# Client Plugin BOM remover\n\nThis page covers the Ktor client BOM remover plugin, its usage, and how to add it as a dependency.Here's a quick rundown of what this is about:\n\n## Introduction\n\n[Byte Order Mark (BOM)](https://en.wikipedia.org/wiki/Byte_order_mark) is a character encoded in a Unicode file or stream. The main purpose of BOM is to signal the text's stream encoding and the byte order of 16-bit and 32-bit encodings.\n\nIn some cases, it is necessary to remove BOM from the response body. For example, in the UTF-8 encoding, the presence of BOM is optional, and it may cause problems when it's read by software that does not know how to handle the BOM.\n\nThe Ktor client provides the [BOMRemover](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-bom-remover/io.ktor.client.plugins.bomremover/index.html) plugin that removes BOM from the response body in the UTF-8, UTF-16 (BE), UTF-16 (LE), UTF-32 (BE) and UTF-32 (LE) encodings.\n\n> ### note\n>\n> Note that when removing the BOM, Ktor does not change the `Content-Length` header, which retains the length of the initial response.\n\n## Add dependencies\n\nTo use `BOMRemover`, you need to include the `ktor-client-bom-remover` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-bom-remover:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-bom-remover:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-bom-remover-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-bom-remover.html", "title": "Client Plugin BOM remover", "description": "This page covers the Ktor client BOM remover plugin, its usage, and how to add it as a dependency.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:54:05", "type": "overview", "page_metadata": {"og:type": "website", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "BOM remover | Ktor Documentation", "og:title": "BOM remover | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-bom-remover.html", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "og:description": "", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bom-remover.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "BOM remover | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "BOM remover | Ktor", "built-on": "2025-02-26T14:01:03.942450306", "language": "en-US", "scrapeId": "8ff7fe2f-cd43-4a19-944e-75072f7ac601", "sourceURL": "https://ktor.io/docs/client-bom-remover.html", "url": "https://ktor.io/docs/client-bom-remover.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I introduction in ktor?\n\nAssistant: To introduction in ktor, here's what you do:\n[Byte Order Mark (BOM)](https://en.wikipedia.org/wiki/Byte_order_mark) is a character encoded in a Unicode file or stream. The main purpose of BOM is to signal the text's stream encoding and the byte order of 16-bit and 32-bit encodings.\n\nIn some cases, it is necessary to remove BOM from the response body. For example, in the UTF-8 encoding, the presence of BOM is optional, and it may cause problems when it's read by software that does not know how to handle the BOM.\n\nThe Ktor client provides the [BOMRemover](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-bom-remover/io.ktor.client.plugins.bomremover/index.html) plugin that removes BOM from the response body in the UTF-8, UTF-16 (BE), UTF-16 (LE), UTF-32 (BE) and UTF-32 (LE) encodings.\n\n> ### note\n>\n> Note that when removing the BOM, Ktor does not change the `Content-Length` header, which retains the length of the initial response..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-bom-remover.html", "title": "Client Plugin BOM remover", "description": "This page covers the Ktor client BOM remover plugin, its usage, and how to add it as a dependency.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:54:05", "type": "section_detail", "page_metadata": {"og:type": "website", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "BOM remover | Ktor Documentation", "og:title": "BOM remover | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-bom-remover.html", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "og:description": "", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bom-remover.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "BOM remover | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "BOM remover | Ktor", "built-on": "2025-02-26T14:01:03.942450306", "language": "en-US", "scrapeId": "8ff7fe2f-cd43-4a19-944e-75072f7ac601", "sourceURL": "https://ktor.io/docs/client-bom-remover.html", "url": "https://ktor.io/docs/client-bom-remover.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `BOMRemover`, you need to include the `ktor-client-bom-remover` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-client-bom-remover:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-client-bom-remover:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-bom-remover-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-bom-remover.html", "title": "Client Plugin BOM remover", "description": "This page covers the Ktor client BOM remover plugin, its usage, and how to add it as a dependency.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:54:05", "type": "section_detail", "page_metadata": {"og:type": "website", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "BOM remover | Ktor Documentation", "og:title": "BOM remover | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-bom-remover.html", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "og:description": "", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bom-remover.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "BOM remover | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "BOM remover | Ktor", "built-on": "2025-02-26T14:01:03.942450306", "language": "en-US", "scrapeId": "8ff7fe2f-cd43-4a19-944e-75072f7ac601", "sourceURL": "https://ktor.io/docs/client-bom-remover.html", "url": "https://ktor.io/docs/client-bom-remover.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin BOM remover in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install BOMRemover**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.compression.*\n//...\nval client = HttpClient(CIO) {\n    install(BOMRemover)\n}\n```\n\nThis snippet shows you how to install bomremover, which is an important aspect of client plugin bom remover.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-bom-remover.html", "title": "Client Plugin BOM remover", "description": "This page covers the Ktor client BOM remover plugin, its usage, and how to add it as a dependency.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:54:05", "type": "code_examples", "page_metadata": {"og:type": "website", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "BOM remover | Ktor Documentation", "og:title": "BOM remover | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-bom-remover.html", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "og:description": "", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bom-remover.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "BOM remover | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "BOM remover | Ktor", "built-on": "2025-02-26T14:01:03.942450306", "language": "en-US", "scrapeId": "8ff7fe2f-cd43-4a19-944e-75072f7ac601", "sourceURL": "https://ktor.io/docs/client-bom-remover.html", "url": "https://ktor.io/docs/client-bom-remover.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin BOM remover in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen removing the BOM, Ktor does not change the Content-Length header, which retains the length of the initial response.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-bom-remover.html", "title": "Client Plugin BOM remover", "description": "This page covers the Ktor client BOM remover plugin, its usage, and how to add it as a dependency.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 04:54:05", "type": "best_practices", "page_metadata": {"og:type": "website", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "BOM remover | Ktor Documentation", "og:title": "BOM remover | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-bom-remover.html", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "ogLocale": "en_US", "og:description": "", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bom-remover.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "BOM remover | Ktor", "twitter:site": "@JetBrainsKtor", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "BOM remover | Ktor", "built-on": "2025-02-26T14:01:03.942450306", "language": "en-US", "scrapeId": "8ff7fe2f-cd43-4a19-944e-75072f7ac601", "sourceURL": "https://ktor.io/docs/client-bom-remover.html", "url": "https://ktor.io/docs/client-bom-remover.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client engines is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client engines in ktor.\n\n# Client engines\n\nThe Ktor HTTP client can be used on different platforms, including JVM, Android, JavaScript, and Native. A specific platform may require a specific engine that processes network requests.Here's a quick rundown of what this is about:\n\n## Requirements and limitations\n\n### Supported platforms\n\nThe table below lists platforms supported by each engine:\n\n| Engine | Platforms |\n| --- | --- |\n| Apache | JVM |\n| Java | JVM |\n| Jetty | JVM |\n| Android | JVM, Android |\n| OkHttp | JVM, Android |\n| Darwin | Native |\n| WinHttp | Native |\n| Curl | Native |\n| CIO | JVM, Android, Native |\n| Js | JavaScript |\n\n### Supported Android/Java versions\n\nClient engines targeting JVM or both JVM and Android support the following Android/Java versions:\n\n| Engine | Android version | Java version |\n| --- | --- | --- |\n| Apache |  | 8+ |\n| Java |  | 11+ |\n| Jetty |  | 11+ |\n| CIO | 7.0+ * | 8+ |\n| Android | 1.x+ | 8+ |\n| OkHttp | 5.0+ | 8+ |\n\n\\* To use the CIO engine on older Android versions, you need to enable Java 8 API desugaring.\n\n### Limitations\n\nThe table below shows whether a specific engine supports HTTP/2 and WebSockets:\n\n| Engine | HTTP/2 | WebSockets |\n| --- | --- | --- |\n| Apache | ✅️ (for Apache5) | ✖️ |\n| Java | ✅ | ✅️ |\n| Jetty | ✅ | ✖️ |\n| CIO | ✖️ | ✅ |\n| Android | ✖️ | ✖️ |\n| OkHttp | ✅ | ✅ |\n| Js | ✅ | ✅ |\n| Darwin | ✅ | ✅ |\n| WinHttp | ✅ | ✅ |\n| Curl | ✅ | ✖️ |\n\nYou also need to consider the following limitations that affect general client configuration and using of specific plugins:\n\n- If an engine supports HTTP/2, you can enable it by customizing the engine configuration (see an example for the Java engine).\n- To configure SSL in the Ktor client, you need to customize the configuration of a selected engine.\n- Some engines don't support proxy.\n- The Logging plugin provides different logger types for different platforms.\n- The HttpTimeout plugin has some limitations for specific engines.\n\n## Add an engine dependency\n\nApart from the ktor-client-core artifact, the Ktor client requires adding a specific dependency for each engine. For each of the supported platforms, you can see the available engines and required dependencies in a corresponding section:\n\n- JVM\n- JVM and Android\n- JavaScript\n- Native\n\n> ### tip\n>\n> For different engines, Ktor provides platform-specific artifacts with suffixes such as -jvm or -js, for example, ktor-client-cio-jvm. Gradle resolves artifacts appropriate for a given platform while Maven doesn't support this capability. This means that for Maven, you need to add a platform-specific suffix manually.\n\n## Create a client with a specified engine\n\nTo create the HTTP client with a specific engine, pass an engine class as an argument to the HttpClient constructor. For example, you can create a client with the CIO engine as follows:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO)\n```\n\n### Default engine\n\nIf you call the HttpClient constructor without an argument, the client will choose an engine automatically depending on the artifacts added in a build script.\n\n```\nimport io.ktor.client.*\n\nval client = HttpClient()\n```\n\nThis can be useful for multiplatform projects. For example, for a project targeting both Android and iOS, you can add the Android dependency to the androidMain source set and the Darwin dependency to the iosMain source set. The necessary dependency will be selected at compile time.\n\n## Configure an engine\n\nYou can configure an engine using the engine method. All engines share several common properties exposed by HttpClientEngineConfig, for example:\n\n```\nHttpClient() {\n    engine {\n        // this: HttpClientEngineConfig\n        threadsCount = 4\n        pipelining = true\n    }\n}\n```\n\nTo learn how to configure a specific engine, see a corresponding section below.\n\n## JVM\n\nIn this section, we'll take a look at engines available for JVM.\n\n### Apache\n\nThe Apache engine supports HTTP/1.1 and provides multiple configuration options. You can also use the Apache5 engine if you need HTTP/2 support, which has HTTP/2 enabled by default.\n\n1. Add the ktor-client-apache5 or ktor-client-apache dependency:\n\n```\nimplementation(\"io.ktor:ktor-client-apache5:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-client-apache5:$ktor_version\"\n```\n\n```\n<dependency>\n       <groupId>io.ktor</groupId>\n       <artifactId>ktor-client-apache5-jvm</artifactId>\n       <version>${ktor_version}</version>\n</dependency>\n```\n\n2. Pass the Apache5/ Apache class as an argument to the HttpClient constructor:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.apache5.*\n\nval client = HttpClient(Apache5)\n```\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.apache.*\n\nval client = HttpClient(Apache)\n```\n\n3. To configure an engine, pass settings exposed by Apache5EngineConfig/ ApacheEngineConfig to the engine method:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.apache5.*\nimport org.apache.hc.core5.http.*\n\nval client = HttpClient(Apache5) {\n       engine {\n           // this: Apache5EngineConfig\n           followRedirects = true\n           socketTimeout = 10_000\n           connectTimeout = 10_000\n           connectionRequestTimeout = 20_000\n           customizeClient {\n               // this: HttpAsyncClientBuilder\n               setProxy(HttpHost(\"127.0.0.1\", 8080))\n               // ...\n           }\n           customizeRequest {\n               // this: RequestConfig.Builder\n           }\n       }\n}\n```\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.apache.*\nimport org.apache.http.HttpHost\n\nval client = HttpClient(Apache) {\n       engine {\n           // this: ApacheEngineConfig\n           followRedirects = true\n           socketTimeout = 10_000\n           connectTimeout = 10_000\n           connectionRequestTimeout = 20_000\n           customizeClient {\n               // this: HttpAsyncClientBuilder\n               setProxy(HttpHost(\"127.0.0.1\", 8080))\n               setMaxConnTotal(1000)\n               setMaxConnPerRoute(100)\n               // ...\n           }\n           customizeRequest {\n               // this: RequestConfig.Builder\n           }\n       }\n}\n\n\n## Java\n\nThe Java engine uses the Java HTTP Client introduced in Java 11. To use it, follow the steps below:\n\n1. Add the ktor-client-java dependency:\n\n```\nimplementation(\"io.ktor:ktor-client-java:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-client-java:$ktor_version\"\n```\n\n```\n<dependency>\n       <groupId>io.ktor</groupId>\n       <artifactId>ktor-client-java-jvm</artifactId>\n       <version>${ktor_version}</version>\n</dependency>\n```\n\n2. Pass the Java class as an argument to the HttpClient constructor:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.java.*\n\nval client = HttpClient(Java)\n```\n\n3. To configure an engine, pass settings exposed by JavaHttpConfig to the engine method:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.*\nimport io.ktor.client.engine.java.*\n\nval client = HttpClient(Java) {\n       engine {\n           // this: JavaHttpConfig\n           threadsCount = 8\n           pipelining = true\n           proxy = ProxyBuilder.http(\"http://proxy-server.com/\")\n           protocolVersion = java.net.http.HttpClient.Version.HTTP_2\n       }\n}\n```},{\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/http-client-engines.html", "title": "Client engines", "description": "The Ktor HTTP client can be used on different platforms, including JVM, Android, JavaScript, and Native. A specific platform may require a specific engine that processes network requests.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 04:58:55", "type": "overview", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.957598506", "og:title": "Client engines | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:title": "Client engines | Ktor", "ogTitle": "Client engines | Ktor", "og:description": "", "title": "Client engines | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "scrapeId": "295956c8-895c-46d3-ac20-e207dfc63f39", "sourceURL": "https://ktor.io/docs/http-client-engines.html", "url": "https://ktor.io/docs/client-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I requirements and limitations in ktor?\n\nAssistant: To requirements and limitations in ktor, here's what you do:\n### Supported platforms\n\nThe table below lists platforms supported by each engine:\n\n| Engine | Platforms |\n| --- | --- |\n| Apache | JVM |\n| Java | JVM |\n| Jetty | JVM |\n| Android | JVM, Android |\n| OkHttp | JVM, Android |\n| Darwin | Native |\n| WinHttp | Native |\n| Curl | Native |\n| CIO | JVM, Android, Native |\n| Js | JavaScript |\n\n### Supported Android/Java versions\n\nClient engines targeting JVM or both JVM and Android support the following Android/Java versions:\n\n| Engine | Android version | Java version |\n| --- | --- | --- |\n| Apache |  | 8+ |\n| Java |  | 11+ |\n| Jetty |  | 11+ |\n| CIO | 7.0+ * | 8+ |\n| Android | 1.x+ | 8+ |\n| OkHttp | 5.0+ | 8+ |\n\n\\* To use the CIO engine on older Android versions, you need to enable Java 8 API desugaring.\n\n### Limitations\n\nThe table below shows whether a specific engine supports HTTP/2 and WebSockets:\n\n| Engine | HTTP/2 | WebSockets |\n| --- | --- | --- |\n| Apache | ✅️ (for Apache5) | ✖️ |\n| Java | ✅ | ✅️ |\n| Jetty | ✅ | ✖️ |\n| CIO | ✖️ | ✅ |\n| Android | ✖️ | ✖️ |\n| OkHttp | ✅ | ✅ |\n| Js | ✅ | ✅ |\n| Darwin | ✅ | ✅ |\n| WinHttp | ✅ | ✅ |\n| Curl | ✅ | ✖️ |\n\nYou also need to consider the following limitations that affect general client configuration and using of specific plugins:\n\n- If an engine supports HTTP/2, you can enable it by customizing the engine configuration (see an example for the Java engine).\n- To configure SSL in the Ktor client, you need to customize the configuration of a selected engine.\n- Some engines don't support proxy.\n- The Logging plugin provides different logger types for different platforms.\n- The HttpTimeout plugin has some limitations for specific engines..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/http-client-engines.html", "title": "Client engines", "description": "The Ktor HTTP client can be used on different platforms, including JVM, Android, JavaScript, and Native. A specific platform may require a specific engine that processes network requests.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 04:58:55", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.957598506", "og:title": "Client engines | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:title": "Client engines | Ktor", "ogTitle": "Client engines | Ktor", "og:description": "", "title": "Client engines | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "scrapeId": "295956c8-895c-46d3-ac20-e207dfc63f39", "sourceURL": "https://ktor.io/docs/http-client-engines.html", "url": "https://ktor.io/docs/client-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add an engine dependency in ktor?\n\nAssistant: To add an engine dependency in ktor, here's what you do:\nApart from the ktor-client-core artifact, the Ktor client requires adding a specific dependency for each engine. For each of the supported platforms, you can see the available engines and required dependencies in a corresponding section:\n\n- JVM\n- JVM and Android\n- JavaScript\n- Native\n\n> ### tip\n>\n> For different engines, Ktor provides platform-specific artifacts with suffixes such as -jvm or -js, for example, ktor-client-cio-jvm. Gradle resolves artifacts appropriate for a given platform while Maven doesn't support this capability. This means that for Maven, you need to add a platform-specific suffix manually..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/http-client-engines.html", "title": "Client engines", "description": "The Ktor HTTP client can be used on different platforms, including JVM, Android, JavaScript, and Native. A specific platform may require a specific engine that processes network requests.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 04:58:55", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.957598506", "og:title": "Client engines | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:title": "Client engines | Ktor", "ogTitle": "Client engines | Ktor", "og:description": "", "title": "Client engines | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "scrapeId": "295956c8-895c-46d3-ac20-e207dfc63f39", "sourceURL": "https://ktor.io/docs/http-client-engines.html", "url": "https://ktor.io/docs/client-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a client with a specified engine in ktor?\n\nAssistant: To create a client with a specified engine in ktor, here's what you do:\nTo create the HTTP client with a specific engine, pass an engine class as an argument to the HttpClient constructor. For example, you can create a client with the CIO engine as follows:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO)\n```\n\n### Default engine\n\nIf you call the HttpClient constructor without an argument, the client will choose an engine automatically depending on the artifacts added in a build script.\n\n```\nimport io.ktor.client.*\n\nval client = HttpClient()\n```\n\nThis can be useful for multiplatform projects. For example, for a project targeting both Android and iOS, you can add the Android dependency to the androidMain source set and the Darwin dependency to the iosMain source set. The necessary dependency will be selected at compile time..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/http-client-engines.html", "title": "Client engines", "description": "The Ktor HTTP client can be used on different platforms, including JVM, Android, JavaScript, and Native. A specific platform may require a specific engine that processes network requests.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 04:58:55", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.957598506", "og:title": "Client engines | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:title": "Client engines | Ktor", "ogTitle": "Client engines | Ktor", "og:description": "", "title": "Client engines | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "scrapeId": "295956c8-895c-46d3-ac20-e207dfc63f39", "sourceURL": "https://ktor.io/docs/http-client-engines.html", "url": "https://ktor.io/docs/client-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure an engine in ktor?\n\nAssistant: To configure an engine in ktor, here's what you do:\nYou can configure an engine using the engine method. All engines share several common properties exposed by HttpClientEngineConfig, for example:\n\n```\nHttpClient() {\n    engine {\n        // this: HttpClientEngineConfig\n        threadsCount = 4\n        pipelining = true\n    }\n}\n```\n\nTo learn how to configure a specific engine, see a corresponding section below..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/http-client-engines.html", "title": "Client engines", "description": "The Ktor HTTP client can be used on different platforms, including JVM, Android, JavaScript, and Native. A specific platform may require a specific engine that processes network requests.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 04:58:55", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.957598506", "og:title": "Client engines | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:title": "Client engines | Ktor", "ogTitle": "Client engines | Ktor", "og:description": "", "title": "Client engines | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "scrapeId": "295956c8-895c-46d3-ac20-e207dfc63f39", "sourceURL": "https://ktor.io/docs/http-client-engines.html", "url": "https://ktor.io/docs/client-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I jvm in ktor?\n\nAssistant: To jvm in ktor, here's what you do:\nIn this section, we'll take a look at engines available for JVM.\n\n### Apache\n\nThe Apache engine supports HTTP/1.1 and provides multiple configuration options. You can also use the Apache5 engine if you need HTTP/2 support, which has HTTP/2 enabled by default.\n\n1. Add the ktor-client-apache5 or ktor-client-apache dependency:\n\n```\nimplementation(\"io.ktor:ktor-client-apache5:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-client-apache5:$ktor_version\"\n```\n\n```\n<dependency>\n       <groupId>io.ktor</groupId>\n       <artifactId>ktor-client-apache5-jvm</artifactId>\n       <version>${ktor_version}</version>\n</dependency>\n```\n\n2. Pass the Apache5/ Apache class as an argument to the HttpClient constructor:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.apache5.*\n\nval client = HttpClient(Apache5)\n```\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.apache.*\n\nval client = HttpClient(Apache)\n```\n\n3. To configure an engine, pass settings exposed by Apache5EngineConfig/ ApacheEngineConfig to the engine method:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.apache5.*\nimport org.apache.hc.core5.http.*\n\nval client = HttpClient(Apache5) {\n       engine {\n           // this: Apache5EngineConfig\n           followRedirects = true\n           socketTimeout = 10_000\n           connectTimeout = 10_000\n           connectionRequestTimeout = 20_000\n           customizeClient {\n               // this: HttpAsyncClientBuilder\n               setProxy(HttpHost(\"127.0.0.1\", 8080))\n               // ...\n           }\n           customizeRequest {\n               // this: RequestConfig.Builder\n           }\n       }\n}\n```\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.apache.*\nimport org.apache.http.HttpHost\n\nval client = HttpClient(Apache) {\n       engine {\n           // this: ApacheEngineConfig\n           followRedirects = true\n           socketTimeout = 10_000\n           connectTimeout = 10_000\n           connectionRequestTimeout = 20_000\n           customizeClient {\n               // this: HttpAsyncClientBuilder\n               setProxy(HttpHost(\"127.0.0.1\", 8080))\n               setMaxConnTotal(1000)\n               setMaxConnPerRoute(100)\n               // ...\n           }\n           customizeRequest {\n               // this: RequestConfig.Builder\n           }\n       }\n}\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/http-client-engines.html", "title": "Client engines", "description": "The Ktor HTTP client can be used on different platforms, including JVM, Android, JavaScript, and Native. A specific platform may require a specific engine that processes network requests.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 04:58:55", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.957598506", "og:title": "Client engines | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:title": "Client engines | Ktor", "ogTitle": "Client engines | Ktor", "og:description": "", "title": "Client engines | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "scrapeId": "295956c8-895c-46d3-ac20-e207dfc63f39", "sourceURL": "https://ktor.io/docs/http-client-engines.html", "url": "https://ktor.io/docs/client-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I java in ktor?\n\nAssistant: To java in ktor, here's what you do:\nThe Java engine uses the Java HTTP Client introduced in Java 11. To use it, follow the steps below:\n\n1. Add the ktor-client-java dependency:\n\n```\nimplementation(\"io.ktor:ktor-client-java:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-client-java:$ktor_version\"\n```\n\n```\n<dependency>\n       <groupId>io.ktor</groupId>\n       <artifactId>ktor-client-java-jvm</artifactId>\n       <version>${ktor_version}</version>\n</dependency>\n```\n\n2. Pass the Java class as an argument to the HttpClient constructor:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.java.*\n\nval client = HttpClient(Java)\n```\n\n3. To configure an engine, pass settings exposed by JavaHttpConfig to the engine method:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.*\nimport io.ktor.client.engine.java.*\n\nval client = HttpClient(Java) {\n       engine {\n           // this: JavaHttpConfig\n           threadsCount = 8\n           pipelining = true\n           proxy = ProxyBuilder.http(\"http://proxy-server.com/\")\n           protocolVersion = java.net.http.HttpClient.Version.HTTP_2\n       }\n}\n```},{.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/http-client-engines.html", "title": "Client engines", "description": "The Ktor HTTP client can be used on different platforms, including JVM, Android, JavaScript, and Native. A specific platform may require a specific engine that processes network requests.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 04:58:55", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.957598506", "og:title": "Client engines | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:title": "Client engines | Ktor", "ogTitle": "Client engines | Ktor", "og:description": "", "title": "Client engines | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/client-engines.html", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "ogDescription": "", "ogSiteName": "Ktor Help", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "build-number": "707", "scrapeId": "295956c8-895c-46d3-ac20-e207dfc63f39", "sourceURL": "https://ktor.io/docs/http-client-engines.html", "url": "https://ktor.io/docs/client-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Application structure is in ktor?\n\nAssistant: Sure, I'd be happy to explain Application structure in ktor.\n\n# Application structure\n\nThis section examines the different options available for structuring Ktor applications, highlighting the flexibility Ktor offers compared to other server-side frameworks.Here's a quick rundown of what this is about:\n\n## Group by file\n\nOne approach is to group routes that are related in a single file. If our application is dealing with Customers and Orders for instance, this would mean having a `CustomerRoutes.kt` and an `OrderRoutes.kt` file:\n\nCustomerRoutes.kt\n\nOrderRoutes.kt\n\n```kotlin\nfun Route.customerByIdRoute() {\n    get(\"/customer/{id}\") {\n\n    }\n}\n\nfun Route.createCustomerRoute() {\n    post(\"/customer\") {\n\n    }\n}\n```\n\n```kotlin\nfun Route.getOrderRoute() {\n    get(\"/order/{id}\") {\n\n    }\n}\n\nfun Route.totalizeOrderRoute() {\n    get(\"/order/{id}/total\") {\n\n    }\n}\n```\n\nWhat would happen with sub-routes? Such as order/shipment for instance? It somewhat depends on what we understand by this URL. If we're talking about these as resources (which they are), shipment itself could therefore be a resource, and could easily map to another file `ShipmentRoutes.kt`.\n\n## Group routing definitions\n\nOne advantage of this approach is that we can also group the routing definitions, and potentially functionality, per file. For instance, let's assume that we follow the group per file layout as above. Even though routes are in a different file, we need to declare them at the Application level. As such, our app would look something like the following:\n\n```kotlin\nrouting {\n    customerRouting()\n    listOrdersRoute()\n    getOrderRoute()\n    totalizeOrderRoute()\n}\n```\n\nIf we have tons of routes in our app, this could quickly become long and cumbersome. Since we have however routes grouped by file, we can take advantage of this and define the routing in each file also. For this we could create an extension for [Application](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application/index.html) and define the routes:\n\nCustomerRoutes.kt\n\nOrderRoutes.kt\n\n```kotlin\nfun Application.customerRoutes() {\n    routing {\n        listCustomersRoute()\n        customerByIdRoute()\n        createCustomerRoute()\n        deleteCustomerRoute()\n    }\n}\n```\n\n```kotlin\nfun Application.orderRoutes() {\n    routing {\n        listOrdersRoute()\n        getOrderRoute()\n        totalizeOrderRoute()\n    }\n}\n```\n\nNow in our actual `Application.module` startup, we'd simply call these functions, without the need for the `routing` block:\n\n```kotlin\nfun Application.module() {\n    // Init....\n    customerRoutes()\n    orderRoutes()\n}\n```\n\nWe can even take this one step further - install plugins per application, as needed, especially for instance when we're using the Authentication plugin which depends on specific routes. One important note however is that Ktor will detect if a plugin has been installed twice by throwing an `DuplicateApplicationPluginException` exception.\n\n## A note on using objects\n\nUsing objects to group routing functions doesn't provide any kind of performance or memory benefits, as top-level functions in Ktor are instantiated a single time. While it can provide some sort of cohesive structure where we may want to share common functionality, it isn't necessary to use objects in case we're worried about any kind of overhead.\n\n## Group by folders\n\nHaving everything in a single file can become a bit cumbersome as the file grows. What we could do instead is use folders (i.e. packages) to define different areas and then have each route in its own file.\n\n![Grouping by folders](https://ktor.io/docs/images/ktor-routing-1.png)\n\nWhile this does provide the advantage of a nice layout when it comes to routes and the individual actions, it could certainly lead to “package overload”, and potentially having tons of filenames named the same, making navigation somewhat more difficult. On the other hand, as we'll see in the next example, we could also merely prefix each file with area (i.e. `CustomerCreate.kt` for instance).\n\n## Group by features\n\nFrameworks such as ASP.NET MVC or Ruby on Rails, have the concept of structuring applications using three folders - Model, View, and Controllers (Routes).\n\n![Model View Controller](https://ktor.io/docs/images/ktor-routing-2.png)\n\nThis isn't far-fetched with the schema we have above which is grouping routes in their own packages/files, our views in the `resources` folder in the case of Ktor, and of course, nothing prevents us from having a package model where we place any data we want to display or respond to HTTP endpoints with.\n\nWhile this approach may work and is similar to other frameworks, some would argue that it would make more sense to group things by features, i.e. instead of having the project distributed by routes, models and views, have these groups by specific behavior/features, i.e. `OrderProcessPayment`, `CustomerAddressChange`, etc.\n\n![Feature grouping](https://ktor.io/docs/images/ktor-routing-3.png)\n\nWith many frameworks, this kind of organization of code isn't viable without seriously hacking the underlying conventions. However, with Ktor, given how flexible it is, in principle it shouldn't be a problem. With one caveat - when we're using a [template engine](https://ktor.io/docs/server-templating.html), resources could be an issue. But let's see how we could solve this.\n\n## Template Engine Considerations\n\nHow this problem is solved very much depends on what is used for Views. If our application is merely an HTTP backend, and we're using client-side technology, then usually all rendering is client-side. If we're using Kotlinx.HTML, then once again it's not an issue as the page can be generated from any Kotlin file placed anywhere.\n\nThe issue arises more when we're using a templating engine such as FreeMarker. These are peculiar in how and where template files should be located. Fortunately, some of them offer flexibility in how templates are loaded.\n\nFor instance, with FreeMarker, we can use a MultiTemplateLoader and then have templates loaded from different locations:\n\n```kotlin\ninstall(FreeMarker) {\n    val customerTemplates = FileTemplateLoader(File(\"./customer/changeAddress\"))\n    val loaders = arrayOf<TemplateLoader>(customerTemplates)\n    templateLoader = MultiTemplateLoader(loaders)\n}\n```\n\nObviously this code isn't ideal as it uses relative paths amongst other things, but it's not hard to see how we could actually have this loop through folders and load templates, or even have a custom build action that copies views to our `resources` folder prior to execution. There are quite a number of ways to solve the issue.\n\nThe benefit of this approach is that we can group everything related to the same functionality in a single location, by feature, as opposed to the technical/infrastructure aspect of it.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-application-structure.html", "title": "Application structure", "description": "This section examines the different options available for structuring Ktor applications, highlighting the flexibility Ktor offers compared to other server-side frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:02:40", "type": "overview", "page_metadata": {"language": "en-US", "og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:site_name": "Ktor Help", "title": "Application structure | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Application structure | Ktor", "ogTitle": "Application structure | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-application-structure.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Application structure | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-application-structure.html", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:06.424689198", "og:type": "website", "twitter:description": "", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "47a512e7-940b-4137-bd22-85e02ff92ae8", "sourceURL": "https://ktor.io/docs/server-application-structure.html", "url": "https://ktor.io/docs/server-application-structure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I group by file in ktor?\n\nAssistant: To group by file in ktor, here's what you do:\nOne approach is to group routes that are related in a single file. If our application is dealing with Customers and Orders for instance, this would mean having a `CustomerRoutes.kt` and an `OrderRoutes.kt` file:\n\nCustomerRoutes.kt\n\nOrderRoutes.kt\n\n```kotlin\nfun Route.customerByIdRoute() {\n    get(\"/customer/{id}\") {\n\n    }\n}\n\nfun Route.createCustomerRoute() {\n    post(\"/customer\") {\n\n    }\n}\n```\n\n```kotlin\nfun Route.getOrderRoute() {\n    get(\"/order/{id}\") {\n\n    }\n}\n\nfun Route.totalizeOrderRoute() {\n    get(\"/order/{id}/total\") {\n\n    }\n}\n```\n\nWhat would happen with sub-routes? Such as order/shipment for instance? It somewhat depends on what we understand by this URL. If we're talking about these as resources (which they are), shipment itself could therefore be a resource, and could easily map to another file `ShipmentRoutes.kt`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-application-structure.html", "title": "Application structure", "description": "This section examines the different options available for structuring Ktor applications, highlighting the flexibility Ktor offers compared to other server-side frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:02:40", "type": "section_detail", "page_metadata": {"language": "en-US", "og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:site_name": "Ktor Help", "title": "Application structure | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Application structure | Ktor", "ogTitle": "Application structure | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-application-structure.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Application structure | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-application-structure.html", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:06.424689198", "og:type": "website", "twitter:description": "", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "47a512e7-940b-4137-bd22-85e02ff92ae8", "sourceURL": "https://ktor.io/docs/server-application-structure.html", "url": "https://ktor.io/docs/server-application-structure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I group routing definitions in ktor?\n\nAssistant: To group routing definitions in ktor, here's what you do:\nOne advantage of this approach is that we can also group the routing definitions, and potentially functionality, per file. For instance, let's assume that we follow the group per file layout as above. Even though routes are in a different file, we need to declare them at the Application level. As such, our app would look something like the following:\n\n```kotlin\nrouting {\n    customerRouting()\n    listOrdersRoute()\n    getOrderRoute()\n    totalizeOrderRoute()\n}\n```\n\nIf we have tons of routes in our app, this could quickly become long and cumbersome. Since we have however routes grouped by file, we can take advantage of this and define the routing in each file also. For this we could create an extension for [Application](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application/index.html) and define the routes:\n\nCustomerRoutes.kt\n\nOrderRoutes.kt\n\n```kotlin\nfun Application.customerRoutes() {\n    routing {\n        listCustomersRoute()\n        customerByIdRoute()\n        createCustomerRoute()\n        deleteCustomerRoute()\n    }\n}\n```\n\n```kotlin\nfun Application.orderRoutes() {\n    routing {\n        listOrdersRoute()\n        getOrderRoute()\n        totalizeOrderRoute()\n    }\n}\n```\n\nNow in our actual `Application.module` startup, we'd simply call these functions, without the need for the `routing` block:\n\n```kotlin\nfun Application.module() {\n    // Init....\n    customerRoutes()\n    orderRoutes()\n}\n```\n\nWe can even take this one step further - install plugins per application, as needed, especially for instance when we're using the Authentication plugin which depends on specific routes. One important note however is that Ktor will detect if a plugin has been installed twice by throwing an `DuplicateApplicationPluginException` exception..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-application-structure.html", "title": "Application structure", "description": "This section examines the different options available for structuring Ktor applications, highlighting the flexibility Ktor offers compared to other server-side frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:02:40", "type": "section_detail", "page_metadata": {"language": "en-US", "og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:site_name": "Ktor Help", "title": "Application structure | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Application structure | Ktor", "ogTitle": "Application structure | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-application-structure.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Application structure | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-application-structure.html", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:06.424689198", "og:type": "website", "twitter:description": "", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "47a512e7-940b-4137-bd22-85e02ff92ae8", "sourceURL": "https://ktor.io/docs/server-application-structure.html", "url": "https://ktor.io/docs/server-application-structure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I a note on using objects in ktor?\n\nAssistant: To a note on using objects in ktor, here's what you do:\nUsing objects to group routing functions doesn't provide any kind of performance or memory benefits, as top-level functions in Ktor are instantiated a single time. While it can provide some sort of cohesive structure where we may want to share common functionality, it isn't necessary to use objects in case we're worried about any kind of overhead..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-application-structure.html", "title": "Application structure", "description": "This section examines the different options available for structuring Ktor applications, highlighting the flexibility Ktor offers compared to other server-side frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:02:40", "type": "section_detail", "page_metadata": {"language": "en-US", "og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:site_name": "Ktor Help", "title": "Application structure | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Application structure | Ktor", "ogTitle": "Application structure | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-application-structure.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Application structure | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-application-structure.html", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:06.424689198", "og:type": "website", "twitter:description": "", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "47a512e7-940b-4137-bd22-85e02ff92ae8", "sourceURL": "https://ktor.io/docs/server-application-structure.html", "url": "https://ktor.io/docs/server-application-structure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I group by folders in ktor?\n\nAssistant: To group by folders in ktor, here's what you do:\nHaving everything in a single file can become a bit cumbersome as the file grows. What we could do instead is use folders (i.e. packages) to define different areas and then have each route in its own file.\n\n![Grouping by folders](https://ktor.io/docs/images/ktor-routing-1.png)\n\nWhile this does provide the advantage of a nice layout when it comes to routes and the individual actions, it could certainly lead to “package overload”, and potentially having tons of filenames named the same, making navigation somewhat more difficult. On the other hand, as we'll see in the next example, we could also merely prefix each file with area (i.e. `CustomerCreate.kt` for instance)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-application-structure.html", "title": "Application structure", "description": "This section examines the different options available for structuring Ktor applications, highlighting the flexibility Ktor offers compared to other server-side frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:02:40", "type": "section_detail", "page_metadata": {"language": "en-US", "og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:site_name": "Ktor Help", "title": "Application structure | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Application structure | Ktor", "ogTitle": "Application structure | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-application-structure.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Application structure | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-application-structure.html", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:06.424689198", "og:type": "website", "twitter:description": "", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "47a512e7-940b-4137-bd22-85e02ff92ae8", "sourceURL": "https://ktor.io/docs/server-application-structure.html", "url": "https://ktor.io/docs/server-application-structure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I group by features in ktor?\n\nAssistant: To group by features in ktor, here's what you do:\nFrameworks such as ASP.NET MVC or Ruby on Rails, have the concept of structuring applications using three folders - Model, View, and Controllers (Routes).\n\n![Model View Controller](https://ktor.io/docs/images/ktor-routing-2.png)\n\nThis isn't far-fetched with the schema we have above which is grouping routes in their own packages/files, our views in the `resources` folder in the case of Ktor, and of course, nothing prevents us from having a package model where we place any data we want to display or respond to HTTP endpoints with.\n\nWhile this approach may work and is similar to other frameworks, some would argue that it would make more sense to group things by features, i.e. instead of having the project distributed by routes, models and views, have these groups by specific behavior/features, i.e. `OrderProcessPayment`, `CustomerAddressChange`, etc.\n\n![Feature grouping](https://ktor.io/docs/images/ktor-routing-3.png)\n\nWith many frameworks, this kind of organization of code isn't viable without seriously hacking the underlying conventions. However, with Ktor, given how flexible it is, in principle it shouldn't be a problem. With one caveat - when we're using a [template engine](https://ktor.io/docs/server-templating.html), resources could be an issue. But let's see how we could solve this..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-application-structure.html", "title": "Application structure", "description": "This section examines the different options available for structuring Ktor applications, highlighting the flexibility Ktor offers compared to other server-side frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:02:40", "type": "section_detail", "page_metadata": {"language": "en-US", "og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:site_name": "Ktor Help", "title": "Application structure | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Application structure | Ktor", "ogTitle": "Application structure | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-application-structure.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Application structure | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-application-structure.html", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:06.424689198", "og:type": "website", "twitter:description": "", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "47a512e7-940b-4137-bd22-85e02ff92ae8", "sourceURL": "https://ktor.io/docs/server-application-structure.html", "url": "https://ktor.io/docs/server-application-structure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I template engine considerations in ktor?\n\nAssistant: To template engine considerations in ktor, here's what you do:\nHow this problem is solved very much depends on what is used for Views. If our application is merely an HTTP backend, and we're using client-side technology, then usually all rendering is client-side. If we're using Kotlinx.HTML, then once again it's not an issue as the page can be generated from any Kotlin file placed anywhere.\n\nThe issue arises more when we're using a templating engine such as FreeMarker. These are peculiar in how and where template files should be located. Fortunately, some of them offer flexibility in how templates are loaded.\n\nFor instance, with FreeMarker, we can use a MultiTemplateLoader and then have templates loaded from different locations:\n\n```kotlin\ninstall(FreeMarker) {\n    val customerTemplates = FileTemplateLoader(File(\"./customer/changeAddress\"))\n    val loaders = arrayOf<TemplateLoader>(customerTemplates)\n    templateLoader = MultiTemplateLoader(loaders)\n}\n```\n\nObviously this code isn't ideal as it uses relative paths amongst other things, but it's not hard to see how we could actually have this loop through folders and load templates, or even have a custom build action that copies views to our `resources` folder prior to execution. There are quite a number of ways to solve the issue.\n\nThe benefit of this approach is that we can group everything related to the same functionality in a single location, by feature, as opposed to the technical/infrastructure aspect of it..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-application-structure.html", "title": "Application structure", "description": "This section examines the different options available for structuring Ktor applications, highlighting the flexibility Ktor offers compared to other server-side frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:02:40", "type": "section_detail", "page_metadata": {"language": "en-US", "og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:site_name": "Ktor Help", "title": "Application structure | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Application structure | Ktor", "ogTitle": "Application structure | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-application-structure.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Application structure | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-application-structure.html", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:06.424689198", "og:type": "website", "twitter:description": "", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "47a512e7-940b-4137-bd22-85e02ff92ae8", "sourceURL": "https://ktor.io/docs/server-application-structure.html", "url": "https://ktor.io/docs/server-application-structure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Application structure in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Customer Routes Example**:\n\n```yaml\n```kotlin\nfun Route.customerByIdRoute() {\n    get(\"/customer/{id}\") {\n\n    }\n}\n\nfun Route.createCustomerRoute() {\n    post(\"/customer\") {\n\n    }\n}\n```\n```\n\nThis snippet shows you how to customer routes example, which is an important aspect of application structure.\n\n**Order Routes Example**:\n\n```yaml\n```kotlin\nfun Route.getOrderRoute() {\n    get(\"/order/{id}\") {\n\n    }\n}\n\nfun Route.totalizeOrderRoute() {\n    get(\"/order/{id}/total\") {\n\n    }\n}\n```\n```\n\nThis snippet shows you how to order routes example, which is an important aspect of application structure.\n\n**Application Module Example**:\n\n```yaml\n```kotlin\nfun Application.module() {\n    // Init....\n    customerRoutes()\n    orderRoutes()\n}\n```\n```\n\nThis snippet shows you how to application module example, which is an important aspect of application structure.\n\n**FreeMarker Template Loader Example**:\n\n```yaml\n```kotlin\ninstall(FreeMarker) {\n    val customerTemplates = FileTemplateLoader(File(\"./customer/changeAddress\"))\n    val loaders = arrayOf<TemplateLoader>(customerTemplates)\n    templateLoader = MultiTemplateLoader(loaders)\n}\n```\n```\n\nThis snippet shows you how to freemarker template loader example, which is an important aspect of application structure.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-application-structure.html", "title": "Application structure", "description": "This section examines the different options available for structuring Ktor applications, highlighting the flexibility Ktor offers compared to other server-side frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:02:40", "type": "code_examples", "page_metadata": {"language": "en-US", "og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:site_name": "Ktor Help", "title": "Application structure | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Application structure | Ktor", "ogTitle": "Application structure | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-application-structure.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Application structure | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-application-structure.html", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:06.424689198", "og:type": "website", "twitter:description": "", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "47a512e7-940b-4137-bd22-85e02ff92ae8", "sourceURL": "https://ktor.io/docs/server-application-structure.html", "url": "https://ktor.io/docs/server-application-structure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Application structure in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nGroup related routes in a single file for better organization.\n\nConsider grouping routing definitions and functionality per file to reduce clutter in the Application level.\n\nUsing objects to group routing functions does not provide performance benefits; use top-level functions instead.\n\nAvoid package overload by using folders wisely and prefixing filenames with area names when necessary.\n\nWhen using a templating engine, ensure templates are loaded from appropriate locations to avoid issues.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-application-structure.html", "title": "Application structure", "description": "This section examines the different options available for structuring Ktor applications, highlighting the flexibility Ktor offers compared to other server-side frameworks.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:02:40", "type": "best_practices", "page_metadata": {"language": "en-US", "og:description": "", "twitter:site": "@JetBrainsKtor", "build-number": "707", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "og:locale": "en_US", "og:site_name": "Ktor Help", "title": "Application structure | Ktor Documentation", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:title": "Application structure | Ktor", "ogTitle": "Application structure | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-application-structure.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Application structure | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-application-structure.html", "ogSiteName": "Ktor Help", "built-on": "2025-02-26T14:01:06.424689198", "og:type": "website", "twitter:description": "", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "47a512e7-940b-4137-bd22-85e02ff92ae8", "sourceURL": "https://ktor.io/docs/server-application-structure.html", "url": "https://ktor.io/docs/server-application-structure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Default headers is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Default headers in ktor.\n\n# Server Plugin Default headers\n\nThis page covers the DefaultHeaders plugin in Ktor, which adds standard headers to HTTP responses and allows customization of default headers.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\n`io.ktor:ktor-server-default-headers`\n\n## Native server support\n\n✅\n\n## Overview\n\nThe DefaultHeaders plugin adds the standard Server and Date headers into each response. Moreover, you can provide additional default headers and override the Server header.\n\n## Add dependencies\n\nTo use DefaultHeaders, you need to include the ktor-server-default-headers artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-default-headers:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-default-headers:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-default-headers-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install DefaultHeaders\n\nTo install the DefaultHeaders plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install DefaultHeaders...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\n**embeddedServer**\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.defaultheaders.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DefaultHeaders)\n        // ...\n    }.start(wait = true)\n}\n```\n\n**module**\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.defaultheaders.*\n// ...\nfun Application.module() {\n    install(DefaultHeaders)\n    // ...\n}\n```\n\nThe DefaultHeaders plugin can also be installed to specific routes. This might be useful if you need different DefaultHeaders configurations for different application resources.\n\n## Configure DefaultHeaders\n\n### Add additional headers\nTo customize a list of default headers, pass a desired header to install by using the header(name, value) function. The name parameter accepts an HttpHeaders value, for example:\n```\ninstall(DefaultHeaders) {\n    header(HttpHeaders.ETag, \"7c876b7e\")\n}\n```\n\nTo add a custom header, pass its name as a string value:\n```\ninstall(DefaultHeaders) {\n    header(\"Custom-Header\", \"Some value\")\n}\n```\n\n### Override headers\nTo override the Server header, use a corresponding HttpHeaders value:\n```\ninstall(DefaultHeaders) {\n    header(HttpHeaders.Server, \"Custom\")\n}\n```\n\nNote that the Date header is cached due to performance reasons and cannot be overridden by using DefaultHeaders.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-default-headers.html", "title": "Server Plugin Default headers", "description": "This page covers the DefaultHeaders plugin in Ktor, which adds standard headers to HTTP responses and allows customization of default headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:04:14", "type": "overview", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-default-headers.html", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-default-headers.html", "build-number": "707", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.86973277", "title": "Default headers | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Default headers | Ktor", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Default headers | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Default headers | Ktor", "og:site_name": "Ktor Help", "og:type": "website", "ogSiteName": "Ktor Help", "scrapeId": "51aabe97-4cde-465a-b511-dd033f58af58", "sourceURL": "https://ktor.io/docs/server-default-headers.html", "url": "https://ktor.io/docs/server-default-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\n`io.ktor:ktor-server-default-headers`.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-default-headers.html", "title": "Server Plugin Default headers", "description": "This page covers the DefaultHeaders plugin in Ktor, which adds standard headers to HTTP responses and allows customization of default headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:04:14", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-default-headers.html", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-default-headers.html", "build-number": "707", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.86973277", "title": "Default headers | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Default headers | Ktor", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Default headers | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Default headers | Ktor", "og:site_name": "Ktor Help", "og:type": "website", "ogSiteName": "Ktor Help", "scrapeId": "51aabe97-4cde-465a-b511-dd033f58af58", "sourceURL": "https://ktor.io/docs/server-default-headers.html", "url": "https://ktor.io/docs/server-default-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I native server support in ktor?\n\nAssistant: To native server support in ktor, here's what you do:\n✅.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-default-headers.html", "title": "Server Plugin Default headers", "description": "This page covers the DefaultHeaders plugin in Ktor, which adds standard headers to HTTP responses and allows customization of default headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:04:14", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-default-headers.html", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-default-headers.html", "build-number": "707", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.86973277", "title": "Default headers | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Default headers | Ktor", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Default headers | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Default headers | Ktor", "og:site_name": "Ktor Help", "og:type": "website", "ogSiteName": "Ktor Help", "scrapeId": "51aabe97-4cde-465a-b511-dd033f58af58", "sourceURL": "https://ktor.io/docs/server-default-headers.html", "url": "https://ktor.io/docs/server-default-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I overview in ktor?\n\nAssistant: To overview in ktor, here's what you do:\nThe DefaultHeaders plugin adds the standard Server and Date headers into each response. Moreover, you can provide additional default headers and override the Server header..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-default-headers.html", "title": "Server Plugin Default headers", "description": "This page covers the DefaultHeaders plugin in Ktor, which adds standard headers to HTTP responses and allows customization of default headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:04:14", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-default-headers.html", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-default-headers.html", "build-number": "707", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.86973277", "title": "Default headers | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Default headers | Ktor", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Default headers | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Default headers | Ktor", "og:site_name": "Ktor Help", "og:type": "website", "ogSiteName": "Ktor Help", "scrapeId": "51aabe97-4cde-465a-b511-dd033f58af58", "sourceURL": "https://ktor.io/docs/server-default-headers.html", "url": "https://ktor.io/docs/server-default-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use DefaultHeaders, you need to include the ktor-server-default-headers artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-default-headers:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-default-headers:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-default-headers-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-default-headers.html", "title": "Server Plugin Default headers", "description": "This page covers the DefaultHeaders plugin in Ktor, which adds standard headers to HTTP responses and allows customization of default headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:04:14", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-default-headers.html", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-default-headers.html", "build-number": "707", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.86973277", "title": "Default headers | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Default headers | Ktor", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Default headers | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Default headers | Ktor", "og:site_name": "Ktor Help", "og:type": "website", "ogSiteName": "Ktor Help", "scrapeId": "51aabe97-4cde-465a-b511-dd033f58af58", "sourceURL": "https://ktor.io/docs/server-default-headers.html", "url": "https://ktor.io/docs/server-default-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install defaultheaders in ktor?\n\nAssistant: To install defaultheaders in ktor, here's what you do:\nTo install the DefaultHeaders plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install DefaultHeaders...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\n**embeddedServer**\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.defaultheaders.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DefaultHeaders)\n        // ...\n    }.start(wait = true)\n}\n```\n\n**module**\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.defaultheaders.*\n// ...\nfun Application.module() {\n    install(DefaultHeaders)\n    // ...\n}\n```\n\nThe DefaultHeaders plugin can also be installed to specific routes. This might be useful if you need different DefaultHeaders configurations for different application resources..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-default-headers.html", "title": "Server Plugin Default headers", "description": "This page covers the DefaultHeaders plugin in Ktor, which adds standard headers to HTTP responses and allows customization of default headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:04:14", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-default-headers.html", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-default-headers.html", "build-number": "707", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.86973277", "title": "Default headers | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Default headers | Ktor", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Default headers | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Default headers | Ktor", "og:site_name": "Ktor Help", "og:type": "website", "ogSiteName": "Ktor Help", "scrapeId": "51aabe97-4cde-465a-b511-dd033f58af58", "sourceURL": "https://ktor.io/docs/server-default-headers.html", "url": "https://ktor.io/docs/server-default-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure defaultheaders in ktor?\n\nAssistant: To configure defaultheaders in ktor, here's what you do:\n### Add additional headers\nTo customize a list of default headers, pass a desired header to install by using the header(name, value) function. The name parameter accepts an HttpHeaders value, for example:\n```\ninstall(DefaultHeaders) {\n    header(HttpHeaders.ETag, \"7c876b7e\")\n}\n```\n\nTo add a custom header, pass its name as a string value:\n```\ninstall(DefaultHeaders) {\n    header(\"Custom-Header\", \"Some value\")\n}\n```\n\n### Override headers\nTo override the Server header, use a corresponding HttpHeaders value:\n```\ninstall(DefaultHeaders) {\n    header(HttpHeaders.Server, \"Custom\")\n}\n```\n\nNote that the Date header is cached due to performance reasons and cannot be overridden by using DefaultHeaders..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-default-headers.html", "title": "Server Plugin Default headers", "description": "This page covers the DefaultHeaders plugin in Ktor, which adds standard headers to HTTP responses and allows customization of default headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:04:14", "type": "section_detail", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-default-headers.html", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-default-headers.html", "build-number": "707", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.86973277", "title": "Default headers | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Default headers | Ktor", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Default headers | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Default headers | Ktor", "og:site_name": "Ktor Help", "og:type": "website", "ogSiteName": "Ktor Help", "scrapeId": "51aabe97-4cde-465a-b511-dd033f58af58", "sourceURL": "https://ktor.io/docs/server-default-headers.html", "url": "https://ktor.io/docs/server-default-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Default headers in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-default-headers:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies (gradle kotlin), which is an important aspect of server plugin default headers.\n\n**Add dependencies (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-default-headers:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies (gradle groovy), which is an important aspect of server plugin default headers.\n\n**Add dependencies (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-default-headers-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies (maven), which is an important aspect of server plugin default headers.\n\n**Install DefaultHeaders in embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.defaultheaders.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DefaultHeaders)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install defaultheaders in embeddedserver, which is an important aspect of server plugin default headers.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-default-headers.html", "title": "Server Plugin Default headers", "description": "This page covers the DefaultHeaders plugin in Ktor, which adds standard headers to HTTP responses and allows customization of default headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:04:14", "type": "code_examples", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-default-headers.html", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-default-headers.html", "build-number": "707", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.86973277", "title": "Default headers | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Default headers | Ktor", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Default headers | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Default headers | Ktor", "og:site_name": "Ktor Help", "og:type": "website", "ogSiteName": "Ktor Help", "scrapeId": "51aabe97-4cde-465a-b511-dd033f58af58", "sourceURL": "https://ktor.io/docs/server-default-headers.html", "url": "https://ktor.io/docs/server-default-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Default headers in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe DefaultHeaders plugin can be installed to specific routes for different configurations.\n\nThe Date header is cached and cannot be overridden.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-default-headers.html", "title": "Server Plugin Default headers", "description": "This page covers the DefaultHeaders plugin in Ktor, which adds standard headers to HTTP responses and allows customization of default headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:04:14", "type": "best_practices", "page_metadata": {"language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-default-headers.html", "ogDescription": "", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/server-default-headers.html", "build-number": "707", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "twitter:description": "", "built-on": "2025-02-26T14:01:04.86973277", "title": "Default headers | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Default headers | Ktor", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Default headers | Ktor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Default headers | Ktor", "og:site_name": "Ktor Help", "og:type": "website", "ogSiteName": "Ktor Help", "scrapeId": "51aabe97-4cde-465a-b511-dd033f58af58", "sourceURL": "https://ktor.io/docs/server-default-headers.html", "url": "https://ktor.io/docs/server-default-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Partial content is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Partial content in ktor.\n\n# Server Plugin Partial content\n\nThis documentation page covers the PartialContent plugin for Ktor, which adds support for handling HTTP range requests to send only a portion of an HTTP message back to a client.Here's a quick rundown of what this is about:\n\n## Server Plugin Partial content\n\nThe PartialContent plugin adds support for handling HTTP range requests used to send only a portion of an HTTP message back to a client. This plugin is useful for streaming content or resuming partial downloads.\n\nPartialContent has the following limitations:\n\n- Works only for HEAD and GET requests and returns 405 Method Not Allowed if the client tries to use the Range header with other methods.\n- Works only for responses that have the Content-Length header defined.\n- Disables Compression when serving ranges.\n\n## Add dependencies\n\nTo use PartialContent, you need to include the ktor-server-partial-content artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-partial-content:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-partial-content:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-partial-content-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install PartialContent\n\nTo install the PartialContent plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install PartialContent...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\n## Code Examples\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.partialcontent.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(PartialContent)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.partialcontent.*\n// ...\nfun Application.module() {\n    install(PartialContent)\n    // ...\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-partial-content.html", "title": "Server Plugin Partial content", "description": "This documentation page covers the PartialContent plugin for Ktor, which adds support for handling HTTP range requests to send only a portion of an HTTP message back to a client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:04:44", "type": "overview", "page_metadata": {"og:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "og:type": "website", "og:locale": "en_US", "ogTitle": "Partial content | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.52840521", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Partial content | Ktor", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:title": "Partial content | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Partial content | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "scrapeId": "d5c4086e-66d0-4c30-b2d8-ac4d2b1008bd", "sourceURL": "https://ktor.io/docs/server-partial-content.html", "url": "https://ktor.io/docs/server-partial-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I server plugin partial content in ktor?\n\nAssistant: To server plugin partial content in ktor, here's what you do:\nThe PartialContent plugin adds support for handling HTTP range requests used to send only a portion of an HTTP message back to a client. This plugin is useful for streaming content or resuming partial downloads.\n\nPartialContent has the following limitations:\n\n- Works only for HEAD and GET requests and returns 405 Method Not Allowed if the client tries to use the Range header with other methods.\n- Works only for responses that have the Content-Length header defined.\n- Disables Compression when serving ranges..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-partial-content.html", "title": "Server Plugin Partial content", "description": "This documentation page covers the PartialContent plugin for Ktor, which adds support for handling HTTP range requests to send only a portion of an HTTP message back to a client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:04:44", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "og:type": "website", "og:locale": "en_US", "ogTitle": "Partial content | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.52840521", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Partial content | Ktor", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:title": "Partial content | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Partial content | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "scrapeId": "d5c4086e-66d0-4c30-b2d8-ac4d2b1008bd", "sourceURL": "https://ktor.io/docs/server-partial-content.html", "url": "https://ktor.io/docs/server-partial-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use PartialContent, you need to include the ktor-server-partial-content artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-partial-content:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-partial-content:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-partial-content-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-partial-content.html", "title": "Server Plugin Partial content", "description": "This documentation page covers the PartialContent plugin for Ktor, which adds support for handling HTTP range requests to send only a portion of an HTTP message back to a client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:04:44", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "og:type": "website", "og:locale": "en_US", "ogTitle": "Partial content | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.52840521", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Partial content | Ktor", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:title": "Partial content | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Partial content | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "scrapeId": "d5c4086e-66d0-4c30-b2d8-ac4d2b1008bd", "sourceURL": "https://ktor.io/docs/server-partial-content.html", "url": "https://ktor.io/docs/server-partial-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install partialcontent in ktor?\n\nAssistant: To install partialcontent in ktor, here's what you do:\nTo install the PartialContent plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install PartialContent...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-partial-content.html", "title": "Server Plugin Partial content", "description": "This documentation page covers the PartialContent plugin for Ktor, which adds support for handling HTTP range requests to send only a portion of an HTTP message back to a client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:04:44", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "og:type": "website", "og:locale": "en_US", "ogTitle": "Partial content | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.52840521", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Partial content | Ktor", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:title": "Partial content | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Partial content | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "scrapeId": "d5c4086e-66d0-4c30-b2d8-ac4d2b1008bd", "sourceURL": "https://ktor.io/docs/server-partial-content.html", "url": "https://ktor.io/docs/server-partial-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I code examples in ktor?\n\nAssistant: To code examples in ktor, here's what you do:\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.partialcontent.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(PartialContent)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.partialcontent.*\n// ...\nfun Application.module() {\n    install(PartialContent)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-partial-content.html", "title": "Server Plugin Partial content", "description": "This documentation page covers the PartialContent plugin for Ktor, which adds support for handling HTTP range requests to send only a portion of an HTTP message back to a client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:04:44", "type": "section_detail", "page_metadata": {"og:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "og:type": "website", "og:locale": "en_US", "ogTitle": "Partial content | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.52840521", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Partial content | Ktor", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:title": "Partial content | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Partial content | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "scrapeId": "d5c4086e-66d0-4c30-b2d8-ac4d2b1008bd", "sourceURL": "https://ktor.io/docs/server-partial-content.html", "url": "https://ktor.io/docs/server-partial-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Partial content in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Embedded Server Example**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.partialcontent.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(PartialContent)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to embedded server example, which is an important aspect of server plugin partial content.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-partial-content.html", "title": "Server Plugin Partial content", "description": "This documentation page covers the PartialContent plugin for Ktor, which adds support for handling HTTP range requests to send only a portion of an HTTP message back to a client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:04:44", "type": "code_examples", "page_metadata": {"og:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "og:type": "website", "og:locale": "en_US", "ogTitle": "Partial content | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.52840521", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Partial content | Ktor", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:title": "Partial content | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Partial content | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "scrapeId": "d5c4086e-66d0-4c30-b2d8-ac4d2b1008bd", "sourceURL": "https://ktor.io/docs/server-partial-content.html", "url": "https://ktor.io/docs/server-partial-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Partial content in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe PartialContent plugin can also be installed to specific routes, which might be useful if you need different PartialContent configurations for different application resources.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-partial-content.html", "title": "Server Plugin Partial content", "description": "This documentation page covers the PartialContent plugin for Ktor, which adds support for handling HTTP range requests to send only a portion of an HTTP message back to a client.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:04:44", "type": "best_practices", "page_metadata": {"og:description": "", "twitter:creator": "@JetBrainsKtor", "twitter:description": "", "og:type": "website", "og:locale": "en_US", "ogTitle": "Partial content | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "built-on": "2025-02-26T14:01:05.52840521", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Partial content | Ktor", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:title": "Partial content | Ktor", "twitter:card": "summary_large_image", "ogLocale": "en_US", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "title": "Partial content | Ktor Documentation", "og:url": "https://ktor.io/docs/3.1.1/server-partial-content.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "scrapeId": "d5c4086e-66d0-4c30-b2d8-ac4d2b1008bd", "sourceURL": "https://ktor.io/docs/server-partial-content.html", "url": "https://ktor.io/docs/server-partial-content.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Type-safe routing is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Type-safe routing in ktor.\n\n# Server Plugin Type-safe routing\n\nKtor provides the Resources plugin that allows you to implement type-safe routing. To accomplish this, you need to create a class that should act as a typed route and then annotate this class using the @Resource keyword.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\n### Add kotlinx.serialization\n\nGiven that resource classes should have @Serializable behavior, you need to add the Kotlin serialization plugin as described in the Setup section.\n\n### Add Resources dependencies\n\nTo use Resources, you need to include the ktor-server-resources artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-resources:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-resources:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-resources-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install Resources\n\nTo install the Resources plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install Resources...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.resources.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Resources)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.resources.*\n// ...\nfun Application.module() {\n    install(Resources)\n    // ...\n}\n```\n\n## Create resource classes\n\nEach resource class should have the @Resource annotation. Below, we'll take a look at several examples of resource classes - defining a single path segment, query and path parameters, and so on.\n\n### Resource URL\n\nThe example below shows how to define the Articles class that specifies a resource responding on the /articles path.\n\n```\nimport io.ktor.resources.*\n\n@Resource(\"/articles\")\nclass Articles()\n```\n\n### Resources with a query parameter\n\nThe Articles class below has the sort string property that acts as a query parameter and allows you to define a resource responding on the following path with the sort query parameter: /articles?sort=new.\n\n```\n@Resource(\"/articles\")\nclass Articles(val sort: String? = \"new\")\n```\n\n### Resources with nested classes\n\nYou can nest classes to create resources that contain several path segments. Note that in this case nested classes should have a property with an outer class type. The example below shows a resource responding on the /articles/new path.\n\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"new\")\n    class New(val parent: Articles = Articles())\n}\n```\n\n### Resources with a path parameter\n\nThe example below demonstrates how to add the nested {id} integer path parameter that matches a path segment and captures it as a parameter named id.\n\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"{id}\")\n    class Id(val parent: Articles = Articles(), val id: Long)\n}\n```\n\nAs an example, this resource can be used to respond on /articles/12.\n\n### Example: A resource for CRUD operations\n\nLet's summarize the examples above and create the Articles resource for CRUD operations.\n\n```\n@Resource(\"/articles\")\nclass Articles(val sort: String? = \"new\") {\n    @Resource(\"new\")\n    class New(val parent: Articles = Articles())\n\n    @Resource(\"{id}\")\n    class Id(val parent: Articles = Articles(), val id: Long) {\n        @Resource(\"edit\")\n        class Edit(val parent: Id)\n    }\n}\n```\n\nThis resource can be used to list all articles, post a new article, edit it, and so on. We'll see how to define route handlers for this resource in the next chapter.\n\n## Define route handlers\n\nTo define a route handler for a typed resource, you need to pass a resource class to a verb function ( get, post, put, and so on). For example, a route handler below responds on the /articles path.\n\n```\n@Resource(\"/articles\")\nclass Articles()\n\nfun Application.module() {\n    install(Resources)\n    routing {\n        get<Articles> { articles ->\n            // Get all articles ...\n            call.respondText(\"List of articles: $articles\")\n        }\n    }\n}\n```\n\nThe example below shows how to define route handlers for the Articles resource created in Example: A resource for CRUD operations. Note that inside the route handler you can access the Article as a parameter and obtain its property values.\n\n```\nfun Application.module() {\n    install(Resources)\n    routing {\n        get<Articles> { article ->\n            // Get all articles ...\n            call.respondText(\"List of articles sorted starting from ${article.sort}\")\n        }\n        get<Articles.New> {\n            // Show a page with fields for creating a new article ...\n            call.respondText(\"Create a new article\")\n        }\n        post<Articles> {\n            // Save an article ...\n            call.respondText(\"An article is saved\", status = HttpStatusCode.Created)\n        }\n        get<Articles.Id> { article ->\n            // Show an article with id ${article.id} ...\n            call.respondText(\"An article with id ${article.id}\", status = HttpStatusCode.OK)\n        }\n        get<Articles.Id.Edit> { article ->\n            // Show a page with fields for editing an article ...\n            call.respondText(\"Edit an article with id ${article.parent.id}\", status = HttpStatusCode.OK)\n        }\n        put<Articles.Id> { article ->\n            // Update an article ...\n            call.respondText(\"An article with id ${article.id} updated\", status = HttpStatusCode.OK)\n        }\n        delete<Articles.Id> { article ->\n            // Delete an article ...\n            call.respondText(\"An article with id ${article.id} deleted\", status = HttpStatusCode.OK)\n        }\n    }\n}\n```\n\nHere are several tips on handling requests for each endpoint:\n\n- get<Articles>\n\nThis route handler is supposed to return all articles sorted according to the sort query parameter. For instance, this might be an HTML page or a JSON object with all articles.\n\n- get<Articles.New>\n\nThis endpoint responds with a web form containing fields for creating a new article.\n\n- post<Articles>\n\nThe post<Articles> endpoint is supposed to receive parameters sent using a web form. Ktor also allows you to receive JSON data as an object using the ContentNegotiation plugin.\n\n- get<Articles.Id>\n\nThis route handler is supposed to return an article with the specified identifier. This might be an HTML page showing an article or a JSON object with article data.\n\n- get<Articles.Id.Edit>\n\nThis endpoint responds with a web form containing fields for editing an existing article.\n\n- put<Articles.Id>\n\nSimilarly to the post<Articles> endpoint, the put handler receives form parameters sent using a web form.\n\n- delete<Articles.Id>\n\nThis route handler deletes an article with the specified identifier.\n\n## Build links from resources\n\nBesides using resource definitions for routing, they can also be used to build links. This is sometimes called reverse routing. Building links from resources might be helpful if you need to add these links to an HTML document created with HTML DSL or if you need to generate a redirection response.\n\nThe Resources plugin extends Application with the overloaded href method, which allows you to generate a link from a Resource. For instance, the code snippet below creates a link for the Edit resource defined above:\n\n```\nval link: String = href(Articles.Id.Edit(Articles.Id(id = 123)))\n```\n\nSince the grandparent Articles resource defines the sort query parameter with the default value new, the link variable contains:\n\n```\n/articles/123/edit?sort=new\n```\n\nTo generate URLs that specify the host and protocol, you can supply the href method with URLBuilder. Additional query params can also be specified using the URLBuilder, as shown in this example:\n\n```\nval urlBuilder = URLBuilder(URLProtocol.HTTPS, \"ktor.io\", parameters = parametersOf(\"token\", \"123\"))\nhref(Articles(sort = null), urlBuilder)\nval link: String = urlBuilder.buildString()\n```\n\nThe link variable subsequently contains:\n\n```\nhttps://ktor.io/articles?token=123\n```\n\n### Example\n\nThe example below shows how to add links built from resources to the HTML response:\n\n```\nget {\n    call.respondHtml {\n        body {\n            this@module.apply {\n                p {\n                    val link: String = href(Articles())\n                    a(link) { +\"Get all articles\" }\n                }\n                p {\n                    val link: String = href(Articles.New())\n                    a(link) { +\"Create a new article\" }\n                }\n                p {\n                    val link: String = href(Articles.Id.Edit(Articles.Id(id = 123)))\n                    a(link) { +\"Edit an exising article\" }\n                }\n                p {\n                    val urlBuilder = URLBuilder(URLProtocol.HTTPS, \"ktor.io\", parameters = parametersOf(\"token\", \"123\"))\n                    href(Articles(sort = null), urlBuilder)\n                    val link: String = urlBuilder.buildString()\n                    i { a(link) { +link } }\n                }\n            }\n        }\n    }\n}\n```\n\nYou can find the full example here: resource-routing.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/type-safe-routing.html", "title": "Server Plugin Type-safe routing", "description": "Ktor provides the Resources plugin that allows you to implement type-safe routing. To accomplish this, you need to create a class that should act as a typed route and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:06:37", "type": "overview", "page_metadata": {"og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:locale": "en_US", "title": "Type-safe routing | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Type-safe routing | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Type-safe routing | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-resources.html", "build-number": "707", "og:title": "Type-safe routing | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-resources.html", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:06.33472704", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ddc45229-39ba-4dc1-8d6d-6bfda10d6138", "sourceURL": "https://ktor.io/docs/type-safe-routing.html", "url": "https://ktor.io/docs/server-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\n### Add kotlinx.serialization\n\nGiven that resource classes should have @Serializable behavior, you need to add the Kotlin serialization plugin as described in the Setup section.\n\n### Add Resources dependencies\n\nTo use Resources, you need to include the ktor-server-resources artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-resources:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-resources:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-resources-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/type-safe-routing.html", "title": "Server Plugin Type-safe routing", "description": "Ktor provides the Resources plugin that allows you to implement type-safe routing. To accomplish this, you need to create a class that should act as a typed route and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:06:37", "type": "section_detail", "page_metadata": {"og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:locale": "en_US", "title": "Type-safe routing | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Type-safe routing | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Type-safe routing | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-resources.html", "build-number": "707", "og:title": "Type-safe routing | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-resources.html", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:06.33472704", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ddc45229-39ba-4dc1-8d6d-6bfda10d6138", "sourceURL": "https://ktor.io/docs/type-safe-routing.html", "url": "https://ktor.io/docs/server-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install resources in ktor?\n\nAssistant: To install resources in ktor, here's what you do:\nTo install the Resources plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install Resources...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.resources.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Resources)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.resources.*\n// ...\nfun Application.module() {\n    install(Resources)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/type-safe-routing.html", "title": "Server Plugin Type-safe routing", "description": "Ktor provides the Resources plugin that allows you to implement type-safe routing. To accomplish this, you need to create a class that should act as a typed route and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:06:37", "type": "section_detail", "page_metadata": {"og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:locale": "en_US", "title": "Type-safe routing | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Type-safe routing | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Type-safe routing | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-resources.html", "build-number": "707", "og:title": "Type-safe routing | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-resources.html", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:06.33472704", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ddc45229-39ba-4dc1-8d6d-6bfda10d6138", "sourceURL": "https://ktor.io/docs/type-safe-routing.html", "url": "https://ktor.io/docs/server-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create resource classes in ktor?\n\nAssistant: To create resource classes in ktor, here's what you do:\nEach resource class should have the @Resource annotation. Below, we'll take a look at several examples of resource classes - defining a single path segment, query and path parameters, and so on.\n\n### Resource URL\n\nThe example below shows how to define the Articles class that specifies a resource responding on the /articles path.\n\n```\nimport io.ktor.resources.*\n\n@Resource(\"/articles\")\nclass Articles()\n```\n\n### Resources with a query parameter\n\nThe Articles class below has the sort string property that acts as a query parameter and allows you to define a resource responding on the following path with the sort query parameter: /articles?sort=new.\n\n```\n@Resource(\"/articles\")\nclass Articles(val sort: String? = \"new\")\n```\n\n### Resources with nested classes\n\nYou can nest classes to create resources that contain several path segments. Note that in this case nested classes should have a property with an outer class type. The example below shows a resource responding on the /articles/new path.\n\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"new\")\n    class New(val parent: Articles = Articles())\n}\n```\n\n### Resources with a path parameter\n\nThe example below demonstrates how to add the nested {id} integer path parameter that matches a path segment and captures it as a parameter named id.\n\n```\n@Resource(\"/articles\")\nclass Articles() {\n    @Resource(\"{id}\")\n    class Id(val parent: Articles = Articles(), val id: Long)\n}\n```\n\nAs an example, this resource can be used to respond on /articles/12.\n\n### Example: A resource for CRUD operations\n\nLet's summarize the examples above and create the Articles resource for CRUD operations.\n\n```\n@Resource(\"/articles\")\nclass Articles(val sort: String? = \"new\") {\n    @Resource(\"new\")\n    class New(val parent: Articles = Articles())\n\n    @Resource(\"{id}\")\n    class Id(val parent: Articles = Articles(), val id: Long) {\n        @Resource(\"edit\")\n        class Edit(val parent: Id)\n    }\n}\n```\n\nThis resource can be used to list all articles, post a new article, edit it, and so on. We'll see how to define route handlers for this resource in the next chapter..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/type-safe-routing.html", "title": "Server Plugin Type-safe routing", "description": "Ktor provides the Resources plugin that allows you to implement type-safe routing. To accomplish this, you need to create a class that should act as a typed route and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:06:37", "type": "section_detail", "page_metadata": {"og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:locale": "en_US", "title": "Type-safe routing | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Type-safe routing | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Type-safe routing | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-resources.html", "build-number": "707", "og:title": "Type-safe routing | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-resources.html", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:06.33472704", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ddc45229-39ba-4dc1-8d6d-6bfda10d6138", "sourceURL": "https://ktor.io/docs/type-safe-routing.html", "url": "https://ktor.io/docs/server-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I define route handlers in ktor?\n\nAssistant: To define route handlers in ktor, here's what you do:\nTo define a route handler for a typed resource, you need to pass a resource class to a verb function ( get, post, put, and so on). For example, a route handler below responds on the /articles path.\n\n```\n@Resource(\"/articles\")\nclass Articles()\n\nfun Application.module() {\n    install(Resources)\n    routing {\n        get<Articles> { articles ->\n            // Get all articles ...\n            call.respondText(\"List of articles: $articles\")\n        }\n    }\n}\n```\n\nThe example below shows how to define route handlers for the Articles resource created in Example: A resource for CRUD operations. Note that inside the route handler you can access the Article as a parameter and obtain its property values.\n\n```\nfun Application.module() {\n    install(Resources)\n    routing {\n        get<Articles> { article ->\n            // Get all articles ...\n            call.respondText(\"List of articles sorted starting from ${article.sort}\")\n        }\n        get<Articles.New> {\n            // Show a page with fields for creating a new article ...\n            call.respondText(\"Create a new article\")\n        }\n        post<Articles> {\n            // Save an article ...\n            call.respondText(\"An article is saved\", status = HttpStatusCode.Created)\n        }\n        get<Articles.Id> { article ->\n            // Show an article with id ${article.id} ...\n            call.respondText(\"An article with id ${article.id}\", status = HttpStatusCode.OK)\n        }\n        get<Articles.Id.Edit> { article ->\n            // Show a page with fields for editing an article ...\n            call.respondText(\"Edit an article with id ${article.parent.id}\", status = HttpStatusCode.OK)\n        }\n        put<Articles.Id> { article ->\n            // Update an article ...\n            call.respondText(\"An article with id ${article.id} updated\", status = HttpStatusCode.OK)\n        }\n        delete<Articles.Id> { article ->\n            // Delete an article ...\n            call.respondText(\"An article with id ${article.id} deleted\", status = HttpStatusCode.OK)\n        }\n    }\n}\n```\n\nHere are several tips on handling requests for each endpoint:\n\n- get<Articles>\n\nThis route handler is supposed to return all articles sorted according to the sort query parameter. For instance, this might be an HTML page or a JSON object with all articles.\n\n- get<Articles.New>\n\nThis endpoint responds with a web form containing fields for creating a new article.\n\n- post<Articles>\n\nThe post<Articles> endpoint is supposed to receive parameters sent using a web form. Ktor also allows you to receive JSON data as an object using the ContentNegotiation plugin.\n\n- get<Articles.Id>\n\nThis route handler is supposed to return an article with the specified identifier. This might be an HTML page showing an article or a JSON object with article data.\n\n- get<Articles.Id.Edit>\n\nThis endpoint responds with a web form containing fields for editing an existing article.\n\n- put<Articles.Id>\n\nSimilarly to the post<Articles> endpoint, the put handler receives form parameters sent using a web form.\n\n- delete<Articles.Id>\n\nThis route handler deletes an article with the specified identifier..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/type-safe-routing.html", "title": "Server Plugin Type-safe routing", "description": "Ktor provides the Resources plugin that allows you to implement type-safe routing. To accomplish this, you need to create a class that should act as a typed route and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:06:37", "type": "section_detail", "page_metadata": {"og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:locale": "en_US", "title": "Type-safe routing | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Type-safe routing | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Type-safe routing | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-resources.html", "build-number": "707", "og:title": "Type-safe routing | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-resources.html", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:06.33472704", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ddc45229-39ba-4dc1-8d6d-6bfda10d6138", "sourceURL": "https://ktor.io/docs/type-safe-routing.html", "url": "https://ktor.io/docs/server-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I build links from resources in ktor?\n\nAssistant: To build links from resources in ktor, here's what you do:\nBesides using resource definitions for routing, they can also be used to build links. This is sometimes called reverse routing. Building links from resources might be helpful if you need to add these links to an HTML document created with HTML DSL or if you need to generate a redirection response.\n\nThe Resources plugin extends Application with the overloaded href method, which allows you to generate a link from a Resource. For instance, the code snippet below creates a link for the Edit resource defined above:\n\n```\nval link: String = href(Articles.Id.Edit(Articles.Id(id = 123)))\n```\n\nSince the grandparent Articles resource defines the sort query parameter with the default value new, the link variable contains:\n\n```\n/articles/123/edit?sort=new\n```\n\nTo generate URLs that specify the host and protocol, you can supply the href method with URLBuilder. Additional query params can also be specified using the URLBuilder, as shown in this example:\n\n```\nval urlBuilder = URLBuilder(URLProtocol.HTTPS, \"ktor.io\", parameters = parametersOf(\"token\", \"123\"))\nhref(Articles(sort = null), urlBuilder)\nval link: String = urlBuilder.buildString()\n```\n\nThe link variable subsequently contains:\n\n```\nhttps://ktor.io/articles?token=123\n```\n\n### Example\n\nThe example below shows how to add links built from resources to the HTML response:\n\n```\nget {\n    call.respondHtml {\n        body {\n            this@module.apply {\n                p {\n                    val link: String = href(Articles())\n                    a(link) { +\"Get all articles\" }\n                }\n                p {\n                    val link: String = href(Articles.New())\n                    a(link) { +\"Create a new article\" }\n                }\n                p {\n                    val link: String = href(Articles.Id.Edit(Articles.Id(id = 123)))\n                    a(link) { +\"Edit an exising article\" }\n                }\n                p {\n                    val urlBuilder = URLBuilder(URLProtocol.HTTPS, \"ktor.io\", parameters = parametersOf(\"token\", \"123\"))\n                    href(Articles(sort = null), urlBuilder)\n                    val link: String = urlBuilder.buildString()\n                    i { a(link) { +link } }\n                }\n            }\n        }\n    }\n}\n```\n\nYou can find the full example here: resource-routing..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/type-safe-routing.html", "title": "Server Plugin Type-safe routing", "description": "Ktor provides the Resources plugin that allows you to implement type-safe routing. To accomplish this, you need to create a class that should act as a typed route and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:06:37", "type": "section_detail", "page_metadata": {"og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:locale": "en_US", "title": "Type-safe routing | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Type-safe routing | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Type-safe routing | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-resources.html", "build-number": "707", "og:title": "Type-safe routing | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-resources.html", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:06.33472704", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ddc45229-39ba-4dc1-8d6d-6bfda10d6138", "sourceURL": "https://ktor.io/docs/type-safe-routing.html", "url": "https://ktor.io/docs/server-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Type-safe routing in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add Resources dependencies (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-resources:$ktor_version\")\n```\n\nThis snippet shows you how to add resources dependencies (gradle kotlin), which is an important aspect of server plugin type-safe routing.\n\n**Add Resources dependencies (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-resources:$ktor_version\"\n```\n\nThis snippet shows you how to add resources dependencies (gradle groovy), which is an important aspect of server plugin type-safe routing.\n\n**Add Resources dependencies (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-resources-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add resources dependencies (maven), which is an important aspect of server plugin type-safe routing.\n\n**Install Resources (embeddedServer)**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.resources.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(Resources)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install resources (embeddedserver), which is an important aspect of server plugin type-safe routing.\n\n", "metadata": {"source_url": "https://ktor.io/docs/type-safe-routing.html", "title": "Server Plugin Type-safe routing", "description": "Ktor provides the Resources plugin that allows you to implement type-safe routing. To accomplish this, you need to create a class that should act as a typed route and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:06:37", "type": "code_examples", "page_metadata": {"og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:locale": "en_US", "title": "Type-safe routing | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Type-safe routing | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Type-safe routing | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-resources.html", "build-number": "707", "og:title": "Type-safe routing | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-resources.html", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:06.33472704", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ddc45229-39ba-4dc1-8d6d-6bfda10d6138", "sourceURL": "https://ktor.io/docs/type-safe-routing.html", "url": "https://ktor.io/docs/server-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Type-safe routing in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe Ktor client provides the capability to make typed requests to a server.\n\nYou can find the full example here: resource-routing.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/type-safe-routing.html", "title": "Server Plugin Type-safe routing", "description": "Ktor provides the Resources plugin that allows you to implement type-safe routing. To accomplish this, you need to create a class that should act as a typed route and then annotate this class using the @Resource keyword.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:06:37", "type": "best_practices", "page_metadata": {"og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:locale": "en_US", "title": "Type-safe routing | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Type-safe routing | Ktor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Type-safe routing | Ktor", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogLocale": "en_US", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-resources.html", "build-number": "707", "og:title": "Type-safe routing | Ktor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-resources.html", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:06.33472704", "twitter:card": "summary_large_image", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "ddc45229-39ba-4dc1-8d6d-6bfda10d6138", "sourceURL": "https://ktor.io/docs/type-safe-routing.html", "url": "https://ktor.io/docs/server-resources.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Tracing requests in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Tracing requests in Ktor Client in ktor.\n\n# Client Plugin Tracing requests in Ktor Client\n\nThis documentation page covers the CallId plugin in Ktor Client, which allows tracing client requests end-to-end using unique call IDs, particularly useful in microservice architectures.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\nTo use the CallId plugin, include the following dependency in your build script:\n\n```kotlin\nimplementation(\"io.ktor:ktor-client-call-id:$ktor_version\")\n```\n\n```groovy\nimplementation \"io.ktor:ktor-client-call-id:$ktor_version\"\n```\n\n```xml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-call-id-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install CallId\n\nTo install the CallId plugin in your application, pass it to the install function in the specified module. Here are examples of how to install CallId:\n\n- Inside the embeddedServer function call:\n\n```kotlin\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.client.plugins.callid.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CallId)\n        // ...\n    }.start(wait = true)\n}\n```\n\n- Inside the explicitly defined module:\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.client.plugins.callid.*\n// ...\nfun Application.module() {\n    install(CallId)\n    // ...\n}\n```\n\n## Configure CallId\n\nThe CallId plugin configuration allows you to generate a call ID and add it to the call context. Here are the ways to generate a call ID:\n\n- The `useCoroutineContext` property, enabled by default, adds a generator that uses the current CoroutineContext to retrieve a call ID. To disable this functionality, set `useCoroutineContext` to `false`:\n\n```kotlin\ninstall(CallId) {\n    useCoroutineContext = false\n}\n```\n\n- The `generate()` function allows you to generate a call ID for an outgoing request. If it fails to generate a call ID, it returns `null`:\n\n```kotlin\ninstall(CallId) {\n    generate { \"call-id-client-2\" }\n}\n```\n\nYou can use multiple methods to generate a call ID. The first non-null value will be applied.\n\n## Add a call ID\n\nAfter retrieving a call ID, you can add it to the request using the following options:\n\n- The `intercept()` function allows you to add a call ID to the request by using the `CallIdInterceptor`:\n\n```kotlin\ninstall(ClientCallId) {\n    intercept { request, callId ->\n        request.header(HttpHeaders.XRequestId, callId)\n    }\n}\n```\n\n- The `addToHeader()` function adds a call ID to a specified header, defaulting to `HttpHeaders.XRequestId`:\n\n```kotlin\ninstall(CallId) {\n    addToHeader(HttpHeaders.XRequestId)\n}\n```\n\n## Example\n\nIn the following example, the CallId plugin for the Ktor client is configured to generate a new call ID and add it to the header:\n\n```kotlin\nval client = HttpClient(CIO) {\n    install(CallId) {\n        generate { \"call-id-client\" }\n        addToHeader(HttpHeaders.XRequestId)\n    }\n}\n```\n\nThe plugin uses the coroutine context to get a call ID and utilizes the `generate()` function to generate a new one. The first non-null call ID is then applied to the request header using the `addToHeader()` function.\n\nIn a Ktor server, the call ID can then be retrieved from the header using the retrieve functions from the CallId plugin for the server:\n\n```kotlin\ninstall(CallId) {\n    retrieveFromHeader(HttpHeaders.XRequestId)\n}\n```\n\nThis allows the Ktor server to retrieve the ID of the specified header of the request and apply it to the callId property of the call.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-call-id.html", "title": "Client Plugin Tracing requests in Ktor Client", "description": "This documentation page covers the CallId plugin in Ktor Client, which allows tracing client requests end-to-end using unique call IDs, particularly useful in microservice architectures.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:07:13", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Tracing requests in Ktor Client | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:04.636934525", "twitter:title": "Tracing requests in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Tracing requests in Ktor Client | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "title": "Tracing requests in Ktor Client | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/client-call-id.html", "twitter:site": "@JetBrainsKtor", "scrapeId": "b48063e4-3c43-4dce-a575-5935d9be8a5c", "sourceURL": "https://ktor.io/docs/client-call-id.html", "url": "https://ktor.io/docs/client-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\nTo use the CallId plugin, include the following dependency in your build script:\n\n```kotlin\nimplementation(\"io.ktor:ktor-client-call-id:$ktor_version\")\n```\n\n```groovy\nimplementation \"io.ktor:ktor-client-call-id:$ktor_version\"\n```\n\n```xml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-call-id-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-call-id.html", "title": "Client Plugin Tracing requests in Ktor Client", "description": "This documentation page covers the CallId plugin in Ktor Client, which allows tracing client requests end-to-end using unique call IDs, particularly useful in microservice architectures.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:07:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Tracing requests in Ktor Client | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:04.636934525", "twitter:title": "Tracing requests in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Tracing requests in Ktor Client | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "title": "Tracing requests in Ktor Client | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/client-call-id.html", "twitter:site": "@JetBrainsKtor", "scrapeId": "b48063e4-3c43-4dce-a575-5935d9be8a5c", "sourceURL": "https://ktor.io/docs/client-call-id.html", "url": "https://ktor.io/docs/client-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install callid in ktor?\n\nAssistant: To install callid in ktor, here's what you do:\nTo install the CallId plugin in your application, pass it to the install function in the specified module. Here are examples of how to install CallId:\n\n- Inside the embeddedServer function call:\n\n```kotlin\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.client.plugins.callid.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CallId)\n        // ...\n    }.start(wait = true)\n}\n```\n\n- Inside the explicitly defined module:\n\n```kotlin\nimport io.ktor.server.application.*\nimport io.ktor.client.plugins.callid.*\n// ...\nfun Application.module() {\n    install(CallId)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-call-id.html", "title": "Client Plugin Tracing requests in Ktor Client", "description": "This documentation page covers the CallId plugin in Ktor Client, which allows tracing client requests end-to-end using unique call IDs, particularly useful in microservice architectures.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:07:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Tracing requests in Ktor Client | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:04.636934525", "twitter:title": "Tracing requests in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Tracing requests in Ktor Client | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "title": "Tracing requests in Ktor Client | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/client-call-id.html", "twitter:site": "@JetBrainsKtor", "scrapeId": "b48063e4-3c43-4dce-a575-5935d9be8a5c", "sourceURL": "https://ktor.io/docs/client-call-id.html", "url": "https://ktor.io/docs/client-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure callid in ktor?\n\nAssistant: To configure callid in ktor, here's what you do:\nThe CallId plugin configuration allows you to generate a call ID and add it to the call context. Here are the ways to generate a call ID:\n\n- The `useCoroutineContext` property, enabled by default, adds a generator that uses the current CoroutineContext to retrieve a call ID. To disable this functionality, set `useCoroutineContext` to `false`:\n\n```kotlin\ninstall(CallId) {\n    useCoroutineContext = false\n}\n```\n\n- The `generate()` function allows you to generate a call ID for an outgoing request. If it fails to generate a call ID, it returns `null`:\n\n```kotlin\ninstall(CallId) {\n    generate { \"call-id-client-2\" }\n}\n```\n\nYou can use multiple methods to generate a call ID. The first non-null value will be applied..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-call-id.html", "title": "Client Plugin Tracing requests in Ktor Client", "description": "This documentation page covers the CallId plugin in Ktor Client, which allows tracing client requests end-to-end using unique call IDs, particularly useful in microservice architectures.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:07:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Tracing requests in Ktor Client | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:04.636934525", "twitter:title": "Tracing requests in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Tracing requests in Ktor Client | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "title": "Tracing requests in Ktor Client | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/client-call-id.html", "twitter:site": "@JetBrainsKtor", "scrapeId": "b48063e4-3c43-4dce-a575-5935d9be8a5c", "sourceURL": "https://ktor.io/docs/client-call-id.html", "url": "https://ktor.io/docs/client-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add a call id in ktor?\n\nAssistant: To add a call id in ktor, here's what you do:\nAfter retrieving a call ID, you can add it to the request using the following options:\n\n- The `intercept()` function allows you to add a call ID to the request by using the `CallIdInterceptor`:\n\n```kotlin\ninstall(ClientCallId) {\n    intercept { request, callId ->\n        request.header(HttpHeaders.XRequestId, callId)\n    }\n}\n```\n\n- The `addToHeader()` function adds a call ID to a specified header, defaulting to `HttpHeaders.XRequestId`:\n\n```kotlin\ninstall(CallId) {\n    addToHeader(HttpHeaders.XRequestId)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-call-id.html", "title": "Client Plugin Tracing requests in Ktor Client", "description": "This documentation page covers the CallId plugin in Ktor Client, which allows tracing client requests end-to-end using unique call IDs, particularly useful in microservice architectures.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:07:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Tracing requests in Ktor Client | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:04.636934525", "twitter:title": "Tracing requests in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Tracing requests in Ktor Client | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "title": "Tracing requests in Ktor Client | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/client-call-id.html", "twitter:site": "@JetBrainsKtor", "scrapeId": "b48063e4-3c43-4dce-a575-5935d9be8a5c", "sourceURL": "https://ktor.io/docs/client-call-id.html", "url": "https://ktor.io/docs/client-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example in ktor?\n\nAssistant: To example in ktor, here's what you do:\nIn the following example, the CallId plugin for the Ktor client is configured to generate a new call ID and add it to the header:\n\n```kotlin\nval client = HttpClient(CIO) {\n    install(CallId) {\n        generate { \"call-id-client\" }\n        addToHeader(HttpHeaders.XRequestId)\n    }\n}\n```\n\nThe plugin uses the coroutine context to get a call ID and utilizes the `generate()` function to generate a new one. The first non-null call ID is then applied to the request header using the `addToHeader()` function.\n\nIn a Ktor server, the call ID can then be retrieved from the header using the retrieve functions from the CallId plugin for the server:\n\n```kotlin\ninstall(CallId) {\n    retrieveFromHeader(HttpHeaders.XRequestId)\n}\n```\n\nThis allows the Ktor server to retrieve the ID of the specified header of the request and apply it to the callId property of the call..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-call-id.html", "title": "Client Plugin Tracing requests in Ktor Client", "description": "This documentation page covers the CallId plugin in Ktor Client, which allows tracing client requests end-to-end using unique call IDs, particularly useful in microservice architectures.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:07:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Tracing requests in Ktor Client | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:04.636934525", "twitter:title": "Tracing requests in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Tracing requests in Ktor Client | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "title": "Tracing requests in Ktor Client | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/client-call-id.html", "twitter:site": "@JetBrainsKtor", "scrapeId": "b48063e4-3c43-4dce-a575-5935d9be8a5c", "sourceURL": "https://ktor.io/docs/client-call-id.html", "url": "https://ktor.io/docs/client-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Tracing requests in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-client-call-id:$ktor_version\")\nimplementation \"io.ktor:ktor-client-call-id:$ktor_version\"\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-client-call-id-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of client plugin tracing requests in ktor client.\n\n**Install CallId in embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.client.plugins.callid.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(CallId)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install callid in embeddedserver, which is an important aspect of client plugin tracing requests in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-call-id.html", "title": "Client Plugin Tracing requests in Ktor Client", "description": "This documentation page covers the CallId plugin in Ktor Client, which allows tracing client requests end-to-end using unique call IDs, particularly useful in microservice architectures.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:07:13", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Tracing requests in Ktor Client | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:04.636934525", "twitter:title": "Tracing requests in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Tracing requests in Ktor Client | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "title": "Tracing requests in Ktor Client | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/client-call-id.html", "twitter:site": "@JetBrainsKtor", "scrapeId": "b48063e4-3c43-4dce-a575-5935d9be8a5c", "sourceURL": "https://ktor.io/docs/client-call-id.html", "url": "https://ktor.io/docs/client-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Tracing requests in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn the server, Ktor provides the CallId plugin for tracing client requests.\n\nIn a Ktor server, use the CallId plugin to add a call ID to the CoroutineContext.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-call-id.html", "title": "Client Plugin Tracing requests in Ktor Client", "description": "This documentation page covers the CallId plugin in Ktor Client, which allows tracing client requests end-to-end using unique call IDs, particularly useful in microservice architectures.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:07:13", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "ogDescription": "", "ogLocale": "en_US", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Tracing requests in Ktor Client | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:04.636934525", "twitter:title": "Tracing requests in Ktor Client | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Tracing requests in Ktor Client | Ktor", "og:locale": "en_US", "twitter:card": "summary_large_image", "title": "Tracing requests in Ktor Client | Ktor Documentation", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-call-id.html", "ogUrl": "https://ktor.io/docs/3.1.1/client-call-id.html", "twitter:site": "@JetBrainsKtor", "scrapeId": "b48063e4-3c43-4dce-a575-5935d9be8a5c", "sourceURL": "https://ktor.io/docs/client-call-id.html", "url": "https://ktor.io/docs/client-call-id.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Digest authentication in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Digest authentication in Ktor Client in ktor.\n\n# Digest authentication in Ktor Client\n\nThis page covers the implementation and flow of digest authentication in Ktor Client, including configuration and code examples.Here's a quick rundown of what this is about:\n\n## Digest authentication flow\n\nThe digest authentication flow looks as follows:\n\n1. A client makes a request without the `Authorization` header to a specific resource in a server application.\n\n2. A server responds to a client with a `401` (Unauthorized) response status and uses a `WWW-Authenticate` response header to provide information that the digest authentication scheme is used to protect a route. A typical `WWW-Authenticate` header looks like this:\n\n```\nWWW-Authenticate: Digest\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           algorithm=\"MD5\"\n```\n\n3. Usually, a client displays a login dialog where a user can enter credentials. Then, a client makes a request with the following `Authorization` header:\n\n```\nAuthorization: Digest username=\"jetbrains\",\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           uri=\"/\",\n           algorithm=MD5,\n           response=\"6299988bb4f05c0d8ad44295873858cf\"\n```\n\nThe `response` value is generated in the following way:\n\na. `HA1 = MD5(username:realm:password)`\n\nb. `HA2 = MD5(method:digestURI)`\n\nc. `response = MD5(HA1:nonce:HA2)`\n\n4. A server validates credentials sent by the client and responds with the requested content.\n\n## Configure digest authentication\n\nTo send user credentials in the `Authorization` header using the `Digest` scheme, you need to configure the `digest` authentication provider as follows:\n\n1. Call the [digest](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/digest.html) function inside the `install` block.\n\n2. Provide the required credentials using [DigestAuthCredentials](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-digest-auth-credentials/index.html) and pass this object to the [credentials](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-digest-auth-config/credentials.html) function.\n\n3. Optionally, configure the realm using the `realm` property.\n\n```\nval client = HttpClient(CIO) {\n    install(Auth) {\n        digest {\n            credentials {\n                DigestAuthCredentials(username = \"jetbrains\", password = \"foobar\")\n            }\n            realm = \"Access to the '/' path\"\n        }\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-digest-auth.html", "title": "Digest authentication in Ktor Client", "description": "This page covers the implementation and flow of digest authentication in Ktor Client, including configuration and code examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 05:07:50", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.525139475", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Digest authentication in Ktor Client | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Digest authentication in Ktor Client | Ktor", "ogTitle": "Digest authentication in Ktor Client | Ktor", "ogSiteName": "Ktor Help", "og:title": "Digest authentication in Ktor Client | Ktor", "twitter:description": "", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/client-digest-auth.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/client-digest-auth.html", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "scrapeId": "134c253c-5da5-4128-acfb-44bc21b51ea0", "sourceURL": "https://ktor.io/docs/client-digest-auth.html", "url": "https://ktor.io/docs/client-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I digest authentication flow in ktor?\n\nAssistant: To digest authentication flow in ktor, here's what you do:\nThe digest authentication flow looks as follows:\n\n1. A client makes a request without the `Authorization` header to a specific resource in a server application.\n\n2. A server responds to a client with a `401` (Unauthorized) response status and uses a `WWW-Authenticate` response header to provide information that the digest authentication scheme is used to protect a route. A typical `WWW-Authenticate` header looks like this:\n\n```\nWWW-Authenticate: Digest\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           algorithm=\"MD5\"\n```\n\n3. Usually, a client displays a login dialog where a user can enter credentials. Then, a client makes a request with the following `Authorization` header:\n\n```\nAuthorization: Digest username=\"jetbrains\",\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           uri=\"/\",\n           algorithm=MD5,\n           response=\"6299988bb4f05c0d8ad44295873858cf\"\n```\n\nThe `response` value is generated in the following way:\n\na. `HA1 = MD5(username:realm:password)`\n\nb. `HA2 = MD5(method:digestURI)`\n\nc. `response = MD5(HA1:nonce:HA2)`\n\n4. A server validates credentials sent by the client and responds with the requested content..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-digest-auth.html", "title": "Digest authentication in Ktor Client", "description": "This page covers the implementation and flow of digest authentication in Ktor Client, including configuration and code examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 05:07:50", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.525139475", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Digest authentication in Ktor Client | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Digest authentication in Ktor Client | Ktor", "ogTitle": "Digest authentication in Ktor Client | Ktor", "ogSiteName": "Ktor Help", "og:title": "Digest authentication in Ktor Client | Ktor", "twitter:description": "", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/client-digest-auth.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/client-digest-auth.html", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "scrapeId": "134c253c-5da5-4128-acfb-44bc21b51ea0", "sourceURL": "https://ktor.io/docs/client-digest-auth.html", "url": "https://ktor.io/docs/client-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure digest authentication in ktor?\n\nAssistant: To configure digest authentication in ktor, here's what you do:\nTo send user credentials in the `Authorization` header using the `Digest` scheme, you need to configure the `digest` authentication provider as follows:\n\n1. Call the [digest](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/digest.html) function inside the `install` block.\n\n2. Provide the required credentials using [DigestAuthCredentials](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-digest-auth-credentials/index.html) and pass this object to the [credentials](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-digest-auth-config/credentials.html) function.\n\n3. Optionally, configure the realm using the `realm` property.\n\n```\nval client = HttpClient(CIO) {\n    install(Auth) {\n        digest {\n            credentials {\n                DigestAuthCredentials(username = \"jetbrains\", password = \"foobar\")\n            }\n            realm = \"Access to the '/' path\"\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-digest-auth.html", "title": "Digest authentication in Ktor Client", "description": "This page covers the implementation and flow of digest authentication in Ktor Client, including configuration and code examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 05:07:50", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.525139475", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Digest authentication in Ktor Client | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Digest authentication in Ktor Client | Ktor", "ogTitle": "Digest authentication in Ktor Client | Ktor", "ogSiteName": "Ktor Help", "og:title": "Digest authentication in Ktor Client | Ktor", "twitter:description": "", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/client-digest-auth.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/client-digest-auth.html", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "scrapeId": "134c253c-5da5-4128-acfb-44bc21b51ea0", "sourceURL": "https://ktor.io/docs/client-digest-auth.html", "url": "https://ktor.io/docs/client-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Digest authentication in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Digest Authentication Example**:\n\n```yaml\n```\nWWW-Authenticate: Digest\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           algorithm=\"MD5\"\n```\n\n```\nAuthorization: Digest username=\"jetbrains\",\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           uri=\"/\",\n           algorithm=MD5,\n           response=\"6299988bb4f05c0d8ad44295873858cf\"\n```\n\n```\nval client = HttpClient(CIO) {\n    install(Auth) {\n        digest {\n            credentials {\n                DigestAuthCredentials(username = \"jetbrains\", password = \"foobar\")\n            }\n            realm = \"Access to the '/' path\"\n        }\n    }\n}\n```\n```\n\nThis snippet shows you how to digest authentication example, which is an important aspect of digest authentication in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-digest-auth.html", "title": "Digest authentication in Ktor Client", "description": "This page covers the implementation and flow of digest authentication in Ktor Client, including configuration and code examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 05:07:50", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.525139475", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Digest authentication in Ktor Client | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Digest authentication in Ktor Client | Ktor", "ogTitle": "Digest authentication in Ktor Client | Ktor", "ogSiteName": "Ktor Help", "og:title": "Digest authentication in Ktor Client | Ktor", "twitter:description": "", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/client-digest-auth.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/client-digest-auth.html", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "scrapeId": "134c253c-5da5-4128-acfb-44bc21b51ea0", "sourceURL": "https://ktor.io/docs/client-digest-auth.html", "url": "https://ktor.io/docs/client-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Digest authentication in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn the server, Ktor provides the Authentication plugin for handling digest authentication.\n\nYou can find the full example here: client-auth-digest.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-digest-auth.html", "title": "Digest authentication in Ktor Client", "description": "This page covers the implementation and flow of digest authentication in Ktor Client, including configuration and code examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 05:07:50", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:03.525139475", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Digest authentication in Ktor Client | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "Digest authentication in Ktor Client | Ktor", "ogTitle": "Digest authentication in Ktor Client | Ktor", "ogSiteName": "Ktor Help", "og:title": "Digest authentication in Ktor Client | Ktor", "twitter:description": "", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/client-digest-auth.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/client-digest-auth.html", "language": "en-US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "scrapeId": "134c253c-5da5-4128-acfb-44bc21b51ea0", "sourceURL": "https://ktor.io/docs/client-digest-auth.html", "url": "https://ktor.io/docs/client-digest-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Auto-reload is in ktor?\n\nAssistant: Sure, I'd be happy to explain Auto-reload in ktor.\n\n# Auto-reload\n\nKtor allows you to overcome the limitation of restarting a server during development by using Auto-reload, which reloads application classes on code changes and provides a fast feedback loop.Here's a quick rundown of what this is about:\n\n## Enable the development mode\n\nTo use Auto-reload, you need to enable the development mode first. This depends on the way you used to create and run a server:\n\n- If you use `EngineMain` to run a server, enable the development mode in a configuration file.\n- If you run a server using `embeddedServer`, you can use the `io.ktor.development` system property.\n\nWhen development mode is enabled, Ktor will be watching output files from the working directory automatically. If required, you can narrow down a set of watched folders by specifying watch paths.\n\n## Configure watch paths\n\nWhen you enable development mode, Ktor starts watching output files from the working directory. For example, for a ktor-sample project build with Gradle the following folders will be watched:\n\n```\nktor-sample/build/classes/kotlin/main/META-INF\nktor-sample/build/classes/kotlin/main/com/example\nktor-sample/build/classes/kotlin/main/com\nktor-sample/build/classes/kotlin/main\nktor-sample/build/resources/main\n```\n\nWatch paths allow you to narrow down a set of watched folders. To do this, you can specify a part of a watched path. For example, to monitor changes in the ktor-sample/build/classes subfolders, pass `classes` as a watch path. Depending on the way you use to run a server, you can specify a watch path in the following ways:\n\n- In the application.conf or application.yaml file, specify the `watch` option:\n\n```\nktor {\n      development = true\n      deployment {\n          watch = [ classes ]\n      }\n}\n```\n\n```\nktor:\n      development: true\n      deployment:\n          watch:\n            - classes\n```\n\nYou can also specify several watch paths, for example:\n\n```\nwatch = [ classes, resources ]\n```\n\n```\nwatch:\n    - classes\n    - resources\n```\n\nYou can find the full example here: [autoreload-engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/autoreload-engine-main).\n\n- If you are using `embeddedServer`, pass a watch path as the `watchPaths` parameter:\n\n```\nembeddedServer(Netty, port = 8080, watchPaths = listOf(\"classes\")) {\n      routing {\n          get(\"/\") {\n              call.respondText(\"Hello, world!\")\n          }\n      }\n}.start(wait = true)\n```\n\nYou can find the full example here: [autoreload-embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/autoreload-embedded-server).\n\n## Recompile on changes\n\nSince Auto-reload detects changes in output files, you need to rebuild a project. You can do this manually in IntelliJ IDEA or enable continuous build execution in Gradle using the `-t` command-line option.\n\n- To rebuild a project manually in IntelliJ IDEA, select Build | Rebuild Project from the main menu.\n\n- To rebuild a project automatically using Gradle, you can run the `build` task with the `-t` option in a terminal:\n\n```\n./gradlew -t build\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-auto-reload.html", "title": "Auto-reload", "description": "Ktor allows you to overcome the limitation of restarting a server during development by using Auto-reload, which reloads application classes on code changes and provides a fast feedback loop.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:16", "type": "overview", "page_metadata": {"ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "built-on": "2025-02-26T14:01:03.537500145", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Auto-reload | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogTitle": "Auto-reload | Ktor", "ogDescription": "", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:title": "Auto-reload | Ktor", "twitter:description": "", "language": "en-US", "og:site_name": "Ktor Help", "title": "Auto-reload | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "scrapeId": "31068577-1090-4a6d-b96e-e38bfcc2962f", "sourceURL": "https://ktor.io/docs/server-auto-reload.html", "url": "https://ktor.io/docs/server-auto-reload.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I enable the development mode in ktor?\n\nAssistant: To enable the development mode in ktor, here's what you do:\nTo use Auto-reload, you need to enable the development mode first. This depends on the way you used to create and run a server:\n\n- If you use `EngineMain` to run a server, enable the development mode in a configuration file.\n- If you run a server using `embeddedServer`, you can use the `io.ktor.development` system property.\n\nWhen development mode is enabled, Ktor will be watching output files from the working directory automatically. If required, you can narrow down a set of watched folders by specifying watch paths..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-auto-reload.html", "title": "Auto-reload", "description": "Ktor allows you to overcome the limitation of restarting a server during development by using Auto-reload, which reloads application classes on code changes and provides a fast feedback loop.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:16", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "built-on": "2025-02-26T14:01:03.537500145", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Auto-reload | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogTitle": "Auto-reload | Ktor", "ogDescription": "", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:title": "Auto-reload | Ktor", "twitter:description": "", "language": "en-US", "og:site_name": "Ktor Help", "title": "Auto-reload | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "scrapeId": "31068577-1090-4a6d-b96e-e38bfcc2962f", "sourceURL": "https://ktor.io/docs/server-auto-reload.html", "url": "https://ktor.io/docs/server-auto-reload.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure watch paths in ktor?\n\nAssistant: To configure watch paths in ktor, here's what you do:\nWhen you enable development mode, Ktor starts watching output files from the working directory. For example, for a ktor-sample project build with Gradle the following folders will be watched:\n\n```\nktor-sample/build/classes/kotlin/main/META-INF\nktor-sample/build/classes/kotlin/main/com/example\nktor-sample/build/classes/kotlin/main/com\nktor-sample/build/classes/kotlin/main\nktor-sample/build/resources/main\n```\n\nWatch paths allow you to narrow down a set of watched folders. To do this, you can specify a part of a watched path. For example, to monitor changes in the ktor-sample/build/classes subfolders, pass `classes` as a watch path. Depending on the way you use to run a server, you can specify a watch path in the following ways:\n\n- In the application.conf or application.yaml file, specify the `watch` option:\n\n```\nktor {\n      development = true\n      deployment {\n          watch = [ classes ]\n      }\n}\n```\n\n```\nktor:\n      development: true\n      deployment:\n          watch:\n            - classes\n```\n\nYou can also specify several watch paths, for example:\n\n```\nwatch = [ classes, resources ]\n```\n\n```\nwatch:\n    - classes\n    - resources\n```\n\nYou can find the full example here: [autoreload-engine-main](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/autoreload-engine-main).\n\n- If you are using `embeddedServer`, pass a watch path as the `watchPaths` parameter:\n\n```\nembeddedServer(Netty, port = 8080, watchPaths = listOf(\"classes\")) {\n      routing {\n          get(\"/\") {\n              call.respondText(\"Hello, world!\")\n          }\n      }\n}.start(wait = true)\n```\n\nYou can find the full example here: [autoreload-embedded-server](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/autoreload-embedded-server)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-auto-reload.html", "title": "Auto-reload", "description": "Ktor allows you to overcome the limitation of restarting a server during development by using Auto-reload, which reloads application classes on code changes and provides a fast feedback loop.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:16", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "built-on": "2025-02-26T14:01:03.537500145", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Auto-reload | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogTitle": "Auto-reload | Ktor", "ogDescription": "", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:title": "Auto-reload | Ktor", "twitter:description": "", "language": "en-US", "og:site_name": "Ktor Help", "title": "Auto-reload | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "scrapeId": "31068577-1090-4a6d-b96e-e38bfcc2962f", "sourceURL": "https://ktor.io/docs/server-auto-reload.html", "url": "https://ktor.io/docs/server-auto-reload.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I recompile on changes in ktor?\n\nAssistant: To recompile on changes in ktor, here's what you do:\nSince Auto-reload detects changes in output files, you need to rebuild a project. You can do this manually in IntelliJ IDEA or enable continuous build execution in Gradle using the `-t` command-line option.\n\n- To rebuild a project manually in IntelliJ IDEA, select Build | Rebuild Project from the main menu.\n\n- To rebuild a project automatically using Gradle, you can run the `build` task with the `-t` option in a terminal:\n\n```\n./gradlew -t build\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-auto-reload.html", "title": "Auto-reload", "description": "Ktor allows you to overcome the limitation of restarting a server during development by using Auto-reload, which reloads application classes on code changes and provides a fast feedback loop.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:16", "type": "section_detail", "page_metadata": {"ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "built-on": "2025-02-26T14:01:03.537500145", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Auto-reload | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogTitle": "Auto-reload | Ktor", "ogDescription": "", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:title": "Auto-reload | Ktor", "twitter:description": "", "language": "en-US", "og:site_name": "Ktor Help", "title": "Auto-reload | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "scrapeId": "31068577-1090-4a6d-b96e-e38bfcc2962f", "sourceURL": "https://ktor.io/docs/server-auto-reload.html", "url": "https://ktor.io/docs/server-auto-reload.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Auto-reload in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Watch paths in application.conf**:\n\n```yaml\nktor {\n      development = true\n      deployment {\n          watch = [ classes ]\n      }\n}\n```\n\nThis snippet shows you how to watch paths in application.conf, which is an important aspect of auto-reload.\n\n**Watch paths in application.yaml**:\n\n```yaml\nktor:\n      development: true\n      deployment:\n          watch:\n            - classes\n```\n\nThis snippet shows you how to watch paths in application.yaml, which is an important aspect of auto-reload.\n\n**Multiple watch paths in application.conf**:\n\n```yaml\nwatch = [ classes, resources ]\n```\n\nThis snippet shows you how to multiple watch paths in application.conf, which is an important aspect of auto-reload.\n\n**Multiple watch paths in application.yaml**:\n\n```yaml\nwatch:\n    - classes\n    - resources\n```\n\nThis snippet shows you how to multiple watch paths in application.yaml, which is an important aspect of auto-reload.\n\n**Embedded server with watch paths**:\n\n```yaml\nembeddedServer(Netty, port = 8080, watchPaths = listOf(\"classes\")) {\n      routing {\n          get(\"/\") {\n              call.respondText(\"Hello, world!\")\n          }\n      }\n}.start(wait = true)\n```\n\nThis snippet shows you how to embedded server with watch paths, which is an important aspect of auto-reload.\n\n**Gradle build command**:\n\n```yaml\n./gradlew -t build\n```\n\nThis snippet shows you how to gradle build command, which is an important aspect of auto-reload.\n\n**Skip tests during Gradle build**:\n\n```yaml\n./gradlew -t build -x test -i\n```\n\nThis snippet shows you how to skip tests during gradle build, which is an important aspect of auto-reload.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-auto-reload.html", "title": "Auto-reload", "description": "Ktor allows you to overcome the limitation of restarting a server during development by using Auto-reload, which reloads application classes on code changes and provides a fast feedback loop.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:16", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "built-on": "2025-02-26T14:01:03.537500145", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Auto-reload | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogTitle": "Auto-reload | Ktor", "ogDescription": "", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:title": "Auto-reload | Ktor", "twitter:description": "", "language": "en-US", "og:site_name": "Ktor Help", "title": "Auto-reload | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "scrapeId": "31068577-1090-4a6d-b96e-e38bfcc2962f", "sourceURL": "https://ktor.io/docs/server-auto-reload.html", "url": "https://ktor.io/docs/server-auto-reload.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Auto-reload in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo skip running tests when reloading a project, you can pass the `-x` option to the `build` task.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-auto-reload.html", "title": "Auto-reload", "description": "Ktor allows you to overcome the limitation of restarting a server during development by using Auto-reload, which reloads application classes on code changes and provides a fast feedback loop.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:16", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogUrl": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "built-on": "2025-02-26T14:01:03.537500145", "og:type": "website", "og:url": "https://ktor.io/docs/3.1.1/server-auto-reload.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:title": "Auto-reload | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "ogTitle": "Auto-reload | Ktor", "ogDescription": "", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:title": "Auto-reload | Ktor", "twitter:description": "", "language": "en-US", "og:site_name": "Ktor Help", "title": "Auto-reload | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "scrapeId": "31068577-1090-4a6d-b96e-e38bfcc2962f", "sourceURL": "https://ktor.io/docs/server-auto-reload.html", "url": "https://ktor.io/docs/server-auto-reload.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Migrating from 2.0.x to 2.2.x is in ktor?\n\nAssistant: Sure, I'd be happy to explain Migrating from 2.0.x to 2.2.x in ktor.\n\n# Migrating from 2.0.x to 2.2.x\n\nThis guide provides instructions on how to migrate your Ktor application from the 2.0.x version to 2.2.x.Here's a quick rundown of what this is about:\n\n## Ktor Server\n\n### Cookies\n\nWith v2.2.0, the following API members related to configuring response cookies are changed:\n\n- The `maxAge` parameter type passed to the `append` function is changed from `Int` to `Long`.\n\n- The `appendExpired` function is deprecated. Use the `append` function with the `expires` parameter instead.\n\n### Request address information\n\nStarting with the 2.2.0 version, the `RequestConnectionPoint.host` and `RequestConnectionPoint.port` properties used to get the hostname/port to which the request was made are deprecated.\n\n```\nget(\"/hello\") {\n    val originHost = call.request.origin.host\n    val originPort = call.request.origin.port\n}\n```\n\nUse `RequestConnectionPoint.serverHost` and `RequestConnectionPoint.serverPort` instead. We've also added the `localHost`/ `localPort` properties that return the hostname/port on which the request was received. You can learn more from the Original request information.\n\n### Merging configurations\n\nBefore v2.2.0, the `List<ApplicationConfig>.merge()` function is used to merge application configurations. In case both configurations have the same key, the resulting configuration takes the value from the first one. With this release, the following API is introduced to improve this behavior:\n\n- `public fun ApplicationConfig.withFallback(other: ApplicationConfig): ApplicationConfig`: this function works the same way as `merge()` and takes the value from the first configuration.\n\n- `public fun ApplicationConfig.mergeWith(other: ApplicationConfig): ApplicationConfig`: the resulting configuration takes the value from the second one.\n\n## Ktor Client\n\n### Caching: Persistent storage\n\nWith v2.2.0, the following API related to response caching is deprecated:\n\n- The `HttpCacheStorage` class is replaced with the `CacheStorage` interface, which can be used to implement a persistent storage for the required platform.\n\n- The `publicStorage`/ `privateStorage` properties are replaced with corresponding functions that accept `CacheStorage` instances.\n\n### Custom plugins\n\nStarting with the 2.2.0 release, Ktor provides a new API for creating custom client plugins. To learn more, see Custom client plugins.\n\n## New memory model\n\nWith v2.2.0, Ktor uses the 1.7.20 version of Kotlin, in which the new Kotlin/Native memory model is enabled by default. This means that you don't need to enable it explicitly for Native server or client engines targeting Kotlin/Native.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/migration-to-22x.html", "title": "Migrating from 2.0.x to 2.2.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.0.x version to 2.2.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:42", "type": "overview", "page_metadata": {"og:type": "website", "twitter:description": "", "og:title": "Migrating from 2.0.x to 2.2.x | Ktor", "ogSiteName": "Ktor Help", "language": "en-US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "built-on": "2025-02-26T14:01:07.363115799", "twitter:title": "Migrating from 2.0.x to 2.2.x | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Migrating from 2.0.x to 2.2.x | Ktor", "title": "Migrating from 2.0.x to 2.2.x | Ktor Documentation", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "twitter:card": "summary_large_image", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "df079542-3403-4464-a71c-035e64dfa100", "sourceURL": "https://ktor.io/docs/migration-to-22x.html", "url": "https://ktor.io/docs/migration-to-22x.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I ktor server in ktor?\n\nAssistant: To ktor server in ktor, here's what you do:\n### Cookies\n\nWith v2.2.0, the following API members related to configuring response cookies are changed:\n\n- The `maxAge` parameter type passed to the `append` function is changed from `Int` to `Long`.\n\n- The `appendExpired` function is deprecated. Use the `append` function with the `expires` parameter instead.\n\n### Request address information\n\nStarting with the 2.2.0 version, the `RequestConnectionPoint.host` and `RequestConnectionPoint.port` properties used to get the hostname/port to which the request was made are deprecated.\n\n```\nget(\"/hello\") {\n    val originHost = call.request.origin.host\n    val originPort = call.request.origin.port\n}\n```\n\nUse `RequestConnectionPoint.serverHost` and `RequestConnectionPoint.serverPort` instead. We've also added the `localHost`/ `localPort` properties that return the hostname/port on which the request was received. You can learn more from the Original request information.\n\n### Merging configurations\n\nBefore v2.2.0, the `List<ApplicationConfig>.merge()` function is used to merge application configurations. In case both configurations have the same key, the resulting configuration takes the value from the first one. With this release, the following API is introduced to improve this behavior:\n\n- `public fun ApplicationConfig.withFallback(other: ApplicationConfig): ApplicationConfig`: this function works the same way as `merge()` and takes the value from the first configuration.\n\n- `public fun ApplicationConfig.mergeWith(other: ApplicationConfig): ApplicationConfig`: the resulting configuration takes the value from the second one..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migration-to-22x.html", "title": "Migrating from 2.0.x to 2.2.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.0.x version to 2.2.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:42", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:description": "", "og:title": "Migrating from 2.0.x to 2.2.x | Ktor", "ogSiteName": "Ktor Help", "language": "en-US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "built-on": "2025-02-26T14:01:07.363115799", "twitter:title": "Migrating from 2.0.x to 2.2.x | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Migrating from 2.0.x to 2.2.x | Ktor", "title": "Migrating from 2.0.x to 2.2.x | Ktor Documentation", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "twitter:card": "summary_large_image", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "df079542-3403-4464-a71c-035e64dfa100", "sourceURL": "https://ktor.io/docs/migration-to-22x.html", "url": "https://ktor.io/docs/migration-to-22x.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I ktor client in ktor?\n\nAssistant: To ktor client in ktor, here's what you do:\n### Caching: Persistent storage\n\nWith v2.2.0, the following API related to response caching is deprecated:\n\n- The `HttpCacheStorage` class is replaced with the `CacheStorage` interface, which can be used to implement a persistent storage for the required platform.\n\n- The `publicStorage`/ `privateStorage` properties are replaced with corresponding functions that accept `CacheStorage` instances.\n\n### Custom plugins\n\nStarting with the 2.2.0 release, Ktor provides a new API for creating custom client plugins. To learn more, see Custom client plugins..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migration-to-22x.html", "title": "Migrating from 2.0.x to 2.2.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.0.x version to 2.2.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:42", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:description": "", "og:title": "Migrating from 2.0.x to 2.2.x | Ktor", "ogSiteName": "Ktor Help", "language": "en-US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "built-on": "2025-02-26T14:01:07.363115799", "twitter:title": "Migrating from 2.0.x to 2.2.x | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Migrating from 2.0.x to 2.2.x | Ktor", "title": "Migrating from 2.0.x to 2.2.x | Ktor Documentation", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "twitter:card": "summary_large_image", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "df079542-3403-4464-a71c-035e64dfa100", "sourceURL": "https://ktor.io/docs/migration-to-22x.html", "url": "https://ktor.io/docs/migration-to-22x.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I new memory model in ktor?\n\nAssistant: To new memory model in ktor, here's what you do:\nWith v2.2.0, Ktor uses the 1.7.20 version of Kotlin, in which the new Kotlin/Native memory model is enabled by default. This means that you don't need to enable it explicitly for Native server or client engines targeting Kotlin/Native..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migration-to-22x.html", "title": "Migrating from 2.0.x to 2.2.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.0.x version to 2.2.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:42", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:description": "", "og:title": "Migrating from 2.0.x to 2.2.x | Ktor", "ogSiteName": "Ktor Help", "language": "en-US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "built-on": "2025-02-26T14:01:07.363115799", "twitter:title": "Migrating from 2.0.x to 2.2.x | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Migrating from 2.0.x to 2.2.x | Ktor", "title": "Migrating from 2.0.x to 2.2.x | Ktor Documentation", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "twitter:card": "summary_large_image", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "df079542-3403-4464-a71c-035e64dfa100", "sourceURL": "https://ktor.io/docs/migration-to-22x.html", "url": "https://ktor.io/docs/migration-to-22x.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Migrating from 2.0.x to 2.2.x in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Request address information example**:\n\n```yaml\nget(\"/hello\") {\n    val originHost = call.request.origin.host\n    val originPort = call.request.origin.port\n}\n```\n\nThis snippet shows you how to request address information example, which is an important aspect of migrating from 2.0.x to 2.2.x.\n\n", "metadata": {"source_url": "https://ktor.io/docs/migration-to-22x.html", "title": "Migrating from 2.0.x to 2.2.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.0.x version to 2.2.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:42", "type": "code_examples", "page_metadata": {"og:type": "website", "twitter:description": "", "og:title": "Migrating from 2.0.x to 2.2.x | Ktor", "ogSiteName": "Ktor Help", "language": "en-US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "built-on": "2025-02-26T14:01:07.363115799", "twitter:title": "Migrating from 2.0.x to 2.2.x | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Migrating from 2.0.x to 2.2.x | Ktor", "title": "Migrating from 2.0.x to 2.2.x | Ktor Documentation", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "twitter:card": "summary_large_image", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "df079542-3403-4464-a71c-035e64dfa100", "sourceURL": "https://ktor.io/docs/migration-to-22x.html", "url": "https://ktor.io/docs/migration-to-22x.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Migrating from 2.0.x to 2.2.x in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe API marked with the WARNING deprecation level will continue working till the 3.0.0 release. You can learn more about deprecation levels from Deprecated.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/migration-to-22x.html", "title": "Migrating from 2.0.x to 2.2.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.0.x version to 2.2.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:08:42", "type": "best_practices", "page_metadata": {"og:type": "website", "twitter:description": "", "og:title": "Migrating from 2.0.x to 2.2.x | Ktor", "ogSiteName": "Ktor Help", "language": "en-US", "og:locale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:description": "", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "built-on": "2025-02-26T14:01:07.363115799", "twitter:title": "Migrating from 2.0.x to 2.2.x | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogTitle": "Migrating from 2.0.x to 2.2.x | Ktor", "title": "Migrating from 2.0.x to 2.2.x | Ktor Documentation", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/migration-to-22x.html", "twitter:card": "summary_large_image", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "df079542-3403-4464-a71c-035e64dfa100", "sourceURL": "https://ktor.io/docs/migration-to-22x.html", "url": "https://ktor.io/docs/migration-to-22x.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Swagger UI is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Swagger UI in ktor.\n\n# Server Plugin Swagger UI\n\nKtor allows you to generate and serve Swagger UI for your project based on the existing OpenAPI specification. With Swagger UI, you can visualize and interact with the API resources.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nServing Swagger UI requires adding the `ktor-server-swagger` artifact in the build script:\n\nGradle (Kotlin)\n\nGradle (Groovy)\n\nMaven\n\n```\nimplementation(\"io.ktor:ktor-server-swagger:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-server-swagger:$ktor_version\"\n```\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-swagger-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Configure Swagger UI\n\nTo serve Swagger UI, you need to call the [swaggerUI](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-swagger/io.ktor.server.plugins.swagger/swagger-u-i.html) method that creates a `GET` endpoint with Swagger UI at the `path` rendered from the OpenAPI specification placed at `swaggerFile`:\n\n```\nimport io.ktor.server.plugins.swagger.*\n\n// ...\nrouting {\n    swaggerUI(path = \"swagger\", swaggerFile = \"openapi/documentation.yaml\")\n}\n```\n\nThis method tries to look up the OpenAPI specification in the application resources. Otherwise, it tries to read the OpenAPI specification from the file system using `java.io.File`.\n\nOptionally, you can customize Swagger UI inside the `swaggerUI` block. For example, you can use another Swagger UI version or apply a custom style.\n\n```\nrouting {\n    swaggerUI(path = \"swagger\", swaggerFile = \"openapi/documentation.yaml\") {\n        version = \"4.15.5\"\n    }\n}\n```\n\nYou can now [run](https://ktor.io/docs/server-run.html) the application and open the `/swagger` page to see the available endpoints, and test them.\n\n## Configure CORS\n\nTo make sure your API works nicely with Swagger UI, you need to set up a policy for [Cross-Origin Resource Sharing (CORS)](https://ktor.io/docs/server-cors.html). The example below applies the following CORS configuration:\n\n- `anyHost` enables cross-origin requests from any host;\n\n- `allowHeader` allows the `Content-Type` client header used in [content negotiation](https://ktor.io/docs/server-serialization.html).\n\n```\ninstall(CORS) {\n    anyHost()\n    allowHeader(HttpHeaders.ContentType)\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-swagger-ui.html", "title": "Server Plugin Swagger UI", "description": "Ktor allows you to generate and serve Swagger UI for your project based on the existing OpenAPI specification. With Swagger UI, you can visualize and interact with the API resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:09:40", "type": "overview", "page_metadata": {"og:type": "website", "title": "Swagger UI | Ktor Documentation", "ogTitle": "Swagger UI | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "og:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:title": "Swagger UI | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.764060804", "og:title": "Swagger UI | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "0f75132d-370f-4c2f-89ad-a22769a7d1a9", "sourceURL": "https://ktor.io/docs/server-swagger-ui.html", "url": "https://ktor.io/docs/server-swagger-ui.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nServing Swagger UI requires adding the `ktor-server-swagger` artifact in the build script:\n\nGradle (Kotlin)\n\nGradle (Groovy)\n\nMaven\n\n```\nimplementation(\"io.ktor:ktor-server-swagger:$ktor_version\")\n```\n\n```\nimplementation \"io.ktor:ktor-server-swagger:$ktor_version\"\n```\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-swagger-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-swagger-ui.html", "title": "Server Plugin Swagger UI", "description": "Ktor allows you to generate and serve Swagger UI for your project based on the existing OpenAPI specification. With Swagger UI, you can visualize and interact with the API resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:09:40", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "Swagger UI | Ktor Documentation", "ogTitle": "Swagger UI | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "og:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:title": "Swagger UI | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.764060804", "og:title": "Swagger UI | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "0f75132d-370f-4c2f-89ad-a22769a7d1a9", "sourceURL": "https://ktor.io/docs/server-swagger-ui.html", "url": "https://ktor.io/docs/server-swagger-ui.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure swagger ui in ktor?\n\nAssistant: To configure swagger ui in ktor, here's what you do:\nTo serve Swagger UI, you need to call the [swaggerUI](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-swagger/io.ktor.server.plugins.swagger/swagger-u-i.html) method that creates a `GET` endpoint with Swagger UI at the `path` rendered from the OpenAPI specification placed at `swaggerFile`:\n\n```\nimport io.ktor.server.plugins.swagger.*\n\n// ...\nrouting {\n    swaggerUI(path = \"swagger\", swaggerFile = \"openapi/documentation.yaml\")\n}\n```\n\nThis method tries to look up the OpenAPI specification in the application resources. Otherwise, it tries to read the OpenAPI specification from the file system using `java.io.File`.\n\nOptionally, you can customize Swagger UI inside the `swaggerUI` block. For example, you can use another Swagger UI version or apply a custom style.\n\n```\nrouting {\n    swaggerUI(path = \"swagger\", swaggerFile = \"openapi/documentation.yaml\") {\n        version = \"4.15.5\"\n    }\n}\n```\n\nYou can now [run](https://ktor.io/docs/server-run.html) the application and open the `/swagger` page to see the available endpoints, and test them..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-swagger-ui.html", "title": "Server Plugin Swagger UI", "description": "Ktor allows you to generate and serve Swagger UI for your project based on the existing OpenAPI specification. With Swagger UI, you can visualize and interact with the API resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:09:40", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "Swagger UI | Ktor Documentation", "ogTitle": "Swagger UI | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "og:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:title": "Swagger UI | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.764060804", "og:title": "Swagger UI | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "0f75132d-370f-4c2f-89ad-a22769a7d1a9", "sourceURL": "https://ktor.io/docs/server-swagger-ui.html", "url": "https://ktor.io/docs/server-swagger-ui.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure cors in ktor?\n\nAssistant: To configure cors in ktor, here's what you do:\nTo make sure your API works nicely with Swagger UI, you need to set up a policy for [Cross-Origin Resource Sharing (CORS)](https://ktor.io/docs/server-cors.html). The example below applies the following CORS configuration:\n\n- `anyHost` enables cross-origin requests from any host;\n\n- `allowHeader` allows the `Content-Type` client header used in [content negotiation](https://ktor.io/docs/server-serialization.html).\n\n```\ninstall(CORS) {\n    anyHost()\n    allowHeader(HttpHeaders.ContentType)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-swagger-ui.html", "title": "Server Plugin Swagger UI", "description": "Ktor allows you to generate and serve Swagger UI for your project based on the existing OpenAPI specification. With Swagger UI, you can visualize and interact with the API resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:09:40", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "Swagger UI | Ktor Documentation", "ogTitle": "Swagger UI | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "og:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:title": "Swagger UI | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.764060804", "og:title": "Swagger UI | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "0f75132d-370f-4c2f-89ad-a22769a7d1a9", "sourceURL": "https://ktor.io/docs/server-swagger-ui.html", "url": "https://ktor.io/docs/server-swagger-ui.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Swagger UI in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-swagger:$ktor_version\")\nimplementation \"io.ktor:ktor-server-swagger:$ktor_version\"\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-swagger-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of server plugin swagger ui.\n\n**Configure Swagger UI**:\n\n```yaml\nimport io.ktor.server.plugins.swagger.*\n\n// ...\nrouting {\n    swaggerUI(path = \"swagger\", swaggerFile = \"openapi/documentation.yaml\")\n}\n\nrouting {\n    swaggerUI(path = \"swagger\", swaggerFile = \"openapi/documentation.yaml\") {\n        version = \"4.15.5\"\n    }\n}\n```\n\nThis snippet shows you how to configure swagger ui, which is an important aspect of server plugin swagger ui.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-swagger-ui.html", "title": "Server Plugin Swagger UI", "description": "Ktor allows you to generate and serve Swagger UI for your project based on the existing OpenAPI specification. With Swagger UI, you can visualize and interact with the API resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:09:40", "type": "code_examples", "page_metadata": {"og:type": "website", "title": "Swagger UI | Ktor Documentation", "ogTitle": "Swagger UI | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "og:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:title": "Swagger UI | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.764060804", "og:title": "Swagger UI | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "0f75132d-370f-4c2f-89ad-a22769a7d1a9", "sourceURL": "https://ktor.io/docs/server-swagger-ui.html", "url": "https://ktor.io/docs/server-swagger-ui.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Swagger UI in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe following tools are available for generating OpenAPI definitions from code and vice versa:\n\nThe Ktor plugin for IntelliJ IDEA provides the ability to generate OpenAPI documentation for server-side Ktor applications.\n\nThe OpenAPI generator allows you to create a Ktor project from your API definitions by using the kotlin-server generator. Alternatively, you can use IntelliJ IDEA's functionality.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-swagger-ui.html", "title": "Server Plugin Swagger UI", "description": "Ktor allows you to generate and serve Swagger UI for your project based on the existing OpenAPI specification. With Swagger UI, you can visualize and interact with the API resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:09:40", "type": "best_practices", "page_metadata": {"og:type": "website", "title": "Swagger UI | Ktor Documentation", "ogTitle": "Swagger UI | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "og:description": "", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:title": "Swagger UI | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:04.764060804", "og:title": "Swagger UI | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-swagger-ui.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "twitter:description": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:locale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "0f75132d-370f-4c2f-89ad-a22769a7d1a9", "sourceURL": "https://ktor.io/docs/server-swagger-ui.html", "url": "https://ktor.io/docs/server-swagger-ui.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin User agent is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin User agent in ktor.\n\n# Client Plugin User agent\n\nThe UserAgent plugin adds a User-Agent header to all requests.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nUserAgent only requires the ktor-client-core artifact and doesn't need any specific dependencies.\n\n## Install and configure UserAgent\n\nTo install UserAgent, pass it to the install function inside a client configuration block. Then, use the agent property to specify the User-Agent value:\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.*\n// ...\nval client = HttpClient(CIO) {\n    install(UserAgent) {\n        agent = \"Ktor client\"\n    }\n}\n```\n\nKtor also allows you to add a browser- or curl-like User-Agent value using corresponding functions:\n\n```kotlin\nval client = HttpClient(CIO) {\n    BrowserUserAgent()\n    // ... or\n    CurlUserAgent()\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-user-agent.html", "title": "Client Plugin User agent", "description": "The UserAgent plugin adds a User-Agent header to all requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 05:10:17", "type": "overview", "page_metadata": {"ogTitle": "User agent | Ktor", "build-number": "707", "built-on": "2025-02-26T14:01:02.497531056", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "User agent | Ktor Documentation", "ogLocale": "en_US", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:title": "User agent | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-user-agent.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:description": "", "twitter:description": "", "ogSiteName": "Ktor Help", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "User agent | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-user-agent.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "b5f1706f-1836-4461-8e1a-564f99496e0b", "sourceURL": "https://ktor.io/docs/client-user-agent.html", "url": "https://ktor.io/docs/client-user-agent.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nUserAgent only requires the ktor-client-core artifact and doesn't need any specific dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-user-agent.html", "title": "Client Plugin User agent", "description": "The UserAgent plugin adds a User-Agent header to all requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 05:10:17", "type": "section_detail", "page_metadata": {"ogTitle": "User agent | Ktor", "build-number": "707", "built-on": "2025-02-26T14:01:02.497531056", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "User agent | Ktor Documentation", "ogLocale": "en_US", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:title": "User agent | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-user-agent.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:description": "", "twitter:description": "", "ogSiteName": "Ktor Help", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "User agent | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-user-agent.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "b5f1706f-1836-4461-8e1a-564f99496e0b", "sourceURL": "https://ktor.io/docs/client-user-agent.html", "url": "https://ktor.io/docs/client-user-agent.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install and configure useragent in ktor?\n\nAssistant: To install and configure useragent in ktor, here's what you do:\nTo install UserAgent, pass it to the install function inside a client configuration block. Then, use the agent property to specify the User-Agent value:\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.*\n// ...\nval client = HttpClient(CIO) {\n    install(UserAgent) {\n        agent = \"Ktor client\"\n    }\n}\n```\n\nKtor also allows you to add a browser- or curl-like User-Agent value using corresponding functions:\n\n```kotlin\nval client = HttpClient(CIO) {\n    BrowserUserAgent()\n    // ... or\n    CurlUserAgent()\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-user-agent.html", "title": "Client Plugin User agent", "description": "The UserAgent plugin adds a User-Agent header to all requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 05:10:17", "type": "section_detail", "page_metadata": {"ogTitle": "User agent | Ktor", "build-number": "707", "built-on": "2025-02-26T14:01:02.497531056", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "User agent | Ktor Documentation", "ogLocale": "en_US", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:title": "User agent | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-user-agent.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:description": "", "twitter:description": "", "ogSiteName": "Ktor Help", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "User agent | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-user-agent.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "b5f1706f-1836-4461-8e1a-564f99496e0b", "sourceURL": "https://ktor.io/docs/client-user-agent.html", "url": "https://ktor.io/docs/client-user-agent.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin User agent in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install UserAgent Example**:\n\n```yaml\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.*\n// ...\nval client = HttpClient(CIO) {\n    install(UserAgent) {\n        agent = \"Ktor client\"\n    }\n}\n```\n```\n\nThis snippet shows you how to install useragent example, which is an important aspect of client plugin user agent.\n\n**Browser and Curl UserAgent Example**:\n\n```yaml\n```kotlin\nval client = HttpClient(CIO) {\n    BrowserUserAgent()\n    // ... or\n    CurlUserAgent()\n}\n```\n```\n\nThis snippet shows you how to browser and curl useragent example, which is an important aspect of client plugin user agent.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-user-agent.html", "title": "Client Plugin User agent", "description": "The UserAgent plugin adds a User-Agent header to all requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 05:10:17", "type": "code_examples", "page_metadata": {"ogTitle": "User agent | Ktor", "build-number": "707", "built-on": "2025-02-26T14:01:02.497531056", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "User agent | Ktor Documentation", "ogLocale": "en_US", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:title": "User agent | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-user-agent.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:description": "", "twitter:description": "", "ogSiteName": "Ktor Help", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "User agent | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-user-agent.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "b5f1706f-1836-4461-8e1a-564f99496e0b", "sourceURL": "https://ktor.io/docs/client-user-agent.html", "url": "https://ktor.io/docs/client-user-agent.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin User agent in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure to include the ktor-client-core dependency for using UserAgent.\n\nUse the install function within a client configuration block to set up UserAgent.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-user-agent.html", "title": "Client Plugin User agent", "description": "The UserAgent plugin adds a User-Agent header to all requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 05:10:17", "type": "best_practices", "page_metadata": {"ogTitle": "User agent | Ktor", "build-number": "707", "built-on": "2025-02-26T14:01:02.497531056", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "title": "User agent | Ktor Documentation", "ogLocale": "en_US", "og:site_name": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:title": "User agent | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/client-user-agent.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:description": "", "twitter:description": "", "ogSiteName": "Ktor Help", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "User agent | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-user-agent.html", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "b5f1706f-1836-4461-8e1a-564f99496e0b", "sourceURL": "https://ktor.io/docs/client-user-agent.html", "url": "https://ktor.io/docs/client-user-agent.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Intercepting requests using HttpSend is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Intercepting requests using HttpSend in ktor.\n\n# Client Plugin Intercepting requests using HttpSend\n\nThe HttpSend plugin allows you to monitor and retry HTTP calls depending on a response, enabling features like call logging or retrying requests on error responses.Here's a quick rundown of what this is about:\n\n## Overview\n\nThe HttpSend plugin allows you to monitor and retry HTTP calls depending on a response. For instance, you can implement call logging or retry a request if a server returns an error response (with the 4xx or 5xx status code).\n\n## Installation\n\nThe HttpSend plugin doesn't require installation. To use it, pass HttpSend to the HttpClient.plugin function and call the intercept method.\n\n## Example Usage\n\nThe example below shows how to retry a request depending on the response status code.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-http-send.html", "title": "Client Plugin Intercepting requests using HttpSend", "description": "The HttpSend plugin allows you to monitor and retry HTTP calls depending on a response, enabling features like call logging or retrying requests on error responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:10:27", "type": "overview", "page_metadata": {"ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Intercepting requests using HttpSend | Ktor", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Intercepting requests using HttpSend | Ktor", "title": "Intercepting requests using HttpSend | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/client-http-send.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:02.65450953", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-http-send.html", "twitter:card": "summary_large_image", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Intercepting requests using HttpSend | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2d7e7203-bb04-4358-936f-a3b8e34ff0ee", "sourceURL": "https://ktor.io/docs/client-http-send.html", "url": "https://ktor.io/docs/client-http-send.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I overview in ktor?\n\nAssistant: To overview in ktor, here's what you do:\nThe HttpSend plugin allows you to monitor and retry HTTP calls depending on a response. For instance, you can implement call logging or retry a request if a server returns an error response (with the 4xx or 5xx status code)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-http-send.html", "title": "Client Plugin Intercepting requests using HttpSend", "description": "The HttpSend plugin allows you to monitor and retry HTTP calls depending on a response, enabling features like call logging or retrying requests on error responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:10:27", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Intercepting requests using HttpSend | Ktor", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Intercepting requests using HttpSend | Ktor", "title": "Intercepting requests using HttpSend | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/client-http-send.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:02.65450953", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-http-send.html", "twitter:card": "summary_large_image", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Intercepting requests using HttpSend | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2d7e7203-bb04-4358-936f-a3b8e34ff0ee", "sourceURL": "https://ktor.io/docs/client-http-send.html", "url": "https://ktor.io/docs/client-http-send.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I installation in ktor?\n\nAssistant: To installation in ktor, here's what you do:\nThe HttpSend plugin doesn't require installation. To use it, pass HttpSend to the HttpClient.plugin function and call the intercept method..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-http-send.html", "title": "Client Plugin Intercepting requests using HttpSend", "description": "The HttpSend plugin allows you to monitor and retry HTTP calls depending on a response, enabling features like call logging or retrying requests on error responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:10:27", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Intercepting requests using HttpSend | Ktor", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Intercepting requests using HttpSend | Ktor", "title": "Intercepting requests using HttpSend | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/client-http-send.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:02.65450953", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-http-send.html", "twitter:card": "summary_large_image", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Intercepting requests using HttpSend | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2d7e7203-bb04-4358-936f-a3b8e34ff0ee", "sourceURL": "https://ktor.io/docs/client-http-send.html", "url": "https://ktor.io/docs/client-http-send.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example usage in ktor?\n\nAssistant: To example usage in ktor, here's what you do:\nThe example below shows how to retry a request depending on the response status code..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-http-send.html", "title": "Client Plugin Intercepting requests using HttpSend", "description": "The HttpSend plugin allows you to monitor and retry HTTP calls depending on a response, enabling features like call logging or retrying requests on error responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:10:27", "type": "section_detail", "page_metadata": {"ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Intercepting requests using HttpSend | Ktor", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Intercepting requests using HttpSend | Ktor", "title": "Intercepting requests using HttpSend | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/client-http-send.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:02.65450953", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-http-send.html", "twitter:card": "summary_large_image", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Intercepting requests using HttpSend | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2d7e7203-bb04-4358-936f-a3b8e34ff0ee", "sourceURL": "https://ktor.io/docs/client-http-send.html", "url": "https://ktor.io/docs/client-http-send.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Intercepting requests using HttpSend in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Retrying a Request Based on Response Status Code**:\n\n```yaml\nval client = HttpClient(Apache)\nclient.plugin(HttpSend).intercept { request ->\n    val originalCall = execute(request)\n    if (originalCall.response.status.value !in 100..399) {\n        execute(request)\n    } else {\n        originalCall\n    }\n}\n```\n\nThis snippet shows you how to retrying a request based on response status code, which is an important aspect of client plugin intercepting requests using httpsend.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-http-send.html", "title": "Client Plugin Intercepting requests using HttpSend", "description": "The HttpSend plugin allows you to monitor and retry HTTP calls depending on a response, enabling features like call logging or retrying requests on error responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:10:27", "type": "code_examples", "page_metadata": {"ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Intercepting requests using HttpSend | Ktor", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Intercepting requests using HttpSend | Ktor", "title": "Intercepting requests using HttpSend | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/client-http-send.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:02.65450953", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-http-send.html", "twitter:card": "summary_large_image", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Intercepting requests using HttpSend | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2d7e7203-bb04-4358-936f-a3b8e34ff0ee", "sourceURL": "https://ktor.io/docs/client-http-send.html", "url": "https://ktor.io/docs/client-http-send.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Intercepting requests using HttpSend in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the HttpSend plugin to monitor and retry HTTP calls based on response status codes.\n\nImplement call logging to track the behavior of your HTTP requests.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-http-send.html", "title": "Client Plugin Intercepting requests using HttpSend", "description": "The HttpSend plugin allows you to monitor and retry HTTP calls depending on a response, enabling features like call logging or retrying requests on error responses.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:10:27", "type": "best_practices", "page_metadata": {"ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Intercepting requests using HttpSend | Ktor", "og:type": "website", "og:locale": "en_US", "twitter:creator": "@JetBrainsKtor", "og:title": "Intercepting requests using HttpSend | Ktor", "title": "Intercepting requests using HttpSend | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/client-http-send.html", "ogLocale": "en_US", "built-on": "2025-02-26T14:01:02.65450953", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-http-send.html", "twitter:card": "summary_large_image", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "language": "en-US", "twitter:title": "Intercepting requests using HttpSend | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "scrapeId": "2d7e7203-bb04-4358-936f-a3b8e34ff0ee", "sourceURL": "https://ktor.io/docs/client-http-send.html", "url": "https://ktor.io/docs/client-http-send.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Supported platforms is in ktor?\n\nAssistant: Sure, I'd be happy to explain Supported platforms in ktor.\n\n# Supported platforms\n\nThe Ktor HTTP client can be used on different platforms supported by Kotlin.Here's a quick rundown of what this is about:\n\n## Supported platforms\n\nThe Ktor HTTP client can be used on different platforms supported by Kotlin:\n\n- JVM\n\n- [Android](https://kotlinlang.org/docs/android-overview.html)\n\n- [Native](https://kotlinlang.org/docs/native-overview.html)\n\n> ### tip\n>\n> Using Ktor in a Kotlin/Native project requires a [new memory manager](https://kotlinlang.org/docs/native-memory-manager.html), which is enabled by default starting with Kotlin 1.7.20.\n\n- [JavaScript](https://kotlinlang.org/docs/js-overview.html)\n\nYou can use it in [multiplatform projects](https://kotlinlang.org/docs/multiplatform.html), be it a multiplatform mobile or a full-stack web application. The following [targets](https://kotlinlang.org/docs/multiplatform-dsl-reference.html#targets) are supported for multiplatform projects:\n\n| Target platform | Target preset |\n| --- | --- |\n| Kotlin/JVM | - `jvm` |\n| Kotlin/JS | - `js` |\n| Android | - `android` |\n| iOS | - `iosArm32`<br>  <br>- `iosArm64`<br>  <br>- `iosX64`<br>  <br>- `iosSimulatorArm64` |\n| watchOS | - `watchosArm32`<br>  <br>- `watchosArm64`<br>  <br>- `watchosX86`<br>  <br>- `watchosX64`<br>  <br>- `watchosSimulatorArm64` |\n| tvOS | - `tvosArm64`<br>  <br>- `tvosX64`<br>  <br>- `tvosSimulatorArm64` |\n| macOS | - `macosX64`<br>  <br>- `macosArm64` |\n| Linux | - `linuxX64` |\n| Windows | - `mingwX64` |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-supported-platforms.html", "title": "Supported platforms", "description": "The Ktor HTTP client can be used on different platforms supported by Kotlin.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:10:36", "type": "overview", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-supported-platforms.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogDescription": "", "og:site_name": "Ktor Help", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.605760381", "og:title": "Supported platforms | Ktor", "build-number": "707", "ogTitle": "Supported platforms | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:title": "Supported platforms | Ktor", "ogSiteName": "Ktor Help", "og:description": "", "title": "Supported platforms | Ktor Documentation", "language": "en-US", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/client-supported-platforms.html", "scrapeId": "0e44bc65-71d3-4e89-b2ef-0e89ca42e7dc", "sourceURL": "https://ktor.io/docs/client-supported-platforms.html", "url": "https://ktor.io/docs/client-supported-platforms.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I supported platforms in ktor?\n\nAssistant: To supported platforms in ktor, here's what you do:\nThe Ktor HTTP client can be used on different platforms supported by Kotlin:\n\n- JVM\n\n- [Android](https://kotlinlang.org/docs/android-overview.html)\n\n- [Native](https://kotlinlang.org/docs/native-overview.html)\n\n> ### tip\n>\n> Using Ktor in a Kotlin/Native project requires a [new memory manager](https://kotlinlang.org/docs/native-memory-manager.html), which is enabled by default starting with Kotlin 1.7.20.\n\n- [JavaScript](https://kotlinlang.org/docs/js-overview.html)\n\nYou can use it in [multiplatform projects](https://kotlinlang.org/docs/multiplatform.html), be it a multiplatform mobile or a full-stack web application. The following [targets](https://kotlinlang.org/docs/multiplatform-dsl-reference.html#targets) are supported for multiplatform projects:\n\n| Target platform | Target preset |\n| --- | --- |\n| Kotlin/JVM | - `jvm` |\n| Kotlin/JS | - `js` |\n| Android | - `android` |\n| iOS | - `iosArm32`<br>  <br>- `iosArm64`<br>  <br>- `iosX64`<br>  <br>- `iosSimulatorArm64` |\n| watchOS | - `watchosArm32`<br>  <br>- `watchosArm64`<br>  <br>- `watchosX86`<br>  <br>- `watchosX64`<br>  <br>- `watchosSimulatorArm64` |\n| tvOS | - `tvosArm64`<br>  <br>- `tvosX64`<br>  <br>- `tvosSimulatorArm64` |\n| macOS | - `macosX64`<br>  <br>- `macosArm64` |\n| Linux | - `linuxX64` |\n| Windows | - `mingwX64` |.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-supported-platforms.html", "title": "Supported platforms", "description": "The Ktor HTTP client can be used on different platforms supported by Kotlin.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:10:36", "type": "section_detail", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-supported-platforms.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogDescription": "", "og:site_name": "Ktor Help", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.605760381", "og:title": "Supported platforms | Ktor", "build-number": "707", "ogTitle": "Supported platforms | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:title": "Supported platforms | Ktor", "ogSiteName": "Ktor Help", "og:description": "", "title": "Supported platforms | Ktor Documentation", "language": "en-US", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/client-supported-platforms.html", "scrapeId": "0e44bc65-71d3-4e89-b2ef-0e89ca42e7dc", "sourceURL": "https://ktor.io/docs/client-supported-platforms.html", "url": "https://ktor.io/docs/client-supported-platforms.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Supported platforms in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUsing Ktor in a Kotlin/Native project requires a new memory manager, which is enabled by default starting with Kotlin 1.7.20.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-supported-platforms.html", "title": "Supported platforms", "description": "The Ktor HTTP client can be used on different platforms supported by Kotlin.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:10:36", "type": "best_practices", "page_metadata": {"favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/client-supported-platforms.html", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "ogDescription": "", "og:site_name": "Ktor Help", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.605760381", "og:title": "Supported platforms | Ktor", "build-number": "707", "ogTitle": "Supported platforms | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:title": "Supported platforms | Ktor", "ogSiteName": "Ktor Help", "og:description": "", "title": "Supported platforms | Ktor Documentation", "language": "en-US", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "ogUrl": "https://ktor.io/docs/3.1.1/client-supported-platforms.html", "scrapeId": "0e44bc65-71d3-4e89-b2ef-0e89ca42e7dc", "sourceURL": "https://ktor.io/docs/client-supported-platforms.html", "url": "https://ktor.io/docs/client-supported-platforms.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Migrating from Express to Ktor is in ktor?\n\nAssistant: Sure, I'd be happy to explain Migrating from Express to Ktor in ktor.\n\n# Migrating from Express to Ktor\n\nIn this guide, we'll take a look at how to migrate an Express application to Ktor in basic scenarios: from generating an application and writing your first application to creating middleware for extending application functionality.Here's a quick rundown of what this is about:\n\n## Generate an app\n\n| Express | You can generate a new Express application using the `express-generator` tool:<br>```<br>npx express-generator<br>``` |\n| Ktor | Ktor provides the following ways to generate an application skeleton:<br>- A [Yeoman generator](https://www.npmjs.com/package/generator-ktor)<br>  <br>  This generator allows you to specify project settings interactively and choose a set of required plugins. Alternatively, you can pass the necessary options to the `yo ktor` command (see `yo ktor --help`).<br>  <br>- [Web-based generator](https://start.ktor.io/)<br>  <br>- [Native Command Line Tool](https://github.com/ktorio/ktor-cli) (beta)<br>  <br>  To create a new Ktor project, you need to pass a project name to the `ktor generate` command:<br>  <br>  <br>  <br>  <br>  <br>  ```<br>  ktor generate ktor-sample<br>  ```<br>  <br>- [IntelliJ IDEA Ultimate](https://ktor.io/idea/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/migration-from-express-js.html", "title": "Migrating from Express to Ktor", "description": "In this guide, we'll take a look at how to migrate an Express application to Ktor in basic scenarios: from generating an application and writing your first application to creating middleware for extending application functionality.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:10:48", "type": "overview", "page_metadata": {"og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogDescription": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:07.494702816", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Migrating from Express to Ktor | Ktor", "title": "Migrating from Express to Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/migration-from-express-js.html", "ogTitle": "Migrating from Express to Ktor | Ktor", "og:title": "Migrating from Express to Ktor | Ktor", "ogSiteName": "Ktor Help", "language": "en-US", "build-number": "707", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/migration-from-express-js.html", "scrapeId": "679d4cf9-5f18-4c8a-a692-a902db130a2b", "sourceURL": "https://ktor.io/docs/migration-from-express-js.html", "url": "https://ktor.io/docs/migration-from-express-js.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I generate an app in ktor?\n\nAssistant: To generate an app in ktor, here's what you do:\n| Express | You can generate a new Express application using the `express-generator` tool:<br>```<br>npx express-generator<br>``` |\n| Ktor | Ktor provides the following ways to generate an application skeleton:<br>- A [Yeoman generator](https://www.npmjs.com/package/generator-ktor)<br>  <br>  This generator allows you to specify project settings interactively and choose a set of required plugins. Alternatively, you can pass the necessary options to the `yo ktor` command (see `yo ktor --help`).<br>  <br>- [Web-based generator](https://start.ktor.io/)<br>  <br>- [Native Command Line Tool](https://github.com/ktorio/ktor-cli) (beta)<br>  <br>  To create a new Ktor project, you need to pass a project name to the `ktor generate` command:<br>  <br>  <br>  <br>  <br>  <br>  ```<br>  ktor generate ktor-sample<br>  ```<br>  <br>- [IntelliJ IDEA Ultimate](https://ktor.io/idea/).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migration-from-express-js.html", "title": "Migrating from Express to Ktor", "description": "In this guide, we'll take a look at how to migrate an Express application to Ktor in basic scenarios: from generating an application and writing your first application to creating middleware for extending application functionality.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:10:48", "type": "section_detail", "page_metadata": {"og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogDescription": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:07.494702816", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Migrating from Express to Ktor | Ktor", "title": "Migrating from Express to Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/migration-from-express-js.html", "ogTitle": "Migrating from Express to Ktor | Ktor", "og:title": "Migrating from Express to Ktor | Ktor", "ogSiteName": "Ktor Help", "language": "en-US", "build-number": "707", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/migration-from-express-js.html", "scrapeId": "679d4cf9-5f18-4c8a-a692-a902db130a2b", "sourceURL": "https://ktor.io/docs/migration-from-express-js.html", "url": "https://ktor.io/docs/migration-from-express-js.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Migrating from Express to Ktor in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Generate an app - Express**:\n\n```yaml\nnpx express-generator\n```\n\nThis snippet shows you how to generate an app - express, which is an important aspect of migrating from express to ktor.\n\n**Generate an app - Ktor**:\n\n```yaml\nktor generate ktor-sample\n```\n\nThis snippet shows you how to generate an app - ktor, which is an important aspect of migrating from express to ktor.\n\n**Hello world - Express**:\n\n```yaml\nconst express = require('express')\nconst app = express()\nconst port = 3000\napp.get('/', (req, res) => {\n    res.send('Hello World!')\n})\napp.listen(port, () => {\n    console.log(`Responding at http://0.0.0.0:${port}/`)\n})\n```\n\nThis snippet shows you how to hello world - express, which is an important aspect of migrating from express to ktor.\n\n**Hello world - Ktor**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nfun main() {\n    embeddedServer(Netty, port = 8080, host = \"0.0.0.0\") {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello World!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to hello world - ktor, which is an important aspect of migrating from express to ktor.\n\n", "metadata": {"source_url": "https://ktor.io/docs/migration-from-express-js.html", "title": "Migrating from Express to Ktor", "description": "In this guide, we'll take a look at how to migrate an Express application to Ktor in basic scenarios: from generating an application and writing your first application to creating middleware for extending application functionality.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:10:48", "type": "code_examples", "page_metadata": {"og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogDescription": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:07.494702816", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Migrating from Express to Ktor | Ktor", "title": "Migrating from Express to Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/migration-from-express-js.html", "ogTitle": "Migrating from Express to Ktor | Ktor", "og:title": "Migrating from Express to Ktor | Ktor", "ogSiteName": "Ktor Help", "language": "en-US", "build-number": "707", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/migration-from-express-js.html", "scrapeId": "679d4cf9-5f18-4c8a-a692-a902db130a2b", "sourceURL": "https://ktor.io/docs/migration-from-express-js.html", "url": "https://ktor.io/docs/migration-from-express-js.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Migrating from Express to Ktor in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo add the default Server and Date headers into each response in Ktor, you need to install the [DefaultHeaders](https://ktor.io/docs/server-default-headers.html) plugin.\n\nThe [ConditionalHeaders](https://ktor.io/docs/server-conditional-headers.html) plugin can be used to configure the Etag response header.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/migration-from-express-js.html", "title": "Migrating from Express to Ktor", "description": "In this guide, we'll take a look at how to migrate an Express application to Ktor in basic scenarios: from generating an application and writing your first application to creating middleware for extending application functionality.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:10:48", "type": "best_practices", "page_metadata": {"og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogDescription": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:07.494702816", "twitter:creator": "@JetBrainsKtor", "og:type": "website", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:title": "Migrating from Express to Ktor | Ktor", "title": "Migrating from Express to Ktor | Ktor Documentation", "ogUrl": "https://ktor.io/docs/3.1.1/migration-from-express-js.html", "ogTitle": "Migrating from Express to Ktor | Ktor", "og:title": "Migrating from Express to Ktor | Ktor", "ogSiteName": "Ktor Help", "language": "en-US", "build-number": "707", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/migration-from-express-js.html", "scrapeId": "679d4cf9-5f18-4c8a-a692-a902db130a2b", "sourceURL": "https://ktor.io/docs/migration-from-express-js.html", "url": "https://ktor.io/docs/migration-from-express-js.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Creating and configuring a client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Creating and configuring a client in ktor.\n\n# Creating and configuring a client\n\nThis page covers how to create and configure an HTTP client using Ktor, including setting up dependencies, configuring the client, and using it for requests.Here's a quick rundown of what this is about:\n\n## Creating and configuring a client\n\nAfter adding the client dependencies, you can instantiate the client by creating the HttpClient class instance and passing an engine as a parameter:\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO)\n```\n\nIn this example, we use the CIO engine. You can also omit an engine:\n\n```kotlin\nimport io.ktor.client.*\n\nval client = HttpClient()\n```\n\nIn this case, the client will choose an engine automatically depending on the artifacts added in a build script. You can learn how the client chooses an engine from the Default engine documentation section.\n\n## Configure the client\n\n### Basic configuration\nTo configure the client, you can pass an additional functional parameter to the client constructor. The HttpClientConfig class is a base class for configuring the client. For instance, you can enable response validation using the expectSuccess property:\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO) {\n    expectSuccess = true\n}\n```\n\n### Engine configuration\nYou can configure an engine using the engine function:\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO) {\n    engine {\n        // Configure an engine\n    }\n}\n```\n\nSee the Engines section for additional details.\n\n### Plugins\nTo install a plugin, you need to pass it to the install function inside a client configuration block. For example, you can log HTTP calls by installing the Logging plugin:\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.logging.*\n\nval client = HttpClient(CIO) {\n    install(Logging)\n}\n```\n\nYou can also configure a plugin inside the install block. For example, for the Logging plugin, you can specify the logger, logging level, and condition for filtering log messages:\n\n```kotlin\nval client = HttpClient(CIO) {\n    install(Logging) {\n        logger = Logger.DEFAULT\n        level = LogLevel.HEADERS\n        filter { request ->\n            request.url.host.contains(\"ktor.io\")\n        }\n        sanitizeHeader { header -> header == HttpHeaders.Authorization }\n    }\n}\n```\n\nNote that a specific plugin might require a separate dependency.\n\n## Use the client\n\nAfter you've added all the required dependencies and created the client, you can use it to make requests and receive responses.\n\n## Close the client\n\nAfter you finish working with the HTTP client, you need to free up the resources: threads, connections, and CoroutineScope for coroutines. To do this, call the HttpClient.close function:\n\n```kotlin\nclient.close()\n```\n\nNote that the close function prohibits creating new requests but doesn't terminate currently active ones. Resources will only be released after all client requests are completed.\n\nIf you need to use HttpClient for a single request, call the use function, which automatically calls close after executing the code block:\n\n```kotlin\nval status = HttpClient().use { client ->\n    // ...\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-create-and-configure.html", "title": "Creating and configuring a client", "description": "This page covers how to create and configure an HTTP client using Ktor, including setting up dependencies, configuring the client, and using it for requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:11:05", "type": "overview", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating and configuring a client | Ktor", "twitter:site": "@JetBrainsKtor", "og:type": "website", "title": "Creating and configuring a client | Ktor Documentation", "build-number": "707", "ogTitle": "Creating and configuring a client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:title": "Creating and configuring a client | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:05.827270991", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "7f751cdd-8926-4526-957a-156a47f71d51", "sourceURL": "https://ktor.io/docs/client-create-and-configure.html", "url": "https://ktor.io/docs/client-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I creating and configuring a client in ktor?\n\nAssistant: To creating and configuring a client in ktor, here's what you do:\nAfter adding the client dependencies, you can instantiate the client by creating the HttpClient class instance and passing an engine as a parameter:\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO)\n```\n\nIn this example, we use the CIO engine. You can also omit an engine:\n\n```kotlin\nimport io.ktor.client.*\n\nval client = HttpClient()\n```\n\nIn this case, the client will choose an engine automatically depending on the artifacts added in a build script. You can learn how the client chooses an engine from the Default engine documentation section..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-and-configure.html", "title": "Creating and configuring a client", "description": "This page covers how to create and configure an HTTP client using Ktor, including setting up dependencies, configuring the client, and using it for requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:11:05", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating and configuring a client | Ktor", "twitter:site": "@JetBrainsKtor", "og:type": "website", "title": "Creating and configuring a client | Ktor Documentation", "build-number": "707", "ogTitle": "Creating and configuring a client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:title": "Creating and configuring a client | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:05.827270991", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "7f751cdd-8926-4526-957a-156a47f71d51", "sourceURL": "https://ktor.io/docs/client-create-and-configure.html", "url": "https://ktor.io/docs/client-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure the client in ktor?\n\nAssistant: To configure the client in ktor, here's what you do:\n### Basic configuration\nTo configure the client, you can pass an additional functional parameter to the client constructor. The HttpClientConfig class is a base class for configuring the client. For instance, you can enable response validation using the expectSuccess property:\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO) {\n    expectSuccess = true\n}\n```\n\n### Engine configuration\nYou can configure an engine using the engine function:\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO) {\n    engine {\n        // Configure an engine\n    }\n}\n```\n\nSee the Engines section for additional details.\n\n### Plugins\nTo install a plugin, you need to pass it to the install function inside a client configuration block. For example, you can log HTTP calls by installing the Logging plugin:\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.logging.*\n\nval client = HttpClient(CIO) {\n    install(Logging)\n}\n```\n\nYou can also configure a plugin inside the install block. For example, for the Logging plugin, you can specify the logger, logging level, and condition for filtering log messages:\n\n```kotlin\nval client = HttpClient(CIO) {\n    install(Logging) {\n        logger = Logger.DEFAULT\n        level = LogLevel.HEADERS\n        filter { request ->\n            request.url.host.contains(\"ktor.io\")\n        }\n        sanitizeHeader { header -> header == HttpHeaders.Authorization }\n    }\n}\n```\n\nNote that a specific plugin might require a separate dependency..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-and-configure.html", "title": "Creating and configuring a client", "description": "This page covers how to create and configure an HTTP client using Ktor, including setting up dependencies, configuring the client, and using it for requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:11:05", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating and configuring a client | Ktor", "twitter:site": "@JetBrainsKtor", "og:type": "website", "title": "Creating and configuring a client | Ktor Documentation", "build-number": "707", "ogTitle": "Creating and configuring a client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:title": "Creating and configuring a client | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:05.827270991", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "7f751cdd-8926-4526-957a-156a47f71d51", "sourceURL": "https://ktor.io/docs/client-create-and-configure.html", "url": "https://ktor.io/docs/client-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I use the client in ktor?\n\nAssistant: To use the client in ktor, here's what you do:\nAfter you've added all the required dependencies and created the client, you can use it to make requests and receive responses..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-and-configure.html", "title": "Creating and configuring a client", "description": "This page covers how to create and configure an HTTP client using Ktor, including setting up dependencies, configuring the client, and using it for requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:11:05", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating and configuring a client | Ktor", "twitter:site": "@JetBrainsKtor", "og:type": "website", "title": "Creating and configuring a client | Ktor Documentation", "build-number": "707", "ogTitle": "Creating and configuring a client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:title": "Creating and configuring a client | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:05.827270991", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "7f751cdd-8926-4526-957a-156a47f71d51", "sourceURL": "https://ktor.io/docs/client-create-and-configure.html", "url": "https://ktor.io/docs/client-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I close the client in ktor?\n\nAssistant: To close the client in ktor, here's what you do:\nAfter you finish working with the HTTP client, you need to free up the resources: threads, connections, and CoroutineScope for coroutines. To do this, call the HttpClient.close function:\n\n```kotlin\nclient.close()\n```\n\nNote that the close function prohibits creating new requests but doesn't terminate currently active ones. Resources will only be released after all client requests are completed.\n\nIf you need to use HttpClient for a single request, call the use function, which automatically calls close after executing the code block:\n\n```kotlin\nval status = HttpClient().use { client ->\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-and-configure.html", "title": "Creating and configuring a client", "description": "This page covers how to create and configure an HTTP client using Ktor, including setting up dependencies, configuring the client, and using it for requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:11:05", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating and configuring a client | Ktor", "twitter:site": "@JetBrainsKtor", "og:type": "website", "title": "Creating and configuring a client | Ktor Documentation", "build-number": "707", "ogTitle": "Creating and configuring a client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:title": "Creating and configuring a client | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:05.827270991", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "7f751cdd-8926-4526-957a-156a47f71d51", "sourceURL": "https://ktor.io/docs/client-create-and-configure.html", "url": "https://ktor.io/docs/client-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Creating and configuring a client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating an HttpClient instance with CIO engine**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO)\n```\n\nThis snippet shows you how to creating an httpclient instance with cio engine, which is an important aspect of creating and configuring a client.\n\n**Creating an HttpClient instance without specifying an engine**:\n\n```yaml\nimport io.ktor.client.*\n\nval client = HttpClient()\n```\n\nThis snippet shows you how to creating an httpclient instance without specifying an engine, which is an important aspect of creating and configuring a client.\n\n**Configuring HttpClient with response validation**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO) {\n    expectSuccess = true\n}\n```\n\nThis snippet shows you how to configuring httpclient with response validation, which is an important aspect of creating and configuring a client.\n\n**Configuring an engine**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO) {\n    engine {\n        // Configure an engine\n    }\n}\n```\n\nThis snippet shows you how to configuring an engine, which is an important aspect of creating and configuring a client.\n\n**Installing Logging plugin**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.logging.*\n\nval client = HttpClient(CIO) {\n    install(Logging)\n}\n```\n\nThis snippet shows you how to installing logging plugin, which is an important aspect of creating and configuring a client.\n\n**Configuring Logging plugin**:\n\n```yaml\nval client = HttpClient(CIO) {\n    install(Logging) {\n        logger = Logger.DEFAULT\n        level = LogLevel.HEADERS\n        filter { request ->\n            request.url.host.contains(\"ktor.io\")\n        }\n        sanitizeHeader { header -> header == HttpHeaders.Authorization }\n    }\n}\n```\n\nThis snippet shows you how to configuring logging plugin, which is an important aspect of creating and configuring a client.\n\n**Closing the HttpClient**:\n\n```yaml\nclient.close()\n```\n\nThis snippet shows you how to closing the httpclient, which is an important aspect of creating and configuring a client.\n\n**Using HttpClient for a single request**:\n\n```yaml\nval status = HttpClient().use { client ->\n    // ...\n}\n```\n\nThis snippet shows you how to using httpclient for a single request, which is an important aspect of creating and configuring a client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-create-and-configure.html", "title": "Creating and configuring a client", "description": "This page covers how to create and configure an HTTP client using Ktor, including setting up dependencies, configuring the client, and using it for requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:11:05", "type": "code_examples", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating and configuring a client | Ktor", "twitter:site": "@JetBrainsKtor", "og:type": "website", "title": "Creating and configuring a client | Ktor Documentation", "build-number": "707", "ogTitle": "Creating and configuring a client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:title": "Creating and configuring a client | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:05.827270991", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "7f751cdd-8926-4526-957a-156a47f71d51", "sourceURL": "https://ktor.io/docs/client-create-and-configure.html", "url": "https://ktor.io/docs/client-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Creating and configuring a client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNote that creating HttpClient is not a cheap operation, and it's better to reuse its instance in the case of multiple requests.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-create-and-configure.html", "title": "Creating and configuring a client", "description": "This page covers how to create and configure an HTTP client using Ktor, including setting up dependencies, configuring the client, and using it for requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:11:05", "type": "best_practices", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "og:site_name": "Ktor Help", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/client-create-and-configure.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Creating and configuring a client | Ktor", "twitter:site": "@JetBrainsKtor", "og:type": "website", "title": "Creating and configuring a client | Ktor Documentation", "build-number": "707", "ogTitle": "Creating and configuring a client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:title": "Creating and configuring a client | Ktor", "twitter:card": "summary_large_image", "built-on": "2025-02-26T14:01:05.827270991", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "scrapeId": "7f751cdd-8926-4526-957a-156a47f71d51", "sourceURL": "https://ktor.io/docs/client-create-and-configure.html", "url": "https://ktor.io/docs/client-create-and-configure.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server-Sent Events in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server-Sent Events in Ktor Server in ktor.\n\n# Server-Sent Events in Ktor Server\n\nThis page covers the implementation and usage of Server-Sent Events (SSE) in Ktor Server, including installation, handling sessions, and limitations.Here's a quick rundown of what this is about:\n\n## Introduction\n\nServer-Sent Events (SSE) is a technology that allows a server to continuously push events to a client over an HTTP connection. It's particularly useful in cases where the server needs to send event-based updates without requiring the client to repeatedly poll the server.\n\nThe SSE plugins supported by Ktor provide a straightforward method for creating a one-way connection between the server and the client.\n\n## Limitations\n\nKtor does not provide support for data compression of SSE responses. If you use the Compression plugin, it will skip compression for SSE responses by default.\n\n## Add dependencies\n\nTo use SSE, you need to include the ktor-server-sse artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-sse:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-sse:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-sse-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install SSE\n\nTo install the SSE plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install SSE...\n\n- ... inside the embeddedServer function call.\n\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.sse.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(SSE)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.sse.*\n// ...\nfun Application.module() {\n    install(SSE)\n    // ...\n}\n```\n\n## Handle SSE sessions\n\nOnce you have installed the SSE plugin, you can add a route to handle an SSE session. To do that, call the sse() function inside the routing block. There are two ways to set up an SSE route:\n\n1. With a specific URL path:\n\n```\nrouting {\n       sse(\"/events\") {\n           // send events to clients\n       }\n}\n```\n\n2. Without a path:\n\n```\nrouting {\n       sse {\n           // send events to clients\n       }\n}\n```\n\n## SSE session block\n\nWithin the sse block, you define the handler for the specified path, represented by the ServerSSESession class. The following functions and properties are available within the block:\n\n- `send()`: Creates and sends a ServerSentEvent to the client.\n- `call`: The associated received ApplicationCall that originated the session.\n- `close()`: Closes the session and terminates the connection with the client. The close() method is called automatically when all send() operations are completed.\n\nClosing the session using the close() function does not send a termination event to the client. To indicate the end of the SSE stream before closing the session, use the send() function to send a specific event.\n\n## Example: Handling a single session\n\nThe example below demonstrates how to set up an SSE session on the /events endpoint, sending 6 separate events over the SSE channel with a 1-second (1000ms) delay between each:\n\n```\nrouting {\n    sse(\"/events\") {\n        repeat(6) {\n            send(ServerSentEvent(\"this is SSE #$it\"))\n            delay(1000)\n        }\n    }\n}\n```\n\nFor the full example, see server-sse.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-server-sent-events.html", "title": "Server-Sent Events in Ktor Server", "description": "This page covers the implementation and usage of Server-Sent Events (SSE) in Ktor Server, including installation, handling sessions, and limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:12:23", "type": "overview", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "built-on": "2025-02-26T14:01:02.188437877", "build-number": "707", "ogDescription": "", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server-Sent Events in Ktor Server | Ktor", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "twitter:card": "summary_large_image", "title": "Server-Sent Events in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Server-Sent Events in Ktor Server | Ktor", "ogTitle": "Server-Sent Events in Ktor Server | Ktor", "twitter:description": "", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "5f081881-6cc0-4c32-abff-48c7309e0b82", "sourceURL": "https://ktor.io/docs/server-server-sent-events.html", "url": "https://ktor.io/docs/server-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I introduction in ktor?\n\nAssistant: To introduction in ktor, here's what you do:\nServer-Sent Events (SSE) is a technology that allows a server to continuously push events to a client over an HTTP connection. It's particularly useful in cases where the server needs to send event-based updates without requiring the client to repeatedly poll the server.\n\nThe SSE plugins supported by Ktor provide a straightforward method for creating a one-way connection between the server and the client..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-server-sent-events.html", "title": "Server-Sent Events in Ktor Server", "description": "This page covers the implementation and usage of Server-Sent Events (SSE) in Ktor Server, including installation, handling sessions, and limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:12:23", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "built-on": "2025-02-26T14:01:02.188437877", "build-number": "707", "ogDescription": "", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server-Sent Events in Ktor Server | Ktor", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "twitter:card": "summary_large_image", "title": "Server-Sent Events in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Server-Sent Events in Ktor Server | Ktor", "ogTitle": "Server-Sent Events in Ktor Server | Ktor", "twitter:description": "", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "5f081881-6cc0-4c32-abff-48c7309e0b82", "sourceURL": "https://ktor.io/docs/server-server-sent-events.html", "url": "https://ktor.io/docs/server-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I limitations in ktor?\n\nAssistant: To limitations in ktor, here's what you do:\nKtor does not provide support for data compression of SSE responses. If you use the Compression plugin, it will skip compression for SSE responses by default..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-server-sent-events.html", "title": "Server-Sent Events in Ktor Server", "description": "This page covers the implementation and usage of Server-Sent Events (SSE) in Ktor Server, including installation, handling sessions, and limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:12:23", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "built-on": "2025-02-26T14:01:02.188437877", "build-number": "707", "ogDescription": "", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server-Sent Events in Ktor Server | Ktor", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "twitter:card": "summary_large_image", "title": "Server-Sent Events in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Server-Sent Events in Ktor Server | Ktor", "ogTitle": "Server-Sent Events in Ktor Server | Ktor", "twitter:description": "", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "5f081881-6cc0-4c32-abff-48c7309e0b82", "sourceURL": "https://ktor.io/docs/server-server-sent-events.html", "url": "https://ktor.io/docs/server-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use SSE, you need to include the ktor-server-sse artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-sse:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-sse:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-sse-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-server-sent-events.html", "title": "Server-Sent Events in Ktor Server", "description": "This page covers the implementation and usage of Server-Sent Events (SSE) in Ktor Server, including installation, handling sessions, and limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:12:23", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "built-on": "2025-02-26T14:01:02.188437877", "build-number": "707", "ogDescription": "", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server-Sent Events in Ktor Server | Ktor", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "twitter:card": "summary_large_image", "title": "Server-Sent Events in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Server-Sent Events in Ktor Server | Ktor", "ogTitle": "Server-Sent Events in Ktor Server | Ktor", "twitter:description": "", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "5f081881-6cc0-4c32-abff-48c7309e0b82", "sourceURL": "https://ktor.io/docs/server-server-sent-events.html", "url": "https://ktor.io/docs/server-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install sse in ktor?\n\nAssistant: To install sse in ktor, here's what you do:\nTo install the SSE plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install SSE...\n\n- ... inside the embeddedServer function call.\n\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.sse.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(SSE)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.sse.*\n// ...\nfun Application.module() {\n    install(SSE)\n    // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-server-sent-events.html", "title": "Server-Sent Events in Ktor Server", "description": "This page covers the implementation and usage of Server-Sent Events (SSE) in Ktor Server, including installation, handling sessions, and limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:12:23", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "built-on": "2025-02-26T14:01:02.188437877", "build-number": "707", "ogDescription": "", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server-Sent Events in Ktor Server | Ktor", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "twitter:card": "summary_large_image", "title": "Server-Sent Events in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Server-Sent Events in Ktor Server | Ktor", "ogTitle": "Server-Sent Events in Ktor Server | Ktor", "twitter:description": "", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "5f081881-6cc0-4c32-abff-48c7309e0b82", "sourceURL": "https://ktor.io/docs/server-server-sent-events.html", "url": "https://ktor.io/docs/server-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I handle sse sessions in ktor?\n\nAssistant: To handle sse sessions in ktor, here's what you do:\nOnce you have installed the SSE plugin, you can add a route to handle an SSE session. To do that, call the sse() function inside the routing block. There are two ways to set up an SSE route:\n\n1. With a specific URL path:\n\n```\nrouting {\n       sse(\"/events\") {\n           // send events to clients\n       }\n}\n```\n\n2. Without a path:\n\n```\nrouting {\n       sse {\n           // send events to clients\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-server-sent-events.html", "title": "Server-Sent Events in Ktor Server", "description": "This page covers the implementation and usage of Server-Sent Events (SSE) in Ktor Server, including installation, handling sessions, and limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:12:23", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "built-on": "2025-02-26T14:01:02.188437877", "build-number": "707", "ogDescription": "", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server-Sent Events in Ktor Server | Ktor", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "twitter:card": "summary_large_image", "title": "Server-Sent Events in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Server-Sent Events in Ktor Server | Ktor", "ogTitle": "Server-Sent Events in Ktor Server | Ktor", "twitter:description": "", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "5f081881-6cc0-4c32-abff-48c7309e0b82", "sourceURL": "https://ktor.io/docs/server-server-sent-events.html", "url": "https://ktor.io/docs/server-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I sse session block in ktor?\n\nAssistant: To sse session block in ktor, here's what you do:\nWithin the sse block, you define the handler for the specified path, represented by the ServerSSESession class. The following functions and properties are available within the block:\n\n- `send()`: Creates and sends a ServerSentEvent to the client.\n- `call`: The associated received ApplicationCall that originated the session.\n- `close()`: Closes the session and terminates the connection with the client. The close() method is called automatically when all send() operations are completed.\n\nClosing the session using the close() function does not send a termination event to the client. To indicate the end of the SSE stream before closing the session, use the send() function to send a specific event..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-server-sent-events.html", "title": "Server-Sent Events in Ktor Server", "description": "This page covers the implementation and usage of Server-Sent Events (SSE) in Ktor Server, including installation, handling sessions, and limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:12:23", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "built-on": "2025-02-26T14:01:02.188437877", "build-number": "707", "ogDescription": "", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server-Sent Events in Ktor Server | Ktor", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "twitter:card": "summary_large_image", "title": "Server-Sent Events in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Server-Sent Events in Ktor Server | Ktor", "ogTitle": "Server-Sent Events in Ktor Server | Ktor", "twitter:description": "", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "5f081881-6cc0-4c32-abff-48c7309e0b82", "sourceURL": "https://ktor.io/docs/server-server-sent-events.html", "url": "https://ktor.io/docs/server-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example: handling a single session in ktor?\n\nAssistant: To example: handling a single session in ktor, here's what you do:\nThe example below demonstrates how to set up an SSE session on the /events endpoint, sending 6 separate events over the SSE channel with a 1-second (1000ms) delay between each:\n\n```\nrouting {\n    sse(\"/events\") {\n        repeat(6) {\n            send(ServerSentEvent(\"this is SSE #$it\"))\n            delay(1000)\n        }\n    }\n}\n```\n\nFor the full example, see server-sse..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-server-sent-events.html", "title": "Server-Sent Events in Ktor Server", "description": "This page covers the implementation and usage of Server-Sent Events (SSE) in Ktor Server, including installation, handling sessions, and limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:12:23", "type": "section_detail", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "built-on": "2025-02-26T14:01:02.188437877", "build-number": "707", "ogDescription": "", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server-Sent Events in Ktor Server | Ktor", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "twitter:card": "summary_large_image", "title": "Server-Sent Events in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Server-Sent Events in Ktor Server | Ktor", "ogTitle": "Server-Sent Events in Ktor Server | Ktor", "twitter:description": "", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "5f081881-6cc0-4c32-abff-48c7309e0b82", "sourceURL": "https://ktor.io/docs/server-server-sent-events.html", "url": "https://ktor.io/docs/server-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server-Sent Events in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies - Gradle (Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-sse:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies - gradle (kotlin), which is an important aspect of server-sent events in ktor server.\n\n**Add dependencies - Gradle (Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-sse:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies - gradle (groovy), which is an important aspect of server-sent events in ktor server.\n\n**Add dependencies - Maven**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-sse-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies - maven, which is an important aspect of server-sent events in ktor server.\n\n**Install SSE - embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.sse.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(SSE)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install sse - embeddedserver, which is an important aspect of server-sent events in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-server-sent-events.html", "title": "Server-Sent Events in Ktor Server", "description": "This page covers the implementation and usage of Server-Sent Events (SSE) in Ktor Server, including installation, handling sessions, and limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:12:23", "type": "code_examples", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "built-on": "2025-02-26T14:01:02.188437877", "build-number": "707", "ogDescription": "", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server-Sent Events in Ktor Server | Ktor", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "twitter:card": "summary_large_image", "title": "Server-Sent Events in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Server-Sent Events in Ktor Server | Ktor", "ogTitle": "Server-Sent Events in Ktor Server | Ktor", "twitter:description": "", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "5f081881-6cc0-4c32-abff-48c7309e0b82", "sourceURL": "https://ktor.io/docs/server-server-sent-events.html", "url": "https://ktor.io/docs/server-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server-Sent Events in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo learn more about the SSE plugin for client-side support, see the SSE client plugin.\n\nFor multi-way communication, consider using WebSockets. They provide a full-duplex communication between the server and the client using the Websocket protocol.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-server-sent-events.html", "title": "Server-Sent Events in Ktor Server", "description": "This page covers the implementation and usage of Server-Sent Events (SSE) in Ktor Server, including installation, handling sessions, and limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:12:23", "type": "best_practices", "page_metadata": {"image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "built-on": "2025-02-26T14:01:02.188437877", "build-number": "707", "ogDescription": "", "og:locale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Server-Sent Events in Ktor Server | Ktor", "ogLocale": "en_US", "language": "en-US", "og:url": "https://ktor.io/docs/3.1.1/server-server-sent-events.html", "twitter:card": "summary_large_image", "title": "Server-Sent Events in Ktor Server | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogSiteName": "Ktor Help", "og:type": "website", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "og:title": "Server-Sent Events in Ktor Server | Ktor", "ogTitle": "Server-Sent Events in Ktor Server | Ktor", "twitter:description": "", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "5f081881-6cc0-4c32-abff-48c7309e0b82", "sourceURL": "https://ktor.io/docs/server-server-sent-events.html", "url": "https://ktor.io/docs/server-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Server-Sent Events in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Server-Sent Events in Ktor Client in ktor.\n\n# Client Plugin Server-Sent Events in Ktor Client\n\nServer-Sent Events (SSE) is a technology that allows a server to continuously push events to a client over an HTTP connection. It's particularly useful in cases where the server needs to send event-based updates without requiring the client to repeatedly poll the server.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\n`SSE` only requires the [ktor-client-core](https://ktor.io/docs/client-dependencies.html) artifact and doesn't need any specific dependencies.\n\n## Install SSE\n\nTo install the `SSE` plugin, pass it to the `install` function inside a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.sse.*\n\n//...\nval client = HttpClient(CIO) {\n    install(SSE)\n}\n```\n\n## Configure the SSE plugin\n\nYou can optionally configure the SSE plugin within the `install` block by setting the supported properties of the [SSEConfig](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.sse/-s-s-e-config/index.html) class:\n\n`reconnectionTime`\n\nSets the reconnection delay. If the connection to the server is lost, the client will wait for the specified time before attempting to reconnect.\n\n`showCommentEvents()`\n\nAdds events that contain only comments in the incoming flow.\n\n`showRetryEvents()`\n\nAdds events that contain only the `retry` field in the incoming flow.\n\nIn the following example, the SSE plugin is installed into the HTTP client and configured to include events that only contain comments and those that contain only the `retry` field in the incoming flow:\n\n```\nval client = HttpClient {\n    install(SSE) {\n        showCommentEvents()\n        showRetryEvents()\n    }\n}\n```\n\n## Handle SSE sessions\n\nA client's SSE session is represented by the [DefaultClientSSESession](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.sse/-default-client-s-s-e-session/index.html) interface. This interface exposes the API that allows you to receive server-sent events from a server.\n\n### Access an SSE session\n\nThe `HttpClient` allows you to get access to an SSE session in one of the following ways:\n\n- The [sse()](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.sse/sse.html) function creates the SSE session and allows you to act on it.\n\n- The [sseSession()](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.sse/sse-session.html) function allows you to open an SSE session.\n\nThe following parameters are available to both functions. To specify the URL endpoint, choose from two options:\n\n- Use the `urlString` parameter to specify the whole URL as a string.\n\n- Use the `schema`, `host`, `port`, and `path` parameters to specify the protocol scheme, domain name, port number and path name respectively.\n\n```\nrunBlocking {\n    client.sse(host = \"127.0.0.1\", port = 8080, path = \"/events\") {\n        // this: ClientSSESession\n    }\n}\n```\n\nOptionally, the following parameters are available to configure the connection:\n\n`reconnectionTime`\n\nSets the reconnection delay.\n\n`showCommentEvents`\n\nSpecifies whether to show events that contain only comments in the incoming flow.\n\n`showRetryEvents`\n\nSpecifies whether to show events that contain only the `retry` field in the incoming flow.\n\n### SSE session block\n\nWithin the lambda argument, you have access to the [`ClientSSESession`](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.sse/-client-s-s-e-session/index.html) context. The following properties are available within the block:\n\n`call`\n\nThe associated `HttpClientCall` that originated the session.\n\n`incoming`\n\nAn incoming server-sent events flow.\n\n## Example\n\nThe example below creates a new SSE session with the `events` endpoint, reads events through the `incoming` property and prints the received [`ServerSentEvent`](https://api.ktor.io/ktor-shared/ktor-sse/io.ktor.sse/-server-sent-event/index.html).\n\n```\nfun main() {\n    val client = HttpClient {\n        install(SSE) {\n            showCommentEvents()\n            showRetryEvents()\n        }\n    }\n    runBlocking {\n        client.sse(host = \"0.0.0.0\", port = 8080, path = \"/events\") {\n            while (true) {\n                incoming.collect { event ->\n                    println(\"Event from server:\")\n                    println(event)\n                }\n            }\n        }\n    }\n    client.close()\n}\n```\n\nFor the full example, see [client-sse](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-sse).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-server-sent-events.html", "title": "Client Plugin Server-Sent Events in Ktor Client", "description": "Server-Sent Events (SSE) is a technology that allows a server to continuously push events to a client over an HTTP connection. It's particularly useful in cases where the server needs to send event-based updates without requiring the client to repeatedly poll the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:12:50", "type": "overview", "page_metadata": {"build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "ogDescription": "", "og:title": "Server-Sent Events in Ktor Client | Ktor", "og:locale": "en_US", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Server-Sent Events in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:description": "", "ogLocale": "en_US", "title": "Server-Sent Events in Ktor Client | Ktor Documentation", "built-on": "2025-02-26T14:01:04.522043889", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Server-Sent Events in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a26eed13-bb80-446b-a59d-bfa46b47aea8", "sourceURL": "https://ktor.io/docs/client-server-sent-events.html", "url": "https://ktor.io/docs/client-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\n`SSE` only requires the [ktor-client-core](https://ktor.io/docs/client-dependencies.html) artifact and doesn't need any specific dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-server-sent-events.html", "title": "Client Plugin Server-Sent Events in Ktor Client", "description": "Server-Sent Events (SSE) is a technology that allows a server to continuously push events to a client over an HTTP connection. It's particularly useful in cases where the server needs to send event-based updates without requiring the client to repeatedly poll the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:12:50", "type": "section_detail", "page_metadata": {"build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "ogDescription": "", "og:title": "Server-Sent Events in Ktor Client | Ktor", "og:locale": "en_US", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Server-Sent Events in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:description": "", "ogLocale": "en_US", "title": "Server-Sent Events in Ktor Client | Ktor Documentation", "built-on": "2025-02-26T14:01:04.522043889", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Server-Sent Events in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a26eed13-bb80-446b-a59d-bfa46b47aea8", "sourceURL": "https://ktor.io/docs/client-server-sent-events.html", "url": "https://ktor.io/docs/client-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install sse in ktor?\n\nAssistant: To install sse in ktor, here's what you do:\nTo install the `SSE` plugin, pass it to the `install` function inside a [client configuration block](https://ktor.io/docs/client-create-and-configure.html#configure-client):\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.sse.*\n\n//...\nval client = HttpClient(CIO) {\n    install(SSE)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-server-sent-events.html", "title": "Client Plugin Server-Sent Events in Ktor Client", "description": "Server-Sent Events (SSE) is a technology that allows a server to continuously push events to a client over an HTTP connection. It's particularly useful in cases where the server needs to send event-based updates without requiring the client to repeatedly poll the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:12:50", "type": "section_detail", "page_metadata": {"build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "ogDescription": "", "og:title": "Server-Sent Events in Ktor Client | Ktor", "og:locale": "en_US", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Server-Sent Events in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:description": "", "ogLocale": "en_US", "title": "Server-Sent Events in Ktor Client | Ktor Documentation", "built-on": "2025-02-26T14:01:04.522043889", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Server-Sent Events in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a26eed13-bb80-446b-a59d-bfa46b47aea8", "sourceURL": "https://ktor.io/docs/client-server-sent-events.html", "url": "https://ktor.io/docs/client-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure the sse plugin in ktor?\n\nAssistant: To configure the sse plugin in ktor, here's what you do:\nYou can optionally configure the SSE plugin within the `install` block by setting the supported properties of the [SSEConfig](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.sse/-s-s-e-config/index.html) class:\n\n`reconnectionTime`\n\nSets the reconnection delay. If the connection to the server is lost, the client will wait for the specified time before attempting to reconnect.\n\n`showCommentEvents()`\n\nAdds events that contain only comments in the incoming flow.\n\n`showRetryEvents()`\n\nAdds events that contain only the `retry` field in the incoming flow.\n\nIn the following example, the SSE plugin is installed into the HTTP client and configured to include events that only contain comments and those that contain only the `retry` field in the incoming flow:\n\n```\nval client = HttpClient {\n    install(SSE) {\n        showCommentEvents()\n        showRetryEvents()\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-server-sent-events.html", "title": "Client Plugin Server-Sent Events in Ktor Client", "description": "Server-Sent Events (SSE) is a technology that allows a server to continuously push events to a client over an HTTP connection. It's particularly useful in cases where the server needs to send event-based updates without requiring the client to repeatedly poll the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:12:50", "type": "section_detail", "page_metadata": {"build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "ogDescription": "", "og:title": "Server-Sent Events in Ktor Client | Ktor", "og:locale": "en_US", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Server-Sent Events in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:description": "", "ogLocale": "en_US", "title": "Server-Sent Events in Ktor Client | Ktor Documentation", "built-on": "2025-02-26T14:01:04.522043889", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Server-Sent Events in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a26eed13-bb80-446b-a59d-bfa46b47aea8", "sourceURL": "https://ktor.io/docs/client-server-sent-events.html", "url": "https://ktor.io/docs/client-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I handle sse sessions in ktor?\n\nAssistant: To handle sse sessions in ktor, here's what you do:\nA client's SSE session is represented by the [DefaultClientSSESession](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.sse/-default-client-s-s-e-session/index.html) interface. This interface exposes the API that allows you to receive server-sent events from a server.\n\n### Access an SSE session\n\nThe `HttpClient` allows you to get access to an SSE session in one of the following ways:\n\n- The [sse()](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.sse/sse.html) function creates the SSE session and allows you to act on it.\n\n- The [sseSession()](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.sse/sse-session.html) function allows you to open an SSE session.\n\nThe following parameters are available to both functions. To specify the URL endpoint, choose from two options:\n\n- Use the `urlString` parameter to specify the whole URL as a string.\n\n- Use the `schema`, `host`, `port`, and `path` parameters to specify the protocol scheme, domain name, port number and path name respectively.\n\n```\nrunBlocking {\n    client.sse(host = \"127.0.0.1\", port = 8080, path = \"/events\") {\n        // this: ClientSSESession\n    }\n}\n```\n\nOptionally, the following parameters are available to configure the connection:\n\n`reconnectionTime`\n\nSets the reconnection delay.\n\n`showCommentEvents`\n\nSpecifies whether to show events that contain only comments in the incoming flow.\n\n`showRetryEvents`\n\nSpecifies whether to show events that contain only the `retry` field in the incoming flow.\n\n### SSE session block\n\nWithin the lambda argument, you have access to the [`ClientSSESession`](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.sse/-client-s-s-e-session/index.html) context. The following properties are available within the block:\n\n`call`\n\nThe associated `HttpClientCall` that originated the session.\n\n`incoming`\n\nAn incoming server-sent events flow..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-server-sent-events.html", "title": "Client Plugin Server-Sent Events in Ktor Client", "description": "Server-Sent Events (SSE) is a technology that allows a server to continuously push events to a client over an HTTP connection. It's particularly useful in cases where the server needs to send event-based updates without requiring the client to repeatedly poll the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:12:50", "type": "section_detail", "page_metadata": {"build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "ogDescription": "", "og:title": "Server-Sent Events in Ktor Client | Ktor", "og:locale": "en_US", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Server-Sent Events in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:description": "", "ogLocale": "en_US", "title": "Server-Sent Events in Ktor Client | Ktor Documentation", "built-on": "2025-02-26T14:01:04.522043889", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Server-Sent Events in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a26eed13-bb80-446b-a59d-bfa46b47aea8", "sourceURL": "https://ktor.io/docs/client-server-sent-events.html", "url": "https://ktor.io/docs/client-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example in ktor?\n\nAssistant: To example in ktor, here's what you do:\nThe example below creates a new SSE session with the `events` endpoint, reads events through the `incoming` property and prints the received [`ServerSentEvent`](https://api.ktor.io/ktor-shared/ktor-sse/io.ktor.sse/-server-sent-event/index.html).\n\n```\nfun main() {\n    val client = HttpClient {\n        install(SSE) {\n            showCommentEvents()\n            showRetryEvents()\n        }\n    }\n    runBlocking {\n        client.sse(host = \"0.0.0.0\", port = 8080, path = \"/events\") {\n            while (true) {\n                incoming.collect { event ->\n                    println(\"Event from server:\")\n                    println(event)\n                }\n            }\n        }\n    }\n    client.close()\n}\n```\n\nFor the full example, see [client-sse](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-sse)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-server-sent-events.html", "title": "Client Plugin Server-Sent Events in Ktor Client", "description": "Server-Sent Events (SSE) is a technology that allows a server to continuously push events to a client over an HTTP connection. It's particularly useful in cases where the server needs to send event-based updates without requiring the client to repeatedly poll the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:12:50", "type": "section_detail", "page_metadata": {"build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "ogDescription": "", "og:title": "Server-Sent Events in Ktor Client | Ktor", "og:locale": "en_US", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Server-Sent Events in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:description": "", "ogLocale": "en_US", "title": "Server-Sent Events in Ktor Client | Ktor Documentation", "built-on": "2025-02-26T14:01:04.522043889", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Server-Sent Events in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a26eed13-bb80-446b-a59d-bfa46b47aea8", "sourceURL": "https://ktor.io/docs/client-server-sent-events.html", "url": "https://ktor.io/docs/client-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Server-Sent Events in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install SSE**:\n\n```yaml\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.sse.*\n\n//...\nval client = HttpClient(CIO) {\n    install(SSE)\n}\n```\n```\n\nThis snippet shows you how to install sse, which is an important aspect of client plugin server-sent events in ktor client.\n\n**Configure the SSE plugin**:\n\n```yaml\n```\nval client = HttpClient {\n    install(SSE) {\n        showCommentEvents()\n        showRetryEvents()\n    }\n}\n```\n```\n\nThis snippet shows you how to configure the sse plugin, which is an important aspect of client plugin server-sent events in ktor client.\n\n**Access an SSE session**:\n\n```yaml\n```\nrunBlocking {\n    client.sse(host = \"127.0.0.1\", port = 8080, path = \"/events\") {\n        // this: ClientSSESession\n    }\n}\n```\n```\n\nThis snippet shows you how to access an sse session, which is an important aspect of client plugin server-sent events in ktor client.\n\n**Example of SSE session**:\n\n```yaml\n```\nfun main() {\n    val client = HttpClient {\n        install(SSE) {\n            showCommentEvents()\n            showRetryEvents()\n        }\n    }\n    runBlocking {\n        client.sse(host = \"0.0.0.0\", port = 8080, path = \"/events\") {\n            while (true) {\n                incoming.collect { event ->\n                    println(\"Event from server:\")\n                    println(event)\n                }\n            }\n        }\n    }\n    client.close()\n}\n```\n```\n\nThis snippet shows you how to example of sse session, which is an important aspect of client plugin server-sent events in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-server-sent-events.html", "title": "Client Plugin Server-Sent Events in Ktor Client", "description": "Server-Sent Events (SSE) is a technology that allows a server to continuously push events to a client over an HTTP connection. It's particularly useful in cases where the server needs to send event-based updates without requiring the client to repeatedly poll the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:12:50", "type": "code_examples", "page_metadata": {"build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "ogDescription": "", "og:title": "Server-Sent Events in Ktor Client | Ktor", "og:locale": "en_US", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Server-Sent Events in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:description": "", "ogLocale": "en_US", "title": "Server-Sent Events in Ktor Client | Ktor Documentation", "built-on": "2025-02-26T14:01:04.522043889", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Server-Sent Events in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a26eed13-bb80-446b-a59d-bfa46b47aea8", "sourceURL": "https://ktor.io/docs/client-server-sent-events.html", "url": "https://ktor.io/docs/client-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Server-Sent Events in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo learn more about the SSE plugin for server-side support, see the SSE server plugin.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-server-sent-events.html", "title": "Client Plugin Server-Sent Events in Ktor Client", "description": "Server-Sent Events (SSE) is a technology that allows a server to continuously push events to a client over an HTTP connection. It's particularly useful in cases where the server needs to send event-based updates without requiring the client to repeatedly poll the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:12:50", "type": "best_practices", "page_metadata": {"build-number": "707", "og:url": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "language": "en-US", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "ogDescription": "", "og:title": "Server-Sent Events in Ktor Client | Ktor", "og:locale": "en_US", "og:site_name": "Ktor Help", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Server-Sent Events in Ktor Client | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "twitter:description": "", "ogLocale": "en_US", "title": "Server-Sent Events in Ktor Client | Ktor Documentation", "built-on": "2025-02-26T14:01:04.522043889", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-server-sent-events.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:title": "Server-Sent Events in Ktor Client | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "a26eed13-bb80-446b-a59d-bfa46b47aea8", "sourceURL": "https://ktor.io/docs/client-server-sent-events.html", "url": "https://ktor.io/docs/client-server-sent-events.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Form-based authentication in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Form-based authentication in Ktor Server in ktor.\n\n# Form-based authentication in Ktor Server\n\nThis page covers how to implement form-based authentication in Ktor Server, including dependencies, configuration, and flow.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\nTo enable `form` authentication, you need to include the `ktor-server-auth` artifact in the build script.\n\n## Add dependencies\n\nTo enable `form` authentication, you need to include the `ktor-server-auth` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Form-based authentication flow\n\nThe form-based authentication flow might look as follows:\n\n1. An unauthenticated client makes a request to a specific [route](https://ktor.io/docs/server-routing.html) in a server application.\n\n2. A server returns an HTML page that consists at least from an HTML-based web form, which prompts a user for a username and password.\n\n3. When a user submits a username and password, a client makes a request containing web form data (which includes the username and password) to a server.\n\n```\nPOST http://localhost:8080/login\nContent-Type: application/x-www-form-urlencoded\n\nusername=jetbrains&password=foobar\n```\n\nIn Ktor, you need to [specify parameter names](https://ktor.io/docs/server-form-based-auth.html#configure-provider) used to fetch a username and password.\n\n4. A server [validates](https://ktor.io/docs/server-form-based-auth.html#configure-provider) credentials sent by a client and responds with the requested content.\n\n## Install form authentication\n\nTo install the `form` authentication provider, call the [form](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/form.html) function inside the `install` block:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    form {\n        // Configure form authentication\n    }\n}\n```\n\n## Configure form authentication\n\n### Step 1: Configure a form provider\n\nThe `form` authentication provider exposes its settings via the [FormAuthenticationProvider.Config](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-form-authentication-provider/-config/index.html) class. In the example below, the following settings are specified:\n\n- The `userParamName` and `passwordParamName` properties specify parameter names used to fetch a username and password.\n\n- The `validate` function validates a username and password. The `validate` function checks `UserPasswordCredential` and returns a `UserIdPrincipal` in the case of successful authentication or `null` if authentication fails.\n\n- The `challenge` function specifies an action performed if authentication fails. For instance, you can redirect back to a login page or send [UnauthorizedResponse](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-unauthorized-response/index.html).\n\n```\ninstall(Authentication) {\n    form(\"auth-form\") {\n        userParamName = \"username\"\n        passwordParamName = \"password\"\n        validate { credentials ->\n            if (credentials.name == \"jetbrains\" && credentials.password == \"foobar\") {\n                UserIdPrincipal(credentials.name)\n            } else {\n                null\n            }\n        }\n        challenge {\n            call.respond(HttpStatusCode.Unauthorized, \"Credentials are not valid\")\n        }\n    }\n}\n```},{\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-form-based-auth.html", "title": "Form-based authentication in Ktor Server", "description": "This page covers how to implement form-based authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:13:13", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Form-based authentication in Ktor Server | Ktor Documentation", "og:type": "website", "ogTitle": "Form-based authentication in Ktor Server | Ktor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "twitter:title": "Form-based authentication in Ktor Server | Ktor", "twitter:description": "", "ogDescription": "", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Form-based authentication in Ktor Server | Ktor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "built-on": "2025-02-26T14:01:03.771340011", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8eb44f03-7809-4887-adf1-acf51398c343", "sourceURL": "https://ktor.io/docs/server-form-based-auth.html", "url": "https://ktor.io/docs/server-form-based-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\nTo enable `form` authentication, you need to include the `ktor-server-auth` artifact in the build script..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-form-based-auth.html", "title": "Form-based authentication in Ktor Server", "description": "This page covers how to implement form-based authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:13:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Form-based authentication in Ktor Server | Ktor Documentation", "og:type": "website", "ogTitle": "Form-based authentication in Ktor Server | Ktor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "twitter:title": "Form-based authentication in Ktor Server | Ktor", "twitter:description": "", "ogDescription": "", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Form-based authentication in Ktor Server | Ktor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "built-on": "2025-02-26T14:01:03.771340011", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8eb44f03-7809-4887-adf1-acf51398c343", "sourceURL": "https://ktor.io/docs/server-form-based-auth.html", "url": "https://ktor.io/docs/server-form-based-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo enable `form` authentication, you need to include the `ktor-server-auth` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-form-based-auth.html", "title": "Form-based authentication in Ktor Server", "description": "This page covers how to implement form-based authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:13:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Form-based authentication in Ktor Server | Ktor Documentation", "og:type": "website", "ogTitle": "Form-based authentication in Ktor Server | Ktor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "twitter:title": "Form-based authentication in Ktor Server | Ktor", "twitter:description": "", "ogDescription": "", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Form-based authentication in Ktor Server | Ktor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "built-on": "2025-02-26T14:01:03.771340011", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8eb44f03-7809-4887-adf1-acf51398c343", "sourceURL": "https://ktor.io/docs/server-form-based-auth.html", "url": "https://ktor.io/docs/server-form-based-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I form-based authentication flow in ktor?\n\nAssistant: To form-based authentication flow in ktor, here's what you do:\nThe form-based authentication flow might look as follows:\n\n1. An unauthenticated client makes a request to a specific [route](https://ktor.io/docs/server-routing.html) in a server application.\n\n2. A server returns an HTML page that consists at least from an HTML-based web form, which prompts a user for a username and password.\n\n3. When a user submits a username and password, a client makes a request containing web form data (which includes the username and password) to a server.\n\n```\nPOST http://localhost:8080/login\nContent-Type: application/x-www-form-urlencoded\n\nusername=jetbrains&password=foobar\n```\n\nIn Ktor, you need to [specify parameter names](https://ktor.io/docs/server-form-based-auth.html#configure-provider) used to fetch a username and password.\n\n4. A server [validates](https://ktor.io/docs/server-form-based-auth.html#configure-provider) credentials sent by a client and responds with the requested content..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-form-based-auth.html", "title": "Form-based authentication in Ktor Server", "description": "This page covers how to implement form-based authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:13:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Form-based authentication in Ktor Server | Ktor Documentation", "og:type": "website", "ogTitle": "Form-based authentication in Ktor Server | Ktor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "twitter:title": "Form-based authentication in Ktor Server | Ktor", "twitter:description": "", "ogDescription": "", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Form-based authentication in Ktor Server | Ktor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "built-on": "2025-02-26T14:01:03.771340011", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8eb44f03-7809-4887-adf1-acf51398c343", "sourceURL": "https://ktor.io/docs/server-form-based-auth.html", "url": "https://ktor.io/docs/server-form-based-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install form authentication in ktor?\n\nAssistant: To install form authentication in ktor, here's what you do:\nTo install the `form` authentication provider, call the [form](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/form.html) function inside the `install` block:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    form {\n        // Configure form authentication\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-form-based-auth.html", "title": "Form-based authentication in Ktor Server", "description": "This page covers how to implement form-based authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:13:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Form-based authentication in Ktor Server | Ktor Documentation", "og:type": "website", "ogTitle": "Form-based authentication in Ktor Server | Ktor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "twitter:title": "Form-based authentication in Ktor Server | Ktor", "twitter:description": "", "ogDescription": "", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Form-based authentication in Ktor Server | Ktor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "built-on": "2025-02-26T14:01:03.771340011", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8eb44f03-7809-4887-adf1-acf51398c343", "sourceURL": "https://ktor.io/docs/server-form-based-auth.html", "url": "https://ktor.io/docs/server-form-based-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure form authentication in ktor?\n\nAssistant: To configure form authentication in ktor, here's what you do:\n### Step 1: Configure a form provider\n\nThe `form` authentication provider exposes its settings via the [FormAuthenticationProvider.Config](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-form-authentication-provider/-config/index.html) class. In the example below, the following settings are specified:\n\n- The `userParamName` and `passwordParamName` properties specify parameter names used to fetch a username and password.\n\n- The `validate` function validates a username and password. The `validate` function checks `UserPasswordCredential` and returns a `UserIdPrincipal` in the case of successful authentication or `null` if authentication fails.\n\n- The `challenge` function specifies an action performed if authentication fails. For instance, you can redirect back to a login page or send [UnauthorizedResponse](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-unauthorized-response/index.html).\n\n```\ninstall(Authentication) {\n    form(\"auth-form\") {\n        userParamName = \"username\"\n        passwordParamName = \"password\"\n        validate { credentials ->\n            if (credentials.name == \"jetbrains\" && credentials.password == \"foobar\") {\n                UserIdPrincipal(credentials.name)\n            } else {\n                null\n            }\n        }\n        challenge {\n            call.respond(HttpStatusCode.Unauthorized, \"Credentials are not valid\")\n        }\n    }\n}\n```},{.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-form-based-auth.html", "title": "Form-based authentication in Ktor Server", "description": "This page covers how to implement form-based authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:13:13", "type": "section_detail", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Form-based authentication in Ktor Server | Ktor Documentation", "og:type": "website", "ogTitle": "Form-based authentication in Ktor Server | Ktor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "twitter:title": "Form-based authentication in Ktor Server | Ktor", "twitter:description": "", "ogDescription": "", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Form-based authentication in Ktor Server | Ktor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "built-on": "2025-02-26T14:01:03.771340011", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8eb44f03-7809-4887-adf1-acf51398c343", "sourceURL": "https://ktor.io/docs/server-form-based-auth.html", "url": "https://ktor.io/docs/server-form-based-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Form-based authentication in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Form Authentication Dependency (Gradle Kotlin)**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nThis snippet shows you how to form authentication dependency (gradle kotlin), which is an important aspect of form-based authentication in ktor server.\n\n**Form Authentication Dependency (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nThis snippet shows you how to form authentication dependency (gradle groovy), which is an important aspect of form-based authentication in ktor server.\n\n**Form Authentication Dependency (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to form authentication dependency (maven), which is an important aspect of form-based authentication in ktor server.\n\n**Form Authentication Flow Example**:\n\n```yaml\nPOST http://localhost:8080/login\nContent-Type: application/x-www-form-urlencoded\n\nusername=jetbrains&password=foobar\n```\n\nThis snippet shows you how to form authentication flow example, which is an important aspect of form-based authentication in ktor server.\n\n**Install Form Authentication Example**:\n\n```yaml\ninstall(Authentication) {\n    form {\n        // Configure form authentication\n    }\n}\n```\n\nThis snippet shows you how to install form authentication example, which is an important aspect of form-based authentication in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-form-based-auth.html", "title": "Form-based authentication in Ktor Server", "description": "This page covers how to implement form-based authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:13:13", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Form-based authentication in Ktor Server | Ktor Documentation", "og:type": "website", "ogTitle": "Form-based authentication in Ktor Server | Ktor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "twitter:title": "Form-based authentication in Ktor Server | Ktor", "twitter:description": "", "ogDescription": "", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Form-based authentication in Ktor Server | Ktor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "built-on": "2025-02-26T14:01:03.771340011", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8eb44f03-7809-4887-adf1-acf51398c343", "sourceURL": "https://ktor.io/docs/server-form-based-auth.html", "url": "https://ktor.io/docs/server-form-based-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Form-based authentication in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse HTTPS/TLS to protect sensitive information when using form-based authentication.\n\nKtor allows you to build a form using Kotlin DSL or choose between various JVM template engines, such as FreeMarker, Velocity, and so on.\n\nAs for the basic authentication, you can also use UserHashedTableAuth to validate users stored in an in-memory table that keeps usernames and password hashes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-form-based-auth.html", "title": "Form-based authentication in Ktor Server", "description": "This page covers how to implement form-based authentication in Ktor Server, including dependencies, configuration, and flow.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:13:13", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Form-based authentication in Ktor Server | Ktor Documentation", "og:type": "website", "ogTitle": "Form-based authentication in Ktor Server | Ktor", "ogLocale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "twitter:title": "Form-based authentication in Ktor Server | Ktor", "twitter:description": "", "ogDescription": "", "og:locale": "en_US", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Form-based authentication in Ktor Server | Ktor", "build-number": "707", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "ogUrl": "https://ktor.io/docs/3.1.1/server-form-based-auth.html", "built-on": "2025-02-26T14:01:03.771340011", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "8eb44f03-7809-4887-adf1-acf51398c343", "sourceURL": "https://ktor.io/docs/server-form-based-auth.html", "url": "https://ktor.io/docs/server-form-based-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Create a client application is in ktor?\n\nAssistant: Sure, I'd be happy to explain Create a client application in ktor.\n\n# Create a client application\n\nThis tutorial shows you how to create your first Ktor client application that sends a request and prints out a response.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nBefore starting this tutorial, [install IntelliJ IDEA Community or Ultimate](https://www.jetbrains.com/help/idea/installation-guide.html).\n\n## Create a new project\n\nYou can [create and configure](https://ktor.io/docs/client-create-and-configure.html) a Ktor Client manually in an existing project, however a convenient way to start from scratch is by generating a new project using the bundled Kotlin plugin for IntelliJ IDEA.\n\nTo create a new Kotlin project, [open IntelliJ IDEA](https://www.jetbrains.com/help/idea/run-for-the-first-time.html) and follow the steps below:\n\n1. On the Welcome screen, click New Project.\n\nOtherwise, from the main menu, select File | New | Project.\n\n2. In the New Project wizard, choose Kotlin from the list on the left.\n\n3. On the right pane, specify the following settings:\n   - Name: Specify a project name.\n   - Location: Specify a directory for your project.\n   - Build system: Make sure that Gradle is selected.\n   - Gradle DSL: Choose Kotlin.\n   - Add sample code: Select this option to include sample code in the generated project.\n4. Click Create and wait until IntelliJ IDEA generates a project and installs the dependencies.\n\n## Add dependencies\n\nLet's add dependencies required for a Ktor client.\n\n1. Open the gradle.properties file and add the following line to specify the Ktor version:\n\n```\nktor_version=3.1.0\n```\n\n> ### note\n>\n> To use the EAP version of Ktor, you need to add a [Space repository](https://ktor.io/docs/server-dependencies.html#repositories).\n\n2. Open the build.gradle.kts file and add the following artifacts to the dependencies block:\n\n```\nval ktor_version: String by project\n\ndependencies {\n       implementation(\"io.ktor:ktor-client-core:$ktor_version\")\n       implementation(\"io.ktor:ktor-client-cio:$ktor_version\")\n}\n```\n\n   - `ktor-client-core` is a core dependency that provides the main client functionality,\n   - `ktor-client-cio` is a dependency for an [engine](https://ktor.io/docs/client-engines.html) processing network requests.\n3. Click the Load Gradle Changes icon in the top right corner of the build.gradle.kts file to install the newly added dependencies.\n\n## Create a client\n\nTo add the client implementation, navigate to src/main/kotlin and follow the steps below:\n\n1. Open the Main.kt file and replace the existing code with the following implementation:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nfun main() {\n       val client = HttpClient(CIO)\n}\n```\n\nIn Ktor, a client is represented by the [HttpClient](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html) class.\n\n2. Use the [`HttpClient.get()`](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/get.html) method to [make a GET request](https://ktor.io/docs/client-requests.html). A [response](https://ktor.io/docs/client-responses.html) will be received as a `HttpResponse` class object.\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\n\nfun main() {\n       val client = HttpClient(CIO)\n       val response: HttpResponse = client.get(\"https://ktor.io/\")\n}\n```\n\nAfter adding the code above, the IDE shows the following error for the `get()` function: Suspend function 'get' should be called only from a coroutine or another suspend function.\nTo fix this, you need to make the `main()` function suspending.\n\n> ### tip\n>\n> To learn more about calling `suspend` functions, see [Coroutines basics](https://kotlinlang.org/docs/coroutines-basics.html).\n\n3. In IntelliJ IDEA, click the red bulb next to the definition and choose Make main suspend.\n4. Use the `println()` function to print a [status code](https://ktor.io/docs/client-responses.html#status) returned by the server and the `close()` function to close the stream and release any resources associated with it. The Main.kt file should look in the following way:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\n\nsuspend fun main() {\n       val client = HttpClient(CIO)\n       val response: HttpResponse = client.get(\"https://ktor.io/\")\n       println(response.status)\n       client.close()\n}\n```\n\n## Run your application\n\nTo run your application, navigate to the Main.kt file and follow the steps below:\n\n1. In IntelliJ IDEA, click the gutter icon next to the `main()` function and choose Run 'MainKt'.\n2. Wait until Intellij IDEA runs the application.\n3. You will see the output displayed in the Run pane on the bottom of the IDE.\nAlthough the server responds with the `200 OK` message, you will also see an error message indicating that SLF4J failed to locate the `StaticLoggerBinder` class, defaulting to a no-operation (NOP) logger implementation. This effectively means that logging is disabled.\n\nYou now have a working client application. However, to fix this warning and be able to debug HTTP calls with logging, [an additional step](https://ktor.io/docs/client-create-new-application.html#enable-logging) is required.\n\n## Enable logging\n\nBecause Ktor uses the SLF4J abstraction layer for logging on JVM, to enable logging, you need to [provide a logging framework](https://ktor.io/docs/client-logging.html#jvm), such as [Logback](https://logback.qos.ch/).\n\n1. In the gradle.properties file, specify the version for the logging framework:\n\n```\nlogback_version=1.5.6\n```\n\n2. Open the build.gradle.kts file and add the following artifact to the dependencies block:\n\n```kotlin\n//...\nval logback_version: String by project\n\ndependencies {\n       //...\n       implementation(\"ch.qos.logback:logback-classic:$logback_version\")\n}\n```\n\n3. Click the Load Gradle Changes icon to install the newly added dependency.\n4. In IntelliJ IDEA, click the rerun button to restart the application.\n5. You should no longer see the error, but the same `200 OK` message will be displayed in the Run pane on the bottom of the IDE.\nWith this, you have enabled logging. To start seeing logs, you need to add logging configuration.\n\n6. Navigate to src/main/resources and create a new logback.xml file with the following implementation:\n\n```\n<configuration>\n       <appender name=\"APPENDER\" class=\"ch.qos.logback.core.ConsoleAppender\">\n           <encoder>\n               <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n           </encoder>\n       </appender>\n       <root level=\"trace\">\n           <appender-ref ref=\"APPENDER\"/>\n       </root>\n</configuration>\n```\n\n7. In IntelliJ IDEA, click the rerun button to restart the application.\n8. You should now be able to see trace logs above the printed response within the Run pane.\n\n## Next steps\n\nTo better understand and extend this configuration, explore how to [create and configure a Ktor client](https://ktor.io/docs/client-create-and-configure.html).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-create-new-application.html", "title": "Create a client application", "description": "This tutorial shows you how to create your first Ktor client application that sends a request and prints out a response.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:13:41", "type": "overview", "page_metadata": {"title": "Create a client application | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.282307531", "og:url": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Create a client application | Ktor", "og:description": "", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "ogLocale": "en_US", "og:type": "website", "twitter:title": "Create a client application | Ktor", "ogDescription": "", "build-number": "707", "ogSiteName": "Ktor Help", "ogTitle": "Create a client application | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "ea21d01b-e128-491b-8219-c994d0adbcc7", "sourceURL": "https://ktor.io/docs/client-create-new-application.html", "url": "https://ktor.io/docs/client-create-new-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nBefore starting this tutorial, [install IntelliJ IDEA Community or Ultimate](https://www.jetbrains.com/help/idea/installation-guide.html)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-new-application.html", "title": "Create a client application", "description": "This tutorial shows you how to create your first Ktor client application that sends a request and prints out a response.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:13:41", "type": "section_detail", "page_metadata": {"title": "Create a client application | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.282307531", "og:url": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Create a client application | Ktor", "og:description": "", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "ogLocale": "en_US", "og:type": "website", "twitter:title": "Create a client application | Ktor", "ogDescription": "", "build-number": "707", "ogSiteName": "Ktor Help", "ogTitle": "Create a client application | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "ea21d01b-e128-491b-8219-c994d0adbcc7", "sourceURL": "https://ktor.io/docs/client-create-new-application.html", "url": "https://ktor.io/docs/client-create-new-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a new project in ktor?\n\nAssistant: To create a new project in ktor, here's what you do:\nYou can [create and configure](https://ktor.io/docs/client-create-and-configure.html) a Ktor Client manually in an existing project, however a convenient way to start from scratch is by generating a new project using the bundled Kotlin plugin for IntelliJ IDEA.\n\nTo create a new Kotlin project, [open IntelliJ IDEA](https://www.jetbrains.com/help/idea/run-for-the-first-time.html) and follow the steps below:\n\n1. On the Welcome screen, click New Project.\n\nOtherwise, from the main menu, select File | New | Project.\n\n2. In the New Project wizard, choose Kotlin from the list on the left.\n\n3. On the right pane, specify the following settings:\n   - Name: Specify a project name.\n   - Location: Specify a directory for your project.\n   - Build system: Make sure that Gradle is selected.\n   - Gradle DSL: Choose Kotlin.\n   - Add sample code: Select this option to include sample code in the generated project.\n4. Click Create and wait until IntelliJ IDEA generates a project and installs the dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-new-application.html", "title": "Create a client application", "description": "This tutorial shows you how to create your first Ktor client application that sends a request and prints out a response.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:13:41", "type": "section_detail", "page_metadata": {"title": "Create a client application | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.282307531", "og:url": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Create a client application | Ktor", "og:description": "", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "ogLocale": "en_US", "og:type": "website", "twitter:title": "Create a client application | Ktor", "ogDescription": "", "build-number": "707", "ogSiteName": "Ktor Help", "ogTitle": "Create a client application | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "ea21d01b-e128-491b-8219-c994d0adbcc7", "sourceURL": "https://ktor.io/docs/client-create-new-application.html", "url": "https://ktor.io/docs/client-create-new-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nLet's add dependencies required for a Ktor client.\n\n1. Open the gradle.properties file and add the following line to specify the Ktor version:\n\n```\nktor_version=3.1.0\n```\n\n> ### note\n>\n> To use the EAP version of Ktor, you need to add a [Space repository](https://ktor.io/docs/server-dependencies.html#repositories).\n\n2. Open the build.gradle.kts file and add the following artifacts to the dependencies block:\n\n```\nval ktor_version: String by project\n\ndependencies {\n       implementation(\"io.ktor:ktor-client-core:$ktor_version\")\n       implementation(\"io.ktor:ktor-client-cio:$ktor_version\")\n}\n```\n\n   - `ktor-client-core` is a core dependency that provides the main client functionality,\n   - `ktor-client-cio` is a dependency for an [engine](https://ktor.io/docs/client-engines.html) processing network requests.\n3. Click the Load Gradle Changes icon in the top right corner of the build.gradle.kts file to install the newly added dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-new-application.html", "title": "Create a client application", "description": "This tutorial shows you how to create your first Ktor client application that sends a request and prints out a response.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:13:41", "type": "section_detail", "page_metadata": {"title": "Create a client application | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.282307531", "og:url": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Create a client application | Ktor", "og:description": "", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "ogLocale": "en_US", "og:type": "website", "twitter:title": "Create a client application | Ktor", "ogDescription": "", "build-number": "707", "ogSiteName": "Ktor Help", "ogTitle": "Create a client application | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "ea21d01b-e128-491b-8219-c994d0adbcc7", "sourceURL": "https://ktor.io/docs/client-create-new-application.html", "url": "https://ktor.io/docs/client-create-new-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a client in ktor?\n\nAssistant: To create a client in ktor, here's what you do:\nTo add the client implementation, navigate to src/main/kotlin and follow the steps below:\n\n1. Open the Main.kt file and replace the existing code with the following implementation:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nfun main() {\n       val client = HttpClient(CIO)\n}\n```\n\nIn Ktor, a client is represented by the [HttpClient](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html) class.\n\n2. Use the [`HttpClient.get()`](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/get.html) method to [make a GET request](https://ktor.io/docs/client-requests.html). A [response](https://ktor.io/docs/client-responses.html) will be received as a `HttpResponse` class object.\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\n\nfun main() {\n       val client = HttpClient(CIO)\n       val response: HttpResponse = client.get(\"https://ktor.io/\")\n}\n```\n\nAfter adding the code above, the IDE shows the following error for the `get()` function: Suspend function 'get' should be called only from a coroutine or another suspend function.\nTo fix this, you need to make the `main()` function suspending.\n\n> ### tip\n>\n> To learn more about calling `suspend` functions, see [Coroutines basics](https://kotlinlang.org/docs/coroutines-basics.html).\n\n3. In IntelliJ IDEA, click the red bulb next to the definition and choose Make main suspend.\n4. Use the `println()` function to print a [status code](https://ktor.io/docs/client-responses.html#status) returned by the server and the `close()` function to close the stream and release any resources associated with it. The Main.kt file should look in the following way:\n\n```\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\n\nsuspend fun main() {\n       val client = HttpClient(CIO)\n       val response: HttpResponse = client.get(\"https://ktor.io/\")\n       println(response.status)\n       client.close()\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-new-application.html", "title": "Create a client application", "description": "This tutorial shows you how to create your first Ktor client application that sends a request and prints out a response.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:13:41", "type": "section_detail", "page_metadata": {"title": "Create a client application | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.282307531", "og:url": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Create a client application | Ktor", "og:description": "", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "ogLocale": "en_US", "og:type": "website", "twitter:title": "Create a client application | Ktor", "ogDescription": "", "build-number": "707", "ogSiteName": "Ktor Help", "ogTitle": "Create a client application | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "ea21d01b-e128-491b-8219-c994d0adbcc7", "sourceURL": "https://ktor.io/docs/client-create-new-application.html", "url": "https://ktor.io/docs/client-create-new-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run your application in ktor?\n\nAssistant: To run your application in ktor, here's what you do:\nTo run your application, navigate to the Main.kt file and follow the steps below:\n\n1. In IntelliJ IDEA, click the gutter icon next to the `main()` function and choose Run 'MainKt'.\n2. Wait until Intellij IDEA runs the application.\n3. You will see the output displayed in the Run pane on the bottom of the IDE.\nAlthough the server responds with the `200 OK` message, you will also see an error message indicating that SLF4J failed to locate the `StaticLoggerBinder` class, defaulting to a no-operation (NOP) logger implementation. This effectively means that logging is disabled.\n\nYou now have a working client application. However, to fix this warning and be able to debug HTTP calls with logging, [an additional step](https://ktor.io/docs/client-create-new-application.html#enable-logging) is required..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-new-application.html", "title": "Create a client application", "description": "This tutorial shows you how to create your first Ktor client application that sends a request and prints out a response.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:13:41", "type": "section_detail", "page_metadata": {"title": "Create a client application | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.282307531", "og:url": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Create a client application | Ktor", "og:description": "", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "ogLocale": "en_US", "og:type": "website", "twitter:title": "Create a client application | Ktor", "ogDescription": "", "build-number": "707", "ogSiteName": "Ktor Help", "ogTitle": "Create a client application | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "ea21d01b-e128-491b-8219-c994d0adbcc7", "sourceURL": "https://ktor.io/docs/client-create-new-application.html", "url": "https://ktor.io/docs/client-create-new-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I enable logging in ktor?\n\nAssistant: To enable logging in ktor, here's what you do:\nBecause Ktor uses the SLF4J abstraction layer for logging on JVM, to enable logging, you need to [provide a logging framework](https://ktor.io/docs/client-logging.html#jvm), such as [Logback](https://logback.qos.ch/).\n\n1. In the gradle.properties file, specify the version for the logging framework:\n\n```\nlogback_version=1.5.6\n```\n\n2. Open the build.gradle.kts file and add the following artifact to the dependencies block:\n\n```kotlin\n//...\nval logback_version: String by project\n\ndependencies {\n       //...\n       implementation(\"ch.qos.logback:logback-classic:$logback_version\")\n}\n```\n\n3. Click the Load Gradle Changes icon to install the newly added dependency.\n4. In IntelliJ IDEA, click the rerun button to restart the application.\n5. You should no longer see the error, but the same `200 OK` message will be displayed in the Run pane on the bottom of the IDE.\nWith this, you have enabled logging. To start seeing logs, you need to add logging configuration.\n\n6. Navigate to src/main/resources and create a new logback.xml file with the following implementation:\n\n```\n<configuration>\n       <appender name=\"APPENDER\" class=\"ch.qos.logback.core.ConsoleAppender\">\n           <encoder>\n               <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n           </encoder>\n       </appender>\n       <root level=\"trace\">\n           <appender-ref ref=\"APPENDER\"/>\n       </root>\n</configuration>\n```\n\n7. In IntelliJ IDEA, click the rerun button to restart the application.\n8. You should now be able to see trace logs above the printed response within the Run pane..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-new-application.html", "title": "Create a client application", "description": "This tutorial shows you how to create your first Ktor client application that sends a request and prints out a response.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:13:41", "type": "section_detail", "page_metadata": {"title": "Create a client application | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.282307531", "og:url": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Create a client application | Ktor", "og:description": "", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "ogLocale": "en_US", "og:type": "website", "twitter:title": "Create a client application | Ktor", "ogDescription": "", "build-number": "707", "ogSiteName": "Ktor Help", "ogTitle": "Create a client application | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "ea21d01b-e128-491b-8219-c994d0adbcc7", "sourceURL": "https://ktor.io/docs/client-create-new-application.html", "url": "https://ktor.io/docs/client-create-new-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I next steps in ktor?\n\nAssistant: To next steps in ktor, here's what you do:\nTo better understand and extend this configuration, explore how to [create and configure a Ktor client](https://ktor.io/docs/client-create-and-configure.html)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-new-application.html", "title": "Create a client application", "description": "This tutorial shows you how to create your first Ktor client application that sends a request and prints out a response.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:13:41", "type": "section_detail", "page_metadata": {"title": "Create a client application | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.282307531", "og:url": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Create a client application | Ktor", "og:description": "", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "ogLocale": "en_US", "og:type": "website", "twitter:title": "Create a client application | Ktor", "ogDescription": "", "build-number": "707", "ogSiteName": "Ktor Help", "ogTitle": "Create a client application | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "ea21d01b-e128-491b-8219-c994d0adbcc7", "sourceURL": "https://ktor.io/docs/client-create-new-application.html", "url": "https://ktor.io/docs/client-create-new-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Create a client application in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add Ktor version to gradle.properties**:\n\n```yaml\nktor_version=3.1.0\n```\n\nThis snippet shows you how to add ktor version to gradle.properties, which is an important aspect of create a client application.\n\n**Add dependencies to build.gradle.kts**:\n\n```yaml\nval ktor_version: String by project\n\ndependencies {\n       implementation(\"io.ktor:ktor-client-core:$ktor_version\")\n       implementation(\"io.ktor:ktor-client-cio:$ktor_version\")\n}\n```\n\nThis snippet shows you how to add dependencies to build.gradle.kts, which is an important aspect of create a client application.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-create-new-application.html", "title": "Create a client application", "description": "This tutorial shows you how to create your first Ktor client application that sends a request and prints out a response.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:13:41", "type": "code_examples", "page_metadata": {"title": "Create a client application | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.282307531", "og:url": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Create a client application | Ktor", "og:description": "", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "ogLocale": "en_US", "og:type": "website", "twitter:title": "Create a client application | Ktor", "ogDescription": "", "build-number": "707", "ogSiteName": "Ktor Help", "ogTitle": "Create a client application | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "ea21d01b-e128-491b-8219-c994d0adbcc7", "sourceURL": "https://ktor.io/docs/client-create-new-application.html", "url": "https://ktor.io/docs/client-create-new-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Create a client application in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo learn more about calling `suspend` functions, see [Coroutines basics](https://kotlinlang.org/docs/coroutines-basics.html).\n\nKtor offers a simple and straightforward way to add logs for HTTP calls through the [Logging](https://ktor.io/docs/client-logging.html) plugin, while adding a configuration file allows you to fine-tune logging behaviour in complex applications.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-create-new-application.html", "title": "Create a client application", "description": "This tutorial shows you how to create your first Ktor client application that sends a request and prints out a response.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:13:41", "type": "best_practices", "page_metadata": {"title": "Create a client application | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.282307531", "og:url": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "og:site_name": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:locale": "en_US", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "og:title": "Create a client application | Ktor", "og:description": "", "language": "en-US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-new-application.html", "ogLocale": "en_US", "og:type": "website", "twitter:title": "Create a client application | Ktor", "ogDescription": "", "build-number": "707", "ogSiteName": "Ktor Help", "ogTitle": "Create a client application | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:site": "@JetBrainsKtor", "scrapeId": "ea21d01b-e128-491b-8219-c994d0adbcc7", "sourceURL": "https://ktor.io/docs/client-create-new-application.html", "url": "https://ktor.io/docs/client-create-new-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Client Plugin Text and charsets is in ktor?\n\nAssistant: Sure, I'd be happy to explain Client Plugin Text and charsets in ktor.\n\n# Client Plugin Text and charsets\n\nThis plugin allows you to process the plain text content in request and response: fills the Accept header with registered charsets, encode request body and decode response body according to ContentType charset.Here's a quick rundown of what this is about:\n\n## Configuration\n\nIf no configuration specified in configuration or HTTP call properties, `Charsets.UTF_8` is used by default.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-text-and-charsets.html", "title": "Client Plugin Text and charsets", "description": "This plugin allows you to process the plain text content in request and response: fills the Accept header with registered charsets, encode request body and decode response body according to ContentType charset.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:13:48", "type": "overview", "page_metadata": {"twitter:site": "@JetBrainsKtor", "twitter:title": "Text and charsets | Ktor", "ogTitle": "Text and charsets | Ktor", "twitter:description": "", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-text-and-charsets.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-text-and-charsets.html", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Text and charsets | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "built-on": "2025-02-26T14:01:04.037980899", "og:locale": "en_US", "og:site_name": "Ktor Help", "og:title": "Text and charsets | Ktor", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "204f7b60-100c-425a-a514-f1238ac613d3", "sourceURL": "https://ktor.io/docs/client-text-and-charsets.html", "url": "https://ktor.io/docs/client-text-and-charsets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configuration in ktor?\n\nAssistant: To configuration in ktor, here's what you do:\nIf no configuration specified in configuration or HTTP call properties, `Charsets.UTF_8` is used by default..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-text-and-charsets.html", "title": "Client Plugin Text and charsets", "description": "This plugin allows you to process the plain text content in request and response: fills the Accept header with registered charsets, encode request body and decode response body according to ContentType charset.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:13:48", "type": "section_detail", "page_metadata": {"twitter:site": "@JetBrainsKtor", "twitter:title": "Text and charsets | Ktor", "ogTitle": "Text and charsets | Ktor", "twitter:description": "", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-text-and-charsets.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-text-and-charsets.html", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Text and charsets | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "built-on": "2025-02-26T14:01:04.037980899", "og:locale": "en_US", "og:site_name": "Ktor Help", "og:title": "Text and charsets | Ktor", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "204f7b60-100c-425a-a514-f1238ac613d3", "sourceURL": "https://ktor.io/docs/client-text-and-charsets.html", "url": "https://ktor.io/docs/client-text-and-charsets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Client Plugin Text and charsets in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HttpClient Configuration Example**:\n\n```yaml\nval client = HttpClient(HttpClientEngine) {\n    Charsets {\n        // Allow using `UTF_8`.\n        register(Charsets.UTF_8)\n\n        // Allow using `ISO_8859_1` with quality 0.1.\n        register(Charsets.ISO_8859_1, quality=0.1f)\n\n        // Specify Charset to send request(if no charset in request headers).\n        sendCharset = ...\n\n        // Specify Charset to receive response(if no charset in response headers).\n        responseCharsetFallback = ...\n    }\n}\n```\n\nThis snippet shows you how to httpclient configuration example, which is an important aspect of client plugin text and charsets.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-text-and-charsets.html", "title": "Client Plugin Text and charsets", "description": "This plugin allows you to process the plain text content in request and response: fills the Accept header with registered charsets, encode request body and decode response body according to ContentType charset.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:13:48", "type": "code_examples", "page_metadata": {"twitter:site": "@JetBrainsKtor", "twitter:title": "Text and charsets | Ktor", "ogTitle": "Text and charsets | Ktor", "twitter:description": "", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-text-and-charsets.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-text-and-charsets.html", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Text and charsets | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "built-on": "2025-02-26T14:01:04.037980899", "og:locale": "en_US", "og:site_name": "Ktor Help", "og:title": "Text and charsets | Ktor", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "204f7b60-100c-425a-a514-f1238ac613d3", "sourceURL": "https://ktor.io/docs/client-text-and-charsets.html", "url": "https://ktor.io/docs/client-text-and-charsets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Client Plugin Text and charsets in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThis help topic is in development and will be updated in the future.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-text-and-charsets.html", "title": "Client Plugin Text and charsets", "description": "This plugin allows you to process the plain text content in request and response: fills the Accept header with registered charsets, encode request body and decode response body according to ContentType charset.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:13:48", "type": "best_practices", "page_metadata": {"twitter:site": "@JetBrainsKtor", "twitter:title": "Text and charsets | Ktor", "ogTitle": "Text and charsets | Ktor", "twitter:description": "", "language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-text-and-charsets.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-text-and-charsets.html", "ogSiteName": "Ktor Help", "build-number": "707", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "og:description": "", "title": "Text and charsets | Ktor Documentation", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "built-on": "2025-02-26T14:01:04.037980899", "og:locale": "en_US", "og:site_name": "Ktor Help", "og:title": "Text and charsets | Ktor", "ogDescription": "", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogLocale": "en_US", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "204f7b60-100c-425a-a514-f1238ac613d3", "sourceURL": "https://ktor.io/docs/client-text-and-charsets.html", "url": "https://ktor.io/docs/client-text-and-charsets.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Creating a cross-platform mobile application is in ktor?\n\nAssistant: Sure, I'd be happy to explain Creating a cross-platform mobile application in ktor.\n\n# Creating a cross-platform mobile application\n\nThis tutorial covers how to create a simple Kotlin Multiplatform Mobile application using the Ktor HTTP client, which sends a request and receives a response body as plain HTML text.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nFirst, you need to set up an environment for cross-platform mobile development by installing the necessary tools on a suitable operating system. Learn how to do this from the [Set up an environment](https://kotlinlang.org/docs/multiplatform-mobile-setup.html) section.\n\n> ### note\n>\n> You will need a Mac with macOS to complete certain steps in this tutorial, which include writing iOS-specific code and running an iOS application.\n\n## Create a new project\n\nTo start a new Kotlin Multiplatform project, there are two approaches available:\n\n- You can create a project from a template within Android Studio.\n- Alternatively, you can use the [Kotlin Multiplatform Wizard](https://kmp.jetbrains.com/) to generate a new project. The wizard provides options for customizing your project setup, allowing you to exclude Android support or include a Ktor Server, for instance.\n\nFor the sake of this tutorial, we will demonstrate the process of creating a project from a template:\n\n1. In Android Studio, select File | New | New Project.\n2. Select Kotlin Multiplatform App in the list of project templates, and click Next.\n3. Specify a name for your application, and click Next. In our tutorial, the application name is `KmmKtor`.\n4. On the next page, leave the default settings and click Finish to create a new project. Now, wait while your project is set up. It may take some time to download and set up the required components when you do this for the first time.\n\n> ### tip\n>\n> To view the complete structure of the generated multiplatform project, switch from Android to Project in a [Project view](https://developer.android.com/studio/projects#ProjectView).\n\n## Configure build scripts\n\n### Update Kotlin Gradle plugins\n\nOpen the `gradle/libs.versions.toml` file and update the Kotlin version to the latest:\n\n```\nkotlin = \"2.1.10\"\n```\n\n> ### tip\n>\n> Using Ktor in a Kotlin/Native project requires a [new memory manager](https://kotlinlang.org/docs/native-memory-manager.html), which is enabled by default starting with Kotlin 1.7.20.\n\n### Add Ktor dependencies\n\nTo use the Ktor HTTP client in your project, you need to add at least two dependencies: a client dependency and an engine dependency.\n\nIn the `gradle/libs.versions.toml` file add the Ktor version:\n\n```\n[versions]\nktor = \"3.1.1\"\n```\n\n> ### note\n>\n> To use the EAP version of Ktor, you need to add a [Space repository](https://ktor.io/docs/server-dependencies.html#repositories).\n\nThen, define the Ktor client and engine libraries:\n\n```\n[libraries]\nktor-client-core = { module = \"io.ktor:ktor-client-core\", version.ref = \"ktor\" }\nktor-client-okhttp = { module = \"io.ktor:ktor-client-okhttp\", version.ref = \"ktor\" }\nktor-client-darwin = { module = \"io.ktor:ktor-client-darwin\", version.ref = \"ktor\" }\n```\n\nTo add the dependencies, open the `shared/build.gradle.kts` file and follow the steps below:\n\n1. To use the Ktor client in common code, add the dependency `ktor-client-core` to the `commonMain` source set:\n\n```\nsourceSets {\n       commonMain.dependencies {\n           implementation(libs.ktor.client.core)\n       }\n}\n```\n\n2. Add an [engine dependency](https://ktor.io/docs/client-engines.html) for each required platform to the corresponding source set:\n\n   - For Android, add the `ktor-client-okhttp` dependency to the `androidMain` source set:\n\n```\nandroidMain.dependencies {\n         implementation(libs.ktor.client.okhttp)\n     }\n```\n\n   For Android, you can also use [other engine types](https://ktor.io/docs/client-engines.html#jvm-android).\n\n   - For iOS, add the `ktor-client-darwin` dependency to `iosMain`:\n\n```\niosMain.dependencies {\n         implementation(libs.ktor.client.darwin)\n     }\n```\n\n### Add coroutines\n\nTo use coroutines in [Android code](https://ktor.io/docs/client-create-multiplatform-application.html#android-activity), you need to add `kotlinx.coroutines` to your project:\n\n1. Open the `gradle/libs.versions.toml` file and specify the coroutines version and libraries:\n\n```\n[versions]\ncoroutines = \"1.9.0\"\n\n[libraries]\nkotlinx-coroutines-core = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-core\", version.ref = \"coroutines\" }\nkotlinx-coroutines-android = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-android\", version.ref = \"coroutines\" }\n```\n\n2. Open the `build.gradle.kts` file and add the `kotlinx-coroutines-core` dependency to the `commonMain` source set:\n\n```\nsourceSets {\n       commonMain.dependencies {\n           implementation(libs.ktor.client.core)\n           implementation(libs.kotlinx.coroutines.core)\n       }\n}\n```\n\n3. Then, open the `androidApp/build.gradle.kts` and add the `kotlinx-coroutines-android` dependency:\n\n```\ndependencies {\n    implementation(libs.kotlinx.coroutines.android)\n}\n```\n\nClick Sync Now in the top right corner of the `gradle.properties` file to install the added dependencies.\n\n## Update your application\n\n### Shared code\n\nTo update code shared between Android and iOS, open the `shared/src/commonMain/kotlin/com/example/kmmktor/Greeting.kt` file and add the following code to the `Greeting` class:\n\n```\npackage com.example.kmmktor\n\nimport io.ktor.client.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\n\nclass Greeting {\n    private val client = HttpClient()\n\n    suspend fun greeting(): String {\n        val response = client.get(\"https://ktor.io/docs/\")\n        return response.bodyAsText()\n    }\n}\n```\n\n- To create the HTTP client, the `HttpClient` constructor is called.\n- The suspending `greeting` function is used to make a [request](https://ktor.io/docs/client-requests.html) and receive the body of a [response](https://ktor.io/docs/client-responses.html) as a string value.\n\n### Android code\n\nTo call the suspending `greeting` function from the Android code, we'll be using [rememberCoroutineScope](https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#rememberCoroutineScope(kotlin.Function0)).\n\nOpen the `androidApp/src/main/java/com/example/kmmktor/android/MainActivity.kt` file and update `MainActivity` code as follows:\n\n```\npackage com.example.kmmktor.android\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport com.example.kmmktor.Greeting\nimport kotlinx.coroutines.launch\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyApplicationTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    val scope = rememberCoroutineScope()\n                    var text by remember { mutableStateOf(\"Loading\") }\n                    LaunchedEffect(true) {\n                        scope.launch {\n                            text = try {\n                                Greeting().greeting()\n                            } catch (e: Exception) {\n                                e.localizedMessage ?: \"error\"\n                            }\n                        }\n                    }\n                    GreetingView(text)\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun GreetingView(text: String) {\n    Text(text = text)\n}\n\n@Preview\n@Composable\nfun DefaultPreview() {\n    MyApplicationTheme {\n        GreetingView(\"Hello, Android!\")\n    }\n}\n```\n\nInside the created scope, we can call the shared `greeting` function and handle possible exceptions.\n\n### iOS code\n\n1. Open the `iosApp/iosApp/iOSApp.swift` file and update the entry point for the application:\n\n```\nimport SwiftUI\n\n@main\nstruct iOSApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView(viewModel: ContentView.ViewModel())\n        }\n    }\n}\n```\n\n2. Open the `iosApp/iosApp/ContentView.swift` file and update `ContentView` code in the following way:\n\n```\nimport SwiftUI\nimport shared\n\nstruct ContentView: View {\n       @ObservedObject private(set) var viewModel: ViewModel\n\n       var body: some View {\n           Text(viewModel.text)\n       }\n}\n\nextension ContentView {\n       class ViewModel: ObservableObject {\n           @Published var text = \"Loading...\"\n           init() {\n               Greeting().greeting { greeting, error in\n                   DispatchQueue.main.async {\n                       if let greeting = greeting {\n                           self.text = greeting\n                       } else {\n                           self.text = error?.localizedDescription ?? \"error\"\n                       }\n                   }\n               }\n           }\n       }\n}\n```\n\nOn iOS, the `greeting` suspending function is available as a function with a callback.\n\n## Enable internet access on Android\n\nThe final thing we need to do is to enable internet access for the Android application. Open the `androidApp/src/main/AndroidManifest.xml` file and enable the required permission using the `uses-permission` element:\n\n```\n<manifest>\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <application>\n        ...\n    </application>\n</manifest>\n```\n\n## Run your application\n\nTo run the created multiplatform application on the Android or iOS simulator, select androidApp or iosApp and click Run. The simulator should display the received HTML document as plain text.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-create-multiplatform-application.html", "title": "Creating a cross-platform mobile application", "description": "This tutorial covers how to create a simple Kotlin Multiplatform Mobile application using the Ktor HTTP client, which sends a request and receives a response body as plain HTML text.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:14:19", "type": "overview", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:type": "website", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a cross-platform mobile application | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "twitter:description": "", "built-on": "2025-02-26T14:01:05.46099003", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Creating a cross-platform mobile application | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "ogTitle": "Creating a cross-platform mobile application | Ktor", "og:locale": "en_US", "twitter:title": "Creating a cross-platform mobile application | Ktor", "scrapeId": "aa795c46-03f0-4dae-b203-8e36a92ac1bc", "sourceURL": "https://ktor.io/docs/client-create-multiplatform-application.html", "url": "https://ktor.io/docs/client-create-multiplatform-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nFirst, you need to set up an environment for cross-platform mobile development by installing the necessary tools on a suitable operating system. Learn how to do this from the [Set up an environment](https://kotlinlang.org/docs/multiplatform-mobile-setup.html) section.\n\n> ### note\n>\n> You will need a Mac with macOS to complete certain steps in this tutorial, which include writing iOS-specific code and running an iOS application..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-multiplatform-application.html", "title": "Creating a cross-platform mobile application", "description": "This tutorial covers how to create a simple Kotlin Multiplatform Mobile application using the Ktor HTTP client, which sends a request and receives a response body as plain HTML text.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:14:19", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:type": "website", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a cross-platform mobile application | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "twitter:description": "", "built-on": "2025-02-26T14:01:05.46099003", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Creating a cross-platform mobile application | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "ogTitle": "Creating a cross-platform mobile application | Ktor", "og:locale": "en_US", "twitter:title": "Creating a cross-platform mobile application | Ktor", "scrapeId": "aa795c46-03f0-4dae-b203-8e36a92ac1bc", "sourceURL": "https://ktor.io/docs/client-create-multiplatform-application.html", "url": "https://ktor.io/docs/client-create-multiplatform-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a new project in ktor?\n\nAssistant: To create a new project in ktor, here's what you do:\nTo start a new Kotlin Multiplatform project, there are two approaches available:\n\n- You can create a project from a template within Android Studio.\n- Alternatively, you can use the [Kotlin Multiplatform Wizard](https://kmp.jetbrains.com/) to generate a new project. The wizard provides options for customizing your project setup, allowing you to exclude Android support or include a Ktor Server, for instance.\n\nFor the sake of this tutorial, we will demonstrate the process of creating a project from a template:\n\n1. In Android Studio, select File | New | New Project.\n2. Select Kotlin Multiplatform App in the list of project templates, and click Next.\n3. Specify a name for your application, and click Next. In our tutorial, the application name is `KmmKtor`.\n4. On the next page, leave the default settings and click Finish to create a new project. Now, wait while your project is set up. It may take some time to download and set up the required components when you do this for the first time.\n\n> ### tip\n>\n> To view the complete structure of the generated multiplatform project, switch from Android to Project in a [Project view](https://developer.android.com/studio/projects#ProjectView)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-multiplatform-application.html", "title": "Creating a cross-platform mobile application", "description": "This tutorial covers how to create a simple Kotlin Multiplatform Mobile application using the Ktor HTTP client, which sends a request and receives a response body as plain HTML text.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:14:19", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:type": "website", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a cross-platform mobile application | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "twitter:description": "", "built-on": "2025-02-26T14:01:05.46099003", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Creating a cross-platform mobile application | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "ogTitle": "Creating a cross-platform mobile application | Ktor", "og:locale": "en_US", "twitter:title": "Creating a cross-platform mobile application | Ktor", "scrapeId": "aa795c46-03f0-4dae-b203-8e36a92ac1bc", "sourceURL": "https://ktor.io/docs/client-create-multiplatform-application.html", "url": "https://ktor.io/docs/client-create-multiplatform-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure build scripts in ktor?\n\nAssistant: To configure build scripts in ktor, here's what you do:\n### Update Kotlin Gradle plugins\n\nOpen the `gradle/libs.versions.toml` file and update the Kotlin version to the latest:\n\n```\nkotlin = \"2.1.10\"\n```\n\n> ### tip\n>\n> Using Ktor in a Kotlin/Native project requires a [new memory manager](https://kotlinlang.org/docs/native-memory-manager.html), which is enabled by default starting with Kotlin 1.7.20.\n\n### Add Ktor dependencies\n\nTo use the Ktor HTTP client in your project, you need to add at least two dependencies: a client dependency and an engine dependency.\n\nIn the `gradle/libs.versions.toml` file add the Ktor version:\n\n```\n[versions]\nktor = \"3.1.1\"\n```\n\n> ### note\n>\n> To use the EAP version of Ktor, you need to add a [Space repository](https://ktor.io/docs/server-dependencies.html#repositories).\n\nThen, define the Ktor client and engine libraries:\n\n```\n[libraries]\nktor-client-core = { module = \"io.ktor:ktor-client-core\", version.ref = \"ktor\" }\nktor-client-okhttp = { module = \"io.ktor:ktor-client-okhttp\", version.ref = \"ktor\" }\nktor-client-darwin = { module = \"io.ktor:ktor-client-darwin\", version.ref = \"ktor\" }\n```\n\nTo add the dependencies, open the `shared/build.gradle.kts` file and follow the steps below:\n\n1. To use the Ktor client in common code, add the dependency `ktor-client-core` to the `commonMain` source set:\n\n```\nsourceSets {\n       commonMain.dependencies {\n           implementation(libs.ktor.client.core)\n       }\n}\n```\n\n2. Add an [engine dependency](https://ktor.io/docs/client-engines.html) for each required platform to the corresponding source set:\n\n   - For Android, add the `ktor-client-okhttp` dependency to the `androidMain` source set:\n\n```\nandroidMain.dependencies {\n         implementation(libs.ktor.client.okhttp)\n     }\n```\n\n   For Android, you can also use [other engine types](https://ktor.io/docs/client-engines.html#jvm-android).\n\n   - For iOS, add the `ktor-client-darwin` dependency to `iosMain`:\n\n```\niosMain.dependencies {\n         implementation(libs.ktor.client.darwin)\n     }\n```\n\n### Add coroutines\n\nTo use coroutines in [Android code](https://ktor.io/docs/client-create-multiplatform-application.html#android-activity), you need to add `kotlinx.coroutines` to your project:\n\n1. Open the `gradle/libs.versions.toml` file and specify the coroutines version and libraries:\n\n```\n[versions]\ncoroutines = \"1.9.0\"\n\n[libraries]\nkotlinx-coroutines-core = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-core\", version.ref = \"coroutines\" }\nkotlinx-coroutines-android = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-android\", version.ref = \"coroutines\" }\n```\n\n2. Open the `build.gradle.kts` file and add the `kotlinx-coroutines-core` dependency to the `commonMain` source set:\n\n```\nsourceSets {\n       commonMain.dependencies {\n           implementation(libs.ktor.client.core)\n           implementation(libs.kotlinx.coroutines.core)\n       }\n}\n```\n\n3. Then, open the `androidApp/build.gradle.kts` and add the `kotlinx-coroutines-android` dependency:\n\n```\ndependencies {\n    implementation(libs.kotlinx.coroutines.android)\n}\n```\n\nClick Sync Now in the top right corner of the `gradle.properties` file to install the added dependencies..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-multiplatform-application.html", "title": "Creating a cross-platform mobile application", "description": "This tutorial covers how to create a simple Kotlin Multiplatform Mobile application using the Ktor HTTP client, which sends a request and receives a response body as plain HTML text.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:14:19", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:type": "website", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a cross-platform mobile application | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "twitter:description": "", "built-on": "2025-02-26T14:01:05.46099003", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Creating a cross-platform mobile application | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "ogTitle": "Creating a cross-platform mobile application | Ktor", "og:locale": "en_US", "twitter:title": "Creating a cross-platform mobile application | Ktor", "scrapeId": "aa795c46-03f0-4dae-b203-8e36a92ac1bc", "sourceURL": "https://ktor.io/docs/client-create-multiplatform-application.html", "url": "https://ktor.io/docs/client-create-multiplatform-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I update your application in ktor?\n\nAssistant: To update your application in ktor, here's what you do:\n### Shared code\n\nTo update code shared between Android and iOS, open the `shared/src/commonMain/kotlin/com/example/kmmktor/Greeting.kt` file and add the following code to the `Greeting` class:\n\n```\npackage com.example.kmmktor\n\nimport io.ktor.client.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\n\nclass Greeting {\n    private val client = HttpClient()\n\n    suspend fun greeting(): String {\n        val response = client.get(\"https://ktor.io/docs/\")\n        return response.bodyAsText()\n    }\n}\n```\n\n- To create the HTTP client, the `HttpClient` constructor is called.\n- The suspending `greeting` function is used to make a [request](https://ktor.io/docs/client-requests.html) and receive the body of a [response](https://ktor.io/docs/client-responses.html) as a string value.\n\n### Android code\n\nTo call the suspending `greeting` function from the Android code, we'll be using [rememberCoroutineScope](https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#rememberCoroutineScope(kotlin.Function0)).\n\nOpen the `androidApp/src/main/java/com/example/kmmktor/android/MainActivity.kt` file and update `MainActivity` code as follows:\n\n```\npackage com.example.kmmktor.android\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport com.example.kmmktor.Greeting\nimport kotlinx.coroutines.launch\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyApplicationTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    val scope = rememberCoroutineScope()\n                    var text by remember { mutableStateOf(\"Loading\") }\n                    LaunchedEffect(true) {\n                        scope.launch {\n                            text = try {\n                                Greeting().greeting()\n                            } catch (e: Exception) {\n                                e.localizedMessage ?: \"error\"\n                            }\n                        }\n                    }\n                    GreetingView(text)\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun GreetingView(text: String) {\n    Text(text = text)\n}\n\n@Preview\n@Composable\nfun DefaultPreview() {\n    MyApplicationTheme {\n        GreetingView(\"Hello, Android!\")\n    }\n}\n```\n\nInside the created scope, we can call the shared `greeting` function and handle possible exceptions.\n\n### iOS code\n\n1. Open the `iosApp/iosApp/iOSApp.swift` file and update the entry point for the application:\n\n```\nimport SwiftUI\n\n@main\nstruct iOSApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView(viewModel: ContentView.ViewModel())\n        }\n    }\n}\n```\n\n2. Open the `iosApp/iosApp/ContentView.swift` file and update `ContentView` code in the following way:\n\n```\nimport SwiftUI\nimport shared\n\nstruct ContentView: View {\n       @ObservedObject private(set) var viewModel: ViewModel\n\n       var body: some View {\n           Text(viewModel.text)\n       }\n}\n\nextension ContentView {\n       class ViewModel: ObservableObject {\n           @Published var text = \"Loading...\"\n           init() {\n               Greeting().greeting { greeting, error in\n                   DispatchQueue.main.async {\n                       if let greeting = greeting {\n                           self.text = greeting\n                       } else {\n                           self.text = error?.localizedDescription ?? \"error\"\n                       }\n                   }\n               }\n           }\n       }\n}\n```\n\nOn iOS, the `greeting` suspending function is available as a function with a callback..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-multiplatform-application.html", "title": "Creating a cross-platform mobile application", "description": "This tutorial covers how to create a simple Kotlin Multiplatform Mobile application using the Ktor HTTP client, which sends a request and receives a response body as plain HTML text.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:14:19", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:type": "website", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a cross-platform mobile application | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "twitter:description": "", "built-on": "2025-02-26T14:01:05.46099003", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Creating a cross-platform mobile application | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "ogTitle": "Creating a cross-platform mobile application | Ktor", "og:locale": "en_US", "twitter:title": "Creating a cross-platform mobile application | Ktor", "scrapeId": "aa795c46-03f0-4dae-b203-8e36a92ac1bc", "sourceURL": "https://ktor.io/docs/client-create-multiplatform-application.html", "url": "https://ktor.io/docs/client-create-multiplatform-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I enable internet access on android in ktor?\n\nAssistant: To enable internet access on android in ktor, here's what you do:\nThe final thing we need to do is to enable internet access for the Android application. Open the `androidApp/src/main/AndroidManifest.xml` file and enable the required permission using the `uses-permission` element:\n\n```\n<manifest>\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <application>\n        ...\n    </application>\n</manifest>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-multiplatform-application.html", "title": "Creating a cross-platform mobile application", "description": "This tutorial covers how to create a simple Kotlin Multiplatform Mobile application using the Ktor HTTP client, which sends a request and receives a response body as plain HTML text.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:14:19", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:type": "website", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a cross-platform mobile application | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "twitter:description": "", "built-on": "2025-02-26T14:01:05.46099003", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Creating a cross-platform mobile application | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "ogTitle": "Creating a cross-platform mobile application | Ktor", "og:locale": "en_US", "twitter:title": "Creating a cross-platform mobile application | Ktor", "scrapeId": "aa795c46-03f0-4dae-b203-8e36a92ac1bc", "sourceURL": "https://ktor.io/docs/client-create-multiplatform-application.html", "url": "https://ktor.io/docs/client-create-multiplatform-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run your application in ktor?\n\nAssistant: To run your application in ktor, here's what you do:\nTo run the created multiplatform application on the Android or iOS simulator, select androidApp or iosApp and click Run. The simulator should display the received HTML document as plain text..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-create-multiplatform-application.html", "title": "Creating a cross-platform mobile application", "description": "This tutorial covers how to create a simple Kotlin Multiplatform Mobile application using the Ktor HTTP client, which sends a request and receives a response body as plain HTML text.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:14:19", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:type": "website", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a cross-platform mobile application | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "twitter:description": "", "built-on": "2025-02-26T14:01:05.46099003", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Creating a cross-platform mobile application | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "ogTitle": "Creating a cross-platform mobile application | Ktor", "og:locale": "en_US", "twitter:title": "Creating a cross-platform mobile application | Ktor", "scrapeId": "aa795c46-03f0-4dae-b203-8e36a92ac1bc", "sourceURL": "https://ktor.io/docs/client-create-multiplatform-application.html", "url": "https://ktor.io/docs/client-create-multiplatform-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Creating a cross-platform mobile application in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Update Kotlin Gradle plugins**:\n\n```yaml\nkotlin = \"2.1.10\"\n```\n\nThis snippet shows you how to update kotlin gradle plugins, which is an important aspect of creating a cross-platform mobile application.\n\n**Add Ktor dependencies**:\n\n```yaml\n[versions]\nktor = \"3.1.1\"\n```\n\nThis snippet shows you how to add ktor dependencies, which is an important aspect of creating a cross-platform mobile application.\n\n**Define Ktor client and engine libraries**:\n\n```yaml\n[libraries]\nktor-client-core = { module = \"io.ktor:ktor-client-core\", version.ref = \"ktor\" }\nktor-client-okhttp = { module = \"io.ktor:ktor-client-okhttp\", version.ref = \"ktor\" }\nktor-client-darwin = { module = \"io.ktor:ktor-client-darwin\", version.ref = \"ktor\" }\n```\n\nThis snippet shows you how to define ktor client and engine libraries, which is an important aspect of creating a cross-platform mobile application.\n\n**Add Ktor client dependency to commonMain**:\n\n```yaml\nsourceSets {\n       commonMain.dependencies {\n           implementation(libs.ktor.client.core)\n       }\n}\n```\n\nThis snippet shows you how to add ktor client dependency to commonmain, which is an important aspect of creating a cross-platform mobile application.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-create-multiplatform-application.html", "title": "Creating a cross-platform mobile application", "description": "This tutorial covers how to create a simple Kotlin Multiplatform Mobile application using the Ktor HTTP client, which sends a request and receives a response body as plain HTML text.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:14:19", "type": "code_examples", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:type": "website", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a cross-platform mobile application | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "twitter:description": "", "built-on": "2025-02-26T14:01:05.46099003", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Creating a cross-platform mobile application | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "ogTitle": "Creating a cross-platform mobile application | Ktor", "og:locale": "en_US", "twitter:title": "Creating a cross-platform mobile application | Ktor", "scrapeId": "aa795c46-03f0-4dae-b203-8e36a92ac1bc", "sourceURL": "https://ktor.io/docs/client-create-multiplatform-application.html", "url": "https://ktor.io/docs/client-create-multiplatform-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Creating a cross-platform mobile application in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo learn how to create your first Kotlin Multiplatform Mobile application, see [Create your first cross-platform mobile app](https://kotlinlang.org/docs/multiplatform-mobile-create-first-app.html).\n\nTo view the complete structure of the generated multiplatform project, switch from Android to Project in a [Project view](https://developer.android.com/studio/projects#ProjectView).\n\nUsing Ktor in a Kotlin/Native project requires a [new memory manager](https://kotlinlang.org/docs/native-memory-manager.html), which is enabled by default starting with Kotlin 1.7.20.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-create-multiplatform-application.html", "title": "Creating a cross-platform mobile application", "description": "This tutorial covers how to create a simple Kotlin Multiplatform Mobile application using the Ktor HTTP client, which sends a request and receives a response body as plain HTML text.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 05:14:19", "type": "best_practices", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:site": "@JetBrainsKtor", "og:type": "website", "build-number": "707", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "Creating a cross-platform mobile application | Ktor", "twitter:creator": "@JetBrainsKtor", "twitter:card": "summary_large_image", "twitter:description": "", "built-on": "2025-02-26T14:01:05.46099003", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "og:site_name": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Creating a cross-platform mobile application | Ktor Documentation", "ogLocale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/client-create-multiplatform-application.html", "ogTitle": "Creating a cross-platform mobile application | Ktor", "og:locale": "en_US", "twitter:title": "Creating a cross-platform mobile application | Ktor", "scrapeId": "aa795c46-03f0-4dae-b203-8e36a92ac1bc", "sourceURL": "https://ktor.io/docs/client-create-multiplatform-application.html", "url": "https://ktor.io/docs/client-create-multiplatform-application.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Custom plugins - Base API is in ktor?\n\nAssistant: Sure, I'd be happy to explain Custom plugins - Base API in ktor.\n\n# Custom plugins - Base API\n\nKtor exposes API for developing custom plugins that implement common functionalities and can be reused in multiple applications. This API allows you to intercept different pipeline phases to add custom logic to request/response processing.Here's a quick rundown of what this is about:\n\n## Create a plugin\n\nTo create a custom plugin, follow the steps below:\n\n1. Create a plugin class and declare a companion object that implements one of the following interfaces:\n   - BaseApplicationPlugin if a plugin should work on an application level.\n   - BaseRouteScopedPlugin if a plugin can be installed to a specific route.\n2. Implement the key and install members of this companion object.\n3. Provide a plugin configuration.\n4. Handle calls by intercepting the required pipeline phases.\n5. Install a plugin.\n\n## Create a companion object\n\nA custom plugin's class should have a companion object that implements the BaseApplicationPlugin or BaseRouteScopedPlugin interface. The BaseApplicationPlugin interface accepts three type parameters:\n\n- A type of pipeline this plugin is compatible with.\n- A configuration object type for this plugin.\n- An instance type of the plugin object.\n\n```kotlin\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        // ...\n    }\n}\n```\n\n## Implement the 'key' and 'install' members\n\nAs a descendant of the BaseApplicationPlugin interface, a companion object should implement two members:\n\n- The key property is used to identify a plugin. Ktor has a map of all attributes, and each plugin adds itself to this map using the specified key.\n- The install function allows you to configure how your plugin works. Here you need to intercept a pipeline and return a plugin instance. We'll take a look at how to intercept a pipeline and handle calls in the next chapter.\n\n```kotlin\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val plugin = CustomHeader()\n            // Intercept a pipeline ...\n            return plugin\n        }\n    }\n}\n```\n\n## Handle calls\n\nIn your custom plugin, you can handle requests and responses by intercepting existing pipeline phases or newly defined ones. For example, the Authentication plugin adds the Authenticate and Challenge custom phases to the default pipeline. So, intercepting a specific pipeline allows you to access different stages of a call, for instance:\n\n- ApplicationCallPipeline.Monitoring: intercepting this phase can be used for request logging or collecting metrics.\n- ApplicationCallPipeline.Plugins: can be used to modify response parameters, for instance, append custom headers.\n- ApplicationReceivePipeline.Transform and ApplicationSendPipeline.Transform: allow you to obtain and transform data received from the client and transform data before sending it back.\n\nThe example below demonstrates how to intercept the ApplicationCallPipeline.Plugins phase and append a custom header to each response:\n\n```kotlin\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val plugin = CustomHeader()\n            pipeline.intercept(ApplicationCallPipeline.Plugins) {\n                call.response.header(\"X-Custom-Header\", \"Hello, world!\")\n            }\n            return plugin\n        }\n    }\n}\n```\n\n## Provide plugin configuration\n\nThe previous chapter shows how to create a plugin that appends a predefined custom header to each response. Let's make this plugin more useful and provide a configuration for passing the required custom header name/value. First, you need to define a configuration class inside a plugin's class:\n\n```kotlin\nclass Configuration {\n    var headerName = \"Custom-Header-Name\"\n    var headerValue = \"Default value\"\n}\n```\n\nGiven that plugin configuration fields are mutable, saving them in local variables is recommended:\n\n```kotlin\nclass CustomHeader(configuration: Configuration) {\n    private val name = configuration.headerName\n    private val value = configuration.headerValue\n\n    class Configuration {\n        var headerName = \"Custom-Header-Name\"\n        var headerValue = \"Default value\"\n    }\n}\n```\n\nFinally, in the install function, you can get this configuration and use its properties\n\n```kotlin\nclass CustomHeader(configuration: Configuration) {\n    private val name = configuration.headerName\n    private val value = configuration.headerValue\n\n    class Configuration {\n        var headerName = \"Custom-Header-Name\"\n        var headerValue = \"Default value\"\n    }\n\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val configuration = Configuration().apply(configure)\n            val plugin = CustomHeader(configuration)\n            pipeline.intercept(ApplicationCallPipeline.Plugins) {\n                call.response.header(plugin.name, plugin.value)\n            }\n            return plugin\n        }\n    }\n}\n```\n\n## Install a plugin\n\nTo install a custom plugin to your application, call the install function and pass the desired configuration parameters:\n\n```kotlin\ninstall(CustomHeader) {\n    headerName = \"X-Custom-Header\"\n    headerValue = \"Hello, world!\"\n}\n```\n\n## Examples\n\nThe code snippets below demonstrate several examples of custom plugins. You can find the runnable project here: custom-plugin-base-api\n\n### Request logging\n\nThe example below shows how to create a custom plugin for logging incoming requests:\n\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.serialization.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.*\nimport io.ktor.util.*\n\nclass RequestLogging {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, RequestLogging> {\n        override val key = AttributeKey<RequestLogging>(\"RequestLogging\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): RequestLogging {\n            val plugin = RequestLogging()\n            pipeline.intercept(ApplicationCallPipeline.Monitoring) {\n                call.request.origin.apply {\n                    println(\"Request URL: $scheme://$localHost:$localPort$uri\")\n                }\n            }\n            return plugin\n        }\n    }\n}\n```\n\n### Custom header\n\nThis example demonstrates how to create a plugin that appends a custom header to each response:\n\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.util.*\n\nclass CustomHeader(configuration: Configuration) {\n    private val name = configuration.headerName\n    private val value = configuration.headerValue\n\n    class Configuration {\n        var headerName = \"Custom-Header-Name\"\n        var headerValue = \"Default value\"\n    }\n\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val configuration = Configuration().apply(configure)\n            val plugin = CustomHeader(configuration)\n            pipeline.intercept(ApplicationCallPipeline.Plugins) {\n                call.response.header(plugin.name, plugin.value)\n            }\n            return plugin\n        }\n    }\n}\n```\n\n### Body transformation\n\nThe example below shows how to:\n- transform data received from the client;\n- transform data to be sent to the client.\n\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.serialization.*\nimport io.ktor.server.application.*\nimport io.ktor.server.request.*\nimport io.ktor.server.response.*\nimport io.ktor.util.*\nimport io.ktor.utils.io.*\n\nclass DataTransformation {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, DataTransformation> {\n        override val key = AttributeKey<DataTransformation>(\"DataTransformation\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): DataTransformation {\n            val plugin = DataTransformation()\n            pipeline.receivePipeline.intercept(ApplicationReceivePipeline.Transform) { data ->\n                val newValue = (data as ByteReadChannel).readUTF8Line()?.toInt()?.plus(1)\n                if (newValue != null) {\n                    proceedWith(newValue)\n                }\n            }\n            pipeline.sendPipeline.intercept(ApplicationSendPipeline.Transform) { data ->\n                if (subject is Int) {\n                    val newValue = data.toString().toInt() + 1\n                    proceedWith(newValue.toString())\n                }\n            }\n            return plugin\n        }\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "title": "Custom plugins - Base API", "description": "Ktor exposes API for developing custom plugins that implement common functionalities and can be reused in multiple applications. This API allows you to intercept different pipeline phases to add custom logic to request/response processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:14:52", "type": "overview", "page_metadata": {"language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "Custom plugins - Base API | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Custom plugins - Base API | Ktor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "title": "Custom plugins - Base API | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.075004319", "og:title": "Custom plugins - Base API | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "og:type": "website", "scrapeId": "b0739044-7e34-43c0-9f52-5fd4e5a6941c", "sourceURL": "https://ktor.io/docs/server-custom-plugins-base-api.html", "url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a plugin in ktor?\n\nAssistant: To create a plugin in ktor, here's what you do:\nTo create a custom plugin, follow the steps below:\n\n1. Create a plugin class and declare a companion object that implements one of the following interfaces:\n   - BaseApplicationPlugin if a plugin should work on an application level.\n   - BaseRouteScopedPlugin if a plugin can be installed to a specific route.\n2. Implement the key and install members of this companion object.\n3. Provide a plugin configuration.\n4. Handle calls by intercepting the required pipeline phases.\n5. Install a plugin..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "title": "Custom plugins - Base API", "description": "Ktor exposes API for developing custom plugins that implement common functionalities and can be reused in multiple applications. This API allows you to intercept different pipeline phases to add custom logic to request/response processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:14:52", "type": "section_detail", "page_metadata": {"language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "Custom plugins - Base API | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Custom plugins - Base API | Ktor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "title": "Custom plugins - Base API | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.075004319", "og:title": "Custom plugins - Base API | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "og:type": "website", "scrapeId": "b0739044-7e34-43c0-9f52-5fd4e5a6941c", "sourceURL": "https://ktor.io/docs/server-custom-plugins-base-api.html", "url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a companion object in ktor?\n\nAssistant: To create a companion object in ktor, here's what you do:\nA custom plugin's class should have a companion object that implements the BaseApplicationPlugin or BaseRouteScopedPlugin interface. The BaseApplicationPlugin interface accepts three type parameters:\n\n- A type of pipeline this plugin is compatible with.\n- A configuration object type for this plugin.\n- An instance type of the plugin object.\n\n```kotlin\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        // ...\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "title": "Custom plugins - Base API", "description": "Ktor exposes API for developing custom plugins that implement common functionalities and can be reused in multiple applications. This API allows you to intercept different pipeline phases to add custom logic to request/response processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:14:52", "type": "section_detail", "page_metadata": {"language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "Custom plugins - Base API | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Custom plugins - Base API | Ktor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "title": "Custom plugins - Base API | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.075004319", "og:title": "Custom plugins - Base API | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "og:type": "website", "scrapeId": "b0739044-7e34-43c0-9f52-5fd4e5a6941c", "sourceURL": "https://ktor.io/docs/server-custom-plugins-base-api.html", "url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I implement the 'key' and 'install' members in ktor?\n\nAssistant: To implement the 'key' and 'install' members in ktor, here's what you do:\nAs a descendant of the BaseApplicationPlugin interface, a companion object should implement two members:\n\n- The key property is used to identify a plugin. Ktor has a map of all attributes, and each plugin adds itself to this map using the specified key.\n- The install function allows you to configure how your plugin works. Here you need to intercept a pipeline and return a plugin instance. We'll take a look at how to intercept a pipeline and handle calls in the next chapter.\n\n```kotlin\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val plugin = CustomHeader()\n            // Intercept a pipeline ...\n            return plugin\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "title": "Custom plugins - Base API", "description": "Ktor exposes API for developing custom plugins that implement common functionalities and can be reused in multiple applications. This API allows you to intercept different pipeline phases to add custom logic to request/response processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:14:52", "type": "section_detail", "page_metadata": {"language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "Custom plugins - Base API | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Custom plugins - Base API | Ktor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "title": "Custom plugins - Base API | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.075004319", "og:title": "Custom plugins - Base API | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "og:type": "website", "scrapeId": "b0739044-7e34-43c0-9f52-5fd4e5a6941c", "sourceURL": "https://ktor.io/docs/server-custom-plugins-base-api.html", "url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I handle calls in ktor?\n\nAssistant: To handle calls in ktor, here's what you do:\nIn your custom plugin, you can handle requests and responses by intercepting existing pipeline phases or newly defined ones. For example, the Authentication plugin adds the Authenticate and Challenge custom phases to the default pipeline. So, intercepting a specific pipeline allows you to access different stages of a call, for instance:\n\n- ApplicationCallPipeline.Monitoring: intercepting this phase can be used for request logging or collecting metrics.\n- ApplicationCallPipeline.Plugins: can be used to modify response parameters, for instance, append custom headers.\n- ApplicationReceivePipeline.Transform and ApplicationSendPipeline.Transform: allow you to obtain and transform data received from the client and transform data before sending it back.\n\nThe example below demonstrates how to intercept the ApplicationCallPipeline.Plugins phase and append a custom header to each response:\n\n```kotlin\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val plugin = CustomHeader()\n            pipeline.intercept(ApplicationCallPipeline.Plugins) {\n                call.response.header(\"X-Custom-Header\", \"Hello, world!\")\n            }\n            return plugin\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "title": "Custom plugins - Base API", "description": "Ktor exposes API for developing custom plugins that implement common functionalities and can be reused in multiple applications. This API allows you to intercept different pipeline phases to add custom logic to request/response processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:14:52", "type": "section_detail", "page_metadata": {"language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "Custom plugins - Base API | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Custom plugins - Base API | Ktor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "title": "Custom plugins - Base API | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.075004319", "og:title": "Custom plugins - Base API | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "og:type": "website", "scrapeId": "b0739044-7e34-43c0-9f52-5fd4e5a6941c", "sourceURL": "https://ktor.io/docs/server-custom-plugins-base-api.html", "url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I provide plugin configuration in ktor?\n\nAssistant: To provide plugin configuration in ktor, here's what you do:\nThe previous chapter shows how to create a plugin that appends a predefined custom header to each response. Let's make this plugin more useful and provide a configuration for passing the required custom header name/value. First, you need to define a configuration class inside a plugin's class:\n\n```kotlin\nclass Configuration {\n    var headerName = \"Custom-Header-Name\"\n    var headerValue = \"Default value\"\n}\n```\n\nGiven that plugin configuration fields are mutable, saving them in local variables is recommended:\n\n```kotlin\nclass CustomHeader(configuration: Configuration) {\n    private val name = configuration.headerName\n    private val value = configuration.headerValue\n\n    class Configuration {\n        var headerName = \"Custom-Header-Name\"\n        var headerValue = \"Default value\"\n    }\n}\n```\n\nFinally, in the install function, you can get this configuration and use its properties\n\n```kotlin\nclass CustomHeader(configuration: Configuration) {\n    private val name = configuration.headerName\n    private val value = configuration.headerValue\n\n    class Configuration {\n        var headerName = \"Custom-Header-Name\"\n        var headerValue = \"Default value\"\n    }\n\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val configuration = Configuration().apply(configure)\n            val plugin = CustomHeader(configuration)\n            pipeline.intercept(ApplicationCallPipeline.Plugins) {\n                call.response.header(plugin.name, plugin.value)\n            }\n            return plugin\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "title": "Custom plugins - Base API", "description": "Ktor exposes API for developing custom plugins that implement common functionalities and can be reused in multiple applications. This API allows you to intercept different pipeline phases to add custom logic to request/response processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:14:52", "type": "section_detail", "page_metadata": {"language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "Custom plugins - Base API | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Custom plugins - Base API | Ktor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "title": "Custom plugins - Base API | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.075004319", "og:title": "Custom plugins - Base API | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "og:type": "website", "scrapeId": "b0739044-7e34-43c0-9f52-5fd4e5a6941c", "sourceURL": "https://ktor.io/docs/server-custom-plugins-base-api.html", "url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install a plugin in ktor?\n\nAssistant: To install a plugin in ktor, here's what you do:\nTo install a custom plugin to your application, call the install function and pass the desired configuration parameters:\n\n```kotlin\ninstall(CustomHeader) {\n    headerName = \"X-Custom-Header\"\n    headerValue = \"Hello, world!\"\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "title": "Custom plugins - Base API", "description": "Ktor exposes API for developing custom plugins that implement common functionalities and can be reused in multiple applications. This API allows you to intercept different pipeline phases to add custom logic to request/response processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:14:52", "type": "section_detail", "page_metadata": {"language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "Custom plugins - Base API | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Custom plugins - Base API | Ktor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "title": "Custom plugins - Base API | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.075004319", "og:title": "Custom plugins - Base API | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "og:type": "website", "scrapeId": "b0739044-7e34-43c0-9f52-5fd4e5a6941c", "sourceURL": "https://ktor.io/docs/server-custom-plugins-base-api.html", "url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I examples in ktor?\n\nAssistant: To examples in ktor, here's what you do:\nThe code snippets below demonstrate several examples of custom plugins. You can find the runnable project here: custom-plugin-base-api\n\n### Request logging\n\nThe example below shows how to create a custom plugin for logging incoming requests:\n\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.serialization.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.*\nimport io.ktor.util.*\n\nclass RequestLogging {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, RequestLogging> {\n        override val key = AttributeKey<RequestLogging>(\"RequestLogging\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): RequestLogging {\n            val plugin = RequestLogging()\n            pipeline.intercept(ApplicationCallPipeline.Monitoring) {\n                call.request.origin.apply {\n                    println(\"Request URL: $scheme://$localHost:$localPort$uri\")\n                }\n            }\n            return plugin\n        }\n    }\n}\n```\n\n### Custom header\n\nThis example demonstrates how to create a plugin that appends a custom header to each response:\n\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.util.*\n\nclass CustomHeader(configuration: Configuration) {\n    private val name = configuration.headerName\n    private val value = configuration.headerValue\n\n    class Configuration {\n        var headerName = \"Custom-Header-Name\"\n        var headerValue = \"Default value\"\n    }\n\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val configuration = Configuration().apply(configure)\n            val plugin = CustomHeader(configuration)\n            pipeline.intercept(ApplicationCallPipeline.Plugins) {\n                call.response.header(plugin.name, plugin.value)\n            }\n            return plugin\n        }\n    }\n}\n```\n\n### Body transformation\n\nThe example below shows how to:\n- transform data received from the client;\n- transform data to be sent to the client.\n\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.serialization.*\nimport io.ktor.server.application.*\nimport io.ktor.server.request.*\nimport io.ktor.server.response.*\nimport io.ktor.util.*\nimport io.ktor.utils.io.*\n\nclass DataTransformation {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, DataTransformation> {\n        override val key = AttributeKey<DataTransformation>(\"DataTransformation\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): DataTransformation {\n            val plugin = DataTransformation()\n            pipeline.receivePipeline.intercept(ApplicationReceivePipeline.Transform) { data ->\n                val newValue = (data as ByteReadChannel).readUTF8Line()?.toInt()?.plus(1)\n                if (newValue != null) {\n                    proceedWith(newValue)\n                }\n            }\n            pipeline.sendPipeline.intercept(ApplicationSendPipeline.Transform) { data ->\n                if (subject is Int) {\n                    val newValue = data.toString().toInt() + 1\n                    proceedWith(newValue.toString())\n                }\n            }\n            return plugin\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "title": "Custom plugins - Base API", "description": "Ktor exposes API for developing custom plugins that implement common functionalities and can be reused in multiple applications. This API allows you to intercept different pipeline phases to add custom logic to request/response processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:14:52", "type": "section_detail", "page_metadata": {"language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "Custom plugins - Base API | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Custom plugins - Base API | Ktor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "title": "Custom plugins - Base API | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.075004319", "og:title": "Custom plugins - Base API | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "og:type": "website", "scrapeId": "b0739044-7e34-43c0-9f52-5fd4e5a6941c", "sourceURL": "https://ktor.io/docs/server-custom-plugins-base-api.html", "url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Custom plugins - Base API in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a companion object**:\n\n```yaml\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        // ...\n    }\n}\n```\n\nThis snippet shows you how to create a companion object, which is an important aspect of custom plugins - base api.\n\n**Implement the 'key' and 'install' members**:\n\n```yaml\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val plugin = CustomHeader()\n            // Intercept a pipeline ...\n            return plugin\n        }\n    }\n}\n```\n\nThis snippet shows you how to implement the 'key' and 'install' members, which is an important aspect of custom plugins - base api.\n\n**Handle calls**:\n\n```yaml\nclass CustomHeader() {\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val plugin = CustomHeader()\n            pipeline.intercept(ApplicationCallPipeline.Plugins) {\n                call.response.header(\"X-Custom-Header\", \"Hello, world!\")\n            }\n            return plugin\n        }\n    }\n}\n```\n\nThis snippet shows you how to handle calls, which is an important aspect of custom plugins - base api.\n\n**Provide plugin configuration**:\n\n```yaml\nclass CustomHeader(configuration: Configuration) {\n    private val name = configuration.headerName\n    private val value = configuration.headerValue\n\n    class Configuration {\n        var headerName = \"Custom-Header-Name\"\n        var headerValue = \"Default value\"\n    }\n\n    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {\n        override val key = AttributeKey<CustomHeader>(\"CustomHeader\")\n        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {\n            val configuration = Configuration().apply(configure)\n            val plugin = CustomHeader(configuration)\n            pipeline.intercept(ApplicationCallPipeline.Plugins) {\n                call.response.header(plugin.name, plugin.value)\n            }\n            return plugin\n        }\n    }\n}\n```\n\nThis snippet shows you how to provide plugin configuration, which is an important aspect of custom plugins - base api.\n\n**Install a plugin**:\n\n```yaml\ninstall(CustomHeader) {\n    headerName = \"X-Custom-Header\"\n    headerValue = \"Hello, world!\"\n}\n```\n\nThis snippet shows you how to install a plugin, which is an important aspect of custom plugins - base api.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "title": "Custom plugins - Base API", "description": "Ktor exposes API for developing custom plugins that implement common functionalities and can be reused in multiple applications. This API allows you to intercept different pipeline phases to add custom logic to request/response processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:14:52", "type": "code_examples", "page_metadata": {"language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "Custom plugins - Base API | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Custom plugins - Base API | Ktor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "title": "Custom plugins - Base API | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.075004319", "og:title": "Custom plugins - Base API | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "og:type": "website", "scrapeId": "b0739044-7e34-43c0-9f52-5fd4e5a6941c", "sourceURL": "https://ktor.io/docs/server-custom-plugins-base-api.html", "url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Custom plugins - Base API in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nStarting with v2.0.0, Ktor provides a new simplified API for creating custom plugins.\n\nCustom plugins allow you to share any value related to a call, so you can access this value inside any handler processing this call.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "title": "Custom plugins - Base API", "description": "Ktor exposes API for developing custom plugins that implement common functionalities and can be reused in multiple applications. This API allows you to intercept different pipeline phases to add custom logic to request/response processing.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:14:52", "type": "best_practices", "page_metadata": {"language": "en-US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "ogUrl": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "Custom plugins - Base API | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogTitle": "Custom plugins - Base API | Ktor", "ogLocale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "title": "Custom plugins - Base API | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "built-on": "2025-02-26T14:01:05.075004319", "og:title": "Custom plugins - Base API | Ktor", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-custom-plugins-base-api.html", "og:type": "website", "scrapeId": "b0739044-7e34-43c0-9f52-5fd4e5a6941c", "sourceURL": "https://ktor.io/docs/server-custom-plugins-base-api.html", "url": "https://ktor.io/docs/server-custom-plugins-base-api.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what How to create RESTful APIs in Kotlin with Ktor is in ktor?\n\nAssistant: Sure, I'd be happy to explain How to create RESTful APIs in Kotlin with Ktor in ktor.\n\n# How to create RESTful APIs in Kotlin with Ktor\n\nIn this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nYou can do this tutorial independently, however, we strongly recommend that you complete the preceding tutorial to learn how to handle requests and generate responses. We recommend that you install IntelliJ IDEA, but you could use another IDE of your choice.\n\n## Hello RESTful Task Manager\n\nIn this tutorial, you will be rewriting your existing Task Manager as a RESTful service. To do this you will use several Ktor plugins. While you could manually add it to your existing project, it’s simpler to generate a new project and then incrementally add the code from the previous tutorial. You will reiterate all the code as you go, so you don’t need to have the previous project to hand.\n\n## Create a new project with plugins\n\n1. Navigate to the Ktor Project Generator.\n2. In the Project artifact field, enter com.example.ktor-rest-task-app as the name of your project artifact.\n3. In the plugins section search for and add the following plugins by clicking on the Add button:\n   - Routing\n   - Content Negotiation\n   - Kotlinx.serialization\n   - Static Content\n4. Click the Download button to generate and download your Ktor project.\n\n## Add starter code\n\n1. Open your project in IntelliJ IDEA, as previously described in the Create, open and run a Ktor project tutorial.\n2. Navigate to src/main/kotlin/com/example and create a subpackage called model.\n3. Inside the model package, create a new Task.kt file.\n4. Open the Task.kt file and add an enum to represent priorities and a class to represent tasks:\n\n```kotlin\npackage com.example.model\n\nimport kotlinx.serialization.Serializable\n\nenum class Priority {\n       Low, Medium, High, Vital\n}\n\n@Serializable\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```\n\n5. Open the Routing.kt file and replace the existing code with the implementation below:\n\n```kotlin\npackage com.example\n\nimport com.example.model.*\nimport io.ktor.server.application.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.configureRouting() {\n       routing {\n           staticResources(\"static\", \"static\")\n\n           get(\"/tasks\") {\n               call.respond(\n                   listOf(\n                       Task(\"cleaning\", \"Clean the house\", Priority.Low),\n                       Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n                       Task(\"shopping\", \"Buy the groceries\", Priority.High),\n                       Task(\"painting\", \"Paint the fence\", Priority.Medium)\n                   )\n               )\n           }\n       }\n}\n```\n\n## Understand Content Negotiation\n\n### Content Negotiation via the browser\nWhen you created the project you included the Content Negotiation plugin. This plugin looks at the types of content that the client can render and matches these against the content types that the current service can provide. Hence, the term Content Negotiation.\n\nIn HTTP the client signals which content types it can render through the Accept header. The value of this header is one or more content types. In the case above you can examine the value of this header by using the development tools built into your browser.\n\nConsider the following example:\n\n```\ntext/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\n```\n\nNote the inclusion of * / .This header signals that it accepts HTML, XML or Images - but it would also accept any other content type.\n\nThe Content Negotiation plugin needs to find a format to send data back to the browser. If you look inside the generated code in the project you will find a file called Serialization.kt inside src/kotlin/main/com/example, which includes the following:\n\n```\ninstall(ContentNegotiation) {\n    json()\n}\n```\n\nThis code installs the ContentNegotiation plugin, and also configures the kotlinx.serialization plugin. With this, when clients send requests the server can send back objects serialized as JSON.\n\n## Add the GET routes\n\nNow that you are familiar with the process of content negotiation, continue with transferring the functionality from the previous tutorial into this one.\n\n### Reuse the Task Repository\nYou can reuse the repository for Tasks without any modification, so let’s do that first.\n\n1. Inside the model package create a new TaskRepository.kt file.\n2. Open TaskRepository.kt and add the code below:\n\n```kotlin\npackage com.example.model\n\nobject TaskRepository {\n       private val tasks = mutableListOf(\n           Task(\"cleaning\", \"Clean the house\", Priority.Low),\n           Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n           Task(\"shopping\", \"Buy the groceries\", Priority.High),\n           Task(\"painting\", \"Paint the fence\", Priority.Medium)\n       )\n\n       fun allTasks(): List<Task> = tasks\n\n       fun tasksByPriority(priority: Priority) = tasks.filter {\n           it.priority == priority\n       }\n\n       fun taskByName(name: String) = tasks.find {\n           it.name.equals(name, ignoreCase = true)\n       }\n\n       fun addTask(task: Task) {\n           if (taskByName(task.name) != null) {\n               throw IllegalStateException(\"Cannot duplicate task names!\")\n           }\n           tasks.add(task)\n       }\n}\n```\n\n## Test the functionality\n\n### Use the browser\nYou could test these routes in the browser. For example, navigate to http://0.0.0.0:8080/tasks/byPriority/Medium to see all the tasks with a Medium priority displayed in JSON format.\n\n### Use Postman\n1. In Postman, create a new GET request with the URL http://0.0.0.0:8080/tasks/byPriority/Medium.\n2. In the Headers pane, set the value of the Accept header to application/json.\n3. Click Send to send the request and see the response in the response viewer.\n\n## Add a route for POST requests\n\n1. Open the Routing.kt file inside src/main/kotlin/com/example.\n2. Add a new POST route to the Application.configureRouting() function as follows:\n\n```kotlin\n//...\n\nfun Application.configureRouting() {\n       routing {\n           //...\n\n           route(\"/tasks\") {\n               //...\n\n               //add the following new route\n               post {\n                   try {\n                       val task = call.receive<Task>()\n                       TaskRepository.addTask(task)\n                       call.respond(HttpStatusCode.Created)\n                   } catch (ex: IllegalStateException) {\n                       call.respond(HttpStatusCode.BadRequest)\n                   } catch (ex: JsonConvertException) {\n                       call.respond(HttpStatusCode.BadRequest)\n                   }\n               }\n           }\n       }\n}\n```\n\n## Add support for removals\n\n1. In the TaskRepository.kt file add the following method within the TaskRepository object to remove tasks based on their name:\n\n```kotlin\nfun removeTask(name: String): Boolean {\n       return tasks.removeIf { it.name == name }\n}\n```\n\n2. Open the Routing.kt file and add an endpoint into the routing() function to handle DELETE requests:\n\n```kotlin\nfun Application.configureRouting() {\n       //...\n\n       routing {\n           route(\"/tasks\") {\n               //...\n               //add the following function\n               delete(\"/{taskName}\") {\n                   val name = call.parameters[\"taskName\"]\n                   if (name == null) {\n                       call.respond(HttpStatusCode.BadRequest)\n                       return@delete\n                   }\n\n                   if (TaskRepository.removeTask(name)) {\n                       call.respond(HttpStatusCode.NoContent)\n                   } else {\n                       call.respond(HttpStatusCode.NotFound)\n                   }\n               }\n           }\n       }\n}\n```\n\n## Create unit tests with Ktor Client\n\n1. Open the ApplicationTest.kt file within src/test/kotlin/com/example.\n2. Replace the contents of the ApplicationTest.kt file with the following:\n\n```kotlin\npackage com.example\n\nimport com.example.model.Priority\nimport com.example.model.Task\nimport io.ktor.client.call.*\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.client.request.*\nimport io.ktor.http.*\nimport io.ktor.serialization.kotlinx.json.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\nclass ApplicationTest {\n       @Test\n       fun tasksCanBeFoundByPriority() = testApplication {\n           application {\n               module()\n           }\n           val client = createClient {\n               install(ContentNegotiation) {\n                   json()\n               }\n           }\n\n           val response = client.get(\"/tasks/byPriority/Medium\")\n           val results = response.body<List<Task>>()\n\n           assertEquals(HttpStatusCode.OK, response.status)\n\n           val expectedTaskNames = listOf(\"gardening\", \"painting\")\n           val actualTaskNames = results.map(Task::name)\n           assertContentEquals(expectedTaskNames, actualTaskNames)\n       }\n\n       @Test\n       fun invalidPriorityProduces400() = testApplication {\n           application {\n               module()\n           }\n           val response = client.get(\"/tasks/byPriority/Invalid\")\n           assertEquals(HttpStatusCode.BadRequest, response.status)\n       }\n\n       @Test\n       fun unusedPriorityProduces404() = testApplication {\n           application {\n               module()\n           }\n           val response = client.get(\"/tasks/byPriority/Vital\")\n           assertEquals(HttpStatusCode.NotFound, response.status)\n       }\n\n       @Test\n       fun newTasksCanBeAdded() = testApplication {\n           application {\n               module()\n           }\n           val client = createClient {\n               install(ContentNegotiation) {\n                   json()\n               }\n           }\n\n           val task = Task(\"swimming\", \"Go to the beach\", Priority.Low)\n           val response1 = client.post(\"/tasks\") {\n               header(\n                   HttpHeaders.ContentType,\n                   ContentType.Application.Json\n               )\n\n               setBody(task)\n           }\n           assertEquals(HttpStatusCode.Created, response1.status)\n\n           val response2 = client.get(\"/tasks\")\n           assertEquals(HttpStatusCode.OK, response2.status)\n\n           val taskNames = response2\n               .body<List<Task>>()\n               .map { it.name }\n\n           assertContains(taskNames, \"swimming\")\n       }\n}\n```\n\n## Create unit tests with JsonPath\n\n1. In your build.gradle.kts file, add the JSONPath library to the dependencies block:\n\n```kotlin\ntestImplementation(\"com.jayway.jsonpath:json-path:2.9.0\")\n```\n\n2. Navigate to the src/test/kotlin/com/example folder and create a new ApplicationJsonPathTest.kt file.\n3. Open the ApplicationJsonPathTest.kt file and add the following content to it:\n\n```kotlin\npackage com.example\n\nimport com.jayway.jsonpath.DocumentContext\nimport com.jayway.jsonpath.JsonPath\nimport io.ktor.client.*\nimport com.example.model.Priority\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\nclass ApplicationJsonPathTest {\n       @Test\n       fun tasksCanBeFound() = testApplication {\n           application {\n               module()\n           }\n           val jsonDoc = client.getAsJsonPath(\"/tasks\")\n\n           val result: List<String> = jsonDoc.read(\"$[*].name\")\n           assertEquals(\"cleaning\", result[0])\n           assertEquals(\"gardening\", result[1])\n           assertEquals(\"shopping\", result[2])\n       }\n\n       @Test\n       fun tasksCanBeFoundByPriority() = testApplication {\n           application {\n               module()\n           }\n           val priority = Priority.Medium\n           val jsonDoc = client.getAsJsonPath(\"/tasks/byPriority/$priority\")\n\n           val result: List<String> =\n               jsonDoc.read(\"$[?(@.priority == '$priority')].name\")\n           assertEquals(2, result.size)\n\n           assertEquals(\"gardening\", result[0])\n           assertEquals(\"painting\", result[1])\n       }\n\n       suspend fun HttpClient.getAsJsonPath(url: String): DocumentContext {\n           val response = this.get(url) {\n               accept(ContentType.Application.Json)\n           }\n           return JsonPath.parse(response.bodyAsText())\n       }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "overview", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nYou can do this tutorial independently, however, we strongly recommend that you complete the preceding tutorial to learn how to handle requests and generate responses. We recommend that you install IntelliJ IDEA, but you could use another IDE of your choice..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "section_detail", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I hello restful task manager in ktor?\n\nAssistant: To hello restful task manager in ktor, here's what you do:\nIn this tutorial, you will be rewriting your existing Task Manager as a RESTful service. To do this you will use several Ktor plugins. While you could manually add it to your existing project, it’s simpler to generate a new project and then incrementally add the code from the previous tutorial. You will reiterate all the code as you go, so you don’t need to have the previous project to hand..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "section_detail", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create a new project with plugins in ktor?\n\nAssistant: To create a new project with plugins in ktor, here's what you do:\n1. Navigate to the Ktor Project Generator.\n2. In the Project artifact field, enter com.example.ktor-rest-task-app as the name of your project artifact.\n3. In the plugins section search for and add the following plugins by clicking on the Add button:\n   - Routing\n   - Content Negotiation\n   - Kotlinx.serialization\n   - Static Content\n4. Click the Download button to generate and download your Ktor project..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "section_detail", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add starter code in ktor?\n\nAssistant: To add starter code in ktor, here's what you do:\n1. Open your project in IntelliJ IDEA, as previously described in the Create, open and run a Ktor project tutorial.\n2. Navigate to src/main/kotlin/com/example and create a subpackage called model.\n3. Inside the model package, create a new Task.kt file.\n4. Open the Task.kt file and add an enum to represent priorities and a class to represent tasks:\n\n```kotlin\npackage com.example.model\n\nimport kotlinx.serialization.Serializable\n\nenum class Priority {\n       Low, Medium, High, Vital\n}\n\n@Serializable\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```\n\n5. Open the Routing.kt file and replace the existing code with the implementation below:\n\n```kotlin\npackage com.example\n\nimport com.example.model.*\nimport io.ktor.server.application.*\nimport io.ktor.server.http.content.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.configureRouting() {\n       routing {\n           staticResources(\"static\", \"static\")\n\n           get(\"/tasks\") {\n               call.respond(\n                   listOf(\n                       Task(\"cleaning\", \"Clean the house\", Priority.Low),\n                       Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n                       Task(\"shopping\", \"Buy the groceries\", Priority.High),\n                       Task(\"painting\", \"Paint the fence\", Priority.Medium)\n                   )\n               )\n           }\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "section_detail", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I understand content negotiation in ktor?\n\nAssistant: To understand content negotiation in ktor, here's what you do:\n### Content Negotiation via the browser\nWhen you created the project you included the Content Negotiation plugin. This plugin looks at the types of content that the client can render and matches these against the content types that the current service can provide. Hence, the term Content Negotiation.\n\nIn HTTP the client signals which content types it can render through the Accept header. The value of this header is one or more content types. In the case above you can examine the value of this header by using the development tools built into your browser.\n\nConsider the following example:\n\n```\ntext/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\n```\n\nNote the inclusion of * / .This header signals that it accepts HTML, XML or Images - but it would also accept any other content type.\n\nThe Content Negotiation plugin needs to find a format to send data back to the browser. If you look inside the generated code in the project you will find a file called Serialization.kt inside src/kotlin/main/com/example, which includes the following:\n\n```\ninstall(ContentNegotiation) {\n    json()\n}\n```\n\nThis code installs the ContentNegotiation plugin, and also configures the kotlinx.serialization plugin. With this, when clients send requests the server can send back objects serialized as JSON..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "section_detail", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add the get routes in ktor?\n\nAssistant: To add the get routes in ktor, here's what you do:\nNow that you are familiar with the process of content negotiation, continue with transferring the functionality from the previous tutorial into this one.\n\n### Reuse the Task Repository\nYou can reuse the repository for Tasks without any modification, so let’s do that first.\n\n1. Inside the model package create a new TaskRepository.kt file.\n2. Open TaskRepository.kt and add the code below:\n\n```kotlin\npackage com.example.model\n\nobject TaskRepository {\n       private val tasks = mutableListOf(\n           Task(\"cleaning\", \"Clean the house\", Priority.Low),\n           Task(\"gardening\", \"Mow the lawn\", Priority.Medium),\n           Task(\"shopping\", \"Buy the groceries\", Priority.High),\n           Task(\"painting\", \"Paint the fence\", Priority.Medium)\n       )\n\n       fun allTasks(): List<Task> = tasks\n\n       fun tasksByPriority(priority: Priority) = tasks.filter {\n           it.priority == priority\n       }\n\n       fun taskByName(name: String) = tasks.find {\n           it.name.equals(name, ignoreCase = true)\n       }\n\n       fun addTask(task: Task) {\n           if (taskByName(task.name) != null) {\n               throw IllegalStateException(\"Cannot duplicate task names!\")\n           }\n           tasks.add(task)\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "section_detail", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I test the functionality in ktor?\n\nAssistant: To test the functionality in ktor, here's what you do:\n### Use the browser\nYou could test these routes in the browser. For example, navigate to http://0.0.0.0:8080/tasks/byPriority/Medium to see all the tasks with a Medium priority displayed in JSON format.\n\n### Use Postman\n1. In Postman, create a new GET request with the URL http://0.0.0.0:8080/tasks/byPriority/Medium.\n2. In the Headers pane, set the value of the Accept header to application/json.\n3. Click Send to send the request and see the response in the response viewer..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "section_detail", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add a route for post requests in ktor?\n\nAssistant: To add a route for post requests in ktor, here's what you do:\n1. Open the Routing.kt file inside src/main/kotlin/com/example.\n2. Add a new POST route to the Application.configureRouting() function as follows:\n\n```kotlin\n//...\n\nfun Application.configureRouting() {\n       routing {\n           //...\n\n           route(\"/tasks\") {\n               //...\n\n               //add the following new route\n               post {\n                   try {\n                       val task = call.receive<Task>()\n                       TaskRepository.addTask(task)\n                       call.respond(HttpStatusCode.Created)\n                   } catch (ex: IllegalStateException) {\n                       call.respond(HttpStatusCode.BadRequest)\n                   } catch (ex: JsonConvertException) {\n                       call.respond(HttpStatusCode.BadRequest)\n                   }\n               }\n           }\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "section_detail", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add support for removals in ktor?\n\nAssistant: To add support for removals in ktor, here's what you do:\n1. In the TaskRepository.kt file add the following method within the TaskRepository object to remove tasks based on their name:\n\n```kotlin\nfun removeTask(name: String): Boolean {\n       return tasks.removeIf { it.name == name }\n}\n```\n\n2. Open the Routing.kt file and add an endpoint into the routing() function to handle DELETE requests:\n\n```kotlin\nfun Application.configureRouting() {\n       //...\n\n       routing {\n           route(\"/tasks\") {\n               //...\n               //add the following function\n               delete(\"/{taskName}\") {\n                   val name = call.parameters[\"taskName\"]\n                   if (name == null) {\n                       call.respond(HttpStatusCode.BadRequest)\n                       return@delete\n                   }\n\n                   if (TaskRepository.removeTask(name)) {\n                       call.respond(HttpStatusCode.NoContent)\n                   } else {\n                       call.respond(HttpStatusCode.NotFound)\n                   }\n               }\n           }\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "section_detail", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create unit tests with ktor client in ktor?\n\nAssistant: To create unit tests with ktor client in ktor, here's what you do:\n1. Open the ApplicationTest.kt file within src/test/kotlin/com/example.\n2. Replace the contents of the ApplicationTest.kt file with the following:\n\n```kotlin\npackage com.example\n\nimport com.example.model.Priority\nimport com.example.model.Task\nimport io.ktor.client.call.*\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.client.request.*\nimport io.ktor.http.*\nimport io.ktor.serialization.kotlinx.json.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\nclass ApplicationTest {\n       @Test\n       fun tasksCanBeFoundByPriority() = testApplication {\n           application {\n               module()\n           }\n           val client = createClient {\n               install(ContentNegotiation) {\n                   json()\n               }\n           }\n\n           val response = client.get(\"/tasks/byPriority/Medium\")\n           val results = response.body<List<Task>>()\n\n           assertEquals(HttpStatusCode.OK, response.status)\n\n           val expectedTaskNames = listOf(\"gardening\", \"painting\")\n           val actualTaskNames = results.map(Task::name)\n           assertContentEquals(expectedTaskNames, actualTaskNames)\n       }\n\n       @Test\n       fun invalidPriorityProduces400() = testApplication {\n           application {\n               module()\n           }\n           val response = client.get(\"/tasks/byPriority/Invalid\")\n           assertEquals(HttpStatusCode.BadRequest, response.status)\n       }\n\n       @Test\n       fun unusedPriorityProduces404() = testApplication {\n           application {\n               module()\n           }\n           val response = client.get(\"/tasks/byPriority/Vital\")\n           assertEquals(HttpStatusCode.NotFound, response.status)\n       }\n\n       @Test\n       fun newTasksCanBeAdded() = testApplication {\n           application {\n               module()\n           }\n           val client = createClient {\n               install(ContentNegotiation) {\n                   json()\n               }\n           }\n\n           val task = Task(\"swimming\", \"Go to the beach\", Priority.Low)\n           val response1 = client.post(\"/tasks\") {\n               header(\n                   HttpHeaders.ContentType,\n                   ContentType.Application.Json\n               )\n\n               setBody(task)\n           }\n           assertEquals(HttpStatusCode.Created, response1.status)\n\n           val response2 = client.get(\"/tasks\")\n           assertEquals(HttpStatusCode.OK, response2.status)\n\n           val taskNames = response2\n               .body<List<Task>>()\n               .map { it.name }\n\n           assertContains(taskNames, \"swimming\")\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "section_detail", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create unit tests with jsonpath in ktor?\n\nAssistant: To create unit tests with jsonpath in ktor, here's what you do:\n1. In your build.gradle.kts file, add the JSONPath library to the dependencies block:\n\n```kotlin\ntestImplementation(\"com.jayway.jsonpath:json-path:2.9.0\")\n```\n\n2. Navigate to the src/test/kotlin/com/example folder and create a new ApplicationJsonPathTest.kt file.\n3. Open the ApplicationJsonPathTest.kt file and add the following content to it:\n\n```kotlin\npackage com.example\n\nimport com.jayway.jsonpath.DocumentContext\nimport com.jayway.jsonpath.JsonPath\nimport io.ktor.client.*\nimport com.example.model.Priority\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\nclass ApplicationJsonPathTest {\n       @Test\n       fun tasksCanBeFound() = testApplication {\n           application {\n               module()\n           }\n           val jsonDoc = client.getAsJsonPath(\"/tasks\")\n\n           val result: List<String> = jsonDoc.read(\"$[*].name\")\n           assertEquals(\"cleaning\", result[0])\n           assertEquals(\"gardening\", result[1])\n           assertEquals(\"shopping\", result[2])\n       }\n\n       @Test\n       fun tasksCanBeFoundByPriority() = testApplication {\n           application {\n               module()\n           }\n           val priority = Priority.Medium\n           val jsonDoc = client.getAsJsonPath(\"/tasks/byPriority/$priority\")\n\n           val result: List<String> =\n               jsonDoc.read(\"$[?(@.priority == '$priority')].name\")\n           assertEquals(2, result.size)\n\n           assertEquals(\"gardening\", result[0])\n           assertEquals(\"painting\", result[1])\n       }\n\n       suspend fun HttpClient.getAsJsonPath(url: String): DocumentContext {\n           val response = this.get(url) {\n               accept(ContentType.Application.Json)\n           }\n           return JsonPath.parse(response.bodyAsText())\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "section_detail", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for How to create RESTful APIs in Kotlin with Ktor in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Task.kt file**:\n\n```yaml\npackage com.example.model\n\nimport kotlinx.serialization.Serializable\n\nenum class Priority {\n       Low, Medium, High, Vital\n}\n\n@Serializable\ndata class Task(\n       val name: String,\n       val description: String,\n       val priority: Priority\n)\n```\n\nThis snippet shows you how to task.kt file, which is an important aspect of how to create restful apis in kotlin with ktor.\n\n", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "code_examples", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using How to create RESTful APIs in Kotlin with Ktor in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWe strongly recommend that you complete the preceding tutorial to learn how to handle requests and generate responses.\n\nIt’s simpler to generate a new project and then incrementally add the code from the previous tutorial.\n\nUse a specialist tool such as Postman for more fine-grained testing.\n\nWhen a POST request is sent to /tasks the kotlinx.serialization framework is used to convert the body of the request into a Task object.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/creating-http-apis.html", "title": "How to create RESTful APIs in Kotlin with Ktor", "description": "In this tutorial, we’ll explain how to build a backend service using Kotlin and Ktor, featuring an example of a RESTful API that generates JSON files.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:15:51", "type": "best_practices", "page_metadata": {"ogTitle": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogSiteName": "Ktor Help", "title": "How to create RESTful APIs in Kotlin with Ktor | Ktor Documentation", "twitter:site": "@JetBrainsKtor", "twitter:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "twitter:creator": "@JetBrainsKtor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "og:title": "How to create RESTful APIs in Kotlin with Ktor | Ktor", "og:type": "website", "language": "en-US", "built-on": "2025-02-26T14:01:03.891989192", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "twitter:card": "summary_large_image", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/server-create-restful-apis.html", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:locale": "en_US", "description": "\n        Learn to build Kotlin RESTful APIs with Ktor. This tutorial covers setup, routing, and testing on a real-life\n        example. It’s an ideal entry-level tutorial for Kotlin backend developers.\n    ", "build-number": "707", "twitter:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "d9a8a8d4-d08b-40f7-bad2-0d607739b390", "sourceURL": "https://ktor.io/docs/creating-http-apis.html", "url": "https://ktor.io/docs/server-create-restful-apis.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server engines is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server engines in ktor.\n\n# Server engines\n\nTo run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.Here's a quick rundown of what this is about:\n\n## Supported engines\n\nThe table below lists engines supported by Ktor, along with the supported platforms:\n\n| Engine | Platforms | HTTP/2 |\n| --- | --- | --- |\n| `Netty` | JVM | ✅ |\n| `Jetty` | JVM | ✅ |\n| `Tomcat` | JVM | ✅ |\n| `CIO` (Coroutine-based I/O) | JVM, [Native](https://ktor.io/docs/server-native.html), [GraalVM](https://ktor.io/docs/graalvm.html) | ✖️ |\n| [ServletApplicationEngine](https://ktor.io/docs/server-war.html) | JVM | ✅ |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/engines.html", "title": "Server engines", "description": "To run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:16:27", "type": "overview", "page_metadata": {"title": "Server engines | Ktor Documentation", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "ogTitle": "Server engines | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-engines.html", "twitter:card": "summary_large_image", "twitter:title": "Server engines | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Server engines | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-engines.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.257764441", "build-number": "707", "ogDescription": "", "scrapeId": "25a32ad0-e502-4ce2-8547-47fc3c89342c", "sourceURL": "https://ktor.io/docs/engines.html", "url": "https://ktor.io/docs/server-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I supported engines in ktor?\n\nAssistant: To supported engines in ktor, here's what you do:\nThe table below lists engines supported by Ktor, along with the supported platforms:\n\n| Engine | Platforms | HTTP/2 |\n| --- | --- | --- |\n| `Netty` | JVM | ✅ |\n| `Jetty` | JVM | ✅ |\n| `Tomcat` | JVM | ✅ |\n| `CIO` (Coroutine-based I/O) | JVM, [Native](https://ktor.io/docs/server-native.html), [GraalVM](https://ktor.io/docs/graalvm.html) | ✖️ |\n| [ServletApplicationEngine](https://ktor.io/docs/server-war.html) | JVM | ✅ |.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/engines.html", "title": "Server engines", "description": "To run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:16:27", "type": "section_detail", "page_metadata": {"title": "Server engines | Ktor Documentation", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "ogTitle": "Server engines | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-engines.html", "twitter:card": "summary_large_image", "twitter:title": "Server engines | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Server engines | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-engines.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.257764441", "build-number": "707", "ogDescription": "", "scrapeId": "25a32ad0-e502-4ce2-8547-47fc3c89342c", "sourceURL": "https://ktor.io/docs/engines.html", "url": "https://ktor.io/docs/server-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server engines in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies for Netty**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-netty:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies for netty, which is an important aspect of server engines.\n\n**Add dependencies for Netty (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-netty:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies for netty (gradle groovy), which is an important aspect of server engines.\n\n**Add dependencies for Netty (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-netty-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies for netty (maven), which is an important aspect of server engines.\n\n**Embedded Server Example**:\n\n```yaml\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\n\nfun main(args: Array<String>) {\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to embedded server example, which is an important aspect of server engines.\n\n", "metadata": {"source_url": "https://ktor.io/docs/engines.html", "title": "Server engines", "description": "To run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:16:27", "type": "code_examples", "page_metadata": {"title": "Server engines | Ktor Documentation", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "ogTitle": "Server engines | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-engines.html", "twitter:card": "summary_large_image", "twitter:title": "Server engines | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Server engines | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-engines.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.257764441", "build-number": "707", "ogDescription": "", "scrapeId": "25a32ad0-e502-4ce2-8547-47fc3c89342c", "sourceURL": "https://ktor.io/docs/engines.html", "url": "https://ktor.io/docs/server-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server engines in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBefore using the desired engine, you need to add the corresponding dependency to your build script.\n\nYou can create a Ktor server application using either embeddedServer or EngineMain.\n\nWhen configuring an engine, you can specify various engine-specific options in code or in a configuration file.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/engines.html", "title": "Server engines", "description": "To run a Ktor server application, you need to create and configure a server first. Server configuration includes different settings: an engine for processing network requests; host and port values used to access a server; SSL settings; ... and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 05:16:27", "type": "best_practices", "page_metadata": {"title": "Server engines | Ktor Documentation", "ogSiteName": "Ktor Help", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "ogTitle": "Server engines | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-engines.html", "twitter:card": "summary_large_image", "twitter:title": "Server engines | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "og:description": "", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:title": "Server engines | Ktor", "ogUrl": "https://ktor.io/docs/3.1.1/server-engines.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:site": "@JetBrainsKtor", "twitter:creator": "@JetBrainsKtor", "og:site_name": "Ktor Help", "built-on": "2025-02-26T14:01:05.257764441", "build-number": "707", "ogDescription": "", "scrapeId": "25a32ad0-e502-4ce2-8547-47fc3c89342c", "sourceURL": "https://ktor.io/docs/engines.html", "url": "https://ktor.io/docs/server-engines.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Ktor Documentation is in ktor?\n\nAssistant: Sure, I'd be happy to explain Ktor Documentation in ktor.\n\n# Ktor Documentation\n\nKtor is a framework for building asynchronous server-side and client-side applications with ease.Here's a quick rundown of what this is about:\n\n## Ktor Server\n\nLearn how to create, run and test a server application with Ktor. [Handle requests and generate responses](https://ktor.io/docs/server-requests-and-responses.html) - Learn how routing and requests work in Ktor by creating a Task Manager application. [Create a RESTful API](https://ktor.io/docs/server-create-restful-apis.html) - Learn how to build a RESTful API with Ktor. This tutorial covers setup, routing, and testing on a real-life example. [Create a website](https://ktor.io/docs/server-create-website.html) - Learn how to build a website in Kotlin with Ktor and Thymeleaf templates. [Create a WebSocket application](https://ktor.io/docs/server-create-websocket-application.html) - Learn how to harness the power of WebSockets to send and receive content. [Integrate a database](https://ktor.io/docs/server-integrate-database.html) - Learn the process of connecting Ktor services to database repositories with the Exposed SQL Library.\n\n## Server configuration\n\n[Create, open and run a new Ktor project](https://ktor.io/docs/server-create-a-new-project.html) [Adding server dependencies](https://ktor.io/docs/server-dependencies.html) [Creating a server](https://ktor.io/docs/server-create-and-configure.html) [Configuration in code](https://ktor.io/docs/server-configuration-code.html) [Configuration in a file](https://ktor.io/docs/server-configuration-file.html) [Server plugins](https://ktor.io/docs/server-plugins.html)\n\n## Routing\n\n[Routing](https://ktor.io/docs/server-routing.html) [Type-safe routing](https://ktor.io/docs/server-resources.html) [Application structure](https://ktor.io/docs/server-application-structure.html) [Handling requests](https://ktor.io/docs/server-requests.html) [Sending responses](https://ktor.io/docs/server-responses.html) [Serving static content](https://ktor.io/docs/server-static-content.html)\n\n## Plugins\n\n[Content negotiation and serialization in Ktor Server](https://ktor.io/docs/server-serialization.html) [Templating](https://ktor.io/docs/server-templating.html) [Authentication and authorization in Ktor Server](https://ktor.io/docs/server-auth.html) [Sessions](https://ktor.io/docs/server-sessions.html) [WebSockets in Ktor Server](https://ktor.io/docs/server-websockets.html) [Server-Sent Events in Ktor Server](https://ktor.io/docs/server-server-sent-events.html) [Swagger UI](https://ktor.io/docs/server-swagger-ui.html) [OpenAPI](https://ktor.io/docs/server-openapi.html) [Custom server plugins](https://ktor.io/docs/server-custom-plugins.html)\n\n## Run, debug and test\n\n[Running](https://ktor.io/docs/server-run.html) [Auto-reload](https://ktor.io/docs/server-auto-reload.html) [Testing in Ktor Server](https://ktor.io/docs/server-testing.html)\n\n## Deployment\n\n[Creating Fat JARs](https://ktor.io/docs/server-fatjar.html) [WAR](https://ktor.io/docs/server-war.html) [GraalVM](https://ktor.io/docs/graalvm.html) [Docker](https://ktor.io/docs/docker.html) [Google App Engine](https://ktor.io/docs/google-app-engine.html) [Heroku](https://ktor.io/docs/heroku.html)\n\n## Ktor Client\n\nCreate a client application with Ktor. [Create a cross-platform mobile application](https://ktor.io/docs/client-create-multiplatform-application.html) - Create a Kotlin Multiplatform Mobile application and learn how to make requests and receive responses with the Ktor Client.\n\n## Client setup\n\n[Create a client application](https://ktor.io/docs/client-create-new-application.html) [Adding client dependencies](https://ktor.io/docs/client-dependencies.html) [Creating and configuring a client](https://ktor.io/docs/client-create-and-configure.html) [Client engines](https://ktor.io/docs/client-engines.html) [Client plugins](https://ktor.io/docs/client-plugins.html)\n\n## Requests\n\n[Making requests](https://ktor.io/docs/client-requests.html) [Type-safe requests](https://ktor.io/docs/client-resources.html) [Default request](https://ktor.io/docs/client-default-request.html) [Retrying failed requests](https://ktor.io/docs/client-request-retry.html)\n\n## Responses\n\n[Receiving responses](https://ktor.io/docs/client-responses.html) [Response validation](https://ktor.io/docs/client-response-validation.html)\n\n## Plugins\n\n[Authentication and authorization in Ktor Client](https://ktor.io/docs/client-auth.html) [Cookies](https://ktor.io/docs/client-cookies.html) [Content encoding](https://ktor.io/docs/client-content-encoding.html) [BOM remover](https://ktor.io/docs/client-bom-remover.html) [Caching](https://ktor.io/docs/client-caching.html) [WebSockets in Ktor Client](https://ktor.io/docs/client-websockets.html) [Server-Sent Events in Ktor Client](https://ktor.io/docs/client-server-sent-events.html) [Custom client plugins](https://ktor.io/docs/client-custom-plugins.html)\n\n## Testing\n\n[Testing in Ktor Client](https://ktor.io/docs/client-testing.html)\n\n## Integrations\n\n[Full-stack development with Kotlin Multiplatform](https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html) - Learn how to develop a cross-platform full-stack application in Kotlin and Ktor. [First steps with Kotlin RPC](https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html) - Learn how to create your first application with Kotlin RPC and Ktor.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I ktor server in ktor?\n\nAssistant: To ktor server in ktor, here's what you do:\nLearn how to create, run and test a server application with Ktor. [Handle requests and generate responses](https://ktor.io/docs/server-requests-and-responses.html) - Learn how routing and requests work in Ktor by creating a Task Manager application. [Create a RESTful API](https://ktor.io/docs/server-create-restful-apis.html) - Learn how to build a RESTful API with Ktor. This tutorial covers setup, routing, and testing on a real-life example. [Create a website](https://ktor.io/docs/server-create-website.html) - Learn how to build a website in Kotlin with Ktor and Thymeleaf templates. [Create a WebSocket application](https://ktor.io/docs/server-create-websocket-application.html) - Learn how to harness the power of WebSockets to send and receive content. [Integrate a database](https://ktor.io/docs/server-integrate-database.html) - Learn the process of connecting Ktor services to database repositories with the Exposed SQL Library..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I server configuration in ktor?\n\nAssistant: To server configuration in ktor, here's what you do:\n[Create, open and run a new Ktor project](https://ktor.io/docs/server-create-a-new-project.html) [Adding server dependencies](https://ktor.io/docs/server-dependencies.html) [Creating a server](https://ktor.io/docs/server-create-and-configure.html) [Configuration in code](https://ktor.io/docs/server-configuration-code.html) [Configuration in a file](https://ktor.io/docs/server-configuration-file.html) [Server plugins](https://ktor.io/docs/server-plugins.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I routing in ktor?\n\nAssistant: To routing in ktor, here's what you do:\n[Routing](https://ktor.io/docs/server-routing.html) [Type-safe routing](https://ktor.io/docs/server-resources.html) [Application structure](https://ktor.io/docs/server-application-structure.html) [Handling requests](https://ktor.io/docs/server-requests.html) [Sending responses](https://ktor.io/docs/server-responses.html) [Serving static content](https://ktor.io/docs/server-static-content.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I plugins in ktor?\n\nAssistant: To plugins in ktor, here's what you do:\n[Content negotiation and serialization in Ktor Server](https://ktor.io/docs/server-serialization.html) [Templating](https://ktor.io/docs/server-templating.html) [Authentication and authorization in Ktor Server](https://ktor.io/docs/server-auth.html) [Sessions](https://ktor.io/docs/server-sessions.html) [WebSockets in Ktor Server](https://ktor.io/docs/server-websockets.html) [Server-Sent Events in Ktor Server](https://ktor.io/docs/server-server-sent-events.html) [Swagger UI](https://ktor.io/docs/server-swagger-ui.html) [OpenAPI](https://ktor.io/docs/server-openapi.html) [Custom server plugins](https://ktor.io/docs/server-custom-plugins.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run, debug and test in ktor?\n\nAssistant: To run, debug and test in ktor, here's what you do:\n[Running](https://ktor.io/docs/server-run.html) [Auto-reload](https://ktor.io/docs/server-auto-reload.html) [Testing in Ktor Server](https://ktor.io/docs/server-testing.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I deployment in ktor?\n\nAssistant: To deployment in ktor, here's what you do:\n[Creating Fat JARs](https://ktor.io/docs/server-fatjar.html) [WAR](https://ktor.io/docs/server-war.html) [GraalVM](https://ktor.io/docs/graalvm.html) [Docker](https://ktor.io/docs/docker.html) [Google App Engine](https://ktor.io/docs/google-app-engine.html) [Heroku](https://ktor.io/docs/heroku.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I ktor client in ktor?\n\nAssistant: To ktor client in ktor, here's what you do:\nCreate a client application with Ktor. [Create a cross-platform mobile application](https://ktor.io/docs/client-create-multiplatform-application.html) - Create a Kotlin Multiplatform Mobile application and learn how to make requests and receive responses with the Ktor Client..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I client setup in ktor?\n\nAssistant: To client setup in ktor, here's what you do:\n[Create a client application](https://ktor.io/docs/client-create-new-application.html) [Adding client dependencies](https://ktor.io/docs/client-dependencies.html) [Creating and configuring a client](https://ktor.io/docs/client-create-and-configure.html) [Client engines](https://ktor.io/docs/client-engines.html) [Client plugins](https://ktor.io/docs/client-plugins.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I requests in ktor?\n\nAssistant: To requests in ktor, here's what you do:\n[Making requests](https://ktor.io/docs/client-requests.html) [Type-safe requests](https://ktor.io/docs/client-resources.html) [Default request](https://ktor.io/docs/client-default-request.html) [Retrying failed requests](https://ktor.io/docs/client-request-retry.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I responses in ktor?\n\nAssistant: To responses in ktor, here's what you do:\n[Receiving responses](https://ktor.io/docs/client-responses.html) [Response validation](https://ktor.io/docs/client-response-validation.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I plugins in ktor?\n\nAssistant: To plugins in ktor, here's what you do:\n[Authentication and authorization in Ktor Client](https://ktor.io/docs/client-auth.html) [Cookies](https://ktor.io/docs/client-cookies.html) [Content encoding](https://ktor.io/docs/client-content-encoding.html) [BOM remover](https://ktor.io/docs/client-bom-remover.html) [Caching](https://ktor.io/docs/client-caching.html) [WebSockets in Ktor Client](https://ktor.io/docs/client-websockets.html) [Server-Sent Events in Ktor Client](https://ktor.io/docs/client-server-sent-events.html) [Custom client plugins](https://ktor.io/docs/client-custom-plugins.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I testing in ktor?\n\nAssistant: To testing in ktor, here's what you do:\n[Testing in Ktor Client](https://ktor.io/docs/client-testing.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I integrations in ktor?\n\nAssistant: To integrations in ktor, here's what you do:\n[Full-stack development with Kotlin Multiplatform](https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html) - Learn how to develop a cross-platform full-stack application in Kotlin and Ktor. [First steps with Kotlin RPC](https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html) - Learn how to create your first application with Kotlin RPC and Ktor..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/welcome.html", "title": "Ktor Documentation", "description": "Ktor is a framework for building asynchronous server-side and client-side applications with ease.", "has_code_examples": false, "has_best_practices": false, "section_count": 13, "timestamp": "2025-03-01 05:17:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en_US", "og:title": "Welcome | Ktor", "build-number": "707", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "twitter:site": "@JetBrainsKtor", "ogTitle": "Welcome | Ktor", "title": "Welcome | Ktor Documentation", "twitter:description": "", "ogSiteName": "Ktor Help", "ogDescription": "", "ogUrl": "https://ktor.io/docs/3.1.1/welcome.html", "ogLocale": "en_US", "og:description": "", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:01.932681307", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/welcome.html", "twitter:title": "Welcome | Ktor", "og:site_name": "Ktor Help", "twitter:creator": "@JetBrainsKtor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "c883f6cc-abd8-426e-9b55-bc3fdf9e0e9b", "sourceURL": "https://ktor.io/docs/welcome.html", "url": "https://ktor.io/docs/welcome.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what First steps with Kotlin RPC is in ktor?\n\nAssistant: Sure, I'd be happy to explain First steps with Kotlin RPC in ktor.\n\n# First steps with Kotlin RPC\n\nThis tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.Here's a quick rundown of what this is about:\n\n## Prerequisites\n\nThis tutorial assumes you have a fundamental understanding of Kotlin programming. If you are new to Kotlin, consider reviewing some introductory materials. For the best experience, we recommend using IntelliJ IDEA Ultimate as your integrated development environment (IDE) as it offers comprehensive support and tools that will enhance your productivity.\n\n## What is RPC?\n\nAnyone with programming experience will be familiar with the concept of a procedure call. This is a fundamental concept in any programming language. Technically, these are local procedure calls, since they always take place within the same program.\n\nA remote procedure call is when the function call and parameters are in some way transferred over a network, so that the implementation can occur within a separate VM/executable. The return value travels the opposite path back to the machine where the invocation was made.\n\nIt is easiest to think of the machine where the invocation occurred as the client and the machine where the implementation resides as the server. This does not necessarily have to be the case, however. RPC calls could occur in both directions, as part of a peer architecture. But to keep things simple, let’s assume a client/server deployment.\n\n## RPC framework fundamentals\n\nCertain fundamentals must be provided by any RPC framework. They are inevitable when implementing remote procedure calls within a conventional IT infrastructure. The terminology can vary, and responsibilities can be divided in different ways, but every RPC framework must provide:\n\n1. A way to declare the procedures that will be invoked remotely. In object-oriented programming, an interface is the logical choice. This could be the interface construct provided by the current language or some kind of language-neutral standard, such as the Web IDL used by the W3C.\n\n2. A means to specify the types used for parameters and return values. Once again, you could use a language-neutral standard. However, it may be simpler to annotate standard data type declarations in the current language.\n\n3. Helper classes, known as client stubs, that will be used to convert the procedure invocation into a format that can be sent over the network and to unpack the resulting return value. These stubs can be created either during the compiling process or dynamically at runtime.\n\n4. An underlying RPC Runtime that manages the helper classes and supervises the lifecycle of a remote procedure call. On the server side, this runtime will need to be embedded in some kind of server, so that it is available to process requests on an ongoing basis.\n\n5. Protocols need to be chosen (or defined) to represent the procedure being called, serialize the data being sent, and transform the information over the network.\n\n## Marshaling vs. serialization\n\nIn RPC frameworks, we speak of marshaling and unmarshaling. This is the process of packing and unpacking information to be sent over the network. It can be thought of as a superset of serialization. In marshaling, we are serializing objects, but we also need to package information about the procedure being called and the context in which that call was made.\n\n## Hello, kotlinx.rpc\n\nLet’s create an application for ordering pizza over the network. In order to keep the code as simple as possible, we’ll use a console-based client.\n\n## Create the project\n\nFirst, you will create a project that will include both the client and server implementations.\n\nIn more complex applications, it's best practice to use separate modules for the client and server. However, for simplicity in this tutorial, we will use a single module for both.\n\n1. Launch IntelliJ IDEA.\n2. On the Welcome screen, click New Project.\n3. In the Name field, enter KotlinRpcPizzaApp as the name of your project.\n4. Leave the rest of the default settings and click Create.\n\n## Add the shared types\n\nThe heart of any RPC project is the interface that defines the procedures to be called remotely, along with the types used in the definition of those procedures.\n\n1. Navigate to the src/main/kotlin folder and create a new subpackage called model.\n2. Inside the model package, create a new PizzaShop.kt file with the following implementation:\n\n```kotlin\npackage com.example.model\n\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.serialization.Serializable\nimport kotlinx.rpc.RemoteService\nimport kotlinx.rpc.annotations.Rpc\n\n@Rpc\ninterface PizzaShop : RemoteService {\n       suspend fun orderPizza(pizza: Pizza): Receipt\n}\n\n@Serializable\nclass Pizza(val name: String)\n\n@Serializable\nclass Receipt(val amount: Double)\n```\n\n## Implement the client\n\n1. Navigate to src/main/kotlin and create a new Client.kt file.\n2. Open Client.kt and add the following implementation:\n\n```kotlin\npackage com.example\n\nimport com.example.model.Pizza\nimport com.example.model.PizzaShop\nimport io.ktor.client.*\nimport io.ktor.http.*\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.rpc.withService\nimport kotlinx.rpc.krpc.serialization.json.json\nimport kotlinx.rpc.krpc.ktor.client.KtorRpcClient\nimport kotlinx.rpc.krpc.ktor.client.installKrpc\nimport kotlinx.rpc.krpc.ktor.client.rpc\nimport kotlinx.rpc.krpc.ktor.client.rpcConfig\n\nfun main() = runBlocking {\n       val ktorClient = HttpClient {\n           installKrpc {\n               waitForServices = true\n           }\n       }\n\n       val client: KtorRpcClient = ktorClient.rpc {\n           url {\n               host = \"localhost\"\n               port = 8080\n               encodedPath = \"pizza\"\n           }\n\n           rpcConfig {\n               serialization {\n                   json()\n               }\n           }\n       }\n\n       val pizzaShop: PizzaShop = client.withService<PizzaShop>()\n\n       val receipt = pizzaShop.orderPizza(Pizza(\"Pepperoni\"))\n       println(\"Your pizza cost ${'$'}{receipt.amount}\")\n\n       ktorClient.close()\n}\n```\n\n## Implement the server\n\n1. Navigate to src/main/kotlin and create a new Server.kt file.\n2. Open Server.kt and add the following interface:\n\n```kotlin\npackage com.example\n\nimport com.example.model.*\nimport io.ktor.server.application.*\n\nclass PizzaShopImpl(\n       override val coroutineContext: CoroutineContext\n) : PizzaShop {\n       override suspend fun orderPizza(pizza: Pizza): Receipt {\n           return Receipt(7.89)\n       }\n}\n```\n\n3. Add the following code into the same file:\n\n```kotlin\nfun main() {\n       embeddedServer(Netty, port = 8080) {\n           module()\n           println(\"Server running\")\n       }.start(wait = true)\n}\n\nfun Application.module() {\n       install(Krpc)\n\n       routing {\n           rpc(\"/pizza\") {\n               rpcConfig {\n                   serialization {\n                       json()\n                   }\n               }\n\n               registerService<PizzaShop> { ctx -> PizzaShopImpl(ctx) }\n           }\n       }\n}\n```\n\n## Add dependencies\n\n1. In the build.gradle.kts file, add the following plugins:\n\n```kotlin\nplugins {\n       kotlin(\"jvm\") version \"2.1.10\"\n       kotlin(\"plugin.serialization\") version \"2.1.10\"\n       id(\"io.ktor.plugin\") version \"3.0.3\"\n       id(\"org.jetbrains.kotlinx.rpc.plugin\") version \"0.5.1\"\n}\n```\n\n2. Add the following dependencies:\n\n```kotlin\nimplementation(\"io.ktor:ktor-client-cio-jvm\")\n       implementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-client:0.5.1\")\n       implementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-ktor-client:0.5.1\")\n       implementation(\"io.ktor:ktor-server-netty-jvm\")\n       implementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-server:0.5.1\")\n       implementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-ktor-server:0.5.1\")\n       implementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-serialization-json:0.5.1\")\n       implementation(\"ch.qos.logback:logback-classic:1.5.6\")\n       testImplementation(kotlin(\"test\"))\n}\n```\n\n## Run the application\n\nTo run the demo, follow the steps below:\n\n1. Navigate to the Server.kt file.\n2. In IntelliJ IDEA, click on the run button next to the main() function to start the application.\n3. Navigate to the Client.kt file and run the application.\n\n## Extend the example\n\n1. In the PizzaShop.kt file, extend the orderPizza method by including the client’s ID, and add a viewOrders method that returns all the pending orders for a specified client:\n\n```kotlin\n@Rpc\ninterface PizzaShop : RemoteService {\n       suspend fun orderPizza(clientID: String, pizza: Pizza): Receipt\n       suspend fun viewOrders(clientID: String): Flow<Pizza>\n}\n```\n\n2. Navigate to the Server.kt file and implement this functionality by storing the current orders in a map of lists:\n\n```kotlin\nclass PizzaShopImpl(\n       override val coroutineContext: CoroutineContext\n) : PizzaShop {\n       private val openOrders = mutableMapOf<String, MutableList<Pizza>>()\n\n       override suspend fun orderPizza(clientID: String, pizza: Pizza): Receipt {\n           if(openOrders.containsKey(clientID)) {\n               openOrders[clientID]?.add(pizza)\n           } else {\n               openOrders[clientID] = mutableListOf(pizza)\n           }\n           return Receipt(3.45)\n       }\n\n       override suspend fun viewOrders(clientID: String): Flow<Pizza> {\n           val orders = openOrders[clientID]\n           if (orders != null) {\n               return flow {\n                   for (order in orders) {\n                       emit(order)\n                       delay(1000)\n                   }\n               }\n           }\n           return flow {}\n       }\n}\n```\n\n3. In the Client.kt file, submit multiple orders using two different client IDs:\n\n```kotlin\nval pizzaShop: PizzaShop = client.withService<PizzaShop>()\n\npizzaShop.orderPizza(\"AB12\", Pizza(\"Pepperoni\"))\npizzaShop.orderPizza(\"AB12\", Pizza(\"Hawaiian\"))\npizzaShop.orderPizza(\"AB12\", Pizza(\"Calzone\"))\n\npizzaShop.orderPizza(\"CD34\", Pizza(\"Margherita\"))\npizzaShop.orderPizza(\"CD34\", Pizza(\"Sicilian\"))\npizzaShop.orderPizza(\"CD34\", Pizza(\"California\"))\n```\n\n4. Run the server and the client.\n\n## RPC vs. REST\n\nThe idea of RPC is considerably older than REST, dating back at least to 1981. When compared to REST, the RPC-based approach does not constrain you to a uniform interface (such as the HTTP request types), is much simpler to work with in code, and can be more performant thanks to binary messaging.\n\n## Kotlin RPC vs. Google RPC\n\nGoogle RPC is the dominant RPC technology in the software industry at present. A standard called Protocol Buffers (protobuf) is used to define data structures and message payloads using a language-neutral Interface Definition Language (IDL). These IDL definitions can be converted into a wide variety of programming languages and are serialized using a compact and efficient binary format.\n\n## Next steps\n\nKotlin RPC extends the Kotlin ecosystem in a new direction, offering an alternative to REST and GraphQL for creating and consuming services. It is built on proven libraries and frameworks, such as Ktor, Coroutines, and kotlinx-serialization.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I prerequisites in ktor?\n\nAssistant: To prerequisites in ktor, here's what you do:\nThis tutorial assumes you have a fundamental understanding of Kotlin programming. If you are new to Kotlin, consider reviewing some introductory materials. For the best experience, we recommend using IntelliJ IDEA Ultimate as your integrated development environment (IDE) as it offers comprehensive support and tools that will enhance your productivity..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I what is rpc? in ktor?\n\nAssistant: To what is rpc? in ktor, here's what you do:\nAnyone with programming experience will be familiar with the concept of a procedure call. This is a fundamental concept in any programming language. Technically, these are local procedure calls, since they always take place within the same program.\n\nA remote procedure call is when the function call and parameters are in some way transferred over a network, so that the implementation can occur within a separate VM/executable. The return value travels the opposite path back to the machine where the invocation was made.\n\nIt is easiest to think of the machine where the invocation occurred as the client and the machine where the implementation resides as the server. This does not necessarily have to be the case, however. RPC calls could occur in both directions, as part of a peer architecture. But to keep things simple, let’s assume a client/server deployment..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I rpc framework fundamentals in ktor?\n\nAssistant: To rpc framework fundamentals in ktor, here's what you do:\nCertain fundamentals must be provided by any RPC framework. They are inevitable when implementing remote procedure calls within a conventional IT infrastructure. The terminology can vary, and responsibilities can be divided in different ways, but every RPC framework must provide:\n\n1. A way to declare the procedures that will be invoked remotely. In object-oriented programming, an interface is the logical choice. This could be the interface construct provided by the current language or some kind of language-neutral standard, such as the Web IDL used by the W3C.\n\n2. A means to specify the types used for parameters and return values. Once again, you could use a language-neutral standard. However, it may be simpler to annotate standard data type declarations in the current language.\n\n3. Helper classes, known as client stubs, that will be used to convert the procedure invocation into a format that can be sent over the network and to unpack the resulting return value. These stubs can be created either during the compiling process or dynamically at runtime.\n\n4. An underlying RPC Runtime that manages the helper classes and supervises the lifecycle of a remote procedure call. On the server side, this runtime will need to be embedded in some kind of server, so that it is available to process requests on an ongoing basis.\n\n5. Protocols need to be chosen (or defined) to represent the procedure being called, serialize the data being sent, and transform the information over the network..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I marshaling vs. serialization in ktor?\n\nAssistant: To marshaling vs. serialization in ktor, here's what you do:\nIn RPC frameworks, we speak of marshaling and unmarshaling. This is the process of packing and unpacking information to be sent over the network. It can be thought of as a superset of serialization. In marshaling, we are serializing objects, but we also need to package information about the procedure being called and the context in which that call was made..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I hello, kotlinx.rpc in ktor?\n\nAssistant: To hello, kotlinx.rpc in ktor, here's what you do:\nLet’s create an application for ordering pizza over the network. In order to keep the code as simple as possible, we’ll use a console-based client..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create the project in ktor?\n\nAssistant: To create the project in ktor, here's what you do:\nFirst, you will create a project that will include both the client and server implementations.\n\nIn more complex applications, it's best practice to use separate modules for the client and server. However, for simplicity in this tutorial, we will use a single module for both.\n\n1. Launch IntelliJ IDEA.\n2. On the Welcome screen, click New Project.\n3. In the Name field, enter KotlinRpcPizzaApp as the name of your project.\n4. Leave the rest of the default settings and click Create..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add the shared types in ktor?\n\nAssistant: To add the shared types in ktor, here's what you do:\nThe heart of any RPC project is the interface that defines the procedures to be called remotely, along with the types used in the definition of those procedures.\n\n1. Navigate to the src/main/kotlin folder and create a new subpackage called model.\n2. Inside the model package, create a new PizzaShop.kt file with the following implementation:\n\n```kotlin\npackage com.example.model\n\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.serialization.Serializable\nimport kotlinx.rpc.RemoteService\nimport kotlinx.rpc.annotations.Rpc\n\n@Rpc\ninterface PizzaShop : RemoteService {\n       suspend fun orderPizza(pizza: Pizza): Receipt\n}\n\n@Serializable\nclass Pizza(val name: String)\n\n@Serializable\nclass Receipt(val amount: Double)\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I implement the client in ktor?\n\nAssistant: To implement the client in ktor, here's what you do:\n1. Navigate to src/main/kotlin and create a new Client.kt file.\n2. Open Client.kt and add the following implementation:\n\n```kotlin\npackage com.example\n\nimport com.example.model.Pizza\nimport com.example.model.PizzaShop\nimport io.ktor.client.*\nimport io.ktor.http.*\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.rpc.withService\nimport kotlinx.rpc.krpc.serialization.json.json\nimport kotlinx.rpc.krpc.ktor.client.KtorRpcClient\nimport kotlinx.rpc.krpc.ktor.client.installKrpc\nimport kotlinx.rpc.krpc.ktor.client.rpc\nimport kotlinx.rpc.krpc.ktor.client.rpcConfig\n\nfun main() = runBlocking {\n       val ktorClient = HttpClient {\n           installKrpc {\n               waitForServices = true\n           }\n       }\n\n       val client: KtorRpcClient = ktorClient.rpc {\n           url {\n               host = \"localhost\"\n               port = 8080\n               encodedPath = \"pizza\"\n           }\n\n           rpcConfig {\n               serialization {\n                   json()\n               }\n           }\n       }\n\n       val pizzaShop: PizzaShop = client.withService<PizzaShop>()\n\n       val receipt = pizzaShop.orderPizza(Pizza(\"Pepperoni\"))\n       println(\"Your pizza cost ${'$'}{receipt.amount}\")\n\n       ktorClient.close()\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I implement the server in ktor?\n\nAssistant: To implement the server in ktor, here's what you do:\n1. Navigate to src/main/kotlin and create a new Server.kt file.\n2. Open Server.kt and add the following interface:\n\n```kotlin\npackage com.example\n\nimport com.example.model.*\nimport io.ktor.server.application.*\n\nclass PizzaShopImpl(\n       override val coroutineContext: CoroutineContext\n) : PizzaShop {\n       override suspend fun orderPizza(pizza: Pizza): Receipt {\n           return Receipt(7.89)\n       }\n}\n```\n\n3. Add the following code into the same file:\n\n```kotlin\nfun main() {\n       embeddedServer(Netty, port = 8080) {\n           module()\n           println(\"Server running\")\n       }.start(wait = true)\n}\n\nfun Application.module() {\n       install(Krpc)\n\n       routing {\n           rpc(\"/pizza\") {\n               rpcConfig {\n                   serialization {\n                       json()\n                   }\n               }\n\n               registerService<PizzaShop> { ctx -> PizzaShopImpl(ctx) }\n           }\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\n1. In the build.gradle.kts file, add the following plugins:\n\n```kotlin\nplugins {\n       kotlin(\"jvm\") version \"2.1.10\"\n       kotlin(\"plugin.serialization\") version \"2.1.10\"\n       id(\"io.ktor.plugin\") version \"3.0.3\"\n       id(\"org.jetbrains.kotlinx.rpc.plugin\") version \"0.5.1\"\n}\n```\n\n2. Add the following dependencies:\n\n```kotlin\nimplementation(\"io.ktor:ktor-client-cio-jvm\")\n       implementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-client:0.5.1\")\n       implementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-ktor-client:0.5.1\")\n       implementation(\"io.ktor:ktor-server-netty-jvm\")\n       implementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-server:0.5.1\")\n       implementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-ktor-server:0.5.1\")\n       implementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-serialization-json:0.5.1\")\n       implementation(\"ch.qos.logback:logback-classic:1.5.6\")\n       testImplementation(kotlin(\"test\"))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I run the application in ktor?\n\nAssistant: To run the application in ktor, here's what you do:\nTo run the demo, follow the steps below:\n\n1. Navigate to the Server.kt file.\n2. In IntelliJ IDEA, click on the run button next to the main() function to start the application.\n3. Navigate to the Client.kt file and run the application..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I extend the example in ktor?\n\nAssistant: To extend the example in ktor, here's what you do:\n1. In the PizzaShop.kt file, extend the orderPizza method by including the client’s ID, and add a viewOrders method that returns all the pending orders for a specified client:\n\n```kotlin\n@Rpc\ninterface PizzaShop : RemoteService {\n       suspend fun orderPizza(clientID: String, pizza: Pizza): Receipt\n       suspend fun viewOrders(clientID: String): Flow<Pizza>\n}\n```\n\n2. Navigate to the Server.kt file and implement this functionality by storing the current orders in a map of lists:\n\n```kotlin\nclass PizzaShopImpl(\n       override val coroutineContext: CoroutineContext\n) : PizzaShop {\n       private val openOrders = mutableMapOf<String, MutableList<Pizza>>()\n\n       override suspend fun orderPizza(clientID: String, pizza: Pizza): Receipt {\n           if(openOrders.containsKey(clientID)) {\n               openOrders[clientID]?.add(pizza)\n           } else {\n               openOrders[clientID] = mutableListOf(pizza)\n           }\n           return Receipt(3.45)\n       }\n\n       override suspend fun viewOrders(clientID: String): Flow<Pizza> {\n           val orders = openOrders[clientID]\n           if (orders != null) {\n               return flow {\n                   for (order in orders) {\n                       emit(order)\n                       delay(1000)\n                   }\n               }\n           }\n           return flow {}\n       }\n}\n```\n\n3. In the Client.kt file, submit multiple orders using two different client IDs:\n\n```kotlin\nval pizzaShop: PizzaShop = client.withService<PizzaShop>()\n\npizzaShop.orderPizza(\"AB12\", Pizza(\"Pepperoni\"))\npizzaShop.orderPizza(\"AB12\", Pizza(\"Hawaiian\"))\npizzaShop.orderPizza(\"AB12\", Pizza(\"Calzone\"))\n\npizzaShop.orderPizza(\"CD34\", Pizza(\"Margherita\"))\npizzaShop.orderPizza(\"CD34\", Pizza(\"Sicilian\"))\npizzaShop.orderPizza(\"CD34\", Pizza(\"California\"))\n```\n\n4. Run the server and the client..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I rpc vs. rest in ktor?\n\nAssistant: To rpc vs. rest in ktor, here's what you do:\nThe idea of RPC is considerably older than REST, dating back at least to 1981. When compared to REST, the RPC-based approach does not constrain you to a uniform interface (such as the HTTP request types), is much simpler to work with in code, and can be more performant thanks to binary messaging..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I kotlin rpc vs. google rpc in ktor?\n\nAssistant: To kotlin rpc vs. google rpc in ktor, here's what you do:\nGoogle RPC is the dominant RPC technology in the software industry at present. A standard called Protocol Buffers (protobuf) is used to define data structures and message payloads using a language-neutral Interface Definition Language (IDL). These IDL definitions can be converted into a wide variety of programming languages and are serialized using a compact and efficient binary format..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I next steps in ktor?\n\nAssistant: To next steps in ktor, here's what you do:\nKotlin RPC extends the Kotlin ecosystem in a new direction, offering an alternative to REST and GraphQL for creating and consuming services. It is built on proven libraries and frameworks, such as Ktor, Coroutines, and kotlinx-serialization..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for First steps with Kotlin RPC in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**PizzaShop Interface**:\n\n```yaml\n```kotlin\npackage com.example.model\n\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.serialization.Serializable\nimport kotlinx.rpc.RemoteService\nimport kotlinx.rpc.annotations.Rpc\n\n@Rpc\ninterface PizzaShop : RemoteService {\n       suspend fun orderPizza(pizza: Pizza): Receipt\n}\n\n@Serializable\nclass Pizza(val name: String)\n\n@Serializable\nclass Receipt(val amount: Double)\n```\n```\n\nThis snippet shows you how to pizzashop interface, which is an important aspect of first steps with kotlin rpc.\n\n**Client Implementation**:\n\n```yaml\n```kotlin\npackage com.example\n\nimport com.example.model.Pizza\nimport com.example.model.PizzaShop\nimport io.ktor.client.*\nimport io.ktor.http.*\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.rpc.withService\nimport kotlinx.rpc.krpc.serialization.json.json\nimport kotlinx.rpc.krpc.ktor.client.KtorRpcClient\nimport kotlinx.rpc.krpc.ktor.client.installKrpc\nimport kotlinx.rpc.krpc.ktor.client.rpc\nimport kotlinx.rpc.krpc.ktor.client.rpcConfig\n\nfun main() = runBlocking {\n       val ktorClient = HttpClient {\n           installKrpc {\n               waitForServices = true\n           }\n       }\n\n       val client: KtorRpcClient = ktorClient.rpc {\n           url {\n               host = \"localhost\"\n               port = 8080\n               encodedPath = \"pizza\"\n           }\n\n           rpcConfig {\n               serialization {\n                   json()\n               }\n           }\n       }\n\n       val pizzaShop: PizzaShop = client.withService<PizzaShop>()\n\n       val receipt = pizzaShop.orderPizza(Pizza(\"Pepperoni\"))\n       println(\"Your pizza cost ${'$'}{receipt.amount}\")\n\n       ktorClient.close()\n}\n```\n```\n\nThis snippet shows you how to client implementation, which is an important aspect of first steps with kotlin rpc.\n\n**Server Implementation**:\n\n```yaml\n```kotlin\npackage com.example\n\nimport com.example.model.*\nimport io.ktor.server.application.*\n\nclass PizzaShopImpl(\n       override val coroutineContext: CoroutineContext\n) : PizzaShop {\n       override suspend fun orderPizza(pizza: Pizza): Receipt {\n           return Receipt(7.89)\n       }\n}\n\nfun main() {\n       embeddedServer(Netty, port = 8080) {\n           module()\n           println(\"Server running\")\n       }.start(wait = true)\n}\n\nfun Application.module() {\n       install(Krpc)\n\n       routing {\n           rpc(\"/pizza\") {\n               rpcConfig {\n                   serialization {\n                       json()\n                   }\n               }\n\n               registerService<PizzaShop> { ctx -> PizzaShopImpl(ctx) }\n           }\n       }\n}\n```\n```\n\nThis snippet shows you how to server implementation, which is an important aspect of first steps with kotlin rpc.\n\n**Add Dependencies**:\n\n```yaml\n```kotlin\nplugins {\n       kotlin(\"jvm\") version \"2.1.10\"\n       kotlin(\"plugin.serialization\") version \"2.1.10\"\n       id(\"io.ktor.plugin\") version \"3.0.3\"\n       id(\"org.jetbrains.kotlinx.rpc.plugin\") version \"0.5.1\"\n}\n\nimplementation(\"io.ktor:ktor-client-cio-jvm\")\nimplementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-client:0.5.1\")\nimplementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-ktor-client:0.5.1\")\nimplementation(\"io.ktor:ktor-server-netty-jvm\")\nimplementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-server:0.5.1\")\nimplementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-ktor-server:0.5.1\")\nimplementation(\"org.jetbrains.kotlinx:kotlinx-rpc-krpc-serialization-json:0.5.1\")\nimplementation(\"ch.qos.logback:logback-classic:1.5.6\")\ntestImplementation(kotlin(\"test\"))\n```\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of first steps with kotlin rpc.\n\n", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using First steps with Kotlin RPC in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse separate modules for the client and server in complex applications.\n\nUse `runBlocking` for spikes and tests, rather than production code.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "title": "First steps with Kotlin RPC", "description": "This tutorial introduces the core concepts of Kotlin RPC and guides you through building a simple application using the kotlinx.rpc library.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-03-01 05:24:45", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "title": "First steps with Kotlin RPC | Ktor Documentation", "og:site_name": "Ktor Help", "language": "en-US", "twitter:description": "", "ogTitle": "First steps with Kotlin RPC | Ktor", "built-on": "2025-02-26T14:01:05.446456847", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/tutorial-first-steps-with-kotlin-rpc.html", "twitter:creator": "@JetBrainsKtor", "build-number": "707", "og:title": "First steps with Kotlin RPC | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "description": "\n        Discover the fundamentals of RPC and explore a detailed comparison between RPC and REST in this comprehensive\n        guide. Learn how to create your first application with Kotlin RPC.\n    ", "og:locale": "en_US", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogDescription": "", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:type": "website", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "First steps with Kotlin RPC | Ktor", "scrapeId": "a65ebfa5-ba4f-4d61-ab9c-805a30fcc1fd", "sourceURL": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "url": "https://ktor.io/docs/tutorial-first-steps-with-kotlin-rpc.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Bearer authentication in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain Bearer authentication in Ktor Server in ktor.\n\n# Bearer authentication in Ktor Server\n\nThis page covers the Bearer authentication scheme in Ktor Server, including how to add dependencies, configure the authentication flow, and protect resources.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nTo enable `bearer` authentication, you need to include the `ktor-server-auth` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Bearer authentication flow\n\nIn general, the Bearer authentication flow might look as follows:\n\n1. After a user successfully authenticates and authorizes access, the server returns an access token to the client.\n\n2. The client can make a request to a protected resource with a token passed in the `Authorization` header using the `Bearer` schema.\n\n```\nGET http://localhost:8080/\nAuthorization: Bearer abc123\n```\n\n3. A server receives a request and [validates](https://ktor.io/docs/server-bearer-auth.html#configure) a token.\n\n4. After validation, a server responds with the contents of a protected resource.\n\n## Install bearer authentication\n\nTo install the `bearer` authentication provider, call the [bearer](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/bearer.html) function inside the `install` block:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    bearer {\n        // Configure bearer authentication\n    }\n}\n```\n\nYou can optionally specify a [provider name](https://ktor.io/docs/server-auth.html#provider-name) that can be used to [authenticate a specified route](https://ktor.io/docs/server-bearer-auth.html#authenticate-route).\n\n## Configure bearer authentication\n\nTo get a general idea of how to configure different authentication providers in Ktor, see [Configure Authentication](https://ktor.io/docs/server-auth.html#configure). In this section, we'll see on configuration specifics of the `bearer` authentication provider.\n\n### Step 1: Configure a bearer provider\n\nThe `bearer` authentication provider exposes its settings via the [BearerAuthenticationProvider.Configuration](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-bearer-authentication-provider/-config/index.html) class. In the example below, the following settings are specified:\n\n- The `realm` property sets the realm to be passed in the `WWW-Authenticate` header.\n- The `authenticate` function checks the token sent by the client and returns a `UserIdPrincipal` in the case of successful authentication or `null` if authentication fails.\n\n```\ninstall(Authentication) {\n    bearer(\"auth-bearer\") {\n        realm = \"Access to the '/' path\"\n        authenticate { tokenCredential ->\n            if (tokenCredential.token == \"abc123\") {\n                UserIdPrincipal(\"jetbrains\")\n            } else {\n                null\n            }\n        }\n    }\n}\n```\n\n### Step 2: Protect specific resources\n\nAfter configuring the `bearer` provider, you can protect specific resources in our application using the [authenticate](https://ktor.io/docs/server-auth.html#authenticate-route) function. In the case of successful authentication, you can retrieve an authenticated [UserIdPrincipal](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html) inside a route handler using the `call.principal` function and get a name of an authenticated user.\n\n```\nrouting {\n    authenticate(\"auth-bearer\") {\n        get(\"/\") {\n            call.respondText(\"Hello, ${call.principal<UserIdPrincipal>()?.name}!\")\n        }\n    }\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-bearer-auth.html", "title": "Bearer authentication in Ktor Server", "description": "This page covers the Bearer authentication scheme in Ktor Server, including how to add dependencies, configure the authentication flow, and protect resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:25:08", "type": "overview", "page_metadata": {"og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "ogDescription": "", "title": "Bearer authentication in Ktor Server | Ktor Documentation", "built-on": "2025-02-26T14:01:03.656493052", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogTitle": "Bearer authentication in Ktor Server | Ktor", "twitter:title": "Bearer authentication in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "build-number": "707", "og:title": "Bearer authentication in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:description": "", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "scrapeId": "d59200d1-c99f-49a9-ad3e-63534e62fd47", "sourceURL": "https://ktor.io/docs/server-bearer-auth.html", "url": "https://ktor.io/docs/server-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo enable `bearer` authentication, you need to include the `ktor-server-auth` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-bearer-auth.html", "title": "Bearer authentication in Ktor Server", "description": "This page covers the Bearer authentication scheme in Ktor Server, including how to add dependencies, configure the authentication flow, and protect resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:25:08", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "ogDescription": "", "title": "Bearer authentication in Ktor Server | Ktor Documentation", "built-on": "2025-02-26T14:01:03.656493052", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogTitle": "Bearer authentication in Ktor Server | Ktor", "twitter:title": "Bearer authentication in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "build-number": "707", "og:title": "Bearer authentication in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:description": "", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "scrapeId": "d59200d1-c99f-49a9-ad3e-63534e62fd47", "sourceURL": "https://ktor.io/docs/server-bearer-auth.html", "url": "https://ktor.io/docs/server-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I bearer authentication flow in ktor?\n\nAssistant: To bearer authentication flow in ktor, here's what you do:\nIn general, the Bearer authentication flow might look as follows:\n\n1. After a user successfully authenticates and authorizes access, the server returns an access token to the client.\n\n2. The client can make a request to a protected resource with a token passed in the `Authorization` header using the `Bearer` schema.\n\n```\nGET http://localhost:8080/\nAuthorization: Bearer abc123\n```\n\n3. A server receives a request and [validates](https://ktor.io/docs/server-bearer-auth.html#configure) a token.\n\n4. After validation, a server responds with the contents of a protected resource..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-bearer-auth.html", "title": "Bearer authentication in Ktor Server", "description": "This page covers the Bearer authentication scheme in Ktor Server, including how to add dependencies, configure the authentication flow, and protect resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:25:08", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "ogDescription": "", "title": "Bearer authentication in Ktor Server | Ktor Documentation", "built-on": "2025-02-26T14:01:03.656493052", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogTitle": "Bearer authentication in Ktor Server | Ktor", "twitter:title": "Bearer authentication in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "build-number": "707", "og:title": "Bearer authentication in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:description": "", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "scrapeId": "d59200d1-c99f-49a9-ad3e-63534e62fd47", "sourceURL": "https://ktor.io/docs/server-bearer-auth.html", "url": "https://ktor.io/docs/server-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install bearer authentication in ktor?\n\nAssistant: To install bearer authentication in ktor, here's what you do:\nTo install the `bearer` authentication provider, call the [bearer](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/bearer.html) function inside the `install` block:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    bearer {\n        // Configure bearer authentication\n    }\n}\n```\n\nYou can optionally specify a [provider name](https://ktor.io/docs/server-auth.html#provider-name) that can be used to [authenticate a specified route](https://ktor.io/docs/server-bearer-auth.html#authenticate-route)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-bearer-auth.html", "title": "Bearer authentication in Ktor Server", "description": "This page covers the Bearer authentication scheme in Ktor Server, including how to add dependencies, configure the authentication flow, and protect resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:25:08", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "ogDescription": "", "title": "Bearer authentication in Ktor Server | Ktor Documentation", "built-on": "2025-02-26T14:01:03.656493052", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogTitle": "Bearer authentication in Ktor Server | Ktor", "twitter:title": "Bearer authentication in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "build-number": "707", "og:title": "Bearer authentication in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:description": "", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "scrapeId": "d59200d1-c99f-49a9-ad3e-63534e62fd47", "sourceURL": "https://ktor.io/docs/server-bearer-auth.html", "url": "https://ktor.io/docs/server-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure bearer authentication in ktor?\n\nAssistant: To configure bearer authentication in ktor, here's what you do:\nTo get a general idea of how to configure different authentication providers in Ktor, see [Configure Authentication](https://ktor.io/docs/server-auth.html#configure). In this section, we'll see on configuration specifics of the `bearer` authentication provider.\n\n### Step 1: Configure a bearer provider\n\nThe `bearer` authentication provider exposes its settings via the [BearerAuthenticationProvider.Configuration](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-bearer-authentication-provider/-config/index.html) class. In the example below, the following settings are specified:\n\n- The `realm` property sets the realm to be passed in the `WWW-Authenticate` header.\n- The `authenticate` function checks the token sent by the client and returns a `UserIdPrincipal` in the case of successful authentication or `null` if authentication fails.\n\n```\ninstall(Authentication) {\n    bearer(\"auth-bearer\") {\n        realm = \"Access to the '/' path\"\n        authenticate { tokenCredential ->\n            if (tokenCredential.token == \"abc123\") {\n                UserIdPrincipal(\"jetbrains\")\n            } else {\n                null\n            }\n        }\n    }\n}\n```\n\n### Step 2: Protect specific resources\n\nAfter configuring the `bearer` provider, you can protect specific resources in our application using the [authenticate](https://ktor.io/docs/server-auth.html#authenticate-route) function. In the case of successful authentication, you can retrieve an authenticated [UserIdPrincipal](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html) inside a route handler using the `call.principal` function and get a name of an authenticated user.\n\n```\nrouting {\n    authenticate(\"auth-bearer\") {\n        get(\"/\") {\n            call.respondText(\"Hello, ${call.principal<UserIdPrincipal>()?.name}!\")\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-bearer-auth.html", "title": "Bearer authentication in Ktor Server", "description": "This page covers the Bearer authentication scheme in Ktor Server, including how to add dependencies, configure the authentication flow, and protect resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:25:08", "type": "section_detail", "page_metadata": {"og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "ogDescription": "", "title": "Bearer authentication in Ktor Server | Ktor Documentation", "built-on": "2025-02-26T14:01:03.656493052", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogTitle": "Bearer authentication in Ktor Server | Ktor", "twitter:title": "Bearer authentication in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "build-number": "707", "og:title": "Bearer authentication in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:description": "", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "scrapeId": "d59200d1-c99f-49a9-ad3e-63534e62fd47", "sourceURL": "https://ktor.io/docs/server-bearer-auth.html", "url": "https://ktor.io/docs/server-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Bearer authentication in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-auth:$ktor_version\")\nimplementation \"io.ktor:ktor-server-auth:$ktor_version\"\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-auth-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of bearer authentication in ktor server.\n\n**Bearer authentication flow example**:\n\n```yaml\nGET http://localhost:8080/\nAuthorization: Bearer abc123\n```\n\nThis snippet shows you how to bearer authentication flow example, which is an important aspect of bearer authentication in ktor server.\n\n**Install bearer authentication example**:\n\n```yaml\nimport io.ktor.server.application.*\nimport io.ktor.server.auth.*\n// ...\ninstall(Authentication) {\n    bearer {\n        // Configure bearer authentication\n    }\n}\n```\n\nThis snippet shows you how to install bearer authentication example, which is an important aspect of bearer authentication in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-bearer-auth.html", "title": "Bearer authentication in Ktor Server", "description": "This page covers the Bearer authentication scheme in Ktor Server, including how to add dependencies, configure the authentication flow, and protect resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:25:08", "type": "code_examples", "page_metadata": {"og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "ogDescription": "", "title": "Bearer authentication in Ktor Server | Ktor Documentation", "built-on": "2025-02-26T14:01:03.656493052", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogTitle": "Bearer authentication in Ktor Server | Ktor", "twitter:title": "Bearer authentication in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "build-number": "707", "og:title": "Bearer authentication in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:description": "", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "scrapeId": "d59200d1-c99f-49a9-ad3e-63534e62fd47", "sourceURL": "https://ktor.io/docs/server-bearer-auth.html", "url": "https://ktor.io/docs/server-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Bearer authentication in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nBearer authentication should only be used over HTTPS/TLS.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-bearer-auth.html", "title": "Bearer authentication in Ktor Server", "description": "This page covers the Bearer authentication scheme in Ktor Server, including how to add dependencies, configure the authentication flow, and protect resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:25:08", "type": "best_practices", "page_metadata": {"og:type": "website", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:url": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "ogDescription": "", "title": "Bearer authentication in Ktor Server | Ktor Documentation", "built-on": "2025-02-26T14:01:03.656493052", "ogSiteName": "Ktor Help", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogLocale": "en_US", "og:site_name": "Ktor Help", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:description": "", "ogTitle": "Bearer authentication in Ktor Server | Ktor", "twitter:title": "Bearer authentication in Ktor Server | Ktor", "twitter:creator": "@JetBrainsKtor", "language": "en-US", "build-number": "707", "og:title": "Bearer authentication in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "og:description": "", "twitter:card": "summary_large_image", "ogUrl": "https://ktor.io/docs/3.1.1/server-bearer-auth.html", "scrapeId": "d59200d1-c99f-49a9-ad3e-63534e62fd47", "sourceURL": "https://ktor.io/docs/server-bearer-auth.html", "url": "https://ktor.io/docs/server-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what WebSockets serialization in Ktor Server is in ktor?\n\nAssistant: Sure, I'd be happy to explain WebSockets serialization in Ktor Server in ktor.\n\n# WebSockets serialization in Ktor Server\n\nThis page covers how to serialize and deserialize WebSocket frames in Ktor Server using various formats such as JSON, XML, CBOR, and ProtoBuf.Here's a quick rundown of what this is about:\n\n## Add dependencies\n\nBefore using kotlinx.serialization converters, you need to add the Kotlin serialization plugin as described in the Setup section.\n\n### JSON\nTo serialize/deserialize JSON data, you can choose one of the following libraries: kotlinx.serialization, Gson, or Jackson.\n\nAdd the `ktor-serialization-kotlinx-json` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nAdd the `ktor-serialization-gson` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-gson:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-gson:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-gson-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nAdd the `ktor-serialization-jackson` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-jackson:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-jackson:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-jackson-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### XML\nTo serialize/deserialize XML, add the `ktor-serialization-kotlinx-xml` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n> ### note\n> Note that XML serialization is not supported on `jsNode` target.\n\n### CBOR\nTo serialize/deserialize CBOR, add the `ktor-serialization-kotlinx-cbor` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### ProtoBuf\nTo serialize/deserialize ProtoBuf, add the `ktor-serialization-kotlinx-protobuf` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Configure a serializer\n\n### JSON serializer\nTo register the JSON serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `Json` parameter and assign this instance to the `contentConverter` property:\n```\nimport io.ktor.serialization.kotlinx.*\nimport kotlinx.serialization.json.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(Json)\n}\n```\n\nTo register the Gson serializer, assign `GsonWebsocketContentConverter` to the `contentConverter` property:\n```\nimport io.ktor.serialization.gson.*\n\ninstall(WebSockets) {\n    contentConverter = GsonWebsocketContentConverter()\n}\n```\n\nTo register the Jackson serializer, assign `JacksonWebsocketContentConverter` to the `contentConverter` property:\n```\nimport io.ktor.serialization.jackson.*\n\ninstall(WebSockets) {\n    contentConverter = JacksonWebsocketContentConverter()\n}\n```\n\n### XML serializer\nTo register the XML serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `XML` parameter and assign this instance to the `contentConverter` property:\n```\nimport nl.adaptivity.xmlutil.serialization.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(XML)\n}\n```\n\n### CBOR serializer\nTo register the CBOR serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `Cbor` parameter and assign this instance to the `contentConverter` property:\n```\nimport io.ktor.serialization.kotlinx.cbor.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(Cbor)\n}\n```\n\n### ProtoBuf serializer\nTo register the ProtoBuf serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `ProtoBuf` parameter and assign this instance to the `contentConverter` property:\n```\nimport kotlinx.serialization.protobuf.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(ProtoBuf)\n}\n```\n\n## Receive and send data\n\n### Create a data class\nTo serialize/deserialize frames into/from an object, you need to create a data class, for example:\n```\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\nIf you use kotlinx.serialization, make sure that this class has the `@Serializable` annotation:\n```\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\n### Receive data\nTo receive and convert a content of a text frame, call the `receiveDeserialized` function that accepts a data class as a parameter:\n```\nwebSocket(\"/customer\") {\n    val customer = receiveDeserialized<Customer>()\n    println(\"A customer with id ${customer.id} is received by the server.\")\n}\n```\n\nTo receive deserialized frames from the incoming channel, use the `WebsocketContentConverter.deserialize` function. `WebsocketContentConverter` is available via the `WebSocketServerSession.converter` property.\n\n### Send data\nTo pass a data object in a text frame using a specified format, you can use the `sendSerialized` function:\n```\nwebSocket(\"/customer/1\") {\n    sendSerialized(Customer(1, \"Jane\", \"Smith\"))\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-serialization.html", "title": "WebSockets serialization in Ktor Server", "description": "This page covers how to serialize and deserialize WebSocket frames in Ktor Server using various formats such as JSON, XML, CBOR, and ProtoBuf.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:28:15", "type": "overview", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogTitle": "WebSockets serialization in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "twitter:creator": "@JetBrainsKtor", "og:title": "WebSockets serialization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "og:locale": "en_US", "title": "WebSockets serialization in Ktor Server | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:title": "WebSockets serialization in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.886098672", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "40a2a8fc-37ab-41c3-975e-6175599b22b1", "sourceURL": "https://ktor.io/docs/server-websocket-serialization.html", "url": "https://ktor.io/docs/server-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nBefore using kotlinx.serialization converters, you need to add the Kotlin serialization plugin as described in the Setup section.\n\n### JSON\nTo serialize/deserialize JSON data, you can choose one of the following libraries: kotlinx.serialization, Gson, or Jackson.\n\nAdd the `ktor-serialization-kotlinx-json` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nAdd the `ktor-serialization-gson` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-gson:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-gson:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-gson-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nAdd the `ktor-serialization-jackson` artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-jackson:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-jackson:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-jackson-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### XML\nTo serialize/deserialize XML, add the `ktor-serialization-kotlinx-xml` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-xml:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n> ### note\n> Note that XML serialization is not supported on `jsNode` target.\n\n### CBOR\nTo serialize/deserialize CBOR, add the `ktor-serialization-kotlinx-cbor` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n### ProtoBuf\nTo serialize/deserialize ProtoBuf, add the `ktor-serialization-kotlinx-protobuf` in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-serialization.html", "title": "WebSockets serialization in Ktor Server", "description": "This page covers how to serialize and deserialize WebSocket frames in Ktor Server using various formats such as JSON, XML, CBOR, and ProtoBuf.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:28:15", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogTitle": "WebSockets serialization in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "twitter:creator": "@JetBrainsKtor", "og:title": "WebSockets serialization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "og:locale": "en_US", "title": "WebSockets serialization in Ktor Server | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:title": "WebSockets serialization in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.886098672", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "40a2a8fc-37ab-41c3-975e-6175599b22b1", "sourceURL": "https://ktor.io/docs/server-websocket-serialization.html", "url": "https://ktor.io/docs/server-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure a serializer in ktor?\n\nAssistant: To configure a serializer in ktor, here's what you do:\n### JSON serializer\nTo register the JSON serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `Json` parameter and assign this instance to the `contentConverter` property:\n```\nimport io.ktor.serialization.kotlinx.*\nimport kotlinx.serialization.json.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(Json)\n}\n```\n\nTo register the Gson serializer, assign `GsonWebsocketContentConverter` to the `contentConverter` property:\n```\nimport io.ktor.serialization.gson.*\n\ninstall(WebSockets) {\n    contentConverter = GsonWebsocketContentConverter()\n}\n```\n\nTo register the Jackson serializer, assign `JacksonWebsocketContentConverter` to the `contentConverter` property:\n```\nimport io.ktor.serialization.jackson.*\n\ninstall(WebSockets) {\n    contentConverter = JacksonWebsocketContentConverter()\n}\n```\n\n### XML serializer\nTo register the XML serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `XML` parameter and assign this instance to the `contentConverter` property:\n```\nimport nl.adaptivity.xmlutil.serialization.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(XML)\n}\n```\n\n### CBOR serializer\nTo register the CBOR serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `Cbor` parameter and assign this instance to the `contentConverter` property:\n```\nimport io.ktor.serialization.kotlinx.cbor.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(Cbor)\n}\n```\n\n### ProtoBuf serializer\nTo register the ProtoBuf serializer in the WebSockets configuration, create a `KotlinxWebsocketSerializationConverter` instance with the `ProtoBuf` parameter and assign this instance to the `contentConverter` property:\n```\nimport kotlinx.serialization.protobuf.*\n\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(ProtoBuf)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-serialization.html", "title": "WebSockets serialization in Ktor Server", "description": "This page covers how to serialize and deserialize WebSocket frames in Ktor Server using various formats such as JSON, XML, CBOR, and ProtoBuf.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:28:15", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogTitle": "WebSockets serialization in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "twitter:creator": "@JetBrainsKtor", "og:title": "WebSockets serialization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "og:locale": "en_US", "title": "WebSockets serialization in Ktor Server | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:title": "WebSockets serialization in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.886098672", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "40a2a8fc-37ab-41c3-975e-6175599b22b1", "sourceURL": "https://ktor.io/docs/server-websocket-serialization.html", "url": "https://ktor.io/docs/server-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I receive and send data in ktor?\n\nAssistant: To receive and send data in ktor, here's what you do:\n### Create a data class\nTo serialize/deserialize frames into/from an object, you need to create a data class, for example:\n```\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\nIf you use kotlinx.serialization, make sure that this class has the `@Serializable` annotation:\n```\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\n### Receive data\nTo receive and convert a content of a text frame, call the `receiveDeserialized` function that accepts a data class as a parameter:\n```\nwebSocket(\"/customer\") {\n    val customer = receiveDeserialized<Customer>()\n    println(\"A customer with id ${customer.id} is received by the server.\")\n}\n```\n\nTo receive deserialized frames from the incoming channel, use the `WebsocketContentConverter.deserialize` function. `WebsocketContentConverter` is available via the `WebSocketServerSession.converter` property.\n\n### Send data\nTo pass a data object in a text frame using a specified format, you can use the `sendSerialized` function:\n```\nwebSocket(\"/customer/1\") {\n    sendSerialized(Customer(1, \"Jane\", \"Smith\"))\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-serialization.html", "title": "WebSockets serialization in Ktor Server", "description": "This page covers how to serialize and deserialize WebSocket frames in Ktor Server using various formats such as JSON, XML, CBOR, and ProtoBuf.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:28:15", "type": "section_detail", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogTitle": "WebSockets serialization in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "twitter:creator": "@JetBrainsKtor", "og:title": "WebSockets serialization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "og:locale": "en_US", "title": "WebSockets serialization in Ktor Server | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:title": "WebSockets serialization in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.886098672", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "40a2a8fc-37ab-41c3-975e-6175599b22b1", "sourceURL": "https://ktor.io/docs/server-websocket-serialization.html", "url": "https://ktor.io/docs/server-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for WebSockets serialization in Ktor Server in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add JSON serialization dependency**:\n\n```yaml\nimplementation(\"io.ktor:ktor-serialization-kotlinx-json:$ktor_version\")\n```\n\nThis snippet shows you how to add json serialization dependency, which is an important aspect of websockets serialization in ktor server.\n\n**Register JSON serializer**:\n\n```yaml\ninstall(WebSockets) {\n    contentConverter = KotlinxWebsocketSerializationConverter(Json)\n}\n```\n\nThis snippet shows you how to register json serializer, which is an important aspect of websockets serialization in ktor server.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-serialization.html", "title": "WebSockets serialization in Ktor Server", "description": "This page covers how to serialize and deserialize WebSocket frames in Ktor Server using various formats such as JSON, XML, CBOR, and ProtoBuf.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:28:15", "type": "code_examples", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogTitle": "WebSockets serialization in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "twitter:creator": "@JetBrainsKtor", "og:title": "WebSockets serialization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "og:locale": "en_US", "title": "WebSockets serialization in Ktor Server | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:title": "WebSockets serialization in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.886098672", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "40a2a8fc-37ab-41c3-975e-6175599b22b1", "sourceURL": "https://ktor.io/docs/server-websocket-serialization.html", "url": "https://ktor.io/docs/server-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using WebSockets serialization in Ktor Server in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can find the full example here: server-websockets-serialization.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-websocket-serialization.html", "title": "WebSockets serialization in Ktor Server", "description": "This page covers how to serialize and deserialize WebSocket frames in Ktor Server using various formats such as JSON, XML, CBOR, and ProtoBuf.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 05:28:15", "type": "best_practices", "page_metadata": {"ogUrl": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "og:site_name": "Ktor Help", "og:type": "website", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "language": "en-US", "ogLocale": "en_US", "twitter:site": "@JetBrainsKtor", "og:description": "", "ogTitle": "WebSockets serialization in Ktor Server | Ktor", "og:url": "https://ktor.io/docs/3.1.1/server-websocket-serialization.html", "twitter:creator": "@JetBrainsKtor", "og:title": "WebSockets serialization in Ktor Server | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:card": "summary_large_image", "twitter:description": "", "og:locale": "en_US", "title": "WebSockets serialization in Ktor Server | Ktor Documentation", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "twitter:title": "WebSockets serialization in Ktor Server | Ktor", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "build-number": "707", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:05.886098672", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "scrapeId": "40a2a8fc-37ab-41c3-975e-6175599b22b1", "sourceURL": "https://ktor.io/docs/server-websocket-serialization.html", "url": "https://ktor.io/docs/server-websocket-serialization.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what RSA Keys Generation is in ktor?\n\nAssistant: Sure, I'd be happy to explain RSA Keys Generation in ktor.\n\n# RSA Keys Generation\n\nThis page covers the generation and usage of RSA keys for secure data transmission, digital signatures, and key exchange, particularly in the context of JSON Web Token (JWT) authentication using the RS256 algorithm.Here's a quick rundown of what this is about:\n\n## Introduction\n\nRSA (Rivest–Shamir–Adleman) is a widely used public-key crypto-system that enables secure data transmission, digital signatures, and key exchange. RS256, part of the RSA encryption algorithm, utilizes SHA-256 for hashing and a key (usually 2048-bit, 4096-bit or higher) to secure digital communications. In the realm of JSON Web Token authentication, RS256 plays a crucial role since the integrity and authenticity of JWTs can be verified through signature mechanisms, such as RS256, where a public/private key pair is employed. This ensures that the information contained within the token remains tamper-proof and trustworthy.\n\n## Generating an RSA private key\n\nTo generate a private key, you can use OpenSSL, ssh-keygen or another tool of your choice for creating authentication key pairs. For demonstration purposes, OpenSSL will be used. In a new terminal window, run the following command:\n\n```\nopenssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 > ktor.pk8\n```\n\nThe openssl genpkey command generates a private 2048-bit key using the RSA algorithm and stores it in the specified file, here ktor.pk8. The content of the file is Base64 encoded and thus, needs to be decoded before the public key can be derived.\n\n## Deriving the public key\n\nIn order to derive the public key from your previously generated private key, you will need to perform the following steps:\n\n1. Decode the private key.\n2. Extract the public key.\n3. Save the public key in PEM format.\n\nTo do this with OpenSSL, run the following command:\n\n```\nopenssl rsa -in ktor.pk8 -pubout | tee ktor.spki\n```\n\n- `openssl rsa`: This is the OpenSSL command for working with RSA keys. In this context, it is used to perform operations related to RSA keys.\n- `-in ktor.pk8`: This option specifies the input file ( ktor.pk8) from which OpenSSL should read the RSA private key.\n- `-pubout`: This option instructs OpenSSL to output the public key corresponding to the private key provided in the input file.\n- `|`: The pipe (|) symbol is used to redirect the output of the previous command (the public key generated by openssl rsa) to the tee command.\n- `tee ktor.spki`: tee is a command-line utility that reads from standard input and writes to both standard output and one or more files. This part of the command instructs tee to write the received input to a file named ktor.spki. So, the public key will be both displayed on the terminal and saved in the ktor.spki file.\n\n## Extracting the modulus & exponent attributes\n\nNow that you have your key-pair, you need to extract the e (exponent) and n (modulus) attributes of your public key, in order to use them in your jwks.json file. This requires the following steps:\n\n1. Read the public key from the .spki file you created.\n2. Display information about the key in a human-readable format.\n\nTo do this using OpenSSL, run the following command:\n\n```\nopenssl pkey -in ktor.spki -pubin -noout -text\n```\n\n- `pkey`: This is the OpenSSL command-line utility for processing private and public keys.\n- `-in ktor.spki`: Specifies the input file containing the public key in PEM format. In this case, the input file is ktor.spki.\n- `-pubin`: Indicates that the input file contains a public key. Without this option, OpenSSL would assume that the input file contains a private key.\n- `-noout`: This option prevents OpenSSL from outputting the encoded public key. The command will only display information about the public key, and the actual key won't be printed to the console.\n- `-text`: Requests that OpenSSL display the textual representation of the key. This includes details such as the key type, size, and the actual key data in human-readable form.\n\n## Converting and encoding the modulus and exponent attributes\n\nIn the previous step you extracted the n and e attributes needed for your jwks.json file. However, they are in hexadecimal format. You now need to convert the hexadecimal representation of the exponent and modulus to their respective Base64URL encodings.\n\n### Exponent\n\nThe exponent attribute has a HEX value of 0x10001. To convert the value to Base64URL, use the following command:\n\n```\necho 010001 | xxd -p -r | base64\n```\n\n- `echo 010001`: This part of the command uses the echo command to output the string \"010001\", which represents the public exponent (e) of the RSA key, to the standard output.\n- `|`: The `|` character is a pipe that takes the output from the preceding command and passes it as input to the following command.\n- `xxd -p -r`: This command is used to convert hexadecimal to binary. It takes the hexadecimal input and produces the corresponding binary output.\n- `| base64`: This part of the command takes the binary output from the previous step and encodes it in Base64 format using the base64 command.\n\n### Modulus\n\nFor the n attribute, you will use the tr utility to further process the hexadecimal representation of the modulus.\n\n```\necho \"b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:\n    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:\n    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:\n    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:\n    2b:d0:87:b4:01\" | tr -d \": \\n\" | xxd -p -r | base64 | tr +/ -_ | tr -d \"=\\n\"\n```\n\nThe output of the above command is:\n\n```\n$ echo \"b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:\n    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:\n    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:\n    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:\n    2b:d0:87:b4:01\" | tr -d \": \\n\" | xxd -p -r | base64 | tr +/ -_ | tr -d \"=\\n\"\ntfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ\n```\n\nBy leveraging the tr command properly, the modulus field has been encoded into a Base64URL string that you can use in your jwks.json file.\n\n## Populating the jwks.json file\n\nIn the previous steps, you gathered the following necessary information:\n\n1. An RSA key-pair.\n2. The modulus of the RSA public key in Base64URL format.\n3. The exponent of the RSA public key in Base64URL format.\n\nWith these at hand, you can now populate the jwks.json file of your Ktor project with the following attributes:\n\n- The e and n values with the Base64URL encoded values you produced in the previous steps.\n- A key id (in this case, the kid is derived from the sample project).\n- The kty attribute as RSA.\n\n```\n{\n  \"keys\": [\\\n    {\\\n      \"kty\": \"RSA\",\\\n      \"e\": \"AQAB\",\\\n      \"kid\": \"6f8856ed-9189-488f-9011-0ff4b6c08edc\",\\\n      \"n\":\"tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ\"\\\n    }\\\n  ]\n}\n```\n\nThe only remaining step is to specify your private key so that your Ktor project can use it for authentication.\n\n## Defining the private key\n\nWith your public key information set up, the last step is to provide your Ktor project with access to your private key.\n\nAssuming that you have extracted your private key (which you generated at the beginning in your .pk8 file) into an environment variable on your system, called jwt_pk in this case, your resources/application.conf file's jwt section should look similar to:\n\n```\njwt {\n  privateKey = ${jwt_pk}\n  issuer = \"http://0.0.0.0:8080/\"\n  audience = \"http://0.0.0.0:8080/login\"\n  realm = \"MyProject\"\n}\n```\n\nYour private key is considered sensitive information and should not be stored directly in code. Consider using environment variables or a secret store for sensitive data.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/rsa-keys-generation.html", "title": "RSA Keys Generation", "description": "This page covers the generation and usage of RSA keys for secure data transmission, digital signatures, and key exchange, particularly in the context of JSON Web Token (JWT) authentication using the RS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:28:55", "type": "overview", "page_metadata": {"built-on": "2025-02-26T14:01:04.358660764", "twitter:title": "RSA Keys Generation | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "title": "RSA Keys Generation | Ktor Documentation", "twitter:description": "", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "RSA Keys Generation | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:title": "RSA Keys Generation | Ktor", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "scrapeId": "61ed0d0a-8cac-4558-abc7-946a1fd81ea4", "sourceURL": "https://ktor.io/docs/rsa-keys-generation.html", "url": "https://ktor.io/docs/rsa-keys-generation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I introduction in ktor?\n\nAssistant: To introduction in ktor, here's what you do:\nRSA (Rivest–Shamir–Adleman) is a widely used public-key crypto-system that enables secure data transmission, digital signatures, and key exchange. RS256, part of the RSA encryption algorithm, utilizes SHA-256 for hashing and a key (usually 2048-bit, 4096-bit or higher) to secure digital communications. In the realm of JSON Web Token authentication, RS256 plays a crucial role since the integrity and authenticity of JWTs can be verified through signature mechanisms, such as RS256, where a public/private key pair is employed. This ensures that the information contained within the token remains tamper-proof and trustworthy..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/rsa-keys-generation.html", "title": "RSA Keys Generation", "description": "This page covers the generation and usage of RSA keys for secure data transmission, digital signatures, and key exchange, particularly in the context of JSON Web Token (JWT) authentication using the RS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:28:55", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:04.358660764", "twitter:title": "RSA Keys Generation | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "title": "RSA Keys Generation | Ktor Documentation", "twitter:description": "", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "RSA Keys Generation | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:title": "RSA Keys Generation | Ktor", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "scrapeId": "61ed0d0a-8cac-4558-abc7-946a1fd81ea4", "sourceURL": "https://ktor.io/docs/rsa-keys-generation.html", "url": "https://ktor.io/docs/rsa-keys-generation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I generating an rsa private key in ktor?\n\nAssistant: To generating an rsa private key in ktor, here's what you do:\nTo generate a private key, you can use OpenSSL, ssh-keygen or another tool of your choice for creating authentication key pairs. For demonstration purposes, OpenSSL will be used. In a new terminal window, run the following command:\n\n```\nopenssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 > ktor.pk8\n```\n\nThe openssl genpkey command generates a private 2048-bit key using the RSA algorithm and stores it in the specified file, here ktor.pk8. The content of the file is Base64 encoded and thus, needs to be decoded before the public key can be derived..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/rsa-keys-generation.html", "title": "RSA Keys Generation", "description": "This page covers the generation and usage of RSA keys for secure data transmission, digital signatures, and key exchange, particularly in the context of JSON Web Token (JWT) authentication using the RS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:28:55", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:04.358660764", "twitter:title": "RSA Keys Generation | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "title": "RSA Keys Generation | Ktor Documentation", "twitter:description": "", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "RSA Keys Generation | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:title": "RSA Keys Generation | Ktor", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "scrapeId": "61ed0d0a-8cac-4558-abc7-946a1fd81ea4", "sourceURL": "https://ktor.io/docs/rsa-keys-generation.html", "url": "https://ktor.io/docs/rsa-keys-generation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I deriving the public key in ktor?\n\nAssistant: To deriving the public key in ktor, here's what you do:\nIn order to derive the public key from your previously generated private key, you will need to perform the following steps:\n\n1. Decode the private key.\n2. Extract the public key.\n3. Save the public key in PEM format.\n\nTo do this with OpenSSL, run the following command:\n\n```\nopenssl rsa -in ktor.pk8 -pubout | tee ktor.spki\n```\n\n- `openssl rsa`: This is the OpenSSL command for working with RSA keys. In this context, it is used to perform operations related to RSA keys.\n- `-in ktor.pk8`: This option specifies the input file ( ktor.pk8) from which OpenSSL should read the RSA private key.\n- `-pubout`: This option instructs OpenSSL to output the public key corresponding to the private key provided in the input file.\n- `|`: The pipe (|) symbol is used to redirect the output of the previous command (the public key generated by openssl rsa) to the tee command.\n- `tee ktor.spki`: tee is a command-line utility that reads from standard input and writes to both standard output and one or more files. This part of the command instructs tee to write the received input to a file named ktor.spki. So, the public key will be both displayed on the terminal and saved in the ktor.spki file..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/rsa-keys-generation.html", "title": "RSA Keys Generation", "description": "This page covers the generation and usage of RSA keys for secure data transmission, digital signatures, and key exchange, particularly in the context of JSON Web Token (JWT) authentication using the RS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:28:55", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:04.358660764", "twitter:title": "RSA Keys Generation | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "title": "RSA Keys Generation | Ktor Documentation", "twitter:description": "", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "RSA Keys Generation | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:title": "RSA Keys Generation | Ktor", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "scrapeId": "61ed0d0a-8cac-4558-abc7-946a1fd81ea4", "sourceURL": "https://ktor.io/docs/rsa-keys-generation.html", "url": "https://ktor.io/docs/rsa-keys-generation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I extracting the modulus & exponent attributes in ktor?\n\nAssistant: To extracting the modulus & exponent attributes in ktor, here's what you do:\nNow that you have your key-pair, you need to extract the e (exponent) and n (modulus) attributes of your public key, in order to use them in your jwks.json file. This requires the following steps:\n\n1. Read the public key from the .spki file you created.\n2. Display information about the key in a human-readable format.\n\nTo do this using OpenSSL, run the following command:\n\n```\nopenssl pkey -in ktor.spki -pubin -noout -text\n```\n\n- `pkey`: This is the OpenSSL command-line utility for processing private and public keys.\n- `-in ktor.spki`: Specifies the input file containing the public key in PEM format. In this case, the input file is ktor.spki.\n- `-pubin`: Indicates that the input file contains a public key. Without this option, OpenSSL would assume that the input file contains a private key.\n- `-noout`: This option prevents OpenSSL from outputting the encoded public key. The command will only display information about the public key, and the actual key won't be printed to the console.\n- `-text`: Requests that OpenSSL display the textual representation of the key. This includes details such as the key type, size, and the actual key data in human-readable form..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/rsa-keys-generation.html", "title": "RSA Keys Generation", "description": "This page covers the generation and usage of RSA keys for secure data transmission, digital signatures, and key exchange, particularly in the context of JSON Web Token (JWT) authentication using the RS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:28:55", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:04.358660764", "twitter:title": "RSA Keys Generation | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "title": "RSA Keys Generation | Ktor Documentation", "twitter:description": "", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "RSA Keys Generation | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:title": "RSA Keys Generation | Ktor", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "scrapeId": "61ed0d0a-8cac-4558-abc7-946a1fd81ea4", "sourceURL": "https://ktor.io/docs/rsa-keys-generation.html", "url": "https://ktor.io/docs/rsa-keys-generation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I converting and encoding the modulus and exponent attributes in ktor?\n\nAssistant: To converting and encoding the modulus and exponent attributes in ktor, here's what you do:\nIn the previous step you extracted the n and e attributes needed for your jwks.json file. However, they are in hexadecimal format. You now need to convert the hexadecimal representation of the exponent and modulus to their respective Base64URL encodings.\n\n### Exponent\n\nThe exponent attribute has a HEX value of 0x10001. To convert the value to Base64URL, use the following command:\n\n```\necho 010001 | xxd -p -r | base64\n```\n\n- `echo 010001`: This part of the command uses the echo command to output the string \"010001\", which represents the public exponent (e) of the RSA key, to the standard output.\n- `|`: The `|` character is a pipe that takes the output from the preceding command and passes it as input to the following command.\n- `xxd -p -r`: This command is used to convert hexadecimal to binary. It takes the hexadecimal input and produces the corresponding binary output.\n- `| base64`: This part of the command takes the binary output from the previous step and encodes it in Base64 format using the base64 command.\n\n### Modulus\n\nFor the n attribute, you will use the tr utility to further process the hexadecimal representation of the modulus.\n\n```\necho \"b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:\n    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:\n    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:\n    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:\n    2b:d0:87:b4:01\" | tr -d \": \\n\" | xxd -p -r | base64 | tr +/ -_ | tr -d \"=\\n\"\n```\n\nThe output of the above command is:\n\n```\n$ echo \"b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:\n    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:\n    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:\n    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:\n    2b:d0:87:b4:01\" | tr -d \": \\n\" | xxd -p -r | base64 | tr +/ -_ | tr -d \"=\\n\"\ntfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ\n```\n\nBy leveraging the tr command properly, the modulus field has been encoded into a Base64URL string that you can use in your jwks.json file..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/rsa-keys-generation.html", "title": "RSA Keys Generation", "description": "This page covers the generation and usage of RSA keys for secure data transmission, digital signatures, and key exchange, particularly in the context of JSON Web Token (JWT) authentication using the RS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:28:55", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:04.358660764", "twitter:title": "RSA Keys Generation | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "title": "RSA Keys Generation | Ktor Documentation", "twitter:description": "", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "RSA Keys Generation | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:title": "RSA Keys Generation | Ktor", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "scrapeId": "61ed0d0a-8cac-4558-abc7-946a1fd81ea4", "sourceURL": "https://ktor.io/docs/rsa-keys-generation.html", "url": "https://ktor.io/docs/rsa-keys-generation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I populating the jwks.json file in ktor?\n\nAssistant: To populating the jwks.json file in ktor, here's what you do:\nIn the previous steps, you gathered the following necessary information:\n\n1. An RSA key-pair.\n2. The modulus of the RSA public key in Base64URL format.\n3. The exponent of the RSA public key in Base64URL format.\n\nWith these at hand, you can now populate the jwks.json file of your Ktor project with the following attributes:\n\n- The e and n values with the Base64URL encoded values you produced in the previous steps.\n- A key id (in this case, the kid is derived from the sample project).\n- The kty attribute as RSA.\n\n```\n{\n  \"keys\": [\\\n    {\\\n      \"kty\": \"RSA\",\\\n      \"e\": \"AQAB\",\\\n      \"kid\": \"6f8856ed-9189-488f-9011-0ff4b6c08edc\",\\\n      \"n\":\"tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ\"\\\n    }\\\n  ]\n}\n```\n\nThe only remaining step is to specify your private key so that your Ktor project can use it for authentication..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/rsa-keys-generation.html", "title": "RSA Keys Generation", "description": "This page covers the generation and usage of RSA keys for secure data transmission, digital signatures, and key exchange, particularly in the context of JSON Web Token (JWT) authentication using the RS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:28:55", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:04.358660764", "twitter:title": "RSA Keys Generation | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "title": "RSA Keys Generation | Ktor Documentation", "twitter:description": "", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "RSA Keys Generation | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:title": "RSA Keys Generation | Ktor", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "scrapeId": "61ed0d0a-8cac-4558-abc7-946a1fd81ea4", "sourceURL": "https://ktor.io/docs/rsa-keys-generation.html", "url": "https://ktor.io/docs/rsa-keys-generation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I defining the private key in ktor?\n\nAssistant: To defining the private key in ktor, here's what you do:\nWith your public key information set up, the last step is to provide your Ktor project with access to your private key.\n\nAssuming that you have extracted your private key (which you generated at the beginning in your .pk8 file) into an environment variable on your system, called jwt_pk in this case, your resources/application.conf file's jwt section should look similar to:\n\n```\njwt {\n  privateKey = ${jwt_pk}\n  issuer = \"http://0.0.0.0:8080/\"\n  audience = \"http://0.0.0.0:8080/login\"\n  realm = \"MyProject\"\n}\n```\n\nYour private key is considered sensitive information and should not be stored directly in code. Consider using environment variables or a secret store for sensitive data..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/rsa-keys-generation.html", "title": "RSA Keys Generation", "description": "This page covers the generation and usage of RSA keys for secure data transmission, digital signatures, and key exchange, particularly in the context of JSON Web Token (JWT) authentication using the RS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:28:55", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:04.358660764", "twitter:title": "RSA Keys Generation | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "title": "RSA Keys Generation | Ktor Documentation", "twitter:description": "", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "RSA Keys Generation | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:title": "RSA Keys Generation | Ktor", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "scrapeId": "61ed0d0a-8cac-4558-abc7-946a1fd81ea4", "sourceURL": "https://ktor.io/docs/rsa-keys-generation.html", "url": "https://ktor.io/docs/rsa-keys-generation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for RSA Keys Generation in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Generating an RSA private key**:\n\n```yaml\nopenssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 > ktor.pk8\n```\n\nThis snippet shows you how to generating an rsa private key, which is an important aspect of rsa keys generation.\n\n**Deriving the public key**:\n\n```yaml\nopenssl rsa -in ktor.pk8 -pubout | tee ktor.spki\n```\n\nThis snippet shows you how to deriving the public key, which is an important aspect of rsa keys generation.\n\n**Extracting the modulus & exponent attributes**:\n\n```yaml\nopenssl pkey -in ktor.spki -pubin -noout -text\n```\n\nThis snippet shows you how to extracting the modulus & exponent attributes, which is an important aspect of rsa keys generation.\n\n**Exponent conversion to Base64URL**:\n\n```yaml\necho 010001 | xxd -p -r | base64\n```\n\nThis snippet shows you how to exponent conversion to base64url, which is an important aspect of rsa keys generation.\n\n**Modulus conversion to Base64URL**:\n\n```yaml\necho \"b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:\n    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:\n    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:\n    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:\n    2b:d0:87:b4:01\" | tr -d \": \\n\" | xxd -p -r | base64 | tr +/ -_ | tr -d \"=\\n\"\n```\n\nThis snippet shows you how to modulus conversion to base64url, which is an important aspect of rsa keys generation.\n\n**Populating the jwks.json file**:\n\n```yaml\n{\n  \"keys\": [\\\n    {\\\n      \"kty\": \"RSA\",\\\n      \"e\": \"AQAB\",\\\n      \"kid\": \"6f8856ed-9189-488f-9011-0ff4b6c08edc\",\\\n      \"n\":\"tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ\"\\\n    }\\\n  ]\n}\n```\n\nThis snippet shows you how to populating the jwks.json file, which is an important aspect of rsa keys generation.\n\n", "metadata": {"source_url": "https://ktor.io/docs/rsa-keys-generation.html", "title": "RSA Keys Generation", "description": "This page covers the generation and usage of RSA keys for secure data transmission, digital signatures, and key exchange, particularly in the context of JSON Web Token (JWT) authentication using the RS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:28:55", "type": "code_examples", "page_metadata": {"built-on": "2025-02-26T14:01:04.358660764", "twitter:title": "RSA Keys Generation | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "title": "RSA Keys Generation | Ktor Documentation", "twitter:description": "", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "RSA Keys Generation | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:title": "RSA Keys Generation | Ktor", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "scrapeId": "61ed0d0a-8cac-4558-abc7-946a1fd81ea4", "sourceURL": "https://ktor.io/docs/rsa-keys-generation.html", "url": "https://ktor.io/docs/rsa-keys-generation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using RSA Keys Generation in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nFor production use, it is recommended that you choose a more modern alternative, such as ES256, that's based on more efficient, and secure cryptography compared to RSA.\n\nTo use the private key from the code example, navigate to the application.conf file within src/main/resources and extract the private key to a new .pk8 file.\n\nYour private key is considered sensitive information and should not be stored directly in code. Consider using environment variables or a secret store for sensitive data.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/rsa-keys-generation.html", "title": "RSA Keys Generation", "description": "This page covers the generation and usage of RSA keys for secure data transmission, digital signatures, and key exchange, particularly in the context of JSON Web Token (JWT) authentication using the RS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:28:55", "type": "best_practices", "page_metadata": {"built-on": "2025-02-26T14:01:04.358660764", "twitter:title": "RSA Keys Generation | Ktor", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "og:description": "", "title": "RSA Keys Generation | Ktor Documentation", "twitter:description": "", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "ogTitle": "RSA Keys Generation | Ktor", "ogLocale": "en_US", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "og:locale": "en_US", "og:url": "https://ktor.io/docs/3.1.1/rsa-keys-generation.html", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "og:title": "RSA Keys Generation | Ktor", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "scrapeId": "61ed0d0a-8cac-4558-abc7-946a1fd81ea4", "sourceURL": "https://ktor.io/docs/rsa-keys-generation.html", "url": "https://ktor.io/docs/rsa-keys-generation.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin DoubleReceive is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin DoubleReceive in ktor.\n\n# Server Plugin DoubleReceive\n\nThe DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception, useful for logging and handling request bodies in Ktor applications.Here's a quick rundown of what this is about:\n\n## Required dependencies\n\n`io.ktor:ktor-server-double-receive`\n\n## Code example\n\n[double-receive](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/double-receive)\n\n## Native server support\n\n✅\n\n## Overview\n\nThe DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception. This might be useful if a plugin is already consumed a request body, so you cannot receive it inside a route handler. For example, you can use DoubleReceive to log a request body using the CallLogging plugin and then receive a body one more time inside the post route handler.\n\n## Add dependencies\n\nTo use DoubleReceive, you need to include the ktor-server-double-receive artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-double-receive:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-double-receive:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-double-receive-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install DoubleReceive\n\nTo install the DoubleReceive plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install DoubleReceive...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.doublereceive.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DoubleReceive)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.doublereceive.*\n// ...\nfun Application.module() {\n    install(DoubleReceive)\n    // ...\n}\n```\n\nThe DoubleReceive plugin can also be installed to specific routes. This might be useful if you need different DoubleReceive configurations for different application resources.\n\n## Configure DoubleReceive\n\nWith the default configuration, DoubleReceive provides the ability to receive a request body as the following types:\n\n- ByteArray\n- String\n- Parameters\n- data classes used by the ContentNegotiation plugin\n\nBy default, DoubleReceive doesn't support:\n\n- receiving different types from the same request;\n- receiving a stream or channel.\n\nSet the cacheRawRequest property to false, if you do not need to receive different types from the same request or receive a stream or channel:\n```\ninstall(DoubleReceive) {\n    cacheRawRequest = false\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-double-receive.html", "title": "Server Plugin DoubleReceive", "description": "The DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception, useful for logging and handling request bodies in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:29:08", "type": "overview", "page_metadata": {"ogTitle": "DoubleReceive | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "DoubleReceive | Ktor", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "title": "DoubleReceive | Ktor Documentation", "ogLocale": "en_US", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-double-receive.html", "og:type": "website", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-double-receive.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "DoubleReceive | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.745580841", "build-number": "707", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "scrapeId": "99d646c2-4f44-4d31-9f4c-ff66adfb2aa3", "sourceURL": "https://ktor.io/docs/server-double-receive.html", "url": "https://ktor.io/docs/server-double-receive.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I required dependencies in ktor?\n\nAssistant: To required dependencies in ktor, here's what you do:\n`io.ktor:ktor-server-double-receive`.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-double-receive.html", "title": "Server Plugin DoubleReceive", "description": "The DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception, useful for logging and handling request bodies in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:29:08", "type": "section_detail", "page_metadata": {"ogTitle": "DoubleReceive | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "DoubleReceive | Ktor", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "title": "DoubleReceive | Ktor Documentation", "ogLocale": "en_US", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-double-receive.html", "og:type": "website", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-double-receive.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "DoubleReceive | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.745580841", "build-number": "707", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "scrapeId": "99d646c2-4f44-4d31-9f4c-ff66adfb2aa3", "sourceURL": "https://ktor.io/docs/server-double-receive.html", "url": "https://ktor.io/docs/server-double-receive.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I code example in ktor?\n\nAssistant: To code example in ktor, here's what you do:\n[double-receive](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/double-receive).\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-double-receive.html", "title": "Server Plugin DoubleReceive", "description": "The DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception, useful for logging and handling request bodies in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:29:08", "type": "section_detail", "page_metadata": {"ogTitle": "DoubleReceive | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "DoubleReceive | Ktor", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "title": "DoubleReceive | Ktor Documentation", "ogLocale": "en_US", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-double-receive.html", "og:type": "website", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-double-receive.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "DoubleReceive | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.745580841", "build-number": "707", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "scrapeId": "99d646c2-4f44-4d31-9f4c-ff66adfb2aa3", "sourceURL": "https://ktor.io/docs/server-double-receive.html", "url": "https://ktor.io/docs/server-double-receive.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I native server support in ktor?\n\nAssistant: To native server support in ktor, here's what you do:\n✅.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-double-receive.html", "title": "Server Plugin DoubleReceive", "description": "The DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception, useful for logging and handling request bodies in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:29:08", "type": "section_detail", "page_metadata": {"ogTitle": "DoubleReceive | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "DoubleReceive | Ktor", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "title": "DoubleReceive | Ktor Documentation", "ogLocale": "en_US", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-double-receive.html", "og:type": "website", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-double-receive.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "DoubleReceive | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.745580841", "build-number": "707", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "scrapeId": "99d646c2-4f44-4d31-9f4c-ff66adfb2aa3", "sourceURL": "https://ktor.io/docs/server-double-receive.html", "url": "https://ktor.io/docs/server-double-receive.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I overview in ktor?\n\nAssistant: To overview in ktor, here's what you do:\nThe DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception. This might be useful if a plugin is already consumed a request body, so you cannot receive it inside a route handler. For example, you can use DoubleReceive to log a request body using the CallLogging plugin and then receive a body one more time inside the post route handler..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-double-receive.html", "title": "Server Plugin DoubleReceive", "description": "The DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception, useful for logging and handling request bodies in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:29:08", "type": "section_detail", "page_metadata": {"ogTitle": "DoubleReceive | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "DoubleReceive | Ktor", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "title": "DoubleReceive | Ktor Documentation", "ogLocale": "en_US", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-double-receive.html", "og:type": "website", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-double-receive.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "DoubleReceive | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.745580841", "build-number": "707", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "scrapeId": "99d646c2-4f44-4d31-9f4c-ff66adfb2aa3", "sourceURL": "https://ktor.io/docs/server-double-receive.html", "url": "https://ktor.io/docs/server-double-receive.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use DoubleReceive, you need to include the ktor-server-double-receive artifact in the build script:\n\nGradle (Kotlin)\n```\nimplementation(\"io.ktor:ktor-server-double-receive:$ktor_version\")\n```\n\nGradle (Groovy)\n```\nimplementation \"io.ktor:ktor-server-double-receive:$ktor_version\"\n```\n\nMaven\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-double-receive-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-double-receive.html", "title": "Server Plugin DoubleReceive", "description": "The DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception, useful for logging and handling request bodies in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:29:08", "type": "section_detail", "page_metadata": {"ogTitle": "DoubleReceive | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "DoubleReceive | Ktor", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "title": "DoubleReceive | Ktor Documentation", "ogLocale": "en_US", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-double-receive.html", "og:type": "website", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-double-receive.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "DoubleReceive | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.745580841", "build-number": "707", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "scrapeId": "99d646c2-4f44-4d31-9f4c-ff66adfb2aa3", "sourceURL": "https://ktor.io/docs/server-double-receive.html", "url": "https://ktor.io/docs/server-double-receive.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install doublereceive in ktor?\n\nAssistant: To install doublereceive in ktor, here's what you do:\nTo install the DoubleReceive plugin to the application, pass it to the install function in the specified module. The code snippets below show how to install DoubleReceive...\n\n- ... inside the embeddedServer function call.\n- ... inside the explicitly defined module, which is an extension function of the Application class.\n\nembeddedServer\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.doublereceive.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DoubleReceive)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.doublereceive.*\n// ...\nfun Application.module() {\n    install(DoubleReceive)\n    // ...\n}\n```\n\nThe DoubleReceive plugin can also be installed to specific routes. This might be useful if you need different DoubleReceive configurations for different application resources..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-double-receive.html", "title": "Server Plugin DoubleReceive", "description": "The DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception, useful for logging and handling request bodies in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:29:08", "type": "section_detail", "page_metadata": {"ogTitle": "DoubleReceive | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "DoubleReceive | Ktor", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "title": "DoubleReceive | Ktor Documentation", "ogLocale": "en_US", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-double-receive.html", "og:type": "website", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-double-receive.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "DoubleReceive | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.745580841", "build-number": "707", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "scrapeId": "99d646c2-4f44-4d31-9f4c-ff66adfb2aa3", "sourceURL": "https://ktor.io/docs/server-double-receive.html", "url": "https://ktor.io/docs/server-double-receive.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure doublereceive in ktor?\n\nAssistant: To configure doublereceive in ktor, here's what you do:\nWith the default configuration, DoubleReceive provides the ability to receive a request body as the following types:\n\n- ByteArray\n- String\n- Parameters\n- data classes used by the ContentNegotiation plugin\n\nBy default, DoubleReceive doesn't support:\n\n- receiving different types from the same request;\n- receiving a stream or channel.\n\nSet the cacheRawRequest property to false, if you do not need to receive different types from the same request or receive a stream or channel:\n```\ninstall(DoubleReceive) {\n    cacheRawRequest = false\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-double-receive.html", "title": "Server Plugin DoubleReceive", "description": "The DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception, useful for logging and handling request bodies in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:29:08", "type": "section_detail", "page_metadata": {"ogTitle": "DoubleReceive | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "DoubleReceive | Ktor", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "title": "DoubleReceive | Ktor Documentation", "ogLocale": "en_US", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-double-receive.html", "og:type": "website", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-double-receive.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "DoubleReceive | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.745580841", "build-number": "707", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "scrapeId": "99d646c2-4f44-4d31-9f4c-ff66adfb2aa3", "sourceURL": "https://ktor.io/docs/server-double-receive.html", "url": "https://ktor.io/docs/server-double-receive.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin DoubleReceive in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Install DoubleReceive in embeddedServer**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.doublereceive.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(DoubleReceive)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install doublereceive in embeddedserver, which is an important aspect of server plugin doublereceive.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-double-receive.html", "title": "Server Plugin DoubleReceive", "description": "The DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception, useful for logging and handling request bodies in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:29:08", "type": "code_examples", "page_metadata": {"ogTitle": "DoubleReceive | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "DoubleReceive | Ktor", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "title": "DoubleReceive | Ktor Documentation", "ogLocale": "en_US", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-double-receive.html", "og:type": "website", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-double-receive.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "DoubleReceive | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.745580841", "build-number": "707", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "scrapeId": "99d646c2-4f44-4d31-9f4c-ff66adfb2aa3", "sourceURL": "https://ktor.io/docs/server-double-receive.html", "url": "https://ktor.io/docs/server-double-receive.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin DoubleReceive in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe DoubleReceive plugin uses an experimental API that is expected to evolve in the upcoming updates with potentially breaking changes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-double-receive.html", "title": "Server Plugin DoubleReceive", "description": "The DoubleReceive plugin provides the ability to receive a request body several times with no RequestAlreadyConsumedException exception, useful for logging and handling request bodies in Ktor applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 05:29:08", "type": "best_practices", "page_metadata": {"ogTitle": "DoubleReceive | Ktor", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "twitter:card": "summary_large_image", "twitter:site": "@JetBrainsKtor", "twitter:title": "DoubleReceive | Ktor", "twitter:creator": "@JetBrainsKtor", "og:locale": "en_US", "title": "DoubleReceive | Ktor Documentation", "ogLocale": "en_US", "og:description": "", "og:url": "https://ktor.io/docs/3.1.1/server-double-receive.html", "og:type": "website", "ogSiteName": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/server-double-receive.html", "ogDescription": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:title": "DoubleReceive | Ktor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "built-on": "2025-02-26T14:01:06.745580841", "build-number": "707", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "language": "en-US", "scrapeId": "99d646c2-4f44-4d31-9f4c-ff66adfb2aa3", "sourceURL": "https://ktor.io/docs/server-double-receive.html", "url": "https://ktor.io/docs/server-double-receive.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Configuration in a file is in ktor?\n\nAssistant: Sure, I'd be happy to explain Configuration in a file in ktor.\n\n# Configuration in a file\n\nKtor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.Here's a quick rundown of what this is about:\n\n## Overview\n\nIf you use EngineMain to start a server, Ktor loads configuration settings automatically from a file named application.* located in the resources directory. Two configuration formats are supported:\n\n- HOCON (application.conf)\n- YAML (application.yaml)\n\n> ### note\n>\n> To use a YAML configuration file, you need to add the ktor-server-config-yaml dependency.\n\nA configuration file should contain at least modules to load specified using the ktor.application.modules property, for example:\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\n```\nktor:\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n``\n\nIn this case, Ktor calls the Application.module function in the Application.kt file below:\n\n```\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondText(\"Hello, world!\")\n        }\n    }\n}\n```\n\nBesides modules to load, you can configure various server settings, including predefined (such as a port or host, SSL settings, etc.) and custom ones. Let's take a look at several examples.\n\n## Basic configuration\n\nIn the example below, a server listening port is set to 8080 using the ktor.deployment.port property.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: 8080\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n``\n\n## Engine configuration\n\nIf you use EngineMain, you can specify options common for all engines within the ktor.deployment group.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        connectionGroupSize: 2\n        workerGroupSize: 5\n        callGroupSize: 10\n        shutdownGracePeriod: 2000\n        shutdownTimeout: 3000\n``\n\n## Netty\n\nYou can also configure Netty-specific options in a configuration file within the ktor.deployment group:\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        maxInitialLineLength = 2048\n        maxHeaderSize = 1024\n        maxChunkSize = 42\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        maxInitialLineLength: 2048\n        maxHeaderSize: 1024\n        maxChunkSize: 42\n``\n\n## SSL configuration\n\nThe example below enables Ktor to listen on the 8443 SSL port and specifies the required SSL settings in a separate security block.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n        sslPort = 8443\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n\n    security {\n        ssl {\n            keyStore = keystore.jks\n            keyAlias = sampleAlias\n            keyStorePassword = foobar\n            privateKeyPassword = foobar\n        }\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: 8080\n        sslPort: 8443\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n\n    security:\n        ssl:\n            keyStore: keystore.jks\n            keyAlias: sampleAlias\n            keyStorePassword: foobar\n            privateKeyPassword: foobar\n``\n\n## Custom configuration\n\nApart from specifying the predefined properties, Ktor allows you to keep custom settings in the configuration file. The configuration files below contain a custom jwt group used to keep JWT settings.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n    }\n\n    application {\n        modules = [ com.example.ApplicationKt.main ]\n    }\n}\n\njwt {\n    secret = \"secret\"\n    issuer = \"http://0.0.0.0:8080/\"\n    audience = \"http://0.0.0.0:8080/hello\"\n    realm = \"Access to 'hello'\"\n}\n```\n\n```\nktor:\n    deployment:\n        port: 8080\n    application:\n        modules:\n            - com.example.ApplicationKt.main\n\njwt:\n    secret: \"secret\"\n    issuer: \"http://0.0.0.0:8080/\"\n    audience: \"http://0.0.0.0:8080/hello\"\n    realm: \"Access to 'hello'\"\n``\n\nYou can read and handle such settings in code.\n\n## Predefined properties\n\nBelow is a list of predefined settings that you can use inside a configuration file.\n\n- ktor.deployment.host: A host address. Example: `0.0.0.0`\n- ktor.deployment.port: A listening port. You can set this property to `0` to run the server on a random port. Example: `8080`, `0`\n- ktor.deployment.sslPort: A listening SSL port. You can set this property to `0` to run the server on a random port. Example: `8443`, `0`\n\n> ### note\n>\n> Note that SSL requires additional options listed below.\n\n- ktor.deployment.watch: Watch paths used for auto-reloading.\n- ktor.deployment.rootPath: A servlet context path. Example: `/`\n- ktor.deployment.shutdown.url: A shutdown URL. Note that this option uses the Shutdown URL plugin.\n- ktor.deployment.shutdownGracePeriod: A maximum time in milliseconds for a server to stop accepting new requests.\n- ktor.deployment.shutdownTimeout: A maximum time in milliseconds to wait until the server stops completely.\n- ktor.deployment.callGroupSize: A minimum size of a thread pool used to process application calls.\n- ktor.deployment.connectionGroupSize: A count of threads used to accept new connections and start call processing.\n- ktor.deployment.workerGroupSize: A size of the event group for processing connections, parsing messages, and doing the engine's internal work.\n\n## Environment variables\n\nIn a configuration file, you can substitute parameters with environment variables by using the ${ENV}/ $ENV syntax. For example, you can assign the PORT environment variable to the ktor.deployment.port property in the following way:\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = ${PORT}\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: $PORT\n``\n\nIn this case, an environment variable value will be used to specify a listening port. If the PORT environment variable variable doesn't exist at runtime, you can provide a default port value as follows:\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n        port = ${?PORT}\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: \"$PORT:8080\"\n``\n\n## Read configuration in code\n\nKtor allows you to access property values specified inside a configuration file in code. For example, if you've specified the ktor.deployment.port property,...\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: 8080\n``\n\n... you can access the application's configuration using ApplicationEnvironment.config and get the required property value in the following way:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    val port = environment.config.propertyOrNull(\"ktor.deployment.port\")?.getString() ?: \"8080\"\n    routing {\n        get {\n            call.respondText(\"Listening on port $port\")\n        }\n    }\n}\n``\n\nThis is especially useful when you keep custom settings in a configuration file and need to access its values.\n\n## Command line\n\nIf you use EngineMain to create a server, you can run a packaged application from a command line and override the required server parameters by passing corresponding command-line arguments. For example, you can override a port specified in a configuration file in the following way:\n\n```\njava -jar sample-app.jar -port=8080\n```\n\nThe available command-line options are listed below:\n\n-jar: A path to JAR file.\n-config: A path to a custom configuration file used instead of application.conf/application.yaml from resources. Example: `java -jar sample-app.jar -config=anotherfile.conf`\n\nNote: You can pass multiple values. `java -jar sample-app.jar -config=config-base.conf -config=config-dev.conf`. In this case all configs will be merged, where values from configs on the right will have priority.\n\n-host: A host address.\n-port: A listening port.\n-watch: Watch paths used for auto-reloading.\n\n[SSL-specific](https://ktor.io/docs/server-ssl.html) options:\n\n-sslPort: A listening SSL port.\n-sslKeyStore: An SSL key store.\n\nIf you need to override a predefined property that doesn't have a corresponding command-line option, use the -P flag, for example:\n\n```\njava -jar sample-app.jar -P:ktor.deployment.callGroupSize=7\n```\n\nYou can also use the -P flag to override a custom property.\n\n## Example: How to specify an environment using a custom property\n\nYou might want to do different things depending on whether a server is running locally or on a production machine. To achieve this, you can add a custom property in application.conf/application.yaml and initialize it with a dedicated environment variable whose value depends on whether a server is running locally or on production. In the example below, the KTOR_ENV environment variable is assigned to a custom ktor.environment property.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    environment = ${?KTOR_ENV}\n}\n```\n\n```\nktor:\n    environment: $?KTOR_ENV\n``\n\nYou can access the ktor.environment value at runtime by reading configuration in code and perform the required actions:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    val env = environment.config.propertyOrNull(\"ktor.environment\")?.getString()\n    routing {\n        get {\n            call.respondText(when (env) {\n                \"dev\" -> \"Development\"\n                \"prod\" -> \"Production\"\n                else -> \"...\"\n            })\n        }\n    }\n}\n``\n\nYou can find the full example here: engine-main-custom-environment.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "overview", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I overview in ktor?\n\nAssistant: To overview in ktor, here's what you do:\nIf you use EngineMain to start a server, Ktor loads configuration settings automatically from a file named application.* located in the resources directory. Two configuration formats are supported:\n\n- HOCON (application.conf)\n- YAML (application.yaml)\n\n> ### note\n>\n> To use a YAML configuration file, you need to add the ktor-server-config-yaml dependency.\n\nA configuration file should contain at least modules to load specified using the ktor.application.modules property, for example:\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\n```\nktor:\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n``\n\nIn this case, Ktor calls the Application.module function in the Application.kt file below:\n\n```\npackage com.example\n\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    routing {\n        get(\"/\") {\n            call.respondText(\"Hello, world!\")\n        }\n    }\n}\n```\n\nBesides modules to load, you can configure various server settings, including predefined (such as a port or host, SSL settings, etc.) and custom ones. Let's take a look at several examples..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I basic configuration in ktor?\n\nAssistant: To basic configuration in ktor, here's what you do:\nIn the example below, a server listening port is set to 8080 using the ktor.deployment.port property.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: 8080\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I engine configuration in ktor?\n\nAssistant: To engine configuration in ktor, here's what you do:\nIf you use EngineMain, you can specify options common for all engines within the ktor.deployment group.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        connectionGroupSize: 2\n        workerGroupSize: 5\n        callGroupSize: 10\n        shutdownGracePeriod: 2000\n        shutdownTimeout: 3000\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I netty in ktor?\n\nAssistant: To netty in ktor, here's what you do:\nYou can also configure Netty-specific options in a configuration file within the ktor.deployment group:\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        maxInitialLineLength = 2048\n        maxHeaderSize = 1024\n        maxChunkSize = 42\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        maxInitialLineLength: 2048\n        maxHeaderSize: 1024\n        maxChunkSize: 42\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I ssl configuration in ktor?\n\nAssistant: To ssl configuration in ktor, here's what you do:\nThe example below enables Ktor to listen on the 8443 SSL port and specifies the required SSL settings in a separate security block.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n        sslPort = 8443\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n\n    security {\n        ssl {\n            keyStore = keystore.jks\n            keyAlias = sampleAlias\n            keyStorePassword = foobar\n            privateKeyPassword = foobar\n        }\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: 8080\n        sslPort: 8443\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n\n    security:\n        ssl:\n            keyStore: keystore.jks\n            keyAlias: sampleAlias\n            keyStorePassword: foobar\n            privateKeyPassword: foobar\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I custom configuration in ktor?\n\nAssistant: To custom configuration in ktor, here's what you do:\nApart from specifying the predefined properties, Ktor allows you to keep custom settings in the configuration file. The configuration files below contain a custom jwt group used to keep JWT settings.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n    }\n\n    application {\n        modules = [ com.example.ApplicationKt.main ]\n    }\n}\n\njwt {\n    secret = \"secret\"\n    issuer = \"http://0.0.0.0:8080/\"\n    audience = \"http://0.0.0.0:8080/hello\"\n    realm = \"Access to 'hello'\"\n}\n```\n\n```\nktor:\n    deployment:\n        port: 8080\n    application:\n        modules:\n            - com.example.ApplicationKt.main\n\njwt:\n    secret: \"secret\"\n    issuer: \"http://0.0.0.0:8080/\"\n    audience: \"http://0.0.0.0:8080/hello\"\n    realm: \"Access to 'hello'\"\n``\n\nYou can read and handle such settings in code..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I predefined properties in ktor?\n\nAssistant: To predefined properties in ktor, here's what you do:\nBelow is a list of predefined settings that you can use inside a configuration file.\n\n- ktor.deployment.host: A host address. Example: `0.0.0.0`\n- ktor.deployment.port: A listening port. You can set this property to `0` to run the server on a random port. Example: `8080`, `0`\n- ktor.deployment.sslPort: A listening SSL port. You can set this property to `0` to run the server on a random port. Example: `8443`, `0`\n\n> ### note\n>\n> Note that SSL requires additional options listed below.\n\n- ktor.deployment.watch: Watch paths used for auto-reloading.\n- ktor.deployment.rootPath: A servlet context path. Example: `/`\n- ktor.deployment.shutdown.url: A shutdown URL. Note that this option uses the Shutdown URL plugin.\n- ktor.deployment.shutdownGracePeriod: A maximum time in milliseconds for a server to stop accepting new requests.\n- ktor.deployment.shutdownTimeout: A maximum time in milliseconds to wait until the server stops completely.\n- ktor.deployment.callGroupSize: A minimum size of a thread pool used to process application calls.\n- ktor.deployment.connectionGroupSize: A count of threads used to accept new connections and start call processing.\n- ktor.deployment.workerGroupSize: A size of the event group for processing connections, parsing messages, and doing the engine's internal work..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I environment variables in ktor?\n\nAssistant: To environment variables in ktor, here's what you do:\nIn a configuration file, you can substitute parameters with environment variables by using the ${ENV}/ $ENV syntax. For example, you can assign the PORT environment variable to the ktor.deployment.port property in the following way:\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = ${PORT}\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: $PORT\n``\n\nIn this case, an environment variable value will be used to specify a listening port. If the PORT environment variable variable doesn't exist at runtime, you can provide a default port value as follows:\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n        port = ${?PORT}\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: \"$PORT:8080\"\n``.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I read configuration in code in ktor?\n\nAssistant: To read configuration in code in ktor, here's what you do:\nKtor allows you to access property values specified inside a configuration file in code. For example, if you've specified the ktor.deployment.port property,...\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    deployment {\n        port = 8080\n    }\n}\n```\n\n```\nktor:\n    deployment:\n        port: 8080\n``\n\n... you can access the application's configuration using ApplicationEnvironment.config and get the required property value in the following way:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    val port = environment.config.propertyOrNull(\"ktor.deployment.port\")?.getString() ?: \"8080\"\n    routing {\n        get {\n            call.respondText(\"Listening on port $port\")\n        }\n    }\n}\n``\n\nThis is especially useful when you keep custom settings in a configuration file and need to access its values..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I command line in ktor?\n\nAssistant: To command line in ktor, here's what you do:\nIf you use EngineMain to create a server, you can run a packaged application from a command line and override the required server parameters by passing corresponding command-line arguments. For example, you can override a port specified in a configuration file in the following way:\n\n```\njava -jar sample-app.jar -port=8080\n```\n\nThe available command-line options are listed below:\n\n-jar: A path to JAR file.\n-config: A path to a custom configuration file used instead of application.conf/application.yaml from resources. Example: `java -jar sample-app.jar -config=anotherfile.conf`\n\nNote: You can pass multiple values. `java -jar sample-app.jar -config=config-base.conf -config=config-dev.conf`. In this case all configs will be merged, where values from configs on the right will have priority.\n\n-host: A host address.\n-port: A listening port.\n-watch: Watch paths used for auto-reloading.\n\n[SSL-specific](https://ktor.io/docs/server-ssl.html) options:\n\n-sslPort: A listening SSL port.\n-sslKeyStore: An SSL key store.\n\nIf you need to override a predefined property that doesn't have a corresponding command-line option, use the -P flag, for example:\n\n```\njava -jar sample-app.jar -P:ktor.deployment.callGroupSize=7\n```\n\nYou can also use the -P flag to override a custom property..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example: how to specify an environment using a custom property in ktor?\n\nAssistant: To example: how to specify an environment using a custom property in ktor, here's what you do:\nYou might want to do different things depending on whether a server is running locally or on a production machine. To achieve this, you can add a custom property in application.conf/application.yaml and initialize it with a dedicated environment variable whose value depends on whether a server is running locally or on production. In the example below, the KTOR_ENV environment variable is assigned to a custom ktor.environment property.\n\napplication.conf\n\napplication.yaml\n\n```\nktor {\n    environment = ${?KTOR_ENV}\n}\n```\n\n```\nktor:\n    environment: $?KTOR_ENV\n``\n\nYou can access the ktor.environment value at runtime by reading configuration in code and perform the required actions:\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    val env = environment.config.propertyOrNull(\"ktor.environment\")?.getString()\n    routing {\n        get {\n            call.respondText(when (env) {\n                \"dev\" -> \"Development\"\n                \"prod\" -> \"Production\"\n                else -> \"...\"\n            })\n        }\n    }\n}\n``\n\nYou can find the full example here: engine-main-custom-environment..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Configuration in a file in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic configuration example**:\n\n```yaml\napplication.conf\n\n```\nktor {\n    deployment {\n        port = 8080\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n}\n```\n\napplication.yaml\n\n```\nktor:\n    deployment:\n        port: 8080\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n```\n```\n\nThis snippet shows you how to basic configuration example, which is an important aspect of configuration in a file.\n\n**Engine configuration example**:\n\n```yaml\napplication.conf\n\n```\nktor {\n    deployment {\n        connectionGroupSize = 2\n        workerGroupSize = 5\n        callGroupSize = 10\n        shutdownGracePeriod = 2000\n        shutdownTimeout = 3000\n    }\n}\n```\n\napplication.yaml\n\n```\nktor:\n    deployment:\n        connectionGroupSize: 2\n        workerGroupSize: 5\n        callGroupSize: 10\n        shutdownGracePeriod: 2000\n        shutdownTimeout: 3000\n```\n```\n\nThis snippet shows you how to engine configuration example, which is an important aspect of configuration in a file.\n\n**Netty configuration example**:\n\n```yaml\napplication.conf\n\n```\nktor {\n    deployment {\n        maxInitialLineLength = 2048\n        maxHeaderSize = 1024\n        maxChunkSize = 42\n    }\n}\n```\n\napplication.yaml\n\n```\nktor:\n    deployment:\n        maxInitialLineLength: 2048\n        maxHeaderSize: 1024\n        maxChunkSize: 42\n```\n```\n\nThis snippet shows you how to netty configuration example, which is an important aspect of configuration in a file.\n\n**SSL configuration example**:\n\n```yaml\napplication.conf\n\n```\nktor {\n    deployment {\n        port = 8080\n        sslPort = 8443\n    }\n    application {\n        modules = [ com.example.ApplicationKt.module ]\n    }\n\n    security {\n        ssl {\n            keyStore = keystore.jks\n            keyAlias = sampleAlias\n            keyStorePassword = foobar\n            privateKeyPassword = foobar\n        }\n    }\n}\n```\n\napplication.yaml\n\n```\nktor:\n    deployment:\n        port: 8080\n        sslPort: 8443\n    application:\n        modules:\n            - com.example.ApplicationKt.module\n\n    security:\n        ssl:\n            keyStore: keystore.jks\n            keyAlias: sampleAlias\n            keyStorePassword: foobar\n            privateKeyPassword: foobar\n```\n```\n\nThis snippet shows you how to ssl configuration example, which is an important aspect of configuration in a file.\n\n**Custom configuration example**:\n\n```yaml\napplication.conf\n\n```\nktor {\n    deployment {\n        port = 8080\n    }\n\n    application {\n        modules = [ com.example.ApplicationKt.main ]\n    }\n}\n\njwt {\n    secret = \"secret\"\n    issuer = \"http://0.0.0.0:8080/\"\n    audience = \"http://0.0.0.0:8080/hello\"\n    realm = \"Access to 'hello'\"\n}\n```\n\napplication.yaml\n\n```\nktor:\n    deployment:\n        port: 8080\n    application:\n        modules:\n            - com.example.ApplicationKt.main\n\njwt:\n    secret: \"secret\"\n    issuer: \"http://0.0.0.0:8080/\"\n    audience: \"http://0.0.0.0:8080/hello\"\n    realm: \"Access to 'hello'\"\n```\n```\n\nThis snippet shows you how to custom configuration example, which is an important aspect of configuration in a file.\n\n**Read configuration in code example**:\n\n```yaml\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\nfun Application.module() {\n    val port = environment.config.propertyOrNull(\"ktor.deployment.port\")?.getString() ?: \"8080\"\n    routing {\n        get {\n            call.respondText(\"Listening on port $port\")\n        }\n    }\n}\n```\n```\n\nThis snippet shows you how to read configuration in code example, which is an important aspect of configuration in a file.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "code_examples", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Configuration in a file in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo use a YAML configuration file, you need to add the ktor-server-config-yaml dependency.\n\nNote that sensitive data (like secret keys, database connection settings, and so on) should not be stored in the configuration file as plain text. Consider using environment variables to specify such parameters.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-configuration-file.html", "title": "Configuration in a file", "description": "Ktor allows you to configure various server parameters, such as a host address and port, modules to load, and so on. The configuration depends on the way you used to create a server - embeddedServer or EngineMain.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 05:33:03", "type": "best_practices", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogDescription": "", "og:url": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "ogTitle": "Configuration in a file | Ktor", "og:site_name": "Ktor Help", "twitter:site": "@JetBrainsKtor", "twitter:title": "Configuration in a file | Ktor", "og:title": "Configuration in a file | Ktor", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:locale": "en_US", "built-on": "2025-02-26T14:01:05.530413633", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-configuration-file.html", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "ogLocale": "en_US", "og:description": "", "title": "Configuration in a file | Ktor Documentation", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogSiteName": "Ktor Help", "language": "en-US", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "scrapeId": "612e713b-17fc-4470-9a02-8d0c81a0a4f6", "sourceURL": "https://ktor.io/docs/server-configuration-file.html", "url": "https://ktor.io/docs/server-configuration-file.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Server Plugin Conditional headers is in ktor?\n\nAssistant: Sure, I'd be happy to explain Server Plugin Conditional headers in ktor.\n\n# Server Plugin Conditional headers\n\nThis page covers the ConditionalHeaders plugin in Ktor, which avoids sending the body of content if it has not changed since the last request by using specific headers.Here's a quick rundown of what this is about:\n\n## Server Plugin Conditional headers\n\nThe ConditionalHeaders plugin avoids sending the body of content if it has not changed since the last request. This is achieved by using the following headers:\n\n- The `Last-Modified` response header contains a resource modification time. For example, if the client request contains the `If-Modified-Since` value, Ktor will send a full response only if a resource has been modified after the given date. Note that for static files Ktor appends the `Last-Modified` header automatically after installing `ConditionalHeaders`.\n\n- The `Etag` response header is an identifier for a specific resource version. For instance, if the client request contains the `If-None-Match` value, Ktor won't send a full response in case this value matches the `Etag`. You can specify the `Etag` value when configuring `ConditionalHeaders`.\n\n## Add dependencies\n\nTo use `ConditionalHeaders`, you need to include the `ktor-server-conditional-headers` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-conditional-headers:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-conditional-headers:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-conditional-headers-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\n## Install ConditionalHeaders\n\nTo install the `ConditionalHeaders` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `ConditionalHeaders`...\n\n- ... inside the `embeddedServer` function call.\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.conditionalheaders.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(ConditionalHeaders)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.conditionalheaders.*\n// ...\nfun Application.module() {\n    install(ConditionalHeaders)\n    // ...\n}\n```\n\nThe `ConditionalHeaders` plugin can also be installed to specific routes. This might be useful if you need different `ConditionalHeaders` configurations for different application resources.\n\n## Configure headers\n\nTo configure `ConditionalHeaders`, you need to call the version function inside the install block. This function provides access to a list of resource versions for a given `ApplicationCall` and `OutgoingContent`. You can specify the required versions by using the `EntityTagVersion` and `LastModifiedVersion` class objects.\n\nThe code snippet below shows how to add a `Etag` and `Last-Modified` headers for CSS:\n\n```\ninstall(ConditionalHeaders) {\n    val file = File(\"src/main/kotlin/com/example/Application.kt\")\n    version { call, outgoingContent ->\n        when (outgoingContent.contentType?.withoutParameters()) {\n            ContentType.Text.CSS -> listOf(\n                EntityTagVersion(file.lastModified().hashCode().toString()),\n                LastModifiedVersion(Date(file.lastModified()))\n            )\n            else -> emptyList()\n        }\n    }\n}\n```\n\nYou can find the full example here: conditional-headers.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/server-conditional-headers.html", "title": "Server Plugin Conditional headers", "description": "This page covers the ConditionalHeaders plugin in Ktor, which avoids sending the body of content if it has not changed since the last request by using specific headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:33:21", "type": "overview", "page_metadata": {"built-on": "2025-02-26T14:01:05.089679275", "ogLocale": "en_US", "ogTitle": "Conditional headers | Ktor", "og:title": "Conditional headers | Ktor", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Conditional headers | Ktor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Conditional headers | Ktor Documentation", "og:locale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "61554457-d38f-4440-a2d9-29c00e207770", "sourceURL": "https://ktor.io/docs/server-conditional-headers.html", "url": "https://ktor.io/docs/server-conditional-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I server plugin conditional headers in ktor?\n\nAssistant: To server plugin conditional headers in ktor, here's what you do:\nThe ConditionalHeaders plugin avoids sending the body of content if it has not changed since the last request. This is achieved by using the following headers:\n\n- The `Last-Modified` response header contains a resource modification time. For example, if the client request contains the `If-Modified-Since` value, Ktor will send a full response only if a resource has been modified after the given date. Note that for static files Ktor appends the `Last-Modified` header automatically after installing `ConditionalHeaders`.\n\n- The `Etag` response header is an identifier for a specific resource version. For instance, if the client request contains the `If-None-Match` value, Ktor won't send a full response in case this value matches the `Etag`. You can specify the `Etag` value when configuring `ConditionalHeaders`..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-conditional-headers.html", "title": "Server Plugin Conditional headers", "description": "This page covers the ConditionalHeaders plugin in Ktor, which avoids sending the body of content if it has not changed since the last request by using specific headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:33:21", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:05.089679275", "ogLocale": "en_US", "ogTitle": "Conditional headers | Ktor", "og:title": "Conditional headers | Ktor", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Conditional headers | Ktor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Conditional headers | Ktor Documentation", "og:locale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "61554457-d38f-4440-a2d9-29c00e207770", "sourceURL": "https://ktor.io/docs/server-conditional-headers.html", "url": "https://ktor.io/docs/server-conditional-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I add dependencies in ktor?\n\nAssistant: To add dependencies in ktor, here's what you do:\nTo use `ConditionalHeaders`, you need to include the `ktor-server-conditional-headers` artifact in the build script:\n\nGradle (Kotlin)\n\n```\nimplementation(\"io.ktor:ktor-server-conditional-headers:$ktor_version\")\n```\n\nGradle (Groovy)\n\n```\nimplementation \"io.ktor:ktor-server-conditional-headers:$ktor_version\"\n```\n\nMaven\n\n```\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-conditional-headers-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-conditional-headers.html", "title": "Server Plugin Conditional headers", "description": "This page covers the ConditionalHeaders plugin in Ktor, which avoids sending the body of content if it has not changed since the last request by using specific headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:33:21", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:05.089679275", "ogLocale": "en_US", "ogTitle": "Conditional headers | Ktor", "og:title": "Conditional headers | Ktor", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Conditional headers | Ktor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Conditional headers | Ktor Documentation", "og:locale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "61554457-d38f-4440-a2d9-29c00e207770", "sourceURL": "https://ktor.io/docs/server-conditional-headers.html", "url": "https://ktor.io/docs/server-conditional-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I install conditionalheaders in ktor?\n\nAssistant: To install conditionalheaders in ktor, here's what you do:\nTo install the `ConditionalHeaders` plugin to the application, pass it to the `install` function in the specified module. The code snippets below show how to install `ConditionalHeaders`...\n\n- ... inside the `embeddedServer` function call.\n- ... inside the explicitly defined `module`, which is an extension function of the `Application` class.\n\nembeddedServer\n\n```\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.conditionalheaders.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(ConditionalHeaders)\n        // ...\n    }.start(wait = true)\n}\n```\n\nmodule\n\n```\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.conditionalheaders.*\n// ...\nfun Application.module() {\n    install(ConditionalHeaders)\n    // ...\n}\n```\n\nThe `ConditionalHeaders` plugin can also be installed to specific routes. This might be useful if you need different `ConditionalHeaders` configurations for different application resources..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-conditional-headers.html", "title": "Server Plugin Conditional headers", "description": "This page covers the ConditionalHeaders plugin in Ktor, which avoids sending the body of content if it has not changed since the last request by using specific headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:33:21", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:05.089679275", "ogLocale": "en_US", "ogTitle": "Conditional headers | Ktor", "og:title": "Conditional headers | Ktor", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Conditional headers | Ktor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Conditional headers | Ktor Documentation", "og:locale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "61554457-d38f-4440-a2d9-29c00e207770", "sourceURL": "https://ktor.io/docs/server-conditional-headers.html", "url": "https://ktor.io/docs/server-conditional-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure headers in ktor?\n\nAssistant: To configure headers in ktor, here's what you do:\nTo configure `ConditionalHeaders`, you need to call the version function inside the install block. This function provides access to a list of resource versions for a given `ApplicationCall` and `OutgoingContent`. You can specify the required versions by using the `EntityTagVersion` and `LastModifiedVersion` class objects.\n\nThe code snippet below shows how to add a `Etag` and `Last-Modified` headers for CSS:\n\n```\ninstall(ConditionalHeaders) {\n    val file = File(\"src/main/kotlin/com/example/Application.kt\")\n    version { call, outgoingContent ->\n        when (outgoingContent.contentType?.withoutParameters()) {\n            ContentType.Text.CSS -> listOf(\n                EntityTagVersion(file.lastModified().hashCode().toString()),\n                LastModifiedVersion(Date(file.lastModified()))\n            )\n            else -> emptyList()\n        }\n    }\n}\n```\n\nYou can find the full example here: conditional-headers..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/server-conditional-headers.html", "title": "Server Plugin Conditional headers", "description": "This page covers the ConditionalHeaders plugin in Ktor, which avoids sending the body of content if it has not changed since the last request by using specific headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:33:21", "type": "section_detail", "page_metadata": {"built-on": "2025-02-26T14:01:05.089679275", "ogLocale": "en_US", "ogTitle": "Conditional headers | Ktor", "og:title": "Conditional headers | Ktor", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Conditional headers | Ktor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Conditional headers | Ktor Documentation", "og:locale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "61554457-d38f-4440-a2d9-29c00e207770", "sourceURL": "https://ktor.io/docs/server-conditional-headers.html", "url": "https://ktor.io/docs/server-conditional-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Server Plugin Conditional headers in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Add dependencies**:\n\n```yaml\nimplementation(\"io.ktor:ktor-server-conditional-headers:$ktor_version\")\n```\n\nThis snippet shows you how to add dependencies, which is an important aspect of server plugin conditional headers.\n\n**Add dependencies (Gradle Groovy)**:\n\n```yaml\nimplementation \"io.ktor:ktor-server-conditional-headers:$ktor_version\"\n```\n\nThis snippet shows you how to add dependencies (gradle groovy), which is an important aspect of server plugin conditional headers.\n\n**Add dependencies (Maven)**:\n\n```yaml\n<dependency>\n    <groupId>io.ktor</groupId>\n    <artifactId>ktor-server-conditional-headers-jvm</artifactId>\n    <version>${ktor_version}</version>\n</dependency>\n```\n\nThis snippet shows you how to add dependencies (maven), which is an important aspect of server plugin conditional headers.\n\n**Install ConditionalHeaders (embeddedServer)**:\n\n```yaml\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.application.*\nimport io.ktor.server.plugins.conditionalheaders.*\n\nfun main() {\n    embeddedServer(Netty, port = 8080) {\n        install(ConditionalHeaders)\n        // ...\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to install conditionalheaders (embeddedserver), which is an important aspect of server plugin conditional headers.\n\n", "metadata": {"source_url": "https://ktor.io/docs/server-conditional-headers.html", "title": "Server Plugin Conditional headers", "description": "This page covers the ConditionalHeaders plugin in Ktor, which avoids sending the body of content if it has not changed since the last request by using specific headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:33:21", "type": "code_examples", "page_metadata": {"built-on": "2025-02-26T14:01:05.089679275", "ogLocale": "en_US", "ogTitle": "Conditional headers | Ktor", "og:title": "Conditional headers | Ktor", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Conditional headers | Ktor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Conditional headers | Ktor Documentation", "og:locale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "61554457-d38f-4440-a2d9-29c00e207770", "sourceURL": "https://ktor.io/docs/server-conditional-headers.html", "url": "https://ktor.io/docs/server-conditional-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Server Plugin Conditional headers in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe `ConditionalHeaders` plugin can be installed to specific routes for different configurations.\n\nUse the `version` function to specify resource versions for `ApplicationCall` and `OutgoingContent`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/server-conditional-headers.html", "title": "Server Plugin Conditional headers", "description": "This page covers the ConditionalHeaders plugin in Ktor, which avoids sending the body of content if it has not changed since the last request by using specific headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 05:33:21", "type": "best_practices", "page_metadata": {"built-on": "2025-02-26T14:01:05.089679275", "ogLocale": "en_US", "ogTitle": "Conditional headers | Ktor", "og:title": "Conditional headers | Ktor", "ogDescription": "", "twitter:site": "@JetBrainsKtor", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "language": "en-US", "twitter:title": "Conditional headers | Ktor", "twitter:creator": "@JetBrainsKtor", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "build-number": "707", "ogUrl": "https://ktor.io/docs/3.1.1/server-conditional-headers.html", "og:site_name": "Ktor Help", "twitter:description": "", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Conditional headers | Ktor Documentation", "og:locale": "en_US", "og:type": "website", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "scrapeId": "61554457-d38f-4440-a2d9-29c00e207770", "sourceURL": "https://ktor.io/docs/server-conditional-headers.html", "url": "https://ktor.io/docs/server-conditional-headers.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Migrating from 2.2.x to 3.0.x is in ktor?\n\nAssistant: Sure, I'd be happy to explain Migrating from 2.2.x to 3.0.x in ktor.\n\n# Migrating from 2.2.x to 3.0.x\n\nThis guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.Here's a quick rundown of what this is about:\n\n## Ktor Server\n\nSeveral design changes have been introduced to improve configurability and provide a more defined separation between the ApplicationEngine, ApplicationEnvironment and Application instances.\n\nBefore v3.0.0, ApplicationEngine managed ApplicationEnvironment, which in turn managed Application.\n\nIn the current design, however, Application is responsible for creating, owning, and initiating both ApplicationEngine and ApplicationEnvironment.\n\nThis restructuring comes with the following set of breaking changes:\n\n- [ApplicationEngineEnvironmentBuilder and applicationEngineEnvironment classes are renamed](https://ktor.io/docs/migrating-3.html#renamed-classes).\n- [start() and stop() methods are removed from ApplicationEngineEnvironment](https://ktor.io/docs/migrating-3.html#ApplicationEnvironment).\n- [commandLineEnvironment() is removed](https://ktor.io/docs/migrating-3.html#CommandLineConfig).\n- [Introduction of ServerConfigBuilder](https://ktor.io/docs/migrating-3.html#ServerConfigBuilder).\n- [embeddedServer() returns EmbeddedServer](https://ktor.io/docs/migrating-3.html#EmbeddedServer) instead of ApplicationEngine.\n\nThese changes will impact existing code that relies on the previous model.\n\n## Renamed classes\n\n| Package | 2.x.x | 3.0.x |\n| --- | --- | --- |\n| io.ktor:ktor-server-core | ApplicationEngineEnvironmentBuilder | ApplicationEnvironmentBuilder |\n| io.ktor:ktor-server-core | applicationEngineEnvironment | applicationEnvironment |\n\n## start() and stop() methods are removed from ApplicationEngineEnvironment\n\nWith the merge of ApplicationEngineEnvironment to [ApplicationEnvironment](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-environment/index.html), the start() and stop() methods are now only accessible through [ApplicationEngine](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-application-engine/index.html).\n\n| 2.x.x | 3.0.x |\n| --- | --- |\n| ApplicationEngineEnvironment.start() | ApplicationEngine.start() |\n| ApplicationEngineEnvironment.stop() | ApplicationEngine.stop() |\n\nAdditionally, in the following table you can see the list of removed properties and their current corresponding ownership:\n\n| 2.x.x | 3.0.x |\n| --- | --- |\n| ApplicationEngineEnvironment.connectors | ApplicationEngine.Configuration.connectors |\n| ApplicationEnvironment.developmentMode | Application.developmentMode |\n| ApplicationEnvironment.monitor | Application.monitor |\n| ApplicationEnvironment.parentCoroutineContext | Application.parentCoroutineContext |\n| ApplicationEnvironment.rootPath | Application.rootPath |\n\n## The ownership changes can be illustrated through the following example\n\n#### 2.2.x\n\n```code-comparer__code\nimport io.ktor.server.application.*\nimport io.ktor.server.cio.*\nimport io.ktor.server.engine.*\nimport org.slf4j.helpers.NOPLogger\n\nfun defaultServer(module: Application.() -> Unit) =\n  embeddedServer(CIO,\n    environment = applicationEngineEnvironment {\n      log = NOPLogger.NOP_LOGGER\n      connector {\n          port = 8080\n      }\n      module(module)\n    }\n  )\n```\n\n#### 3.0.x\n\n```code-comparer__code\nimport io.ktor.server.application.*\nimport io.ktor.server.cio.*\nimport io.ktor.server.engine.*\nimport org.slf4j.helpers.NOPLogger\n\nfun defaultServer(module: Application.() -> Unit) =\n  embeddedServer(CIO,\n    environment = applicationEnvironment { log = NOPLogger.NOP_LOGGER },\n    configure = {\n      connector {\n          port = 8080\n      }\n    },\n    module\n  )\n```\n\n## commandLineEnvironment() is removed\n\nThe commandLineEnvironment() function, used to create an ApplicationEngineEnvironment instance from command line arguments has been removed in Ktor 3.0.0. Instead, you can use the [CommandLineConfig](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-command-line-config.html) function to parse command-line arguments into a configuration object.\n\nTo migrate your application from commandLineEnvironment to CommandLineConfig, replace commandLineEnvironment() with a configure block as shown below.\n\n## 2.2.x\n\n```code-comparer__code\nfun main(args: Array<String>) {\n    embeddedServer(Netty, commandLineEnvironment(args) {\n        connector { port = 8080 }\n        module {\n            routing {\n                get(\"/\") {\n                    call.respondText(\"Hello, world!\")\n                }\n            }\n        }\n    }) {\n        requestReadTimeoutSeconds = 5\n        responseWriteTimeoutSeconds = 5\n    }.start(wait = true)\n}\n```\n\n## 3.0.x\n\n```code-comparer__code\nfun main(args: Array<String>) {\n    embeddedServer(\n        factory = Netty,\n        configure = {\n            val cliConfig = CommandLineConfig(args)\n            takeFrom(cliConfig.engineConfig)\n            loadCommonConfiguration(cliConfig.rootConfig.environment.config)\n        }\n    ) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\n## Introduction of ServerConfigBuilder\n\nA new entity, [ServerConfigBuilder](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-server-config-builder/index.html), has been introduced for configuring server properties and replaces the previous configuration mechanism of ApplicationPropertiesBuilder. ServerConfigBuilder is used to build instances of the [ServerConfig](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-server-config/index.html) class, which now holds modules, paths, and environment details previously managed by ApplicationProperties.\n\nThe following table summarizes the key changes:\n\n| Package | 2.x.x | 3.0.x |\n| --- | --- | --- |\n| io.ktor:ktor-server-core | ApplicationProperties | ServerConfig |\n| io.ktor:ktor-server-core | ApplciationPropertiesBuilder | ServerConfigBuilder |\n\nAdditionally, in the embeddedServer() function, the applicationProperties attribute has been renamed to rootConfig to reflect this new configuration approach.\n\n## When using embeddedServer(), replace the applicationProperties attribute with rootConfig\n\nHere's an example of using the serverConfig block to configure a server with developmentMode explicitly set to true:\n\n```\nfun main(args: Array<String>) {\n    embeddedServer(Netty,\n        serverConfig {\n            developmentMode = true\n            module(Application::module)\n        },\n        configure = {\n            connector { port = 12345 }\n        }\n    ).start(wait = true)\n}\n```\n\n## Introduction of EmbeddedServer\n\nThe class [EmbeddedServer](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-embedded-server/index.html) is introduced and used to replace ApplicationEngine as a return type of the embeddedServer() function.\n\nFor more details about the model change, see [issue KTOR-3857 on YouTrack](https://youtrack.jetbrains.com/issue/KTOR-3857/Environment-Engine-Application-Design).\n\n## Testing\n\n#### withTestApplication and withApplication have been removed\n\nThe withTestApplication and withApplication functions, [previously deprecated in the 2.0.0 release](https://ktor.io/docs/migration-to-20x.html#testing-api), have now been removed from the ktor-server-test-host package.\n\nInstead, use the testApplication function with the existing [Ktor client](https://ktor.io/docs/client-create-and-configure.html) instance to make requests to your server and verify the results.\n\n## In the test below, the handleRequest function is replaced with the client.get request\n\n#### 1.x.x\n\n```code-comparer__code\n@Test\nfun testRootLegacyApi() {\n    withTestApplication(Application::module) {\n        handleRequest(HttpMethod.Get, \"/\").apply {\n            assertEquals(HttpStatusCode.OK, response.status())\n            assertEquals(\"Hello, world!\", response.content)\n        }\n    }\n}\n```\n\n## 3.0.x\n\n```code-comparer__code\n@Test\nfun testRoot() = testApplication {\n    val response = client.get(\"/\")\n    assertEquals(HttpStatusCode.OK, response.status)\n    assertEquals(\"Hello, world!\", response.bodyAsText())\n}\n```\n\n## For more information, see Testing in Ktor Server\n\n(https://ktor.io/docs/server-testing.html).\n\n## TestApplication module loading\n\nTestApplication no longer automatically loads modules from a configuration file ( e.g. application.conf). Instead, you must [explicitly load your modules](https://ktor.io/docs/migrating-3.html#explicit-module-loading) within the testApplication function or [load the configuration file](https://ktor.io/docs/migrating-3.html#configure-env) manually.\n\n## Explicit module loading\n\nTo explicitly load modules, use the application function within testApplication. This approach allows you to manually specify which modules to load, providing greater control over your test setup.\n\n## 2.2.x\n\n```code-comparer__code\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\nclass ApplicationTest {\n  @Test\n  fun testRoot() = testApplication {\n    client.get(\"/\").apply {\n      assertEquals(HttpStatusCode.OK, status)\n      assertEquals(\"Hello World!\", bodyAsText())\n    }\n  }\n}\n```\n\n## 3.0.x\n\n```code-comparer__code\nimport com.example.plugins.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\nclass ApplicationTest {\n  @Test\n  fun testRoot() = testApplication {\n    application {\n      configureRouting()\n    }\n    client.get(\"/\").apply {\n      assertEquals(HttpStatusCode.OK, status)\n      assertEquals(\"Hello World!\", bodyAsText())\n    }\n  }\n}\n```\n\n## Load modules from a configuration file\n\nIf you want to load modules from a configuration file, use the environment function to specify the configuration file for your test.\n\n## @Test\n\nfun testHello() = testApplication {\n    environment {\n        config = ApplicationConfig(\"application-custom.conf\")\n    }\n}\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "overview", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I ktor server in ktor?\n\nAssistant: To ktor server in ktor, here's what you do:\nSeveral design changes have been introduced to improve configurability and provide a more defined separation between the ApplicationEngine, ApplicationEnvironment and Application instances.\n\nBefore v3.0.0, ApplicationEngine managed ApplicationEnvironment, which in turn managed Application.\n\nIn the current design, however, Application is responsible for creating, owning, and initiating both ApplicationEngine and ApplicationEnvironment.\n\nThis restructuring comes with the following set of breaking changes:\n\n- [ApplicationEngineEnvironmentBuilder and applicationEngineEnvironment classes are renamed](https://ktor.io/docs/migrating-3.html#renamed-classes).\n- [start() and stop() methods are removed from ApplicationEngineEnvironment](https://ktor.io/docs/migrating-3.html#ApplicationEnvironment).\n- [commandLineEnvironment() is removed](https://ktor.io/docs/migrating-3.html#CommandLineConfig).\n- [Introduction of ServerConfigBuilder](https://ktor.io/docs/migrating-3.html#ServerConfigBuilder).\n- [embeddedServer() returns EmbeddedServer](https://ktor.io/docs/migrating-3.html#EmbeddedServer) instead of ApplicationEngine.\n\nThese changes will impact existing code that relies on the previous model..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I renamed classes in ktor?\n\nAssistant: To renamed classes in ktor, here's what you do:\n| Package | 2.x.x | 3.0.x |\n| --- | --- | --- |\n| io.ktor:ktor-server-core | ApplicationEngineEnvironmentBuilder | ApplicationEnvironmentBuilder |\n| io.ktor:ktor-server-core | applicationEngineEnvironment | applicationEnvironment |.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I start() and stop() methods are removed from applicationengineenvironment in ktor?\n\nAssistant: To start() and stop() methods are removed from applicationengineenvironment in ktor, here's what you do:\nWith the merge of ApplicationEngineEnvironment to [ApplicationEnvironment](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-environment/index.html), the start() and stop() methods are now only accessible through [ApplicationEngine](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-application-engine/index.html).\n\n| 2.x.x | 3.0.x |\n| --- | --- |\n| ApplicationEngineEnvironment.start() | ApplicationEngine.start() |\n| ApplicationEngineEnvironment.stop() | ApplicationEngine.stop() |\n\nAdditionally, in the following table you can see the list of removed properties and their current corresponding ownership:\n\n| 2.x.x | 3.0.x |\n| --- | --- |\n| ApplicationEngineEnvironment.connectors | ApplicationEngine.Configuration.connectors |\n| ApplicationEnvironment.developmentMode | Application.developmentMode |\n| ApplicationEnvironment.monitor | Application.monitor |\n| ApplicationEnvironment.parentCoroutineContext | Application.parentCoroutineContext |\n| ApplicationEnvironment.rootPath | Application.rootPath |.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I the ownership changes can be illustrated through the following example in ktor?\n\nAssistant: To the ownership changes can be illustrated through the following example in ktor, here's what you do:\n#### 2.2.x\n\n```code-comparer__code\nimport io.ktor.server.application.*\nimport io.ktor.server.cio.*\nimport io.ktor.server.engine.*\nimport org.slf4j.helpers.NOPLogger\n\nfun defaultServer(module: Application.() -> Unit) =\n  embeddedServer(CIO,\n    environment = applicationEngineEnvironment {\n      log = NOPLogger.NOP_LOGGER\n      connector {\n          port = 8080\n      }\n      module(module)\n    }\n  )\n```\n\n#### 3.0.x\n\n```code-comparer__code\nimport io.ktor.server.application.*\nimport io.ktor.server.cio.*\nimport io.ktor.server.engine.*\nimport org.slf4j.helpers.NOPLogger\n\nfun defaultServer(module: Application.() -> Unit) =\n  embeddedServer(CIO,\n    environment = applicationEnvironment { log = NOPLogger.NOP_LOGGER },\n    configure = {\n      connector {\n          port = 8080\n      }\n    },\n    module\n  )\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I commandlineenvironment() is removed in ktor?\n\nAssistant: To commandlineenvironment() is removed in ktor, here's what you do:\nThe commandLineEnvironment() function, used to create an ApplicationEngineEnvironment instance from command line arguments has been removed in Ktor 3.0.0. Instead, you can use the [CommandLineConfig](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-command-line-config.html) function to parse command-line arguments into a configuration object.\n\nTo migrate your application from commandLineEnvironment to CommandLineConfig, replace commandLineEnvironment() with a configure block as shown below..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I 2.2.x in ktor?\n\nAssistant: To 2.2.x in ktor, here's what you do:\n```code-comparer__code\nfun main(args: Array<String>) {\n    embeddedServer(Netty, commandLineEnvironment(args) {\n        connector { port = 8080 }\n        module {\n            routing {\n                get(\"/\") {\n                    call.respondText(\"Hello, world!\")\n                }\n            }\n        }\n    }) {\n        requestReadTimeoutSeconds = 5\n        responseWriteTimeoutSeconds = 5\n    }.start(wait = true)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I 3.0.x in ktor?\n\nAssistant: To 3.0.x in ktor, here's what you do:\n```code-comparer__code\nfun main(args: Array<String>) {\n    embeddedServer(\n        factory = Netty,\n        configure = {\n            val cliConfig = CommandLineConfig(args)\n            takeFrom(cliConfig.engineConfig)\n            loadCommonConfiguration(cliConfig.rootConfig.environment.config)\n        }\n    ) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I introduction of serverconfigbuilder in ktor?\n\nAssistant: To introduction of serverconfigbuilder in ktor, here's what you do:\nA new entity, [ServerConfigBuilder](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-server-config-builder/index.html), has been introduced for configuring server properties and replaces the previous configuration mechanism of ApplicationPropertiesBuilder. ServerConfigBuilder is used to build instances of the [ServerConfig](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-server-config/index.html) class, which now holds modules, paths, and environment details previously managed by ApplicationProperties.\n\nThe following table summarizes the key changes:\n\n| Package | 2.x.x | 3.0.x |\n| --- | --- | --- |\n| io.ktor:ktor-server-core | ApplicationProperties | ServerConfig |\n| io.ktor:ktor-server-core | ApplciationPropertiesBuilder | ServerConfigBuilder |\n\nAdditionally, in the embeddedServer() function, the applicationProperties attribute has been renamed to rootConfig to reflect this new configuration approach..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I when using embeddedserver(), replace the applicationproperties attribute with rootconfig in ktor?\n\nAssistant: To when using embeddedserver(), replace the applicationproperties attribute with rootconfig in ktor, here's what you do:\nHere's an example of using the serverConfig block to configure a server with developmentMode explicitly set to true:\n\n```\nfun main(args: Array<String>) {\n    embeddedServer(Netty,\n        serverConfig {\n            developmentMode = true\n            module(Application::module)\n        },\n        configure = {\n            connector { port = 12345 }\n        }\n    ).start(wait = true)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I introduction of embeddedserver in ktor?\n\nAssistant: To introduction of embeddedserver in ktor, here's what you do:\nThe class [EmbeddedServer](https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-embedded-server/index.html) is introduced and used to replace ApplicationEngine as a return type of the embeddedServer() function.\n\nFor more details about the model change, see [issue KTOR-3857 on YouTrack](https://youtrack.jetbrains.com/issue/KTOR-3857/Environment-Engine-Application-Design)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I testing in ktor?\n\nAssistant: To testing in ktor, here's what you do:\n#### withTestApplication and withApplication have been removed\n\nThe withTestApplication and withApplication functions, [previously deprecated in the 2.0.0 release](https://ktor.io/docs/migration-to-20x.html#testing-api), have now been removed from the ktor-server-test-host package.\n\nInstead, use the testApplication function with the existing [Ktor client](https://ktor.io/docs/client-create-and-configure.html) instance to make requests to your server and verify the results..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I in the test below, the handlerequest function is replaced with the client.get request in ktor?\n\nAssistant: To in the test below, the handlerequest function is replaced with the client.get request in ktor, here's what you do:\n#### 1.x.x\n\n```code-comparer__code\n@Test\nfun testRootLegacyApi() {\n    withTestApplication(Application::module) {\n        handleRequest(HttpMethod.Get, \"/\").apply {\n            assertEquals(HttpStatusCode.OK, response.status())\n            assertEquals(\"Hello, world!\", response.content)\n        }\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I 3.0.x in ktor?\n\nAssistant: To 3.0.x in ktor, here's what you do:\n```code-comparer__code\n@Test\nfun testRoot() = testApplication {\n    val response = client.get(\"/\")\n    assertEquals(HttpStatusCode.OK, response.status)\n    assertEquals(\"Hello, world!\", response.bodyAsText())\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I for more information, see testing in ktor server in ktor?\n\nAssistant: To for more information, see testing in ktor server in ktor, here's what you do:\n(https://ktor.io/docs/server-testing.html)..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I testapplication module loading in ktor?\n\nAssistant: To testapplication module loading in ktor, here's what you do:\nTestApplication no longer automatically loads modules from a configuration file ( e.g. application.conf). Instead, you must [explicitly load your modules](https://ktor.io/docs/migrating-3.html#explicit-module-loading) within the testApplication function or [load the configuration file](https://ktor.io/docs/migrating-3.html#configure-env) manually..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I explicit module loading in ktor?\n\nAssistant: To explicit module loading in ktor, here's what you do:\nTo explicitly load modules, use the application function within testApplication. This approach allows you to manually specify which modules to load, providing greater control over your test setup..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I 2.2.x in ktor?\n\nAssistant: To 2.2.x in ktor, here's what you do:\n```code-comparer__code\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\nclass ApplicationTest {\n  @Test\n  fun testRoot() = testApplication {\n    client.get(\"/\").apply {\n      assertEquals(HttpStatusCode.OK, status)\n      assertEquals(\"Hello World!\", bodyAsText())\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I 3.0.x in ktor?\n\nAssistant: To 3.0.x in ktor, here's what you do:\n```code-comparer__code\nimport com.example.plugins.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.http.*\nimport io.ktor.server.testing.*\nimport kotlin.test.*\n\nclass ApplicationTest {\n  @Test\n  fun testRoot() = testApplication {\n    application {\n      configureRouting()\n    }\n    client.get(\"/\").apply {\n      assertEquals(HttpStatusCode.OK, status)\n      assertEquals(\"Hello World!\", bodyAsText())\n    }\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I load modules from a configuration file in ktor?\n\nAssistant: To load modules from a configuration file in ktor, here's what you do:\nIf you want to load modules from a configuration file, use the environment function to specify the configuration file for your test..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I @test in ktor?\n\nAssistant: To @test in ktor, here's what you do:\nfun testHello() = testApplication {\n    environment {\n        config = ApplicationConfig(\"application-custom.conf\")\n    }\n}.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "section_detail", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Migrating from 2.2.x to 3.0.x in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**2.2.x**:\n\n```yaml\nfun main(args: Array<String>) {\n    embeddedServer(Netty, commandLineEnvironment(args) {\n        connector { port = 8080 }\n        module {\n            routing {\n                get(\"/\") {\n                    call.respondText(\"Hello, world!\")\n                }\n            }\n        }\n    }) {\n        requestReadTimeoutSeconds = 5\n        responseWriteTimeoutSeconds = 5\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to 2.2.x, which is an important aspect of migrating from 2.2.x to 3.0.x.\n\n**3.0.x**:\n\n```yaml\nfun main(args: Array<String>) {\n    embeddedServer(\n        factory = Netty,\n        configure = {\n            val cliConfig = CommandLineConfig(args)\n            takeFrom(cliConfig.engineConfig)\n            loadCommonConfiguration(cliConfig.rootConfig.environment.config)\n        }\n    ) {\n        routing {\n            get(\"/\") {\n                call.respondText(\"Hello, world!\")\n            }\n        }\n    }.start(wait = true)\n}\n```\n\nThis snippet shows you how to 3.0.x, which is an important aspect of migrating from 2.2.x to 3.0.x.\n\n**2.2.x**:\n\n```yaml\nfun Application.main() {\n    routing {\n        post(\"/upload\") {\n            val multipart = call.receiveMultipart()\n            multipart.forEachPart { partData ->\n                if (partData is PartData.FileItem) {\n                    var fileName = partData.originalFileName as String\n                    val file = File(\"uploads/$fileName\")\n                    file.writeBytes(partData.streamProvider().readBytes())\n                }\n                // ...\n            }\n        }\n    }\n}\n```\n\nThis snippet shows you how to 2.2.x, which is an important aspect of migrating from 2.2.x to 3.0.x.\n\n**3.0.x**:\n\n```yaml\nfun Application.main() {\n    routing {\n        post(\"/upload\") {\n            val multipart = call.receiveMultipart()\n            multipart.forEachPart { partData ->\n                if (partData is PartData.FileItem) {\n                    var fileName = partData.originalFileName as String\n                    val file = File(\"uploads/$fileName\")\n                    partData.provider().copyAndClose(file.writeChannel())\n                }\n                // ...\n            }\n        }\n    }\n}\n```\n\nThis snippet shows you how to 3.0.x, which is an important aspect of migrating from 2.2.x to 3.0.x.\n\n", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "code_examples", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Migrating from 2.2.x to 3.0.x in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure that your dependencies are updated accordingly when migrating to Ktor 3.0.x.\n\nReplace deprecated methods and properties with their new counterparts as outlined in the migration guide.\n\nUse the new ServerConfigBuilder for configuring server properties instead of the old ApplicationPropertiesBuilder.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/migrating-3.html", "title": "Migrating from 2.2.x to 3.0.x", "description": "This guide provides instructions on how to migrate your Ktor application from the 2.2.x version to 3.0.x.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-03-01 05:35:22", "type": "best_practices", "page_metadata": {"twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:description": "", "ogTitle": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:title": "Migrating from 2.2.x to 3.0.x | Ktor", "twitter:description": "", "ogSiteName": "Ktor Help", "og:locale": "en_US", "built-on": "2025-02-26T14:01:07.39696282", "og:url": "https://ktor.io/docs/3.1.1/migrating-3.html", "twitter:site": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "ogDescription": "", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "build-number": "707", "title": "Migrating from 2.2.x to 3.0.x | Ktor Documentation", "language": "en-US", "ogLocale": "en_US", "og:title": "Migrating from 2.2.x to 3.0.x | Ktor", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "ogUrl": "https://ktor.io/docs/3.1.1/migrating-3.html", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@JetBrainsKtor", "scrapeId": "63979c92-f88d-4f4c-862a-f37305ea802c", "sourceURL": "https://ktor.io/docs/migrating-3.html", "url": "https://ktor.io/docs/migrating-3.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Bearer authentication in Ktor Client is in ktor?\n\nAssistant: Sure, I'd be happy to explain Bearer authentication in Ktor Client in ktor.\n\n# Bearer authentication in Ktor Client\n\nThis page covers how to implement bearer authentication in Ktor Client, including configuration, token management, and using bearer tokens to access protected resources.Here's a quick rundown of what this is about:\n\n## Configure bearer authentication\n\nA Ktor client allows you to configure a token to be sent in the `Authorization` header using the `Bearer` scheme. You can also specify the logic for refreshing a token if the old one is invalid. To configure the `bearer` provider, follow the steps below:\n\n1. Call the `bearer` function inside the `install` block.\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.auth.*\n//...\nval client = HttpClient(CIO) {\n       install(Auth) {\n          bearer {\n             // Configure bearer authentication\n          }\n       }\n}\n```\n\n2. Configure how to obtain the initial access and refresh tokens using the `loadTokens` callback. This callback is intended to load cached tokens from a local storage and return them as the `BearerTokens` instance.\n\n```kotlin\ninstall(Auth) {\n       bearer {\n           loadTokens {\n               // Load tokens from a local storage and return them as the 'BearerTokens' instance\n               BearerTokens(\"abc123\", \"xyz111\")\n           }\n       }\n}\n```\n\nThe `abc123` access token is sent with each [request](https://ktor.io/docs/client-requests.html) in the `Authorization` header using the `Bearer` scheme:\n\n```http\nGET http://localhost:8080/\nAuthorization: Bearer abc123\n```\n\n3. Specify how to obtain a new token if the old one is invalid using `refreshTokens`.\n\n```kotlin\ninstall(Auth) {\n       bearer {\n           // Load tokens ...\n           refreshTokens { // this: RefreshTokensParams\n               // Refresh tokens and return them as the 'BearerTokens' instance\n               BearerTokens(\"def456\", \"xyz111\")\n           }\n       }\n}\n```\n\nThis callback works as follows:\n\na. The client makes a request to a protected resource using an invalid access token and gets a `401` (Unauthorized) response.\n\nb. The client calls `refreshTokens` automatically to obtain new tokens.\n\nc. The client makes one more request to a protected resource automatically using a new token this time.\n\n4. Optionally, specify a condition for sending credentials without waiting for the `401` (Unauthorized) response. For example, you can check whether a request is made to a specified host.\n\n```kotlin\ninstall(Auth) {\n       bearer {\n           // Load and refresh tokens ...\n           sendWithoutRequest { request ->\n               request.url.host == \"www.googleapis.com\"\n           }\n       }\n}\n```\n\n## Example: Using Bearer authentication to access Google API\n\nLet's take a look at how to use bearer authentication to access Google APIs, which use the [OAuth 2.0 protocol](https://developers.google.com/identity/protocols/oauth2) for authentication and authorization. We'll investigate the [client-auth-oauth-google](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-auth-oauth-google) console application that gets Google's profile information.\n\n### Obtain client credentials\n\nAs the first step, we need to obtain client credentials required for accessing Google APIs:\n\n1. Create a Google account.\n2. Open the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) and create the `OAuth client ID` credentials with the `Android` application type. This client ID will be used to obtain an [authorization grant](https://ktor.io/docs/client-bearer-auth.html#step1).\n\n### OAuth authorization flow\n\nThe OAuth authorization flow for our application looks as follows:\n\n```\n(1)  --> Authorization request                Resource owner\n(2)  <-- Authorization grant (code)           Resource owner\n(3)  --> Authorization grant (code)           Authorization server\n(4)  <-- Access and refresh tokens            Authorization server\n(5)  --> Request with valid token             Resource server\n(6)  <-- Protected resource                   Resource server\n⌛⌛⌛    Token expired\n(7)  --> Request with expired token           Resource server\n(8)  <-- 401 Unauthorized response            Resource server\n(9)  --> Authorization grant (refresh token)  Authorization server\n(10) <-- Access and refresh tokens            Authorization server\n(11) --> Request with new token               Resource server\n(12) <-- Protected resource                   Resource server\n```\n\nLet's investigate how each step is implemented and how the `Bearer` authentication provider helps us access the API.\n\n## (1) -> Authorization request\n\nAs the first step, we need to build the authorization link that is used to request the desired permissions. To do this, we need to append specified query parameters to the URL:\n\n```\nval authorizationUrlQuery = parameters {\n    append(\"client_id\", System.getenv(\"GOOGLE_CLIENT_ID\"))\n    append(\"scope\", \"https://www.googleapis.com/auth/userinfo.profile\")\n    append(\"response_type\", \"code\")\n    append(\"redirect_uri\", \"http://127.0.0.1:8080\")\n    append(\"access_type\", \"offline\")\n}.formUrlEncode()\nprintln(\"https://accounts.google.com/o/oauth2/auth?$authorizationUrlQuery\")\nprintln(\"Open a link above, get the authorization code, insert it below, and press Enter.\")\n```\n\n- `client_id`: a client ID [obtained earlier](https://ktor.io/docs/client-bearer-auth.html#google-client-credentials) is used to access Google APIs.\n- `scope`: scopes of resources required for a Ktor application. In our case, the application requests information about a user's profile.\n- `response_type`: a grant type used to get an access token. In our case, we need to obtain an authorization code.\n- `redirect_uri`: the `http://127.0.0.1:8080` value indicates that the Loopback IP address flow is used to get the authorization code.\n\n> ### tip\n>\n> To receive the authorization code using this URL, your application must be listening on the local web server. For example, you can use a [Ktor server](https://ktor.io/docs/server-create-and-configure.html) to get the authorization code as a query parameter.\n\n- `access_type`: The access type is set to `offline` since our console application needs to refresh access tokens when the user is not present at the browser.\n\n## (2) <- Authorization grant (code)\n\nAt this step, we copy the authorization code from the browser, paste it in a console, and save it in a variable:\n\n```\nval authorizationCode = readln()\n```\n\n## (3) -> Authorization grant (code)\n\nNow we are ready to exchange the authorization code for tokens. To do this, we need to create a client and install the [ContentNegotiation](https://ktor.io/docs/client-serialization.html) plugin with the `json` serializer. This serializer is required to deserialize tokens received from the Google OAuth token endpoint.\n\n```\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        json()\n    }\n}\n```\n\nUsing the created client, we can securely pass the authorization code and other necessary options to the token endpoint as [form parameters](https://ktor.io/docs/client-requests.html#form_parameters):\n\n```\nval tokenInfo: TokenInfo = client.submitForm(\n    url = \"https://accounts.google.com/o/oauth2/token\",\n    formParameters = parameters {\n        append(\"grant_type\", \"authorization_code\")\n        append(\"code\", authorizationCode)\n        append(\"client_id\", System.getenv(\"GOOGLE_CLIENT_ID\"))\n        append(\"client_secret\", System.getenv(\"GOOGLE_CLIENT_SECRET\"))\n        append(\"redirect_uri\", \"http://127.0.0.1:8080\")\n    }\n).body()\n```\n\nAs a result, the token endpoint sends tokens in a JSON object, which is deserialized to a `TokenInfo` class instance using the installed `json` serializer. The `TokenInfo` class looks as follows:\n\n```\nimport kotlinx.serialization.*\n\n@Serializable\ndata class TokenInfo(\n    @SerialName(\"access_token\") val accessToken: String,\n    @SerialName(\"expires_in\") val expiresIn: Int,\n    @SerialName(\"refresh_token\") val refreshToken: String? = null,\n    val scope: String,\n    @SerialName(\"token_type\") val tokenType: String,\n    @SerialName(\"id_token\") val idToken: String,\n)\n```},{\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-bearer-auth.html", "title": "Bearer authentication in Ktor Client", "description": "This page covers how to implement bearer authentication in Ktor Client, including configuration, token management, and using bearer tokens to access protected resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:43:19", "type": "overview", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Bearer authentication in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:03.579192103", "og:title": "Bearer authentication in Ktor Client | Ktor", "og:site_name": "Ktor Help", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Bearer authentication in Ktor Client | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogLocale": "en_US", "title": "Bearer authentication in Ktor Client | Ktor Documentation", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogDescription": "", "og:locale": "en_US", "scrapeId": "4335ccde-7870-45e9-a7b6-bd0e5b334c35", "sourceURL": "https://ktor.io/docs/client-bearer-auth.html", "url": "https://ktor.io/docs/client-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I configure bearer authentication in ktor?\n\nAssistant: To configure bearer authentication in ktor, here's what you do:\nA Ktor client allows you to configure a token to be sent in the `Authorization` header using the `Bearer` scheme. You can also specify the logic for refreshing a token if the old one is invalid. To configure the `bearer` provider, follow the steps below:\n\n1. Call the `bearer` function inside the `install` block.\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.auth.*\n//...\nval client = HttpClient(CIO) {\n       install(Auth) {\n          bearer {\n             // Configure bearer authentication\n          }\n       }\n}\n```\n\n2. Configure how to obtain the initial access and refresh tokens using the `loadTokens` callback. This callback is intended to load cached tokens from a local storage and return them as the `BearerTokens` instance.\n\n```kotlin\ninstall(Auth) {\n       bearer {\n           loadTokens {\n               // Load tokens from a local storage and return them as the 'BearerTokens' instance\n               BearerTokens(\"abc123\", \"xyz111\")\n           }\n       }\n}\n```\n\nThe `abc123` access token is sent with each [request](https://ktor.io/docs/client-requests.html) in the `Authorization` header using the `Bearer` scheme:\n\n```http\nGET http://localhost:8080/\nAuthorization: Bearer abc123\n```\n\n3. Specify how to obtain a new token if the old one is invalid using `refreshTokens`.\n\n```kotlin\ninstall(Auth) {\n       bearer {\n           // Load tokens ...\n           refreshTokens { // this: RefreshTokensParams\n               // Refresh tokens and return them as the 'BearerTokens' instance\n               BearerTokens(\"def456\", \"xyz111\")\n           }\n       }\n}\n```\n\nThis callback works as follows:\n\na. The client makes a request to a protected resource using an invalid access token and gets a `401` (Unauthorized) response.\n\nb. The client calls `refreshTokens` automatically to obtain new tokens.\n\nc. The client makes one more request to a protected resource automatically using a new token this time.\n\n4. Optionally, specify a condition for sending credentials without waiting for the `401` (Unauthorized) response. For example, you can check whether a request is made to a specified host.\n\n```kotlin\ninstall(Auth) {\n       bearer {\n           // Load and refresh tokens ...\n           sendWithoutRequest { request ->\n               request.url.host == \"www.googleapis.com\"\n           }\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-bearer-auth.html", "title": "Bearer authentication in Ktor Client", "description": "This page covers how to implement bearer authentication in Ktor Client, including configuration, token management, and using bearer tokens to access protected resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:43:19", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Bearer authentication in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:03.579192103", "og:title": "Bearer authentication in Ktor Client | Ktor", "og:site_name": "Ktor Help", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Bearer authentication in Ktor Client | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogLocale": "en_US", "title": "Bearer authentication in Ktor Client | Ktor Documentation", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogDescription": "", "og:locale": "en_US", "scrapeId": "4335ccde-7870-45e9-a7b6-bd0e5b334c35", "sourceURL": "https://ktor.io/docs/client-bearer-auth.html", "url": "https://ktor.io/docs/client-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I example: using bearer authentication to access google api in ktor?\n\nAssistant: To example: using bearer authentication to access google api in ktor, here's what you do:\nLet's take a look at how to use bearer authentication to access Google APIs, which use the [OAuth 2.0 protocol](https://developers.google.com/identity/protocols/oauth2) for authentication and authorization. We'll investigate the [client-auth-oauth-google](https://github.com/ktorio/ktor-documentation/tree/3.1.0/codeSnippets/snippets/client-auth-oauth-google) console application that gets Google's profile information.\n\n### Obtain client credentials\n\nAs the first step, we need to obtain client credentials required for accessing Google APIs:\n\n1. Create a Google account.\n2. Open the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) and create the `OAuth client ID` credentials with the `Android` application type. This client ID will be used to obtain an [authorization grant](https://ktor.io/docs/client-bearer-auth.html#step1).\n\n### OAuth authorization flow\n\nThe OAuth authorization flow for our application looks as follows:\n\n```\n(1)  --> Authorization request                Resource owner\n(2)  <-- Authorization grant (code)           Resource owner\n(3)  --> Authorization grant (code)           Authorization server\n(4)  <-- Access and refresh tokens            Authorization server\n(5)  --> Request with valid token             Resource server\n(6)  <-- Protected resource                   Resource server\n⌛⌛⌛    Token expired\n(7)  --> Request with expired token           Resource server\n(8)  <-- 401 Unauthorized response            Resource server\n(9)  --> Authorization grant (refresh token)  Authorization server\n(10) <-- Access and refresh tokens            Authorization server\n(11) --> Request with new token               Resource server\n(12) <-- Protected resource                   Resource server\n```\n\nLet's investigate how each step is implemented and how the `Bearer` authentication provider helps us access the API..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-bearer-auth.html", "title": "Bearer authentication in Ktor Client", "description": "This page covers how to implement bearer authentication in Ktor Client, including configuration, token management, and using bearer tokens to access protected resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:43:19", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Bearer authentication in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:03.579192103", "og:title": "Bearer authentication in Ktor Client | Ktor", "og:site_name": "Ktor Help", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Bearer authentication in Ktor Client | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogLocale": "en_US", "title": "Bearer authentication in Ktor Client | Ktor Documentation", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogDescription": "", "og:locale": "en_US", "scrapeId": "4335ccde-7870-45e9-a7b6-bd0e5b334c35", "sourceURL": "https://ktor.io/docs/client-bearer-auth.html", "url": "https://ktor.io/docs/client-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I (1) -> authorization request in ktor?\n\nAssistant: To (1) -> authorization request in ktor, here's what you do:\nAs the first step, we need to build the authorization link that is used to request the desired permissions. To do this, we need to append specified query parameters to the URL:\n\n```\nval authorizationUrlQuery = parameters {\n    append(\"client_id\", System.getenv(\"GOOGLE_CLIENT_ID\"))\n    append(\"scope\", \"https://www.googleapis.com/auth/userinfo.profile\")\n    append(\"response_type\", \"code\")\n    append(\"redirect_uri\", \"http://127.0.0.1:8080\")\n    append(\"access_type\", \"offline\")\n}.formUrlEncode()\nprintln(\"https://accounts.google.com/o/oauth2/auth?$authorizationUrlQuery\")\nprintln(\"Open a link above, get the authorization code, insert it below, and press Enter.\")\n```\n\n- `client_id`: a client ID [obtained earlier](https://ktor.io/docs/client-bearer-auth.html#google-client-credentials) is used to access Google APIs.\n- `scope`: scopes of resources required for a Ktor application. In our case, the application requests information about a user's profile.\n- `response_type`: a grant type used to get an access token. In our case, we need to obtain an authorization code.\n- `redirect_uri`: the `http://127.0.0.1:8080` value indicates that the Loopback IP address flow is used to get the authorization code.\n\n> ### tip\n>\n> To receive the authorization code using this URL, your application must be listening on the local web server. For example, you can use a [Ktor server](https://ktor.io/docs/server-create-and-configure.html) to get the authorization code as a query parameter.\n\n- `access_type`: The access type is set to `offline` since our console application needs to refresh access tokens when the user is not present at the browser..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-bearer-auth.html", "title": "Bearer authentication in Ktor Client", "description": "This page covers how to implement bearer authentication in Ktor Client, including configuration, token management, and using bearer tokens to access protected resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:43:19", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Bearer authentication in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:03.579192103", "og:title": "Bearer authentication in Ktor Client | Ktor", "og:site_name": "Ktor Help", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Bearer authentication in Ktor Client | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogLocale": "en_US", "title": "Bearer authentication in Ktor Client | Ktor Documentation", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogDescription": "", "og:locale": "en_US", "scrapeId": "4335ccde-7870-45e9-a7b6-bd0e5b334c35", "sourceURL": "https://ktor.io/docs/client-bearer-auth.html", "url": "https://ktor.io/docs/client-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I (2) <- authorization grant (code) in ktor?\n\nAssistant: To (2) <- authorization grant (code) in ktor, here's what you do:\nAt this step, we copy the authorization code from the browser, paste it in a console, and save it in a variable:\n\n```\nval authorizationCode = readln()\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-bearer-auth.html", "title": "Bearer authentication in Ktor Client", "description": "This page covers how to implement bearer authentication in Ktor Client, including configuration, token management, and using bearer tokens to access protected resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:43:19", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Bearer authentication in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:03.579192103", "og:title": "Bearer authentication in Ktor Client | Ktor", "og:site_name": "Ktor Help", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Bearer authentication in Ktor Client | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogLocale": "en_US", "title": "Bearer authentication in Ktor Client | Ktor Documentation", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogDescription": "", "og:locale": "en_US", "scrapeId": "4335ccde-7870-45e9-a7b6-bd0e5b334c35", "sourceURL": "https://ktor.io/docs/client-bearer-auth.html", "url": "https://ktor.io/docs/client-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I (3) -> authorization grant (code) in ktor?\n\nAssistant: To (3) -> authorization grant (code) in ktor, here's what you do:\nNow we are ready to exchange the authorization code for tokens. To do this, we need to create a client and install the [ContentNegotiation](https://ktor.io/docs/client-serialization.html) plugin with the `json` serializer. This serializer is required to deserialize tokens received from the Google OAuth token endpoint.\n\n```\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) {\n        json()\n    }\n}\n```\n\nUsing the created client, we can securely pass the authorization code and other necessary options to the token endpoint as [form parameters](https://ktor.io/docs/client-requests.html#form_parameters):\n\n```\nval tokenInfo: TokenInfo = client.submitForm(\n    url = \"https://accounts.google.com/o/oauth2/token\",\n    formParameters = parameters {\n        append(\"grant_type\", \"authorization_code\")\n        append(\"code\", authorizationCode)\n        append(\"client_id\", System.getenv(\"GOOGLE_CLIENT_ID\"))\n        append(\"client_secret\", System.getenv(\"GOOGLE_CLIENT_SECRET\"))\n        append(\"redirect_uri\", \"http://127.0.0.1:8080\")\n    }\n).body()\n```\n\nAs a result, the token endpoint sends tokens in a JSON object, which is deserialized to a `TokenInfo` class instance using the installed `json` serializer. The `TokenInfo` class looks as follows:\n\n```\nimport kotlinx.serialization.*\n\n@Serializable\ndata class TokenInfo(\n    @SerialName(\"access_token\") val accessToken: String,\n    @SerialName(\"expires_in\") val expiresIn: Int,\n    @SerialName(\"refresh_token\") val refreshToken: String? = null,\n    val scope: String,\n    @SerialName(\"token_type\") val tokenType: String,\n    @SerialName(\"id_token\") val idToken: String,\n)\n```},{.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-bearer-auth.html", "title": "Bearer authentication in Ktor Client", "description": "This page covers how to implement bearer authentication in Ktor Client, including configuration, token management, and using bearer tokens to access protected resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:43:19", "type": "section_detail", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Bearer authentication in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:03.579192103", "og:title": "Bearer authentication in Ktor Client | Ktor", "og:site_name": "Ktor Help", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Bearer authentication in Ktor Client | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogLocale": "en_US", "title": "Bearer authentication in Ktor Client | Ktor Documentation", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogDescription": "", "og:locale": "en_US", "scrapeId": "4335ccde-7870-45e9-a7b6-bd0e5b334c35", "sourceURL": "https://ktor.io/docs/client-bearer-auth.html", "url": "https://ktor.io/docs/client-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Bearer authentication in Ktor Client in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Bearer authentication configuration**:\n\n```yaml\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.auth.*\n//...\nval client = HttpClient(CIO) {\n       install(Auth) {\n          bearer {\n             // Configure bearer authentication\n          }\n       }\n}\n```\n\nThis snippet shows you how to bearer authentication configuration, which is an important aspect of bearer authentication in ktor client.\n\n**Load tokens from local storage**:\n\n```yaml\ninstall(Auth) {\n       bearer {\n           loadTokens {\n               // Load tokens from a local storage and return them as the 'BearerTokens' instance\n               BearerTokens(\"abc123\", \"xyz111\")\n           }\n       }\n}\n```\n\nThis snippet shows you how to load tokens from local storage, which is an important aspect of bearer authentication in ktor client.\n\n**Request with valid token**:\n\n```yaml\nGET http://localhost:8080/\nAuthorization: Bearer abc123\n```\n\nThis snippet shows you how to request with valid token, which is an important aspect of bearer authentication in ktor client.\n\n**Refresh tokens**:\n\n```yaml\ninstall(Auth) {\n       bearer {\n           // Load tokens ...\n           refreshTokens { // this: RefreshTokensParams\n               // Refresh tokens and return them as the 'BearerTokens' instance\n               BearerTokens(\"def456\", \"xyz111\")\n           }\n       }\n}\n```\n\nThis snippet shows you how to refresh tokens, which is an important aspect of bearer authentication in ktor client.\n\n**Send credentials without waiting for 401 response**:\n\n```yaml\ninstall(Auth) {\n       bearer {\n           // Load and refresh tokens ...\n           sendWithoutRequest { request ->\n               request.url.host == \"www.googleapis.com\"\n           }\n       }\n}\n```\n\nThis snippet shows you how to send credentials without waiting for 401 response, which is an important aspect of bearer authentication in ktor client.\n\n**Authorization request**:\n\n```yaml\nval authorizationUrlQuery = parameters {\n    append(\"client_id\", System.getenv(\"GOOGLE_CLIENT_ID\"))\n    append(\"scope\", \"https://www.googleapis.com/auth/userinfo.profile\")\n    append(\"response_type\", \"code\")\n    append(\"redirect_uri\", \"http://127.0.0.1:8080\")\n    append(\"access_type\", \"offline\")\n}.formUrlEncode()\nprintln(\"https://accounts.google.com/o/oauth2/auth?$authorizationUrlQuery\")\nprintln(\"Open a link above, get the authorization code, insert it below, and press Enter.\")\n```\n\nThis snippet shows you how to authorization request, which is an important aspect of bearer authentication in ktor client.\n\n**Exchange authorization code for tokens**:\n\n```yaml\nval tokenInfo: TokenInfo = client.submitForm(\n    url = \"https://accounts.google.com/o/oauth2/token\",\n    formParameters = parameters {\n        append(\"grant_type\", \"authorization_code\")\n        append(\"code\", authorizationCode)\n        append(\"client_id\", System.getenv(\"GOOGLE_CLIENT_ID\"))\n        append(\"client_secret\", System.getenv(\"GOOGLE_CLIENT_SECRET\"))\n        append(\"redirect_uri\", \"http://127.0.0.1:8080\")\n    }\n).body()\n```\n\nThis snippet shows you how to exchange authorization code for tokens, which is an important aspect of bearer authentication in ktor client.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-bearer-auth.html", "title": "Bearer authentication in Ktor Client", "description": "This page covers how to implement bearer authentication in Ktor Client, including configuration, token management, and using bearer tokens to access protected resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:43:19", "type": "code_examples", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Bearer authentication in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:03.579192103", "og:title": "Bearer authentication in Ktor Client | Ktor", "og:site_name": "Ktor Help", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Bearer authentication in Ktor Client | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogLocale": "en_US", "title": "Bearer authentication in Ktor Client | Ktor Documentation", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogDescription": "", "og:locale": "en_US", "scrapeId": "4335ccde-7870-45e9-a7b6-bd0e5b334c35", "sourceURL": "https://ktor.io/docs/client-bearer-auth.html", "url": "https://ktor.io/docs/client-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Bearer authentication in Ktor Client in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOn the server, Ktor provides the [Authentication](https://ktor.io/docs/server-bearer-auth.html) plugin for handling bearer authentication.\n\nTo receive the authorization code using this URL, your application must be listening on the local web server. For example, you can use a [Ktor server](https://ktor.io/docs/server-create-and-configure.html) to get the authorization code as a query parameter.\n\nNote that `bearerTokenStorage` should be created before [initializing the client](https://ktor.io/docs/client-bearer-auth.html#step3) since it will be used inside the client configuration.\n\nNote that the `401` response returns JSON data with error details, and we need to [handle this case](https://ktor.io/docs/client-bearer-auth.html#step12) when receiving a response.\n\nThe `markAsRefreshTokenRequest` function exposed by `HttpRequestBuilder` enables special handling of requests used to obtain a refresh token.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-bearer-auth.html", "title": "Bearer authentication in Ktor Client", "description": "This page covers how to implement bearer authentication in Ktor Client, including configuration, token management, and using bearer tokens to access protected resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 05:43:19", "type": "best_practices", "page_metadata": {"ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogTitle": "Bearer authentication in Ktor Client | Ktor", "built-on": "2025-02-26T14:01:03.579192103", "og:title": "Bearer authentication in Ktor Client | Ktor", "og:site_name": "Ktor Help", "build-number": "707", "og:description": "", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:type": "website", "language": "en-US", "twitter:site": "@JetBrainsKtor", "twitter:title": "Bearer authentication in Ktor Client | Ktor", "twitter:description": "", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogUrl": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogLocale": "en_US", "title": "Bearer authentication in Ktor Client | Ktor Documentation", "twitter:card": "summary_large_image", "ogSiteName": "Ktor Help", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:url": "https://ktor.io/docs/3.1.1/client-bearer-auth.html", "ogDescription": "", "og:locale": "en_US", "scrapeId": "4335ccde-7870-45e9-a7b6-bd0e5b334c35", "sourceURL": "https://ktor.io/docs/client-bearer-auth.html", "url": "https://ktor.io/docs/client-bearer-auth.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you explain what Custom client plugins is in ktor?\n\nAssistant: Sure, I'd be happy to explain Custom client plugins in ktor.\n\n# Custom client plugins\n\nThis page covers how to create and install custom client plugins in Ktor, including examples and best practices.Here's a quick rundown of what this is about:\n\n## Create and install your first plugin\n\nIn this section, we'll demonstrate how to create and install your first plugin that adds a custom header to each request:\n\n1. To create a plugin, call the createClientPlugin function and pass a plugin name as an argument:\n\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.client.plugins.api.*\n\nval CustomHeaderPlugin = createClientPlugin(\"CustomHeaderPlugin\") {\n       // Configure the plugin ...\n}\n```\n\nThis function returns the ClientPlugin instance that will be used to install the plugin.\n\n2. To append a custom header to each request, you can use the onRequest handler, which provides access to request parameters:\n\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.client.plugins.api.*\n\nval CustomHeaderPlugin = createClientPlugin(\"CustomHeaderPlugin\") {\n       onRequest { request, _ ->\n           request.headers.append(\"X-Custom-Header\", \"Default value\")\n       }\n}\n```\n\n3. To install the plugin, pass the created ClientPlugin instance to the install function inside the client's configuration block:\n\n```kotlin\nimport com.example.plugins.*\n\nval client = HttpClient(CIO) {\n       install(CustomHeaderPlugin)\n}\n```\n\nYou can find the full example here: CustomHeader.kt.\n\n## Provide plugin configuration\n\nThe previous section demonstrates how to create a plugin that appends a predefined custom header to each response. Let's make this plugin more useful and provide a configuration for passing any custom header name and value:\n\n1. First, you need to define a configuration class:\n\n```kotlin\nclass CustomHeaderPluginConfig {\n       var headerName: String = \"X-Custom-Header\"\n       var headerValue: String = \"Default value\"\n}\n```\n\n2. To use this configuration in a plugin, pass a configuration class reference to createApplicationPlugin:\n\n```kotlin\nimport io.ktor.client.plugins.api.*\n\nval CustomHeaderConfigurablePlugin = createClientPlugin(\"CustomHeaderConfigurablePlugin\", ::CustomHeaderPluginConfig) {\n       val headerName = pluginConfig.headerName\n       val headerValue = pluginConfig.headerValue\n\n       onRequest { request, _ ->\n           request.headers.append(headerName, headerValue)\n       }\n}\n```\n\nGiven that plugin configuration fields are mutable, saving them in local variables is recommended.\n\n3. Finally, you can install and configure the plugin as follows:\n\n```kotlin\nval client = HttpClient(CIO) {\n       install(CustomHeaderConfigurablePlugin) {\n           headerName = \"X-Custom-Header\"\n           headerValue = \"Hello, world!\"\n       }\n}\n```\n\n## Handle requests and responses\n\nCustom plugins provide access to different stages of handling requests and responses using a set of dedicated handlers, for example:\n\n- onRequest and onResponse allow you to handle requests and responses, respectively.\n- transformRequestBody and transformResponseBody can be used to apply necessary transformations to request and response bodies.\n\nThere is also the on(...) handler that allows you to invoke specific hooks that might be useful to handle other stages of a call. The tables below list all handlers in the order they are executed:\n\nBasic hooks\n\n| Handler | Description |\n| --- | --- |\n| onRequest | This handler is executed for each HTTP request and allows you to modify it.<br>Example: Custom header |\n| transformRequestBody | Allows you to transform a request body. In this handler, you need to serialize the body into OutgoingContent (for example, TextContent, ByteArrayContent, or FormDataContent) or return null if your transformation is not applicable.<br>Example: Data transformation |\n| onResponse | This handler is executed for each incoming HTTP response and allows you to inspect it in various ways: log a response, save cookies, and so on.<br>Examples: Logging headers, Response time |\n| transformResponseBody | Allows you to transform a response body. This handler is invoked for each HttpResponse.body call. You need to deserialize the body into an instance of requestedType or return null if your transformation is not applicable.<br>Example: Data transformation |\n| onClose | Allows you to clean resources allocated by this plugin. This handler is called when the client is closed. |\n\n| Handler | Description |\n| --- | --- |\n| on(SetupRequest) | The SetupRequest hook is executed first in request processing. |\n| onRequest | This handler is executed for each HTTP request and allows you to modify it.<br>Example: Custom header |\n| transformRequestBody | Allows you to transform a request body. In this handler, you need to serialize the body into OutgoingContent (for example, TextContent, ByteArrayContent, or FormDataContent) or return null if your transformation is not applicable.<br>Example: Data transformation |\n| on(Send) | The Send hook provides the ability to inspect a response and initiate additional requests if needed. This might be useful for handling redirects, retrying requests, authentication, and so on.<br>Example: Authentication |\n| on(SendingRequest) | The SendingRequest hook is executed for every request, even if it's not initiated by a user. For example, if a request results in a redirect, the onRequest handler will be executed only for the original request, while on(SendingRequest) will be executed for both original and redirected requests. Similarly, if you used on(Send) to initiate an additional request, handlers will be ordered as follows:\n```<br>--> onRequest<br>--> on(Send)<br>--> on(SendingRequest)<br><-- onResponse<br>--> on(SendingRequest)<br><-- onResponse<br>```<br>Examples: Logging headers, Response time |\n| onResponse | This handler is executed for each incoming HTTP response and allows you to inspect it in various ways: log a response, save cookies, and so on.<br>Examples: Logging headers, Response time |\n| transformResponseBody | Allows you to transform a response body. This handler is invoked for each HttpResponse.body call. You need to deserialize the body into an instance of requestedType or return null if your transformation is not applicable.<br>Example: Data transformation |\n| onClose | Allows you to clean resources allocated by this plugin. This handler is called when the client is closed. |\n\n## Share call state\n\nCustom plugins allow you to share any value related to a call so that you can access this value inside any handler processing this call. This value is stored as an attribute with a unique key in the call.attributes collection. The example below demonstrates how to use attributes to calculate the time between sending a request and receiving a response:\n\n```kotlin\nimport io.ktor.client.plugins.api.*\nimport io.ktor.util.*\n\nval ResponseTimePlugin = createClientPlugin(\"ResponseTimePlugin\") {\n    val onCallTimeKey = AttributeKey<Long>(\"onCallTimeKey\")\n    on(SendingRequest) { request, content ->\n        val onCallTime = System.currentTimeMillis()\n        request.attributes.put(onCallTimeKey, onCallTime)\n    }\n\n    onResponse { response ->\n        val onCallTime = response.call.attributes[onCallTimeKey]\n        val onCallReceiveTime = System.currentTimeMillis()\n        println(\"Read response delay (ms): ${onCallReceiveTime - onCallTime}\")\n    }\n}\n```\n\n## Access client configuration\n\nYou can access your client configuration using the client property, which returns the HttpClient instance. The example below shows how to get the proxy address used by the client:\n\n```kotlin\nimport io.ktor.client.plugins.api.*\n\nval SimplePlugin = createClientPlugin(\"SimplePlugin\") {\n    val proxyAddress = client.engineConfig.proxy?.address()\n    println(\"Proxy address: $proxyAddress\")\n}\n```\n\n## Examples\n\nThe code samples below demonstrate several examples of custom plugins. You can find the resulting project here: client-custom-plugin.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://ktor.io/docs/client-custom-plugins.html", "title": "Custom client plugins", "description": "This page covers how to create and install custom client plugins in Ktor, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 06:00:47", "type": "overview", "page_metadata": {"twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Custom client plugins | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:description": "", "built-on": "2025-02-26T14:01:04.735026077", "og:title": "Custom client plugins | Ktor", "build-number": "707", "language": "en-US", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Custom client plugins | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogTitle": "Custom client plugins | Ktor", "ogLocale": "en_US", "scrapeId": "2cab6ba8-0150-47f2-8ff2-4d7e0bb296fd", "sourceURL": "https://ktor.io/docs/client-custom-plugins.html", "url": "https://ktor.io/docs/client-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I create and install your first plugin in ktor?\n\nAssistant: To create and install your first plugin in ktor, here's what you do:\nIn this section, we'll demonstrate how to create and install your first plugin that adds a custom header to each request:\n\n1. To create a plugin, call the createClientPlugin function and pass a plugin name as an argument:\n\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.client.plugins.api.*\n\nval CustomHeaderPlugin = createClientPlugin(\"CustomHeaderPlugin\") {\n       // Configure the plugin ...\n}\n```\n\nThis function returns the ClientPlugin instance that will be used to install the plugin.\n\n2. To append a custom header to each request, you can use the onRequest handler, which provides access to request parameters:\n\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.client.plugins.api.*\n\nval CustomHeaderPlugin = createClientPlugin(\"CustomHeaderPlugin\") {\n       onRequest { request, _ ->\n           request.headers.append(\"X-Custom-Header\", \"Default value\")\n       }\n}\n```\n\n3. To install the plugin, pass the created ClientPlugin instance to the install function inside the client's configuration block:\n\n```kotlin\nimport com.example.plugins.*\n\nval client = HttpClient(CIO) {\n       install(CustomHeaderPlugin)\n}\n```\n\nYou can find the full example here: CustomHeader.kt..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-custom-plugins.html", "title": "Custom client plugins", "description": "This page covers how to create and install custom client plugins in Ktor, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 06:00:47", "type": "section_detail", "page_metadata": {"twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Custom client plugins | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:description": "", "built-on": "2025-02-26T14:01:04.735026077", "og:title": "Custom client plugins | Ktor", "build-number": "707", "language": "en-US", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Custom client plugins | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogTitle": "Custom client plugins | Ktor", "ogLocale": "en_US", "scrapeId": "2cab6ba8-0150-47f2-8ff2-4d7e0bb296fd", "sourceURL": "https://ktor.io/docs/client-custom-plugins.html", "url": "https://ktor.io/docs/client-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I provide plugin configuration in ktor?\n\nAssistant: To provide plugin configuration in ktor, here's what you do:\nThe previous section demonstrates how to create a plugin that appends a predefined custom header to each response. Let's make this plugin more useful and provide a configuration for passing any custom header name and value:\n\n1. First, you need to define a configuration class:\n\n```kotlin\nclass CustomHeaderPluginConfig {\n       var headerName: String = \"X-Custom-Header\"\n       var headerValue: String = \"Default value\"\n}\n```\n\n2. To use this configuration in a plugin, pass a configuration class reference to createApplicationPlugin:\n\n```kotlin\nimport io.ktor.client.plugins.api.*\n\nval CustomHeaderConfigurablePlugin = createClientPlugin(\"CustomHeaderConfigurablePlugin\", ::CustomHeaderPluginConfig) {\n       val headerName = pluginConfig.headerName\n       val headerValue = pluginConfig.headerValue\n\n       onRequest { request, _ ->\n           request.headers.append(headerName, headerValue)\n       }\n}\n```\n\nGiven that plugin configuration fields are mutable, saving them in local variables is recommended.\n\n3. Finally, you can install and configure the plugin as follows:\n\n```kotlin\nval client = HttpClient(CIO) {\n       install(CustomHeaderConfigurablePlugin) {\n           headerName = \"X-Custom-Header\"\n           headerValue = \"Hello, world!\"\n       }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-custom-plugins.html", "title": "Custom client plugins", "description": "This page covers how to create and install custom client plugins in Ktor, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 06:00:47", "type": "section_detail", "page_metadata": {"twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Custom client plugins | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:description": "", "built-on": "2025-02-26T14:01:04.735026077", "og:title": "Custom client plugins | Ktor", "build-number": "707", "language": "en-US", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Custom client plugins | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogTitle": "Custom client plugins | Ktor", "ogLocale": "en_US", "scrapeId": "2cab6ba8-0150-47f2-8ff2-4d7e0bb296fd", "sourceURL": "https://ktor.io/docs/client-custom-plugins.html", "url": "https://ktor.io/docs/client-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I handle requests and responses in ktor?\n\nAssistant: To handle requests and responses in ktor, here's what you do:\nCustom plugins provide access to different stages of handling requests and responses using a set of dedicated handlers, for example:\n\n- onRequest and onResponse allow you to handle requests and responses, respectively.\n- transformRequestBody and transformResponseBody can be used to apply necessary transformations to request and response bodies.\n\nThere is also the on(...) handler that allows you to invoke specific hooks that might be useful to handle other stages of a call. The tables below list all handlers in the order they are executed:\n\nBasic hooks\n\n| Handler | Description |\n| --- | --- |\n| onRequest | This handler is executed for each HTTP request and allows you to modify it.<br>Example: Custom header |\n| transformRequestBody | Allows you to transform a request body. In this handler, you need to serialize the body into OutgoingContent (for example, TextContent, ByteArrayContent, or FormDataContent) or return null if your transformation is not applicable.<br>Example: Data transformation |\n| onResponse | This handler is executed for each incoming HTTP response and allows you to inspect it in various ways: log a response, save cookies, and so on.<br>Examples: Logging headers, Response time |\n| transformResponseBody | Allows you to transform a response body. This handler is invoked for each HttpResponse.body call. You need to deserialize the body into an instance of requestedType or return null if your transformation is not applicable.<br>Example: Data transformation |\n| onClose | Allows you to clean resources allocated by this plugin. This handler is called when the client is closed. |\n\n| Handler | Description |\n| --- | --- |\n| on(SetupRequest) | The SetupRequest hook is executed first in request processing. |\n| onRequest | This handler is executed for each HTTP request and allows you to modify it.<br>Example: Custom header |\n| transformRequestBody | Allows you to transform a request body. In this handler, you need to serialize the body into OutgoingContent (for example, TextContent, ByteArrayContent, or FormDataContent) or return null if your transformation is not applicable.<br>Example: Data transformation |\n| on(Send) | The Send hook provides the ability to inspect a response and initiate additional requests if needed. This might be useful for handling redirects, retrying requests, authentication, and so on.<br>Example: Authentication |\n| on(SendingRequest) | The SendingRequest hook is executed for every request, even if it's not initiated by a user. For example, if a request results in a redirect, the onRequest handler will be executed only for the original request, while on(SendingRequest) will be executed for both original and redirected requests. Similarly, if you used on(Send) to initiate an additional request, handlers will be ordered as follows:\n```<br>--> onRequest<br>--> on(Send)<br>--> on(SendingRequest)<br><-- onResponse<br>--> on(SendingRequest)<br><-- onResponse<br>```<br>Examples: Logging headers, Response time |\n| onResponse | This handler is executed for each incoming HTTP response and allows you to inspect it in various ways: log a response, save cookies, and so on.<br>Examples: Logging headers, Response time |\n| transformResponseBody | Allows you to transform a response body. This handler is invoked for each HttpResponse.body call. You need to deserialize the body into an instance of requestedType or return null if your transformation is not applicable.<br>Example: Data transformation |\n| onClose | Allows you to clean resources allocated by this plugin. This handler is called when the client is closed. |.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-custom-plugins.html", "title": "Custom client plugins", "description": "This page covers how to create and install custom client plugins in Ktor, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 06:00:47", "type": "section_detail", "page_metadata": {"twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Custom client plugins | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:description": "", "built-on": "2025-02-26T14:01:04.735026077", "og:title": "Custom client plugins | Ktor", "build-number": "707", "language": "en-US", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Custom client plugins | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogTitle": "Custom client plugins | Ktor", "ogLocale": "en_US", "scrapeId": "2cab6ba8-0150-47f2-8ff2-4d7e0bb296fd", "sourceURL": "https://ktor.io/docs/client-custom-plugins.html", "url": "https://ktor.io/docs/client-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I share call state in ktor?\n\nAssistant: To share call state in ktor, here's what you do:\nCustom plugins allow you to share any value related to a call so that you can access this value inside any handler processing this call. This value is stored as an attribute with a unique key in the call.attributes collection. The example below demonstrates how to use attributes to calculate the time between sending a request and receiving a response:\n\n```kotlin\nimport io.ktor.client.plugins.api.*\nimport io.ktor.util.*\n\nval ResponseTimePlugin = createClientPlugin(\"ResponseTimePlugin\") {\n    val onCallTimeKey = AttributeKey<Long>(\"onCallTimeKey\")\n    on(SendingRequest) { request, content ->\n        val onCallTime = System.currentTimeMillis()\n        request.attributes.put(onCallTimeKey, onCallTime)\n    }\n\n    onResponse { response ->\n        val onCallTime = response.call.attributes[onCallTimeKey]\n        val onCallReceiveTime = System.currentTimeMillis()\n        println(\"Read response delay (ms): ${onCallReceiveTime - onCallTime}\")\n    }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-custom-plugins.html", "title": "Custom client plugins", "description": "This page covers how to create and install custom client plugins in Ktor, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 06:00:47", "type": "section_detail", "page_metadata": {"twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Custom client plugins | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:description": "", "built-on": "2025-02-26T14:01:04.735026077", "og:title": "Custom client plugins | Ktor", "build-number": "707", "language": "en-US", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Custom client plugins | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogTitle": "Custom client plugins | Ktor", "ogLocale": "en_US", "scrapeId": "2cab6ba8-0150-47f2-8ff2-4d7e0bb296fd", "sourceURL": "https://ktor.io/docs/client-custom-plugins.html", "url": "https://ktor.io/docs/client-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I access client configuration in ktor?\n\nAssistant: To access client configuration in ktor, here's what you do:\nYou can access your client configuration using the client property, which returns the HttpClient instance. The example below shows how to get the proxy address used by the client:\n\n```kotlin\nimport io.ktor.client.plugins.api.*\n\nval SimplePlugin = createClientPlugin(\"SimplePlugin\") {\n    val proxyAddress = client.engineConfig.proxy?.address()\n    println(\"Proxy address: $proxyAddress\")\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-custom-plugins.html", "title": "Custom client plugins", "description": "This page covers how to create and install custom client plugins in Ktor, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 06:00:47", "type": "section_detail", "page_metadata": {"twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Custom client plugins | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:description": "", "built-on": "2025-02-26T14:01:04.735026077", "og:title": "Custom client plugins | Ktor", "build-number": "707", "language": "en-US", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Custom client plugins | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogTitle": "Custom client plugins | Ktor", "ogLocale": "en_US", "scrapeId": "2cab6ba8-0150-47f2-8ff2-4d7e0bb296fd", "sourceURL": "https://ktor.io/docs/client-custom-plugins.html", "url": "https://ktor.io/docs/client-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: How do I examples in ktor?\n\nAssistant: To examples in ktor, here's what you do:\nThe code samples below demonstrate several examples of custom plugins. You can find the resulting project here: client-custom-plugin..\nPretty straightforward, right?", "metadata": {"source_url": "https://ktor.io/docs/client-custom-plugins.html", "title": "Custom client plugins", "description": "This page covers how to create and install custom client plugins in Ktor, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 06:00:47", "type": "section_detail", "page_metadata": {"twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Custom client plugins | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:description": "", "built-on": "2025-02-26T14:01:04.735026077", "og:title": "Custom client plugins | Ktor", "build-number": "707", "language": "en-US", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Custom client plugins | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogTitle": "Custom client plugins | Ktor", "ogLocale": "en_US", "scrapeId": "2cab6ba8-0150-47f2-8ff2-4d7e0bb296fd", "sourceURL": "https://ktor.io/docs/client-custom-plugins.html", "url": "https://ktor.io/docs/client-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: Can you give me some code examples for Custom client plugins in ktor?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Custom Header Plugin**:\n\n```yaml\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.client.plugins.api.*\n\nval CustomHeaderConfigurablePlugin = createClientPlugin(\"CustomHeaderConfigurablePlugin\", ::CustomHeaderPluginConfig) {\n    val headerName = pluginConfig.headerName\n    val headerValue = pluginConfig.headerValue\n\n    onRequest { request, _ ->\n        request.headers.append(headerName, headerValue)\n    }\n}\n\nclass CustomHeaderPluginConfig {\n    var headerName: String = \"X-Custom-Header\"\n    var headerValue: String = \"Default value\"\n}\n```\n```\n\nThis snippet shows you how to custom header plugin, which is an important aspect of custom client plugins.\n\n**Logging Headers Plugin**:\n\n```yaml\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.client.plugins.api.*\n\nval LoggingHeadersPlugin = createClientPlugin(\"LoggingHeadersPlugin\") {\n    on(SendingRequest) { request, content ->\n        println(\"Request headers:\")\n        request.headers.entries().forEach { entry ->\n            printHeader(entry)\n        }\n    }\n\n    onResponse { response ->\n        println(\"Response headers:\")\n        response.headers.entries().forEach { entry ->\n            printHeader(entry)\n        }\n    }\n}\n\nprivate fun printHeader(entry: Map.Entry<String, List<String>>) {\n    var headerString = entry.key + \": \"\n    entry.value.forEach { headerValue ->\n        headerString += \"${headerValue};\"\n    }\n    println(\"-> $headerString\")\n}\n```\n```\n\nThis snippet shows you how to logging headers plugin, which is an important aspect of custom client plugins.\n\n**Response Time Plugin**:\n\n```yaml\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.client.plugins.api.*\nimport io.ktor.util.*\n\nval ResponseTimePlugin = createClientPlugin(\"ResponseTimePlugin\") {\n    val onCallTimeKey = AttributeKey<Long>(\"onCallTimeKey\")\n    on(SendingRequest) { request, content ->\n        val onCallTime = System.currentTimeMillis()\n        request.attributes.put(onCallTimeKey, onCallTime)\n    }\n\n    onResponse { response ->\n        val onCallTime = response.call.attributes[onCallTimeKey]\n        val onCallReceiveTime = System.currentTimeMillis()\n        println(\"Read response delay (ms): ${onCallReceiveTime - onCallTime}\")\n    }\n}\n```\n```\n\nThis snippet shows you how to response time plugin, which is an important aspect of custom client plugins.\n\n**Data Transformation Plugin**:\n\n```yaml\n```kotlin\npackage com.example.plugins\n\nimport com.example.model.*\nimport io.ktor.client.plugins.api.*\nimport io.ktor.http.*\nimport io.ktor.http.content.*\nimport io.ktor.utils.io.*\n\nval DataTransformationPlugin = createClientPlugin(\"DataTransformationPlugin\") {\n    transformRequestBody { request, content, bodyType ->\n        if (bodyType?.type == User::class) {\n            val user = content as User\n            TextContent(text=\"${user.name};${user.age}\", contentType = ContentType.Text.Plain)\n        } else {\n            null\n        }\n    }\n    transformResponseBody { response, content, requestedType ->\n        if (requestedType.type == User::class) {\n            val receivedContent = content.readUTF8Line()!!.split(\";\")\n            User(receivedContent[0], receivedContent[1].toInt())\n        } else {\n            content\n        }\n    }\n}\n```\n```\n\nThis snippet shows you how to data transformation plugin, which is an important aspect of custom client plugins.\n\n**Authentication Plugin**:\n\n```yaml\n```kotlin\npackage com.example.plugins\n\nimport io.ktor.client.plugins.api.*\nimport io.ktor.http.*\n\nval AuthPlugin = createClientPlugin(\"AuthPlugin\", ::AuthPluginConfig) {\n    val token = pluginConfig.token\n\n    on(Send) { request ->\n        val originalCall = proceed(request)\n        originalCall.response.run { // this: HttpResponse\n            if(status == HttpStatusCode.Unauthorized && headers[\"WWW-Authenticate\"]!!.contains(\"Bearer\")) {\n                request.headers.append(\"Authorization\", \"Bearer $token\")\n                proceed(request)\n            } else {\n                originalCall\n            }\n        }\n    }\n}\n\nclass AuthPluginConfig {\n    var token: String = \"\"\n}\n```\n```\n\nThis snippet shows you how to authentication plugin, which is an important aspect of custom client plugins.\n\n", "metadata": {"source_url": "https://ktor.io/docs/client-custom-plugins.html", "title": "Custom client plugins", "description": "This page covers how to create and install custom client plugins in Ktor, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 06:00:47", "type": "code_examples", "page_metadata": {"twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Custom client plugins | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:description": "", "built-on": "2025-02-26T14:01:04.735026077", "og:title": "Custom client plugins | Ktor", "build-number": "707", "language": "en-US", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Custom client plugins | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogTitle": "Custom client plugins | Ktor", "ogLocale": "en_US", "scrapeId": "2cab6ba8-0150-47f2-8ff2-4d7e0bb296fd", "sourceURL": "https://ktor.io/docs/client-custom-plugins.html", "url": "https://ktor.io/docs/client-custom-plugins.html", "statusCode": 200}}}
{"text": "System: You are a helpful ktor expert.\n\nUser: What are some tips for using Custom client plugins in ktor effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou can find the full example here: CustomHeaderConfigurable.kt\n\nYou can find the full example here: ResponseTime.kt\n\nYou can find the full example here: client-custom-plugin-data-transformation\n\nYou can find the full example here: client-custom-plugin-auth\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://ktor.io/docs/client-custom-plugins.html", "title": "Custom client plugins", "description": "This page covers how to create and install custom client plugins in Ktor, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 06:00:47", "type": "best_practices", "page_metadata": {"twitter:description": "", "ogUrl": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "title": "Custom client plugins | Ktor Documentation", "favicon": "https://resources.jetbrains.com/storage/products/company/brand/logos/Ktor_icon.png", "image": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "og:site_name": "Ktor Help", "og:url": "https://ktor.io/docs/3.1.1/client-custom-plugins.html", "og:description": "", "built-on": "2025-02-26T14:01:04.735026077", "og:title": "Custom client plugins | Ktor", "build-number": "707", "language": "en-US", "twitter:card": "summary_large_image", "twitter:image:src": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "ogImage": "https://raw.githubusercontent.com/ktorio/ktor-documentation/main/preview.jpg", "twitter:title": "Custom client plugins | Ktor", "twitter:creator": "@JetBrainsKtor", "viewport": "width=device-width,initial-scale=1,maximum-scale=1", "og:type": "website", "ogDescription": "", "og:locale": "en_US", "twitter:site": "@JetBrainsKtor", "ogSiteName": "Ktor Help", "ogTitle": "Custom client plugins | Ktor", "ogLocale": "en_US", "scrapeId": "2cab6ba8-0150-47f2-8ff2-4d7e0bb296fd", "sourceURL": "https://ktor.io/docs/client-custom-plugins.html", "url": "https://ktor.io/docs/client-custom-plugins.html", "statusCode": 200}}}
