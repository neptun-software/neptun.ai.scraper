{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Introduction to GitHub Packages?\n\nAssistant: GitHub Packages is a software package hosting service that allows you to host your software packages privately or publicly and use packages as dependencies in your projects.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages. For more information, see GitHub’s plans.\n\n## In this article\n\n\n## About GitHub Packages\nGitHub Packages is a platform for hosting and managing packages, including containers and other dependencies. GitHub Packages combines your source code and packages in one place to provide integrated permissions management and billing, so you can centralize your software development on GitHub.\n\nYou can integrate GitHub Packages with GitHub's APIs, GitHub Actions, and webhooks to create an end-to-end DevOps workflow that includes your code, CI, and deployment solutions.\n\nGitHub Packages offers different package registries for commonly used package managers, such as npm, RubyGems, Apache Maven, Gradle, Docker, and NuGet. GitHub's Container registry is optimized for containers and supports Docker and OCI images. For more information on the different package registries that GitHub Packages supports, see Working with a GitHub Packages registry.\n\nYou can view a package's README, as well as metadata such as licensing, download statistics, version history, and more on GitHub. For more information, see Viewing packages.\n\n## Overview of package permissions\nThe permissions for a package are either inherited from the repository where the package is hosted, or can be defined for specific users or organizations. Some registries only support permissions inherited from a repository. For a list of these registries, see About permissions for GitHub Packages. For more information on package access, see Configuring a package's access control and visibility.\n\n## Overview of package visibility\nYou can publish packages in a public repository (public packages) to share with all of GitHub, or in a private repository (private packages) to share with collaborators or an organization.\n\n## About billing for GitHub Packages\nGitHub Packages usage is free for public packages. For private packages, each account on GitHub receives a certain amount of free storage and data transfer, depending on the account's plan. Any usage beyond the included amounts is controlled by spending limits. If you are a monthly-billed customer, your account will have a default spending limit of 0 US dollars (USD), which prevents additional usage of storage or data transfer after you reach the included amounts. If you pay your account by invoice, your account will have an unlimited default spending limit. For more information, see About billing for GitHub Packages.\n\n## Supported clients and formats\nGitHub Packages uses the native package tooling commands you're already familiar with to publish and install package versions.\n\n## Support for package registries\n| Language | Description | Package format | Package client |\n| --- | --- | --- | --- |\n| JavaScript | Node package manager | `package.json` | `npm` |\n| Ruby | RubyGems package manager | `Gemfile` | `gem` |\n| Java | Apache Maven project management and comprehension tool | `pom.xml` | `mvn` |\n| Java | Gradle build automation tool for Java | `build.gradle` or `build.gradle.kts` | `gradle` |\n| .NET | NuGet package management for .NET | `nupkg` | `dotnet` CLI |\n| N/A | Docker container management | `Dockerfile` | `Docker` | \n\nFor more information about configuring your package client for use with GitHub Packages, see Working with a GitHub Packages registry.\n\nFor more information about Docker and the Container registry, see Working with the Container registry.\n\n## Authenticating to GitHub Packages\nNote\n\nGitHub Packages only supports authentication using a personal access token (classic). For more information, see Managing your personal access tokens.\n\nYou need an access token to publish, install, and delete private, internal, and public packages.\n\nYou can use a personal access token (classic) to authenticate to GitHub Packages or the GitHub API. When you create a personal access token (classic), you can assign the token different scopes depending on your needs. For more information about packages-related scopes for a personal access token (classic), see About permissions for GitHub Packages.\n\nTo authenticate to a GitHub Packages registry within a GitHub Actions workflow, you can use:\n\n- `GITHUB_TOKEN` to publish packages associated with the workflow repository.\n- A personal access token (classic) with at least `read:packages` scope to install packages associated with other private repositories ( `GITHUB_TOKEN` can be used if the repository is granted read access to the package. See Configuring a package's access control and visibility).\n\nFor more information about `GITHUB_TOKEN` used in GitHub Actions workflows, see Automatic token authentication.\n\n## Managing packages\nYou can delete a package in the GitHub user interface or using the REST API. For more information, see Deleting and restoring a package and the REST API endpoints for packages. For certain registries, you can use GraphQL to delete a version of a private package.\n\nYou cannot use the GitHub Packages GraphQL API with registries that support granular permissions. For the registries that **only** support repository-scoped permissions, and can be used with the GraphQL API, see About permissions for GitHub Packages.\n\nWhen you use the GraphQL API to query and delete private packages, you must use the same personal access token (classic) you use to authenticate to GitHub Packages.\n\nFor more information, see Forming calls with GraphQL.\n\nYou can configure webhooks to subscribe to package-related events, such as when a package is published or updated.\n\n## Contacting support\nIf you have feedback or feature requests for GitHub Packages, use a GitHub Community discussion.\n\nContact us through the GitHub Support portal about GitHub Packages if:\n\n- You experience anything that contradicts the documentation\n- You encounter vague or unclear errors\n- Your published package contains sensitive data, such as GDPR violations, API Keys, or personally identifying information.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Configuring a package's access control and visibility?\n\nAssistant: Choose who has read, write, or admin access to your package and the visibility of your packages on GitHub.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages. For more information, see GitHub’s plans.\n\n## In this article\nA package can inherit its visibility and access permissions from a repository, or, for registries that support granular permissions, you can set the visibility and permissions of the package separately from a repository.\n\nFor the list of registries that support granular permissions, and for more information about permissions for packages, packages-related scopes for PATs, or managing permissions for your GitHub Actions workflows, see About permissions for GitHub Packages.\n\n## About inheritance of access permissions\nIn registries that support granular permissions, packages are scoped to a personal account or organization. In these registries, you can publish a package without linking the package to a repository, then determine who can access the package by setting access permissions and visibility in the package's settings.\n\nBy default, if you publish a package that is linked to a repository, the package automatically inherits the access permissions (but not the visibility) of the linked repository. For example, a user who has read access to the linked repository will also have read access to the package. When a package automatically inherits access permissions, GitHub Actions workflows in the linked repository also automatically get access to the package.\n\nA package only inherits the access permissions of a linked repository automatically if you link the repository to the package before you publish the package, such as by adding the org.opencontainers.image.source Docker label to a container image. If you connect a published package to a repository from the package's settings page, the package will retain its existing access permissions, and will not inherit the access permissions of the repository unless you explicitly select this option. Additionally, organizations can disable automatic inheritance of access permissions for all new packages scoped to their organization. For more information, see Disabling automatic inheritance of access permissions in an organization below.\n\nWhen a package inherits permissions from a repository, to grant or remove access to your package, you must configure the permissions settings of the linked repository. If you want to set a package's access settings separately from the repository linked to the package, you must remove the inherited permissions from the package. For more information, see Selecting whether a package inherits permissions from a repository below.\n\nIf you publish a package in a registry that only supports repository-scoped permissions, the package is always linked to a repository, and always inherits the permissions of the linked repository.\n\n## About setting visibility and access permissions for packages\nIf a package belongs to a registry that supports granular permissions, anyone with admin permissions to the package can set the package to private or public, and can grant access permissions for the package that are separate from the permissions set at the organization and repository levels. For the list of registries that support granular permissions, see About permissions for GitHub Packages.\n\nIn most registries, to pull a package, you must authenticate with a personal access token or GITHUB_TOKEN, regardless of whether the package is public or private. However, in the Container registry, public packages allow anonymous access and can be pulled without authentication or signing in via the CLI.\n\nNote\n\nIf you publish a package that is linked to a repository, the package inherits its permissions from the linked repository by default. To access the package's granular permissions settings, you must remove the package's inherited permissions. If you're the owner of an organization, you can disable the automatic inheritance of permissions for all new packages scoped to your organization. For more information, see Configuring a package's access control and visibility and Configuring a package's access control and visibility.\n\nWhen you publish a package, you automatically get admin permissions to the package. If you publish a package to an organization, anyone with the owner role in the organization also gets admin permissions to the package.\n\nFor packages scoped to a personal account, you can give any person an access role. For packages scoped to an organization, you can give any person or team in the organization an access role.\n\nIf you are using a GitHub Actions workflow to manage your packages, you can grant an access role to the repository the workflow is stored in by using the Add Repository button under \"Manage Actions access\" in the package's settings.\n\n## Configuring access to packages for your personal account\nIf you have admin permissions to a package that's scoped to a personal account, you can assign read, write, or admin roles to other users. For more information about these permission roles, see About inheritance of access permissions.\n\nIf your package is private or internal and scoped to an organization, then you can only give access to other organization members or teams.\n\n1. Search for and then click the name of the package that you want to manage.\n\n2. On your package's landing page, on the right-hand side, click Package settings.\n\n3. Under \"Manage access\" or \"Inherited access\", click Invite teams or people and enter the name, username, or email of the person you want to give access. Teams cannot be given access to a package that is scoped to a personal account.\n\n4. Next to the username or team name, use the Role drop-down menu to select a desired permission level.\n\nThe selected users will automatically be given access and don't need to accept an invitation first.\n\n## Configuring access to packages for an organization\nIf you have admin permissions to a package that is scoped to an organization, you can assign read, write, or admin roles to other users and teams. For more information about these permission roles, see About inheritance of access permissions.\n\nIf your package is private or internal and scoped to an organization, then you can only give access to other organization members or teams.\n\n1. On GitHub, navigate to the main page of your organization.\n\n2. Under your organization name, click the Packages tab.\n\n3. Search for and then click the name of the package that you want to manage.\n\n4. On your package's landing page, on the right-hand side, click Package settings.\n\n5. Under \"Manage access\" or \"Inherited access\", click Invite teams or people and enter the name, username, or email of the person you want to give access. You can also enter a team name from the organization to give all team members access.\n\n6. Next to the username or team name, use the Role drop-down menu to select a desired permission level.\n\nThe selected users or teams will automatically be given access and don't need to accept an invitation first.\n\n## Selecting whether a package inherits permissions from a repository\nBy default, if you publish a package that is linked to a repository, the package inherits the access permissions of the linked repository. We recommend you let packages inherit their permissions from a repository, because this simplifies the process of managing access to a package.\n\nWhen a package inherits permissions from a repository, to grant or remove access to your package, you must configure the permissions of the linked repository.\n\nIf you want to configure a package's access settings on a granular level, separately from the linked repository, you must remove the inherited permissions from the package.\n\nNote\n\nIf you change how a package gets its access permissions, any existing permissions for the package are overwritten.\n\n## Selecting the inheritance setting for packages scoped to your personal account\n1. On GitHub, navigate to the main page of your personal account.\n\n2. In the top right corner of GitHub, click your profile photo, then click Your profile.\n\n3. On your profile page, in the header, click the Packages tab.\n\n4. Search for and then click the name of the package that you want to manage.\n\n5. On your package's landing page, on the right-hand side, click Package settings.\n\n6. To choose whether a package inherits access permissions from the linked repository, under \"Manage access\" or \"Inherited access\", select or deselect Inherit access from repository (recommended).\n\n## Selecting the inheritance setting for packages scoped to an organization\nTip\n\nIf you're the owner of an organization, you can prevent all new packages scoped to your organization from automatically inheriting permissions from a linked repository.\n\n1. On GitHub, navigate to the main page of your organization.\n\n2. Under your organization name, click the Packages tab.\n\n3. Search for and then click the name of the package that you want to manage.\n\n4. On your package's landing page, on the right-hand side, click Package settings.\n\n5. To choose whether a package inherits access permissions from the linked repository, under \"Manage access\" or \"Inherited access\", select or deselect Inherit access from repository (recommended).\n\n## Disabling automatic inheritance of access permissions in an organization\nBy default, if you publish a package that is linked to a repository, the package automatically inherits the access permissions of the linked repository. As an organization owner, you can disable automatic inheritance for all packages scoped to your organization.\n\nIf you disable automatic inheritance of access permissions, new packages scoped to your organization will not automatically inherit the permissions of a linked repository. However, anyone with admin permissions to a package in your organization will be able to enable or disable inheritance of permissions for that package.\n\n## Ensuring workflow access to your package\nFor packages scoped to a personal account or an organization, to ensure that a GitHub Actions workflow has access to your package, you must give explicit access to the repository where the workflow is stored.\n\nThe specified repository does not need to be the repository where the source code for the package is kept. You can give multiple repositories workflow access to a package.\n\nIf you publish a package that is linked to a repository, GitHub Actions workflows in the linked repository automatically get access to the package, unless your organization has disabled the automatic inheritance of access permissions.\n\n## GitHub Actions access for packages scoped to personal accounts\n1. Search for and then click the name of the package that you want to manage.\n\n2. On your package's landing page, on the right-hand side, click Package settings.\n\n3. To ensure your workflow has access to your package, you must add the repository where the workflow is stored. Under \"Manage Actions access\", click Add repository and search for the repository you want to add.\n\n## GitHub Actions access for packages scoped to organizations\n1. On GitHub, navigate to the main page of your organization.\n\n2. Under your organization name, click the Packages tab.\n\n3. Search for and then click the name of the package that you want to manage.\n\n4. On your package's landing page, on the right-hand side, click Package settings.\n\n5. Under \"Manage Actions access\", click Add repository and search for the repository you want to add.\n\n## Ensuring GitHub Codespaces access to your package\nBy default, a codespace can seamlessly access certain packages in registries that support granular permissions, such as packages published in the same repository with the Inherit access option selected. Otherwise, to ensure that a codespace has access to your package, you must grant access to the repository where the codespace is being launched.\n\n## Configuring visibility of packages for your personal account\nWhen you first publish a package that is scoped to your personal account, the default visibility is private and only you can see the package. You can modify a private or public package's access by changing the access settings.\n\n## Package creation visibility for organization members\nFor registries that support granular permissions, you can choose the visibility of packages that organization members can publish by default.\n\n## Configuring visibility of packages for an organization\nWhen you first publish a package, the default visibility is private and only you can see the package. You can grant users or teams different access roles for your package through the access settings. Once you make your package public, you cannot make your package private again.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What are the best practices for Configuring a package's access control and visibility?\n\nAssistant: Here are the recommended best practices:\n\n• If you publish a package that is linked to a repository, the package inherits its permissions from the linked repository by default.\n• We recommend you let packages inherit their permissions from a repository, because this simplifies the process of managing access to a package.\n• If you're the owner of an organization, you can prevent all new packages scoped to your organization from automatically inheriting permissions from a linked repository.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Publishing a package?\n\nAssistant: You can publish a package to GitHub Packages to make the package available for others to download and re-use.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nAnyone with write permissions for a repository can publish a package to that repository.\n\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages. For more information, see GitHub’s plans.\n\n## About published packages\nYou can help people understand and use your package by providing a description and other details like installation and usage instructions on the package page. GitHub provides metadata for each version, such as the publication date, download activity, and recent versions. For an example package page, see @Codertocat/hello-world-npm.\n\nYou can publish packages in a public repository (public packages) to share with all of GitHub, or in a private repository (private packages) to share with collaborators or an organization. A repository can be connected to more than one package. To prevent confusion, make sure the README and description clearly provide information about each package.\n\nIf a new version of a package fixes a security vulnerability, you should publish a security advisory in your repository. GitHub reviews each published security advisory and may use it to send Dependabot alerts to affected repositories. For more information, see About repository security advisories.\n\n## Publishing a package\nNote\n\nGitHub Packages only supports authentication using a personal access token (classic). For more information, see Managing your personal access tokens.\n\nYou can publish a package to GitHub Packages using any supported package client by following the same general guidelines.\n\n1. Create or use an existing personal access token (classic) with the appropriate scopes for the task you want to accomplish. For more information, see About permissions for GitHub Packages.\n2. Authenticate to GitHub Packages using your personal access token (classic) and the instructions for your package client.\n3. Publish the package using the instructions for your package client.\n\nFor instructions specific to your package client, see Working with a GitHub Packages registry.\n\nAfter you publish a package, you can view the package on GitHub. For more information, see Viewing packages.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What are the best practices for Publishing a package?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure the README and description clearly provide information about each package.\n• If a new version of a package fixes a security vulnerability, publish a security advisory in your repository.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Viewing packages?\n\nAssistant: You can see details about packages published to a repository, and narrow results by organization or user.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nYou must have at least read permissions to view a package.\n\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages. For more information, see GitHub’s plans.\n\n## About package views\nYour ability to view a package depends on several factors. By default, you can view all packages you have published.\n\nRepository-scoped packages inherit their permissions and visibility from the repository in which the package is published. Some registries **only** support repository-scoped packages. For a list of these registries, see About permissions for GitHub Packages.\n\nOther registries offer you the option of granular permissions and visibility settings that can be customized for each package scoped to a personal account or organization. You can choose to use granular permissions or connect the package to a repository and inherit the repository's permissions. For more information, see Connecting a repository to a package and Configuring a package's access control and visibility.\n\nOn the package page, GitHub provides metadata for each version, such as the publication date. You can see details about the package, including a description and installation and usage instructions. You can download any assets associated with the package and see information about download activity. For an example package page, see @Codertocat/hello-world-npm.\n\n## Viewing a repository's packages\nYou can find and view a package located in a particular repository.\n\n1. On GitHub, navigate to the main page of the repository.\n\n2. In the right sidebar of your repository, click **Packages**.\n\n3. Search for and then click the name of the package that you want to view.\n\n## Viewing an organization's packages\nYou can find and view a package located in the repositories of an organization you belong to.\n\n1. In the upper-right corner of GitHub, select your profile photo, then click **Your organizations**.\n2. Click the name of your organization.\n3. Under your organization name, click **Packages**.\n4. Search for and then click the name of the package that you want to view.\n\n## Viewing your packages\nYou can find and view any package you've published across all organizations and repositories.\n\n1. On GitHub, navigate to the main page of your personal account.\n\n2. In the top right corner of GitHub, click your profile photo, then click **Your profile**.\n\n3. On your profile page, in the header, click the **Packages** tab.\n\n4. Search for and then click the name of the package that you want to view.\n\n## Further reading\n- Searching for packages\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Quickstart for GitHub Packages?\n\nAssistant: Publish to GitHub Packages with GitHub Actions.\n\nHere's a detailed explanation:\n\n\n## Introduction\nIn this guide, you'll create a GitHub Actions workflow to test your code and then publish it to GitHub Packages.\n\n## Publishing your package\n01. Create a new repository on GitHub, adding the `.gitignore` for Node. For more information, see [Creating a new repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-new-repository).\n\n02. Clone the repository to your local machine.\n\n\n    ```hljs shell\n    git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git\n    cd YOUR-REPOSITORY\n    ```\n\n03. Create an `index.js` file and add a basic alert to say \"Hello world!\"\n\n\n    ```hljs javascript\n    console.log(\"Hello, World!\");\n    ```\n\n04. Initialize an npm package with `npm init`. In the package initialization wizard, enter your package with the name: _`@YOUR-USERNAME/YOUR-REPOSITORY`_, and set the test script to `exit 0`. This will generate a `package.json` file with information about your package.\n\n\n    ```hljs shell\n    $ npm init\n      ...\n      package name: @YOUR-USERNAME/YOUR-REPOSITORY\n      ...\n      test command: exit 0\n      ...\n    ```\n\n05. Run `npm install` to generate the `package-lock.json` file, then commit and push your changes to GitHub.\n\n\n    ```hljs shell\n    npm install\n    git add index.js package.json package-lock.json\n    git commit -m \"initialize npm package\"\n    git push\n    ```\n\n06. Create a `.github/workflows` directory. In that directory, create a file named `release-package.yml`.\n\n07. Copy the following YAML content into the `release-package.yml` file.\n\n\n    ```hljs yaml\n    name: Node.js Package\n\n    on:\n      release:\n        types: [created]\n\n    jobs:\n      build:\n        runs-on: ubuntu-latest\n        steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n      - run: npm ci\n      - run: npm test\n\n    publish-gpr:\n        needs: build\n        runs-on: ubuntu-latest\n        permissions:\n          packages: write\n          contents: read\n        steps:\n          - uses: actions/checkout@v4\n          - uses: actions/setup-node@v4\n            with:\n              node-version: 20\n              registry-url: https://npm.pkg.github.com/\n          - run: npm ci\n          - run: npm publish\n            env:\n              NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}\n    ```\n\n08. Tell npm which scope and registry to publish packages to using one of the following methods:\n    - Add an npm configuration file for the repository by creating a `.npmrc` file in the root directory with the contents:\n\n      ```hljs shell\n      @YOUR-USERNAME:registry=https://npm.pkg.github.com\n      ```\n\n    - Edit the `package.json` file and specify the `publishConfig` key:\n\n      ```hljs shell\n      \"publishConfig\": {\n        \"@YOUR-USERNAME:registry\": \"https://npm.pkg.github.com\"\n      }\n      ```\n09. Commit and push your changes to GitHub.\n\n\n    ```hljs shell\n    $ git add .github/workflows/release-package.yml\n    # Also add the file you created or edited in the previous step.\n    $ git add .npmrc or package.json\n    $ git commit -m \"workflow to publish package\"\n    $ git push\n    ```\n\n10. The workflow that you created will run whenever a new release is created in your repository. If the tests pass, then the package will be published to GitHub Packages.\n\n    To test this out, navigate to the **Code** tab in your repository and create a new release. For more information, see [Managing releases in a repository](https://docs.github.com/en/github/administering-a-repository/managing-releases-in-a-repository#creating-a-release).\n\n## Viewing your published package\nYou can view all of the packages you have published.\n\n1. On GitHub, navigate to the main page of the repository.\n\n2. In the right sidebar of your repository, click **Packages**.\n\n   ![Screenshot of the sidebar of a repository page. The \"Packages\" section is outlined in orange.](https://docs.github.com/assets/cb-208326/images/help/package-registry/packages-from-repo.png)\n\n3. Search for and then click the name of the package that you want to view.\n\n## Installing a published package\nNow that you've published the package, you'll want to use it as a dependency across your projects. For more information, see [Working with the npm registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry#installing-a-package).\n\n## Next steps\nThe basic workflow you just added runs any time a new release is created in your repository. But this is only the beginning of what you can do with GitHub Packages. You can publish your package to multiple registries with a single workflow, trigger the workflow to run on different events such as a merged pull request, manage containers, and more.\n\nCombining GitHub Packages and GitHub Actions can help you automate nearly every aspect of your application development processes. Ready to get started? Here are some helpful resources for taking your next steps with GitHub Packages and GitHub Actions:\n\n- [Learn GitHub Packages](https://docs.github.com/en/packages/learn-github-packages) for an in-depth tutorial on GitHub Packages\n- [Writing workflows](https://docs.github.com/en/actions/learn-github-actions) for an in-depth tutorial on GitHub Actions\n- [Working with a GitHub Packages registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry) for specific uses cases and examples\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: Can you show me some code examples for Quickstart for GitHub Packages?\n\nAssistant: Here are some code examples:\n\n### Clone the repository\n```yaml\ngit clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git\ncd YOUR-REPOSITORY\n```\n\n### Create index.js file\n```yaml\nconsole.log(\"Hello, World!\");\n```\n\n### Initialize npm package\n```yaml\n$ npm init\n  ...\n  package name: @YOUR-USERNAME/YOUR-REPOSITORY\n  ...\n  test command: exit 0\n  ...\n```\n\n### Run npm install and push changes\n```yaml\nnpm install\ngit add index.js package.json package-lock.json\ngit commit -m \"initialize npm package\"\ngit push\n```\n\n### YAML content for release-package.yml\n```yaml\nname: Node.js Package\n\non:\n  release:\n    types: [created]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n  - uses: actions/checkout@v4\n  - uses: actions/setup-node@v4\n    with:\n      node-version: 20\n  - run: npm ci\n  - run: npm test\n\npublish-gpr:\n    needs: build\n    runs-on: ubuntu-latest\n    permissions:\n      packages: write\n      contents: read\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          registry-url: https://npm.pkg.github.com/\n      - run: npm ci\n      - run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```\n\n### Add npm configuration\n```yaml\n@YOUR-USERNAME:registry=https://npm.pkg.github.com\n```\n\n### Edit package.json for publishConfig\n```yaml\n\"publishConfig\": {\n  \"@YOUR-USERNAME:registry\": \"https://npm.pkg.github.com\"\n}\n```\n\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What are the best practices for Quickstart for GitHub Packages?\n\nAssistant: Here are the recommended best practices:\n\n• Create a new repository with a .gitignore for Node.\n• Use npm init to set up your package correctly.\n• Ensure to run npm install to generate package-lock.json before pushing changes.\n• Use GitHub Actions to automate the publishing process on release creation.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is About permissions for GitHub Packages?\n\nAssistant: Learn about how to manage permissions for your packages.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages. For more information, see GitHub’s plans.\n\n## In this article\nThe permissions for packages can be scoped either to a user or an organization or to a repository.\n\n## Granular permissions for user/organization-scoped packages\nPackages with granular permissions are scoped to a personal account or organization. You can change the access control and visibility of the package separately from a repository that is connected (or linked) to a package.\n\nThe following GitHub Packages registries support granular permissions.\n\n- Container registry\n- npm registry\n- NuGet registry\n- RubyGems registry\n\n## Permissions for repository-scoped packages\nA repository-scoped package inherits the permissions and visibility of the repository in which the package is published. You can find a package scoped to a repository by going to the main page of the repository and clicking the Packages link to the right of the page. For more information, see Connecting a repository to a package.\n\nThe following GitHub Packages registries only support repository-scoped permissions.\n\n- Apache Maven registry\n- Gradle registry\n\nFor other registries, you can choose to allow packages to be scoped to a user or an organization, or linked to a repository.\n\n## Visibility and access permissions for packages\nIf a package belongs to a registry that supports granular permissions, anyone with admin permissions to the package can set the package to private or public, and can grant access permissions for the package that are separate from the permissions set at the organization and repository levels. For the list of registries that support granular permissions, see About permissions for GitHub Packages.\n\nIn most registries, to pull a package, you must authenticate with a personal access token or GITHUB_TOKEN, regardless of whether the package is public or private. However, in the Container registry, public packages allow anonymous access and can be pulled without authentication or signing in via the CLI.\n\nNote\n\nIf you publish a package that is linked to a repository, the package inherits its permissions from the linked repository by default. To access the package's granular permissions settings, you must remove the package's inherited permissions. If you're the owner of an organization, you can disable the automatic inheritance of permissions for all new packages scoped to your organization. For more information, see Configuring a package's access control and visibility and Configuring a package's access control and visibility.\n\nWhen you publish a package, you automatically get admin permissions to the package. If you publish a package to an organization, anyone with the owner role in the organization also gets admin permissions to the package.\n\nFor packages scoped to a personal account, you can give any person an access role. For packages scoped to an organization, you can give any person or team in the organization an access role.\n\nIf you are using a GitHub Actions workflow to manage your packages, you can grant an access role to the repository the workflow is stored in by using the Add Repository button under \"Manage Actions access\" in the package's settings. For more information, see Configuring a package's access control and visibility.\n\n## About scopes and permissions for package registries\nGitHub Packages only supports authentication using a personal access token (classic). For more information, see Managing your personal access tokens.\n\nTo use or manage a package hosted by a package registry, you must use a personal access token (classic) with the appropriate scope, and your personal account must have appropriate permissions.\n\nFor example:\n\n- To download and install packages from a repository, your personal access token (classic) must have the read:packages scope, and your user account must have read permission.\n- To delete a package, your personal access token (classic) must at least have the delete:packages and read:packages scope. For more information, see Deleting and restoring a package.\n\n## About repository transfers\nYou can transfer a repository to another personal account or organization. For more information, see Transferring a repository.\n\nWhen you transfer a repository, GitHub may transfer the packages associated with the repository, depending on the registry the packages belong to.\n\n- For registries that support granular permissions, packages are scoped to a personal account or organization, and the account associated with the package does not change when you transfer a repository. If you have linked a package to a repository, the link is removed when you transfer the repository to another user. Any codespaces or GitHub Actions workflows associated with the repository will lose access to the package. If the package inherited its access permissions from the linked repository, users will lose access to the package.\n- For registries that only support repository-scoped permissions, packages are published directly to repositories, and GitHub transfers the packages associated with a repository as part of the repository transfer. All billable usage associated with the packages will subsequently be billed to the new owner of the repository. If the previous repository owner is removed as a collaborator on the repository, they may no longer be able to access the packages associated with the repository.\n\n## Maintaining access to packages in GitHub Actions workflows\nTo ensure your workflows will maintain access to your packages, ensure that you're using the right access token in your workflow and that you've enabled GitHub Actions access to your package.\n\n## Access tokens\nTo publish, install, delete, and restore packages associated with the workflow repository, use GITHUB_TOKEN.\n- To install packages associated with other private repositories that GITHUB_TOKEN can't access, use a personal access token (classic)\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: Can you show me some code examples for About permissions for GitHub Packages?\n\nAssistant: Here are some code examples:\n\n### Permissions Table\n```yaml\n| Permission | Access description |\n| --- | --- |\n| Read | Can download package. <br> Can read package metadata. |\n| Write | Can upload and download this package. <br> Can read and write package metadata. |\n| Admin | Can upload, download, delete, and manage this package. <br> Can read and write package metadata. <br> Can grant package permissions.\n```\n\n### Scope Table\n```yaml\n| Scope | Description | Required permission |\n| --- | --- | --- |\n| `read:packages` | Download and install packages from GitHub Packages | read |\n| `write:packages` | Upload and publish packages to GitHub Packages | write |\n| `delete:packages` | Delete packages from GitHub Packages | admin |\n```\n\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What are the best practices for About permissions for GitHub Packages?\n\nAssistant: Here are the recommended best practices:\n\n• If you publish a package that is linked to a repository, the package inherits its permissions from the linked repository by default. To access the package's granular permissions settings, you must remove the package's inherited permissions.\n• If you're the owner of an organization, you can disable the automatic inheritance of permissions for all new packages scoped to your organization.\n• When you create a GitHub Actions workflow, you can use the GITHUB_TOKEN to publish, install, delete, and restore packages in GitHub Packages without needing to store and manage a personal access token.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Learn GitHub Packages?\n\nAssistant: You can find out more about using packages in GitHub, including publishing new packages to GitHub Packages, view and install existing packages, and, in special circumstances, delete existing packages.\n\nHere's a detailed explanation:\n\n\n## Introduction to GitHub Packages\nGitHub Packages is a software package hosting service that allows you to host your software packages privately or publicly and use packages as dependencies in your projects.\n\n## About permissions for GitHub Packages\nLearn about how to manage permissions for your packages.\n\n## Configuring a package's access control and visibility\nChoose who has read, write, or admin access to your package and the visibility of your packages on GitHub.\n\n## Connecting a repository to a package\nYou can connect a repository to a package on GitHub.\n\n## Publishing a package\nYou can publish a package to GitHub Packages to make the package available for others to download and re-use.\n\n## Viewing packages\nYou can see details about packages published to a repository, and narrow results by organization or user.\n\n## Installing a package\nYou can install a package from GitHub Packages and use the package as a dependency in your own project.\n\n## Deleting and restoring a package\nLearn how to delete or restore a package.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Connecting a repository to a package?\n\nAssistant: You can connect a repository to a package on GitHub.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages. For more information, see GitHub’s plans.\n\n## In this article\nWhen you publish a package that is scoped to a personal account or an organization, the package is not linked to a repository by default. If you connect a package to a repository, the package's landing page will show information and links from the repository, such as the README. You can also choose to have the package inherit its access permissions from the linked repository. For more information, see Configuring a package's access control and visibility.\n\n## Connecting a repository to a user-scoped package on GitHub\n1. On GitHub, navigate to the main page of your personal account.\n\n2. In the top right corner of GitHub, click your profile photo, then click **Your profile**.\n\n3. On your profile page, in the header, click the **Packages** tab.\n\n4. Search for and then click the name of the package that you want to manage.\n\n5. Under your package versions, click **Connect repository**.\n\n6. Select a repository to link to the package, then click **Connect repository**.\n\n## Connecting a repository to an organization-scoped package on GitHub\n1. On GitHub, navigate to the main page of your organization.\n\n2. Under your organization name, click the **Packages** tab.\n\n3. Search for and then click the name of the package that you want to manage.\n\n4. Under your package versions, click **Connect repository**.\n\n5. Select a repository to link to the package, then click **Connect repository**.\n\n## Connecting a repository to a container image using the command line\nNote\n\nIf you publish a package that is linked to a repository, the package automatically inherits the access permissions of the linked repository, and GitHub Actions workflows in the linked repository automatically get access to the package, unless your organization has disabled automatic inheritance of access permissions. For more information, see Configuring a package's access control and visibility.\n\n1. In your Dockerfile, add this line, replacing `OWNER` and `REPO` with your details:\n\n\n```hljs shell\nLABEL org.opencontainers.image.source=https://github.com/OWNER/REPO\n```\n\nFor example, if you're the user `octocat` and own `my-repo` you would add this line to your Dockerfile:\n\n```hljs shell\nLABEL org.opencontainers.image.source=https://github.com/octocat/my-repo\n```\n\nFor more information, see LABEL in the official Docker documentation and Pre-defined Annotation Keys in the opencontainers/image-spec repository.\n\n2. Build your container image. This example builds an image from the Dockerfile in the current directory and assigns the image name `hello_docker`.\n\n```hljs shell\ndocker build -t hello_docker .\n```\n\n3. Optionally, review the details of the Docker image you just created.\n\n```hljs shell\n$ docker images\n> REPOSITORY          TAG         IMAGE ID       CREATED         SIZE\n> hello_docker        latest      142e665b1faa   5 seconds ago   125MB\n> redis               latest      afb5e116cac0   3 months ago    111MB\n> alpine              latest      a6215f271958   5 months ago    5.29MB\n```\n\n4. Assign a name and hosting destination to your Docker image.\n\n```hljs shell\ndocker tag IMAGE_NAME ghcr.io/NAMESPACE/NEW_IMAGE_NAME:TAG\n```\n\nReplace `NAMESPACE` with the name of the personal account or organization to which you want the package to be scoped.\n\nFor example:\n\n```hljs shell\ndocker tag 38f737a91f39 ghcr.io/octocat/hello_docker:latest\n```\n\n5. If you haven't already, authenticate to the Container registry. For more information, see Working with the Container registry.\n\n```hljs shell\n$ echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin\n> Login Succeeded\n```\n\n6. Push your container image to the Container registry.\n\n```hljs shell\ndocker push ghcr.io/NAMESPACE/IMAGE-NAME:TAG\n```\n\nFor example:\n\n```hljs shell\ndocker push ghcr.io/octocat/hello_docker:latest\n```\n\n## Unlinking a repository from a package on GitHub\nNote\n\nUnlinking a package from a repository will remove the repository information from the package's landing page and can affect the access pattern depending on whether the package inherits its access permissions from the repository. For more information, see Configuring a package's access control and visibility. This behavior does not apply to Apache Maven packages, as outlined in About permissions for GitHub Packages.\n\n1. On GitHub, navigate to the settings page of the Package you'd like to unlink.\n\n2. On the Package settings page, you will see a Repository source section. If this section is not present, then the Package is not currently linked to a repository.\n\n3. Click on the trash icon in the top right corner of the Repository source section.\n\nIt is possible that the Repository source section exists, but there is no trash icon present. This is because a repository source has been defined as part of the packaged code i.e. a package.json file, .gemspec file, however, it is not actually linked to a repository on GitHub. To link the package to a repository, you will need to follow the steps in the section above.\n\n1. Confirm that you would like to unlink the repository from the package with the dialogue.\n\n## Migrating a package to another repository\nIf you currently have a package linked to a repository and you would like to link it to a different repository, this can be done by unlinking the package from the current repository and linking it to the new repository.\n\n1. Follow the steps to unlink it, see Unlinking a repository from a package on GitHub.\n2. Follow the steps to link the package to the new repository, see Connecting a repository to an organization-scoped package on GitHub or Connecting a repository to a user-scoped package on GitHub.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: Can you show me some code examples for Connecting a repository to a package?\n\nAssistant: Here are some code examples:\n\n### Add LABEL to Dockerfile\n```yaml\nLABEL org.opencontainers.image.source=https://github.com/OWNER/REPO\n```\n\n### Example of adding LABEL to Dockerfile\n```yaml\nLABEL org.opencontainers.image.source=https://github.com/octocat/my-repo\n```\n\n### Build Docker image\n```yaml\ndocker build -t hello_docker .\n```\n\n### Review Docker images\n```yaml\n$ docker images\n> REPOSITORY          TAG         IMAGE ID       CREATED         SIZE\n> hello_docker        latest      142e665b1faa   5 seconds ago   125MB\n> redis               latest      afb5e116cac0   3 months ago    111MB\n> alpine              latest      a6215f271958   5 months ago    5.29MB\n```\n\n### Tag Docker image\n```yaml\ndocker tag IMAGE_NAME ghcr.io/NAMESPACE/NEW_IMAGE_NAME:TAG\n```\n\n### Example of tagging Docker image\n```yaml\ndocker tag 38f737a91f39 ghcr.io/octocat/hello_docker:latest\n```\n\n### Authenticate to Container registry\n```yaml\n$ echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin\n> Login Succeeded\n```\n\n### Push Docker image to Container registry\n```yaml\ndocker push ghcr.io/NAMESPACE/IMAGE-NAME:TAG\n```\n\n### Example of pushing Docker image\n```yaml\ndocker push ghcr.io/octocat/hello_docker:latest\n```\n\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What are the best practices for Connecting a repository to a package?\n\nAssistant: Here are the recommended best practices:\n\n• GitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans.\n• Accounts using legacy per-repository plans cannot access registries that support granular permissions.\n• If you publish a package that is linked to a repository, the package automatically inherits the access permissions of the linked repository.\n• Unlinking a package from a repository will remove the repository information from the package's landing page.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Working with a GitHub Packages registry?\n\nAssistant: Learn how to use a supported GitHub Packages registry.\n\nHere's a detailed explanation:\n\n\n## Working with the Container registry\nYou can store and manage Docker and OCI images in the Container registry.\n\n## Working with the Docker registry\nThe Docker registry has now been replaced by the Container registry.\n\n## Working with the RubyGems registry\nYou can configure RubyGems to publish a package to GitHub Packages and to use packages stored on GitHub Packages as dependencies in a Ruby project with Bundler.\n\n## Working with the npm registry\nYou can configure npm to publish packages to GitHub Packages and to use packages stored on GitHub Packages as dependencies in an npm project.\n\n## Working with the Apache Maven registry\nYou can configure Apache Maven to publish packages to GitHub Packages and to use packages stored on GitHub Packages as dependencies in a Java project.\n\n## Working with the Gradle registry\nYou can configure Gradle to publish packages to the GitHub Packages Gradle registry and to use packages stored on GitHub Packages as dependencies in a Java project.\n\n## Working with the NuGet registry\nYou can configure the `dotnet` command-line interface (CLI) to publish NuGet packages to GitHub Packages and to use packages stored on GitHub Packages as dependencies in a .NET project.\n\n## Migrating to the Container registry from the Docker registry\nGitHub will migrate Docker images previously stored in the Docker registry on GitHub to the Container registry.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Publishing and installing a package with GitHub Actions?\n\nAssistant: You can configure a workflow in GitHub Actions to automatically publish or install a package from GitHub Packages.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages. For more information, see GitHub’s plans.\n\n## In this article\n\n\n## About GitHub Packages with GitHub Actions\nGitHub Actions help you automate your software development workflows in the same place you store code and collaborate on pull requests and issues. You can write individual tasks, called actions, and combine them to create a custom workflow. With GitHub Actions you can build end-to-end continuous integration (CI) and continuous deployment (CD) capabilities directly in your repository. For more information, see Writing workflows.\n\nYou can extend the CI and CD capabilities of your repository by publishing or installing packages as part of your workflow.\n\n## Authenticating to package registries with granular permissions\nSome GitHub Packages registries support granular permissions. This means you can choose to allow packages to be scoped to a user or an organization, or linked to a repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages.\n\nFor registries that support granular permissions, if your GitHub Actions workflow is using a personal access token to authenticate to a registry, we highly recommend you update your workflow to use the `GITHUB_TOKEN`. For guidance on updating your workflows that authenticate to a registry with a personal access token, see Publishing and installing a package with GitHub Actions.\n\nNote\n\nThe ability for GitHub Actions workflows to delete and restore packages using the REST API is currently in public preview and subject to change.\n\nYou can use a `GITHUB_TOKEN` in a GitHub Actions workflow to delete or restore a package using the REST API, if the token has `admin` permission to the package. Repositories that publish packages using a workflow, and repositories that you have explicitly connected to packages, are automatically granted `admin` permission to packages in the repository.\n\nFor more information about the `GITHUB_TOKEN`, see Automatic token authentication. For more information about the best practices when using a registry in actions, see Security hardening for GitHub Actions.\n\n## Authenticating to package registries with repository-scoped permissions\nSome GitHub Packages registries only support repository-scoped permissions, and do not support granular permissions. For a list of these registries, see About permissions for GitHub Packages.\n\nIf you want your workflow to access a GitHub Packages registry that does not support granular permissions, then we recommend using the `GITHUB_TOKEN` that GitHub automatically creates for your repository when you enable GitHub Actions. You should set the permissions for this access token in the workflow file to grant read access for the `contents` scope and write access for the `packages` scope. For forks, the `GITHUB_TOKEN` is granted read access for the parent repository. For more information, see Automatic token authentication.\n\nYou can reference the `GITHUB_TOKEN` in your workflow file using the `${{ secrets.GITHUB_TOKEN }}` context.\n\n## About permissions and package access\n\n\n## Packages scoped to users or organizations\nRegistries that support granular permissions allow users to create and administer packages as free-standing resources at the organization level. Packages can be scoped to an organization or personal account and you can customize access to each of your packages separately from repository permissions.\n\nAll workflows accessing registries that support granular permissions should use the `GITHUB_TOKEN` instead of a personal access token. For more information about security best practices, see Security hardening for GitHub Actions.\n\n## Packages scoped to repositories\nWhen you enable GitHub Actions, GitHub installs a GitHub App on your repository. The `GITHUB_TOKEN` secret is a GitHub App installation access token. You can use the installation access token to authenticate on behalf of the GitHub App installed on your repository. The token's permissions are limited to the repository that contains your workflow. For more information, see Automatic token authentication.\n\nGitHub Packages allows you to push and pull packages through the `GITHUB_TOKEN` available to a GitHub Actions workflow.\n\n## Default permissions and access settings for packages modified through workflows\nFor packages in registries that support granular permissions, when you create, install, modify, or delete a package through a workflow, there are some default permission and access settings used to ensure admins have access to the workflow. You can adjust these access settings as well. For the list of registries that support granular permissions, see About permissions for GitHub Packages.\n\nFor example, by default if a workflow creates a package using the `GITHUB_TOKEN`, then:\n\n- The package inherits the visibility and permissions model of the repository where the workflow is run.\n- Repository admins where the workflow is run become the admins of the package once the package is created.\n\nThese are more examples of how default permissions work for workflows that manage packages.\n\n| GitHub Actions workflow task | Default permissions and access |\n| --- | --- |\n| Download an existing | \\- If the package is public, any workflow running in any repository can download the package. <br> \\- If the package is internal, then all workflows running in any repository owned by the Enterprise account can download the package. For enterprise-owned organizations, you can read any repository in the enterprise <br> \\- If the package is private, only workflows running in repositories that are given read permission on that package can download the package. If you grant a public repository access to private packages, forks of the repository may be able to access the private packages. |\n| Upload a new version to an existing package | \\- If the package is private, internal, or public, only workflows running in repositories that are given write permission on that package can upload new versions to the package. |\n| Delete a package or versions of a package | \\- If the package is private, internal, or public, only workflows running in repositories that are given admin permission can delete existing versions of the package. |\n\nYou can also adjust access to packages in a more granular way or adjust some of the default permissions behavior. For more information, see Configuring a package's access control and visibility.\n\n## Publishing a package using an action\nYou can use GitHub Actions to automatically publish packages as part of your continuous integration (CI) flow. This approach to continuous deployment (CD) allows you to automate the creation of new package versions, if the code meets your quality standards. For example, you could create a workflow that runs CI tests every time a developer pushes code to a particular branch. If the tests pass, the workflow can publish a new package version to GitHub Packages.\n\nConfiguration steps vary by package client. For general information about configuring a workflow for GitHub Actions, see Writing workflows.\n\nThe following example demonstrates how you can use GitHub Actions to build your app, and then automatically create a Docker image and publish it to GitHub Packages. The relevant settings are explained in the code. For full details about each element in a workflow, see Workflow syntax for GitHub Actions.\n\nCreate a new workflow file in your repository (such as `.github/workflows/deploy-image.yml`), and add the following YAML.\n\nNote\n\n- This workflow uses actions that are not certified by GitHub. They are provided by a third-party and are governed by separate terms of service, privacy policy, and support documentation.\n- GitHub recommends pinning actions to a commit SHA. To get a newer version, you will need to update the SHA. You can also reference a tag or branch, but the action may change without warning.\n\n## Installing a package using an action\nYou can install packages as part of your CI flow using GitHub Actions. For example, you could configure a workflow so that anytime a developer pushes code to a pull request, the workflow resolves dependencies by downloading and installing packages hosted by GitHub Packages. Then, the workflow can run CI tests that require the dependencies.\n\nInstalling packages hosted by GitHub Packages through GitHub Actions requires minimal configuration or additional authentication when you use the `GITHUB_TOKEN`. Data transfer is also free when an action installs a package. For more information, see About billing for GitHub Packages.\n\n## Upgrading a workflow that accesses a registry using a personal access token\nGitHub Packages supports the `GITHUB_TOKEN` for easy and secure authentication in your workflows. If you're using a registry that supports granular permissions, and your workflow is using a personal access token to authenticate to the registry, then we highly recommend you update your workflow to use the `GITHUB_TOKEN`.\n\nFor more information about the `GITHUB_TOKEN`, see Automatic token authentication.\n\nUsing the `GITHUB_TOKEN`, instead of a personal access token (classic) with the `repo` scope, increases the security of your repository as you don't need to use a long-lived personal access token that offers unnecessary access to the repository where your workflow is run. For more information about security best practices, see Security hardening for GitHub Actions.\n\n1. Navigate to your package landing page.\n\n2. To ensure your package has access to your workflow, you must add the repository where the workflow is stored to your package. Under \"Manage Actions access\", click **Add repository** and search for the repository you want to add.\n\n![Screenshot of the \"Manage Actions access\" section of the package settings page. The \"Add repository\" button is highlighted with an orange outline.](https://docs.github.com/assets/cb-57116/images/help/package-registry/add-repository-button.png)\n\nNote\n\nAdding a repository to your package by using the **Add Repository** button under \"Manage Actions access\" in the package's settings is different than connecting your package to a repository. For more information, see Configuring a package's access control and visibility and Connecting a repository to a package.\n\n3. Optionally, use the **Role** drop-down menu to select the default access level that you'd like the repository to have to your package.\n\n4. Open your workflow file. On the line where you log in to the registry, replace your personal access token with `${{ secrets.GITHUB_TOKEN }}`.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: Can you show me some code examples for Publishing and installing a package with GitHub Actions?\n\nAssistant: Here are some code examples:\n\n### Create and publish a Docker image\n```yaml\nname: Create and publish a Docker image\n\non:\n  push:\n    branches: ['release']\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  build-and-push-image:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n      attestations: write\n      id-token: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n      - name: Build and push Docker image\n        id: push\n        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n      - name: Generate artifact attestation\n        uses: actions/attest-build-provenance@v2\n        with:\n          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}\n          subject-digest: ${{ steps.push.outputs.digest }}\n          push-to-registry: true\n```\n\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What are the best practices for Publishing and installing a package with GitHub Actions?\n\nAssistant: Here are the recommended best practices:\n\n• GitHub recommends pinning actions to a commit SHA. To get a newer version, you will need to update the SHA. You can also reference a tag or branch, but the action may change without warning.\n• Using the `GITHUB_TOKEN`, instead of a personal access token (classic) with the `repo` scope, increases the security of your repository as you don't need to use a long-lived personal access token that offers unnecessary access to the repository where your workflow is run.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Installing a package?\n\nAssistant: You can install a package from GitHub Packages and use the package as a dependency in your own project.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nYou can install any package that you have permission to view.\n\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see [About permissions for GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages). For more information, see [GitHub’s plans](https://docs.github.com/en/get-started/learning-about-github/githubs-plans).\n\n## In this article\n\n\n## About package installation\nYou can search on GitHub to find packages in GitHub Packages that you can install in your own project. For more information, see [Searching for packages](https://docs.github.com/en/search-github/searching-on-github/searching-for-packages).\n\nAfter you find a package, you can read the package's description and installation and usage instructions on the package page.\n\n## Installing a package\nYou can install a package from GitHub Packages using any supported package client by following the same general guidelines.\n\n1. Authenticate to GitHub Packages using the instructions for your package client. For more information, see [Introduction to GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages#authenticating-to-github-packages).\n2. Install the package using the instructions for your package client.\n\nFor instructions specific to your package client, see [Working with a GitHub Packages registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry).\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Deleting and restoring a package?\n\nAssistant: Learn how to delete or restore a package.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see [About permissions for GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages). For more information, see [GitHub’s plans](https://docs.github.com/en/get-started/learning-about-github/githubs-plans).\n\n## Package deletion and restoration support on GitHub\nOn GitHub if you have the required access, you can delete:\n\n- An entire private package\n- An entire public package, if there's not more than 5000 downloads of any version of the package\n- A specific version of a private package\n- A specific version of a public package, if the package version doesn't have more than 5,000 downloads\n\nNote\n\n- You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact us through the [GitHub Support portal](https://support.github.com/) for further assistance.\n- When deleting public packages, be aware that you may break projects that depend on your package.\n\nOn GitHub, you can also restore an entire package or package version, if:\n\n- You restore the package within 30 days of its deletion.\n- The same package namespace is still available and not used for a new package.\n\n## Packages API support\nNote\n\nGitHub Packages only supports authentication using a personal access token (classic). For more information, see [Managing your personal access tokens](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\n\nYou can use the REST API to manage your packages. For more information, see the [REST API endpoints for packages](https://docs.github.com/en/rest/packages).\n\nNote\n\nThe ability for GitHub Actions workflows to delete and restore packages using the REST API is currently in public preview and subject to change.\n\nWith registries that support granular permissions, you can use a `GITHUB_TOKEN` in a GitHub Actions workflow to delete or restore packages using the REST API. The token must have `admin` permission to the package. If your workflow publishes a package, the `admin` role is granted by default to the repository where the workflow is stored. For existing packages not published by a workflow, you need to grant the repository the `admin` role to be able to use a GitHub Actions workflow to delete or restore packages using the REST API. For more information, see [Configuring a package's access control and visibility](https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility#ensuring-workflow-access-to-your-package).\n\nFor certain registries, you can use GraphQL to delete a version of a private package.\n\nYou cannot use the GitHub Packages GraphQL API with registries that support granular permissions. For the registries that **only** support repository-scoped permissions, and can be used with the GraphQL API, see [About permissions for GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\n\n## Required permissions to delete or restore a package\nWith registries that support granular permissions, you can choose to allow packages to be scoped to a user or an organization, or linked to a repository.\n\nTo delete a package that has granular permissions separate from a repository, such as container images stored at `https://ghcr.io/NAMESPACE/PACKAGE-NAME` or packages stored at `https://npm.pkg.github.com/NAMESPACE/PACKAGE-NAME` (where `NAMESPACE` is the name of the personal account or organization to which the package is scoped), you must have admin access to the package. For more information, see [About permissions for GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages).\n\nFor packages that inherit their access permissions from repositories, you can delete a package if you have admin permissions to the repository.\n\nSome registries **only** support repository-scoped packages. For a list of these registries, see [About permissions for GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\n\n## Deleting a package version\n### Deleting a version of a repository-scoped package on GitHub\n\nTo delete a version of a repository-scoped package, you must have admin permissions to the repository in which the package is published. For more information, see [Required permissions](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#required-permissions-to-delete-or-restore-a-package).\n\n1. On GitHub, navigate to the main page of the repository.\n\n2. In the right sidebar of your repository, click **Packages**.\n\n3. Search for and then click the name of the package that you want to manage.\n\n4. Under the \"Recent Versions\" list of packages, click **View and manage all versions**.\n\n5. In the list of packages, find the version of the package that you want to delete.\n   - _If your package is a container_, to the right of the package version click , then select **Delete version** from the dropdown menu.\n   - _For types of packages other than containers_, to the right of the package version click **Delete**.\n6. To confirm deletion, type the package name and click **I understand the consequences, delete this version**.\n\n## Deleting a version of a repository-scoped package with GraphQL\nFor certain registries, you can use GraphQL to delete a version of a private package.\n\nYou cannot use the GitHub Packages GraphQL API with registries that support granular permissions. For the registries that **only** support repository-scoped permissions, and can be used with the GraphQL API, see [About permissions for GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages). For information on using the REST API instead, see the [REST API endpoints for packages](https://docs.github.com/en/rest/packages).\n\nUse the `deletePackageVersion` mutation in the GraphQL API. You must use a personal access token (classic) with the `read:packages`, `delete:packages`, and `repo` scopes. For more information about personal access tokens (classic), see [Introduction to GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages#authenticating-to-github-packages).\n\nThe following example demonstrates how to delete a package version, using a `packageVersionId` of `MDIyOlJlZ2lzdHJ5UGFja2FnZVZlcnNpb243MTExNg.\n\n```hljs shell\ncurl -X POST \\\n-H \"Accept: application/vnd.github.package-deletes-preview+json\" \\\n-H \"Authorization: bearer TOKEN\" \\\n-d '{\"query\":\"mutation { deletePackageVersion(input:{packageVersionId:\\\"MDIyOlJlZ2lzdHJ5UGFja2FnZVZlcnNpb243MTExNg==\\\"}) { success }}\"}' \\\nHOSTNAME/graphql\n```\n\nTo find all of the private packages you have published to GitHub Packages, along with the version IDs for the packages, you can use the `packages` connection through the `repository` object. You will need a personal access token (classic) with the `read:packages` and `repo` scopes. For more information, see the [`packages`](https://docs.github.com/en/graphql/reference/objects#repository) connection or the [`PackageOwner`](https://docs.github.com/en/graphql/reference/interfaces#packageowner) interface.\n\nFor more information about the `deletePackageVersion` mutation, see [Mutations](https://docs.github.com/en/graphql/reference/mutations#deletepackageversion).\n\nYou cannot directly delete an entire package using GraphQL, but if you delete every version of a package, the package will no longer show on GitHub.\n\n## Deleting a version of a user-scoped package on GitHub\nTo delete a specific version of a user-scoped package on GitHub, such as for a Docker image at `ghcr.io`, use these steps. To delete an entire package, see [Deleting an entire user-scoped package on GitHub](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#deleting-an-entire-user-scoped-package-on-github).\n\nTo review who can delete a package version, see [Required permissions](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#required-permissions-to-delete-or-restore-a-package).\n\n1. On GitHub, navigate to the main page of your personal account.\n\n2. In the top right corner of GitHub, click your profile photo, then click **Your profile**.\n\n3. On your profile page, in the header, click the **Packages** tab.\n\n4. Search for and then click the name of the package that you want to manage.\n\n5. On your package's landing page, on the right-hand side, click **Package settings**.\n\n6. Under the \"Recent Versions\" list of packages, click **View and manage all versions**.\n\n7. In the list of packages, find the version of the package that you want to delete.\n   - _If your package is a container_, to the right of the package version click , then select **Delete version** from the dropdown menu.\n   - _For types of packages other than containers_, to the right of the package version click **Delete**.\n8. In the confirmation box, type the name of the package to confirm you want to delete the chosen version of it.\n9. Click **I understand the consequences, delete this version**.\n\n## Deleting a version of an organization-scoped package on GitHub\nTo delete a specific version of an organization-scoped package on GitHub, such as for a Docker image at `ghcr.io`, use these steps.\nTo delete an entire package, see [Deleting an entire organization-scoped package on GitHub](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#deleting-an-entire-organization-scoped-package-on-github).\n\nTo review who can delete a package version, see [Required permissions to delete or restore a package](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#required-permissions-to-delete-or-restore-a-package).\n\n1. On GitHub, navigate to the main page of your organization.\n\n2. Under your organization name, click the **Packages** tab.\n\n3. Search for and then click the name of the package that you want to manage.\n\n4. On your package's landing page, on the right-hand side, click **Package settings**.\n\n5. Under the \"Recent Versions\" list of packages, click **View and manage all versions**.\n\n6. In the list of packages, find the version of the package that you want to delete.\n   - _If your package is a container_, to the right of the package version click , then select **Delete version** from the dropdown menu.\n   - _For types of packages other than containers_, to the right of the package version click **Delete**.\n7. In the confirmation box, type the name of the package to confirm you want to delete the chosen version of it.\n8. Click **I understand the consequences, delete this version**.\n\n## Deleting an entire package\n### Deleting an entire repository-scoped package on GitHub\n\nTo delete an entire repository-scoped package, you must have admin permissions to the repository that owns the package. For more information, see [Required permissions](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#required-permissions-to-delete-or-restore-a-package).\n\n1. On GitHub, navigate to the main page of the repository.\n\n2. In the right sidebar of your repository, click **Packages**.\n\n3. Search for and then click the name of the package that you want to manage.\n\n4. On your package's landing page, on the right-hand side, click **Package settings**.\n\n5. At the bottom of the page, under \"Danger Zone\", click **Delete this package**.\n\n6. To confirm, review the confirmation message, enter your package name, and click **I understand, delete this package.**\n\n## Deleting an entire user-scoped package on GitHub\nTo review who can delete a package, see [Required permissions](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#required-permissions-to-delete-or-restore-a-package).\n\n1. On GitHub, navigate to the main page of your personal account.\n\n2. In the top right corner of GitHub, click your profile photo, then click **Your profile**.\n\n3. On your profile page, in the header, click the **Packages** tab.\n\n4. Search for and then click the name of the package that you want to manage.\n\n5. On your package's landing page, on the right-hand side, click **Package settings**.\n\n6. At the bottom of the page, under \"Danger zone\", click **Delete this package**.\n\n7. In the confirmation box, type the name of the package to confirm you want to delete it.\n\n8. Click **I understand the consequences, delete this package**.\n\n## Deleting an entire organization-scoped package on GitHub\nTo review who can delete a package, see [Required permissions](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#required-permissions-to-delete-or-restore-a-package).\n\n1. On GitHub, navigate to the main page of your organization.\n\n2. Under your organization name, click the **Packages** tab.\n\n3. Search for and then click the name of the package that you want to manage.\n\n4. On your package's landing page, on the right-hand side, click **Package settings**.\n\n5. At the bottom of the page, under \"Danger zone\", click **Delete this package**.\n\n6. In the confirmation box, type the name of the package to confirm you want to delete it.\n\n7. Click **I understand the consequences, delete this package**.\n\n## Restoring packages\nYou can restore a deleted package or version if:\n\n- You restore the package within 30 days of its deletion.\n- The same package namespace and version is still available and not reused for a new package.\n\nFor example, if you're the user `octocat`, and you have a deleted RubyGems package named `my-package` that was scoped to the repo `octocat/my-repo`, then you can only restore the package if the package namespace `rubygem.pkg.github.com/octocat/my-repo/my-package` is still available, and 30 days have not yet passed.\n\nTo restore a deleted package, you must also meet one of these permission requirements:\n\n- For repository-scoped packages: You have admin permissions to the repository in which the deleted package is published.\n- For user-account scoped packages: The deleted package is scoped to your personal account.\n- For organization-scoped packages: You have admin permissions to the deleted package in the organization to which the package is scoped.\n\nFor more information, see [Required permissions](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#required-permissions-to-delete-or-restore-a-package).\n\nOnce the package is restored, the package will use the same namespace it did before. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.\n\n## Restoring a package in an organization\nYou can restore a deleted package through your organization account settings, as long as the package was in a repository owned by the organization or had granular permissions and was scoped to your organization account.\n\nTo review who can restore a package in an organization, see [Required permissions](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#required-permissions-to-delete-or-restore-a-package).\n\n1. On GitHub, navigate to the main page of the organization.\n\n2. Under your organization name, click **Settings**. If you cannot see the \"Settings\" tab, select the  dropdown menu, then click **Settings**.\n\n3. On the left, click **Packages**.\n\n4. Under \"Deleted Packages\", next to the package you want to restore, click **Restore**.\n\n5. To confirm, type the name of the package and click **I understand the consequences, restore this package**.\n\n## Restoring a user-account scoped package\nYou can restore a deleted package through your personal account settings, if the package was in one of your repositories or scoped to your personal account. For more information, see [Required permissions](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#required-permissions-to-delete-or-restore-a-package).\n\n1. In the upper-right corner of any page on GitHub, click your profile photo, then click **Settings**.\n2. In the left sidebar, click **Packages**.\n3. Under \"Deleted Packages\", next to the package you want to restore, click **Restore**.\n4. To confirm, type the name of the package and click **I understand the consequences, restore this package**.\n\n## Restoring a package version\nYou can restore a package version from your package's landing page. To review who can restore a package, see [Required permissions](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package#required-permissions-to-delete-or-restore-a-package).\n\n1. Navigate to your package's landing page.\n\n2. Search for and then click the name of the package that you want to manage.\n\n3. On your package's landing page, on the right-hand side, click **Package settings**.\n\n4. Under the \"Recent Versions\" list of packages, click **View and manage all versions**.\n\n5. At the top right corner of the list of package versions, use the **Select versions view** dropdown and select **Deleted**.\n\n6. Next to the deleted package version you want to restore, click **Restore**.\n\n7. To confirm, click **I understand the consequences, restore this version.**\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: Can you show me some code examples for Deleting and restoring a package?\n\nAssistant: Here are some code examples:\n\n### Delete a package version using GraphQL\n```yaml\ncurl -X POST \\\n-H \"Accept: application/vnd.github.package-deletes-preview+json\" \\\n-H \"Authorization: bearer TOKEN\" \\\n-d '{\"query\":\"mutation { deletePackageVersion(input:{packageVersionId:\\\"MDIyOlJlZ2lzdHJ5UGFja2FnZVZlcnNpb243MTExNg==\\\"}) { success }}\"}' \\\nHOSTNAME/graphql\n\n```\n\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What are the best practices for Deleting and restoring a package?\n\nAssistant: Here are the recommended best practices:\n\n• You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub Support for further assistance.\n• When deleting public packages, be aware that you may break projects that depend on your package.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Working with the npm registry?\n\nAssistant: You can configure npm to publish packages to GitHub Packages and to use packages stored on GitHub Packages as dependencies in an npm project.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages. For more information, see GitHub’s plans.\n\n## Authenticating to GitHub Packages\nGitHub Packages only supports authentication using a personal access token (classic). For more information, see Managing your personal access tokens.\n\nYou need an access token to publish, install, and delete private, internal, and public packages.\n\nYou can use a personal access token (classic) to authenticate to GitHub Packages or the GitHub API. When you create a personal access token (classic), you can assign the token different scopes depending on your needs. For more information about packages-related scopes for a personal access token (classic), see About permissions for GitHub Packages.\n\nTo authenticate to a GitHub Packages registry within a GitHub Actions workflow, you can use:\n\n- `GITHUB_TOKEN` to publish packages associated with the workflow repository.\n- A personal access token (classic) with at least `read:packages` scope to install packages associated with other private repositories ( `GITHUB_TOKEN` can be used if the repository is granted read access to the package. See Configuring a package's access control and visibility).\n\n## Authenticating in a GitHub Actions workflow\nThis registry supports granular permissions. For registries that support granular permissions, if your GitHub Actions workflow is using a personal access token to authenticate to a registry, we highly recommend you update your workflow to use the `GITHUB_TOKEN`. For guidance on updating your workflows that authenticate to a registry with a personal access token, see Publishing and installing a package with GitHub Actions.\n\nThe ability for GitHub Actions workflows to delete and restore packages using the REST API is currently in public preview and subject to change.\n\nYou can use a `GITHUB_TOKEN` in a GitHub Actions workflow to delete or restore a package using the REST API, if the token has `admin` permission to the package. Repositories that publish packages using a workflow, and repositories that you have explicitly connected to packages, are automatically granted `admin` permission to packages in the repository.\n\nFor more information about the `GITHUB_TOKEN`, see Automatic token authentication. For more information about the best practices when using a registry in actions, see Security hardening for GitHub Actions.\n\n## Authenticating with a personal access token\nYou must use a personal access token (classic) with the appropriate scopes to publish and install packages in GitHub Packages. For more information, see Introduction to GitHub Packages.\n\nYou can authenticate to GitHub Packages with npm by either editing your per-user `~/.npmrc` file to include your personal access token (classic) or by logging in to npm on the command line using your username and personal access token.\n\nTo authenticate by adding your personal access token (classic) to your `~/.npmrc` file, edit the `~/.npmrc` file for your project to include the following line, replacing TOKEN with your personal access token. Create a new `~/.npmrc` file if one doesn't exist.\n\n```shell\n//npm.pkg.github.com/:_authToken=TOKEN\n```\n\nTo authenticate by logging in to npm, use the `npm login` command, replacing USERNAME with your GitHub username, TOKEN with your personal access token (classic), and PUBLIC-EMAIL-ADDRESS with your email address.\n\nIf you are using npm CLI version 9 or greater and are logging in or out of a private registry using the command line, you should use the `--auth-type=legacy` option to read in your authentication details from prompts instead of using the default login flow through a browser. For more information, see `npm-login`.\n\nIf GitHub Packages is not your default package registry for using npm and you want to use the `npm audit` command, we recommend you use the `--scope` flag with the namespace that hosts the package when you authenticate to GitHub Packages.\n\n```shell\n$ npm login --scope=@NAMESPACE --auth-type=legacy --registry=https://npm.pkg.github.com\n\n> Username: USERNAME\n> Password: TOKEN\n```\n\n## Publishing a package\nThe GitHub Packages registry stores npm packages within your organization or personal account, and allows you to associate a package with a repository. You can choose whether to inherit permissions from a repository, or set granular permissions independently of a repository.\n\nWhen you first publish a package, the default visibility is private. To change the visibility or set access permissions, see Configuring a package's access control and visibility. For more information on linking a published package with a repository, see Connecting a repository to a package.\n\nYou can connect a package to a repository as soon as the package is published by including a `repository` field in the `package.json` file. You can also use this method to connect multiple packages to the same repository. For more information, see Publishing multiple packages to the same repository.\n\nIf you publish a package that is linked to a repository, the package automatically inherits the access permissions of the linked repository, and GitHub Actions workflows in the linked repository automatically get access to the package, unless your organization has disabled automatic inheritance of access permissions. For more information, see Configuring a package's access control and visibility.\n\nYou can set up the scope mapping for your project using either a local `.npmrc` file in the project or using the `publishConfig` option in the `package.json`. GitHub Packages only supports scoped npm packages. Scoped packages have names with the format of `@NAMESPACE/PACKAGE-NAME`. Scoped packages always begin with an `@` symbol. You may need to update the name in your `package.json` to use the scoped name. For example, if you're the user `octocat` and your package is named `test`, you would assign the scoped package name as follows: \"name\": \"@octocat/test\".\n\nAfter you publish a package, you can view the package on GitHub.\n\n## Publishing a package using a local `.npmrc` file\nYou can use an `.npmrc` file to configure the scope mapping for your project. In the `.npmrc` file, use the GitHub Packages URL and account owner so GitHub Packages knows where to route package requests. Using an `.npmrc` file prevents other developers from accidentally publishing the package to npmjs.org instead of GitHub Packages.\n\n1. Authenticate to GitHub Packages.\n\n2. In the same directory as your `package.json` file, create or edit an `.npmrc` file to include a line specifying GitHub Packages URL and the namespace where the package is hosted. Replace `NAMESPACE` with the name of the user or organization account to which the package will be scoped.\n\n```shell\n@NAMESPACE:registry=https://npm.pkg.github.com\n```\n\n3. Add the _.npmrc_ file to the repository where GitHub Packages can find your project.\n\n4. Verify the name of your package in your project's `package.json`. The `name` field must contain the scope and the name of the package. For example, if your package is called \"test\", and you are publishing it to the \"My-org\" GitHub organization, the `name` field in your `package.json` should be `@my-org/test`.\n\n5. Verify the `repository` field in your project's `package.json`. The `repository` field must match the URL for your GitHub repository.\n\n6. Publish the package:\n\n```shell\nnpm publish\n```\n\n## Publishing a package using `publishConfig` in the `package.json` file\nYou can use `publishConfig` element in the `package.json` file to specify the registry where you want the package published.\n\n1. Edit the `package.json` file for your package and include a `publishConfig` entry.\n\n```shell\n\"publishConfig\": {\n     \"registry\": \"https://npm.pkg.github.com\"\n},\n```\n\n2. Verify the `repository` field in your project's `package.json`.\n\n3. Publish the package:\n\n```shell\nnpm publish\n```\n\n## Publishing multiple packages to the same repository\nTo publish multiple packages and link them to the same repository, you can include the URL of the GitHub repository in the `repository` field of the `package.json` file for each package.\n\nGitHub Packages will match the repository based on the URL.\n\n```shell\n\"repository\":\"https://github.com/OWNER/REPOSITORY\",\n```\n\n## Installing a package\nYou can install packages from GitHub Packages by adding the packages as dependencies in the `package.json` file for your project. By default, you can add packages from one organization.\n\nYou also need to add the `.npmrc` file to your project so that all requests to install packages will go through GitHub Packages. When you route all package requests through GitHub Packages, you can use both scoped and unscoped packages from npmjs.org.\n\n1. Authenticate to GitHub Packages.\n\n2. In the same directory as your `package.json` file, create or edit an `.npmrc` file to include a line specifying GitHub Packages URL and the namespace where the package is hosted.\n\n```shell\n@NAMESPACE:registry=https://npm.pkg.github.com\n```\n\n3. Add the _.npmrc_ file to the repository where GitHub Packages can find your project.\n\n4. Configure `package.json` in your project to use the package you are installing. To add your package dependencies to the `package.json` file for GitHub Packages, specify the full-scoped package name, such as `@my-org/server`.\n\n```json\n{\n     \"name\": \"@my-org/server\",\n     \"version\": \"1.0.0\",\n     \"description\": \"Server app that uses the ORGANIZATION_NAME/PACKAGE_NAME package\",\n     \"main\": \"index.js\",\n     \"author\": \"\",\n     \"license\": \"MIT\",\n     \"dependencies\": {\n       \"ORGANIZATION_NAME/PACKAGE_NAME\": \"1.0.0\"\n     }\n}\n```\n\n5. Install the package.\n\n```shell\nnpm install\n```\n\n## Installing packages from other organizations\nBy default, you can only use GitHub Packages packages from one organization. If you'd like to route package requests to multiple organizations and users, you can add additional lines to your `.npmrc` file, replacing `NAMESPACE` with the name of the personal account or organization to which the package is scoped.\n\n```shell\n@NAMESPACE:registry=https://npm.pkg.github.com\n@NAMESPACE:registry=https://npm.pkg.github.com\n```\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: Can you show me some code examples for Working with the npm registry?\n\nAssistant: Here are some code examples:\n\n### Authenticate to GitHub Packages\n```yaml\n//npm.pkg.github.com/:_authToken=TOKEN\n```\n\n### Login to npm\n```yaml\n$ npm login --scope=@NAMESPACE --auth-type=legacy --registry=https://npm.pkg.github.com\n\n> Username: USERNAME\n> Password: TOKEN\n```\n\n### Publishing a package using a local `.npmrc` file\n```yaml\n@NAMESPACE:registry=https://npm.pkg.github.com\n```\n\n### Publishing a package using `publishConfig` in the `package.json` file\n```yaml\n\"publishConfig\": {\n     \"registry\": \"https://npm.pkg.github.com\"\n}\n```\n\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What are the best practices for Working with the npm registry?\n\nAssistant: Here are the recommended best practices:\n\n• Use a personal access token (classic) with the appropriate scopes to publish and install packages in GitHub Packages.\n• When using npm CLI version 9 or greater, use the `--auth-type=legacy` option for logging in or out of a private registry.\n• If GitHub Packages is not your default package registry, use the `--scope` flag with the namespace that hosts the package when using the `npm audit` command.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Working with the Container registry?\n\nAssistant: You can store and manage Docker and OCI images in the Container registry.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages. For more information, see GitHub’s plans.\n\n## In this article\n\n\n## About the Container registry\nThe Container registry stores container images within your organization or personal account, and allows you to associate an image with a repository. You can choose whether to inherit permissions from a repository, or set granular permissions independently of a repository. You can also access public container images anonymously.\n\n## About Container registry support\nThe Container registry currently supports the following container image formats:\n\n- Docker Image Manifest V2, Schema 2\n- Open Container Initiative (OCI) Specifications\n\nWhen installing or publishing a Docker image, the Container registry supports foreign layers, such as Windows images.\n\n## Authenticating to the Container registry\nNote\n\nGitHub Packages only supports authentication using a personal access token (classic). For more information, see Managing your personal access tokens.\n\nYou need an access token to publish, install, and delete private, internal, and public packages.\n\nYou can use a personal access token (classic) to authenticate to GitHub Packages or the GitHub API. When you create a personal access token (classic), you can assign the token different scopes depending on your needs. For more information about packages-related scopes for a personal access token (classic), see About permissions for GitHub Packages.\n\nTo authenticate to a GitHub Packages registry within a GitHub Actions workflow, you can use:\n\n- GITHUB_TOKEN to publish packages associated with the workflow repository.\n- A personal access token (classic) with at least read:packages scope to install packages associated with other private repositories ( GITHUB_TOKEN can be used if the repository is granted read access to the package. See Configuring a package's access control and visibility).\n\n## Authenticating in a GitHub Actions workflow\nThis registry supports granular permissions. For registries that support granular permissions, if your GitHub Actions workflow is using a personal access token to authenticate to a registry, we highly recommend you update your workflow to use the GITHUB_TOKEN. For guidance on updating your workflows that authenticate to a registry with a personal access token, see Publishing and installing a package with GitHub Actions.\n\nNote\n\nThe ability for GitHub Actions workflows to delete and restore packages using the REST API is currently in public preview and subject to change.\n\nYou can use a GITHUB_TOKEN in a GitHub Actions workflow to delete or restore a package using the REST API, if the token has admin permission to the package. Repositories that publish packages using a workflow, and repositories that you have explicitly connected to packages, are automatically granted admin permission to packages in the repository.\n\nFor more information about the GITHUB_TOKEN, see Automatic token authentication. For more information about the best practices when using a registry in actions, see Security hardening for GitHub Actions.\n\n## Authenticating with a personal access token (classic)\nNote\n\nGitHub Packages only supports authentication using a personal access token (classic). For more information, see Managing your personal access tokens.\n\n1. Create a new personal access token (classic) with the appropriate scopes for the tasks you want to accomplish. If your organization requires SSO, you must enable SSO for your new token.\n\nBy default, when you select the write:packages scope for your personal access token (classic) in the user interface, the repo scope will also be selected. The repo scope offers unnecessary and broad access, which we recommend you avoid using for GitHub Actions workflows in particular. For more information, see Security hardening for GitHub Actions. As a workaround, you can select just the write:packages scope for your personal access token (classic) in the user interface with this url: https://github.com/settings/tokens/new?scopes=write:packages.\n\n   - Select the read:packages scope to download container images and read their metadata.\n   - Select the write:packages scope to download and upload container images and read and write their metadata.\n   - Select the delete:packages scope to delete container images.\n\nFor more information, see Managing your personal access tokens.\n\n2. Save your personal access token (classic). We recommend saving your token as an environment variable.\n\n```shell\nexport CR_PAT=YOUR_TOKEN\n```\n\n3. Using the CLI for your container type, sign in to the Container registry service at ghcr.io.\n\n```shell\necho $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin\n> Login Succeeded\n```\n\n## Pushing container images\nThis example pushes the latest version of IMAGE_NAME.\n\n```shell\ndocker push ghcr.io/NAMESPACE/IMAGE_NAME:latest\n```\n\nReplace NAMESPACE with the name of the personal account or organization to which you want the image to be scoped.\n\nThis example pushes the 2.5 version of the image.\n\n```shell\ndocker push ghcr.io/NAMESPACE/IMAGE_NAME:2.5\n```\n\nWhen you first publish a package, the default visibility is private. To change the visibility or set access permissions, see Configuring a package's access control and visibility. You can link a published package to a repository using the user interface or command line. For more information, see Connecting a repository to a package.\n\nWhen you push a container image from the command line, the image is not linked to a repository by default. This is the case even if you tag the image with a namespace that matches the name of the repository, such as ghcr.io/octocat/my-repo:latest.\n\nThe easiest way to connect a repository to a container package is to publish the package from a workflow using ${ {secrets.GITHUB_TOKEN}} , as the repository that contains the workflow is linked automatically. Note that the GITHUB_TOKEN will not have permission to push the package if you have previously pushed a package to the same namespace, but have not connected the package to the repository.\n\nTo connect a repository when publishing an image from the command line, and to ensure your GITHUB_TOKEN has appropriate permissions when using a GitHub Actions workflow, we recommend adding the label org.opencontainers.image.source to your Dockerfile.\n\n## Pulling container images\n\n\n## Pull by digest\nTo ensure you're always using the same image, you can specify the exact container image version you want to pull by the digest SHA value.\n\n1. To find the digest SHA value, use docker inspect or docker pull and copy the SHA value after Digest:\n\n```shell\ndocker inspect ghcr.io/NAMESPACE/IMAGE_NAME\n```\n\nReplace NAMESPACE with the name of the personal account or organization to which the image is scoped.\n\n2. Remove image locally as needed.\n\n```shell\ndocker rmi ghcr.io/NAMESPACE/IMAGE_NAME:latest\n```\n\n3. Pull the container image with @YOUR_SHA_VALUE after the image name.\n\n```shell\ndocker pull ghcr.io/NAMESPACE/IMAGE_NAME@sha256:82jf9a84u29hiasldj289498uhois8498hjs29hkuhs\n```\n\n## Pull by name\n```shell\ndocker pull ghcr.io/NAMESPACE/IMAGE_NAME\n```\n\nReplace NAMESPACE with the name of the personal account or organization to which the image is scoped.\n\n## Pull by name and version\nDocker CLI example showing an image pulled by its name and the 1.14.1 version tag:\n\n```shell\n$ docker pull ghcr.io/NAMESPACE/IMAGE_NAME:1.14.1\n> 5e35bd43cf78: Pull complete\n> 0c48c2209aab: Pull complete\n> fd45dd1aad5a: Pull complete\n> db6eb50c2d36: Pull complete\n> Digest: sha256:ae3b135f133155b3824d8b1f62959ff8a72e9cf9e884d88db7895d8544010d8e\n> Status: Downloaded newer image for ghcr.io/NAMESPACE/IMAGE_NAME/release:1.14.1\n> ghcr.io/NAMESPACE/IMAGE_NAME/release:1.14.1\n```\n\n## Pull by name and latest version\n```shell\n$ docker pull ghcr.io/NAMESPACE/IMAGE_NAME:latest\n> latest: Pulling from NAMESPACE/IMAGE_NAME\n> Digest: sha256:b3d3e366b55f9a54599220198b3db5da8f53592acbbb7dc7e4e9878762fc5344\n> Status: Downloaded newer image for ghcr.io/NAMESPACE/IMAGE_NAME:latest\n> ghcr.io/NAMESPACE/IMAGE_NAME:latest\n```\n\n## Building container images\nThis example builds the hello_docker image:\n\n```shell\ndocker build -t hello_docker .\n```\n\n## Tagging container images\n1. Find the ID for the Docker image you want to tag.\n\n```shell\n$ docker images\n> REPOSITORY                                            TAG                 IMAGE ID            CREATED             SIZE\n> ghcr.io/my-org/hello_docker         latest            38f737a91f39        47 hours ago        91.7MB\n> hello-world                                           latest              fce289e99eb9        16 months ago       1.84kB\n```\n\n2. Tag your Docker image using the image ID and your desired image name and hosting destination.\n\n```shell\ndocker tag 38f737a91f39 ghcr.io/NAMESPACE/NEW_IMAGE_NAME:latest\n```\n\n## Labelling container images\nYou can use pre-defined annotation keys to add metadata including a description, a license, and a source repository to your container image. Values for supported keys will appear on the package page for the image.\n\nFor most images, you can use Docker labels to add the annotation keys to an image. For more information, see LABEL in the official Docker documentation and Pre-Defined Annotation Keys in the opencontainers/image-spec repository.\n\nFor multi-arch images, you can add a description to the image by adding the appropriate annotation key to the annotations field in the image's manifest. For more information, see Adding a description to multi-arch images.\n\nThe following annotation keys are supported in the Container registry.\n\n| Key | Description |\n| --- | --- |\n| org.opencontainers.image.source | The URL of the repository associated with the package. For more information, see Connecting a repository to a package. |\n| org.opencontainers.image.description | A text-only description limited to 512 characters. This description will appear on the package page, below the name of the package. |\n| org.opencontainers.image.licenses | An SPDX license identifier such as \"MIT,\" limited to 256 characters. The license will appear on the package page, in the \"Details\" sidebar. |\n\nTo add a key as a Docker label, we recommend using the LABEL instruction in your Dockerfile. For example, if you're the user octocat and you own my-repo, and your image is distributed under the terms of the MIT license, you would add the following lines to your Dockerfile:\n\n```dockerfile\nLABEL org.opencontainers.image.source=https://github.com/octocat/my-repo\nLABEL org.opencontainers.image.description=\"My container image\"\nLABEL org.opencontainers.image.licenses=MIT\n```\n\n## Adding a description to multi-arch images\nA multi-arch image is an image that supports multiple architectures. It works by referencing a list of images, each supporting a different architecture, within a single manifest.\n\nThe description that appears on the package page for a multi-arch image is obtained from the annotations field in the image's manifest. Like Docker labels, annotations provide a way to associate metadata with an image, and support pre-defined annotation keys.\n\nTo provide a description for a multi-arch image, set a value for the org.opencontainers.image.description key in the annotations field of the manifest, as follows.\n\n```json\n\"annotations\": {\n  \"org.opencontainers.image.description\": \"My multi-arch image\"\n}\n```\n\n## Troubleshooting\n- The Container registry has a 10 GB size limit for each layer.\n- The Container registry has a 10 minute timeout limit for uploads.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: Can you show me some code examples for Working with the Container registry?\n\nAssistant: Here are some code examples:\n\n### Exporting Personal Access Token\n```yaml\nexport CR_PAT=YOUR_TOKEN\n```\n\n### Docker Login Command\n```yaml\n$ echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin\n> Login Succeeded\n```\n\n### Pushing Latest Image\n```yaml\ndocker push ghcr.io/NAMESPACE/IMAGE_NAME:latest\n```\n\n### Pushing Specific Version Image\n```yaml\ndocker push ghcr.io/NAMESPACE/IMAGE_NAME:2.5\n```\n\n### Pulling by Digest\n```yaml\ndocker inspect ghcr.io/NAMESPACE/IMAGE_NAME\n```\n\n### Removing Local Image\n```yaml\ndocker rmi ghcr.io/NAMESPACE/IMAGE_NAME:latest\n```\n\n### Pulling by SHA\n```yaml\ndocker pull ghcr.io/NAMESPACE/IMAGE_NAME@sha256:82jf9a84u29hiasldj289498uhois8498hjs29hkuhs\n```\n\n### Pulling by Name\n```yaml\ndocker pull ghcr.io/NAMESPACE/IMAGE_NAME\n```\n\n### Pulling by Name and Version\n```yaml\n$ docker pull ghcr.io/NAMESPACE/IMAGE_NAME:1.14.1\n> 5e35bd43cf78: Pull complete\n> 0c48c2209aab: Pull complete\n> fd45dd1aad5a: Pull complete\n> db6eb50c2d36: Pull complete\n> Digest: sha256:ae3b135f133155b3824d8b1f62959ff8a72e9cf9e884d88db7895d8544010d8e\n> Status: Downloaded newer image for ghcr.io/NAMESPACE/IMAGE_NAME/release:1.14.1\n> ghcr.io/NAMESPACE/IMAGE_NAME/release:1.14.1\n```\n\n### Pulling Latest Version\n```yaml\n$ docker pull ghcr.io/NAMESPACE/IMAGE_NAME:latest\n> latest: Pulling from NAMESPACE/IMAGE_NAME\n> Digest: sha256:b3d3e366b55f9a54599220198b3db5da8f53592acbbb7dc7e4e9878762fc5344\n> Status: Downloaded newer image for ghcr.io/NAMESPACE/IMAGE_NAME:latest\n> ghcr.io/NAMESPACE/IMAGE_NAME:latest\n```\n\n### Building Docker Image\n```yaml\ndocker build -t hello_docker .\n```\n\n### Tagging Docker Image\n```yaml\ndocker tag 38f737a91f39 ghcr.io/NAMESPACE/NEW_IMAGE_NAME:latest\n```\n\n### Adding Labels to Dockerfile\n```yaml\nLABEL org.opencontainers.image.source=https://github.com/octocat/my-repo\nLABEL org.opencontainers.image.description=\"My container image\"\nLABEL org.opencontainers.image.licenses=MIT\n```\n\n### Building Multi-Arch Image\n```yaml\n$ docker build \\\n --label \"org.opencontainers.image.source=https://github.com/octocat/my-repo\" \\\n --label \"org.opencontainers.image.description=My container image\" \\\n --label \"org.opencontainers.image.licenses=MIT\"\n```\n\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What are the best practices for Working with the Container registry?\n\nAssistant: Here are the recommended best practices:\n\n• GitHub Packages only supports authentication using a personal access token (classic).\n• Avoid using the repo scope for personal access tokens in GitHub Actions workflows.\n• When pushing a package, the easiest way to connect a repository is to publish the package from a workflow using ${ {secrets.GITHUB_TOKEN}}.\n• To ensure your GITHUB_TOKEN has appropriate permissions, add the label org.opencontainers.image.source to your Dockerfile.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Working with the Gradle registry?\n\nAssistant: You can configure Gradle to publish packages to the GitHub Packages Gradle registry and to use packages stored on GitHub Packages as dependencies in a Java project.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages. For more information, see GitHub’s plans.\n\n## Authenticating to GitHub Packages\nGitHub Packages only supports authentication using a personal access token (classic). For more information, see Managing your personal access tokens.\n\nYou need an access token to publish, install, and delete private, internal, and public packages.\n\nYou can use a personal access token (classic) to authenticate to GitHub Packages or the GitHub API. When you create a personal access token (classic), you can assign the token different scopes depending on your needs. For more information about packages-related scopes for a personal access token (classic), see About permissions for GitHub Packages.\n\nTo authenticate to a GitHub Packages registry within a GitHub Actions workflow, you can use:\n\n- `GITHUB_TOKEN` to publish packages associated with the workflow repository.\n- A personal access token (classic) with at least `read:packages` scope to install packages associated with other private repositories ( `GITHUB_TOKEN` can be used if the repository is granted read access to the package. See Configuring a package's access control and visibility).\n\nFor more information about `GITHUB_TOKEN` used in GitHub Actions workflows, see Automatic token authentication. For more information about using `GITHUB_TOKEN` with Gradle, see Publishing Java packages with Gradle.\n\n## Authenticating with a personal access token\nYou must use a personal access token (classic) with the appropriate scopes to publish and install packages in GitHub Packages. For more information, see Introduction to GitHub Packages.\n\nYou can authenticate to GitHub Packages with Gradle using either Gradle Groovy or Kotlin DSL by editing your _build.gradle_ file (Gradle Groovy) or _build.gradle.kts_ file (Kotlin DSL) file to include your personal access token (classic). You can also configure Gradle Groovy and Kotlin DSL to recognize a single package or multiple packages in a repository.\n\nReplace USERNAME with your GitHub username, TOKEN with your personal access token (classic), REPOSITORY with the name of the repository containing the package you want to publish, and OWNER with the name of the personal account or organization on GitHub that owns the repository. Because uppercase letters aren't supported, you must use lowercase letters for the repository owner even if the GitHub user or organization name contains uppercase letters.\n\nGitHub Packages supports `SNAPSHOT` versions of Apache Maven. To use the GitHub Packages repository for downloading `SNAPSHOT` artifacts, enable SNAPSHOTS in the POM of the consuming project or your _~/.m2/settings.xml_ file. For an example, see Working with the Apache Maven registry.\n\n## Example using Gradle Groovy for a single package in a repository\n```hljs shell\nplugins {\n    id(\"maven-publish\")\n}\npublishing {\n    repositories {\n        maven {\n            name = \"GitHubPackages\"\n            url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n            credentials {\n                username = project.findProperty(\"gpr.user\") ?: System.getenv(\"USERNAME\")\n                password = project.findProperty(\"gpr.key\") ?: System.getenv(\"TOKEN\")\n            }\n        }\n    }\n    publications {\n        gpr(MavenPublication) {\n            from(components.java)\n        }\n    }\n}\n```\n\n## Example using Gradle Groovy for multiple packages in the same repository\n```hljs shell\nplugins {\n    id(\"maven-publish\") apply false\n}\nsubprojects {\n    apply plugin: \"maven-publish\"\n    publishing {\n        repositories {\n            maven {\n                name = \"GitHubPackages\"\n                url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n                credentials {\n                    username = project.findProperty(\"gpr.user\") ?: System.getenv(\"USERNAME\")\n                    password = project.findProperty(\"gpr.key\") ?: System.getenv(\"TOKEN\")\n                }\n            }\n        }\n        publications {\n            gpr(MavenPublication) {\n                from(components.java)\n            }\n        }\n    }\n}\n```\n\n## Example using Kotlin DSL for a single package in the same repository\n```hljs shell\nplugins {\n    `maven-publish`\n}\npublishing {\n    repositories {\n        maven {\n            name = \"GitHubPackages\"\n            url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n            credentials {\n                username = project.findProperty(\"gpr.user\") as String? ?: System.getenv(\"USERNAME\")\n                password = project.findProperty(\"gpr.key\") as String? ?: System.getenv(\"TOKEN\")\n            }\n        }\n    }\n    publications {\n        register<MavenPublication>(\"gpr\") {\n            from(components[\"java\"])\n        }\n    }\n}\n```\n\n## Example using Kotlin DSL for multiple packages in the same repository\n```hljs shell\nplugins {\n    `maven-publish` apply false\n}\nsubprojects {\n    apply(plugin = \"maven-publish\")\n    configure<PublishingExtension> {\n        repositories {\n            maven {\n                name = \"GitHubPackages\"\n                url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n                credentials {\n                    username = project.findProperty(\"gpr.user\") as String? ?: System.getenv(\"USERNAME\")\n                    password = project.findProperty(\"gpr.key\") as String? ?: System.getenv(\"TOKEN\")\n                }\n            }\n        }\n        publications {\n            register<MavenPublication>(\"gpr\") {\n                from(components[\"java\"])\n            }\n        }\n    }\n}\n```\n\n## Publishing a package\nBy default, GitHub publishes the package to an existing repository with the same name as the package. For example, GitHub will publish a package named `com.example.test` in the `OWNER/test` GitHub Packages repository.\n\nAfter you publish a package, you can view the package on GitHub. For more information, see Viewing packages.\n\n1. Authenticate to GitHub Packages. For more information, see Authenticating to GitHub Packages.\n\n2. After creating your package, you can publish the package.\n\n```hljs shell\ngradle publish\n```\n\n## Using a published package\nTo use a published package from GitHub Packages, add the package as a dependency and add the repository to your project. For more information, see Declaring dependencies in the Gradle documentation.\n\n1. Authenticate to GitHub Packages. For more information, see Authenticating to GitHub Packages.\n\n2. Add the package dependencies to your _build.gradle_ file (Gradle Groovy) or _build.gradle.kts_ file (Kotlin DSL) file.\n\nExample using Gradle Groovy:\n\n```hljs shell\ndependencies {\n       implementation 'com.example:package'\n}\n```\n\nExample using Kotlin DSL:\n\n```hljs shell\ndependencies {\n       implementation(\"com.example:package\")\n}\n```\n\n3. Add the repository to your _build.gradle_ file (Gradle Groovy) or _build.gradle.kts_ file (Kotlin DSL) file.\n\nExample using Gradle Groovy:\n\n```hljs shell\nrepositories {\n       maven {\n           url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n           credentials {\n               username = project.findProperty(\"gpr.user\") ?: System.getenv(\"USERNAME\")\n               password = project.findProperty(\"gpr.key\") ?: System.getenv(\"TOKEN\")\n           }\n      }\n}\n```\n\nExample using Kotlin DSL:\n\n```hljs shell\nrepositories {\n       maven {\n           url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n           credentials {\n               username = project.findProperty(\"gpr.user\") as String? ?: System.getenv(\"USERNAME\")\n               password = project.findProperty(\"gpr.key\") as String? ?: System.getenv(\"TOKEN\")\n           }\n       }\n}\n```\n\n## Further reading\n- Working with the Apache Maven registry\n- Deleting and restoring a package\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: Can you show me some code examples for Working with the Gradle registry?\n\nAssistant: Here are some code examples:\n\n### Example using Gradle Groovy for a single package in a repository\n```yaml\n```hljs shell\nplugins {\n    id(\"maven-publish\")\n}\npublishing {\n    repositories {\n        maven {\n            name = \"GitHubPackages\"\n            url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n            credentials {\n                username = project.findProperty(\"gpr.user\") ?: System.getenv(\"USERNAME\")\n                password = project.findProperty(\"gpr.key\") ?: System.getenv(\"TOKEN\")\n            }\n        }\n    }\n    publications {\n        gpr(MavenPublication) {\n            from(components.java)\n        }\n    }\n}\n```\n```\n\n### Example using Gradle Groovy for multiple packages in the same repository\n```yaml\n```hljs shell\nplugins {\n    id(\"maven-publish\") apply false\n}\nsubprojects {\n    apply plugin: \"maven-publish\"\n    publishing {\n        repositories {\n            maven {\n                name = \"GitHubPackages\"\n                url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n                credentials {\n                    username = project.findProperty(\"gpr.user\") ?: System.getenv(\"USERNAME\")\n                    password = project.findProperty(\"gpr.key\") ?: System.getenv(\"TOKEN\")\n                }\n            }\n        }\n        publications {\n            gpr(MavenPublication) {\n                from(components.java)\n            }\n        }\n    }\n}\n```\n```\n\n### Example using Kotlin DSL for a single package in the same repository\n```yaml\n```hljs shell\nplugins {\n    `maven-publish`\n}\npublishing {\n    repositories {\n        maven {\n            name = \"GitHubPackages\"\n            url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n            credentials {\n                username = project.findProperty(\"gpr.user\") as String? ?: System.getenv(\"USERNAME\")\n                password = project.findProperty(\"gpr.key\") as String? ?: System.getenv(\"TOKEN\")\n            }\n        }\n    }\n    publications {\n        register<MavenPublication>(\"gpr\") {\n            from(components[\"java\"])\n        }\n    }\n}\n```\n```\n\n### Example using Kotlin DSL for multiple packages in the same repository\n```yaml\n```hljs shell\nplugins {\n    `maven-publish` apply false\n}\nsubprojects {\n    apply(plugin = \"maven-publish\")\n    configure<PublishingExtension> {\n        repositories {\n            maven {\n                name = \"GitHubPackages\"\n                url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n                credentials {\n                    username = project.findProperty(\"gpr.user\") as String? ?: System.getenv(\"USERNAME\")\n                    password = project.findProperty(\"gpr.key\") as String? ?: System.getenv(\"TOKEN\")\n                }\n            }\n        }\n        publications {\n            register<MavenPublication>(\"gpr\") {\n                from(components[\"java\"])\n            }\n        }\n    }\n}\n```\n```\n\n### Publishing a package\n```yaml\n```hljs shell\ngradle publish\n```\n```\n\n### Using a published package\n```yaml\nExample using Gradle Groovy:\n\n```hljs shell\ndependencies {\n       implementation 'com.example:package'\n}\n```\n\nExample using Kotlin DSL:\n\n```hljs shell\ndependencies {\n       implementation(\"com.example:package\")\n}\n```\n\nExample using Gradle Groovy:\n\n```hljs shell\nrepositories {\n       maven {\n           url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n           credentials {\n               username = project.findProperty(\"gpr.user\") ?: System.getenv(\"USERNAME\")\n               password = project.findProperty(\"gpr.key\") ?: System.getenv(\"TOKEN\")\n           }\n      }\n}\n```\n\nExample using Kotlin DSL:\n\n```hljs shell\nrepositories {\n       maven {\n           url = uri(\"https://maven.pkg.github.com/OWNER/REPOSITORY\")\n           credentials {\n               username = project.findProperty(\"gpr.user\") as String? ?: System.getenv(\"USERNAME\")\n               password = project.findProperty(\"gpr.key\") as String? ?: System.getenv(\"TOKEN\")\n           }\n       }\n}\n```\n```\n\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What are the best practices for Working with the Gradle registry?\n\nAssistant: Here are the recommended best practices:\n\n• Use lowercase letters for the repository owner even if the GitHub user or organization name contains uppercase letters.\n• Enable SNAPSHOTS in the POM of the consuming project or your _~/.m2/settings.xml_ file to use the GitHub Packages repository for downloading `SNAPSHOT` artifacts.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is About GitHub Packages and GitHub Actions?\n\nAssistant: Learn the fundamentals of managing packages through your GitHub Actions workflows.\n\nHere's a detailed explanation:\n\n\n## Packaging in continuous integration workflows\nA packaging step is a common part of a continuous integration or continuous delivery workflow. Creating a package at the end of a continuous integration workflow can help during code reviews on a pull request.\n\nAfter building and testing your code, a packaging step can produce a runnable or deployable artifact. Depending on the kind of application you're building, this package can be downloaded locally for manual testing, made available for users to download, or deployed to a staging or production environment.\n\nFor example, a continuous integration workflow for a Java project may run `mvn package` to produce a JAR file. Or, a CI workflow for a Node.js application may create a Docker container.\n\nNow, when reviewing a pull request, you'll be able to look at the workflow run and download the artifact that was produced.\n\n![Screenshot of the \"Artifacts\" section of a workflow run. The name of the artifact generated by the run, \"artifact,\" is outlined in orange.](https://docs.github.com/assets/cb-13990/images/help/repository/artifact-drop-down-updated.png)\nThis will let you run the code in the pull request on your machine, which can help with debugging or testing the pull request.\n\n## Workflows for publishing packages\nIn addition to uploading packaging artifacts for testing in a continuous integration workflow, you can create workflows that build your project and publish packages to a package registry.\n\n- **Publish packages to GitHub Packages**\nGitHub Packages can act as a package hosting service for many types of packages. You can choose to share your packages with all of GitHub, or private packages to share with collaborators or an organization. For more information, see [Introduction to GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages).\n\nYou may want to publish packages to GitHub Packages on every push into the default branch. This will allow developers on your project to always be able to run and test the latest build from the default branch easily, by installing it from GitHub Packages.\n\n- **Publish packages to a package registry:**\nFor many projects, publishing to a package registry is performed whenever a new version of a project is released. For example, a project that produces a JAR file may upload new releases to the Maven Central repository. Or, a .NET project may produce a nuget package and upload it to the NuGet Gallery.\n\nYou can automate this by creating a workflow that publishes packages to a package registry on every release creation. For more information, see [Managing releases in a repository](https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository).\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What are the best practices for About GitHub Packages and GitHub Actions?\n\nAssistant: Here are the recommended best practices:\n\n• Consider creating a packaging step in your CI/CD workflow to facilitate code reviews.\n• Publish packages to GitHub Packages on every push to the default branch for easy access to the latest build.\n• Automate the publishing of packages to a package registry on every release creation.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Example workflows for publishing a package?\n\nAssistant: To help you get started with your own custom workflows, review some example workflows for publishing packages.\n\nHere's a detailed explanation:\n\n\n## Introduction\nTo help you get started with your own custom workflows, review some example workflows for publishing packages.\n\n## Links to Example Workflows\nYou can find example workflows in Publishing and installing a package with GitHub Actions or in any of these GitHub Actions guides:\n\n- Publishing Node.js packages\n- Publishing Docker images\n- Publishing Java packages with Maven\n- Publishing Java packages with Gradle\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Managing GitHub packages using GitHub Actions workflows?\n\nAssistant: You can safely publish and consume packages by building custom workflows that can also build, test, and deploy your code.\n\nHere's a detailed explanation:\n\n\n## Publishing and installing a package with GitHub Actions\nYou can configure a workflow in GitHub Actions to automatically publish or install a package from GitHub Packages.\n\n## Example workflows for publishing a package\nTo help you get started with your own custom workflows, review some example workflows for publishing packages.\n\n## About GitHub Packages and GitHub Actions\nLearn the fundamentals of managing packages through your GitHub Actions workflows.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is Migrating to the Container registry from the Docker registry?\n\nAssistant: GitHub will migrate Docker images previously stored in the Docker registry on GitHub to the Container registry.\n\nHere's a detailed explanation:\n\n\n## Who can use this feature?\nGitHub Packages is available with GitHub Free, GitHub Pro, GitHub Free for organizations, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server 3.0 or higher.\n\nGitHub Packages is not available for private repositories owned by accounts using legacy per-repository plans. Also, accounts using legacy per-repository plans cannot access registries that support granular permissions, because these accounts are billed by repository. For the list of registries that support granular permissions, see About permissions for GitHub Packages. For more information, see GitHub’s plans.\n\n## About the Container registry\nThe Container registry stores container images within your organization or personal account, and allows you to associate an image with a repository. You can choose whether to inherit permissions from a repository, or set granular permissions independently of a repository. You can also access public container images anonymously. For more information, see Working with the Container registry.\n\n## About migration from the Docker registry\nThe Container registry replaces GitHub's Docker registry. If you've stored Docker images in the Docker registry, GitHub will gradually migrate the images to the Container registry. No action is required on your part.\n\nAfter a Docker image has been migrated to the Container registry, you'll see the following changes to the details for the package.\n\n- The package icon will be the Container registry logo (a  icon) instead of the Docker logo.\n- The domain in the pull URL will be `ghcr.io` instead of `docker.pkg.github.com`.\n\nAny scripts or GitHub Actions workflows that use the namespace for the Docker registry, `docker.pkg.github.com`, will continue to work after migration to the Container registry at `ghcr.io`.\n\nAfter migration, you'll no longer be able to use the GraphQL API to query for packages with a `PackageType` of \"DOCKER\". Instead, you can use the REST API to query for packages with a `package_type` of \"container\". For more information, see REST API endpoints for packages.\n\n## About billing for Container registry\nFor more information about billing for the Container registry, see About billing for GitHub Packages.\n"}
{"text": "System: You are a helpful GitHub Packages expert.\n\nUser: What is GitHub Packages Documentation?\n\nAssistant: This page provides an overview of GitHub Packages, including how to manage, publish, and install packages.\n\nHere's a detailed explanation:\n\n\n## Start here\n- [**Learn GitHub Packages** \\ You can find out more about using packages in GitHub, including publishing new packages to GitHub Packages, view and install existing packages, and, in special circumstances, delete existing packages.](https://docs.github.com/en/packages/learn-github-packages)\n\n- [**Managing GitHub packages using GitHub Actions workflows** \\ You can safely publish and consume packages by building custom workflows that can also build, test, and deploy your code.](https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows)\n\n- [**Installing a package** \\ You can install a package from GitHub Packages and use the package as a dependency in your own project.](https://docs.github.com/en/packages/learn-github-packages/installing-a-package)\n\n## Popular\n- [**Working with the npm registry** \\ You can configure npm to publish packages to GitHub Packages and to use packages stored on GitHub Packages as dependencies in an npm project.](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry)\n\n- [**Learn GitHub Packages** \\ You can find out more about using packages in GitHub, including publishing new packages to GitHub Packages, view and install existing packages, and, in special circumstances, delete existing packages.](https://docs.github.com/en/packages/learn-github-packages)\n\n- [**Working with the Apache Maven registry** \\ You can configure Apache Maven to publish packages to GitHub Packages and to use packages stored on GitHub Packages as dependencies in a Java project.](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry)\n\n## What's new\n[View all](https://github.blog/changelog/label/packages)\n\n- [Legacy Docker Registry closing downJanuary 23](https://github.blog/changelog/2025-01-23-legacy-docker-registry-closing-down)\n\n- [Changes to token permission on packagesSeptember 26](https://github.blog/changelog/2023-09-26-changes-to-token-permission-on-packages)\n\n- [Fine-grained permissions and organization-level publishing are now available for the GitHub Packages RubyGems registryJanuary 10](https://github.blog/changelog/2023-01-10-packages-fine-grained-permissions-and-organization-level-publishing-are-now-available-for-the-github-packages-rubygems-registry)\n\n## Guides\n- [**Working with the Container registry** \\ You can store and manage Docker and OCI images in the Container registry.](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry)\n- [**Working with the npm registry** \\ You can configure npm to publish packages to GitHub Packages and to use packages stored on GitHub Packages as dependencies in an npm project.](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry)\n- [**Working with the RubyGems registry** \\ You can configure RubyGems to publish a package to GitHub Packages and to use packages stored on GitHub Packages as dependencies in a Ruby project with Bundler.](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry)\n\n## All GitHub Packages docs\n### [Learn GitHub Packages](https://docs.github.com/en/packages/learn-github-packages)\n\n- [Introduction to GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages)\n\n- [About permissions for GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages)\n\n- [Configuring a package's access control and visibility](https://docs.github.com/en/packages/learn-github-packages/configuring-a-packages-access-control-and-visibility)\n\n- [Connecting a repository to a package](https://docs.github.com/en/packages/learn-github-packages/connecting-a-repository-to-a-package)\n\n- [Publishing a package](https://docs.github.com/en/packages/learn-github-packages/publishing-a-package)\n\n- [Viewing packages](https://docs.github.com/en/packages/learn-github-packages/viewing-packages)\n\n- [Installing a package](https://docs.github.com/en/packages/learn-github-packages/installing-a-package)\n\n- [Deleting and restoring a package](https://docs.github.com/en/packages/learn-github-packages/deleting-and-restoring-a-package)\n\n### [Working with a GitHub Packages registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry)\n\n- [Working with the Container registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry)\n\n- [Working with the Docker registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-docker-registry)\n\n- [Working with the RubyGems registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-rubygems-registry)\n\n- [Working with the npm registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry)\n\n- [Working with the Apache Maven registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry)\n\n- [Working with the Gradle registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry)\n\n- [Working with the NuGet registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry)\n\n- [Migrating to the Container registry from the Docker registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/migrating-to-the-container-registry-from-the-docker-registry)\n\n### [Managing GitHub packages using GitHub Actions workflows](https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows)\n\n- [Publishing and installing a package with GitHub Actions](https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions)\n\n- [Example workflows for publishing a package](https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/example-workflows-for-publishing-a-package)\n\n- [About GitHub Packages and GitHub Actions](https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/about-github-packages-and-github-actions)\n"}
