{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Google Style Guides\"?\n\nAssistant: Every major open-source project has its own style guide: a set of conventions (sometimes arbitrary) about how to write code for that project. It is much easier to understand a large codebase when all the code in it is in a consistent style.\n\nHere's a detailed explanation:\n\n\n## Overview\n“Style” covers a lot of ground, from “use camelCase for variable names” to “never use global variables” to “never use exceptions.” This project (google/styleguide) links to the style guidelines we use for Google code. If you are modifying a project that originated at Google, you may be pointed to this page to see the style guides that apply to that project.\n\n## Style Guides\n- [AngularJS Style Guide](https://google.github.io/styleguide/angularjs-google-style.html)\n- [Common Lisp Style Guide](https://google.github.io/styleguide/lispguide.xml)\n- [C++ Style Guide](https://google.github.io/styleguide/cppguide.html)\n- [C# Style Guide](https://google.github.io/styleguide/csharp-style.html)\n- [Go Style Guide](https://google.github.io/styleguide/go/)\n- [HTML/CSS Style Guide](https://google.github.io/styleguide/htmlcssguide.html)\n- [JavaScript Style Guide](https://google.github.io/styleguide/jsguide.html)\n- [Java Style Guide](https://google.github.io/styleguide/javaguide.html)\n- [JSON Style Guide](https://google.github.io/styleguide/jsoncstyleguide.xml)\n- [Markdown Style Guide](https://google.github.io/styleguide/docguide/style.html)\n- [Objective-C Style Guide](https://google.github.io/styleguide/objcguide.html)\n- [Python Style Guide](https://google.github.io/styleguide/pyguide.html)\n- [R Style Guide](https://google.github.io/styleguide/Rguide.html)\n- [Shell Style Guide](https://google.github.io/styleguide/shellguide.html)\n- [Swift Style Guide](https://google.github.io/swift/)\n- [TypeScript Style Guide](https://google.github.io/styleguide/tsguide.html)\n- [Vim script Style Guide](https://google.github.io/styleguide/vimscriptguide.xml)\n", "metadata": {"source_url": "https://google.github.io/styleguide", "title": "Google Style Guides", "description": "Every major open-source project has its own style guide: a set of conventions (sometimes arbitrary) about how to write code for that project. It is much easier to understand a large codebase when all the code in it is in a consistent style.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:00:45", "type": "overview", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "og:title": "Google Style Guides", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Google Style Guides", "ogDescription": "Style guides for Google-originated open-source projects", "ogUrl": "https://google.github.io/styleguide/", "generator": "Jekyll v3.10.0", "og:url": "https://google.github.io/styleguide/", "og:site_name": "styleguide", "ogLocale": "en_US", "og:type": "website", "language": "en-US", "title": "Google Style Guides | styleguide", "twitter:title": "Google Style Guides", "description": "Style guides for Google-originated open-source projects", "ogSiteName": "styleguide", "og:description": "Style guides for Google-originated open-source projects", "og:locale": "en_US", "twitter:card": "summary", "scrapeId": "4e96535a-1dd7-46d4-9f73-4d8f39c1fe6c", "sourceURL": "https://google.github.io/styleguide", "url": "https://google.github.io/styleguide/", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: Can you show me some code examples for \"Google Style Guides\"?\n\nAssistant: Here are some code examples:\n\n### Emacs settings file for Google style\n```yaml\n[google-c-style.el](https://raw.githubusercontent.com/google/styleguide/gh-pages/google-c-style.el)\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide", "title": "Google Style Guides", "description": "Every major open-source project has its own style guide: a set of conventions (sometimes arbitrary) about how to write code for that project. It is much easier to understand a large codebase when all the code in it is in a consistent style.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:00:45", "type": "code_examples", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "og:title": "Google Style Guides", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Google Style Guides", "ogDescription": "Style guides for Google-originated open-source projects", "ogUrl": "https://google.github.io/styleguide/", "generator": "Jekyll v3.10.0", "og:url": "https://google.github.io/styleguide/", "og:site_name": "styleguide", "ogLocale": "en_US", "og:type": "website", "language": "en-US", "title": "Google Style Guides | styleguide", "twitter:title": "Google Style Guides", "description": "Style guides for Google-originated open-source projects", "ogSiteName": "styleguide", "og:description": "Style guides for Google-originated open-source projects", "og:locale": "en_US", "twitter:card": "summary", "scrapeId": "4e96535a-1dd7-46d4-9f73-4d8f39c1fe6c", "sourceURL": "https://google.github.io/styleguide", "url": "https://google.github.io/styleguide/", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Google Style Guides\"?\n\nAssistant: Here are the recommended best practices:\n\n• External contributions are not accepted. Pull requests are regularly closed without comment.\n• People can file issues using the GitHub tracker. Issues that raise questions, justify changes on technical merits, or point out obvious mistakes may get some engagement and could in theory lead to changes, but we are primarily optimizing for Google’s internal needs.\n", "metadata": {"source_url": "https://google.github.io/styleguide", "title": "Google Style Guides", "description": "Every major open-source project has its own style guide: a set of conventions (sometimes arbitrary) about how to write code for that project. It is much easier to understand a large codebase when all the code in it is in a consistent style.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:00:45", "type": "best_practices", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "og:title": "Google Style Guides", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Google Style Guides", "ogDescription": "Style guides for Google-originated open-source projects", "ogUrl": "https://google.github.io/styleguide/", "generator": "Jekyll v3.10.0", "og:url": "https://google.github.io/styleguide/", "og:site_name": "styleguide", "ogLocale": "en_US", "og:type": "website", "language": "en-US", "title": "Google Style Guides | styleguide", "twitter:title": "Google Style Guides", "description": "Style guides for Google-originated open-source projects", "ogSiteName": "styleguide", "og:description": "Style guides for Google-originated open-source projects", "og:locale": "en_US", "twitter:card": "summary", "scrapeId": "4e96535a-1dd7-46d4-9f73-4d8f39c1fe6c", "sourceURL": "https://google.github.io/styleguide", "url": "https://google.github.io/styleguide/", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Go Style\"?\n\nAssistant: The Go Style Guide and accompanying documents codify the current best approaches for writing readable and idiomatic Go.\n\nHere's a detailed explanation:\n\n\n## About\nThe Go Style Guide and accompanying documents codify the current best approaches for writing readable and idiomatic Go. Adherence to the Style Guide is not intended to be absolute, and these documents will never be exhaustive. Our intention is to minimize the guesswork of writing readable Go so that newcomers to the language can avoid common mistakes. The Style Guide also serves to unify the style guidance given by anyone reviewing Go code at Google.\n\n| Document | Link | Primary Audience | [Normative](https://google.github.io/styleguide/go/#normative) | [Canonical](https://google.github.io/styleguide/go/#canonical) |\n| --- | --- | --- | --- | --- |\n| **Style Guide** | https://google.github.io/styleguide/go/guide | Everyone | Yes | Yes |\n| **Style Decisions** | https://google.github.io/styleguide/go/decisions | Readability Mentors | Yes | No |\n| **Best Practices** | https://google.github.io/styleguide/go/best-practices | Anyone interested | No | No | \n\nThese documents intend to:\n\n- Agree on a set of principles for weighing alternate styles\n- Codify settled matters of Go style\n- Document and provide canonical examples for Go idioms\n- Document the pros and cons of various style decisions\n- Help minimize surprises in Go readability reviews\n- Help readability mentors use consistent terminology and guidance\n\nThese documents do **not** intend to:\n\n- Be an exhaustive list of comments that can be given in a readability review\n- List all of the rules everyone is expected to remember and follow at all times\n- Replace good judgment in the use of language features and style\n- Justify large-scale changes to get rid of style differences\n\nThere will always be differences from one Go programmer to another and from one team’s codebase to another. However, it is in the best interest of Google and Alphabet that our codebase be as consistent as possible. (See [guide](https://google.github.io/styleguide/go/guide#consistency) for more on consistency.) To that end, feel free to make style improvements as you see fit, but you do not need to nit-pick every violation of the Style Guide that you find. In particular, these documents may change over time, and that is no reason to cause extra churn in existing codebases; it suffices to write new code using the latest best practices and address nearby issues over time.\n\nIt is important to recognize that issues of style are inherently personal and that there are always inherent trade-offs. Much of the guidance in these documents is subjective, but just like with `gofmt`, there is significant value in the uniformity they provide. As such, style recommendations will not be changed without due discourse, Go programmers at Google are encouraged to follow the style guide even where they might disagree.\n\n## Definitions\nThe following words, which are used throughout the style documents, are defined below:\n\n- **Canonical**: Establishes prescriptive and enduring rules\n\nWithin these documents, “canonical” is used to describe something that is considered a standard that all code (old and new) should follow and that is not expected to change substantially over time. Principles in the canonical documents should be understood by authors and reviewers alike, so everything included within a canonical document must meet a high bar. As such, canonical documents are generally shorter and prescribe fewer elements of style than non-canonical documents.\n\nhttps://google.github.io/styleguide/go#canonical\n\n- **Normative**: Intended to establish consistency\n\nWithin these documents, “normative” is used to describe something that is an agreed-upon element of style for use by Go code reviewers, in order that the suggestions, terminology, and justifications are consistent. These elements may change over time, and these documents will reflect such changes so that reviewers can remain consistent and up-to-date. Authors of Go code are not expected to be familiar with the normative documents, but the documents will frequently be used as a reference by reviewers in readability reviews.\n\nhttps://google.github.io/styleguide/go#normative\n\n- **Idiomatic**: Common and familiar\n\nWithin these documents, “idiomatic” is used to refer to something that is prevalent in Go code and has become a familiar pattern that is easy to recognize. In general, an idiomatic pattern should be preferred to something unidiomatic if both serve the same purpose in context, as this is what will be the most familiar to readers.\n\nhttps://google.github.io/styleguide/go#idiomatic\n", "metadata": {"source_url": "https://google.github.io/styleguide/go", "title": "Go Style", "description": "The Go Style Guide and accompanying documents codify the current best approaches for writing readable and idiomatic Go.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:02:09", "type": "overview", "page_metadata": {"title": "Go Style | styleguide", "ogDescription": "Style guides for Google-originated open-source projects", "ogUrl": "https://google.github.io/styleguide/go/", "ogLocale": "en_US", "og:url": "https://google.github.io/styleguide/go/", "og:description": "Style guides for Google-originated open-source projects", "description": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "twitter:title": "Go Style", "og:title": "Go Style", "twitter:card": "summary", "ogSiteName": "styleguide", "og:locale": "en_US", "generator": "Jekyll v3.10.0", "og:site_name": "styleguide", "language": "en-US", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Go Style", "og:type": "website", "scrapeId": "192ee56b-3f22-4ebb-84a0-ac5bdf08da86", "sourceURL": "https://google.github.io/styleguide/go", "url": "https://google.github.io/styleguide/go/", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Go Style\"?\n\nAssistant: Here are the recommended best practices:\n\n• Adhere to the Style Guide to minimize guesswork in writing readable Go.\n• Use the Style Guide as a basis for recommendations in Style Decisions and Best Practices.\n• Make style improvements as you see fit without nit-picking every violation of the Style Guide.\n• Recognize that style issues are personal and involve trade-offs.\n• Follow the style guide even where there might be disagreement.\n", "metadata": {"source_url": "https://google.github.io/styleguide/go", "title": "Go Style", "description": "The Go Style Guide and accompanying documents codify the current best approaches for writing readable and idiomatic Go.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:02:09", "type": "best_practices", "page_metadata": {"title": "Go Style | styleguide", "ogDescription": "Style guides for Google-originated open-source projects", "ogUrl": "https://google.github.io/styleguide/go/", "ogLocale": "en_US", "og:url": "https://google.github.io/styleguide/go/", "og:description": "Style guides for Google-originated open-source projects", "description": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "twitter:title": "Go Style", "og:title": "Go Style", "twitter:card": "summary", "ogSiteName": "styleguide", "og:locale": "en_US", "generator": "Jekyll v3.10.0", "og:site_name": "styleguide", "language": "en-US", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Go Style", "og:type": "website", "scrapeId": "192ee56b-3f22-4ebb-84a0-ac5bdf08da86", "sourceURL": "https://google.github.io/styleguide/go", "url": "https://google.github.io/styleguide/go/", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Shell Style Guide\"?\n\nAssistant: Authored, revised and maintained by many Googlers.\n\nHere's a detailed explanation:\n\n\n## Table of Contents\n| Section | Contents |\n| --- | --- |\n| [Background](https://google.github.io/styleguide/shellguide.html#s1-background) | [Which Shell to Use](https://google.github.io/styleguide/shellguide.html#s1.1-which-shell-to-use) \\- [When to use Shell](https://google.github.io/styleguide/shellguide.html#s1.2-when-to-use-shell) |\n| [Shell Files and Interpreter Invocation](https://google.github.io/styleguide/shellguide.html#s2-shell-files-and-interpreter-invocation) | [File Extensions](https://google.github.io/styleguide/shellguide.html#s2.1-file-extensions) \\- [SUID/SGID](https://google.github.io/styleguide/shellguide.html#s2.2-suid-sgid) |\n| [Environment](https://google.github.io/styleguide/shellguide.html#s3-environment) | [STDOUT vs STDERR](https://google.github.io/styleguide/shellguide.html#s3.1-stdout-vs-stderr) |\n| [Comments](https://google.github.io/styleguide/shellguide.html#s4-comments) | [File Header](https://google.github.io/styleguide/shellguide.html#s4.1-file-header) \\- [Function Comments](https://google.github.io/styleguide/shellguide.html#s4.2-function-comments) \\- [Implementation Comments](https://google.github.io/styleguide/shellguide.html#s4.3-implementation-comments) \\- [TODO Comments](https://google.github.io/styleguide/shellguide.html#s4.4-todo-comments) |\n| [Formatting](https://google.github.io/styleguide/shellguide.html#s5-formatting) | [Indentation](https://google.github.io/styleguide/shellguide.html#s5.1-indentation) \\- [Line Length and Long Strings](https://google.github.io/styleguide/shellguide.html#s5.2-line-length-and-long-strings) \\- [Pipelines](https://google.github.io/styleguide/shellguide.html#s5.3-pipelines) \\- [Control Flow](https://google.github.io/styleguide/shellguide.html#s5.4-control-flow) \\- [Case statement](https://google.github.io/styleguide/shellguide.html#s5.5-case-statement) \\- [Variable expansion](https://google.github.io/styleguide/shellguide.html#s5.6-variable-expansion) \\- [Quoting](https://google.github.io/styleguide/shellguide.html#s5.7-quoting) |\n| [Features and Bugs](https://google.github.io/styleguide/shellguide.html#s6-features-and-bugs) | [ShellCheck](https://google.github.io/styleguide/shellguide.html#s6.1-shellcheck) \\- [Command Substitution](https://google.github.io/styleguide/shellguide.html#s6.2-command-substitution) \\- [Test, `[… ]`, and `[[… ]]`](https://google.github.io/styleguide/shellguide.html#s6.3-tests) \\- [Testing Strings](https://google.github.io/styleguide/shellguide.html#s6.4-testing-strings) \\- [Wildcard Expansion of Filenames](https://google.github.io/styleguide/shellguide.html#s6.5-wildcard-expansion-of-filenames) \\- [Eval](https://google.github.io/styleguide/shellguide.html#s6.6-eval) \\- [Arrays](https://google.github.io/styleguide/shellguide.html#s6.7-arrays) \\- [Pipes to While](https://google.github.io/styleguide/shellguide.html#s6.8-pipes-to-while) \\- [Arithmetic](https://google.github.io/styleguide/shellguide.html#s6.9-arithmetic) \\- [Aliases](https://google.github.io/styleguide/shellguide.html#s6.10-aliases) |\n| [Naming Conventions](https://google.github.io/styleguide/shellguide.html#s7-naming-conventions) | [Function Names](https://google.github.io/styleguide/shellguide.html#s7.1-function-names) \\- [Variable Names](https://google.github.io/styleguide/shellguide.html#s7.2-variable-names) \\- [Constants and Environment Variable Names](https://google.github.io/styleguide/shellguide.html#s7.3-constants-and-environment-variable-names) \\- [Source Filenames](https://google.github.io/styleguide/shellguide.html#s7.4-source-filenames) \\- [Use Local Variables](https://google.github.io/styleguide/shellguide.html#s7.5-use-local-variables) \\- [Function Location](https://google.github.io/styleguide/shellguide.html#s7.6-function-location) \\- [main](https://google.github.io/styleguide/shellguide.html#s7.7-main) |\n| [Calling Commands](https://google.github.io/styleguide/shellguide.html#s8-calling-commands) | [Checking Return Values](https://google.github.io/styleguide/shellguide.html#s8.1-checking-return-values) \\- [Builtin Commands vs. External Commands](https://google.github.io/styleguide/shellguide.html#s8.2-builtin-commands-vs-external-commands) |\n| [When in Doubt: Be Consistent](https://google.github.io/styleguide/shellguide.html#s9-conclusion) |  \n\n", "metadata": {"source_url": "https://google.github.io/styleguide/shellguide.html", "title": "Shell Style Guide", "description": "Authored, revised and maintained by many Googlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:08:01", "type": "overview", "page_metadata": {"ogSiteName": "styleguide", "og:description": "Style guides for Google-originated open-source projects", "language": "en-US", "ogDescription": "Style guides for Google-originated open-source projects", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "ogTitle": "styleguide", "og:type": "website", "ogUrl": "https://google.github.io/styleguide/shellguide.html", "title": "styleguide | Style guides for Google-originated open-source projects", "og:site_name": "styleguide", "og:url": "https://google.github.io/styleguide/shellguide.html", "og:title": "styleguide", "description": "Style guides for Google-originated open-source projects", "generator": "Jekyll v3.10.0", "twitter:title": "styleguide", "favicon": "https://google.github.io/styleguide/favicon.ico", "og:locale": "en_US", "twitter:card": "summary", "scrapeId": "1e5d4278-c9d3-4d4f-a86f-b3f1d87fc09b", "sourceURL": "https://google.github.io/styleguide/shellguide.html", "url": "https://google.github.io/styleguide/shellguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: Can you show me some code examples for \"Shell Style Guide\"?\n\nAssistant: Here are some code examples:\n\n### Error Handling Function\n```yaml\nerr() {\n  echo \"[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*\" >&2\n}\n\nif ! do_something; then\n  err \"Unable to do_something\"\n  exit 1\nfi\n\n```\n\n### File Header Example\n```yaml\n#!/bin/bash\n#\n# Perform hot backups of Oracle databases.\n\n```\n\n### Function Comments Example\n```yaml\n#######################################\n# Cleanup files from the backup directory.\n# Globals:\n#   BACKUP_DIR\n#   ORACLE_SID\n# Arguments:\n#   None\n#######################################\nfunction cleanup() {\n  …\n}\n\n#######################################\n# Get configuration directory.\n# Globals:\n#   SOMEDIR\n# Arguments:\n#   None\n# Outputs:\n#   Writes location to stdout\n#######################################\nfunction get_dir() {\n  echo \"${SOMEDIR}\"\n}\n\n#######################################\n# Delete a file in a sophisticated manner.\n# Arguments:\n#   File to delete, a path.\n# Returns:\n#   0 if thing was deleted, non-zero on error.\n#######################################\nfunction del_thing() {\n  rm \"$1\"\n}\n\n```\n\n### Long Strings Example\n```yaml\n# DO use 'here document's\ncat <<END\nI am an exceptionally long\nstring.\nEND\n\n# Embedded newlines are ok too\nlong_string=\"I am an exceptionally\nlong string.\"\n\nlong_file=\"/i/am/an/exceptionally/loooooooooooooooooooooooooooooooooooooooooooooooooooong_file\"\n\nlong_string_with_long_file=\"i am including an exceptionally \\\n/very/long/file\\\n in this long string.\"\n\n# Long file converted into a shorter variable name with cleaner line breaking.\nlong_string_alt=\"i am an including an exceptionally ${long_file} in this long\\\n string\"\n```\n\n### Pipelines Example\n```yaml\n# All fits on one line\ncommand1 | command2\n\n# Long commands\ncommand1 \\\n  | command2 \\\n  | command3 \\\n  | command4\n\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide/shellguide.html", "title": "Shell Style Guide", "description": "Authored, revised and maintained by many Googlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:08:01", "type": "code_examples", "page_metadata": {"ogSiteName": "styleguide", "og:description": "Style guides for Google-originated open-source projects", "language": "en-US", "ogDescription": "Style guides for Google-originated open-source projects", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "ogTitle": "styleguide", "og:type": "website", "ogUrl": "https://google.github.io/styleguide/shellguide.html", "title": "styleguide | Style guides for Google-originated open-source projects", "og:site_name": "styleguide", "og:url": "https://google.github.io/styleguide/shellguide.html", "og:title": "styleguide", "description": "Style guides for Google-originated open-source projects", "generator": "Jekyll v3.10.0", "twitter:title": "styleguide", "favicon": "https://google.github.io/styleguide/favicon.ico", "og:locale": "en_US", "twitter:card": "summary", "scrapeId": "1e5d4278-c9d3-4d4f-a86f-b3f1d87fc09b", "sourceURL": "https://google.github.io/styleguide/shellguide.html", "url": "https://google.github.io/styleguide/shellguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Shell Style Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use Bash as the only shell scripting language permitted for executables.\n• Shell should only be used for small utilities or simple wrapper scripts.\n• If performance matters, use something other than shell.\n• If you are writing a script that is more than 100 lines long, or that uses non-straightforward control flow logic, you should rewrite it in a more structured language.\n• Indent 2 spaces. No tabs.\n• Maximum line length is 80 characters.\n• Pipelines should be split one per line if they don’t all fit on one line.\n• Always check return values and give informative return values.\n", "metadata": {"source_url": "https://google.github.io/styleguide/shellguide.html", "title": "Shell Style Guide", "description": "Authored, revised and maintained by many Googlers.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:08:01", "type": "best_practices", "page_metadata": {"ogSiteName": "styleguide", "og:description": "Style guides for Google-originated open-source projects", "language": "en-US", "ogDescription": "Style guides for Google-originated open-source projects", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "ogTitle": "styleguide", "og:type": "website", "ogUrl": "https://google.github.io/styleguide/shellguide.html", "title": "styleguide | Style guides for Google-originated open-source projects", "og:site_name": "styleguide", "og:url": "https://google.github.io/styleguide/shellguide.html", "og:title": "styleguide", "description": "Style guides for Google-originated open-source projects", "generator": "Jekyll v3.10.0", "twitter:title": "styleguide", "favicon": "https://google.github.io/styleguide/favicon.ico", "og:locale": "en_US", "twitter:card": "summary", "scrapeId": "1e5d4278-c9d3-4d4f-a86f-b3f1d87fc09b", "sourceURL": "https://google.github.io/styleguide/shellguide.html", "url": "https://google.github.io/styleguide/shellguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Google documentation guide\"?\n\nAssistant: A comprehensive guide to Google's documentation style and best practices.\n\nHere's a detailed explanation:\n\n\n## See also\n- [How to update this guide](https://goto.google.com/doc-guide), for Googlers.\n", "metadata": {"source_url": "https://google.github.io/styleguide/docguide", "title": "Google documentation guide", "description": "A comprehensive guide to Google's documentation style and best practices.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:08:15", "type": "overview", "page_metadata": {"ogLocale": "en_US", "og:description": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "og:locale": "en_US", "twitter:card": "summary", "og:title": "Google documentation guide", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://google.github.io/styleguide/docguide/", "og:type": "website", "og:url": "https://google.github.io/styleguide/docguide/", "description": "Style guides for Google-originated open-source projects", "og:site_name": "styleguide", "ogDescription": "Style guides for Google-originated open-source projects", "twitter:title": "Google documentation guide", "language": "en-US", "generator": "Jekyll v3.10.0", "title": "Google documentation guide | styleguide", "ogTitle": "Google documentation guide", "ogSiteName": "styleguide", "scrapeId": "0d64c8f7-ab7f-41a1-895c-84e719501cb6", "sourceURL": "https://google.github.io/styleguide/docguide", "url": "https://google.github.io/styleguide/docguide/", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Google documentation guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Refer to the Markdown styleguide for formatting guidelines.\n• Follow the best practices for documentation.\n• Ensure README files are clear and informative.\n• Understand the philosophy behind Google's documentation.\n", "metadata": {"source_url": "https://google.github.io/styleguide/docguide", "title": "Google documentation guide", "description": "A comprehensive guide to Google's documentation style and best practices.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:08:15", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "og:description": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "og:locale": "en_US", "twitter:card": "summary", "og:title": "Google documentation guide", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://google.github.io/styleguide/docguide/", "og:type": "website", "og:url": "https://google.github.io/styleguide/docguide/", "description": "Style guides for Google-originated open-source projects", "og:site_name": "styleguide", "ogDescription": "Style guides for Google-originated open-source projects", "twitter:title": "Google documentation guide", "language": "en-US", "generator": "Jekyll v3.10.0", "title": "Google documentation guide | styleguide", "ogTitle": "Google documentation guide", "ogSiteName": "styleguide", "scrapeId": "0d64c8f7-ab7f-41a1-895c-84e719501cb6", "sourceURL": "https://google.github.io/styleguide/docguide", "url": "https://google.github.io/styleguide/docguide/", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Google’s R Style Guide\"?\n\nAssistant: R is a high-level programming language used primarily for statistical computing and graphics. The goal of the R Programming Style Guide is to make our R code easier to read, share, and verify.\n\nHere's a detailed explanation:\n\n\n## Syntax\nGoogle prefers identifying functions with `BigCamelCase` to clearly distinguish them from other objects.\n\n```\n# Good\nDoNothing <- function() {\n  return(invisible(NULL))\n}\n```\n\nThe names of private functions should begin with a dot. This helps communicate both the origin of the function and its intended use.\n\n```\n# Good\n.DoNothingPrivately <- function() {\n  return(invisible(NULL))\n}\n```\n\nWe previously recommended naming objects with `dot.case`. We’re moving away from that, as it creates confusion with S3 methods.\n\n### Don’t use attach()\n\nThe possibilities for creating errors when using `attach()` are numerous.\n\n## Pipes\n### Right-hand assignment\n\nWe do not support using right-hand assignment.\n\n```\n# Bad\niris %>%\n  dplyr::summarize(max_petal = max(Petal.Width)) -> results\n```\n\nThis convention differs substantially from practices in other languages and makes it harder to see in code where an object is defined. E.g. searching for `foo <-` is easier than searching for `foo <-` and `-> foo` (possibly split over lines).\n\n### Use explicit returns\n\nDo not rely on R’s implicit return feature. It is better to be clear about your intent to `return()` an object.\n\n```\n# Good\nAddValues <- function(x, y) {\n  return(x + y)\n}\n\n# Bad\nAddValues <- function(x, y) {\n  x + y\n}\n```\n\n### Qualifying namespaces\n\nUsers should explicitly qualify namespaces for all external functions.\n\n```\n# Good\npurrr::map()\n```\n\nWe discourage using the `@import` Roxygen tag to bring in all functions into a NAMESPACE. Google has a very big R codebase, and importing all functions creates too much risk for name collisions.\n\nWhile there is a small performance penalty for using `::`, it makes it easier to understand dependencies in your code. There are some exceptions to this rule.\n\n- Infix functions ( `%name%`) always need to be imported.\n- Certain `rlang` pronouns, notably `.data`, need to be imported.\n- Functions from default R packages, including `datasets`, `utils`, `grDevices`, `graphics`, `stats` and `methods`. If needed, you can `@import` the full package.\n\nWhen importing functions, place the `@importFrom` tag in the Roxygen header above the function where the external dependency is used.\n\n## Documentation\n### Package-level documentation\n\nAll packages should have a package documentation file, in a `packagename-package.R` file.\n", "metadata": {"source_url": "https://google.github.io/styleguide/Rguide.html", "title": "Google’s R Style Guide", "description": "R is a high-level programming language used primarily for statistical computing and graphics. The goal of the R Programming Style Guide is to make our R code easier to read, share, and verify.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:12:58", "type": "overview", "page_metadata": {"title": "Google’s R Style Guide | styleguide", "ogUrl": "https://google.github.io/styleguide/Rguide.html", "og:site_name": "styleguide", "og:title": "Google’s R Style Guide", "og:description": "Style guides for Google-originated open-source projects", "language": "en-US", "ogTitle": "Google’s R Style Guide", "ogDescription": "Style guides for Google-originated open-source projects", "twitter:card": "summary", "twitter:title": "Google’s R Style Guide", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "styleguide", "og:url": "https://google.github.io/styleguide/Rguide.html", "og:type": "website", "description": "Style guides for Google-originated open-source projects", "ogLocale": "en_US", "favicon": "https://google.github.io/styleguide/favicon.ico", "generator": "Jekyll v3.10.0", "og:locale": "en_US", "scrapeId": "77c71d70-46f2-4360-afb6-ab6dc0571a0c", "sourceURL": "https://google.github.io/styleguide/Rguide.html", "url": "https://google.github.io/styleguide/Rguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: Can you show me some code examples for \"Google’s R Style Guide\"?\n\nAssistant: Here are some code examples:\n\n### Good Function Naming\n```yaml\nDoNothing <- function() {\n  return(invisible(NULL))\n}\n```\n\n### Good Private Function Naming\n```yaml\n.DoNothingPrivately <- function() {\n  return(invisible(NULL))\n}\n```\n\n### Bad Right-hand Assignment\n```yaml\niris %>%\n  dplyr::summarize(max_petal = max(Petal.Width)) -> results\n```\n\n### Good Explicit Return\n```yaml\nAddValues <- function(x, y) {\n  return(x + y)\n}\n```\n\n### Bad Implicit Return\n```yaml\nAddValues <- function(x, y) {\n  x + y\n}\n```\n\n### Good Namespace Qualification\n```yaml\npurrr::map()\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide/Rguide.html", "title": "Google’s R Style Guide", "description": "R is a high-level programming language used primarily for statistical computing and graphics. The goal of the R Programming Style Guide is to make our R code easier to read, share, and verify.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:12:58", "type": "code_examples", "page_metadata": {"title": "Google’s R Style Guide | styleguide", "ogUrl": "https://google.github.io/styleguide/Rguide.html", "og:site_name": "styleguide", "og:title": "Google’s R Style Guide", "og:description": "Style guides for Google-originated open-source projects", "language": "en-US", "ogTitle": "Google’s R Style Guide", "ogDescription": "Style guides for Google-originated open-source projects", "twitter:card": "summary", "twitter:title": "Google’s R Style Guide", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "styleguide", "og:url": "https://google.github.io/styleguide/Rguide.html", "og:type": "website", "description": "Style guides for Google-originated open-source projects", "ogLocale": "en_US", "favicon": "https://google.github.io/styleguide/favicon.ico", "generator": "Jekyll v3.10.0", "og:locale": "en_US", "scrapeId": "77c71d70-46f2-4360-afb6-ab6dc0571a0c", "sourceURL": "https://google.github.io/styleguide/Rguide.html", "url": "https://google.github.io/styleguide/Rguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Google’s R Style Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `BigCamelCase` for function names to distinguish them from other objects.\n• Private function names should begin with a dot.\n• Avoid using `attach()` due to potential errors.\n• Do not use right-hand assignment for clarity in object definition.\n• Always use explicit returns in functions to clarify intent.\n• Qualify namespaces for all external functions to avoid name collisions.\n", "metadata": {"source_url": "https://google.github.io/styleguide/Rguide.html", "title": "Google’s R Style Guide", "description": "R is a high-level programming language used primarily for statistical computing and graphics. The goal of the R Programming Style Guide is to make our R code easier to read, share, and verify.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:12:58", "type": "best_practices", "page_metadata": {"title": "Google’s R Style Guide | styleguide", "ogUrl": "https://google.github.io/styleguide/Rguide.html", "og:site_name": "styleguide", "og:title": "Google’s R Style Guide", "og:description": "Style guides for Google-originated open-source projects", "language": "en-US", "ogTitle": "Google’s R Style Guide", "ogDescription": "Style guides for Google-originated open-source projects", "twitter:card": "summary", "twitter:title": "Google’s R Style Guide", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "styleguide", "og:url": "https://google.github.io/styleguide/Rguide.html", "og:type": "website", "description": "Style guides for Google-originated open-source projects", "ogLocale": "en_US", "favicon": "https://google.github.io/styleguide/favicon.ico", "generator": "Jekyll v3.10.0", "og:locale": "en_US", "scrapeId": "77c71d70-46f2-4360-afb6-ab6dc0571a0c", "sourceURL": "https://google.github.io/styleguide/Rguide.html", "url": "https://google.github.io/styleguide/Rguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Documentation Best Practices\"?\n\nAssistant: Guidelines for creating effective documentation that is clear, concise, and useful.\n\nHere's a detailed explanation:\n\n\n## Minimum Viable Documentation\nA small set of fresh and accurate docs is better than a large assembly of “documentation” in various states of disrepair.\n\nWrite short and useful documents. Cut out everything unnecessary, including out-of-date, incorrect, or redundant information. Also make a habit of continually massaging and improving every doc to suit your changing needs. **Docs work best when they are alive but frequently trimmed, like a bonsai** **tree**.\n\nSee also [these Agile Documentation best practices](https://www.agilemodeling.com/essays/agileDocumentationBestPractices.htm).\n\n## Update Docs with Code\n**Change your documentation in the same CL as the code change**. This keeps your docs fresh, and is also a good place to explain to your reviewer what you’re doing.\n\nA good reviewer can at least insist that docstrings, header files, README.md files, and any other docs get updated alongside the CL.\n\n## Delete Dead Documentation\nDead docs are bad. They misinform, they slow down, they incite despair in engineers and laziness in team leads. They set a precedent for leaving behind messes in a code base. If your home is clean, most guests will be clean without being asked.\n\nJust like any big cleaning project, **it’s easy to be overwhelmed**. If your docs are in bad shape:\n\n- Take it slow, doc health is a gradual accumulation.\n- First delete what you’re certain is wrong, ignore what’s unclear.\n- Get your whole team involved. Devote time to quickly scan every doc and make a simple decision: Keep or delete?\n- Default to delete or leave behind if migrating. Stragglers can always be recovered.\n- Iterate.\n\n## Prefer the Good Over the Perfect\nDocumentation is an art. There is no perfect document, there are only proven methods and prudent guidelines. See [Better is better than best](https://google.github.io/styleguide/docguide/style.html).\n\n## Documentation is the Story of Your Code\nWriting excellent code doesn’t end when your code compiles or even if your test coverage reaches 100%. It’s easy to write something a computer understands, it’s much harder to write something both a human and a computer understand. Your mission as a Code Health-conscious engineer is to **write for humans first,** **computers second.** Documentation is an important part of this skill.\n\nThere’s a spectrum of engineering documentation that ranges from terse comments to detailed prose:\n\n1. **Meaningful names**: Good naming allows the code to convey information that would otherwise be relegated to comments or documentation. This includes nameable entities at all levels, from local variables to classes, files, and directories.\n\n2. **Inline comments**: The primary purpose of inline comments is to provide information that the code itself cannot contain, such as why the code is there.\n\n3. **Method and class comments**:\n   - **Method API documentation**: The header / Javadoc / docstring comments that say what methods do and how to use them. This documentation is **the contract of how your code must behave**. The intended audience is future programmers who will use and modify your code.\n\n     It is often reasonable to say that any behavior documented here should have a test verifying it. This documentation details what arguments the method takes, what it returns, any “gotchas” or restrictions, and what exceptions it can throw or errors it can return. It does not usually explain why code behaves a particular way unless that’s relevant to a developer’s understanding of how to use the method. “Why” explanations are for inline comments. Think in practical terms when writing method documentation: “This is a hammer. You use it to pound nails.”\n\n   - **Class / Module API documentation**: The header / Javadoc / docstring comments for a class or a whole file. This documentation gives a brief overview of what the class / file does and often gives a few short examples of how you might use the class / file.\n\n     Examples are particularly relevant when there’s several distinct ways to use the class (some advanced, some simple). Always list the simplest use case first.\n\n4. **README.md**: A good README.md orients the new user to the directory and points to more detailed explanation and user guides:\n\n   - What is this directory intended to hold?\n   - Which files should the developer look at first? Are some files an API?\n   - Who maintains this directory and where I can learn more?\n\nSee the [README.md guidelines](https://google.github.io/styleguide/docguide/READMEs.html).\n\n5. **docs**: The contents of a good docs directory explain how to:\n   - Get started using the relevant API, library, or tool.\n   - Run its tests.\n   - Debug its output.\n   - Release the binary.\n6. **Design docs, PRDs**: A good design doc or PRD discusses the proposed implementation at length for the purpose of collecting feedback on that design. However, once the code is implemented, design docs should serve as archives of these decisions, not as half-correct docs (they are often misused).\n\n7. **Other external docs**: Some teams maintain documentation in other locations, separate from the code, such as Google Sites, Drive, or wiki. If you do maintain documentation in other locations, you should clearly point to those locations from your project directory (for example, by adding an obvious link to the location from your project’s `README.md`).\n\n## Duplication is Evil\nDo not write your own guide to a common Google technology or process. Link to it instead. If the guide doesn’t exist or it’s badly out of date, submit your updates to the appropriate directory or create a package-level README.md. **Take ownership and don’t be shy**: Other teams will usually welcome your contributions.\n", "metadata": {"source_url": "https://google.github.io/styleguide/docguide/best_practices.html", "title": "Documentation Best Practices", "description": "Guidelines for creating effective documentation that is clear, concise, and useful.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:22:34", "type": "overview", "page_metadata": {"ogSiteName": "styleguide", "favicon": "https://google.github.io/styleguide/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:site_name": "styleguide", "description": "Style guides for Google-originated open-source projects", "language": "en-US", "ogLocale": "en_US", "og:title": "Documentation Best Practices", "ogTitle": "Documentation Best Practices", "og:description": "Style guides for Google-originated open-source projects", "title": "Documentation Best Practices | styleguide", "ogUrl": "https://google.github.io/styleguide/docguide/best_practices.html", "generator": "Jekyll v3.10.0", "og:type": "website", "ogDescription": "Style guides for Google-originated open-source projects", "og:locale": "en_US", "twitter:card": "summary", "twitter:title": "Documentation Best Practices", "og:url": "https://google.github.io/styleguide/docguide/best_practices.html", "scrapeId": "37d6cdec-4444-4ae5-ac60-bbd8ef397582", "sourceURL": "https://google.github.io/styleguide/docguide/best_practices.html", "url": "https://google.github.io/styleguide/docguide/best_practices.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Documentation Best Practices\"?\n\nAssistant: Here are the recommended best practices:\n\n• Docs work best when they are alive but frequently trimmed, like a bonsai tree.\n• Change your documentation in the same CL as the code change.\n• Dead docs are bad. They misinform, they slow down, they incite despair in engineers and laziness in team leads.\n• It’s easy to be overwhelmed. If your docs are in bad shape, take it slow, doc health is a gradual accumulation.\n• Default to delete or leave behind if migrating. Stragglers can always be recovered.\n• Documentation is an art. There is no perfect document, there are only proven methods and prudent guidelines.\n• Write for humans first, computers second.\n", "metadata": {"source_url": "https://google.github.io/styleguide/docguide/best_practices.html", "title": "Documentation Best Practices", "description": "Guidelines for creating effective documentation that is clear, concise, and useful.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:22:34", "type": "best_practices", "page_metadata": {"ogSiteName": "styleguide", "favicon": "https://google.github.io/styleguide/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:site_name": "styleguide", "description": "Style guides for Google-originated open-source projects", "language": "en-US", "ogLocale": "en_US", "og:title": "Documentation Best Practices", "ogTitle": "Documentation Best Practices", "og:description": "Style guides for Google-originated open-source projects", "title": "Documentation Best Practices | styleguide", "ogUrl": "https://google.github.io/styleguide/docguide/best_practices.html", "generator": "Jekyll v3.10.0", "og:type": "website", "ogDescription": "Style guides for Google-originated open-source projects", "og:locale": "en_US", "twitter:card": "summary", "twitter:title": "Documentation Best Practices", "og:url": "https://google.github.io/styleguide/docguide/best_practices.html", "scrapeId": "37d6cdec-4444-4ae5-ac60-bbd8ef397582", "sourceURL": "https://google.github.io/styleguide/docguide/best_practices.html", "url": "https://google.github.io/styleguide/docguide/best_practices.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Go Style Decisions\"?\n\nAssistant: This document contains style decisions intended to unify and provide standard guidance, explanations, and examples for the advice given by the Go readability mentors.\n\nHere's a detailed explanation:\n\n\n## About\nThis document contains style decisions intended to unify and provide standard guidance, explanations, and examples for the advice given by the Go readability mentors.\n\nThis document is **not exhaustive** and will grow over time. In cases where [the core style guide](https://google.github.io/styleguide/go/guide) contradicts the advice given here, **the style** **guide takes precedence**, and this document should be updated accordingly.\n\nSee [the Overview](https://google.github.io/styleguide/go#about) for the full set of Go Style documents.\n\nThe following sections have moved from style decisions to another part of the guide:\n\n- **MixedCaps**: see [guide#mixed-caps](https://google.github.io/styleguide/go/guide#mixed-caps)\n- **Formatting**: see [guide#formatting](https://google.github.io/styleguide/go/guide#formatting)\n- **Line Length**: see [guide#line-length](https://google.github.io/styleguide/go/guide#line-length)\n", "metadata": {"source_url": "https://google.github.io/styleguide/go/decisions.html", "title": "Go Style Decisions", "description": "This document contains style decisions intended to unify and provide standard guidance, explanations, and examples for the advice given by the Go readability mentors.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:22:53", "type": "overview", "page_metadata": {"twitter:card": "summary", "language": "en-US", "ogUrl": "https://google.github.io/styleguide/go/decisions.html", "og:url": "https://google.github.io/styleguide/go/decisions.html", "generator": "Jekyll v3.10.0", "ogTitle": "styleguide", "og:title": "styleguide", "title": "styleguide | Style guides for Google-originated open-source projects", "description": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "ogDescription": "Style guides for Google-originated open-source projects", "ogLocale": "en_US", "twitter:title": "styleguide", "og:site_name": "styleguide", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "styleguide", "og:locale": "en_US", "og:description": "Style guides for Google-originated open-source projects", "scrapeId": "5c999e4f-235f-4797-81db-4f46f2bff623", "sourceURL": "https://google.github.io/styleguide/go/decisions.html", "url": "https://google.github.io/styleguide/go/decisions.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: Can you show me some code examples for \"Go Style Decisions\"?\n\nAssistant: Here are some code examples:\n\n### Constant names\n```yaml\n// Good:\nconst MaxPacketSize = 512\n\nconst (\n    ExecuteBit = 1 << iota\n    WriteBit\n    ReadBit\n)\n\n// Bad:\nconst MAX_PACKET_SIZE = 512\nconst kMaxBufferSize = 1024\nconst KMaxUsersPergroup = 500\n\n// Bad:\nconst Twelve = 12\n\nconst (\n    UserNameColumn = \"username\"\n    GroupColumn    = \"group\"\n)\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide/go/decisions.html", "title": "Go Style Decisions", "description": "This document contains style decisions intended to unify and provide standard guidance, explanations, and examples for the advice given by the Go readability mentors.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:22:53", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "language": "en-US", "ogUrl": "https://google.github.io/styleguide/go/decisions.html", "og:url": "https://google.github.io/styleguide/go/decisions.html", "generator": "Jekyll v3.10.0", "ogTitle": "styleguide", "og:title": "styleguide", "title": "styleguide | Style guides for Google-originated open-source projects", "description": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "ogDescription": "Style guides for Google-originated open-source projects", "ogLocale": "en_US", "twitter:title": "styleguide", "og:site_name": "styleguide", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "styleguide", "og:locale": "en_US", "og:description": "Style guides for Google-originated open-source projects", "scrapeId": "5c999e4f-235f-4797-81db-4f46f2bff623", "sourceURL": "https://google.github.io/styleguide/go/decisions.html", "url": "https://google.github.io/styleguide/go/decisions.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Go Style Decisions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use doc preview during development and code review to see whether the documentation and runnable examples are useful and are presented the way you expect them to be.\n• Ensure that commentary is readable from source even on narrow screens.\n• All top-level exported names must have doc comments, as should unexported type or function declarations with unobvious behavior or meaning.\n", "metadata": {"source_url": "https://google.github.io/styleguide/go/decisions.html", "title": "Go Style Decisions", "description": "This document contains style decisions intended to unify and provide standard guidance, explanations, and examples for the advice given by the Go readability mentors.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:22:53", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "language": "en-US", "ogUrl": "https://google.github.io/styleguide/go/decisions.html", "og:url": "https://google.github.io/styleguide/go/decisions.html", "generator": "Jekyll v3.10.0", "ogTitle": "styleguide", "og:title": "styleguide", "title": "styleguide | Style guides for Google-originated open-source projects", "description": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "ogDescription": "Style guides for Google-originated open-source projects", "ogLocale": "en_US", "twitter:title": "styleguide", "og:site_name": "styleguide", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "styleguide", "og:locale": "en_US", "og:description": "Style guides for Google-originated open-source projects", "scrapeId": "5c999e4f-235f-4797-81db-4f46f2bff623", "sourceURL": "https://google.github.io/styleguide/go/decisions.html", "url": "https://google.github.io/styleguide/go/decisions.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Style Guide\"?\n\nAssistant: A guide outlining the philosophy and principles of documentation and style.\n\nHere's a detailed explanation:\n\n\n## Philosophy\n埏埴以為器，當其無，有器之用.\n\n_Clay becomes pottery through craft, but it’s the emptiness that makes a pot useful._\n\n\\- [Laozi](https://ctext.org/dictionary.pl?if=en&id=11602)\n\nContents:\n\n1. [Radical simplicity](https://google.github.io/styleguide/docguide/philosophy.html#radical-simplicity)\n2. [Readable source text](https://google.github.io/styleguide/docguide/philosophy.html#readable-source-text)\n3. [Minimum viable documentation](https://google.github.io/styleguide/docguide/philosophy.html#minimum-viable-documentation)\n4. [Better is better than best](https://google.github.io/styleguide/docguide/philosophy.html#better-is-better-than-best)\n\n## Radical simplicity\n- **Scalability and interoperability** are more important than a menagerie of unessential features. Scale comes from simplicity, speed, and ease. Interoperability comes from unadorned, digestible content.\n\n- **Fewer distractions** make for better writing and more productive reading.\n\n- **New features should never interfere with the simplest use case** and should remain invisible to users who don’t need them.\n\n- **Markdown is designed for the average engineer** – the busy, just-want-to-go-back-to-coding engineer. Large and complex documentation is possible but not the primary focus.\n\n- **Minimizing context switching makes people happier.** Engineers should be able to interact with documentation using the same tools they use to read and write code.\n\n## Readable source text\n- **Plain text not only suffices, it is superior**. Markdown itself is not essential to this formula, but it is the best and most widely supported solution right now. HTML is generally not encouraged.\n\n- **Content and presentation should not mingle**. It should always be possible to ditch the renderer and read the essential information at source. Users should never have to touch the presentation layer if they don’t want to.\n\n- **Portability and future-proofing leave room for the unimagined integrations to come**, and are best achieved by keeping the source as human-readable as possible.\n\n- **Static content is better than dynamic**, because content should not depend on the features of any one server. However, **fresh is better than stale**. We strive to balance these needs.\n\n## Minimum viable documentation\n- **Docs thrive when they’re treated like tests**: a necessary chore one learns to savor because it rewards over time. See [Best Practices](https://google.github.io/styleguide/docguide/best_practices.html).\n\n- **Brief and utilitarian is better than long and exhaustive**. The vast majority of users need only a small fraction of the author’s total knowledge, but they need it quickly and often.\n\n## Better is better than best\n- **Incremental improvement is better than prolonged debate**. Patience and tolerance of imperfection allow projects to evolve organically.\n\n- **Don’t** **[lick the cookie](https://community.redhat.com/blog/2018/09/dont-lick-the-cookie/),** **pass the plate**. Ideas are cheap. We’re drowning in potentially impactful projects. Choose only those you can really handle and release those you can’t.\n", "metadata": {"source_url": "https://google.github.io/styleguide/docguide/philosophy.html", "title": "Style Guide", "description": "A guide outlining the philosophy and principles of documentation and style.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:23:20", "type": "overview", "page_metadata": {"og:url": "https://google.github.io/styleguide/docguide/philosophy.html", "og:type": "website", "twitter:card": "summary", "twitter:title": "Philosophy", "og:site_name": "styleguide", "description": "Style guides for Google-originated open-source projects", "ogSiteName": "styleguide", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "og:title": "Philosophy", "ogTitle": "Philosophy", "ogUrl": "https://google.github.io/styleguide/docguide/philosophy.html", "ogDescription": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "title": "Philosophy | styleguide", "language": "en-US", "og:description": "Style guides for Google-originated open-source projects", "generator": "Jekyll v3.10.0", "og:locale": "en_US", "scrapeId": "6abefc2f-88ad-493d-bd3e-fa6dabad688f", "sourceURL": "https://google.github.io/styleguide/docguide/philosophy.html", "url": "https://google.github.io/styleguide/docguide/philosophy.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Style Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Scalability and interoperability are more important than unessential features.\n• Fewer distractions make for better writing and reading.\n• New features should not interfere with the simplest use case.\n• Markdown is designed for the average engineer.\n• Minimizing context switching makes people happier.\n• Plain text is superior to complex formats.\n• Content and presentation should not mingle.\n• Portability and future-proofing are important.\n• Static content is better than dynamic, but fresh is better than stale.\n• Docs should be treated like tests.\n• Brief and utilitarian documentation is preferred.\n• Incremental improvement is better than prolonged debate.\n", "metadata": {"source_url": "https://google.github.io/styleguide/docguide/philosophy.html", "title": "Style Guide", "description": "A guide outlining the philosophy and principles of documentation and style.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:23:20", "type": "best_practices", "page_metadata": {"og:url": "https://google.github.io/styleguide/docguide/philosophy.html", "og:type": "website", "twitter:card": "summary", "twitter:title": "Philosophy", "og:site_name": "styleguide", "description": "Style guides for Google-originated open-source projects", "ogSiteName": "styleguide", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "og:title": "Philosophy", "ogTitle": "Philosophy", "ogUrl": "https://google.github.io/styleguide/docguide/philosophy.html", "ogDescription": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "title": "Philosophy | styleguide", "language": "en-US", "og:description": "Style guides for Google-originated open-source projects", "generator": "Jekyll v3.10.0", "og:locale": "en_US", "scrapeId": "6abefc2f-88ad-493d-bd3e-fa6dabad688f", "sourceURL": "https://google.github.io/styleguide/docguide/philosophy.html", "url": "https://google.github.io/styleguide/docguide/philosophy.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Style Guide - READMEs\"?\n\nAssistant: About README.md files.\n\nHere's a detailed explanation:\n\n\n## Overview\nA README is a short summary of the contents of a directory. The contents of the file are displayed in GitHub and Gitiles when you view the contents of the containing directory. README files provide critical information for people browsing your code, especially first-time users.\n\nThis document covers how to create README files that are readable with GitHub and Gitiles.\n\n## Readable README files\n**README files must be named `README.md`.** The file name _must_ end with the `.md` extension and is case sensitive.\n\nFor example, the file /README.md is rendered when you view the contents of the containing directory:\n\nhttps://github.com/google/styleguide/tree/gh-pages\n\nAlso `README.md` at `HEAD` ref is rendered by Gitiles when displaying repository index:\n\nhttps://gerrit.googlesource.com/gitiles/.\n\n## Where to put your README\nUnlike all other Markdown files, `README.md` files should not be located inside your product or library’s documentation directory. `README.md` files should be located in the top-level directory for your product or library’s actual codebase.\n\nAll top-level directories for a code package should have an up-to-date `README.md` file. This is especially important for package directories that provide interfaces for other teams.\n\n## What to put in your README\nAt a minimum, your `README.md` file should contain a link to your user- and/or team-facing documentation.\n\nEvery package-level `README.md` should include or point to the following information:\n\n1. What is in this package or library and what’s it used for.\n2. Points of contact.\n3. Status of whether this package or library is deprecated, or not for general release, etc.\n4. How to use the package or library. Examples include sample code, copyable `bazel run` or `bazel test` commands, etc.\n5. Links to relevant documentation.\n", "metadata": {"source_url": "https://google.github.io/styleguide/docguide/READMEs.html", "title": "Style Guide - READMEs", "description": "About README.md files.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:24:43", "type": "overview", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "ogSiteName": "styleguide", "ogUrl": "https://google.github.io/styleguide/docguide/READMEs.html", "twitter:title": "READMEs", "language": "en-US", "generator": "Jekyll v3.10.0", "ogLocale": "en_US", "og:site_name": "styleguide", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "title": "READMEs | styleguide", "description": "Style guides for Google-originated open-source projects", "og:type": "website", "og:description": "Style guides for Google-originated open-source projects", "ogDescription": "Style guides for Google-originated open-source projects", "twitter:card": "summary", "og:title": "READMEs", "ogTitle": "READMEs", "og:url": "https://google.github.io/styleguide/docguide/READMEs.html", "scrapeId": "36c88a75-4515-45b7-b548-baa974d30f9d", "sourceURL": "https://google.github.io/styleguide/docguide/READMEs.html", "url": "https://google.github.io/styleguide/docguide/READMEs.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Style Guide - READMEs\"?\n\nAssistant: Here are the recommended best practices:\n\n• README files must be named `README.md` and must end with the `.md` extension and is case sensitive.\n• `README.md` files should be located in the top-level directory for your product or library’s actual codebase.\n• All top-level directories for a code package should have an up-to-date `README.md` file.\n• At a minimum, your `README.md` file should contain a link to your user- and/or team-facing documentation.\n", "metadata": {"source_url": "https://google.github.io/styleguide/docguide/READMEs.html", "title": "Style Guide - READMEs", "description": "About README.md files.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:24:43", "type": "best_practices", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "ogSiteName": "styleguide", "ogUrl": "https://google.github.io/styleguide/docguide/READMEs.html", "twitter:title": "READMEs", "language": "en-US", "generator": "Jekyll v3.10.0", "ogLocale": "en_US", "og:site_name": "styleguide", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "title": "READMEs | styleguide", "description": "Style guides for Google-originated open-source projects", "og:type": "website", "og:description": "Style guides for Google-originated open-source projects", "ogDescription": "Style guides for Google-originated open-source projects", "twitter:card": "summary", "og:title": "READMEs", "ogTitle": "READMEs", "og:url": "https://google.github.io/styleguide/docguide/READMEs.html", "scrapeId": "36c88a75-4515-45b7-b548-baa974d30f9d", "sourceURL": "https://google.github.io/styleguide/docguide/READMEs.html", "url": "https://google.github.io/styleguide/docguide/READMEs.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Google XML Document Format Style Guide\"?\n\nAssistant: This document provides a set of guidelines for general use when designing new XML document formats (and to some extent XML documents as well).\n\nHere's a detailed explanation:\n\n\n## Introduction\nThis document provides a set of guidelines for general use when designing new XML document formats (and to some extent XML documents as well; see Section 11). Document formats usually include both formal parts (DTDs, schemas) and parts expressed in normative English prose.\n\nThese guidelines apply to new designs, and are not intended to force retroactive changes in existing designs. When participating in the creation of public or private document format designs, the guidelines may be helpful but should not control the group consensus.\n\nThis guide is meant for the design of XML that is to be generated and consumed by machines rather than human beings. Its rules are _not applicable_ to formats such as XHTML (which should be formatted as much like HTML as possible) or ODF which are meant to express rich text. A document that includes embedded content in XHTML or some other rich-text format, but also contains purely machine-interpretable portions, SHOULD follow this style guide for the machine-interpretable portions. It also does not affect XML document formats that are created by translations from proto buffers or through some other type of format.\n\nBrief rationales have been added to most of the guidelines. They are maintained in the same document in hopes that they won't get out of date, but they are not considered normative.\n\nThe terms MUST, MUST NOT, SHOULD, SHOULD NOT, and MAY are used in this document in the sense of [RFC 2119.](https://www.ietf.org/rfc/rfc2119.txt \"RFC 2119\")\n\n## 1. To design or not to design, that is the question\n1. Attempt to reuse existing XML formats whenever possible, especially those which allow extensions. Creating an entirely new format should be done only with care and consideration; read [Tim Bray's warnings](https://www.tbray.org/ongoing/When/200x/2006/01/08/No-New-XML-Languages \"Tim Bray's warnings\") first. Try to get wide review of your format, from outside your organization as well, if possible. [_Rationale:_ New document formats have a cost: they must be reviewed, documented, and learned by users.]\n\n2. If you are reusing or extending an existing format, make _sensible_ use of the prescribed elements and attributes, especially any that are required. Don't completely repurpose them, but do try to see how they might be used in creative ways if the vanilla semantics aren't suitable. As a last resort when an element or attribute is required by the format but is not appropriate for your use case, use some fixed string as its value. [_Rationale:_ Markup reuse is good, markup abuse is bad.]\n\n3. When extending formats, use the implicit style of the existing format, even if it contradicts this guide. [_Rationale:_ Consistency.]\n\n## 2. Schemas\n1. Document formats SHOULD be expressed using a schema language. [_Rationale:_ Clarity and machine-checkability.]\n\n2. The schema language SHOULD be [RELAX NG](http://www.relaxng.org/ \"RELAX NG\") [compact syntax](http://www.relaxng.org/compact-tutorial-20030326.html \"compact syntax\"). Embedded [Schematron](http://www.schematron.com/ \"Schematron\") rules MAY be added to the schema for additional fine control. [_Rationale:_ RELAX NG is the most flexible schema language, with very few arbitrary restrictions on designs. The compact syntax is quite easy to read and learn, and can be converted one-to-one to and from the XML syntax when necessary. Schematron handles arbitrary cross-element and cross-attribute constraints nicely.]\n\n3. Schemas SHOULD use the [\"Salami Slice\" style](http://www.xfront.com/GlobalVersusLocal.html#SecondDesign \"Salami Slice\" style) (one rule per element). Schemas MAY use the [\"Russian Doll\" style](http://www.xfront.com/GlobalVersusLocal.html#FirstDesign \"Russian Doll\" style) (schema resembles document) if they are short and simple. The [\"Venetian Blind\" style](http://www.xfront.com/GlobalVersusLocal.html#ThirdDesign \"Venetian Blind\" style) (one rule per element type) is unsuited to RELAX NG and SHOULD NOT be used.\n\n4. Regular expressions SHOULD be provided to assist in validating complex values.\n\n5. DTDs and/or W3C XML Schemas MAY be provided for compatibility with existing products, tools, or users. [_Rationale:_ We can't change the world all at once.]\n\n## 3. Namespaces\n1. Element names MUST be in a namespace, except when extending pre-existing document types that do not use namespaces. A default namespace SHOULD be used. [_Rationale:_ Namespace-free documents are obsolete; every set of names should be in some namespace. Using a default namespace improves readability.]\n\n2. Attribute names SHOULD NOT be in a namespace unless they are drawn from a foreign document type or are meant to be used in foreign document types. [_Rationale:_ Attribute names in a namespace must always have a prefix, which is annoying to type and hard to read.]\n\n3. Namespace names are HTTP URIs. Namespace names SHOULD take the form https://example.com/_whatever_/_year_, where _whatever_ is a unique value based on the name of the document type, and _year_ is the year the namespace was created. There may be additional URI-path parts before the _year._ [_Rationale:_ Existing convention. Providing the year allows for the possible recycling of code names.]\n\n4. Namespaces MUST NOT be changed unless the semantics of particular elements or attributes has changed in drastically incompatible ways. [_Rationale:_ Changing the namespace requires changing all client code.]\n\n5. Namespace prefixes SHOULD be short (but not so short that they are likely to be conflict with another project). Single-letter prefixes MUST NOT be used. Prefixes SHOULD contain only lower-case ASCII letters. [_Rationale:_ Ease of typing and absence of encoding compatibility problems.]\n\n## 4. Names and enumerated values\n**Note:** \"Names\" refers to the names of elements, attributes, and enumerated values.\n\n1. All names MUST use lowerCamelCase. That is, they start with an initial lower-case letter, then each new word within the name starts with an initial capital letter. [_Rationale:_ Adopting a single style provides consistency, which helps when referring to names since the capitalization is known and so does not have to be remembered. It matches Java style, and other languages can be dealt with using automated name conversion.]\n\n2. Names MUST contain only ASCII letters and digits. [_Rationale:_ Ease of typing and absence of encoding compatibility problems.]\n\n3. Names SHOULD NOT exceed 25 characters. Longer names SHOULD be avoided by devising concise and informative names. If a name can only remain within this limit by becoming obscure, the limit SHOULD be ignored. [_Rationale:_ Longer names are awkward to use and require additional bandwidth.]\n\n4. Published standard abbreviations, if sufficiently well-known, MAY be employed in constructing names. Ad hoc abbreviations MUST NOT be used. Acronyms MUST be treated as words for camel-casing purposes: informationUri, not informationURI. [_Rationale:_ An abbreviation that is well known to one community is often incomprehensible to others who need to use the same document format (and who do understand the full name); treating an acronym as a word makes it easier to see where the word boundaries are.]\n\n## 5. Elements\n1. All elements MUST contain either nothing, character content, or child elements. Mixed content MUST NOT be used. [_Rationale:_ Many XML data models don't handle mixed content properly, and its use makes the element order-dependent. As always, textual formats are not covered by this rule.]\n\n2. XML elements that merely wrap repeating child elements SHOULD NOT be used. [_Rationale:_ They are not used in Atom and add nothing.]\n\n## 6. Attributes\n1. Document formats MUST NOT depend on the order of attributes in a start-tag. [_Rationale:_ Few XML parsers report the order, and it is not part of the XML Infoset.]\n\n2. Elements SHOULD NOT be overloaded with too many attributes (no more than 10 as a rule of thumb). Instead, use child elements to encapsulate closely related attributes. [_Rationale:_ This approach maintains the built-in extensibility that XML provides with elements, and is useful for providing forward compatibility as a specification evolves.]\n\n3. Attributes MUST NOT be used to hold values in which line breaks are significant. [_Rationale:_ Such line breaks are converted to spaces by conformant XML parsers.]\n\n4. Document formats MUST allow either single or double quotation marks around attribute values. [_Rationale:_ XML parsers don't report the difference.]\n\n## 7. Values\n1. Numeric values SHOULD be 32-bit signed integers, 64-bit signed integers, or 64-bit IEEE doubles, all expressed in base 10. These correspond to the XML Schema types xsd:int, xsd:long, and xsd:double respectively. If required in particular cases, xsd:integer (unlimited-precision integer) values MAY also be used. [_Rationale:_ There are far too many numeric types in XML Schema: these provide a reasonable subset.]\n\n2. Boolean values SHOULD NOT be used (use enumerations instead). If they must be used, they MUST be expressed as true or false, corresponding to a subset of the XML Schema type xsd:boolean. The alternative xsd:boolean values 1 and 0 MUST NOT be used. [_Rationale:_ Boolean arguments are not extensible. The additional flexibility of allowing numeric values is not abstracted away by any parser.]\n\n3. Dates should be represented using [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt \"RFC 3339\") format, a subset of both ISO 8601 format and XML Schema xsd:dateTime format. UTC times SHOULD be used rather than local times. [_Rationale:_ There are far too many date formats and time zones, although it is recognized that sometimes local time preserves important information.]\n\n4. Embedded syntax in character content and attribute values SHOULD NOT be used. Syntax in values means XML tools are largely useless. Syntaxes such as dates, URIs, and XPath expressions are exceptions. [_Rationale:_ Users should be able to process XML documents using only an XML parser without requiring additional special-purpose parsers, which are easy to get wrong.]\n\n5. Be careful with whitespace in values. XML parsers don't strip whitespace in elements, but do convert newlines to spaces in attributes. However, application frameworks may do more aggressive whitespace stripping. Your document format SHOULD give rules for whitespace stripping.\n\n## 8. Key-value pairs\n1. Simple key-value pairs SHOULD be represented with an empty element whose name represents the key, with the value attribute containing the value. Elements that have a value attribute MAY also have a unit attribute to specify the unit of a measured value. For physical measurements, the [SI system](https://en.wikipedia.org/wiki/International_System_of_Units \"SI system\") SHOULD be used. [_Rationale:_ Simplicity and design consistency. Keeping the value in an attribute hides it from the user, since displaying just the value without the key is not useful.]\n\n2. If the number of possible keys is very large or unbounded, key-value pairs MAY be represented by a single generic element with key, value, and optional unit and scheme attributes (which serve to discriminate keys from different domains). In that case, also provide (not necessarily in the same document) a list of keys with human-readable explanations.\n\n## 9. Binary data\n**Note:** There are no hard and fast rules about whether binary data should be included as part of an XML document or not. If it's too large, it's probably better to link to it.\n\n1. Binary data MUST NOT be included directly as-is in XML documents, but MUST be encoded using Base64 encoding. [_Rationale:_ XML does not allow arbitrary binary bytes.]\n\n2. The line breaks required by Base64 MAY be omitted. [_Rationale:_ The line breaks are meant to keep plain text lines short, but XML is not really plain text.]\n\n3. An attribute named xsi:type with value xs:base64Binary MAY be attached to this element to signal that the Base64 format is in use. [_Rationale:_ Opaque blobs should have decoding instructions attached.]\n\n## 10. Processing instructions\n1. New processing instructions MUST NOT be created except in order to specify purely local processing conventions, and SHOULD be avoided altogether. Existing standardized processing instructions MAY be used. [_Rationale:_ Processing instructions fit awkwardly into XML data models and can always be replaced by elements; they exist primarily to avoid breaking backward compatibility.]\n\n## 11. Representation of XML document instances\n**Note:** These points are only guidelines, as the format of program-created instances will often be outside the programmer's control (for example, when an XML serialization library is being used). _In no case_ should XML parsers rely on these guidelines being followed. Use standard XML parsers, not hand-rolled hacks.\n\n01. The character encoding used SHOULD be UTF-8. Exceptions should require extremely compelling circumstances. [_Rationale:_ UTF-8 is universal and in common use.]\n\n02. Namespaces SHOULD be declared in the root element of a document wherever possible. [_Rationale:_ Clarity and consistency.]\n\n03. The mapping of namespace URIs to prefixes SHOULD remain constant throughout the document, and SHOULD also be used in documentation of the design. [_Rationale:_ Clarity and consistency.]\n\n04. Well-known prefixes such as html: (for XHTML), dc: (for Dublin Core metadata), and xs: (for XML Schema) should be used for standard namespaces. [_Rationale:_ Human readability.]\n\n05. Redundant whitespace in a tag SHOULD NOT be used. Use one space before each attribute in a start-tag; if the start tag is too long, the space MAY be replaced by a newline. [_Rationale:_ Consistency and conciseness.]\n\n06. Empty elements MAY be expressed as empty tags or a start-tag immediately followed by an end-tag. No distinction should be made between these two formats by any application. [_Rationale:_ They are not distinguished by XML parsers.]\n\n07. Documents MAY be pretty-printed using 2-space indentation for child elements. Elements that contain character content SHOULD NOT be wrapped. Long start-tags MAY be broken using newlines (possibly with extra indentation) after any attribute value except the last. [_Rationale:_ General compatibility with our style. Wrapping character content affects its value.]\n\n08. Attribute values MAY be surrounded with either quotation marks or apostrophes. Specifications MUST NOT require or forbid the use of either form. &apos; and &quot; may be freely used to escape each type of quote. [_Rationale:_ No XML parsers report the distinction.]\n\n09. Comments MUST NOT be used to carry real data. Comments MAY be used to contain TODOs in hand-written XML. Comments SHOULD NOT be used at all in publicly transmitted documents. [_Rationale:_ Comments are often discarded by parsers.]\n\n10. If comments are nevertheless used, they SHOULD appear only in the document prolog or in elements that contain child elements. If pretty-printing is required, pretty-print comments like elements, but with line wrapping. Comments SHOULD NOT appear in elements that contain character content. [_Rationale:_ Whitespace in and around comments improves readability, but embedding a comment in character content can lead to confusion about what whitespace is or is not in the content.]\n\n11. Comments SHOULD have whitespace following <!-- and preceding -->. [_Rationale:_ Readability.]\n\n12. CDATA sections MAY be used; they are equivalent to the use of &amp; and &lt;. Specifications MUST NOT require or forbid the use of CDATA sections. [_Rationale:_ Few XML parsers report the distinction, and combinations of CDATA and text are often reported as single objects anyway.]\n\n13. Entity references other than the XML standard entity references &amp;, &lt;, &gt;, &quot;, and &apos; MUST NOT be used. Character references MAY be used, but actual characters are preferred, unless the character encoding is not UTF-8. As usual, textual formats are exempt from this rule.\n\n## 12. Elements vs. Attributes\n**Note:** There are no hard and fast rules for deciding when to use attributes and when to use elements. Here are some of the considerations that designers should take into account; no rationales are given.\n\n### 12.1. General points:\n\n1. Attributes are more restrictive than elements, and all designs have some elements, so an all-element design is simplest -- which is not the same as best.\n\n2. In a tree-style data model, elements are typically represented internally as nodes, which use more memory than the strings used to represent attributes. Sometimes the nodes are of different application-specific classes, which in many languages also takes up memory to represent the classes.\n\n3. When streaming, elements are processed one at a time (possibly even piece by piece, depending on the XML parser you are using), whereas all the attributes of an element and their values are reported at once, which costs memory, particularly if some attribute values are very long.\n\n4. Both element content and attribute values need to be escaped appropriately, so escaping should not be a consideration in the design.\n\n5. In some programming languages and libraries, processing elements is easier; in others, processing attributes is easier. Beware of using ease of processing as a criterion. In particular, XSLT can handle either with equal facility.\n\n6. If a piece of data should usually be shown to the user, consider using an element; if not, consider using an attribute. (This rule is often violated for one reason or another.)\n\n7. If you are extending an existing schema, do things by analogy to how things are done in that schema.\n\n8. Sensible schema languages, meaning RELAX NG and Schematron, treat elements and attributes symmetrically. Older and cruder [XML Schema](https://www.w3.org/TR/2004/REC-xmlschema-0-20041028/ \"XML Schema\") schema languages such as DTDs and XML Schema, tend to have better support for elements.\n\n### 12.2 Using elements\n\n1. If something might appear more than once in a data model, use an element rather than introducing attributes with names like foo1, foo2, foo3 ....\n\n2. Use elements to represent a piece of information that can be considered an independent object and when the information is related via a parent/child relationship to another piece of information.\n\n3. Use elements when data incorporates strict typing or relationship rules.\n\n4. If order matters between two pieces of data, use elements for them: attributes are inherently unordered.\n\n5. If a piece of data has, or might have, its own substructure, use it in an element: getting substructure into an attribute is always messy. Similarly, if the data is a constituent part of some larger piece of data, put it in an element.\n\n6. An exception to the previous rule: multiple whitespace-separated tokens can safely be put in an attribute. In principle, the separator can be anything, but schema-language validators are currently only able to handle whitespace, so it's best to stick with that.\n\n7. If a piece of data extends across multiple lines, use an element: XML parsers will change newlines in attribute values into spaces.\n\n8. If a piece of data is very large, use an element so that its content can be streamed.\n\n9. If a piece of data is in a natural language, put it in an element so you can use the xml:lang attribute to label the language being used. Some kinds of natural-language text, like Japanese, often make use [annotations](https://www.w3.org/TR/2001/REC-ruby-20010531 \"annotations\") that are conventionally represented using child elements; right-to-left languages like Hebrew and Arabic may similarly require child elements to manage [bidirectionality](https://www.w3.org/TR/2001/REC-ruby-20010531 \"bidirectionality\") properly.\n\n### 12.3 Using attributes\n\n1. If the data is a code from an enumeration, code list, or controlled vocabulary, put it in an attribute if possible. For example, language tags, currency codes, medical diagnostic codes, etc. are best handled as attributes.\n\n2. If a piece of data is really metadata on some other piece of data (for example, representing a class or role that the main data serves, or specifying a method of processing it), put it in an attribute if possible.\n\n3. In particular, if a piece of data is an ID for some other piece of data, or a reference to such an ID, put the identifying piece in an attribute. When it's an ID, use the name xml:id for the attribute.\n\n4. Hypertext references are conventionally put in href attributes.\n\n5. If a piece of data is applicable to an element and any descendant elements unless it is overridden in some of them, it is conventional to put it in an attribute. Well-known examples are xml:lang, xml:space, xml:base, and namespace declarations.\n\n6. If terseness is really the _most_ important thing, use attributes, but consider gzip compression instead -- it works very well on documents with highly repetitive structures.\n\n## 13. Parting words\nUse common sense and _BE CONSISTENT_. Design for extensibility. You _are_ gonna need it. [_Rationale:_ Long and painful experience.]\n\nWhen designing XML formats, take a few minutes to look at other formats and determine their style. The point of having style guidelines is so that people can concentrate on what you are saying, rather than on how you are saying it.\n\nBreak _ANY OR ALL_ of these rules (yes, even the ones that say MUST) rather than create a crude, arbitrary, disgusting mess of a design if that's what following them slavishly would give you. In particular, random mixtures of attributes and child elements are hard to follow and hard to use, though it often makes good sense to use both when the data clearly fall into two different groups such as simple/complex or metadata/data.\n\nNewbies always ask:\n\n \"Elements or attributes?\n\nWhich will serve me best?\"\n\nThose who know roar like lions;\n\nWise hackers smile like tigers.\n\n --a [tanka](https://en.wikipedia.org/wiki/Waka_%28poetry%29#Forms_of_waka \"tanka\"), or extended haiku\n\n[TODO: if a registry of schemas is set up, add a link to it]\n", "metadata": {"source_url": "https://google.github.io/styleguide/xmlstyle.html", "title": "Google XML Document Format Style Guide", "description": "This document provides a set of guidelines for general use when designing new XML document formats (and to some extent XML documents as well).", "has_code_examples": false, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-27 23:35:00", "type": "overview", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "scrapeId": "4b75e401-65a4-4510-b277-45886b94b43a", "sourceURL": "https://google.github.io/styleguide/xmlstyle.html", "url": "https://google.github.io/styleguide/xmlstyle.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Google XML Document Format Style Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Reuse existing XML formats whenever possible.\n• Make sensible use of prescribed elements and attributes when reusing or extending existing formats.\n• Use the implicit style of the existing format when extending formats.\n• Document formats SHOULD be expressed using a schema language for clarity and machine-checkability.\n• Use RELAX NG compact syntax for schemas.\n• Provide regular expressions to assist in validating complex values.\n• Use a default namespace to improve readability.\n• Names MUST use lowerCamelCase for consistency.\n• Avoid using mixed content in elements.\n• Document formats MUST NOT depend on the order of attributes in a start-tag.\n• Use child elements to encapsulate closely related attributes instead of overloading elements with too many attributes.\n", "metadata": {"source_url": "https://google.github.io/styleguide/xmlstyle.html", "title": "Google XML Document Format Style Guide", "description": "This document provides a set of guidelines for general use when designing new XML document formats (and to some extent XML documents as well).", "has_code_examples": false, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-27 23:35:00", "type": "best_practices", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "scrapeId": "4b75e401-65a4-4510-b277-45886b94b43a", "sourceURL": "https://google.github.io/styleguide/xmlstyle.html", "url": "https://google.github.io/styleguide/xmlstyle.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Google HTML/CSS Style Guide\"?\n\nAssistant: This document defines formatting and style rules for HTML and CSS. It aims at improving collaboration, code quality, and enabling supporting infrastructure.\n\nHere's a detailed explanation:\n\n\n## Background\nThis document defines formatting and style rules for HTML and CSS. It aims at improving collaboration, code quality, and enabling supporting infrastructure. It applies to raw, working files that use HTML and CSS, including Sass and GSS files. Tools are free to obfuscate, minify, and compile as long as the general code quality is maintained.\n\n## General\n\n\n## General Style Rules\n\n\n## Protocol\nUse HTTPS for embedded resources where possible.\n\nAlways use HTTPS ( `https:`) for images and other media files, style sheets, and scripts, unless the respective files are not available over HTTPS.\n\n```\n<!-- Not recommended: omits the protocol -->\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js\"></script>\n\n<!-- Not recommended: uses HTTP -->\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js\"></script>\n\n```\n\n```\n<!-- Recommended -->\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js\"></script>\n\n```\n\n```\n/* Not recommended: omits the protocol */\n@import '//fonts.googleapis.com/css?family=Open+Sans';\n\n/* Not recommended: uses HTTP */\n@import 'http://fonts.googleapis.com/css?family=Open+Sans';\n\n```\n\n```\n/* Recommended */\n@import 'https://fonts.googleapis.com/css?family=Open+Sans';\n\n```\n\n## General Formatting Rules\n\n\n## Indentation\nIndent by 2 spaces at a time.\n\nDon’t use tabs or mix tabs and spaces for indentation.\n\n```\n<ul>\n  <li>Fantastic\n  <li>Great\n</ul>\n\n```\n\n```\n.example {\n  color: blue;\n}\n\n```\n\n## Capitalization\nUse only lowercase.\n\nAll code has to be lowercase: This applies to HTML element names, attributes, attribute values (unless `text/CDATA`), CSS selectors, properties, and property values (with the exception of strings).\n\n```\n<!-- Not recommended -->\n<A HREF=\"/\">Home</A>\n\n```\n\n```\n<!-- Recommended -->\n<img src=\"google.png\" alt=\"Google\">\n\n```\n\n## Trailing Whitespace\nRemove trailing white spaces.\n\nTrailing white spaces are unnecessary and can complicate diffs.\n\n```\n<!-- Not recommended -->\n<p>What?_\n\n```\n\n```\n<!-- Recommended -->\n<p>Yes please.\n\n```\n\n## General Meta Rules\n\n\n## Encoding\nUse UTF-8 (no BOM).\n\nMake sure your editor uses UTF-8 as character encoding, without a byte order mark.\n\nSpecify the encoding in HTML templates and documents via `<meta charset=\"utf-8\">`. Do not specify the encoding of style sheets as these assume UTF-8.\n\n## Comments\nExplain code as needed, where possible.\n\nUse comments to explain code: What does it cover, what purpose does it serve, why is respective solution used or preferred?\n\n## Action Items\nMark todos and action items with `TODO`.\n\nHighlight todos by using the keyword `TODO` only, not other common formats like `@@`. Append action items after a colon as in `TODO: action item`.\n\n```\n{# TODO: Revisit centering. #}\n<center>Test</center>\n\n```\n\n```\n<!-- TODO: Remove optional tags. -->\n<ul>\n  <li>Apples</li>\n  <li>Oranges</li>\n</ul>\n\n```\n\n## HTML\n\n\n## HTML Style Rules\n\n\n## Document Type\nUse `<!doctype html>`.\n\nAlways put your HTML in [no-quirks mode](https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode) by including `<!doctype html>` at the beginning of the document.\n\n## HTML Validity\nUse valid HTML where possible.\n\nUse valid HTML code unless that is not possible due to otherwise unattainable performance goals regarding file size.\n\n## Semantics\nUse HTML according to its purpose.\n\nUse elements (sometimes incorrectly called “tags”) for what they have been created for. For example, use heading elements for headings, `p` elements for paragraphs, `a` elements for anchors, etc.\n\n## Multimedia Fallback\nProvide alternative contents for multimedia.\n\n## Separation of Concerns\nSeparate structure from presentation from behavior.\n\n## Entity References\nDo not use entity references.\n\n## Optional Tags\nOmit optional tags (optional).\n\n## `type` Attributes\nOmit `type` attributes for style sheets and scripts.\n\n## `id` Attributes\nAvoid unnecessary `id` attributes.\n\n## HTML Formatting Rules\n\n\n## General Formatting\nUse a new line for every block, list, or table element, and indent every such child element.\n\n## HTML Line-Wrapping\nBreak long lines (optional).\n\n## HTML Quotation Marks\nWhen quoting attributes values, use double quotation marks.\n\n## CSS\n\n\n## CSS Style Rules\n\n\n## CSS Validity\nUse valid CSS where possible.\n\n## Class Naming\nUse meaningful or generic class names.\n\n## Class Name Style\nUse class names that are as short as possible but as long as necessary.\n\n## Class Name Delimiters\nSeparate words in class names by a hyphen.\n\n## Prefixes\nPrefix selectors with an application-specific prefix (optional).\n\n## Type Selectors\nAvoid qualifying class names with type selectors.\n\n## ID Selectors\nAvoid ID selectors.\n\n## Shorthand Properties\nUse shorthand properties where possible.\n\n## 0 and Units\nOmit unit specification after “0” values, unless required.\n\n## Leading 0s\nAlways include leading “0”s in values.\n\n## Hexadecimal Notation\nUse 3 character hexadecimal notation where possible.\n\n## Important Declarations\nAvoid using `!important` declarations.\n\n## Hacks\nAvoid user agent detection as well as CSS “hacks”—try a different approach first.\n\n## CSS Formatting Rules\n\n\n## Declaration Order\nAlphabetize declarations (optional).\n\n## Block Content Indentation\nIndent all block content.\n\n## Declaration Stops\nUse a semicolon after every declaration.\n\n## Property Name Stops\nUse a space after a property name’s colon.\n\n## Declaration Block Separation\nUse a space between the last selector and the declaration block.\n\n## Selector and Declaration Separation\nSeparate selectors and declarations by new lines.\n\n## Rule Separation\nSeparate rules by new lines.\n\n## CSS Quotation Marks\nUse single ( `''`) rather than double ( `\"\"`) quotation marks for attribute selectors and property values.\n\n## CSS Meta Rules\n\n\n## Section Comments\nGroup sections by a section comment (optional).\n\n## Parting Words\n_Be consistent._\n\nIf you’re editing code, take a few minutes to look at the code around you and determine its style.\n", "metadata": {"source_url": "https://google.github.io/styleguide/htmlcssguide.html", "title": "Google HTML/CSS Style Guide", "description": "This document defines formatting and style rules for HTML and CSS. It aims at improving collaboration, code quality, and enabling supporting infrastructure.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-02-27 23:35:39", "type": "overview", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "language": "en", "title": "Google HTML/CSS Style Guide", "scrapeId": "916598f6-3359-47c9-acaa-1cbc89ee9e34", "sourceURL": "https://google.github.io/styleguide/htmlcssguide.html", "url": "https://google.github.io/styleguide/htmlcssguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: Can you show me some code examples for \"Google HTML/CSS Style Guide\"?\n\nAssistant: Here are some code examples:\n\n### Protocol - Not Recommended\n```yaml\n<!-- Not recommended: omits the protocol -->\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js\"></script>\n\n<!-- Not recommended: uses HTTP -->\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js\"></script>\n\n```\n\n### Protocol - Recommended\n```yaml\n<!-- Recommended -->\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js\"></script>\n\n```\n\n### Indentation - Not Recommended\n```yaml\n<ul>\n  <li>Fantastic\n  <li>Great\n</ul>\n\n```\n\n### Indentation - Recommended\n```yaml\n.example {\n  color: blue;\n}\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide/htmlcssguide.html", "title": "Google HTML/CSS Style Guide", "description": "This document defines formatting and style rules for HTML and CSS. It aims at improving collaboration, code quality, and enabling supporting infrastructure.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-02-27 23:35:39", "type": "code_examples", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "language": "en", "title": "Google HTML/CSS Style Guide", "scrapeId": "916598f6-3359-47c9-acaa-1cbc89ee9e34", "sourceURL": "https://google.github.io/styleguide/htmlcssguide.html", "url": "https://google.github.io/styleguide/htmlcssguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Google HTML/CSS Style Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use HTTPS for embedded resources where possible.\n• Indent by 2 spaces at a time.\n• Use only lowercase for HTML and CSS code.\n• Remove trailing white spaces.\n• Use UTF-8 (no BOM) for encoding.\n• Explain code as needed with comments.\n• Mark todos and action items with TODO.\n• Use valid HTML and CSS where possible.\n• Use meaningful or generic class names.\n• Avoid unnecessary id attributes.\n", "metadata": {"source_url": "https://google.github.io/styleguide/htmlcssguide.html", "title": "Google HTML/CSS Style Guide", "description": "This document defines formatting and style rules for HTML and CSS. It aims at improving collaboration, code quality, and enabling supporting infrastructure.", "has_code_examples": true, "has_best_practices": true, "section_count": 54, "timestamp": "2025-02-27 23:35:39", "type": "best_practices", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "language": "en", "title": "Google HTML/CSS Style Guide", "scrapeId": "916598f6-3359-47c9-acaa-1cbc89ee9e34", "sourceURL": "https://google.github.io/styleguide/htmlcssguide.html", "url": "https://google.github.io/styleguide/htmlcssguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"An AngularJS Style Guide for Closure Users at Google\"?\n\nAssistant: This is the external version of a document that was primarily written for Google engineers. It describes a recommended style for AngularJS apps that use Closure, as used internally at Google. Members of the broader AngularJS community should feel free to apply (or not apply) these recommendations, as relevant to their own use cases.\n\nHere's a detailed explanation:\n\n\n## 1 Angular Language Rules\n- [Manage dependencies with Closure's goog.require and goog.provide](https://google.github.io/styleguide/angularjs-google-style.html#googprovide)\n- [Modules](https://google.github.io/styleguide/angularjs-google-style.html#modules)\n- [Modules should reference other modules using the \"name\" property](https://google.github.io/styleguide/angularjs-google-style.html#moduledeps)\n- [Use the provided Angular externs file](https://google.github.io/styleguide/angularjs-google-style.html#externs)\n- [JSCompiler Flags](https://google.github.io/styleguide/angularjs-google-style.html#compilerflags)\n- [Controllers and Scopes](https://google.github.io/styleguide/angularjs-google-style.html#controllers)\n- [Directives](https://google.github.io/styleguide/angularjs-google-style.html#directives)\n- [Services](https://google.github.io/styleguide/angularjs-google-style.html#services)\n\n## 2 Angular Style Rules\n- [Reserve $ for Angular properties and services](https://google.github.io/styleguide/angularjs-google-style.html#dollarsign)\n- [Custom elements.](https://google.github.io/styleguide/angularjs-google-style.html#customelements)\n\n## 3 Angular Tips, Tricks, and Best Practices\n- [Testing](https://google.github.io/styleguide/angularjs-google-style.html#testing)\n- [Consider using the Best Practices for App Structure](https://google.github.io/styleguide/angularjs-google-style.html#appstructure)\n- [Be aware of how scope inheritance works](https://google.github.io/styleguide/angularjs-google-style.html#scopeinheritance)\n- [Use @ngInject for easy dependency injection compilation](https://google.github.io/styleguide/angularjs-google-style.html#nginject)\n\n## 4 Best practices links and docs\n- [Best Practices](https://github.com/angular/angular.js/wiki/Best-Practices) from Angular on GitHub\n- [Meetup video](https://www.youtube.com/watch?v=ZhfUv0spHCY) (not Google specific)\n", "metadata": {"source_url": "https://google.github.io/styleguide/angularjs-google-style.html", "title": "An AngularJS Style Guide for Closure Users at Google", "description": "This is the external version of a document that was primarily written for Google engineers. It describes a recommended style for AngularJS apps that use Closure, as used internally at Google. Members of the broader AngularJS community should feel free to apply (or not apply) these recommendations, as relevant to their own use cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:42:43", "type": "overview", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "title": "Google's AngularJS Style Guide", "scrapeId": "512caf60-25b9-430e-b872-616ba27844cd", "sourceURL": "https://google.github.io/styleguide/angularjs-google-style.html", "url": "https://google.github.io/styleguide/angularjs-google-style.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: Can you show me some code examples for \"An AngularJS Style Guide for Closure Users at Google\"?\n\nAssistant: Here are some code examples:\n\n### Manage dependencies with Closure's goog.require and goog.provide\n```yaml\ngoog.provide('hello.about.AboutCtrl');\ngoog.provide('hello.versions.Versions');\n```\n\n### Modules should reference other modules using the Angular Module's \"name\" property\n```yaml\n// file submodulea.js:\n  goog.provide('my.submoduleA');\n\n  my.submoduleA = angular.module('my.submoduleA', []);\n  // ...\n\n// file app.js\n  goog.require('my.submoduleA');\n\n  Yes: my.application.module = angular.module('hello', [my.submoduleA.name]);\n\n      No: my.application.module = angular.module('hello', ['my.submoduleA']);\n```\n\n### Controllers and Scopes (Pre Angular 1.2)\n```yaml\n/**\n * Home controller.\n *\n * @param {!angular.Scope} $scope\n * @constructor\n * @ngInject\n * @export\n */\nhello.mainpage.HomeCtrl = function($scope) {\n  /** @export */\n  $scope.homeCtrl = this; // This is a bridge until Angular 1.2 controller-as\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.myColor = 'blue';\n};\n\n/**\n * @param {number} a\n * @param {number} b\n * @export\n */\nhello.mainpage.HomeCtrl.prototype.add = function(a, b) {\n  return a + b;\n};\n\n// Template\n<div ng-controller=\"hello.mainpage.HomeCtrl\"/>\n  <span ng-class=\"homeCtrl.myColor\">I'm in a color!</span>\n  <span>{{homeCtrl.add(5, 6)}}</span>\n</div>\n```\n\n### Controllers and Scopes (Post Angular 1.2)\n```yaml\n/**\n * Home controller.\n *\n * @constructor\n * @ngInject\n * @export\n */\nhello.mainpage.HomeCtrl = function() {\n  /**\n   * @type {string}\n   * @export\n   */\n  this.myColor = 'blue';\n};\n\n/**\n * @param {number} a\n * @param {number} b\n * @export\n */\nhello.mainpage.HomeCtrl.prototype.add = function(a, b) {\n  return a + b;\n};\n\n// Template\n<div ng-controller=\"hello.mainpage.HomeCtrl as homeCtrl\"/>\n  <span ng-class=\"homeCtrl.myColor\">I'm in a color!</span>\n  <span>{{homeCtrl.add(5, 6)}}</span>\n</div>\n```\n\n### Services\n```yaml\n/**\n * @param {!angular.$http} $http The Angular http service.\n * @constructor\n */\nhello.request.Request = function($http) {\n  /** @type {!angular.$http} */\n  this.http_ = $http;\n};\n\nhello.request.Request.prototype.get = function() {/*...*/};\n\n// In the module\nmodule.service('request', hello.request.Request);\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide/angularjs-google-style.html", "title": "An AngularJS Style Guide for Closure Users at Google", "description": "This is the external version of a document that was primarily written for Google engineers. It describes a recommended style for AngularJS apps that use Closure, as used internally at Google. Members of the broader AngularJS community should feel free to apply (or not apply) these recommendations, as relevant to their own use cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:42:43", "type": "code_examples", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "title": "Google's AngularJS Style Guide", "scrapeId": "512caf60-25b9-430e-b872-616ba27844cd", "sourceURL": "https://google.github.io/styleguide/angularjs-google-style.html", "url": "https://google.github.io/styleguide/angularjs-google-style.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"An AngularJS Style Guide for Closure Users at Google\"?\n\nAssistant: Here are the recommended best practices:\n\n• Angular is designed for test-driven development.\n• The recommended unit testing setup is Jasmine + Karma (though you could use closure tests or js_test)\n• Angular provides easy adapters to load modules and use the injector in Jasmine tests.\n• Consider using the Best Practices for App Structure\n• Be aware of how scope inheritance works\n• Use @ngInject for easy dependency injection compilation\n", "metadata": {"source_url": "https://google.github.io/styleguide/angularjs-google-style.html", "title": "An AngularJS Style Guide for Closure Users at Google", "description": "This is the external version of a document that was primarily written for Google engineers. It describes a recommended style for AngularJS apps that use Closure, as used internally at Google. Members of the broader AngularJS community should feel free to apply (or not apply) these recommendations, as relevant to their own use cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:42:43", "type": "best_practices", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "title": "Google's AngularJS Style Guide", "scrapeId": "512caf60-25b9-430e-b872-616ba27844cd", "sourceURL": "https://google.github.io/styleguide/angularjs-google-style.html", "url": "https://google.github.io/styleguide/angularjs-google-style.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Google Objective-C Style Guide\"?\n\nAssistant: Objective-C is a dynamic, object-oriented extension of C. It’s designed to be easy to use and read, while enabling sophisticated object-oriented design. It is one of the primary development languages for applications on Apple platforms.\n\nHere's a detailed explanation:\n\n\n## Principles\nCodebases often have extended lifetimes and more time is spent reading the code than writing it. We explicitly choose to optimize for the experience of our average software engineer reading, maintaining, and debugging code in our codebase rather than the ease of writing said code. For example, when something surprising or unusual is happening in a snippet of code, leaving textual hints for the reader is valuable.\n\n## Be consistent\nWhen the style guide allows multiple options it is preferable to pick one option over mixed usage of multiple options. Using one style consistently throughout a codebase lets engineers focus on other (more important) issues. Consistency also enables better automation because consistent code allows more efficient development and operation of tools that format or refactor code. In many cases, rules that are attributed to “Be Consistent” boil down to “Just pick one and stop worrying about it”; the potential value of allowing flexibility on these points is outweighed by the cost of having people argue over them.\n\n## Be consistent with Apple SDKs\nConsistency with the way Apple SDKs use Objective-C has value for the same reasons as consistency within our code base. If an Objective-C feature solves a problem that’s an argument for using it. However, sometimes language features and idioms are flawed, or were just designed with assumptions that are not universal. In those cases it is appropriate to constrain or ban language features or idioms.\n\n## Style rules should pull their weight\nThe benefit of a style rule must be large enough to justify asking engineers to remember it. The benefit is measured relative to the codebase we would get without the rule, so a rule against a very harmful practice may still have a small benefit if people are unlikely to do it anyway. This principle mostly explains the rules we don’t have, rather than the rules we do: for example, goto contravenes many of the following principles, but is not discussed due to its extreme rarity.\n\n## Example\nThey say an example is worth a thousand words, so let’s start off with an example that should give you a feel for the style, spacing, naming, and so on.\n\nHere is an example header file, demonstrating the correct commenting and spacing for an `@interface` declaration.\n\n```objective-c\n// GOOD:\n\n#import <Foundation/Foundation.h>\n\n@class Bar;\n\n/**\n * A sample class demonstrating good Objective-C style. All interfaces,\n * categories, and protocols (read: all non-trivial top-level declarations\n * in a header) MUST be commented. Comments must also be adjacent to the\n * object they're documenting.\n */\n@interface Foo : NSObject\n\n/** The retained Bar. */\n@property(nonatomic) Bar *bar;\n\n/** The current drawing attributes. */\n@property(nonatomic, copy) NSDictionary<NSString *, NSNumber *> *attributes;\n\n/**\n * Convenience creation method.\n * See -initWithBar: for details about @c bar.\n *\n * @param bar The string for fooing.\n * @return An instance of Foo.\n */\n+ (instancetype)fooWithBar:(Bar *)bar;\n\n/**\n * Initializes and returns a Foo object using the provided Bar instance.\n *\n * @param bar A string that represents a thing that does a thing.\n */\n- (instancetype)initWithBar:(Bar *)bar NS_DESIGNATED_INITIALIZER;\n\n/**\n * Does some work with @c blah.\n *\n * @param blah\n * @return YES if the work was completed; NO otherwise.\n */\n- (BOOL)doWorkWithBlah:(NSString *)blah;\n\n@end\n```\n\nAn example source file, demonstrating the correct commenting and spacing for the `@implementation` of an interface.\n\n```objective-c\n// GOOD:\n\n#import \"Shared/Util/Foo.h\"\n\n@implementation Foo {\n  /** The string used for displaying \"hi\". */\n  NSString *_string;\n}\n\n+ (instancetype)fooWithBar:(Bar *)bar {\n  return [[self alloc] initWithBar:bar];\n}\n\n- (instancetype)init {\n  // Classes with a custom designated initializer should always override\n  // the superclass's designated initializer.\n  return [self initWithBar:nil];\n}\n\n- (instancetype)initWithBar:(Bar *)bar {\n  self = [super init];\n  if (self) {\n    _bar = [bar copy];\n    _string = [[NSString alloc] initWithFormat:@\"hi %d\", 3];\n    _attributes = @{\n      @\"color\" : UIColor.blueColor,\n      @\"hidden\" : @NO\n    };\n  }\n  return self;\n}\n\n- (BOOL)doWorkWithBlah:(NSString *)blah {\n  // Work should be done here.\n  return NO;\n}\n\n@end\n```\n\n## Naming\nNames should be as descriptive as possible, within reason. Follow standard [Objective-C naming rules](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html).\n\nAvoid non-standard abbreviations (including non-standard acronyms and initialisms). Don’t worry about saving horizontal space as it is far more important to make your code immediately understandable by a new reader. For example:\n\n```objective-c\n// GOOD:\n\n// Good names.\nint numberOfErrors = 0;\nint completedConnectionsCount = 0;\ntickets = [[NSMutableArray alloc] init];\nuserInfo = [someObject object];\nport = [network port];\nNSDate *gAppLaunchDate;\n\n```\n\n```objective-c\n// AVOID:\n\n// Names to avoid.\nint w;\nint nerr;\nint nCompConns;\ntix = [[NSMutableArray alloc] init];\nobj = [someObject object];\np = [network port];\n\n```\n\n## Inclusive Language\nIn all code, including naming and comments, use inclusive language and avoid terms that other programmers might find disrespectful or offensive (such as “master” and “slave”, “blacklist” and “whitelist”, or “redline”), even if the terms also have an ostensibly neutral meaning. Similarly, use gender-neutral language unless you’re referring to a specific person (and using their pronouns). For example, use “they”/”them”/”their” for people of unspecified gender (even when singular), and “it”/”its” for non-people.\n\n## File Names\nFile names should reflect the name of the class implementation that they contain—including case.\n\nFollow the convention that your project uses.\n\nFile extensions should be as follows:\n\n| Extension | Type |\n| --- | --- |\n| .h | C/C++/Objective-C header file |\n| .m | Objective-C implementation file |\n| .mm | Objective-C++ implementation file |\n| .cc | Pure C++ implementation file |\n| .c | C implementation file |\n\nFiles containing code that may be shared across projects or used in a large project should have a clearly unique name, typically including the project or class prefix.\n\n## Prefixes\nPrefixes are commonly required in Objective-C to avoid naming collisions in a global namespace. Classes, protocols, global functions, and global constants should generally be named with a prefix that begins with a capital letter followed by one or more capital letters or numbers.\n\nWARNING: Apple reserves two-letter prefixes—see [Conventions in Programming with Objective-C](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html)—so prefixes with a minimum of three characters are considered best practice.\n\n```objective-c\n// GOOD:\n\n/** An example error domain. */\nGTM_EXTERN NSString *GTMExampleErrorDomain;\n\n/** Gets the default time zone. */\nGTM_EXTERN NSTimeZone *GTMGetDefaultTimeZone(void);\n\n/** An example delegate. */\n@protocol GTMExampleDelegate <NSObject>\n@end\n\n/** An example class. */\n@interface GTMExample : NSObject\n@end\n```\n\n## Class Names\nClass names (along with category and protocol names) should start as uppercase and use mixed case to delimit words.\n\nClasses and protocols in code shared across multiple applications must have an appropriate prefix (e.g. GTMSendMessage). Prefixes are recommended, but not required, for other classes and protocols.\n\n## Category Naming\nCategory names should start with an appropriate prefix identifying the category as part of a project or open for general use.\n\nCategory source file names should begin with the class being extended followed by a plus sign and the name of the category, e.g., `NSString+GTMParsing.h`. Methods in a category should be prefixed with a lowercase version of the prefix used for the category name followed by an underscore (e.g., `gtm_myCategoryMethodOnAString:`) in order to prevent collisions in Objective-C’s global namespace.\n\n## Objective-C Method Names\nMethod and parameter names typically start as lowercase and then use mixed case.\n\nProper capitalization should be respected, including at the beginning of names.\n\n```objective-c\n// GOOD:\n\n+ (NSURL *)URLWithString:(NSString *)URLString;\n\n```\n\nThe method name should read like a sentence if possible, meaning you should choose parameter names that flow with the method name. Objective-C method names tend to be very long, but this has the benefit that a block of code can almost read like prose, thus rendering many implementation comments unnecessary.\n\n## Function Names\nFunction names should start with a capital letter and have a capital letter for each new word (a.k.a. “camel case” or “Pascal case”).\n\n```objective-c\n// GOOD:\n\nstatic void AddTableEntry(NSString *tableEntry);\nstatic BOOL DeleteFile(const char *filename);\n\n```\n\nBecause Objective-C does not provide namespacing, non-static functions should have a prefix that minimizes the chance of a name collision.\n\n## Variable Names\nVariable names typically start with a lowercase and use mixed case to delimit words.\n\nInstance variables have leading underscores. File scope or global variables have a prefix `g`. For example: `myLocalVariable`, `_myInstanceVariable`, `gMyGlobalVariable`.\n\n## Common Variable Names\nReaders should be able to infer the variable type from the name, but do not use Hungarian notation for syntactic attributes, such as the static type of a variable (int or pointer).\n", "metadata": {"source_url": "https://google.github.io/styleguide/objcguide.html", "title": "Google Objective-C Style Guide", "description": "Objective-C is a dynamic, object-oriented extension of C. It’s designed to be easy to use and read, while enabling sophisticated object-oriented design. It is one of the primary development languages for applications on Apple platforms.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-27 23:44:35", "type": "overview", "page_metadata": {"ogTitle": "Google Objective-C Style Guide", "language": "en-US", "viewport": "width=device-width, initial-scale=1", "favicon": "https://google.github.io/styleguide/favicon.ico", "og:site_name": "styleguide", "ogUrl": "https://google.github.io/styleguide/objcguide.html", "ogSiteName": "styleguide", "title": "Google Objective-C Style Guide | styleguide", "og:description": "Style guides for Google-originated open-source projects", "ogLocale": "en_US", "og:title": "Google Objective-C Style Guide", "description": "Style guides for Google-originated open-source projects", "og:type": "website", "twitter:card": "summary", "generator": "Jekyll v3.10.0", "ogDescription": "Style guides for Google-originated open-source projects", "twitter:title": "Google Objective-C Style Guide", "og:locale": "en_US", "og:url": "https://google.github.io/styleguide/objcguide.html", "scrapeId": "cd61e2ab-5782-416c-96ec-36839e6d1e62", "sourceURL": "https://google.github.io/styleguide/objcguide.html", "url": "https://google.github.io/styleguide/objcguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: Can you show me some code examples for \"Google Objective-C Style Guide\"?\n\nAssistant: Here are some code examples:\n\n### Example Header File\n```yaml\n// GOOD:\n\n#import <Foundation/Foundation.h>\n\n@class Bar;\n\n/**\n * A sample class demonstrating good Objective-C style. All interfaces,\n * categories, and protocols (read: all non-trivial top-level declarations\n * in a header) MUST be commented. Comments must also be adjacent to the\n * object they're documenting.\n */\n@interface Foo : NSObject\n\n/** The retained Bar. */\n@property(nonatomic) Bar *bar;\n\n/** The current drawing attributes. */\n@property(nonatomic, copy) NSDictionary<NSString *, NSNumber *> *attributes;\n\n/**\n * Convenience creation method.\n * See -initWithBar: for details about @c bar.\n *\n * @param bar The string for fooing.\n * @return An instance of Foo.\n */\n+ (instancetype)fooWithBar:(Bar *)bar;\n\n/**\n * Initializes and returns a Foo object using the provided Bar instance.\n *\n * @param bar A string that represents a thing that does a thing.\n */\n- (instancetype)initWithBar:(Bar *)bar NS_DESIGNATED_INITIALIZER;\n\n/**\n * Does some work with @c blah.\n *\n * @param blah\n * @return YES if the work was completed; NO otherwise.\n */\n- (BOOL)doWorkWithBlah:(NSString *)blah;\n\n@end\n\n```\n\n### Example Source File\n```yaml\n// GOOD:\n\n#import \"Shared/Util/Foo.h\"\n\n@implementation Foo {\n  /** The string used for displaying \"hi\". */\n  NSString *_string;\n}\n\n+ (instancetype)fooWithBar:(Bar *)bar {\n  return [[self alloc] initWithBar:bar];\n}\n\n- (instancetype)init {\n  // Classes with a custom designated initializer should always override\n  // the superclass's designated initializer.\n  return [self initWithBar:nil];\n}\n\n- (instancetype)initWithBar:(Bar *)bar {\n  self = [super init];\n  if (self) {\n    _bar = [bar copy];\n    _string = [[NSString alloc] initWithFormat:@\"hi %d\", 3];\n    _attributes = @{\n      @\"color\" : UIColor.blueColor,\n      @\"hidden\" : @NO\n    };\n  }\n  return self;\n}\n\n- (BOOL)doWorkWithBlah:(NSString *)blah {\n  // Work should be done here.\n  return NO;\n}\n\n@end\n\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide/objcguide.html", "title": "Google Objective-C Style Guide", "description": "Objective-C is a dynamic, object-oriented extension of C. It’s designed to be easy to use and read, while enabling sophisticated object-oriented design. It is one of the primary development languages for applications on Apple platforms.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-27 23:44:35", "type": "code_examples", "page_metadata": {"ogTitle": "Google Objective-C Style Guide", "language": "en-US", "viewport": "width=device-width, initial-scale=1", "favicon": "https://google.github.io/styleguide/favicon.ico", "og:site_name": "styleguide", "ogUrl": "https://google.github.io/styleguide/objcguide.html", "ogSiteName": "styleguide", "title": "Google Objective-C Style Guide | styleguide", "og:description": "Style guides for Google-originated open-source projects", "ogLocale": "en_US", "og:title": "Google Objective-C Style Guide", "description": "Style guides for Google-originated open-source projects", "og:type": "website", "twitter:card": "summary", "generator": "Jekyll v3.10.0", "ogDescription": "Style guides for Google-originated open-source projects", "twitter:title": "Google Objective-C Style Guide", "og:locale": "en_US", "og:url": "https://google.github.io/styleguide/objcguide.html", "scrapeId": "cd61e2ab-5782-416c-96ec-36839e6d1e62", "sourceURL": "https://google.github.io/styleguide/objcguide.html", "url": "https://google.github.io/styleguide/objcguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Google Objective-C Style Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Optimize for the reader, not the writer\n• Be consistent\n• Be consistent with Apple SDKs\n• Style rules should pull their weight\n• Use descriptive names for variables and methods\n• Avoid non-standard abbreviations\n• Use inclusive language in comments and naming\n• File names should reflect the class implementation\n• Use prefixes to avoid naming collisions\n• Class names should start with uppercase and use mixed case\n• Method names should read like sentences\n• Function names should use Pascal case\n• Variable names should start with lowercase and use mixed case\n• Avoid Hungarian notation for variable names\n", "metadata": {"source_url": "https://google.github.io/styleguide/objcguide.html", "title": "Google Objective-C Style Guide", "description": "Objective-C is a dynamic, object-oriented extension of C. It’s designed to be easy to use and read, while enabling sophisticated object-oriented design. It is one of the primary development languages for applications on Apple platforms.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-27 23:44:35", "type": "best_practices", "page_metadata": {"ogTitle": "Google Objective-C Style Guide", "language": "en-US", "viewport": "width=device-width, initial-scale=1", "favicon": "https://google.github.io/styleguide/favicon.ico", "og:site_name": "styleguide", "ogUrl": "https://google.github.io/styleguide/objcguide.html", "ogSiteName": "styleguide", "title": "Google Objective-C Style Guide | styleguide", "og:description": "Style guides for Google-originated open-source projects", "ogLocale": "en_US", "og:title": "Google Objective-C Style Guide", "description": "Style guides for Google-originated open-source projects", "og:type": "website", "twitter:card": "summary", "generator": "Jekyll v3.10.0", "ogDescription": "Style guides for Google-originated open-source projects", "twitter:title": "Google Objective-C Style Guide", "og:locale": "en_US", "og:url": "https://google.github.io/styleguide/objcguide.html", "scrapeId": "cd61e2ab-5782-416c-96ec-36839e6d1e62", "sourceURL": "https://google.github.io/styleguide/objcguide.html", "url": "https://google.github.io/styleguide/objcguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Google Python Style Guide\"?\n\nAssistant: This style guide is a list of dos and don'ts for Python programs.\n\nHere's a detailed explanation:\n\n\n## 1 Background\nPython is the main dynamic language used at Google. This style guide is a list of _dos and don’ts_ for Python programs.\n\nTo help you format code correctly, we’ve created a [settings file for Vim](https://google.github.io/styleguide/google_python_style.vim). For Emacs, the default settings should be fine.\n\nMany teams use the [Black](https://github.com/psf/black) or [Pyink](https://github.com/google/pyink) auto-formatter to avoid arguing over formatting.\n\n## 2 Python Language Rules\nThis section covers various rules regarding the Python language.\n\n## 2.1 Lint\nRun `pylint` over your code using this [pylintrc](https://google.github.io/styleguide/pylintrc).\n\n`pylint` is a tool for finding bugs and style problems in Python source code. It finds problems that are typically caught by a compiler for less dynamic languages like C and C++. Because of the dynamic nature of Python, some warnings may be incorrect; however, spurious warnings should be fairly infrequent.\n\nMake sure you run `pylint` on your code. Suppress warnings if they are inappropriate so that other issues are not hidden. To suppress warnings, you can set a line-level comment:\n\n```\ndef do_PUT(self):  # WSGI name, so pylint: disable=invalid-name\n  ...\n```\n\nYou can get a list of `pylint` warnings by doing:\n\n```\npylint --list-msgs\n```\n\nTo get more information on a particular message, use:\n\n```\npylint --help-msg=invalid-name\n```\n\nPrefer `pylint: disable` to the deprecated older form `pylint: disable-msg`.\n\n## 2.2 Imports\nUse `import` statements for packages and modules only, not for individual types, classes, or functions.\n\n## 2.3 Packages\nImport each module using the full pathname location of the module.\n\n## 2.4 Exceptions\nExceptions are allowed but must be used carefully.\n\n## 2.5 Mutable Global State\nAvoid mutable global state.\n\n## 2.6 Nested/Local/Inner Classes and Functions\nNested local functions or classes are fine when used to close over a local variable.\n\n## 2.7 Comprehensions & Generator Expressions\nOkay to use for simple cases.\n\n## 2.8 Default Iterators and Operators\nUse default iterators and operators for types that support them, like lists, dictionaries, and files.\n\n## 2.9 Generators\nUse generators as needed.\n\n## 2.10 Lambda Functions\nOkay for one-liners. Prefer generator expressions over `map()` or `filter()` with a `lambda`.\n\n## 2.11 Conditional Expressions\nOkay for simple cases.\n\n## 2.12 Default Argument Values\nOkay in most cases.\n\n## 2.13 Properties\nProperties may be used to control getting or setting attributes that require trivial computations or logic.\n\n## 2.14 True/False Evaluations\nUse the “implicit” false if at all possible (with a few caveats).\n\n## 2.16 Lexical Scoping\nOkay to use.\n\n## 2.17 Function and Method Decorators\nUse decorators judiciously when there is a clear advantage.\n\n## 2.18 Threading\nDo not rely on the atomicity of built-in types.\n\n## 2.19 Power Features\nAvoid these features.\n\n## 2.20 Modern Python: from __future__ imports\nNew language version semantic changes may be gated behind a special future import to enable them on a per-file basis within earlier runtimes.\n\n## 2.21 Type Annotated Code\nYou can annotate Python code with type hints.\n\n## 3 Python Style Rules\nThis section covers various style rules for Python.\n\n## 3.1 Semicolons\nDo not terminate your lines with semicolons, and do not use semicolons to put two statements on the same line.\n\n## 3.2 Line length\nMaximum line length is _80 characters_.\n\n## 3.3 Parentheses\nUse parentheses sparingly.\n\n## 3.4 Indentation\nIndent your code blocks with _4 spaces_.\n\n## 3.5 Blank Lines\nTwo blank lines between top-level definitions, be they function or class definitions.\n\n## 3.6 Whitespace\nFollow standard typographic rules for the use of spaces around punctuation.\n\n## 3.7 Shebang Line\nMost `.py` files do not need to start with a `#!` line.\n\n## 3.8 Comments and Docstrings\nBe sure to use the right style for module, function, method docstrings and inline comments.\n\n## 3.10 Strings\nUse an f-string, the `%` operator, or the `format` method for formatting strings.\n\n## 3.11 Files, Sockets, and similar Stateful Resources\nExplicitly close files and sockets when done with them.\n\n## 3.12 TODO Comments\nUse `TODO` comments for code that is temporary, a short-term solution, or good-enough but not perfect.\n\n## 3.13 Imports formatting\nImports should be on separate lines.\n\n## 3.14 Statements\nGenerally only one statement per line.\n\n## 3.15 Getters and Setters\nGetter and setter functions should be used when they provide a meaningful role or behavior.\n\n## 3.16 Naming\nNames should be descriptive.\n\n## 3.17 Main\nIn Python, `pydoc` as well as unit tests require modules to be importable.\n\n## 3.18 Function length\nPrefer small and focused functions.\n\n## 3.19 Type Annotations\nFamiliarize yourself with type hints.\n\n## 4 Parting Words\nBE CONSISTENT.\n", "metadata": {"source_url": "https://google.github.io/styleguide/pyguide.html", "title": "Google Python Style Guide", "description": "This style guide is a list of dos and don'ts for Python programs.", "has_code_examples": true, "has_best_practices": true, "section_count": 42, "timestamp": "2025-02-27 23:45:04", "type": "overview", "page_metadata": {"og:title": "styleguide", "twitter:card": "summary", "favicon": "https://google.github.io/styleguide/favicon.ico", "language": "en-US", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "og:url": "https://google.github.io/styleguide/pyguide.html", "og:type": "website", "ogSiteName": "styleguide", "generator": "Jekyll v3.10.0", "ogDescription": "Style guides for Google-originated open-source projects", "description": "Style guides for Google-originated open-source projects", "twitter:title": "styleguide", "ogUrl": "https://google.github.io/styleguide/pyguide.html", "og:site_name": "styleguide", "og:locale": "en_US", "og:description": "Style guides for Google-originated open-source projects", "title": "styleguide | Style guides for Google-originated open-source projects", "ogTitle": "styleguide", "scrapeId": "44a7f4ff-a0fd-4bde-95c9-5a381521057d", "sourceURL": "https://google.github.io/styleguide/pyguide.html", "url": "https://google.github.io/styleguide/pyguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: Can you show me some code examples for \"Google Python Style Guide\"?\n\nAssistant: Here are some code examples:\n\n### Suppressing pylint warnings\n```yaml\ndef do_PUT(self):  # WSGI name, so pylint: disable=invalid-name\n  ...\n```\n\n### List of pylint warnings\n```yaml\npylint --list-msgs\n```\n\n### Get more information on a particular message\n```yaml\npylint --help-msg=invalid-name\n```\n\n### Example of using a generator\n```yaml\ndef my_method(\n    self,\n    first_var: int,\n    second_var: Foo,\n    third_var: Bar | None,\n) -> int:\n  ...\n```\n\n### Using the with statement for file handling\n```yaml\nwith open(\"hello.txt\") as hello_file:\n    for line in hello_file:\n        print(line)\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide/pyguide.html", "title": "Google Python Style Guide", "description": "This style guide is a list of dos and don'ts for Python programs.", "has_code_examples": true, "has_best_practices": true, "section_count": 42, "timestamp": "2025-02-27 23:45:04", "type": "code_examples", "page_metadata": {"og:title": "styleguide", "twitter:card": "summary", "favicon": "https://google.github.io/styleguide/favicon.ico", "language": "en-US", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "og:url": "https://google.github.io/styleguide/pyguide.html", "og:type": "website", "ogSiteName": "styleguide", "generator": "Jekyll v3.10.0", "ogDescription": "Style guides for Google-originated open-source projects", "description": "Style guides for Google-originated open-source projects", "twitter:title": "styleguide", "ogUrl": "https://google.github.io/styleguide/pyguide.html", "og:site_name": "styleguide", "og:locale": "en_US", "og:description": "Style guides for Google-originated open-source projects", "title": "styleguide | Style guides for Google-originated open-source projects", "ogTitle": "styleguide", "scrapeId": "44a7f4ff-a0fd-4bde-95c9-5a381521057d", "sourceURL": "https://google.github.io/styleguide/pyguide.html", "url": "https://google.github.io/styleguide/pyguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Google Python Style Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `import` statements for packages and modules only, not for individual types, classes, or functions.\n• Avoid mutable global state.\n• Use decorators judiciously when there is a clear advantage.\n• Prefer small and focused functions.\n• Use `TODO` comments for code that is temporary, a short-term solution, or good-enough but not perfect.\n", "metadata": {"source_url": "https://google.github.io/styleguide/pyguide.html", "title": "Google Python Style Guide", "description": "This style guide is a list of dos and don'ts for Python programs.", "has_code_examples": true, "has_best_practices": true, "section_count": 42, "timestamp": "2025-02-27 23:45:04", "type": "best_practices", "page_metadata": {"og:title": "styleguide", "twitter:card": "summary", "favicon": "https://google.github.io/styleguide/favicon.ico", "language": "en-US", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "og:url": "https://google.github.io/styleguide/pyguide.html", "og:type": "website", "ogSiteName": "styleguide", "generator": "Jekyll v3.10.0", "ogDescription": "Style guides for Google-originated open-source projects", "description": "Style guides for Google-originated open-source projects", "twitter:title": "styleguide", "ogUrl": "https://google.github.io/styleguide/pyguide.html", "og:site_name": "styleguide", "og:locale": "en_US", "og:description": "Style guides for Google-originated open-source projects", "title": "styleguide | Style guides for Google-originated open-source projects", "ogTitle": "styleguide", "scrapeId": "44a7f4ff-a0fd-4bde-95c9-5a381521057d", "sourceURL": "https://google.github.io/styleguide/pyguide.html", "url": "https://google.github.io/styleguide/pyguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Go Style Guide\"?\n\nAssistant: This document outlines the principles and guidelines for writing readable Go code at Google.\n\nHere's a detailed explanation:\n\n\n## Style principles\nThere are a few overarching principles that summarize how to think about writing readable Go code. The following are attributes of readable code, in order of importance:\n\n1. **Clarity**: The code’s purpose and rationale is clear to the reader.\n2. **Simplicity**: The code accomplishes its goal in the simplest way possible.\n3. **Concision**: The code has a high signal-to-noise ratio.\n4. **Maintainability**: The code is written such that it can be easily maintained.\n5. **Consistency**: The code is consistent with the broader Google codebase.\n\n## Clarity\nThe core goal of readability is to produce code that is clear to the reader.\n\nClarity is primarily achieved with effective naming, helpful commentary, and efficient code organization.\n\nClarity is to be viewed through the lens of the reader, not the author of the code. It is more important that code be easy to read than easy to write. Clarity in code has two distinct facets:\n\n- [What is the code actually doing?](https://google.github.io/styleguide/go/guide.html#clarity-purpose)\n- [Why is the code doing what it does?](https://google.github.io/styleguide/go/guide.html#clarity-rationale)\n", "metadata": {"source_url": "https://google.github.io/styleguide/go/guide.html", "title": "Go Style Guide", "description": "This document outlines the principles and guidelines for writing readable Go code at Google.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:48:32", "type": "overview", "page_metadata": {"ogTitle": "styleguide", "favicon": "https://google.github.io/styleguide/favicon.ico", "generator": "Jekyll v3.10.0", "og:url": "https://google.github.io/styleguide/go/guide.html", "twitter:card": "summary", "ogUrl": "https://google.github.io/styleguide/go/guide.html", "og:locale": "en_US", "ogSiteName": "styleguide", "ogDescription": "Style guides for Google-originated open-source projects", "og:title": "styleguide", "description": "Style guides for Google-originated open-source projects", "language": "en-US", "ogLocale": "en_US", "title": "styleguide | Style guides for Google-originated open-source projects", "viewport": "width=device-width, initial-scale=1", "og:description": "Style guides for Google-originated open-source projects", "twitter:title": "styleguide", "og:type": "website", "og:site_name": "styleguide", "scrapeId": "0696b363-e08c-4239-806a-55f81054e377", "sourceURL": "https://google.github.io/styleguide/go/guide.html", "url": "https://google.github.io/styleguide/go/guide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: Can you show me some code examples for \"Go Style Guide\"?\n\nAssistant: Here are some code examples:\n\n### Error Handling Example\n```yaml\n// Good:\nif err := doSomething(); err != nil {\n    // ...\n}\n\n// Good:\nif err := doSomething(); err == nil { // if NO error\n    // ...\n}\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide/go/guide.html", "title": "Go Style Guide", "description": "This document outlines the principles and guidelines for writing readable Go code at Google.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:48:32", "type": "code_examples", "page_metadata": {"ogTitle": "styleguide", "favicon": "https://google.github.io/styleguide/favicon.ico", "generator": "Jekyll v3.10.0", "og:url": "https://google.github.io/styleguide/go/guide.html", "twitter:card": "summary", "ogUrl": "https://google.github.io/styleguide/go/guide.html", "og:locale": "en_US", "ogSiteName": "styleguide", "ogDescription": "Style guides for Google-originated open-source projects", "og:title": "styleguide", "description": "Style guides for Google-originated open-source projects", "language": "en-US", "ogLocale": "en_US", "title": "styleguide | Style guides for Google-originated open-source projects", "viewport": "width=device-width, initial-scale=1", "og:description": "Style guides for Google-originated open-source projects", "twitter:title": "styleguide", "og:type": "website", "og:site_name": "styleguide", "scrapeId": "0696b363-e08c-4239-806a-55f81054e377", "sourceURL": "https://google.github.io/styleguide/go/guide.html", "url": "https://google.github.io/styleguide/go/guide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Go Style Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Aim to use a core language construct when sufficient for your use case.\n• If there isn’t one, look for a tool within the standard library.\n• Prefer the simplest way to express the same idea.\n• Use descriptive variable names and add additional commentary where necessary.\n", "metadata": {"source_url": "https://google.github.io/styleguide/go/guide.html", "title": "Go Style Guide", "description": "This document outlines the principles and guidelines for writing readable Go code at Google.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:48:32", "type": "best_practices", "page_metadata": {"ogTitle": "styleguide", "favicon": "https://google.github.io/styleguide/favicon.ico", "generator": "Jekyll v3.10.0", "og:url": "https://google.github.io/styleguide/go/guide.html", "twitter:card": "summary", "ogUrl": "https://google.github.io/styleguide/go/guide.html", "og:locale": "en_US", "ogSiteName": "styleguide", "ogDescription": "Style guides for Google-originated open-source projects", "og:title": "styleguide", "description": "Style guides for Google-originated open-source projects", "language": "en-US", "ogLocale": "en_US", "title": "styleguide | Style guides for Google-originated open-source projects", "viewport": "width=device-width, initial-scale=1", "og:description": "Style guides for Google-originated open-source projects", "twitter:title": "styleguide", "og:type": "website", "og:site_name": "styleguide", "scrapeId": "0696b363-e08c-4239-806a-55f81054e377", "sourceURL": "https://google.github.io/styleguide/go/guide.html", "url": "https://google.github.io/styleguide/go/guide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Markdown style guide\"?\n\nAssistant: Much of what makes Markdown refreshing is the ability to write plain text and get great formatted output as a result. To keep the slate clean for the next author, your Markdown should be simple and consistent with the whole corpus wherever possible.\n\nHere's a detailed explanation:\n\n\n## Minimum viable documentation\nA small set of fresh and accurate docs is better than a sprawling, loose assembly of “documentation” in various states of disrepair.\n\nThe **Markdown way** encourages engineers to take ownership of their docs and keep them up to date with the same zeal we keep our tests in good order. Strive for this.\n\n- Identify what you really need: release docs, API docs, testing guidelines.\n- Delete cruft frequently and in small batches.\n\n## Better is better than best\nThe standards for an internal documentation review are different from the standards for code reviews. Reviewers should ask for improvements, but in general, the author should always be able to invoke the “Better/Best Rule.”\n\nFast iteration is your friend. To get long-term improvement, **authors must stay** **productive** when making short-term improvements. Set lower standards for each CL, so that **more such CLs** can happen.\n\nAs a reviewer of a documentation CL:\n\n1. When reasonable, LGTM immediately and trust that comments will be fixed appropriately.\n2. Prefer to suggest an alternative rather than leaving a vague comment.\n3. For substantial changes, start your own follow-up CL instead. Especially try to avoid comments of the form “You should _also_…”.\n4. On rare occasions, hold up submission if the CL actually makes the docs worse. It’s okay to ask the author to revert.\n\nAs an author:\n\n1. Avoid wasting cycles with trivial argument. Capitulate early and move on.\n2. Cite the Better/Best Rule as often as needed.\n\n## Capitalization\nUse the original names of products, tools and binaries, preserving the capitalization. E.g.:\n\n```\n# Markdown style guide\n\n`Markdown` is a dead-simple platform for internal engineering documentation.\n```\n\nand not\n\n```\n# markdown bad style guide example\n\n`markdown` is a dead-simple platform for internal engineering documentation.\n```\n\n## Document layout\nIn general, documents benefit from some variation of the following layout:\n\n```\n# Document Title\n\nShort introduction.\n\n[TOC]\n\n## Topic\n\nContent.\n\n## See also\n\n* https://link-to-more-info\n```\n\n1. `# Document title`: The first heading should be a level-one heading, ideally the same or nearly the same as the filename. The first level-one heading is used as the page `<title>`.\n\n2. `author`: _Optional_. If you’d like to claim ownership of the document or if you are very proud of it, add yourself under the title. However, revision history generally suffices.\n\n3. `Short introduction.` 1–3 sentences providing a high-level overview of the topic. Imagine yourself as a complete newbie who landed on your “Extending Foo” doc and doesn’t know the most basic information you take for granted. “What is Foo? Why would I extend it?”\n\n4. `[TOC]`: if you use hosting that supports table of contents, such as Gitiles, put `[TOC]` after the short introduction. See [`[TOC]` documentation](https://gerrit.googlesource.com/gitiles/+/HEAD/Documentation/markdown.md#Table-of-contents).\n\n5. `## Topic`: The rest of your headings should start from level 2.\n\n6. `## See also`: Put miscellaneous links at the bottom for the user who wants to know more or didn’t find what they needed.\n\n## Table of contents\n### Use a `[TOC]` directive\n\nUse a [`[TOC]` directive](https://gerrit.googlesource.com/gitiles/+/HEAD/Documentation/markdown.md#Table-of-contents) unless all of your content is above the fold[1](https://google.github.io/styleguide/docguide/style.html#fn:above) on a laptop.\n\n### Place the `[TOC]` directive after the introduction\n\nPlace the `[TOC]` directive after your page’s introduction and before the first H2 heading. For example:\n\n```\n# My Page\n\nThis is my introduction **before** the TOC.\n\n[TOC]\n\n## My first H2\n```\n\n```\n# My Page\n\n[TOC]\n\nThis is my introduction **after** the TOC where it should not be.\n\n## My first H2\n```\n\nFor users who read your documentation visually, it doesn’t matter where your `[TOC]` directive is placed, as Markdown always displays the TOC toward the top and to the right of the page. However, `[TOC]` placement matters a lot when screen readers or keyboard controls are involved.\n\nThat’s because `[TOC]` inserts the HTML for the table of contents into the DOM wherever you’ve included the directive in your Markdown file. If, for example, you place the directive at the very bottom of your file, screen readers won’t read it until they get to the end of the document.\n\n## Character line limit\nMarkdown content follows the residual convention of an 80-character line limit. Why? Because it’s what most of us do for code.\n\n- **Tooling integration**: All our tooling is designed around code, so the more our documents are formatted according to similar rules, the better these tools will work. For example, Code Search doesn’t soft wrap.\n\n- **Quality**. The more engineers use their well-worn coding habits when creating and editing Markdown content, the better the quality. Markdown takes advantage of the excellent review culture we already have.\n\n### Exceptions\n\nExceptions to the 80-character rule include:\n\n- Links\n- Tables\n- Headings\n- Code blocks\n\nThis means that lines with links are allowed to extend past column 80, along with any relevant punctuation:\n\n```\n*   See the\n    [foo docs](https://gerrit.googlesource.com/gitiles/+/HEAD/Documentation/markdown.md).\n    and find the logfile.\n```\n\nHowever, note that text before and after the link gets wrapped.\n\nTables may also run long. However, there are\n[best practices for creating short, readable tables](https://google.github.io/styleguide/docguide/style.html#tables).\n\n## Trailing whitespace\nDon’t use trailing whitespace. Use a trailing backslash to break lines.\n\nThe [CommonMark spec](http://spec.commonmark.org/0.20/#hard-line-breaks) decrees that two spaces at the end of a line should insert a `<br />` tag. However, many directories have a presubmit check for trailing whitespace, and many IDEs will clean it up anyway.\n\nUse a trailing backslash, sparingly:\n\n```\nFor some reason I just really want a break here,\\\nthough it's probably not necessary.\n```\n\nBest practice is to avoid the need for a `<br />` altogether. A pair of newlines will create a paragraph tag; get used to that.\n\n## Headings\n### ATX-style headings\n\n```\n# Heading 1\n\n## Heading 2\n```\n\nHeadings with `=` or `-` underlines can be annoying to maintain and don’t fit with the rest of the heading syntax. An editor has to ask: Does `---` mean H1 or H2?\n\n```\nHeading - do you remember what level? DO NOT DO THIS.\n---------\n```\n\n### Use unique, complete names for headings\n\nUse unique and fully descriptive names for each heading, even for sub-sections. Since link anchors are constructed from headings, this helps ensure that the automatically-constructed anchor links are intuitive and clear.\n\nFor example, instead of:\n\n```\n## Foo\n### Summary\n### Example\n## Bar\n### Summary\n### Example\n```\n\nprefer:\n\n```\n## Foo\n### Foo summary\n### Foo example\n## Bar\n### Bar summary\n### Bar example\n```\n\n### Add spacing to headings\n\nPrefer spacing after `#` and newlines before and after:\n\n```\n...text before.\n\n## Heading 2\n\nText after...\n```\n\nLack of spacing makes it a little harder to read in source:\n\n```\n...text before.\n\n##Heading 2\nText after... DO NOT DO THIS.\n```\n\n### Use a single H1 heading\n\nUse one H1 heading as the title of your document. Subsequent headings should be H2 or deeper. See [Document layout](https://google.github.io/styleguide/docguide/style.html#document-layout) for more information.\n\n### Capitalization of titles and headers\n\nFollow the guidance for\n[capitalization](https://developers.google.com/style/capitalization#capitalization-in-titles-and-headings)\nin the\n[Google Developer Documentation Style Guide](https://developers.google.com/style/).\n\n## Lists\n### Use lazy numbering for long lists\n\nMarkdown is smart enough to let the resulting HTML render your numbered lists correctly. For longer lists that may change, especially long nested lists, use “lazy” numbering:\n\n```\n1.  Foo.\n1.  Bar.\n    1.  Foofoo.\n    1.  Barbar.\n1.  Baz.\n```\n\nHowever, if the list is small and you don’t anticipate changing it, prefer fully numbered lists, because it’s nicer to read in source:\n\n```\n1.  Foo.\n2.  Bar.\n3.  Baz.\n```\n\n### Nested list spacing\n\nWhen nesting lists, use a 4-space indent for both numbered and bulleted lists:\n\n```\n1.  Use 2 spaces after the item number, so the text itself is indented 4 spaces.\n    Use a 4-space indent for wrapped text.\n2.  Use 2 spaces again for the next item.\n\n*   Use 3 spaces after a bullet, so the text itself is indented 4 spaces.\n    Use a 4-space indent for wrapped text.\n    1.  Use 2 spaces with numbered lists, as before.\n        Wrapped text in a nested list needs an 8-space indent.\n    2.  Looks nice, doesn't it?\n*   Back to the bulleted list, indented 3 spaces.\n```\n\nThe following works, but it’s very messy:\n\n```\n* One space,\nwith no indent for wrapped text.\n     1. Irregular nesting... DO NOT DO THIS.\n```\n\nEven when there’s no nesting, using the 4 space indent makes layout consistent for wrapped text:\n\n```\n*   Foo,\n    wrapped with a 4-space indent.\n\n1.  Two spaces for the list item\n    and 4 spaces before wrapped text.\n2.  Back to 2 spaces.\n```\n\nHowever, when lists are small, not nested, and a single line, one space can suffice for both kinds of lists:\n\n```\n* Foo\n* Bar\n* Baz.\n\n1. Foo.\n2. Bar.\n```\n\n## Code\n### Inline\n\n\\`Backticks\\` designate `inline code` that will be rendered literally. Use them for short code quotations, field names, and more:\n\n```\nYou'll want to run `really_cool_script.sh arg`.\n\nPay attention to the `foo_bar_whammy` field in that table.\n```\n\nUse inline code when referring to file types in a generic sense, rather than a specific existing file:\n\n```\nBe sure to update your `README.md`!\n```\n\n### Use code span for escaping\n\nWhen you don’t want text to be processed as normal Markdown, like a fake path or example URL that would lead to a bad autolink, wrap it in backticks:\n\n```\nAn example Markdown shortlink would be: `Markdown/foo/Markdown/bar.md`\n\nAn example query might be: `https://www.google.com/search?q=$TERM`\n```\n\n### Codeblocks\n\nFor code quotations longer than a single line, use a fenced code block:\n\n````\n```python\ndef Foo(self, bar):\nself.bar = bar\n```\n````\n\n#### Declare the language\n\nIt is best practice to explicitly declare the language, so that neither the syntax highlighter nor the next editor must guess.\n\n#### Use fenced code blocks instead of indented code blocks\n\nFour-space indenting is also interpreted as a code block. However, we strongly recommend fencing for all code blocks.\n\nIndented code blocks can sometimes look cleaner in the source, but they have several drawbacks:\n\n- You cannot specify the language. Some Markdown features are tied to language specifiers.\n- The beginning and end of the code block are ambiguous.\n- Indented code blocks are harder to search for in Code Search.\n\n```\nYou'll need to run:\n\n    bazel run :thing -- --foo\n\nAnd then:\n\n    bazel run :another_thing -- --bar\n\nAnd again:\n\n    bazel run :yet_again -- --baz\n```\n\n#### Escape newlines\n\nBecause most command-line snippets are intended to be copied and pasted directly into a terminal, it’s best practice to escape any newlines. Use a single backslash at the end of the line:\n\n````\n```shell\n$ bazel run :target -- --flag --foo=longlonglonglonglonglongvalue \\\n  --bar=anotherlonglonglonglonglonglonglonglonglonglongvalue\n```\n````\n\n#### Nest codeblocks within lists\n\nIf you need a code block within a list, make sure to indent it so as to not break the list:\n\n````\n*   Bullet.\n\n    ```c++\n    int foo;\n    ```\n\n*   Next bullet.\n````\n\nYou can also create a nested code block with 4 spaces. Simply indent 4 additional spaces from the list indentation:\n\n```\n*   Bullet.\n\n        int foo;\n\n*   Next bullet.\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide/docguide/style.html", "title": "Markdown style guide", "description": "Much of what makes Markdown refreshing is the ability to write plain text and get great formatted output as a result. To keep the slate clean for the next author, your Markdown should be simple and consistent with the whole corpus wherever possible.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 23:49:28", "type": "overview", "page_metadata": {"og:title": "Markdown style guide", "generator": "Jekyll v3.10.0", "description": "Style guides for Google-originated open-source projects", "ogSiteName": "styleguide", "language": "en-US", "title": "Markdown style guide | styleguide", "viewport": "width=device-width, initial-scale=1", "og:description": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "ogLocale": "en_US", "og:site_name": "styleguide", "og:url": "https://google.github.io/styleguide/docguide/style.html", "og:type": "website", "twitter:card": "summary", "twitter:title": "Markdown style guide", "ogDescription": "Style guides for Google-originated open-source projects", "ogTitle": "Markdown style guide", "ogUrl": "https://google.github.io/styleguide/docguide/style.html", "og:locale": "en_US", "scrapeId": "19089db9-8472-4555-9536-8a46f3511969", "sourceURL": "https://google.github.io/styleguide/docguide/style.html", "url": "https://google.github.io/styleguide/docguide/style.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: Can you show me some code examples for \"Markdown style guide\"?\n\nAssistant: Here are some code examples:\n\n### Document layout example\n```yaml\n```\n# Document Title\n\nShort introduction.\n\n[TOC]\n\n## Topic\n\nContent.\n\n## See also\n\n* https://link-to-more-info\n```\n```\n\n### Capitalization example\n```yaml\n```\n# Markdown style guide\n\n`Markdown` is a dead-simple platform for internal engineering documentation.\n```\n\nand not\n\n```\n# markdown bad style guide example\n\n`markdown` is a dead-simple platform for internal engineering documentation.\n```\n```\n\n### Code block example\n```yaml\n````\n```python\ndef Foo(self, bar):\nself.bar = bar\n```\n````\n```\n\n### Escape newlines example\n```yaml\n````\n```shell\n$ bazel run :target -- --flag --foo=longlonglonglonglonglongvalue \\\n  --bar=anotherlonglonglonglonglonglonglonglonglonglongvalue\n```\n````\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide/docguide/style.html", "title": "Markdown style guide", "description": "Much of what makes Markdown refreshing is the ability to write plain text and get great formatted output as a result. To keep the slate clean for the next author, your Markdown should be simple and consistent with the whole corpus wherever possible.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 23:49:28", "type": "code_examples", "page_metadata": {"og:title": "Markdown style guide", "generator": "Jekyll v3.10.0", "description": "Style guides for Google-originated open-source projects", "ogSiteName": "styleguide", "language": "en-US", "title": "Markdown style guide | styleguide", "viewport": "width=device-width, initial-scale=1", "og:description": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "ogLocale": "en_US", "og:site_name": "styleguide", "og:url": "https://google.github.io/styleguide/docguide/style.html", "og:type": "website", "twitter:card": "summary", "twitter:title": "Markdown style guide", "ogDescription": "Style guides for Google-originated open-source projects", "ogTitle": "Markdown style guide", "ogUrl": "https://google.github.io/styleguide/docguide/style.html", "og:locale": "en_US", "scrapeId": "19089db9-8472-4555-9536-8a46f3511969", "sourceURL": "https://google.github.io/styleguide/docguide/style.html", "url": "https://google.github.io/styleguide/docguide/style.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Markdown style guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Identify what you really need: release docs, API docs, testing guidelines.\n• Delete cruft frequently and in small batches.\n• Fast iteration is your friend.\n• Set lower standards for each CL, so that more such CLs can happen.\n• Avoid wasting cycles with trivial argument. Capitulate early and move on.\n• Use a trailing backslash to break lines instead of trailing whitespace.\n• Use unique and fully descriptive names for each heading.\n• Prefer spacing after # and newlines before and after headings.\n• Use lazy numbering for long lists.\n• Use explicit paths for links within Markdown.\n", "metadata": {"source_url": "https://google.github.io/styleguide/docguide/style.html", "title": "Markdown style guide", "description": "Much of what makes Markdown refreshing is the ability to write plain text and get great formatted output as a result. To keep the slate clean for the next author, your Markdown should be simple and consistent with the whole corpus wherever possible.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 23:49:28", "type": "best_practices", "page_metadata": {"og:title": "Markdown style guide", "generator": "Jekyll v3.10.0", "description": "Style guides for Google-originated open-source projects", "ogSiteName": "styleguide", "language": "en-US", "title": "Markdown style guide | styleguide", "viewport": "width=device-width, initial-scale=1", "og:description": "Style guides for Google-originated open-source projects", "favicon": "https://google.github.io/styleguide/favicon.ico", "ogLocale": "en_US", "og:site_name": "styleguide", "og:url": "https://google.github.io/styleguide/docguide/style.html", "og:type": "website", "twitter:card": "summary", "twitter:title": "Markdown style guide", "ogDescription": "Style guides for Google-originated open-source projects", "ogTitle": "Markdown style guide", "ogUrl": "https://google.github.io/styleguide/docguide/style.html", "og:locale": "en_US", "scrapeId": "19089db9-8472-4555-9536-8a46f3511969", "sourceURL": "https://google.github.io/styleguide/docguide/style.html", "url": "https://google.github.io/styleguide/docguide/style.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What is \"Google TypeScript Style Guide\"?\n\nAssistant: This guide is based on the internal Google TypeScript style guide, but it has been slightly adjusted to remove Google-internal sections. Google's internal environment has different constraints on TypeScript than you might find outside of Google. The advice here is specifically useful for people authoring code they intend to import into Google, but otherwise may not apply in your external environment.\n\nHere's a detailed explanation:\n\n\n## Introduction\nThis Style Guide uses RFC 2119 terminology when using the phrases _must_, _must not_, _should_, _should not_, and _may_. The terms _prefer_ and _avoid_ correspond to _should_ and _should_ _not_, respectively. Imperative and declarative statements are prescriptive and correspond to _must_.\n\n## Guide notes\nAll examples given are **non-normative** and serve only to illustrate the normative language of the style guide. That is, while the examples are in Google Style, they may not illustrate the _only_ stylish way to represent the code. Optional formatting choices made in examples must not be enforced as rules.\n\n## Source file basics\nFiles consist of the following, **in order**:\n\n1. Copyright information, if present\n2. JSDoc with `@fileoverview`, if present\n3. Imports, if present\n4. The file’s implementation\n\n**Exactly one blank line** separates each section that is present.\n\n## File encoding: UTF-8\nSource files are encoded in **UTF-8**.\n\n## Whitespace characters\nAside from the line terminator sequence, the ASCII horizontal space character (0x20) is the only whitespace character that appears anywhere in a source file. This implies that all other whitespace characters in string literals are escaped.\n\n## Special escape sequences\nFor the remaining non-ASCII characters, use the actual Unicode character (e.g. `∞`). For non-printable characters, the equivalent hex or Unicode escapes (e.g. `\\u221e`) can be used along with an explanatory comment.\n\n## Source file structure\nFiles consist of the following, **in order**:\n\n1. Copyright information, if present\n2. JSDoc with `@fileoverview`, if present\n3. Imports, if present\n4. The file’s implementation\n\n**Exactly one blank line** separates each section that is present.\n\n## Copyright information\nIf license or copyright information is necessary in a file, add it in a JSDoc at the top of the file.\n\n## @fileoverview JSDoc\nA file may have a top-level `@fileoverview` JSDoc. If present, it may provide a description of the file's content, its uses, or information about its dependencies. Wrapped lines are not indented.\n\n## Imports\nThere are four variants of import statements in ES6 and TypeScript:\n\n| Import type | Example | Use for |\n| --- | --- | --- |\n| module[module_import] | `import * as foo from '...';` | TypeScript imports |\n| named[destructuring_import] | `import {SomeThing} from '...';` | TypeScript imports |\n| default | `import SomeThing from '...';` | Only for other external code that requires them |\n| side-effect | `import '...';` | Only to import libraries for their side-effects on load (such as custom elements) |\n\n## Export visibility\nTypeScript does not support restricting the visibility for exported symbols. Only export symbols that are used outside of the module. Generally minimize the exported API surface of modules.\n\n## Mutable exports\nRegardless of technical support, mutable exports can create hard to understand and debug code, in particular with re-exports across multiple modules. One way to paraphrase this style point is that `export let` is not allowed.\n\n## Container classes\nDo not create container classes with static methods or properties for the sake of namespacing.\n\n## Import and export type\nYou may use `import type {...}` when you use the imported symbol only as a type. Use regular imports for values.\n\n## Language features\nThis section delineates which features may or may not be used, and any additional constraints on their use.\n\n## Local variable declarations\nAlways use `const` or `let` to declare variables. Use `const` by default, unless a variable needs to be reassigned. Never use `var`.\n\n## Array literals\nDo not use the `Array` constructor. Instead, always use bracket notation to initialize arrays, or `from` to initialize an `Array` with a certain size.\n\n## Object literals\nThe `Object` constructor is disallowed. Use an object literal ( `{}` or `{a: 0, b: 1, c: 2}`) instead.\n\n## Classes\nClass declarations must not be terminated with semicolons.\n\n## Functions\nPrefer function declarations over arrow functions or function expressions when defining named functions.\n\n## this\nOnly use `this` in class constructors and methods, functions that have an explicit `this` type declared, or in arrow functions defined in a scope where `this` may be used.\n\n## Interfaces\nUse interfaces to define structural types, not classes.\n\n## Primitive literals\nOrdinary string literals are delimited with single quotes ( `'`), rather than double quotes ( `\"`).\n\n## Control structures\nControl flow statements ( `if`, `else`, `for`, `do`, `while`, etc) always use braced blocks for the containing code, even if the body contains only a single statement.\n\n## Naming\nIdentifiers must use only ASCII letters, digits, underscores, and (rarely) the '$' sign.\n\n## Policies\nFor any style question that isn't settled definitively by this specification, do what the other code in the same file is already doing (be consistent). If that doesn't resolve the question, consider emulating the other files in the same directory.\n", "metadata": {"source_url": "https://google.github.io/styleguide/tsguide.html", "title": "Google TypeScript Style Guide", "description": "This guide is based on the internal Google TypeScript style guide, but it has been slightly adjusted to remove Google-internal sections. Google's internal environment has different constraints on TypeScript than you might find outside of Google. The advice here is specifically useful for people authoring code they intend to import into Google, but otherwise may not apply in your external environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-02-28 00:02:18", "type": "overview", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "language": "en", "title": "Google TypeScript Style Guide", "scrapeId": "421f9d9f-873e-4fa4-80e9-71110d17c0ce", "sourceURL": "https://google.github.io/styleguide/tsguide.html", "url": "https://google.github.io/styleguide/tsguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: Can you show me some code examples for \"Google TypeScript Style Guide\"?\n\nAssistant: Here are some code examples:\n\n### File encoding example\n```yaml\n// Perfectly clear, even without a comment.\nconst units = 'μs';\n\n// Use escapes for non-printable characters.\nconst output = '\\ufeff' + content;  // byte order mark\n\n// Hard to read and prone to mistakes, even with the comment.\nconst units = '\\u03bcs'; // Greek letter mu, 's'\n\n// The reader has no idea what this is.\nconst output = '\\ufeff' + content;\n```\n\n", "metadata": {"source_url": "https://google.github.io/styleguide/tsguide.html", "title": "Google TypeScript Style Guide", "description": "This guide is based on the internal Google TypeScript style guide, but it has been slightly adjusted to remove Google-internal sections. Google's internal environment has different constraints on TypeScript than you might find outside of Google. The advice here is specifically useful for people authoring code they intend to import into Google, but otherwise may not apply in your external environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-02-28 00:02:18", "type": "code_examples", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "language": "en", "title": "Google TypeScript Style Guide", "scrapeId": "421f9d9f-873e-4fa4-80e9-71110d17c0ce", "sourceURL": "https://google.github.io/styleguide/tsguide.html", "url": "https://google.github.io/styleguide/tsguide.html", "statusCode": 200}}}
{"text": "System: You are a helpful Google Style Guide expert.\n\nUser: What are the best practices for \"Google TypeScript Style Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always use `const` or `let` to declare variables. Use `const` by default, unless a variable needs to be reassigned. Never use `var`.\n• Do not use the `Array` constructor. Instead, always use bracket notation to initialize arrays, or `from` to initialize an `Array` with a certain size.\n• Prefer function declarations over arrow functions or function expressions when defining named functions.\n", "metadata": {"source_url": "https://google.github.io/styleguide/tsguide.html", "title": "Google TypeScript Style Guide", "description": "This guide is based on the internal Google TypeScript style guide, but it has been slightly adjusted to remove Google-internal sections. Google's internal environment has different constraints on TypeScript than you might find outside of Google. The advice here is specifically useful for people authoring code they intend to import into Google, but otherwise may not apply in your external environment.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-02-28 00:02:18", "type": "best_practices", "page_metadata": {"favicon": "https://google.github.io/styleguide/favicon.ico", "language": "en", "title": "Google TypeScript Style Guide", "scrapeId": "421f9d9f-873e-4fa4-80e9-71110d17c0ce", "sourceURL": "https://google.github.io/styleguide/tsguide.html", "url": "https://google.github.io/styleguide/tsguide.html", "statusCode": 200}}}
