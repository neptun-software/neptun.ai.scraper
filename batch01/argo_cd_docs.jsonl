{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Overview\"?\n\nAssistant: Overview of Argo CD, a declarative, GitOps continuous delivery tool for Kubernetes.\n\nHere's a detailed explanation:\n\n\n## What Is Argo CD?\nArgo CD is a declarative, GitOps continuous delivery tool for Kubernetes.\n\n## Why Argo CD?\nApplication definitions, configurations, and environments should be declarative and version controlled.\nApplication deployment and lifecycle management should be automated, auditable, and easy to understand.\n\n## Getting Started\n### Quick Start\n\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\nFollow our [getting started guide](https://argo-cd.readthedocs.io/en/stable/getting_started/). Further user oriented [documentation](https://argo-cd.readthedocs.io/en/stable/user-guide/) is provided for additional features. If you are looking to upgrade Argo CD, see the [upgrade guide](https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview/).\nDeveloper oriented [documentation](https://argo-cd.readthedocs.io/en/stable/developer-guide/) is available for people interested in building third-party integrations.\n\n## How it works\nArgo CD follows the **GitOps** pattern of using Git repositories as the source of truth for defining the desired application state. Kubernetes manifests can be specified in several ways:\n\n- [kustomize](https://kustomize.io/) applications\n- [helm](https://helm.sh/) charts\n- [jsonnet](https://jsonnet.org/) files\n- Plain directory of YAML/json manifests\n- Any custom config management tool configured as a config management plugin\n\nArgo CD automates the deployment of the desired application states in the specified target environments. Application deployments can track updates to branches, tags, or be pinned to a specific version of manifests at a Git commit. See [tracking strategies](https://argo-cd.readthedocs.io/en/stable/user-guide/tracking_strategies/) for additional details about the different tracking strategies available.\n\nFor a quick 10 minute overview of Argo CD, check out the demo presented to the Sig Apps community meeting.\n\n## Architecture\nArgo CD is implemented as a Kubernetes controller which continuously monitors running applications and compares the current, live state against the desired target state (as specified in the Git repo). A deployed application whose live state deviates from the target state is considered `OutOfSync`. Argo CD reports & visualizes the differences, while providing facilities to automatically or manually sync the live state back to the desired target state. Any modifications made to the desired target state in the Git repo can be automatically applied and reflected in the specified target environments.\n\nFor additional details, see [architecture overview](https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/).\n\n## Features\n- Automated deployment of applications to specified target environments\n- Support for multiple config management/templating tools (Kustomize, Helm, Jsonnet, plain-YAML)\n- Ability to manage and deploy to multiple clusters\n- SSO Integration (OIDC, OAuth2, LDAP, SAML 2.0, GitHub, GitLab, Microsoft, LinkedIn)\n- Multi-tenancy and RBAC policies for authorization\n- Rollback/Roll-anywhere to any application configuration committed in Git repository\n- Health status analysis of application resources\n- Automated configuration drift detection and visualization\n- Automated or manual syncing of applications to its desired state\n- Web UI which provides real-time view of application activity\n- CLI for automation and CI integration\n- Webhook integration (GitHub, BitBucket, GitLab)\n- Access tokens for automation\n- PreSync, Sync, PostSync hooks to support complex application rollouts (e.g.blue/green & canary upgrades)\n- Audit trails for application events and API calls\n- Prometheus metrics\n- Parameter overrides for overriding helm parameters in Git.\n\n## Development Status\nArgo CD is being actively developed by the community. Our releases can be found [here](https://github.com/argoproj/argo-cd/releases).\n\n## Adoption\nOrganizations who have officially adopted Argo CD can be found [here](https://github.com/argoproj/argo-cd/blob/master/USERS.md).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable", "title": "Overview", "description": "Overview of Argo CD, a declarative, GitOps continuous delivery tool for Kubernetes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:19:41", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "794cf041-18f7-4416-a61f-ab54bf357e52", "sourceURL": "https://argo-cd.readthedocs.io/en/stable", "url": "https://argo-cd.readthedocs.io/en/stable/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Overview\"?\n\nAssistant: Here are some code examples:\n\n### Quick Start Commands\n```yaml\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable", "title": "Overview", "description": "Overview of Argo CD, a declarative, GitOps continuous delivery tool for Kubernetes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:19:41", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "794cf041-18f7-4416-a61f-ab54bf357e52", "sourceURL": "https://argo-cd.readthedocs.io/en/stable", "url": "https://argo-cd.readthedocs.io/en/stable/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Overview\"?\n\nAssistant: Here are the recommended best practices:\n\n• Application definitions, configurations, and environments should be declarative and version controlled.\n• Application deployment and lifecycle management should be automated, auditable, and easy to understand.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable", "title": "Overview", "description": "Overview of Argo CD, a declarative, GitOps continuous delivery tool for Kubernetes.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:19:41", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "794cf041-18f7-4416-a61f-ab54bf357e52", "sourceURL": "https://argo-cd.readthedocs.io/en/stable", "url": "https://argo-cd.readthedocs.io/en/stable/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"CONTRIBUTING\"?\n\nAssistant: Guidelines for contributing to the project.\n\nHere's a detailed explanation:\n\n\n## Contribution Guide\nPlease refer to the Contribution Guide at https://argo-cd.readthedocs.io/en/latest/developer-guide/code-contributions/.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/CONTRIBUTING", "title": "CONTRIBUTING", "description": "Guidelines for contributing to the project.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 23:20:03", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/CONTRIBUTING/", "title": "CONTRIBUTING - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "985d27eb-7aff-4499-8389-3cea3a6db69c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/CONTRIBUTING", "url": "https://argo-cd.readthedocs.io/en/stable/CONTRIBUTING/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Support\"?\n\nAssistant: Guidelines for seeking support for Argo CD.\n\nHere's a detailed explanation:\n\n\n## Support Steps\n1. Make sure you've read [understanding the basics](https://argo-cd.readthedocs.io/en/stable/understand_the_basics/) and the [getting started guide](https://argo-cd.readthedocs.io/en/stable/getting_started/).\n2. Looked for an answer in [the frequently asked questions](https://argo-cd.readthedocs.io/en/stable/faq/).\n3. [Read existing issues ⧉](https://github.com/argoproj/argo-cd/issues).\n4. Ask a question in [the Argo CD Slack channel ⧉](https://argoproj.github.io/community/join-slack).\n5. [Report a bug, or request a feature ⧉](https://github.com/argoproj/argo-cd/issues/new/choose).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/SUPPORT", "title": "Support", "description": "Guidelines for seeking support for Argo CD.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:21:18", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/SUPPORT/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Support - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "scrapeId": "f681a76f-5aff-40c3-b693-bf2f5caacd98", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/SUPPORT", "url": "https://argo-cd.readthedocs.io/en/stable/SUPPORT/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Support\"?\n\nAssistant: Here are the recommended best practices:\n\n• Read the basics and getting started guide before seeking help.\n• Check the FAQ for common issues.\n• Review existing issues to see if your question has already been answered.\n• Utilize the Argo CD Slack channel for community support.\n• Report bugs or feature requests through the appropriate GitHub issues.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/SUPPORT", "title": "Support", "description": "Guidelines for seeking support for Argo CD.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:21:18", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/SUPPORT/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Support - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "scrapeId": "f681a76f-5aff-40c3-b693-bf2f5caacd98", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/SUPPORT", "url": "https://argo-cd.readthedocs.io/en/stable/SUPPORT/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Bug triage proposal for ArgoCD\"?\n\nAssistant: A proposal for a common issue triage process to manage bugs in ArgoCD effectively.\n\nHere's a detailed explanation:\n\n\n## Situation\nLots of issues on our issue tracker. Many of them not bugs, but questions, or very environment related. It's easy to lose oversight.\n\nAlso, it's not obvious which bugs are important. Which bugs should be fixed first? Can we make a new release with the current inventory of open bugs? Is there still a bug that should make it to the new release?\n\n## Proposal\nWe should agree upon a common issue triage process. The process must be lean and efficient, and should support us and the community looking into the GH issue tracker at making the following decisions:\n\n- Is it even a real bug?\n- If it is a real bug, what is the current status of the bug (next to \"open\" or \"closed\")?\n- How important is it to fix the bug?\n- How urgent is it to fix the bug?\n- Who will be working to fix the bug?\n\nWe need new methods to classify our bugs, at least into these categories:\n\n- validity: Does the issue indeed represent a true bug\n- severity: Denominates what impact the bug has\n- priority: Denominates the urgency of the fix\n\n## Triage process\nGH issue tracker provides us with the possibility to label issues. Using these labels is not perfect, but should give a good start. Each new issue created in our issue tracker should be correctly labeled during its lifecycle, so keeping an overview would be simplified by the ability to filter for labels.\n\nThe triage process could be as follows:\n\n1. A new bug issue is created by someone on the tracker\n\n2. The first person of the core team to see it will start the triage by classifying the issue (see below). This will indicate the creator that we have noticed the issue, and that it's not \"fire & forget\" tracker.\n\n3. Initial classification should be possible even when much of the information is missing yet. In this case, the issue would be classified as such (see below). Again, this indicates that someone has noticed the issue, and there is activity in progress to get the required information.\n\n4. Classification of the issue can change over its life-cycle. However, once the issue has been initially classified correctly (that is, with something else than the \"placeholder\" classification discussed above), changes to the classification should be discussed first with the person who initially classified the issue.\n\n## Classification\nWe have introduced some new labels in the GH issue tracker for classifying the bug issues. These labels are prefixed with the string `bug/`, and should be applied to all new issues in our tracker.\n\n## Classification requires more information\nIf it is not yet possible to classify the bug, i.e. because more information is required to correctly classify the bug, you should always set the label `bug/in-triage` to make it clear that triage process has started but could not yet be completed.\n\n## Issue type\nIf it's clear that a bug issue is not a bug, but a question or reach for support, it should be marked as such:\n\n- Remove any of the labels prefixed `bug/` that might be attached to the issue\n- Remove the label `bug` from the issue\n- Add the label `inquiry` to the issue\n\nIf the inquiry turns out to be something that should be covered by the docs, but is not, the following actions should be taken:\n\n- The title of the issue should be adapted that it will be clear that the bug affects the docs, not the code\n- The label `documentation` should be attached to the issue\n\nIf the issue is too confusing (can happen), another possibility is to close the issue and create a new one as described in above (with a meaningful title and the label `documentation` attached to it).\n\n## Validity\nSome reported bugs may be invalid. It could be a user error, a misconfiguration or something along these lines. If it is clear that the bug falls into one of these categories:\n\n- Remove any of the labels prefixed `bug/` that might be attached to the issue\n- Add the label `invalid` to the issue\n- Retain the `bug` label to the issue\n- Close the issue\n\nWhen closing the issue, it is important to let requester know why the issue has been closed. The optimum would be to provide a solution to his request in the comments of the issue, or at least pointers to possible solutions.\n\n## Regressions\nSometimes it happens that something that worked in a previous release does not work now when it should still work. If this is the case, the following actions should be done\n\n- Add the label `regression` to the issue\n- Continue with triage.\n\n## Severity\nIt is important to find out how severe the impact of a bug is, and to label the bug with this information. For this purpose, the following labels exist in our tracker:\n\n- `bug/severity:minor`: Bug has limited impact and maybe affects only an edge-case. Core functionality is not affected, and there is no data loss involved. Something might not work as expected. Example of these kind of bugs could be a CLI command that is not working as expected, a glitch in the UI, wrong documentation, etc.\n\n- `bug/severity:major`: Malfunction in one of the core components, impacting a majority of users or one of the core functionalities in ArgoCD. There is no data loss involved, but for example a sync is not working due to a bug in ArgoCD (and not due to user error), manifests fail to render, etc.\n\n- `bug/severity:critical`: A critical bug in ArgoCD, possibly resulting in data loss, integrity breach or severe degraded overall functionality.\n\n## Priority\nThe priority of an issue indicates how quickly the issue should be fixed and released. This information should help us in deciding the target release for the fix, and whether a bug would even justify a dedicated patch release. The following labels can be used to classify bugs into their priority:\n\n- `bug/priority:low`: Will be fixed without any specific target release.\n\n- `bug/priority:medium`: Should be fixed in the minor or major release, which ever comes first.\n\n- `bug/priority:high`: Should be fixed with the next patch release.\n\n- `bug/priority:urgent`: Should be fixed immediately and might even justify a dedicated patch release.\n\nThe priority should be set according to the value of the fix and the attached severity. This means. a bug with a severity of `minor` could still be classified with priority `high`, when it is a _low hanging fruit_ (i.e. the bug is easy to fix with low effort) and contributes to overall user experience of ArgoCD.\n\nLikewise, a bug classified with a severity of `major` could still have a priority of `medium`, if there is a workaround available for the bug which mitigates the effects of the bug to a bearable extend.\n\nBugs classified with a severity of `critical` most likely belong to either the `urgent` priority, or to the `high` category when there is a workaround available.\n\nBugs that have a `regression` label attached (see Regression above) should usually be handled with higher priority, so those kind of issues will most likely have a priority of `high` or `urgent` attached to it.\n\n## Summary\nApplying a little discipline when working with our issue tracker could greatly help us in making informed decision about which bugs to fix when. Also, it would help us to get a clear view whether we can do for example a new minor release without having forgot any outstanding issues that should make it into that release.\n\nIf we are able to work with classification of bug issues, we might want to extend the triage for enhancement proposals and PRs as well.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/bug_triage", "title": "Bug triage proposal for ArgoCD", "description": "A proposal for a common issue triage process to manage bugs in ArgoCD effectively.", "has_code_examples": false, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:21:53", "type": "overview", "page_metadata": {"title": "Bug triage proposal for ArgoCD - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/bug_triage/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "b866b6d5-b1e3-4c6c-afab-c8bd1c58efb3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/bug_triage", "url": "https://argo-cd.readthedocs.io/en/stable/bug_triage/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Bug triage proposal for ArgoCD\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use labels to classify issues in the GH issue tracker for better oversight.\n• Ensure initial classification of issues even with incomplete information.\n• Communicate clearly when closing issues to provide solutions or pointers to users.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/bug_triage", "title": "Bug triage proposal for ArgoCD", "description": "A proposal for a common issue triage process to manage bugs in ArgoCD effectively.", "has_code_examples": false, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:21:53", "type": "best_practices", "page_metadata": {"title": "Bug triage proposal for ArgoCD - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/bug_triage/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "b866b6d5-b1e3-4c6c-afab-c8bd1c58efb3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/bug_triage", "url": "https://argo-cd.readthedocs.io/en/stable/bug_triage/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Installation\"?\n\nAssistant: Instructions for installing the Argo CD CLI on various operating systems.\n\nHere's a detailed explanation:\n\n\n## Linux and WSL\n### ArchLinux\n```\npacman -S argocd\n```\n\n### Homebrew\n```\nbrew install argocd\n```\n\n### Download With Curl\n#### Download latest version\n```\ncurl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64\nsudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd\nrm argocd-linux-amd64\n```\n\n#### Download concrete version\nSet `VERSION` replacing `<TAG>` in the command below with the version of Argo CD you would like to download:\n```\nVERSION=<TAG> # Select desired TAG from https://github.com/argoproj/argo-cd/releases\ncurl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-linux-amd64\nsudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd\nrm argocd-linux-amd64\n```\n\n#### Download latest stable version\nYou can download the latest stable release by executing below steps:\n```\nVERSION=$(curl -L -s https://raw.githubusercontent.com/argoproj/argo-cd/stable/VERSION)\ncurl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/v$VERSION/argocd-linux-amd64\nsudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd\nrm argocd-linux-amd64\n```\n\nYou should now be able to run `argocd` commands.\n\n## Mac (M1)\n### Download With Curl\nYou can view the latest version of Argo CD at the link above or run the following command to grab the version:\n```\nVERSION=$(curl --silent \"https://api.github.com/repos/argoproj/argo-cd/releases/latest\" | grep '\"tag_name\"' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n```\nReplace `VERSION` in the command below with the version of Argo CD you would like to download:\n```\ncurl -sSL -o argocd-darwin-arm64 https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-darwin-arm64\n```\nInstall the Argo CD CLI binary:\n```\nsudo install -m 555 argocd-darwin-arm64 /usr/local/bin/argocd\nrm argocd-darwin-arm64\n```\n\n## Mac\n### Homebrew\n```\nbrew install argocd\n```\n\n### Download With Curl\nYou can view the latest version of Argo CD at the link above or run the following command to grab the version:\n```\nVERSION=$(curl --silent \"https://api.github.com/repos/argoproj/argo-cd/releases/latest\" | grep '\"tag_name\"' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\n```\nReplace `VERSION` in the command below with the version of Argo CD you would like to download:\n```\ncurl -sSL -o argocd-darwin-amd64 https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-darwin-amd64\n```\nInstall the Argo CD CLI binary:\n```\nsudo install -m 555 argocd-darwin-amd64 /usr/local/bin/argocd\nrm argocd-darwin-amd64\n```\nAfter finishing either of the instructions above, you should now be able to run `argocd` commands.\n\n## Windows\n### Download With PowerShell: Invoke-WebRequest\nYou can view the latest version of Argo CD at the link above or run the following command to grab the version:\n```\n$version = (Invoke-RestMethod https://api.github.com/repos/argoproj/argo-cd/releases/latest).tag_name\n```\nReplace `$version` in the command below with the version of Argo CD you would like to download:\n```\n$url = \"https://github.com/argoproj/argo-cd/releases/download/\" + $version + \"/argocd-windows-amd64.exe\"\n$output = \"argocd.exe\"\n\nInvoke-WebRequest -Uri $url -OutFile $output\n```\nAlso please note you will probably need to move the file into your PATH.\nUse following command to add Argo CD into environment variables PATH:\n```\n[Environment]::SetEnvironmentVariable(\"Path\", \"$env:Path;C:\\Path\\To\\ArgoCD-CLI\", \"User\")\n```\nAfter finishing the instructions above, you should now be able to run `argocd` commands.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/cli_installation", "title": "Installation", "description": "Instructions for installing the Argo CD CLI on various operating systems.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:22:44", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/cli_installation/", "title": "Installation - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "d7af0ea7-3b89-4602-a9f8-c009cf464ae6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/cli_installation", "url": "https://argo-cd.readthedocs.io/en/stable/cli_installation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Installation\"?\n\nAssistant: Here are some code examples:\n\n### ArchLinux Installation\n```yaml\npacman -S argocd\n```\n\n### Homebrew Installation (Mac/Linux)\n```yaml\nbrew install argocd\n```\n\n### Download latest version with Curl (Linux)\n```yaml\ncurl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64\nsudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd\nrm argocd-linux-amd64\n```\n\n### Download concrete version with Curl (Linux)\n```yaml\nVERSION=<TAG> # Select desired TAG from https://github.com/argoproj/argo-cd/releases\ncurl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-linux-amd64\nsudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd\nrm argocd-linux-amd64\n```\n\n### Download latest stable version with Curl (Linux)\n```yaml\nVERSION=$(curl -L -s https://raw.githubusercontent.com/argoproj/argo-cd/stable/VERSION)\ncurl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/v$VERSION/argocd-linux-amd64\nsudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd\nrm argocd-linux-amd64\n```\n\n### Download With Curl (Mac M1)\n```yaml\nVERSION=$(curl --silent \"https://api.github.com/repos/argoproj/argo-cd/releases/latest\" | grep '\"tag_name\"' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\ncurl -sSL -o argocd-darwin-arm64 https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-darwin-arm64\nsudo install -m 555 argocd-darwin-arm64 /usr/local/bin/argocd\nrm argocd-darwin-arm64\n```\n\n### Download With Curl (Mac)\n```yaml\nVERSION=$(curl --silent \"https://api.github.com/repos/argoproj/argo-cd/releases/latest\" | grep '\"tag_name\"' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\ncurl -sSL -o argocd-darwin-amd64 https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-darwin-amd64\nsudo install -m 555 argocd-darwin-amd64 /usr/local/bin/argocd\nrm argocd-darwin-amd64\n```\n\n### Download With PowerShell (Windows)\n```yaml\n$version = (Invoke-RestMethod https://api.github.com/repos/argoproj/argo-cd/releases/latest).tag_name\n$url = \"https://github.com/argoproj/argo-cd/releases/download/\" + $version + \"/argocd-windows-amd64.exe\"\n$output = \"argocd.exe\"\n\nInvoke-WebRequest -Uri $url -OutFile $output\n[Environment]::SetEnvironmentVariable(\"Path\", \"$env:Path;C:\\Path\\To\\ArgoCD-CLI\", \"User\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/cli_installation", "title": "Installation", "description": "Instructions for installing the Argo CD CLI on various operating systems.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:22:44", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/cli_installation/", "title": "Installation - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "d7af0ea7-3b89-4602-a9f8-c009cf464ae6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/cli_installation", "url": "https://argo-cd.readthedocs.io/en/stable/cli_installation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Installation\"?\n\nAssistant: Here are the recommended best practices:\n\n• You should now be able to run `argocd` commands after installation.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/cli_installation", "title": "Installation", "description": "Instructions for installing the Argo CD CLI on various operating systems.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:22:44", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/cli_installation/", "title": "Installation - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "d7af0ea7-3b89-4602-a9f8-c009cf464ae6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/cli_installation", "url": "https://argo-cd.readthedocs.io/en/stable/cli_installation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Core Concepts\"?\n\nAssistant: An overview of concepts specific to Argo CD, assuming familiarity with core Git, Docker, Kubernetes, Continuous Delivery, and GitOps concepts.\n\nHere's a detailed explanation:\n\n\n## Core Concepts\nBelow are some of the concepts that are specific to Argo CD.\n\n- **Application** A group of Kubernetes resources as defined by a manifest. This is a Custom Resource Definition (CRD).\n- **Application source type** Which **Tool** is used to build the application.\n- **Target state** The desired state of an application, as represented by files in a Git repository.\n- **Live state** The live state of that application. What pods etc are deployed.\n- **Sync status** Whether or not the live state matches the target state. Is the deployed application the same as Git says it should be?\n- **Sync** The process of making an application move to its target state. E.g. by applying changes to a Kubernetes cluster.\n- **Sync operation status** Whether or not a sync succeeded.\n- **Refresh** Compare the latest code in Git with the live state. Figure out what is different.\n- **Health** The health of the application, is it running correctly? Can it serve requests?\n- **Tool** A tool to create manifests from a directory of files. E.g. Kustomize. See **Application Source Type**.\n- **Configuration management tool** See **Tool**.\n- **Configuration management plugin** A custom tool.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/core_concepts", "title": "Core Concepts", "description": "An overview of concepts specific to Argo CD, assuming familiarity with core Git, Docker, Kubernetes, Continuous Delivery, and GitOps concepts.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 23:22:55", "type": "overview", "page_metadata": {"title": "Core Concepts - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/core_concepts/", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "8b2cb733-242f-414c-9de3-54044a164dac", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/core_concepts", "url": "https://argo-cd.readthedocs.io/en/stable/core_concepts/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"FAQ\"?\n\nAssistant: Frequently asked questions regarding Argo CD and its functionalities.\n\nHere's a detailed explanation:\n\n\n## I've deleted/corrupted my repo and can't delete my app.\nArgo CD can't delete an app if it cannot generate manifests. You need to either:\n\n1. Reinstate/fix your repo.\n2. Delete the app using `--cascade=false` and then manually deleting the resources.\n\n## Why is my application still `OutOfSync` immediately after a successful Sync?\nSee [Diffing](https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/) documentation for reasons resources can be OutOfSync, and ways to configure Argo CD to ignore fields when differences are expected.\n\n## Why is my application stuck in `Progressing` state?\nArgo CD provides health for several standard Kubernetes types. The `Ingress`, `StatefulSet` and `SealedSecret` types have known issues which might cause health check to return `Progressing` state instead of `Healthy`.\n\n- `Ingress` is considered healthy if `status.loadBalancer.ingress` list is non-empty, with at least one value for `hostname` or `IP`. Some ingress controllers ([contour](https://github.com/heptio/contour/issues/403), [traefik](https://github.com/argoproj/argo-cd/issues/968#issuecomment-451082913)) don't update `status.loadBalancer.ingress` field which causes `Ingress` to stuck in `Progressing` state forever.\n\n- `StatefulSet` is considered healthy if value of `status.updatedReplicas` field matches to `spec.replicas` field. Due to Kubernetes bug [kubernetes/kubernetes#68573](https://github.com/kubernetes/kubernetes/issues/68573) the `status.updatedReplicas` is not populated. So unless you run Kubernetes version which include the fix [kubernetes/kubernetes#67570](https://github.com/kubernetes/kubernetes/pull/67570) `StatefulSet` might stay in `Progressing` state.\n\n- Your `StatefulSet` or `DaemonSet` is using `OnDelete` instead of `RollingUpdate` strategy. See [#1881](https://github.com/argoproj/argo-cd/issues/1881).\n- For `SealedSecret`, see [Why are resources of type `SealedSecret` stuck in the `Progressing` state?](https://argo-cd.readthedocs.io/en/stable/faq/#sealed-secret-stuck-progressing)\n\nAs workaround Argo CD allows providing [health check](https://argo-cd.readthedocs.io/en/stable/operator-manual/health/) customization which overrides default behavior.\n\nIf you are using Traefik for your Ingress, you can update the Traefik config to publish the loadBalancer IP using [publishedservice](https://doc.traefik.io/traefik/providers/kubernetes-ingress/#publishedservice), which will resolve this issue.\n\n## I forgot the admin password, how do I reset it?\nFor Argo CD v1.8 and earlier, the initial password is set to the name of the server pod, as per [the getting started guide](https://argo-cd.readthedocs.io/en/stable/getting_started/). For Argo CD v1.9 and later, the initial password is available from a secret named `argocd-initial-admin-secret`.\n\nTo change the password, edit the `argocd-secret` secret and update the `admin.password` field with a new bcrypt hash.\n\nGenerating a bcrypt hash\n\nUse the following command to generate a bcrypt hash for `admin.password`\n\n```\nargocd account bcrypt --password <YOUR-PASSWORD-HERE>\n```\n\nTo apply the new password hash, use the following command (replacing the hash with your own):\n\n```\n# bcrypt(password)=$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa\nkubectl -n argocd patch secret argocd-secret \\\n  -p '{\"stringData\": {\n    \"admin.password\": \"$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa\",\n    \"admin.passwordMtime\": \"'$(date +%FT%T%Z)'\"\n  }}'\n```\n\nAnother option is to delete both the `admin.password` and `admin.passwordMtime` keys and restart argocd-server. This will generate a new password as per [the getting started guide](https://argo-cd.readthedocs.io/en/stable/getting_started/), so either to the name of the pod (Argo CD 1.8 and earlier) or a randomly generated password stored in a secret (Argo CD 1.9 and later).\n\n## How to disable admin user?\nAdd `admin.enabled: \"false\"` to the `argocd-cm` ConfigMap (see [user management](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/)).\n\n## Argo CD cannot deploy Helm Chart based applications without internet access, how can I solve it?\nArgo CD might fail to generate Helm chart manifests if the chart has dependencies located in external repositories. To solve the problem you need to make sure that `requirements.yaml` uses only internally available Helm repositories. Even if the chart uses only dependencies from internal repos Helm might decide to refresh `stable` repo. As workaround override `stable` repo URL in `argocd-cm` config map:\n\n```\ndata:\n  repositories: |\n    - type: helm\n      url: http://<internal-helm-repo-host>:8080\n      name: stable\n``\n\n## After deploying my Helm application with Argo CD I cannot see it with `helm ls` and other Helm commands\nWhen deploying a Helm application Argo CD is using Helm only as a template mechanism. It runs `helm template` and then deploys the resulting manifests on the cluster instead of doing `helm install`. This means that you cannot use any Helm command to view/verify the application. It is fully managed by Argo CD. Note that Argo CD supports natively some capabilities that you might miss in Helm (such as the history and rollback commands). This decision was made so that Argo CD is neutral to all manifest generators.\n\n## I've configured cluster secret but it does not show up in CLI/UI, how do I fix it?\nCheck if cluster secret has `argocd.argoproj.io/secret-type: cluster` label. If secret has the label but the cluster is still not visible then make sure it might be a permission issue. Try to list clusters using `admin` user (e.g. `argocd login --username admin && argocd cluster list`).\n\n## Argo CD is unable to connect to my cluster, how do I troubleshoot it?\nUse the following steps to reconstruct configured cluster config and connect to your cluster manually using kubectl:\n\n```\nkubectl exec -it <argocd-pod-name> bash # ssh into any argocd server pod\nargocd admin cluster kubeconfig https://<cluster-url> /tmp/config --namespace argocd # generate your cluster config\nKUBECONFIG=/tmp/config kubectl get pods # test connection manually\n```\n\nNow you can manually verify that cluster is accessible from the Argo CD pod.\n\n## How Can I Terminate A Sync?\nTo terminate the sync, click on the \"synchronization\" then \"terminate\":\n\n![Synchronization](https://argo-cd.readthedocs.io/en/stable/assets/synchronization-button.png)![Terminate](https://argo-cd.readthedocs.io/en/stable/assets/terminate-button.png)\n\n## Why Is My App `Out Of Sync` Even After Syncing?\nIn some cases, the tool you use may conflict with Argo CD by adding the `app.kubernetes.io/instance` label. E.g. using Kustomize common labels feature.\n\nArgo CD automatically sets the `app.kubernetes.io/instance` label and uses it to determine which resources form the app. If the tool does this too, this causes confusion. You can change this label by setting the `application.instanceLabelKey` value in the `argocd-cm`. We recommend that you use `argocd.argoproj.io/instance`.\n\nNote: When you make this change your applications will become out of sync and will need re-syncing.\n\n## How often does Argo CD check for changes to my Git or Helm repository?\nThe default polling interval is 3 minutes (180 seconds) with a configurable jitter. You can change the setting by updating the `timeout.reconciliation` value and the `timeout.reconciliation.jitter` in the [argocd-cm](https://github.com/argoproj/argo-cd/blob/2d6ce088acd4fb29271ffb6f6023dbb27594d59b/docs/operator-manual/argocd-cm.yaml#L279-L282) config map. If there are any Git changes, Argo CD will only update applications with the [auto-sync setting](https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync/) enabled. If you set it to `0` then Argo CD will stop polling Git repositories automatically and you can only use alternative methods such as [webhooks](https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook/) and/or manual syncs for deploying applications.\n\n## Why is my ArgoCD application `Out Of Sync` when there are no actual changes to the resource limits (or other fields with unit values)?\nKubernetes has normalized your resource limits when they are applied, and then Argo CD has compared the version in your generated manifests from git to the normalized ones in the Kubernetes cluster - they may not match.\n\n## How Do I Fix `invalid cookie, longer than max length 4093`?\nArgo CD uses a JWT as the auth token. You likely are part of many groups and have gone over the 4KB limit which is set for cookies. You can get the list of groups by opening \"developer tools -> network\".\n\n## Why Am I Getting `rpc error: code = Unavailable desc = transport is closing` When Using The CLI?\nMaybe you're behind a proxy that does not support HTTP 2? Try the `--grpc-web` flag:\n\n```\nargocd ... --grpc-web\n```\n\n## Why Am I Getting `x509: certificate signed by unknown authority` When Using The CLI?\nThe certificate created by default by Argo CD is not automatically recognised by the Argo CD CLI, in order to create a secure system you must follow the instructions to [install a certificate](https://argo-cd.readthedocs.io/operator-manual/tls/) and configure your client OS to trust that certificate.\n\n## I have configured Dex via `dex.config` in `argocd-cm`, it still says Dex is unconfigured. Why?\nMost likely you forgot to set the `url` in `argocd-cm` to point to your Argo CD as well.\n\n## Why are `SealedSecret` resources reporting a `Status`?\nVersions of `SealedSecret` up to and including `v0.15.0` (especially through helm `1.15.0-r3`) don't include a [modern CRD](https://github.com/bitnami-labs/sealed-secrets/issues/555) and thus the status field will not be exposed (on k8s `1.16+`).\n\n## Why are resources of type `SealedSecret` stuck in the `Progressing` state?\nThe controller of the `SealedSecret` resource may expose the status condition on resource it provisioned. Since version `v2.0.0` Argo CD picks up that status condition to derive a health status for the `SealedSecret`.\n\n## How do I fix `The order in patch list … doesn't match $setElementOrder list: …`?\nAn application may trigger a sync error labeled a `ComparisonError` with a message like:\n\n> The order in patch list: ...\n\nThere are two parts to the message:\n\n1. `The order in patch list: [` This identifies values for items, especially items that appear multiple times.\n2. `doesn't match $setElementOrder list: [` This includes all of the keys.\n\n## How to rotate Redis secret?\n- Delete `argocd-redis` secret in the namespace where Argo CD is installed.\n\n```\nkubectl delete secret argocd-redis -n <argocd namesapce>\n```\n\n- If you are running Redis in HA mode, restart Redis in HA.\n\n```\nkubectl rollout restart deployment argocd-redis-ha-haproxy\nkubectl rollout restart statefulset argocd-redis-ha-server\n```\n\n- If you are running Redis in non-HA mode, restart Redis.\n\n```\nkubectl rollout restart deployment argocd-redis\n```\n\n- Restart other components.\n\n```\nkubectl rollout restart deployment argocd-server argocd-repo-server\nkubectl rollout restart statefulset argocd-application-controller\n```\n\n## How to turn off Redis auth if users really want to?\nArgo CD default installation is now configured to automatically enable Redis authentication. If for some reason authenticated Redis does not work for you and you want to use non-authenticated Redis, here are the steps:\n\n1. You need to have your own Redis installation.\n2. Configure Argo CD to use your own Redis instance.\n\n## How do I provide my own Redis credentials?\nThe Redis password is stored in Kubernetes secret `argocd-redis` with key `auth` in the namespace where Argo CD is installed.\n\n## How do I fix `Manifest generation error (cached)`?\n`Manifest generation error (cached)` means that there was an error when generating manifests and that the error message has been cached to avoid runaway retries.\n\n## How do I fix `field not declared in schema`?\nFor certain features, Argo CD relies on a static (hard-coded) set of schemas for built-in Kubernetes resource types.\n\n## How do I fix the issue?\nTo completely resolve the issue, upgrade to an Argo CD version which contains a static schema supporting all the needed fields.\n\n## How do I work around the issue?\nAs mentioned above, only certain Argo CD features rely on the static schema.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/faq", "title": "FAQ", "description": "Frequently asked questions regarding Argo CD and its functionalities.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-27 23:23:52", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "FAQ - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/faq/", "scrapeId": "ce4cf624-48c1-4b55-8313-79e46971e597", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/faq", "url": "https://argo-cd.readthedocs.io/en/stable/faq/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"FAQ\"?\n\nAssistant: Here are some code examples:\n\n### Delete Redis secret\n```yaml\nkubectl delete secret argocd-redis -n <argocd namesapce>\n```\n\n### Restart Redis in HA mode\n```yaml\nkubectl rollout restart deployment argocd-redis-ha-haproxy\nkubectl rollout restart statefulset argocd-redis-ha-server\n```\n\n### Restart Redis in non-HA mode\n```yaml\nkubectl rollout restart deployment argocd-redis\n```\n\n### Restart other components\n```yaml\nkubectl rollout restart deployment argocd-server argocd-repo-server\nkubectl rollout restart statefulset argocd-application-controller\n```\n\n### Generate bcrypt hash for admin password\n```yaml\nargocd account bcrypt --password <YOUR-PASSWORD-HERE>\n```\n\n### Apply new password hash\n```yaml\nkubectl -n argocd patch secret argocd-secret \\\n  -p '{\"stringData\": {\n    \"admin.password\": \"$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa\",\n    \"admin.passwordMtime\": \"'$(date +%FT%T%Z)'\"\n  }}'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/faq", "title": "FAQ", "description": "Frequently asked questions regarding Argo CD and its functionalities.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-27 23:23:52", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "FAQ - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/faq/", "scrapeId": "ce4cf624-48c1-4b55-8313-79e46971e597", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/faq", "url": "https://argo-cd.readthedocs.io/en/stable/faq/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"FAQ\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `--cascade=false` when deleting apps if the repo is corrupted.\n• Check the health of `Ingress`, `StatefulSet`, and `SealedSecret` types for known issues.\n• Use `argocd.argoproj.io/instance` for the instance label to avoid conflicts with other tools.\n• Set the polling interval in `argocd-cm` to manage how often Argo CD checks for changes.\n• Use internal Helm repositories to avoid issues with external dependencies.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/faq", "title": "FAQ", "description": "Frequently asked questions regarding Argo CD and its functionalities.", "has_code_examples": true, "has_best_practices": true, "section_count": 27, "timestamp": "2025-02-27 23:23:52", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "FAQ - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/faq/", "scrapeId": "ce4cf624-48c1-4b55-8313-79e46971e597", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/faq", "url": "https://argo-cd.readthedocs.io/en/stable/faq/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Getting Started\"?\n\nAssistant: This guide provides a step-by-step process for installing and using Argo CD, including requirements, installation, and application deployment.\n\nHere's a detailed explanation:\n\n\n## Requirements\n- Installed [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) command-line tool.\n- Have a [kubeconfig](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/) file (default location is `~/.kube/config`).\n- CoreDNS. Can be enabled for microk8s by `microk8s enable dns && microk8s stop && microk8s start`.\n\n## 1. Install Argo CD\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\nThis will create a new namespace, `argocd`, where Argo CD services and application resources will live.\n\nWarning\n\nThe installation manifests include `ClusterRoleBinding` resources that reference `argocd` namespace. If you are installing Argo CD into a different namespace then make sure to update the namespace reference.\n\nTip\n\nIf you are not interested in UI, SSO, and multi-cluster features, then you can install only the [core](https://argo-cd.readthedocs.io/en/stable/operator-manual/core/#installing) Argo CD components.\n\nThis default installation will have a self-signed certificate and cannot be accessed without a bit of extra work.\nDo one of:\n\n- Follow the [instructions to configure a certificate](https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/) (and ensure that the client OS trusts it).\n- Configure the client OS to trust the self signed certificate.\n- Use the --insecure flag on all Argo CD CLI operations in this guide.\n\nNote\n\nDefault namespace for `kubectl` config must be set to `argocd`. This is only needed for the following commands since the previous commands have -n argocd already:\n`kubectl config set-context --current --namespace=argocd`\n\nUse `argocd login --core` to [configure](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_login/) CLI access and skip steps 3-5.\n\nNote\n\nThis default installation for Redis is using password authentication. The Redis password is stored in Kubernetes secret `argocd-redis` with key `auth` in the namespace where Argo CD is installed.\n\n## 2. Download Argo CD CLI\nDownload the latest Argo CD version from [https://github.com/argoproj/argo-cd/releases/latest](https://github.com/argoproj/argo-cd/releases/latest). More detailed installation instructions can be found via the [CLI installation documentation](https://argo-cd.readthedocs.io/en/stable/cli_installation/).\n\nAlso available in Mac, Linux and WSL Homebrew:\n\n```\nbrew install argocd\n```\n\n## 3. Access The Argo CD API Server\nBy default, the Argo CD API server is not exposed with an external IP. To access the API server, choose one of the following techniques to expose the Argo CD API server:\n\n### Service Type Load Balancer\n\nChange the argocd-server service type to `LoadBalancer`:\n\n```\nkubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\n```\n\n### Ingress\n\nFollow the [ingress documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/) on how to configure Argo CD with ingress.\n\n### Port Forwarding\n\nKubectl port-forwarding can also be used to connect to the API server without exposing the service.\n\n```\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n```\n\nThe API server can then be accessed using https://localhost:8080.\n\n## 4. Login Using The CLI\nThe initial password for the `admin` account is auto-generated and stored as clear text in the field `password` in a secret named `argocd-initial-admin-secret` in your Argo CD installation namespace. You can simply retrieve this password using the `argocd` CLI:\n\n```\nargocd admin initial-password -n argocd\n```\n\nWarning\n\nYou should delete the `argocd-initial-admin-secret` from the Argo CD namespace once you changed the password. The secret serves no other purpose than to store the initially generated password in clear and can safely be deleted at any time. It will be re-created on demand by Argo CD if a new admin password must be re-generated.\n\nUsing the username `admin` and the password from above, login to Argo CD's IP or hostname:\n\n```\nargocd login <ARGOCD_SERVER>\n```\n\nNote\n\nThe CLI environment must be able to communicate with the Argo CD API server. If it isn't directly accessible as described above in step 3, you can tell the CLI to access it using port forwarding through one of these mechanisms: 1) add `--port-forward-namespace argocd` flag to every CLI command; or 2) set `ARGOCD_OPTS` environment variable: `export ARGOCD_OPTS='--port-forward-namespace argocd'`.\n\nChange the password using the command:\n\n```\nargocd account update-password\n```\n\n## 5. Register A Cluster To Deploy Apps To (Optional)\nThis step registers a cluster's credentials to Argo CD, and is only necessary when deploying to an external cluster. When deploying internally (to the same cluster that Argo CD is running in), https://kubernetes.default.svc should be used as the application's K8s API server address.\n\nFirst list all clusters contexts in your current kubeconfig:\n\n```\nkubectl config get-contexts -o name\n```\n\nChoose a context name from the list and supply it to `argocd cluster add CONTEXTNAME`. For example, for docker-desktop context, run:\n\n```\nargocd cluster add docker-desktop\n```\n\nThe above command installs a ServiceAccount ( `argocd-manager`), into the kube-system namespace of that kubectl context, and binds the service account to an admin-level ClusterRole. Argo CD uses this service account token to perform its management tasks (i.e. deploy/monitoring).\n\nNote\n\nThe rules of the `argocd-manager-role` role can be modified such that it only has `create`, `update`, `patch`, `delete` privileges to a limited set of namespaces, groups, kinds. However `get`, `list`, `watch` privileges are required at the cluster-scope for Argo CD to function.\n\n## 6. Create An Application From A Git Repository\nAn example repository containing a guestbook application is available at [https://github.com/argoproj/argocd-example-apps.git](https://github.com/argoproj/argocd-example-apps.git) to demonstrate how Argo CD works.\n\nNote\n\nNote: The following example application may only be compatible with AMD64 architecture. If you are running on a different architecture (such as ARM64 or ARMv7), you may encounter issues with dependencies or container images that are not built for your platform. Consider verifying the compatibility of the application or building architecture-specific images if necessary.\n\n### Creating Apps Via CLI\n\nFirst we need to set the current namespace to argocd running the following command:\n\n```\nkubectl config set-context --current --namespace=argocd\n```\n\nCreate the example guestbook application with the following command:\n\n```\nargocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-server https://kubernetes.default.svc --dest-namespace default\n```\n\n## 7. Sync (Deploy) The Application\n### Syncing via CLI\n\nOnce the guestbook application is created, you can now view its status:\n\n```\n$ argocd app get guestbook\nName:               guestbook\nServer:             https://kubernetes.default.svc\nNamespace:          default\nURL:                https://10.97.164.88/applications/guestbook\nRepo:               https://github.com/argoproj/argocd-example-apps.git\nTarget:\nPath:               guestbook\nSync Policy:        <none>\nSync Status:        OutOfSync from  (1ff8a67)\nHealth Status:      Missing\n\nGROUP  KIND        NAMESPACE  NAME          STATUS     HEALTH\napps   Deployment  default    guestbook-ui  OutOfSync  Missing\n       Service     default    guestbook-ui  OutOfSync  Missing\n```\n\nThe application status is initially in `OutOfSync` state since the application has yet to be deployed, and no Kubernetes resources have been created. To sync (deploy) the application, run:\n\n```\nargocd app sync guestbook\n```\n\nThis command retrieves the manifests from the repository and performs a `kubectl apply` of the manifests. The guestbook app is now running and you can now view its resource components, logs, events, and assessed health status.\n\n### Syncing via UI\n\nOn the Applications page, click on _Sync_ button of the guestbook application:\n\n![guestbook app](https://argo-cd.readthedocs.io/en/stable/assets/guestbook-app.png)\n\nA panel will be opened and then, click on _Synchronize_ button.\n\nYou can see more details by clicking at the guestbook application:\n\n![view app](https://argo-cd.readthedocs.io/en/stable/assets/guestbook-tree.png)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/getting_started", "title": "Getting Started", "description": "This guide provides a step-by-step process for installing and using Argo CD, including requirements, installation, and application deployment.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:24:48", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/getting_started/", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Getting Started - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "f457b1b6-62f1-496e-83a5-3bd1b1134e84", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/getting_started", "url": "https://argo-cd.readthedocs.io/en/stable/getting_started/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Getting Started\"?\n\nAssistant: Here are some code examples:\n\n### Install Argo CD\n```yaml\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n### Download Argo CD CLI\n```yaml\nbrew install argocd\n```\n\n### Access The Argo CD API Server - Service Type Load Balancer\n```yaml\nkubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\n```\n\n### Access The Argo CD API Server - Port Forwarding\n```yaml\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n```\n\n### Login Using The CLI\n```yaml\nargocd admin initial-password -n argocd\n```\n\n### Register A Cluster To Deploy Apps To\n```yaml\nkubectl config get-contexts -o name\n```\n\n### Create An Application From A Git Repository\n```yaml\nargocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-server https://kubernetes.default.svc --dest-namespace default\n```\n\n### Sync (Deploy) The Application\n```yaml\nargocd app sync guestbook\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/getting_started", "title": "Getting Started", "description": "This guide provides a step-by-step process for installing and using Argo CD, including requirements, installation, and application deployment.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:24:48", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/getting_started/", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Getting Started - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "f457b1b6-62f1-496e-83a5-3bd1b1134e84", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/getting_started", "url": "https://argo-cd.readthedocs.io/en/stable/getting_started/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Getting Started\"?\n\nAssistant: Here are the recommended best practices:\n\n• This guide assumes you have a grounding in the tools that Argo CD is based on. Please read understanding the basics to learn about these tools.\n• If you are not interested in UI, SSO, and multi-cluster features, then you can install only the core Argo CD components.\n• Default namespace for kubectl config must be set to argocd.\n• You should delete the argocd-initial-admin-secret from the Argo CD namespace once you changed the password.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/getting_started", "title": "Getting Started", "description": "This guide provides a step-by-step process for installing and using Argo CD, including requirements, installation, and application deployment.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:24:48", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/getting_started/", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Getting Started - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "f457b1b6-62f1-496e-83a5-3bd1b1134e84", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/getting_started", "url": "https://argo-cd.readthedocs.io/en/stable/getting_started/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Roadmap\"?\n\nAssistant: The Argo CD roadmap is maintained in a GitHub Project.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe Argo CD roadmap is maintained in a GitHub Project.\n\n## Release Process\nReleases are planned according to the Release Process and Cadence doc.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/roadmap", "title": "Roadmap", "description": "The Argo CD roadmap is maintained in a GitHub Project.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 23:25:00", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/roadmap/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Roadmap - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "scrapeId": "7a731dc0-9ac2-492f-b284-0bcec7b1736f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/roadmap", "url": "https://argo-cd.readthedocs.io/en/stable/roadmap/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Security Considerations\"?\n\nAssistant: This page is now deprecated and serves as an archive only. For up-to-date information, please have a look at our security policy and published security advisories.\n\nHere's a detailed explanation:\n\n\n## Overview of past and current issues\nThe following table gives a general overview about past and present issues known to the Argo CD project. See in the Known Issues section if there is a work-around available if you cannot update or if there is no fix yet.\n\n| Date | CVE | Title | Risk | Affected version(s) | Fix version |\n| --- | --- | --- | --- | --- | --- |\n| 2020-06-16 | [CVE-2020-1747](https://nvd.nist.gov/vuln/detail/CVE-2020-1747) | PyYAML library susceptible to arbitrary code execution | High | all | v1.5.8 |\n| 2020-06-16 | [CVE-2020-14343](https://nvd.nist.gov/vuln/detail/CVE-2020-14343) | PyYAML library susceptible to arbitrary code execution | High | all | v1.5.8 |\n| 2020-04-14 | [CVE-2020-5260](https://nvd.nist.gov/vuln/detail/CVE-2020-5260) | Possible Git credential leak | High | all | v1.4.3,v1.5.2 |\n| 2020-04-08 | [CVE-2020-11576](https://nvd.nist.gov/vuln/detail/CVE-2020-11576) | User Enumeration | Medium | v1.5.0 | v1.5.1 |\n| 2020-04-08 | [CVE-2020-8826](https://nvd.nist.gov/vuln/detail/CVE-2020-8826) | Session-fixation | High | all | n/a |\n| 2020-04-08 | [CVE-2020-8827](https://nvd.nist.gov/vuln/detail/CVE-2020-8827) | Insufficient anti-automation/anti-brute force | High | all <= 1.5.3 | v1.5.3 |\n| 2020-04-08 | [CVE-2020-8828](https://nvd.nist.gov/vuln/detail/CVE-2020-8828) | Insecure default administrative password | High | all <= 1.8.0 | 1.8.0 |\n| 2020-04-08 | [CVE-2018-21034](https://nvd.nist.gov/vuln/detail/CVE-2018-21034) | Sensitive Information Disclosure | Medium | all <= v1.5.0 | v1.5.0 |\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/security_considerations", "title": "Security Considerations", "description": "This page is now deprecated and serves as an archive only. For up-to-date information, please have a look at our security policy and published security advisories.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:25:16", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Security Considerations - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/security_considerations/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "fa367e51-f08e-42f1-bf5a-5cc6d2ae1636", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/security_considerations", "url": "https://argo-cd.readthedocs.io/en/stable/security_considerations/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Security Considerations\"?\n\nAssistant: Here are the recommended best practices:\n\n• Upgrade to ArgoCD v1.5.1 or higher to mitigate user enumeration vulnerability.\n• Use SSO integration to enhance security and disable the default admin user.\n• Change the default admin password after initial configuration to a more secure password.\n• Periodically change passwords to invalidate authentication tokens.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/security_considerations", "title": "Security Considerations", "description": "This page is now deprecated and serves as an archive only. For up-to-date information, please have a look at our security policy and published security advisories.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:25:16", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Security Considerations - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/security_considerations/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "fa367e51-f08e-42f1-bf5a-5cc6d2ae1636", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/security_considerations", "url": "https://argo-cd.readthedocs.io/en/stable/security_considerations/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Try Argo CD Locally\"?\n\nAssistant: This guide provides steps to install Kind for local development and set it up with Argo CD.\n\nHere's a detailed explanation:\n\n\n## Install Kind\nInstall Kind Following Instructions [here](https://kind.sigs.k8s.io/docs/user/quick-start#installation).\n\n## Create a Kind Cluster\nOnce Kind is installed, create a new Kubernetes cluster with:\n\n```\nkind create cluster --name argocd-cluster\n```\n\nThis will create a local Kubernetes cluster named `argocd-cluster`.\n\n## Set Up kubectl to Use the Kind Cluster\nAfter creating the cluster, set `kubectl` to use your new `kind` cluster:\n\n```\nkubectl cluster-info --context kind-argocd-cluster\n```\n\nThis command verifies that `kubectl` is pointed to the right cluster.\n\n## Install ArgoCD on the Cluster\nYou can now install Argo CD on your `kind` cluster. First, apply the Argo CD manifest to create the necessary resources:\n\n```\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/try_argo_cd_locally", "title": "Try Argo CD Locally", "description": "This guide provides steps to install Kind for local development and set it up with Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:25:28", "type": "overview", "page_metadata": {"language": "en", "title": "Try Argo CD Locally - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/try_argo_cd_locally/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "e5e00223-9a7b-4785-8abe-ec65fc94fba6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/try_argo_cd_locally", "url": "https://argo-cd.readthedocs.io/en/stable/try_argo_cd_locally/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Try Argo CD Locally\"?\n\nAssistant: Here are some code examples:\n\n### Create a Kind Cluster\n```yaml\nkind create cluster --name argocd-cluster\n```\n\n### Set Up kubectl to Use the Kind Cluster\n```yaml\nkubectl cluster-info --context kind-argocd-cluster\n```\n\n### Install ArgoCD on the Cluster\n```yaml\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```\n\n### Expose ArgoCD API Server\n```yaml\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n```\n\n### Log in to ArgoCD\n```yaml\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/try_argo_cd_locally", "title": "Try Argo CD Locally", "description": "This guide provides steps to install Kind for local development and set it up with Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:25:28", "type": "code_examples", "page_metadata": {"language": "en", "title": "Try Argo CD Locally - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/try_argo_cd_locally/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "e5e00223-9a7b-4785-8abe-ec65fc94fba6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/try_argo_cd_locally", "url": "https://argo-cd.readthedocs.io/en/stable/try_argo_cd_locally/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Try Argo CD Locally\"?\n\nAssistant: Here are the recommended best practices:\n\n• This guide assumes you have a grounding in the tools that Argo CD is based on. Please read understanding the basics to learn about these tools.\n• For development purposes, you can use Kubectl 'port-forward' to expose the Argo CD API server.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/try_argo_cd_locally", "title": "Try Argo CD Locally", "description": "This guide provides steps to install Kind for local development and set it up with Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:25:28", "type": "best_practices", "page_metadata": {"language": "en", "title": "Try Argo CD Locally - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/try_argo_cd_locally/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "e5e00223-9a7b-4785-8abe-ec65fc94fba6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/try_argo_cd_locally", "url": "https://argo-cd.readthedocs.io/en/stable/try_argo_cd_locally/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Understand The Basics\"?\n\nAssistant: Before effectively using Argo CD, it is necessary to understand the underlying technology that the platform is built on. It is also necessary to understand the features being provided to you and how to use them. The section below provides some useful links to build up this understanding.\n\nHere's a detailed explanation:\n\n\n## Learn The Fundamentals\n- Go through the online Docker and Kubernetes tutorials:\n  - [A Beginner-Friendly Introduction to Containers, VMs and Docker](https://medium.freecodecamp.org/a-beginner-friendly-introduction-to-containers-vms-and-docker-79a9e3e119b)\n  - [Introduction to Kubernetes](https://www.edx.org/course/introduction-to-kubernetes)\n  - [Tutorials](https://kubernetes.io/docs/tutorials/)\n- Depending on how you plan to template your applications:\n  - [Kustomize](https://kustomize.io/)\n  - [Helm](https://helm.sh/)\n- If you're integrating with a CI tool:\n  - [GitHub Actions Documentation](https://docs.github.com/en/actions)\n  - [Jenkins User Guide](https://www.jenkins.io/doc/book/)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/understand_the_basics", "title": "Understand The Basics", "description": "Before effectively using Argo CD, it is necessary to understand the underlying technology that the platform is built on. It is also necessary to understand the features being provided to you and how to use them. The section below provides some useful links to build up this understanding.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 23:25:35", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/understand_the_basics/", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "title": "Understand The Basics - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "d9cc827c-1924-4a5c-9997-379e473a5df7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/understand_the_basics", "url": "https://argo-cd.readthedocs.io/en/stable/understand_the_basics/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Overview\"?\n\nAssistant: This part of the manual is aimed at helping people contribute to Argo CD, the documentation, or to develop third-party applications that interact with Argo CD.\n\nHere's a detailed explanation:\n\n\n## Contributing to Argo CD\n- [Code Contribution Guide](https://argo-cd.readthedocs.io/en/stable/developer-guide/code-contributions/)\n- [Contributors Quickstart](https://argo-cd.readthedocs.io/en/stable/developer-guide/contributors-quickstart/)\n- [Running Argo CD Locally](https://argo-cd.readthedocs.io/en/stable/developer-guide/running-locally/)\n\nNeed help? Start with the [Contributors FAQ](https://argo-cd.readthedocs.io/en/stable/developer-guide/faq/)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide", "title": "Overview", "description": "This part of the manual is aimed at helping people contribute to Argo CD, the documentation, or to develop third-party applications that interact with Argo CD.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:25:39", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/developer-guide/", "readthedocs-http-status": "200", "scrapeId": "510e3b6d-0ff4-46a3-9878-f42b9fd06932", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Overview\"?\n\nAssistant: Here are the recommended best practices:\n\n• Start with the Contributors FAQ for help.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide", "title": "Overview", "description": "This part of the manual is aimed at helping people contribute to Argo CD, the documentation, or to develop third-party applications that interact with Argo CD.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:25:39", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/developer-guide/", "readthedocs-http-status": "200", "scrapeId": "510e3b6d-0ff4-46a3-9878-f42b9fd06932", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"API Docs\"?\n\nAssistant: You can find the Swagger docs by setting the path to `/swagger-ui` in your Argo CD UI.\n\nHere's a detailed explanation:\n\n\n## Authorization\nYou'll need to authorize your API using a bearer token. To get a token:\n\n```\n$ curl $ARGOCD_SERVER/api/v1/session -d $'{\"username\":\"admin\",\"password\":\"password\"}'\n{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1Njc4MTIzODcsImlzcyI6ImFyZ29jZCIsIm5iZiI6MTU2NzgxMjM4Nywic3ViIjoiYWRtaW4ifQ.ejyTgFxLhuY9mOBtKhcnvobg3QZXJ4_RusN_KIdVwao\"}\n```\n\nThen pass using the HTTP `Authorization` header, prefixing with `Bearer`:\n\n```\n$ curl $ARGOCD_SERVER/api/v1/applications -H \"Authorization: Bearer $ARGOCD_TOKEN\"\n{\"metadata\":{\"selfLink\":\"/apis/argoproj.io/v1alpha1/namespaces/argocd/applications\",\"resourceVersion\":\"37755\"},\"items\":...}\n```\n\n## Services\n\n\n## Applications API\n\n\n## How to Avoid 403 Errors for Missing Applications\nAll endpoints of the Applications API accept an optional `project` query string parameter. If the parameter is specified, and the specified Application does not exist, the API will return a `404` error.\n\nAdditionally, if the `project` query string parameter is specified and the Application exists but is not in the given `project`, the API will return a `403` error. This is to prevent leaking information about the existence of Applications to users who do not have access to them.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/api-docs", "title": "API Docs", "description": "You can find the Swagger docs by setting the path to `/swagger-ui` in your Argo CD UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:27:03", "type": "overview", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "API Docs - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/developer-guide/api-docs/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "scrapeId": "958b1bfe-3dc7-41e3-8a7c-69c031e722e2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/api-docs", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/api-docs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"API Docs\"?\n\nAssistant: Here are some code examples:\n\n### Get Bearer Token\n```yaml\n$ curl $ARGOCD_SERVER/api/v1/session -d $'{\"username\":\"admin\",\"password\":\"password\"}'\n{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1Njc4MTIzODcsImlzcyI6ImFyZ29jZCIsIm5iZiI6MTU2NzgxMjM4Nywic3ViIjoiYWRtaW4ifQ.ejyTgFxLhuY9mOBtKhcnvobg3QZXJ4_RusN_KIdVwao\"}\n```\n\n### Use Bearer Token for API Request\n```yaml\n$ curl $ARGOCD_SERVER/api/v1/applications -H \"Authorization: Bearer $ARGOCD_TOKEN\"\n{\"metadata\":{\"selfLink\":\"/apis/argoproj.io/v1alpha1/namespaces/argocd/applications\",\"resourceVersion\":\"37755\"},\"items\":...}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/api-docs", "title": "API Docs", "description": "You can find the Swagger docs by setting the path to `/swagger-ui` in your Argo CD UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:27:03", "type": "code_examples", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "API Docs - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/developer-guide/api-docs/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "scrapeId": "958b1bfe-3dc7-41e3-8a7c-69c031e722e2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/api-docs", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/api-docs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"API Docs\"?\n\nAssistant: Here are the recommended best practices:\n\n• All endpoints of the Applications API accept an optional `project` query string parameter. If the parameter is specified, and the specified Application does not exist, the API will return a `404` error.\n• If the `project` query string parameter is specified and the Application exists but is not in the given `project`, the API will return a `403` error. This is to prevent leaking information about the existence of Applications to users who do not have access to them.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/api-docs", "title": "API Docs", "description": "You can find the Swagger docs by setting the path to `/swagger-ui` in your Argo CD UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:27:03", "type": "best_practices", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "API Docs - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/developer-guide/api-docs/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "scrapeId": "958b1bfe-3dc7-41e3-8a7c-69c031e722e2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/api-docs", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/api-docs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Continuous Integration (CI)\"?\n\nAssistant: This section covers troubleshooting CI checks, updating the builder image, and public CD processes in Argo CD.\n\nHere's a detailed explanation:\n\n\n## Troubleshooting CI checks\nYou can click on the \"Details\" link next to the failed step to get more information about the failure.\n\n![Failed GitHub Action](https://argo-cd.readthedocs.io/en/stable/developer-guide/ci-pipeline-failed.png)\n\nTo read more about The GitHub actions are configured in [`ci-build.yaml`](https://github.com/argoproj/argo-cd/blob/master/.github/workflows/ci-build.yaml).\n\n## Can I retrigger the checks without pushing a new commit?\nSince the CI pipeline is triggered on Git commits, there is currently no (known) way on how to retrigger the CI checks without pushing a new commit to your branch.\n\nIf you are absolutely sure that the failure was due to a failure in the pipeline, and not an error within the changes you committed, you can push an empty commit to your branch, thus retriggering the pipeline without any code changes. To do so, issue\n\n```\ngit commit -s --allow-empty -m \"Retrigger CI pipeline\"\ngit push origin <yourbranch>\n```\n\n## Why does the build step fail?\nFirst, make sure the failing build step succeeds on your machine. Remember the containerized build toolchain is available, too.\n\nIf the build is failing at the `Ensure Go modules synchronicity` step, you need to first download all Go dependent modules locally via `go mod download` and then run `go mod tidy` to make sure the dependent Go modules are tidied up. Finally, commit and push your changes to `go.mod` and `go.sum` to your branch.\n\nIf the build is failing at the `Build & cache Go code`, you need to make sure `make build-local` runs successfully on your local machine.\n\n## Why does the codegen step fail?\nIf the codegen step fails with \"Check nothing has changed...\", chances are high that you did not run `make codegen`, or did not commit the changes it made. You should double-check by running `make codegen` followed by `git status` in the local working copy of your branch. Commit any changes and push them to your GH branch to have the CI check it again.\n\nA second common case for this is, when you modified any of the auto generated assets, as these will be overwritten upon `make codegen`.\n\nGenerally, this step runs `codegen` and compares the outcome against the Git branch it has checked out. If there are differences, the step will fail.\n\nSee [What checked-in code is generated and where does it come from?](https://argo-cd.readthedocs.io/en/stable/developer-guide/faq/#what-checked-in-code-is-generated-and-how-is-it-generated) for more information.\n\n## Why does the lint step fail?\nYour code failed to lint correctly, or modifications were performed by the `golangci-lint` process.\n\n- You should run `make lint`, or `golangci-lint run` on your local branch and fix all the issues.\n\n- If you receive an error like, ``File is not `goimports`-ed (goimports)``, the file is not formatted correctly. Run `gofmt -w $file.go` to resolve this linter error.\n\n## Why does the test or e2e steps fail?\nYou should check for the cause of the failure in the check's detail page as described above. This will give you the name of the test that has failed, and details about why. If your test are passing locally (using the virtualized toolchain), chances are that the test might be flaky and will pass the next time it is run. Please retrigger the CI pipeline as described above and see if the test step now passes.\n\n## Updating The Builder Image\nLogin to Docker Hub:\n\n```\ndocker login\n```\n\nBuild image:\n\n```\nmake builder-image IMAGE_NAMESPACE=argoproj IMAGE_TAG=v1.0.0\n```\n\n## Public CD\nEvery commit to master is built and published to `ghcr.io/argoproj/argo-cd/argocd:<version>-<short-sha>`. The list of images is available at\n[https://github.com/argoproj/argo-cd/packages](https://github.com/argoproj/argo-cd/packages).\n\nNote\n\nGitHub docker registry [requires](https://github.community/t5/GitHub-Actions/docker-pull-from-public-GitHub-Package-Registry-fail-with-quot/m-p/32888#M1294) authentication to read\neven publicly available packages. Follow the steps from Kubernetes [documentation](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry) to configure image pull secret if you want to use `ghcr.io/argoproj/argo-cd/argocd` image.\n\nThe image is automatically deployed to the dev Argo CD instance: [https://cd.apps.argoproj.io/](https://cd.apps.argoproj.io/)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ci", "title": "Continuous Integration (CI)", "description": "This section covers troubleshooting CI checks, updating the builder image, and public CD processes in Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:27:23", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "title": "Continuous Integration (CI) - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/developer-guide/ci/", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "cc07e600-e871-4c5d-bfa0-bee2948fcb0b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ci", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ci/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Continuous Integration (CI)\"?\n\nAssistant: Here are some code examples:\n\n### Retrigger CI pipeline\n```yaml\ngit commit -s --allow-empty -m \"Retrigger CI pipeline\"\ngit push origin <yourbranch>\n```\n\n### Ensure Go modules synchronicity\n```yaml\ngo mod download\ngo mod tidy\n```\n\n### Login to Docker Hub\n```yaml\ndocker login\n```\n\n### Build image\n```yaml\nmake builder-image IMAGE_NAMESPACE=argoproj IMAGE_TAG=v1.0.0\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ci", "title": "Continuous Integration (CI)", "description": "This section covers troubleshooting CI checks, updating the builder image, and public CD processes in Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:27:23", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "title": "Continuous Integration (CI) - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/developer-guide/ci/", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "cc07e600-e871-4c5d-bfa0-bee2948fcb0b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ci", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ci/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Continuous Integration (CI)\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure the failing build step succeeds on your machine.\n• Run `make codegen` and commit any changes it makes.\n• Run `make lint` or `golangci-lint run` to fix lint issues.\n• Check the details of the failed tests for more information.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ci", "title": "Continuous Integration (CI)", "description": "This section covers troubleshooting CI checks, updating the builder image, and public CD processes in Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:27:23", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "title": "Continuous Integration (CI) - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/developer-guide/ci/", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "cc07e600-e871-4c5d-bfa0-bee2948fcb0b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ci", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ci/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Submitting code contributions to Argo CD\"?\n\nAssistant: Guidelines for contributing code to the Argo CD project, including the enhancement process, triage process, and regular contributor meetings.\n\nHere's a detailed explanation:\n\n\n## Preface\nThe Argo CD project continuously grows, both in terms of features and community size. It gets adopted by more and more organisations which entrust Argo CD to handle their critical production workloads. Thus, we need to take great care with any changes that affect compatibility, performance, scalability, stability and security of Argo CD. For this reason, every new feature or larger enhancement must be properly designed and discussed before it gets accepted into the code base.\n\nWe do welcome and encourage everyone to participate in the Argo CD project, but please understand that we can't accept each and every contribution from the community, for various reasons.\n\nIf you want to submit code for a great new feature or enhancement, we kindly ask you to take a look at the enhancement process outlined below before you start to write code or submit a PR. This will ensure that your idea is well aligned with the project's strategy and technical requirements, and it will help greatly in getting your code merged into our code base.\n\nBefore submitting code for a new feature (and also, to some extent, for more complex bug fixes) please raise an Enhancement Proposal or Bug Issue first.\n\n_Please_ do not spend too much time on larger features or refactorings before the corresponding enhancement has been triaged. This may save everyone some amount of frustration and time, as the enhancement proposal might be rejected, and the code would never get merged. However, sometimes it's helpful to have some PoC code along with a proposal.\n\nWe will do our best to triage incoming enhancement proposals quickly, with one of the following outcomes:\n\n- Accepted\n- Rejected\n- Proposal requires a design document to be further discussed\n\nDepending on how many enhancement proposals we receive at given times, it may take some time until we can look at yours.\n\nAlso, please make sure you have read our Toolchain Guide to understand our toolchain and our continuous integration processes. It contains some invaluable information to get started with the complex code base that makes up Argo CD.\n\n## Quick start\nIf you want a quick start contributing to Argo CD, take a look at issues that are labeled with help wanted or good first issue.\n\nThese are issues that were already triaged and accepted.\n\nIf the issue is already attached to next version milestone, we have decided to also dedicate some of our time on reviews to PRs received for these issues.\n\nWe encourage our community to pick up issues that are labeled in this way _and_ are attached to the next version's milestone, with a promise for them to get a proper review with the clear intention for the incoming PRs to get merged.\n\n## Triage process\n### Overview\n\nOur triage process for enhancements proposals ensures that we take a look at all incoming enhancements to determine whether we will accept code submissions to implement them.\n\nThe process works as follows:\n\n- New Enhancement Proposals raised on our GitHub issue tracker are moved to the _Incoming_ column of the project's board. These are the proposals that are in the queue for triage.\n- The _Active_ column holds the issues that are currently being triaged, or will be triaged next.\n- The _Accepted_ column holds the issues that have been triaged and are considered good to be implemented (e.g. the project agreed that the feature would be great to have)\n- The _Declined_ column holds the issues that were rejected during triage. The issue will be updated with information about why the proposal has been rejected.\n- The _Needs discussion_ column holds the issues that were found to require additional information, or even a design document, during triage.\n\n### Triage cadence\n\nTriage of enhancement proposals is performed transparently, offline using issue comments and online in our weekly contributor's meeting. _Everyone_ is invited to participate in triaging, the process is not limited to participation only by maintainers.\n\nUsually, we will triage enhancement proposals in a First-In-First-Out order, which mean that oldest proposals will be triaged first.\n\nWe aim to triage at least 10 proposals a week. Depending on our available time, we may be triaging a higher or lower number of proposals in any given week.\n\n## Proposal states\n### Accepted proposals\n\nWhen a proposal is considered _Accepted_, it was decided that this enhancement would be valuable to the community at large and fits into the overall strategic roadmap of the project.\n\nImplementation of the issue may be started, either by the proposal's creator or another community member (including maintainers of the project).\n\nThe issue should be refined enough by now to contain any concerns and guidelines to be taken into consideration during implementation.\n\n### Declined proposals\n\nWe don't decline proposals lightly, and we will do our best to give a proper reasoning why we think that the proposal does not fit with the future of the project. Reasons for declining proposals may be - amongst others - that the change would be breaking for many, or that it does not meet the strategic direction of the project. Usually, discussion will be facilitated with the enhancement's creator before declining a proposal.\n\nOnce a proposal is in _Declined_ state it's unlikely that we will accept code contributions for its implementation.\n\n### Proposals that need discussion\n\nSometimes, we can't completely understand a proposal from its GitHub issue and require more information on the original intent or on more details about the implementation. If we are confronted with such an issue during the triage, we move this issue to the _Needs discussion_ column to indicate that we expect the issue's creator to supply more information on their idea. We may ask you to provide this information, either by adding that information to the issue itself or by joining one of our regular contributor's meeting to discuss the proposal with us.\n\nAlso, issues that we find to require a more formal design document will be moved to this column.\n\n## Design documents\nFor some enhancement proposals (especially those that will change behavior of Argo CD substantially, are attached with some caveats or where upgrade/downgrade paths are not clear), a more formal design document will be required in order to fully discuss and understand the enhancement in the broader community. This requirement is usually determined during triage. If you submitted an enhancement proposal, we may ask you to provide this more formal write down, along with some concerns or topics that need to be addressed.\n\nDesign documents are usually submitted as PR and use this template as a guide what kind of information we're looking for. Discussion will take place in the review process. When a design document gets merged, we consider it as approved and code can be written and submitted to implement this specific design.\n\n## Regular contributor meeting\nOur community regularly meets virtually to discuss issues, ideas and enhancements around Argo CD. We do invite you to join this virtual meetings if you want to bring up certain things (including your enhancement proposals), participate in our triaging or just want to get to know other contributors.\n\nThe current cadence of our meetings is weekly, every Thursday at 8:15AM Pacific Time ( click here to check in your current timezone). We use Zoom to conduct these meetings.\n\n- Agenda document (Google Docs, includes Zoom link)\n\nIf you want to discuss something, we kindly ask you to put your item on the agenda for one of the upcoming meetings so that we can plan in the time for discussing it.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/code-contributions", "title": "Submitting code contributions to Argo CD", "description": "Guidelines for contributing code to the Argo CD project, including the enhancement process, triage process, and regular contributor meetings.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:28:03", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/developer-guide/code-contributions/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "Code Contribution Guide - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "98250f9f-eb0b-4ef9-b55f-7f882bfb28a8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/code-contributions", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/code-contributions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Submitting code contributions to Argo CD\"?\n\nAssistant: Here are the recommended best practices:\n\n• Before submitting code for a new feature or complex bug fixes, raise an Enhancement Proposal or Bug Issue first.\n• Do not spend too much time on larger features or refactorings before the corresponding enhancement has been triaged.\n• Check the Toolchain Guide to understand the toolchain and continuous integration processes.\n• Pick up issues labeled with 'help wanted' or 'good first issue' for a quick start.\n• Participate in the regular contributor meetings to discuss proposals and enhancements.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/code-contributions", "title": "Submitting code contributions to Argo CD", "description": "Guidelines for contributing code to the Argo CD project, including the enhancement process, triage process, and regular contributor meetings.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:28:03", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/developer-guide/code-contributions/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "Code Contribution Guide - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "98250f9f-eb0b-4ef9-b55f-7f882bfb28a8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/code-contributions", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/code-contributions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Contributing\"?\n\nAssistant: Guidelines for contributing to the Argo CD project.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe contents of this document have been moved to the Toolchain guide.\n\n## Toolchain Guide\nFor detailed information on contributing, please refer to the Toolchain guide.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributing", "title": "Contributing", "description": "Guidelines for contributing to the Argo CD project.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:29:20", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/developer-guide/contributing/", "title": "Contributing - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "67131234-7f6c-4363-97c6-6de594470e8d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributing", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributing/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Contributing\"?\n\nAssistant: Here are the recommended best practices:\n\n• Refer to the Toolchain guide for the most up-to-date contribution guidelines.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributing", "title": "Contributing", "description": "Guidelines for contributing to the Argo CD project.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:29:20", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/developer-guide/contributing/", "title": "Contributing - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "67131234-7f6c-4363-97c6-6de594470e8d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributing", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributing/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Contributors Quick-Start\"?\n\nAssistant: This guide is a starting point for first-time contributors running Argo CD locally for the first time.\n\nHere's a detailed explanation:\n\n\n## Getting Started\nThis section provides an overview of the prerequisites and steps to get started with contributing to Argo CD.\n\n## Prerequisites\nBefore starting, ensure you have the following tools installed with the specified minimum versions:\n\n- Git (v2.0.0+)\n- Go (version specified in `go.mod` - check with `go version`)\n- Docker (v20.10.0+) Or Podman (v3.0.0+)\n- Kind (v0.11.0+) Or Minikube (v1.23.0+)\n- Yarn (v1.22.0+)\n- Goreman (latest version)\n\n## Fork and Clone the Repository\n1. Fork the Argo CD repository to your personal Github Account\n\n2. Clone the forked repository:\n\n```\nmkdir -p $GOPATH/src/github.com/argoproj/\ncd $GOPATH/src/github.com/argoproj/\ngit clone https://github.com/YOUR-USERNAME/argo-cd.git\n```\n\n3. Add the upstream remote for rebasing:\n\n```\ncd argo-cd\ngit remote add upstream https://github.com/argoproj/argo-cd.git\n```\n\n## Install Required Tools\n1. Install development tools:\n\n```\nmake install-go-tools-local\nmake install-code-gen-tools-local\n```\n\n## Install Go\nInstall Go with a version equal to or greater than the version listed in `go.mod` (verify go version with `go version`).\n\n## Install Docker or Podman\n#### Installation guide for docker:\n[https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/)\n\n#### Installation guide for podman:\n[https://podman.io/docs/installation](https://podman.io/docs/installation)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributors-quickstart", "title": "Contributors Quick-Start", "description": "This guide is a starting point for first-time contributors running Argo CD locally for the first time.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:29:42", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/developer-guide/contributors-quickstart/", "title": "Contributors Quick-Start - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b49656ed-5775-48cc-a62a-03f1573a914f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributors-quickstart", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributors-quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Contributors Quick-Start\"?\n\nAssistant: Here are some code examples:\n\n### Clone the repository\n```yaml\nmkdir -p $GOPATH/src/github.com/argoproj/\ncd $GOPATH/src/github.com/argoproj/\ngit clone https://github.com/YOUR-USERNAME/argo-cd.git\n```\n\n### Add upstream remote\n```yaml\ncd argo-cd\ngit remote add upstream https://github.com/argoproj/argo-cd.git\n```\n\n### Install development tools\n```yaml\nmake install-go-tools-local\nmake install-code-gen-tools-local\n```\n\n### Start your local cluster with kind\n```yaml\nkind create cluster\n```\n\n### Start your local cluster with minikube\n```yaml\nminikube start\n```\n\n### Install Argo CD\n```yaml\nkubectl create namespace argocd &&\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/install.yaml\n```\n\n### Set kubectl config\n```yaml\nkubectl config set-context --current --namespace=argocd\n```\n\n### Run Argo CD\n```yaml\ncd argo-cd\nmake start-local ARGOCD_GPG_ENABLED=false\n```\n\n### Run Argo CD with Podman\n```yaml\ncd argo-cd\nDOCKER=podman make start-local ARGOCD_GPG_ENABLED=false\n```\n\n### Get initial admin secret\n```yaml\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d; echo\n```\n\n### Login to Argo CD\n```yaml\ndist/argocd login localhost:8080\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributors-quickstart", "title": "Contributors Quick-Start", "description": "This guide is a starting point for first-time contributors running Argo CD locally for the first time.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:29:42", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/developer-guide/contributors-quickstart/", "title": "Contributors Quick-Start - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b49656ed-5775-48cc-a62a-03f1573a914f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributors-quickstart", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributors-quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Contributors Quick-Start\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure all required tools are installed before starting.\n• Use the correct version of Go as specified in `go.mod`.\n• Set the kubectl context to avoid specifying the namespace in every command.\n• Check logs if the Argo CD UI is not responsive.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributors-quickstart", "title": "Contributors Quick-Start", "description": "This guide is a starting point for first-time contributors running Argo CD locally for the first time.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:29:42", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/developer-guide/contributors-quickstart/", "title": "Contributors Quick-Start - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b49656ed-5775-48cc-a62a-03f1573a914f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributors-quickstart", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/contributors-quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Debugging a Remote ArgoCD Environment\"?\n\nAssistant: In this guide, we will describe how to debug a remote ArgoCD environment with Telepresence.\n\nHere's a detailed explanation:\n\n\n## Install ArgoCD\nFirst of all, install ArgoCD on your cluster\n\n```\nkubectl create ns argocd\ncurl -sSfL https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml | kubectl apply -n argocd -f -\n```\n\n\n## Connect\nConnect to one of the services, for example, to debug the main ArgoCD server run:\n\n```\nkubectl config set-context --current --namespace argocd\ntelepresence helm install --set agent.securityContext={} # Installs telepresence into your cluster\ntelepresence connect # Starts the connection to your cluster (bound to the current namespace)\ntelepresence intercept argocd-server --port 8080:http --env-file .envrc.remote # Starts the interception\n```\n\n\\* `--port` forwards traffic of remote port http to 8080 locally (use `--port 8080:https` if argocd-server terminates TLS)\n\\* `--env-file` writes all the environment variables of the remote pod into a local file, the variables are also set on the subprocess of the `--run` command\n\nWith this, any traffic that hits your argocd-server service in the cluster (e.g. through a LB / ingress) will be forwarded to your laptop on port 8080. So that you can now start argocd-server locally to debug or test new code. If you launch argocd-server using the environment variables in `.envrc.remote`, it is able to fetch all the configmaps, secrets and so on from the cluster and transparently connect to the other microservices so that no further configuration should be necessary, and it behaves exactly the same as in the cluster.\n\nList current status of Telepresence using:\n\n```\ntelepresence status\n```\n\nStop the intercept using:\n\n```\ntelepresence leave argocd-server-argocd\n```\n\nAnd uninstall telepresence from your cluster:\n\n```\ntelepresence helm uninstall\n```\n\nSee [this quickstart](https://www.telepresence.io/docs/latest/quick-start/) for more information on how to intercept services using Telepresence.\n\n## Connect (telepresence v1)\nUse the following command instead:\n\n```\ntelepresence --swap-deployment argocd-server --namespace argocd --env-file .envrc.remote --expose 8080:8080 --expose 8083:8083 --run bash\n```\n\n\\* `--swap-deployment` changes the argocd-server deployment\n\\* `--expose` forwards traffic of remote ports 8080 and 8083 to the same ports locally\n\\* `--env-file` writes all the environment variables of the remote pod into a local file, the variables are also set on the subprocess of the `--run` command\n\\* `--run` defines which command to run once a connection is established, use `bash`, `zsh` or others.\n\n## Debug\nOnce a connection is established, use your favorite tools to start the server locally.\n\n## Terminal\n- Compile `make server`\n- Run `./dist/argocd-server`\n\n## VSCode\nIn VSCode use the following launch configuration to run argocd-server:\n\n```\n        {\n            \"name\": \"Launch argocd-server\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"program\": \"${workspaceFolder}/cmd/main.go\",\n            \"envFile\": [\\\n                \"${workspaceFolder}/.envrc.remote\",\\\n            ],\n            \"env\": {\n                \"ARGOCD_BINARY_NAME\": \"argocd-server\",\n                \"CGO_ENABLED\": \"0\",\n                \"KUBECONFIG\": \"/path/to/kube/config\"\n            }\n        }\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/debugging-remote-environment", "title": "Debugging a Remote ArgoCD Environment", "description": "In this guide, we will describe how to debug a remote ArgoCD environment with Telepresence.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:30:16", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Debugging a Remote ArgoCD Environment - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/developer-guide/debugging-remote-environment/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "67e11047-8b64-43ef-bc0e-9573b424ff8a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/debugging-remote-environment", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/debugging-remote-environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Debugging a Remote ArgoCD Environment\"?\n\nAssistant: Here are some code examples:\n\n### Install ArgoCD\n```yaml\nkubectl create ns argocd\ncurl -sSfL https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml | kubectl apply -n argocd -f -\n```\n\n### Connect to ArgoCD Server\n```yaml\nkubectl config set-context --current --namespace argocd\ntelepresence helm install --set agent.securityContext={} # Installs telepresence into your cluster\ntelepresence connect # Starts the connection to your cluster (bound to the current namespace)\ntelepresence intercept argocd-server --port 8080:http --env-file .envrc.remote # Starts the interception\n```\n\n### List Telepresence Status\n```yaml\ntelepresence status\n```\n\n### Stop Intercept\n```yaml\ntelepresence leave argocd-server-argocd\n```\n\n### Uninstall Telepresence\n```yaml\ntelepresence helm uninstall\n```\n\n### Connect (telepresence v1)\n```yaml\ntelepresence --swap-deployment argocd-server --namespace argocd --env-file .envrc.remote --expose 8080:8080 --expose 8083:8083 --run bash\n```\n\n### Terminal Commands\n```yaml\nmake server\n./dist/argocd-server\n```\n\n### VSCode Launch Configuration\n```yaml\n        {\n            \"name\": \"Launch argocd-server\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"program\": \"${workspaceFolder}/cmd/main.go\",\n            \"envFile\": [\\\n                \"${workspaceFolder}/.envrc.remote\",\\\n            ],\n            \"env\": {\n                \"ARGOCD_BINARY_NAME\": \"argocd-server\",\n                \"CGO_ENABLED\": \"0\",\n                \"KUBECONFIG\": \"/path/to/kube/config\"\n            }\n        }\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/debugging-remote-environment", "title": "Debugging a Remote ArgoCD Environment", "description": "In this guide, we will describe how to debug a remote ArgoCD environment with Telepresence.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:30:16", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Debugging a Remote ArgoCD Environment - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/developer-guide/debugging-remote-environment/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "67e11047-8b64-43ef-bc0e-9573b424ff8a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/debugging-remote-environment", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/debugging-remote-environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Debugging a Remote ArgoCD Environment\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use Telepresence to connect and debug services deployed in a remote environment.\n• Refer to the official Telepresence documentation for more information.\n• Ensure to set the correct namespace when connecting to the ArgoCD server.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/debugging-remote-environment", "title": "Debugging a Remote ArgoCD Environment", "description": "In this guide, we will describe how to debug a remote ArgoCD environment with Telepresence.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:30:16", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Debugging a Remote ArgoCD Environment - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/developer-guide/debugging-remote-environment/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "67e11047-8b64-43ef-bc0e-9573b424ff8a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/debugging-remote-environment", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/debugging-remote-environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Managing Dependencies\"?\n\nAssistant: This page covers how to manage dependencies in Argo CD, including pulling changes from GitOps Engine and Argo UI components.\n\nHere's a detailed explanation:\n\n\n## GitOps Engine (github.com/argoproj/gitops-engine)\n### Repository\nhttps://github.com/argoproj/gitops-engine\n\n### Pulling changes from `gitops-engine`\nAfter your GitOps Engine PR has been merged, ArgoCD needs to be updated to pull in the version of the GitOps engine that contains your change. Here are the steps:\n\n- Retrieve the SHA hash for your commit. You will use this in the next step.\n- From the `argo-cd` folder, run the following command\n\n`go get github.com/argoproj/gitops-engine@<git-commit-sha>`\n\nIf you get an error message `invalid version: unknown revision` then you got the wrong SHA hash\n\n- Run:\n\n`go mod tidy`\n\n- The following files are changed:\n\n- `go.mod`\n\n- `go.sum`\n\n- Create an ArgoCD PR with a `refactor:` type in its title for the two file changes.\n\n## Argo UI Components\n### Repository\nhttps://github.com/argoproj/argo-ui\n\n### Pulling changes from Argo UI into Argo CD\nIf you make changes to the Argo UI component, and your Argo CD changes depend on those changes, follow these steps:\n\n1. Make changes to Argo UI and submit the PR request.\n2. Also, prepare your Argo CD changes, but don't create the PR just yet.\n3. **After** the Argo UI PR has been merged to master, then as part of your Argo CD changes:\n4. Run `yarn add git+https://github.com/argoproj/argo-ui.git` in the `ui/` directory, and then,\n5. Check in the regenerated yarn.lock file as part of your Argo CD commit\n6. Create the Argo CD PR when you are ready. The PR build and test checks should pass.\n\nIf your Argo UI change is a 'stand-alone' fix, and you simply want Argo CD to pull in your change, then simply create an Argo CD PR with the yarn.lock file change.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/dependencies", "title": "Managing Dependencies", "description": "This page covers how to manage dependencies in Argo CD, including pulling changes from GitOps Engine and Argo UI components.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:30:59", "type": "overview", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/developer-guide/dependencies/", "title": "Managing Dependencies - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "scrapeId": "d8fa0d38-2319-49ad-a8a9-47565111b868", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/dependencies", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/dependencies/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Managing Dependencies\"?\n\nAssistant: Here are some code examples:\n\n### Pulling changes from gitops-engine\n```yaml\ngo get github.com/argoproj/gitops-engine@<git-commit-sha>\n```\n\n### Running go mod tidy\n```yaml\ngo mod tidy\n```\n\n### Pulling changes from Argo UI into Argo CD\n```yaml\nyarn add git+https://github.com/argoproj/argo-ui.git\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/dependencies", "title": "Managing Dependencies", "description": "This page covers how to manage dependencies in Argo CD, including pulling changes from GitOps Engine and Argo UI components.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:30:59", "type": "code_examples", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/developer-guide/dependencies/", "title": "Managing Dependencies - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "scrapeId": "d8fa0d38-2319-49ad-a8a9-47565111b868", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/dependencies", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/dependencies/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Managing Dependencies\"?\n\nAssistant: Here are the recommended best practices:\n\n• See https://github.com/argoproj/argo-cd/pull/4434 as an example\n• The PR might require additional, dependent changes in ArgoCD that are directly impacted by the changes made in the engine.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/dependencies", "title": "Managing Dependencies", "description": "This page covers how to manage dependencies in Argo CD, including pulling changes from GitOps Engine and Argo UI components.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:30:59", "type": "best_practices", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/developer-guide/dependencies/", "title": "Managing Dependencies - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "scrapeId": "d8fa0d38-2319-49ad-a8a9-47565111b868", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/dependencies", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/dependencies/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Documentation Site\"?\n\nAssistant: This page covers the development and testing of the documentation site for Argo CD.\n\nHere's a detailed explanation:\n\n\n## Developing And Testing\nThe documentation website is built using `mkdocs` and `mkdocs-material`.\n\nTo test:\n\n```\nmake serve-docs\n```\n\nOnce running, you can view your locally built documentation at [http://0.0.0.0:8000/](http://0.0.0.0:8000/).\nMaking changes to documentation will automatically rebuild and refresh the view.\n\nBefore submitting a PR build the website, to verify that there are no errors building the site\n\n```\nmake build-docs\n```\n\nIf you want to build and test the site directly on your local machine without the use of docker container, follow the below steps:\n\n1. Install the `mkdocs` using the `pip` command\n\n```\npip install mkdocs\n```\n\n2. Install the required dependencies using the below command\n    `bash\n      pip install $(mkdocs get-deps)`\n3. Build the docs site locally from the root\n\n```\nmake build-docs-local\n```\n\n4. Start the docs site locally\n\n```\nmake serve-docs-local\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/docs-site", "title": "Documentation Site", "description": "This page covers the development and testing of the documentation site for Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:31:22", "type": "overview", "page_metadata": {"title": "Documentation Site - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/developer-guide/docs-site/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "b325dceb-5200-4d10-86f0-1b8a5cc1e148", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/docs-site", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/docs-site/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Documentation Site\"?\n\nAssistant: Here are some code examples:\n\n### Serve Docs\n```yaml\nmake serve-docs\n```\n\n### Build Docs\n```yaml\nmake build-docs\n```\n\n### Install mkdocs\n```yaml\npip install mkdocs\n```\n\n### Install Dependencies\n```yaml\npip install $(mkdocs get-deps)\n```\n\n### Build Docs Locally\n```yaml\nmake build-docs-local\n```\n\n### Serve Docs Locally\n```yaml\nmake serve-docs-local\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/docs-site", "title": "Documentation Site", "description": "This page covers the development and testing of the documentation site for Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:31:22", "type": "code_examples", "page_metadata": {"title": "Documentation Site - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/developer-guide/docs-site/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "b325dceb-5200-4d10-86f0-1b8a5cc1e148", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/docs-site", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/docs-site/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Documentation Site\"?\n\nAssistant: Here are the recommended best practices:\n\n• Don't forget to disable your ad-blocker when testing.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/docs-site", "title": "Documentation Site", "description": "This page covers the development and testing of the documentation site for Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:31:22", "type": "best_practices", "page_metadata": {"title": "Documentation Site - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/developer-guide/docs-site/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "b325dceb-5200-4d10-86f0-1b8a5cc1e148", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/docs-site", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/docs-site/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Contribution FAQ\"?\n\nAssistant: Frequently asked questions regarding contributions to the Argo CD project.\n\nHere's a detailed explanation:\n\n\n## General\nThis section covers general questions about contributions.\n\n## Can I discuss my contribution ideas somewhere?\nSure thing! You can either open an Enhancement Proposal in our GitHub issue tracker or you can join us on Slack in channel #argo-contributors to discuss your ideas and get guidance for submitting a PR.\n\nNote\n\nRegular contributor meetings are held weekly. Please follow the link for more details.\n\n## No one has looked at my PR yet. Why?\nAs we have limited resources, it can sometimes take a while for someone to respond to your PR. Especially, when your PR contains complex or non-obvious changes. Please bear with us, we try to look at every PR that we receive. Kindly ensure all applicable requirements have been met in your PR checklist.\n\n## How do I get my PR labeled `ready-for-review` ?\nConventionally an initial review is performed from a Argo member or reviewer. Once the initial review is approved, it can be labeled `ready-for-review` and then added to the Argo CD Review Github project. Details of the project dashboard can be found here.\n\nHigh quality reviews are extremely encouraged from the community. A member/reviewer may work with a community reviewer to get a PR labeled `ready-for-review`. It can then be added to the project dashboard and marked `Community Reviewed`.\n\n## Why has my PR been declined? I put so much work into it!\nWe appreciate that you have put your valuable time and know how into a contribution. Alas, some changes do not fit into the overall ArgoCD philosophy, and therefore can't be merged into the official ArgoCD source tree.\n\nTo be on the safe side, make sure that you have created an Enhancement Proposal for your change before starting to work on your PR and have gathered enough feedback from the community and the maintainers.\n\n## A check on my PR is failing.\nSee Failing CI Checks.\n\n## What checked-in code is generated, and how is it generated?\nThe following files under this repository are generated, and must be kept up-to-date. Also see Why does the codegen step fail?\n\nSee the Makefile for targets that can also run these scripts, and the `codegen` target which runs them all.\n\n| Filename | Purpose | Generated by |\n| --- | --- | --- |\n| `*.pb.go`, `*.pb.gw.go` | Protobuf Interfaces | `hack/generate-proto.sh` |\n| `assets/swagger.json` | Swagger 2 API spec | `hack/update-openapi.sh` |\n| `manifests/` | k8s Installation Manifests | `hack/update-manifests.sh` |\n| `docs/user-guide/commands` | CLI Documentation | `tools/cmd-docs/main.go` |\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/faq", "title": "Contribution FAQ", "description": "Frequently asked questions regarding contributions to the Argo CD project.", "has_code_examples": false, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:31:40", "type": "overview", "page_metadata": {"language": "en", "title": "Contribution FAQ - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/developer-guide/faq/", "readthedocs-http-status": "200", "scrapeId": "4b038955-d4b8-464e-94fd-fa42d27edb4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/faq", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/faq/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Contribution FAQ\"?\n\nAssistant: Here are the recommended best practices:\n\n• Regular contributor meetings are held weekly. Please follow the link for more details.\n• Ensure all applicable requirements have been met in your PR checklist.\n• Make sure that you have created an Enhancement Proposal for your change before starting to work on your PR and have gathered enough feedback from the community and the maintainers.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/faq", "title": "Contribution FAQ", "description": "Frequently asked questions regarding contributions to the Argo CD project.", "has_code_examples": false, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:31:40", "type": "best_practices", "page_metadata": {"language": "en", "title": "Contribution FAQ - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/developer-guide/faq/", "readthedocs-http-status": "200", "scrapeId": "4b038955-d4b8-464e-94fd-fa42d27edb4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/faq", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/faq/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Release Process And Cadence\"?\n\nAssistant: This page outlines the release process and cadence for Argo CD, detailing the schedule for upcoming releases, the release process, and related policies.\n\nHere's a detailed explanation:\n\n\n## Release Cycle\n### Schedule\n\nThese are the upcoming releases dates:\n\n| Release | Release Candidate 1 | General Availability | Release Champion | Release Approver | Checklist |\n| --- | --- | --- | --- | --- | --- |\n| v2.6 | Monday, Dec. 19, 2022 | Monday, Feb. 6, 2023 | [William Tam](https://github.com/wtam2018) | [William Tam](https://github.com/wtam2018) | [checklist](https://github.com/argoproj/argo-cd/issues/11563) |\n| v2.7 | Monday, Mar. 20, 2023 | Monday, May 1, 2023 | [Pavel Kostohrys](https://github.com/pasha-codefresh) | [Pavel Kostohrys](https://github.com/pasha-codefresh) | [checklist](https://github.com/argoproj/argo-cd/issues/12762) |\n| v2.8 | Monday, Jun. 26, 2023 | Monday, Aug. 7, 2023 | [Keith Chong](https://github.com/keithchong) | [Keith Chong](https://github.com/keithchong) | [checklist](https://github.com/argoproj/argo-cd/issues/13742) |\n| v2.9 | Monday, Sep. 18, 2023 | Monday, Nov. 6, 2023 | [Leonardo Almeida](https://github.com/leoluz) | [Leonardo Almeida](https://github.com/leoluz) | [checklist](https://github.com/argoproj/argo-cd/issues/14078) |\n| v2.10 | Monday, Dec. 18, 2023 | Monday, Feb. 5, 2024 | [Katie Lamkin](https://github.com/kmlamkin9) |  | [checklist](https://github.com/argoproj/argo-cd/issues/16339) |\n| v2.11 | Friday, Apr. 5, 2024 | Monday, May 6, 2024 | [Pavel Kostohrys](https://github.com/pasha-codefresh) | [Pavel Kostohrys](https://github.com/pasha-codefresh) | [checklist](https://github.com/argoproj/argo-cd/issues/17726) |\n| v2.12 | Monday, Jun. 17, 2024 | Monday, Aug. 5, 2024 | [Ishita Sequeira](https://github.com/ishitasequeira) | [Pavel Kostohrys](https://github.com/pasha-codefresh) | [checklist](https://github.com/argoproj/argo-cd/issues/19063) |\n| v2.13 | Monday, Sep. 16, 2024 | Monday, Nov. 4, 2024 | [Regina Voloshin](https://github.com/reggie-k) | [Pavel Kostohrys](https://github.com/pasha-codefresh) | [checklist](https://github.com/argoproj/argo-cd/issues/19513) |\n| v2.14 | Monday, Dec. 16, 2024 | Monday, Feb. 3, 2025 | [Ryan Umstead](https://github.com/rumstead) | [Pavel Kostohrys](https://github.com/pasha-codefresh) | [checklist](https://github.com/argoproj/argo-cd/issues/20869) |\n| v2.15 | Monday, Mar. 17, 2025 | Monday, May 5, 2025 |  |  |  |\n\nActual release dates might differ from the plan by a few days.\n\n## Release Process\n#### Minor Releases (e.g. 2.x.0)\n\nA minor Argo CD release occurs four times a year, once every three months. Each General Availability (GA) release is preceded by several Release Candidates (RCs). The first RC is released seven weeks before the scheduled GA date. This effectively means that there is a seven-week feature freeze.\n\nThese are the approximate release dates:\n\n- The first Monday of February\n- The first Monday of May\n- The first Monday of August\n- The first Monday of November\n\nDates may be shifted slightly to accommodate holidays. Those shifts should be minimal.\n\n#### Patch Releases (e.g. 2.5.x)\n\nArgo CD patch releases occur on an as-needed basis. Only the three most recent minor versions are eligible for patch releases. Versions older than the three most recent minor versions are considered EOL and will not receive bug fixes or security updates.\n\n#### Release Champion\n\nTo help manage all the steps involved in a release, we will have a Release Champion. The Release Champion will be responsible for a checklist of items for their release. The checklist is an issue template in the Argo CD repository.\n\nThe Release Champion can be anyone in the Argo CD community. Some tasks (like cherry-picking bug fixes and cutting releases) require [Approver](https://github.com/argoproj/argoproj/blob/master/community/membership.md#community-membership) membership. The Release Champion can delegate tasks when necessary and will be responsible for coordinating with the Approver.\n\n## Feature Acceptance Criteria\nTo be eligible for inclusion in a minor release, a new feature must meet the following criteria before the release’s RC date.\n\nIf it is a large feature that involves significant design decisions, that feature must be described in a Proposal, and that Proposal must be reviewed and merged.\n\nThe feature PR must include:\n\n- Tests (passing)\n- Documentation\n- If necessary, a note in the Upgrading docs for the planned minor release\n- The PR must be reviewed, approved, and merged by an Approver.\n\nIf these criteria are not met by the RC date, the feature will be ineligible for inclusion in the RC series or GA for that minor release. It will have to wait for the next minor release.\n\n## Security Patch Policy\nCVEs in Argo CD code will be patched for all supported versions. Read more about supported versions in the [security policy for Argo CD](https://github.com/argoproj/argo-cd/security/policy#supported-versions).\n\n## Dependencies Lifecycle Policy\nDependencies are evaluated before being introduced to ensure they:\n\n1) are actively maintained\n2) are maintained by trustworthy maintainers\n\nThese evaluations vary from dependency to dependencies.\n\nDependencies are also scheduled for removal if the project has been deprecated or if the project is no longer maintained.\n\nCVEs in dependencies will be patched for all supported versions if the CVE is applicable and is assessed by Snyk to be of high or critical severity. Automation generates a [new Snyk scan weekly](https://argo-cd.readthedocs.io/en/stable/developer-guide/snyk).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/release-process-and-cadence", "title": "Release Process And Cadence", "description": "This page outlines the release process and cadence for Argo CD, detailing the schedule for upcoming releases, the release process, and related policies.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:32:03", "type": "overview", "page_metadata": {"title": "Release Process And Cadence - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/developer-guide/release-process-and-cadence/", "readthedocs-project-slug": "argo-cd", "scrapeId": "48c1a548-fba7-4732-8a90-642b8676fb18", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/release-process-and-cadence", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/release-process-and-cadence/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Release Process And Cadence\"?\n\nAssistant: Here are the recommended best practices:\n\n• Actual release dates might differ from the plan by a few days.\n• Dates may be shifted slightly to accommodate holidays. Those shifts should be minimal.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/release-process-and-cadence", "title": "Release Process And Cadence", "description": "This page outlines the release process and cadence for Argo CD, detailing the schedule for upcoming releases, the release process, and related policies.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:32:03", "type": "best_practices", "page_metadata": {"title": "Release Process And Cadence - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/developer-guide/release-process-and-cadence/", "readthedocs-project-slug": "argo-cd", "scrapeId": "48c1a548-fba7-4732-8a90-642b8676fb18", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/release-process-and-cadence", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/release-process-and-cadence/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Releasing\"?\n\nAssistant: Argo CD is released in a 2 step automated fashion using GitHub actions. The release process takes about 60 minutes, sometimes a little less, depending on the performance of GitHub Actions runners.\n\nHere's a detailed explanation:\n\n\n## Introduction\nArgo CD is released in a 2 step automated fashion using GitHub actions. The release process takes about 60 minutes, sometimes a little less, depending on the performance of GitHub Actions runners.\n\nThe target release branch must already exist in the GitHub repository. If you for example want to create a release `v2.7.0`, the corresponding release branch `release-2.7` needs to exist, otherwise, the release cannot be built. Also, the trigger tag should always be created in the release branch, checked out in your local repository clone.\n\nBefore triggering the release automation, the `CHANGELOG.md` should be updated with the latest information, and this change should be committed and pushed to the GitHub repository to the release branch. Afterward, the automation can be triggered. This will be automated in the very near future.\n\n**Manual steps before release creation:**\n\n- Update `CHANGELOG.md` with changes for this release\n- Commit & push changes to `CHANGELOG.md`\n\n**The `Init ARGOCD Release` workflow will perform the following steps:**\n\n- Update `VERSION` file in the release branch\n- Update manifests with image tags of the new version in the release branch\n- Create a pull request to submit the above changes\n\n**The `Publish ArgoCD Release` workflow will perform the following steps:**\n\n- Build, push, and signs the container image to Quay.io\n- Generate a provenance for the container image\n- Builds the CLI binaries, release-notes, and then creates a GitHub release and attaches the required assets.\n- Generate a provenance for the CLI binaries\n- Generate and sign a sbom\n- Update the stable tag when applicable\n- Update `VERSION` file in the master branch when a new release is GA\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/releasing", "title": "Releasing", "description": "Argo CD is released in a 2 step automated fashion using GitHub actions. The release process takes about 60 minutes, sometimes a little less, depending on the performance of GitHub Actions runners.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:32:28", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Releasing - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/developer-guide/releasing/", "scrapeId": "1a673984-1ec0-45c3-a2db-675f461a8966", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/releasing", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/releasing/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Releasing\"?\n\nAssistant: Here are some code examples:\n\n### Trigger Release Script\n```yaml\n./hack/trigger-release.sh <version> <remote name>\n\nExample:\n\n./hack/trigger-release.sh v2.7.2 upstream\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/releasing", "title": "Releasing", "description": "Argo CD is released in a 2 step automated fashion using GitHub actions. The release process takes about 60 minutes, sometimes a little less, depending on the performance of GitHub Actions runners.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:32:28", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Releasing - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/developer-guide/releasing/", "scrapeId": "1a673984-1ec0-45c3-a2db-675f461a8966", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/releasing", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/releasing/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Releasing\"?\n\nAssistant: Here are the recommended best practices:\n\n• The tag must be in one of the following formats to trigger the GH workflow: GA: `v<MAJOR>.<MINOR>.<PATCH>` or Pre-release: `v<MAJOR>.<MINOR>.<PATCH>-rc<RC#>`\n• You cannot perform more than one release on the same release branch at the same time.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/releasing", "title": "Releasing", "description": "Argo CD is released in a 2 step automated fashion using GitHub actions. The release process takes about 60 minutes, sometimes a little less, depending on the performance of GitHub Actions runners.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:32:28", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Releasing - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/developer-guide/releasing/", "scrapeId": "1a673984-1ec0-45c3-a2db-675f461a8966", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/releasing", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/releasing/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Running Argo CD locally\"?\n\nAssistant: This page provides instructions on how to run Argo CD outside of a Kubernetes cluster for development purposes, including installation, scaling, and configuration steps.\n\nHere's a detailed explanation:\n\n\n## Run Argo CD outside of Kubernetes\nDuring development, it might be viable to run Argo CD outside a Kubernetes cluster. This will greatly speed up development, as you don't have to constantly build, push and install new Argo CD Docker images with your latest changes.\n\nYou will still need a working Kubernetes cluster, as described in the Toolchain Guide, where Argo CD will store all of its resources and configuration.\n\nIf you followed the Toolchain Guide in setting up your toolchain, you can run Argo CD locally with these simple steps.\n\n## Install Argo CD resources to your cluster\nFirst push the installation manifest into argocd namespace:\n\n```\nkubectl create namespace argocd\nkubectl apply -n argocd --force -f manifests/install.yaml\n```\n\n## Scale down any Argo CD instance in your cluster\nMake sure that Argo CD is not running in your development cluster by scaling down the deployments:\n\n```\nkubectl -n argocd scale statefulset/argocd-application-controller --replicas 0\nkubectl -n argocd scale deployment/argocd-dex-server --replicas 0\nkubectl -n argocd scale deployment/argocd-repo-server --replicas 0\nkubectl -n argocd scale deployment/argocd-server --replicas 0\nkubectl -n argocd scale deployment/argocd-redis --replicas 0\nkubectl -n argocd scale deployment/argocd-applicationset-controller --replicas 0\nkubectl -n argocd scale deployment/argocd-notifications-controller --replicas 0\n```\n\n## Start local services (virtualized toolchain inside Docker)\nThe started services assume you are running in the namespace where Argo CD is installed. You can set the current context default namespace as follows:\n\n```\nkubectl config set-context --current --namespace=argocd\n```\n\nWhen you use the virtualized toolchain, starting local services is as simple as running\n\n```\nmake start\n```\n\nThis will start all Argo CD services and the UI in a Docker container and expose the following ports to your host:\n\n- The Argo CD API server on port 8080\n- The Argo CD UI server on port 4000\n- The Helm registry server on port 5000\n\nYou may get an error listening on port 5000 on macOS:\n\n```\ndocker: Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:5000 -> 0.0.0.0:0: listen tcp 0.0.0.0:5000: bind: address already in use.\n```\n\nIn that case, you can disable \"AirPlay Receiver\" in macOS System Preferences.\n\nYou can now use either the web UI by pointing your browser to `http://localhost:4000` or use the CLI against the API at `http://localhost:8080`. Be sure to use the `--insecure` and `--plaintext` options to the CLI. Webpack will take a while to bundle resources initially, so the first page load can take several seconds or minutes.\n\nAs an alternative to using the above command line parameters each time you call `argocd` CLI, you can set the following environment variables:\n\n```\nexport ARGOCD_SERVER=127.0.0.1:8080\nexport ARGOCD_OPTS=\"--plaintext --insecure\"\n```\n\n## Start local services (running on local machine)\nThe `make start` command of the virtualized toolchain runs the build and programs inside a Docker container using the test tools image. That makes everything repeatable, but can slow down the development workflow. Particularly on macOS where Docker and the Linux kernel run inside a VM, you may want to try developing fully locally.\n\nDocker should be installed already. Assuming you manage installed software using Homebrew, you can install other prerequisites like this:\n\n```\n# goreman is used to start all needed processes to get a working Argo CD development\n# environment (defined in `Procfile`)\nbrew install goreman\n\n# You can use `kind` to run Kubernetes inside Docker. But pointing to any other\n# development cluster works fine as well as long as Argo CD can reach it.\nbrew install kind\n```\n\nTo set up Kubernetes, you can use kind:\n\n```\nkind create cluster --kubeconfig ~/.kube/config-kind\n\n# The started services assume you are running in the namespace where Argo CD is\n# installed. Set the current context default namespace.\nexport KUBECONFIG=~/.kube/config-kind\nkubectl config set-context --current --namespace=argocd\n```\n\nFollow the above sections \"Install Argo CD resources to your cluster\" and \"Scale down any Argo CD instance in your cluster\" to deploy all needed manifests such as config maps.\n\nStart local services:\n\n```\n# Ensure you point to the correct Kubernetes cluster as shown above. For example:\nexport KUBECONFIG=~/.kube/config-kind\n\nmake start-local\n```\n\nThis will start all Argo CD services and the UI in a Docker container and expose the following ports to your host:\n\n- The Argo CD API server on port 8080\n- The Argo CD UI server on port 4000\n- The Helm registry server on port 5000\n\nIf you get firewall dialogs, for example on macOS, you can click \"Deny\", since no access from outside your computer is typically desired.\n\nCheck that all programs have started:\n\n```\n$ goreman run status\n*controller\n*api-server\n[...]\n```\n\nIf not all critical processes run (marked with `*`), check logs to see why they terminated.\n\nIn case of an error like `gpg: key generation failed: Unknown elliptic curve` (a gnupg bug), disable GPG verification before running `make start-local`:\n\n```\nexport ARGOCD_GPG_ENABLED=false\n```\n\nYou may get an error listening on port 5000 on macOS:\n\n```\ndocker: Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:5000 -> 0.0.0.0:0: listen tcp 0.0.0.0:5000: bind: address already in use.\n```\n\nIn that case, you can disable \"AirPlay Receiver\" in macOS System Preferences.\n\nYou can now use either the web UI by pointing your browser to `http://localhost:4000` or use the CLI against the API at `http://localhost:8080`. Be sure to use the `--insecure` and `--plaintext` options to the CLI. Webpack will take a while to bundle resources initially, so the first page load can take several seconds or minutes.\n\nAs an alternative to using the above command line parameters each time you call `argocd` CLI, you can set the following environment variables:\n\n```\nexport ARGOCD_SERVER=127.0.0.1:8080\nexport ARGOCD_OPTS=\"--plaintext --insecure\"\n```\n\nAfter making a code change, ensure to rebuild and restart the respective service:\n\n```\n# Example for working on the repo server Go code, see other service names in `Procfile`\ngoreman run restart repo-server\n```\n\nClean up when you're done:\n\n```\nkind delete cluster; rm -f ~/.kube/config-kind\n```\n\n## Scale up Argo CD in your cluster\nOnce you have finished testing your changes locally and want to bring back Argo CD in your development cluster, simply scale the deployments up again:\n\n```\nkubectl -n argocd scale statefulset/argocd-application-controller --replicas 1\nkubectl -n argocd scale deployment/argocd-dex-server --replicas 1\nkubectl -n argocd scale deployment/argocd-repo-server --replicas 1\nkubectl -n argocd scale deployment/argocd-server --replicas 1\nkubectl -n argocd scale deployment/argocd-redis --replicas 1\n```\n\n## Run your own Argo CD images on your cluster\nFor your final tests, it might be necessary to build your own images and run them in your development cluster.\n\n## Create Docker account and login\nYou might need to create an account on Docker Hub if you don't have one already. Once you created your account, login from your development environment:\n\n```\ndocker login\n```\n\n## Create and push Docker images\nYou will need to push the built images to your own Docker namespace:\n\n```\nexport IMAGE_NAMESPACE=youraccount\n```\n\nIf you don't set `IMAGE_TAG` in your environment, the default of `:latest` will be used. To change the tag, export the variable in the environment:\n\n```\nexport IMAGE_TAG=1.5.0-myrc\n```\n\nThen you can build & push the image in one step:\n\n```\nDOCKER_PUSH=true make image\n```\n\n## Configure manifests for your image\nWith `IMAGE_NAMESPACE` and `IMAGE_TAG` still set, run:\n\n```\nmake manifests\n```\n\nto build a new set of installation manifests which include your specific image reference.\n\nNote\n\nDo not commit these manifests to your repository. If you want to revert the changes, the easiest way is to unset `IMAGE_NAMESPACE` and `IMAGE_TAG` from your environment and run `make manifests` again. This will re-create the default manifests.\n\n## Configure your cluster with custom manifests\nThe final step is to push the manifests to your cluster, so it will pull and run your image:\n\n```\nkubectl apply -n argocd --force -f manifests/install.yaml\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/running-locally", "title": "Running Argo CD locally", "description": "This page provides instructions on how to run Argo CD outside of a Kubernetes cluster for development purposes, including installation, scaling, and configuration steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:33:09", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/developer-guide/running-locally/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "title": "Running Argo CD locally - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "9012d3ae-1aa1-4760-8352-e1b15f13fd7d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/running-locally", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/running-locally/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Running Argo CD locally\"?\n\nAssistant: Here are some code examples:\n\n### Install Argo CD resources to your cluster\n```yaml\nkubectl create namespace argocd\nkubectl apply -n argocd --force -f manifests/install.yaml\n```\n\n### Scale down any Argo CD instance in your cluster\n```yaml\nkubectl -n argocd scale statefulset/argocd-application-controller --replicas 0\nkubectl -n argocd scale deployment/argocd-dex-server --replicas 0\nkubectl -n argocd scale deployment/argocd-repo-server --replicas 0\nkubectl -n argocd scale deployment/argocd-server --replicas 0\nkubectl -n argocd scale deployment/argocd-redis --replicas 0\nkubectl -n argocd scale deployment/argocd-applicationset-controller --replicas 0\nkubectl -n argocd scale deployment/argocd-notifications-controller --replicas 0\n```\n\n### Start local services (virtualized toolchain inside Docker)\n```yaml\nkubectl config set-context --current --namespace=argocd\nmake start\n```\n\n### Start local services (running on local machine)\n```yaml\nkind create cluster --kubeconfig ~/.kube/config-kind\nexport KUBECONFIG=~/.kube/config-kind\nkubectl config set-context --current --namespace=argocd\nmake start-local\n```\n\n### Scale up Argo CD in your cluster\n```yaml\nkubectl -n argocd scale statefulset/argocd-application-controller --replicas 1\nkubectl -n argocd scale deployment/argocd-dex-server --replicas 1\nkubectl -n argocd scale deployment/argocd-repo-server --replicas 1\nkubectl -n argocd scale deployment/argocd-server --replicas 1\nkubectl -n argocd scale deployment/argocd-redis --replicas 1\n```\n\n### Create Docker account and login\n```yaml\ndocker login\n```\n\n### Create and push Docker images\n```yaml\nexport IMAGE_NAMESPACE=youraccount\nexport IMAGE_TAG=1.5.0-myrc\nDOCKER_PUSH=true make image\n```\n\n### Configure manifests for your image\n```yaml\nmake manifests\n```\n\n### Configure your cluster with custom manifests\n```yaml\nkubectl apply -n argocd --force -f manifests/install.yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/running-locally", "title": "Running Argo CD locally", "description": "This page provides instructions on how to run Argo CD outside of a Kubernetes cluster for development purposes, including installation, scaling, and configuration steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:33:09", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/developer-guide/running-locally/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "title": "Running Argo CD locally - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "9012d3ae-1aa1-4760-8352-e1b15f13fd7d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/running-locally", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/running-locally/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Running Argo CD locally\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you get an error listening on port 5000 on macOS, disable \"AirPlay Receiver\" in macOS System Preferences.\n• If you encounter a GPG error, disable GPG verification before running `make start-local` by setting `export ARGOCD_GPG_ENABLED=false`.\n• Do not commit custom manifests to your repository; unset `IMAGE_NAMESPACE` and `IMAGE_TAG` to revert changes.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/running-locally", "title": "Running Argo CD locally", "description": "This page provides instructions on how to run Argo CD outside of a Kubernetes cluster for development purposes, including installation, scaling, and configuration steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:33:09", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/developer-guide/running-locally/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "title": "Running Argo CD locally - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "9012d3ae-1aa1-4760-8352-e1b15f13fd7d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/running-locally", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/running-locally/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Static Code Analysis\"?\n\nAssistant: Overview of the static code analysis tools used in the Argo CD project.\n\nHere's a detailed explanation:\n\n\n## Static Code Analysis Tools\nWe use the following static code analysis tools:\n\n- golangci-lint and eslint for compile time linting\n- codecov.io - for code coverage\n- snyk.io - for image scanning\n- sonarcloud.io - for code scans and security alerts\n\nThese are at least run daily or on each pull request.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/static-code-analysis", "title": "Static Code Analysis", "description": "Overview of the static code analysis tools used in the Argo CD project.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 23:33:20", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/developer-guide/static-code-analysis/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Static Code Analysis - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "1a9b7f87-d114-4d9b-b3eb-cf5310cbb42e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/static-code-analysis", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/static-code-analysis/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"E2E Tests\"?\n\nAssistant: This page covers the end-to-end (E2E) tests for Argo CD, including how to run them locally, configure their execution, and troubleshoot common issues.\n\nHere's a detailed explanation:\n\n\n## Running Tests Locally\n1. Start the e2e version `make start-e2e`  \n2. Run the tests: `make test-e2e`  \n\nYou can observe the tests by using the UI [http://localhost:8080/applications](http://localhost:8080/applications) with username `\"admin\"` and password `\"password\"`.\n\n## Configuration of E2E Tests execution\nThe Makefile's `start-e2e` target starts instances of ArgoCD on your local machine, of which the most will require a network listener. If, for any reason, your machine already has network services listening on the same ports, then the e2e tests will not run. You can derive from the defaults by setting the following environment variables before you run `make start-e2e`:\n\n- `ARGOCD_E2E_APISERVER_PORT`: Listener port for `argocd-server` (default: `8080`)\n- `ARGOCD_E2E_REPOSERVER_PORT`: Listener port for `argocd-reposerver` (default: `8081`)\n- `ARGOCD_E2E_DEX_PORT`: Listener port for `dex` (default: `5556`)\n- `ARGOCD_E2E_REDIS_PORT`: Listener port for `redis` (default: `6379`)\n- `ARGOCD_E2E_YARN_CMD`: Command to use for starting the UI via Yarn (default: `yarn`)\n\nIf you have changed the port for `argocd-server`, be sure to also set `ARGOCD_SERVER` environment variable to point to that port, e.g. `export ARGOCD_SERVER=localhost:8888` before running `make test-e2e` so that the test will communicate to the correct server component.\n\n## Test Isolation\nSome effort has been made to balance test isolation with speed. Tests are isolated as follows as each test gets:\n\n- A random 5 character ID.\n- A unique Git repository containing the `testdata` in `/tmp/argocd-e2e/${id}`.\n- A namespace `argocd-e2e-ns-${id}`.\n- A primary name for the app `argocd-e2e-${id}`.\n\n## Troubleshooting\n**Tests fails to delete `argocd-e2e-ns-*` namespaces.**  \nThis maybe due to the metrics server, run this:\n\n```\nkubectl api-resources\n```\n\nIf it exits with status code 1, run:\n\n```\nkubectl delete apiservice v1beta1.metrics.k8s.io\n```\n\nRemove `/spec/finalizers` from the namespace\n\n```\nkubectl edit ns argocd-e2e-ns-*\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/test-e2e", "title": "E2E Tests", "description": "This page covers the end-to-end (E2E) tests for Argo CD, including how to run them locally, configure their execution, and troubleshoot common issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:33:45", "type": "overview", "page_metadata": {"title": "E2E Tests - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/developer-guide/test-e2e/", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "80c944a9-f4c1-42a1-aca3-8643dba4e48e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/test-e2e", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/test-e2e/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"E2E Tests\"?\n\nAssistant: Here are some code examples:\n\n### Start E2E Tests\n```yaml\nmake start-e2e\n```\n\n### Run E2E Tests\n```yaml\nmake test-e2e\n```\n\n### Check API Resources\n```yaml\nkubectl api-resources\n```\n\n### Delete API Service\n```yaml\nkubectl delete apiservice v1beta1.metrics.k8s.io\n```\n\n### Edit Namespace Finalizers\n```yaml\nkubectl edit ns argocd-e2e-ns-*\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/test-e2e", "title": "E2E Tests", "description": "This page covers the end-to-end (E2E) tests for Argo CD, including how to run them locally, configure their execution, and troubleshoot common issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:33:45", "type": "code_examples", "page_metadata": {"title": "E2E Tests - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/developer-guide/test-e2e/", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "80c944a9-f4c1-42a1-aca3-8643dba4e48e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/test-e2e", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/test-e2e/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"E2E Tests\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that no other services are using the same ports as specified in the environment variables before running tests.\n• Set the `ARGOCD_SERVER` environment variable if you change the port for `argocd-server` to ensure proper communication during tests.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/test-e2e", "title": "E2E Tests", "description": "This page covers the end-to-end (E2E) tests for Argo CD, including how to run them locally, configure their execution, and troubleshoot common issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:33:45", "type": "best_practices", "page_metadata": {"title": "E2E Tests - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/developer-guide/test-e2e/", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "80c944a9-f4c1-42a1-aca3-8643dba4e48e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/test-e2e", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/test-e2e/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Development toolchain\"?\n\nAssistant: This guide helps you in setting up your build & test environment for developing and testing Argo CD, including prerequisites, submitting PRs, and using local or virtualized toolchains.\n\nHere's a detailed explanation:\n\n\n## Preface\nBefore you start\n\nThe Argo CD project continuously grows, both in terms of features and community size. It gets adopted by more and more organisations which entrust Argo CD to handle their critical production workloads. Thus, we need to take great care with any changes that affect compatibility, performance, scalability, stability and security of Argo CD. For this reason, every new feature or larger enhancement must be properly designed and discussed before it gets accepted into the code base.\n\nWe do welcome and encourage everyone to participate in the Argo CD project, but please understand that we can't accept each and every contribution from the community, for various reasons. If you want to submit code for a great new feature or enhancement, we kindly ask you to take a look at the code contribution guide before you start to write code or submit a PR.\n\nWe want to make contributing to Argo CD as simple and smooth as possible.\n\nThis guide shall help you in setting up your build & test environment, so that you can start developing and testing bug fixes and feature enhancements without having to make too much effort in setting up a local toolchain.\n\nIf you want to submit a PR, please read this document carefully, as it contains important information guiding you through our PR quality gates.\n\nAs is the case with the development process, this document is under constant change. If you notice any error, or if you think this document is out-of-date, or if you think it is missing something: Feel free to submit a PR or submit a bug to our GitHub issue tracker.\n\nIf you need guidance with submitting a PR, or have any other questions regarding development of Argo CD, do not hesitate to join our Slack and get in touch with us in the `#argo-contributors` channel!\n\n## Before you start\nYou will need at least the following things in your toolchain in order to develop and test Argo CD locally:\n\n- A Kubernetes cluster. You won't need a fully blown multi-master, multi-node cluster, but you will need something like K3S, Minikube or microk8s. You will also need a working Kubernetes client ( `kubectl`) configuration in your development environment. The configuration must reside in `~/.kube/config` and the API server URL must point to the IP address of your local machine (or VM), and **not** to `localhost` or `127.0.0.1` if you are using the virtualized development toolchain (see below)\n\n- You will also need a working Docker runtime environment, to be able to build and run images. The Docker version must be 17.05.0 or higher, to support multi-stage builds.\n\n- Obviously, you will need a `git` client for pulling source code and pushing back your changes.\n\n- Last but not least, you will need a Go SDK and related tools (such as GNU `make`) installed and working on your development environment. The minimum required Go version for building and testing Argo CD is **v1.17**.\n\n- We will assume that your Go workspace is at `~/go`.\n\nNote\n\n**Attention minikube users**: By default, minikube will create Kubernetes client configuration that uses authentication data from files. This is incompatible with the virtualized toolchain. So if you intend to use the virtualized toolchain, you have to embed this authentication data into the client configuration. To do so, start minikube using `minikube start --embed-certs`. Please also note that minikube using the Docker driver is currently not supported with the virtualized toolchain, because the Docker driver exposes the API server on 127.0.0.1 hard-coded. If in doubt, run `make verify-kube-connect` to find out.\n\n## Submitting PRs\n### Continuous Integration process\n\nWhen you submit a PR against Argo CD's GitHub repository, a couple of CI checks will be run automatically to ensure your changes will build fine and meet certain quality standards. Your contribution needs to pass those checks in order to be merged into the repository.\n\nNote\n\nPlease make sure that you always create PRs from a branch that is up-to-date with the latest changes from Argo CD's master branch. Depending on how long it takes for the maintainers to review and merge your PR, it might be necessary to pull in latest changes into your branch again.\n\nPlease understand that we, as an Open Source project, have limited capacities for reviewing and merging PRs to Argo CD. We will do our best to review your PR and give you feedback as soon as possible, but please bear with us if it takes a little longer as expected.\n\nThe following read will help you to submit a PR that meets the standards of our CI tests:\n\n### Title of the PR\n\nPlease use a meaningful and concise title for your PR. This will help us to pick PRs for review quickly, and the PR title will also end up in the Changelog.\n\nWe use [PR title checker](https://github.com/marketplace/actions/pr-title-checker) to categorize your PR into one of the following categories:\n\n- `fix` \\- Your PR contains one or more code bug fixes\n- `feat` \\- Your PR contains a new feature\n- `docs` \\- Your PR improves the documentation\n- `chore` \\- Your PR improves any internals of Argo CD, such as the build process, unit tests, etc\n\nPlease prefix the title of your PR with one of the valid categories. For example, if you chose the title your PR `Add documentation for GitHub SSO integration`, please use `docs: Add documentation for GitHub SSO integration` instead.\n\n### PR template checklist\n\nUpon opening a PR, the details will contain a checklist from a template. Please read the checklist, and tick those marks that apply to you.\n\n### Automated builds & tests\n\nAfter you have submitted your PR, and whenever you push new commits to that branch, GitHub will run a number of Continuous Integration checks against your code. It will execute the following actions, and each of them has to pass:\n\n- Build the Go code ( `make build`)\n- Generate API glue code and manifests ( `make codegen`)\n- Run a Go linter on the code ( `make lint`)\n- Run the unit tests ( `make test`)\n- Run the End-to-End tests ( `make test-e2e`)\n- Build and lint the UI code ( `make lint-ui`)\n- Build the `argocd` CLI ( `make cli`)\n\nIf any of these tests in the CI pipeline fail, it means that some of your contribution is considered faulty (or a test might be flaky, see below).\n\n### Code test coverage\n\nWe use [CodeCov](https://codecov.io/) in our CI pipeline to check for test coverage, and once you submit your PR, it will run and report on the coverage difference as a comment within your PR. If the difference is too high in the negative, i.e. your submission introduced a significant drop in code coverage, the CI check will fail.\n\nWhenever you develop a new feature or submit a bug fix, please also write appropriate unit tests for it. If you write a completely new module, please aim for at least 80% of coverage.\nIf you want to see how much coverage just a specific module (i.e. your new one) has, you can set the `TEST_MODULE` to the (fully qualified) name of that module with `make test`, i.e.: \n\n```\n make test TEST_MODULE=github.com/argoproj/argo-cd/server/cache\n...\nok      github.com/argoproj/argo-cd/server/cache        0.029s  coverage: 89.3% of statements\n\n```\n\n## Local vs Virtualized toolchain\nArgo CD provides a fully virtualized development and testing toolchain using Docker images. It is recommended to use those images, as they provide the same runtime environment as the final product and it is much easier to keep up-to-date with changes to the toolchain and dependencies. But as using Docker comes with a slight performance penalty, you might want to setup a local toolchain.\n\nMost relevant targets for the build & test cycles in the `Makefile` provide two variants, one of them suffixed with `-local`. For example, `make test` will run unit tests in the Docker container, `make test-local` will run it natively on your local system.\n\nIf you are going to use the virtualized toolchain, please bear in mind the following things:\n\n- Your Kubernetes API server must listen on the interface of your local machine or VM, and not on `127.0.0.1` only.\n- Your Kubernetes client configuration ( `~/.kube/config`) must not use an API URL that points to `localhost` or `127.0.0.1`.\n\nYou can test whether the virtualized toolchain has access to your Kubernetes cluster by running `make verify-kube-connect` ( _after_ you have setup your development environment, as described below), which will run `kubectl version` inside the Docker container used for running all tests.\n\nThe Docker container for the virtualized toolchain will use the following local mounts from your workstation, and possibly modify its contents:\n\n- `~/go/src` \\- Your Go workspace's source directory (modifications expected)\n- `~/.cache/go-build` \\- Your Go build cache (modifications expected)\n- `~/.kube` \\- Your Kubernetes client configuration (no modifications)\n- `/tmp` \\- Your system's temp directory (modifications expected)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/toolchain-guide", "title": "Development toolchain", "description": "This guide helps you in setting up your build & test environment for developing and testing Argo CD, including prerequisites, submitting PRs, and using local or virtualized toolchains.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:34:24", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Toolchain Guide - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/developer-guide/toolchain-guide/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "4bf5ed1c-4310-4de5-ae95-6a5c3a50ecd5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/toolchain-guide", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/toolchain-guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Development toolchain\"?\n\nAssistant: Here are some code examples:\n\n### Testing module coverage\n```yaml\n make test TEST_MODULE=github.com/argoproj/argo-cd/server/cache\n...\nok      github.com/argoproj/argo-cd/server/cache        0.029s  coverage: 89.3% of statements\n```\n\n### Setting SUDO for Docker\n```yaml\nSUDO=sudo make sometarget\n```\n\n### Using podman instead of Docker\n```yaml\nDOCKER=podman make start\n```\n\n### Minikube start with embedded certs\n```yaml\nminikube start --embed-certs\n```\n\n### K3D cluster creation command\n```yaml\nk3d cluster create my-cluster --wait --k3s-arg '--disable=traefik@server:*' --api-port $IP:6550 -p 443:443@loadbalancer\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/toolchain-guide", "title": "Development toolchain", "description": "This guide helps you in setting up your build & test environment for developing and testing Argo CD, including prerequisites, submitting PRs, and using local or virtualized toolchains.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:34:24", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Toolchain Guide - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/developer-guide/toolchain-guide/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "4bf5ed1c-4310-4de5-ae95-6a5c3a50ecd5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/toolchain-guide", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/toolchain-guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Development toolchain\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always create PRs from a branch that is up-to-date with the latest changes from Argo CD's master branch.\n• Use a meaningful and concise title for your PR, prefixed with a valid category.\n• Run `make verify-kube-connect` to test Kubernetes connection after setting up your environment.\n• If using minikube, start with `minikube start --embed-certs` for virtualized toolchain compatibility.\n• For k3d, replace 0.0.0.0 with your host IP in `~/.kube/config` to ensure connectivity.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/toolchain-guide", "title": "Development toolchain", "description": "This guide helps you in setting up your build & test environment for developing and testing Argo CD, including prerequisites, submitting PRs, and using local or virtualized toolchains.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:34:24", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Toolchain Guide - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/developer-guide/toolchain-guide/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "4bf5ed1c-4310-4de5-ae95-6a5c3a50ecd5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/toolchain-guide", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/toolchain-guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Ui extensions\"?\n\nAssistant: The contents of this document have been moved to the extensions guide", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ui-extensions", "title": "Ui extensions", "description": "The contents of this document have been moved to the extensions guide", "has_code_examples": false, "has_best_practices": false, "section_count": 0, "timestamp": "2025-02-27 23:34:39", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/developer-guide/ui-extensions/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Ui extensions - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "language": "en", "scrapeId": "53f327f7-ab5a-4e4b-97be-ae0ebea55b63", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ui-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/ui-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Use Gitpod\"?\n\nAssistant: Gitpod is an open-source platform for automated and ready-to-code development environments. Gitpod is probably the easiest way to get ready to use development environment with the most tools that are required for Argo CD development.\n\nHere's a detailed explanation:\n\n\n## How To Use It\n1. Fork [https://github.com/argoproj/argo-cd](https://github.com/argoproj/argo-cd) repository\n2. Create Gitpod workspace by opening the following url in the browser:\n    `https://gitpod.io/#https://github.com/<USERNAME>/argo-cd` where\n    `<USERNAME>` is your GitHub username.\n\n3. Once workspace is created you should see VSCode editor in the browser as well as workspace initialization\n    logs in the VSCode terminal. The initialization process downloads all backend and UI dependencies as well\n    as starts K8S control plane powered by Kubebuilder [envtest](https://book.kubebuilder.io/reference/envtest.html).\n    Please wait until you see `Kubeconfig is available at /tmp/kubeconfig` message:\n\n\n![image](https://user-images.githubusercontent.com/426437/113638085-e46be080-962a-11eb-943b-24c29171fb2b.png)\n\n1. You are ready to go!\n\nOnce your workspace is ready you can use VS Code to make code changes. Run `goreman start` to start Argo CD components\nand test your changes. Use the Gitpod user interface or [CLI](https://www.gitpod.io/docs/command-line-interface/) to\naccess Argo CD API/UI from your laptop.\n\n## Why/When To Use It?\nGitpod is a perfect tool in following cases:\n\n- you are a first-time contributor and eager to start coding;\n- you are traveling and don't want to setup development tools on your laptop;\n- you want to review pull request and need to quickly run code from the PR without changing your local setup;\n\n## Limitations\nThere are some known limitations:\n\n- You can only use VS Code\n- Free plan provides 50 hours per month\n- [Envtest](https://book.kubebuilder.io/reference/envtest.html) based Kubernetes is only control plane.\nSo you won't be able to deploy Argo CD applications that runs actual pods.\n- Codegen tools are not available. E.g. you won't be able to use `make codegen-local`.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/use-gitpod", "title": "Use Gitpod", "description": "Gitpod is an open-source platform for automated and ready-to-code development environments. Gitpod is probably the easiest way to get ready to use development environment with the most tools that are required for Argo CD development.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:35:56", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Use Gitpod - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/developer-guide/use-gitpod/", "scrapeId": "5a3a968f-87b3-485e-bbfa-564fffdfc440", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/use-gitpod", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/use-gitpod/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Use Gitpod\"?\n\nAssistant: Here are some code examples:\n\n### Create Gitpod workspace\n```yaml\nhttps://gitpod.io/#https://github.com/<USERNAME>/argo-cd\n```\n\n### Start Argo CD components\n```yaml\ngoreman start\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/use-gitpod", "title": "Use Gitpod", "description": "Gitpod is an open-source platform for automated and ready-to-code development environments. Gitpod is probably the easiest way to get ready to use development environment with the most tools that are required for Argo CD development.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:35:56", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Use Gitpod - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/developer-guide/use-gitpod/", "scrapeId": "5a3a968f-87b3-485e-bbfa-564fffdfc440", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/use-gitpod", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/use-gitpod/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Use Gitpod\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use Gitpod for quick setups when traveling or when you want to avoid local setup.\n• Ideal for first-time contributors to start coding without local environment configuration.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/use-gitpod", "title": "Use Gitpod", "description": "Gitpod is an open-source platform for automated and ready-to-code development environments. Gitpod is probably the easiest way to get ready to use development environment with the most tools that are required for Argo CD development.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:35:56", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Use Gitpod - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/developer-guide/use-gitpod/", "scrapeId": "5a3a968f-87b3-485e-bbfa-564fffdfc440", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/use-gitpod", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/use-gitpod/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Authentication and Authorization\"?\n\nAssistant: This document describes how authentication (authn) and authorization (authz) are implemented in Argo CD. There is a clear distinction in the code base of when and how these two security concepts are enforced.\n\nHere's a detailed explanation:\n\n\n## Logical layers\nThe diagram below suggests 4 different logical layers (represented by 4 boxes: HTTP, gRPC, AuthN and AuthZ) inside Argo CD API server that collaborate to provide authentication and authorization.\n\n- **HTTP**: The HTTP layer groups the _logical elements_ that collaborate to handle HTTP requests. Every incoming request reaches the same HTTP server at the same port (8080). This server will analyze the request headers and dispatch to the proper internal server: gRPC or standard HTTP.\n\n- **gRPC**: The [gRPC](https://grpc.io/) layer groups the logical elements responsible for the gRPC implementation.\n\n- **AuthN**: The AuthN represents the layer responsible for authentication.\n\n- **AuthZ**: The AuthZ represents the layer responsible for authorization.\n\n## Logical elements\nThe logical elements (identified by numbers) can represent an object, a function or a component in the code base. Note that this particular distinction is not represented in the diagram.\n\nIncoming requests can reach Argo CD API server from the web UI as well as from the `argocd` CLI. The responsibility of the represented elements are described below with their respective numbers:\n\n01. **Cmux**: Uses the [cmux](https://github.com/soheilhy/cmux) library to provide a connection multiplexer capability making it possible to use the same port to handle standard HTTP as well as gRPC requests. It is responsible for inspecting incoming requests and dispatch to appropriate internal servers. If the request version is `http1.x` it will delegate to the _http mux_. If the request version is `http2` and has the header `content-type: application/grpc`, it will delegate to the _gRPC Server_.\n\n02. **HTTP mux**: A [standard HTTP multiplexer](https://pkg.go.dev/net/http#ServeMux) that will handle non gRPC requests. It is responsible for serving a unified [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) to the web UI exposing all gRPC and non-gRPC services.\n\n03. **gRPC-gateway**: Uses the [grpc-gateway](https://github.com/grpc-ecosystem/grpc-gateway) library to translate internal gRPC services and expose them as a [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer). The great majority of API services in Argo CD are implemented in gRPC. The grpc-gateway makes it possible to access gRPC services from the web UI.\n\n04. **Server**: The internal gRPC Server responsible for handling gRPC requests.\n\n05. **AuthN**: Is responsible for invoking the authentication logic. It is registered as a gRPC interceptor which will automatically trigger for every gRPC request.\n\n06. **Session Manager**: Is the object responsible for managing Argo CD API server session. It provides the functionality to verify the validity of the authentication token provided in the request. Depending on how Argo CD is configured it may or may not delegate to an external AuthN provider to verify the token.\n\n07. **AuthN Provider**: Describes the component that can be plugged in Argo CD API server to provide the authentication functionality such as the login and the token verification process.\n\n08. **Service Method**: represents the method implementing the business logic (core functionality) requested. An example of business logic is: `List Applications`. Service methods are also responsible for invoking the [RBAC](https://en.wikipedia.org/wiki/Role-based_access_control) enforcement function to validate if the authenticated user has permission to execute this method.\n\n09. **RBAC**: Is a collection of functions to provide the capability to verify if the user has permission to execute a specific action in Argo CD. It does so by validating the incoming request action against predefined [RBAC](https://en.wikipedia.org/wiki/Role-based_access_control) rules that can be configured in Argo CD API server as well as in Argo CD `Project` CRD.\n\n10. **Casbin**: Uses the [Casbin](https://casbin.org/) library to enforce [RBAC](https://en.wikipedia.org/wiki/Role-based_access_control) rules.\n\n11. **AuthN Middleware**: Is an [HTTP Middleware](https://github.com/golang/go/wiki/LearnServerProgramming#middleware) configured to invoke the logic to verify the token for HTTP services that are not implemented as gRPC and requires authentication.\n\n12. **HTTP Handler**: represents the http handlers responsible for invoking the business logic (core functionality) requested. An example of business logic is: `List Applications`. Http handlers are also responsible for invoking the [RBAC](https://en.wikipedia.org/wiki/Role-based_access_control) enforcement function to validate if the authenticated user has permission to execute this business logic.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/architecture/authz-authn", "title": "Authentication and Authorization", "description": "This document describes how authentication (authn) and authorization (authz) are implemented in Argo CD. There is a clear distinction in the code base of when and how these two security concepts are enforced.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 23:36:21", "type": "overview", "page_metadata": {"title": "Authentication and Authorization - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/developer-guide/architecture/authz-authn/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0cfcf35e-0b8e-42f8-b017-598a85a22878", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/architecture/authz-authn", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/architecture/authz-authn/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Component Architecture\"?\n\nAssistant: Argo CD is designed with a component based architecture to separate responsibilities into different deployable units, providing benefits like modularity, single responsibility, and reusability.\n\nHere's a detailed explanation:\n\n\n## Dependencies\nThe diagram below has represented all dependencies between the different components used by the default Argo CD installation:\n\n![Components Diagram](https://argo-cd.readthedocs.io/en/stable/assets/argocd-components.png)\n\nThere are 4 logical layers represented in the diagram:\n\n- **UI**: This is the presentation layer. Users interact with Argo CD mainly by components from this layer.\n- **Application**: The capabilities required to support the components from the UI layer.\n- **Core**: The main Argo CD gitops functionality is implemented by components and Kubernetes controllers from the Core layer.\n- **Infra**: Represent the tools that Argo CD depends on as part of its infrastructure.\n\nThe logical layers also help making the diagram easier to follow as dependencies are represented in a top-down relationship. This means that components from the top layers will be allowed to depend on any component from any of the bottom layers. However components from the bottom layers will never depend on any ones from upper layers.\n\n## Responsibility\nBelow you can refer to a brief description of Argo CD components and its main responsibilities.\n\n### Webapp\nArgo CD ships with a powerful web interface that allows managing applications deployed in a given Kubernetes cluster.\n\n### CLI\nArgo CD provides a CLI that can be used by users to interact with Argo CD API. The CLI can also be used for automation and scripting.\n\n### API Server\nDefines the proprietary API exposed by Argo CD that powers the Webapp and the CLI functionalities.\n\n### Application Controller\nThe Application Controller is responsible for reconciling the Application resource in Kubernetes synchronizing the desired application state (provided in Git) with the live state (in Kubernetes). The Application Controller is also responsible for reconciling the Project resource.\n\n### ApplicationSet Controller\nThe ApplicationSet Controller is responsible for reconciling the ApplicationSet resource.\n\n### Repo Server\nRepo Server plays an important role in Argo CD architecture as it is responsible for interacting with the Git repository to generate the desired state for all Kubernetes resources that belongs to a given application.\n\n### Redis\nRedis is used by Argo CD to provide a cache layer reducing requests sent to the Kube API as well as to the Git provider. It also supports a few UI operations.\n\n### Kube API\nArgo CD controllers will connect to the Kubernetes API in order to run the reconciliation loop.\n\n### Git\nAs a gitops tool Argo CD requires that the desired state of the Kubernetes resources to be provided in a Git repository.\n\nWe use \"git\" here to stand in for an actual git repo, a Helm repo, or an OCI artifact repo. Argo CD supports all those options.\n\n### Dex\nArgo CD relies on Dex to provide authentication with external OIDC providers. However other tools can be used instead of Dex. Check the user management documentation for more details.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/architecture/components", "title": "Component Architecture", "description": "Argo CD is designed with a component based architecture to separate responsibilities into different deployable units, providing benefits like modularity, single responsibility, and reusability.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 23:36:39", "type": "overview", "page_metadata": {"title": "Component Architecture - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/developer-guide/architecture/components/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "31fc5ce6-99f4-4eec-9f09-a508b0563e71", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/architecture/components", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/architecture/components/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Proxy Extensions\"?\n\nAssistant: This page covers the configuration and usage of proxy extensions in Argo CD, an experimental feature that allows additional functionality with access to backend services.\n\nHere's a detailed explanation:\n\n\n## Overview\nWith UI extensions it is possible to enhance Argo CD web interface to provide valuable data to the user. However the data is restricted to the resources that belongs to the Application. With proxy extensions it is also possible to add additional functionality that have access to data provided by backend services. In this case Argo CD API server acts as a reverse-proxy authenticating and authorizing incoming requests before forwarding to the backend service.\n\n## Configuration\nAs proxy extension is in Alpha phase, the feature is disabled by default. To enable it, it is necessary to configure the feature flag in Argo CD command parameters. The easiest way to properly enable this feature flag is by adding the `server.enable.proxy.extension` key in the existing `argocd-cmd-params-cm`. For example:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\n  namespace: argocd\ndata:\n  server.enable.proxy.extension: \"true\"\n```\n\nOnce the proxy extension is enabled, it can be configured in the main Argo CD configmap (argocd-cm). The example below demonstrates all possible configurations available for proxy extensions:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  extension.config: |\n    extensions:\n    - name: httpbin\n      backend:\n        connectionTimeout: 2s\n        keepAlive: 15s\n        idleConnectionTimeout: 60s\n        maxIdleConnections: 30\n        services:\n        - url: http://httpbin.org\n          headers:\n          - name: some-header\n            value: '$some.argocd.secret.key'\n          cluster:\n            name: some-cluster\n            server: https://some-cluster\n```\n\nProxy extensions can also be provided individually using dedicated Argo CD configmap keys for better GitOps operations. The example below demonstrates how to configure the same hypothetical httpbin config above using a dedicated key:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  extension.config.httpbin: |\n    connectionTimeout: 2s\n    keepAlive: 15s\n    idleConnectionTimeout: 60s\n    maxIdleConnections: 30\n    services:\n    - url: http://httpbin.org\n      headers:\n      - name: some-header\n        value: '$some.argocd.secret.key'\n      cluster:\n        name: some-cluster\n        server: https://some-cluster\n```\n\nAttention: Extension names must be unique in the Argo CD configmap. If duplicated keys are found, the Argo CD API server will log an error message and no proxy extension will be registered.\n\nNote: There is no need to restart Argo CD Server after modifying the `extension.config` entry in Argo CD configmap. Changes will be automatically applied. A new proxy registry will be built making all new incoming extensions requests (`<argocd-host>/extensions/*`) to respect the new configuration.\n\n## Usage\nOnce a proxy extension is configured it will be made available under the `/extensions/<extension-name>` endpoint exposed by Argo CD API server. The example above will proxy requests to `<apiserver-host>/extensions/httpbin/` to `http://httpbin.org`.\n\n## Incoming Request Headers\nNote that Argo CD API Server requires additional HTTP headers to be sent in order to enforce if the incoming request is authenticated and authorized before being proxied to the backend service. The headers are documented below:\n\nArgo CD UI keeps the authentication token stored in a cookie (`argocd.token`). This value needs to be sent in the `Cookie` header so the API server can validate its authenticity.\n\nExample:\n\n```\nCookie: argocd.token=eyJhbGciOiJIUzI1Ni...\n```\n\nThe entire Argo CD cookie list can also be sent. The API server will only use the `argocd.token` attribute in this case.\n\n## Outgoing Requests Headers\nRequests sent to backend services will be decorated with additional headers. The outgoing request headers are documented below:\n\n#### `Argocd-Target-Cluster-Name`\nWill be populated with the value from `app.Spec.Destination.Name` if it is not empty string in the application resource.\n\n#### `Argocd-Target-Cluster-URL`\nWill be populated with the value from `app.Spec.Destination.Server` if it is not empty string is the Application resource.\n\nNote that additional pre-configured headers can be added to outgoing request. See backend service headers section for more details.\n\n## Multi Backend Use-Case\nIn some cases when Argo CD is configured to sync with multiple remote clusters, there might be a need to call a specific backend service in each of those clusters. The proxy-extension can be configured to address this use-case by defining multiple services for the same extension.\n\n## Security\nWhen a request to `/extensions/*` reaches the API Server, it will first verify if it is authenticated with a valid token. It does so by inspecting if the `Cookie` header is properly sent from Argo CD UI extension. Once the request is authenticated it is then verified if the user has permission to invoke this extension. The permission is enforced by Argo CD RBAC configuration.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions", "title": "Proxy Extensions", "description": "This page covers the configuration and usage of proxy extensions in Argo CD, an experimental feature that allows additional functionality with access to backend services.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:37:06", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/developer-guide/extensions/proxy-extensions/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Proxy Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "46e0f467-4521-48f5-9d85-a99f3e332e0f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Proxy Extensions\"?\n\nAssistant: Here are some code examples:\n\n### Enable Proxy Extension\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\n  namespace: argocd\ndata:\n  server.enable.proxy.extension: \"true\"\n```\n\n### Proxy Extension Configuration\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  extension.config: |\n    extensions:\n    - name: httpbin\n      backend:\n        connectionTimeout: 2s\n        keepAlive: 15s\n        idleConnectionTimeout: 60s\n        maxIdleConnections: 30\n        services:\n        - url: http://httpbin.org\n          headers:\n          - name: some-header\n            value: '$some.argocd.secret.key'\n          cluster:\n            name: some-cluster\n            server: https://some-cluster\n```\n\n### Individual Proxy Extension Configuration\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  extension.config.httpbin: |\n    connectionTimeout: 2s\n    keepAlive: 15s\n    idleConnectionTimeout: 60s\n    maxIdleConnections: 30\n    services:\n    - url: http://httpbin.org\n      headers:\n      - name: some-header\n        value: '$some.argocd.secret.key'\n      cluster:\n        name: some-cluster\n        server: https://some-cluster\n```\n\n### Authorization Header Example\n```yaml\nextension.config: |\n  extensions:\n  - name: some-extension\n    backend:\n      services:\n      - url: http://extension-name.com:8080\n        headers:\n        - name: Authorization\n          value: '$some-extension.authorization.header'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions", "title": "Proxy Extensions", "description": "This page covers the configuration and usage of proxy extensions in Argo CD, an experimental feature that allows additional functionality with access to backend services.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:37:06", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/developer-guide/extensions/proxy-extensions/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Proxy Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "46e0f467-4521-48f5-9d85-a99f3e332e0f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Proxy Extensions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Extension names must be unique in the Argo CD configmap.\n• No need to restart Argo CD Server after modifying the extension.config entry in Argo CD configmap. Changes will be automatically applied.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions", "title": "Proxy Extensions", "description": "This page covers the configuration and usage of proxy extensions in Argo CD, an experimental feature that allows additional functionality with access to backend services.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:37:06", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/developer-guide/extensions/proxy-extensions/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Proxy Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "46e0f467-4521-48f5-9d85-a99f3e332e0f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"UI Extensions\"?\n\nAssistant: Argo CD web user interface can be extended with additional UI elements.\n\nHere's a detailed explanation:\n\n\n## Overview\nArgo CD web user interface can be extended with additional UI elements. Extensions should be delivered as a javascript file in the `argocd-server` Pods that are placed in the `/tmp/extensions` directory and starts with `extension` prefix ( matches to `^extension(.*)\\.js$` regex ).\n\n```\n/tmp/extensions\n├── example1\n│   └── extension-1.js\n└── example2\n    └── extension-2.js\n```\n\nExtensions are loaded during initial page rendering and should register themselves using API exposed in the `extensionsAPI` global variable. (See corresponding extension type details for additional information). The extension should provide a React component that is responsible for rendering the UI element. Extension should not bundle the React library. Instead extension should use the `react` global variable. You can leverage `externals` setting if you are using webpack:\n\n```\nexternals: {\n  react: \"React\";\n}\n```\n\n## Resource Tab Extensions\nResource Tab extensions is an extension that provides an additional tab for the resource sliding panel at the Argo CD Application details page.\n\nThe resource tab extension should be registered using the `extensionsAPI.registerResourceExtension` method:\n\n```\nregisterResourceExtension(component: ExtensionComponent, group: string, kind: string, tabTitle: string)\n```\n\n- `component: ExtensionComponent` is a React component that receives the following properties:\n  - application: Application - Argo CD Application resource;\n  - resource: State - the Kubernetes resource object;\n  - tree: ApplicationTree - includes list of all resources that comprise the application;\n\nSee properties interfaces in [models.ts](https://github.com/argoproj/argo-cd/blob/master/ui/src/app/shared/models.ts)\n\n- `group: string` - the glob expression that matches the group of the resource; note: use globstar ( `**`) to match all groups including empty string;\n- `kind: string` - the glob expression that matches the kind of the resource;\n- `tabTitle: string` - the extension tab title.\n- `opts: Object` - additional options:\n  - `icon: string` - the class name the represents the icon from the [https://fontawesome.com/](https://fontawesome.com/) library (e.g. 'fa-calendar-alt');\n\nBelow is an example of a resource tab extension:\n\n```\n((window) => {\n  const component = () => {\n    return React.createElement(\"div\", {}, \"Hello World\");\n  };\n  window.extensionsAPI.registerResourceExtension(\n    component,\n    \"*\",\n    \"*\",\n    \"Nice extension\"\n  );\n})(window);\n```\n\n## System Level Extensions\nArgo CD allows you to add new items to the sidebar that will be displayed as a new page with a custom component when clicked. The system level extension should be registered using the `extensionsAPI.registerSystemLevelExtension` method:\n\n```\nregisterSystemLevelExtension(component: ExtensionComponent, title: string, options: {icon?: string})\n```\n\nBelow is an example of a simple system level extension:\n\n```\n((window) => {\n  const component = () => {\n    return React.createElement(\n      \"div\",\n      { style: { padding: \"10px\" } },\n      \"Hello World\"\n    );\n  };\n  window.extensionsAPI.registerSystemLevelExtension(\n    component,\n    \"Test Ext\",\n    \"/hello\",\n    \"fa-flask\"\n  );\n})(window);\n```\n\n## Application Tab Extensions\nSince the Argo CD Application is a Kubernetes resource, application tabs can be the same as any other resource tab. Make sure to use 'argoproj.io'/'Application' as group/kind and an extension will be used to render the application-level tab.\n\n## Application Status Panel Extensions\nThe status panel is the bar at the top of the application view where the sync status is displayed. Argo CD allows you to add new items to the status panel of an application. The extension should be registered using the `extensionsAPI.registerStatusPanelExtension` method:\n\n```\nregisterStatusPanelExtension(component: StatusPanelExtensionComponent, title: string, id: string, flyout?: ExtensionComponent)\n```\n\nBelow is an example of a simple extension:\n\n```\n((window) => {\n  const component = () => {\n    return React.createElement(\n      \"div\",\n      { style: { padding: \"10px\" } },\n      \"Hello World\"\n    );\n  };\n  window.extensionsAPI.registerStatusPanelExtension(\n    component,\n    \"My Extension\",\n    \"my_extension\"\n  );\n})(window);\n```\n\n## Flyout widget\nIt is also possible to add an optional flyout widget to your extension. It can be opened by calling `openFlyout()` from your extension's component. Your flyout component will then be rendered in a sliding panel, similar to the panel that opens when clicking on `History and rollback`.\n\nBelow is an example of an extension using the flyout widget:\n\n```\n((window) => {\n  const component = (props: {\n    openFlyout: () => any\n  }) => {\n    return React.createElement(\n            \"div\",\n            {\n              style: { padding: \"10px\" },\n              onClick: () => props.openFlyout()\n            },\n            \"Hello World\"\n    );\n  };\n  const flyout = () => {\n    return React.createElement(\n            \"div\",\n            { style: { padding: \"10px\" },\n            \"This is a flyout\"\n    );\n  };\n  window.extensionsAPI.registerStatusPanelExtension(\n          component,\n          \"My Extension\",\n          \"my_extension\",\n          flyout\n  );\n})(window);\n```\n\n## Top Bar Action Menu Extensions\nThe top bar panel is the action menu at the top of the application view where the action buttons are displayed like Details, Sync, Refresh. Argo CD allows you to add new button to the top bar action menu of an application. When the extension button is clicked, the custom widget will be rendered in a flyout panel.\n\nThe extension should be registered using the `extensionsAPI.registerTopBarActionMenuExt` method:\n\n```\nregisterTopBarActionMenuExt(\n  component: TopBarActionMenuExtComponent,\n  title: string,\n  id: string,\n  flyout?: ExtensionComponent,\n  shouldDisplay: (app?: Application) => boolean = () => true,\n  iconClassName?: string,\n  isMiddle = false\n)\n```\n\nThe callback function `shouldDisplay` should return true if the extension should be displayed and false otherwise:\n\n```\nconst shouldDisplay = (app: Application) => {\n  return application.metadata?.labels?.['application.environmentLabelKey'] === \"prd\";\n};\n```\n\nBelow is an example of a simple extension with a flyout widget:\n\n```\n((window) => {\n  const shouldDisplay = () => {\n    return true;\n  };\n  const flyout = () => {\n    return React.createElement(\n            \"div\",\n            { style: { padding: \"10px\" },\n            \"This is a flyout\"\n    );\n  };\n  const component = () => {\n    return React.createElement(\n            \"div\",\n            {\n              onClick: () => flyout()\n            },\n            \"Toolbar Extension Test\"\n    );\n  };\n  window.extensionsAPI.registerTopBarActionMenuExt(\n          component,\n          \"Toolbar Extension Test\",\n          \"Toolbar_Extension_Test\",\n          flyout,\n          shouldDisplay,\n          '',\n          true\n  );\n})(window);\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/ui-extensions", "title": "UI Extensions", "description": "Argo CD web user interface can be extended with additional UI elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:37:51", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "title": "UI Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/developer-guide/extensions/ui-extensions/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "8047a123-1486-4711-bb24-a6903dc47a98", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/ui-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/ui-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"UI Extensions\"?\n\nAssistant: Here are some code examples:\n\n### Example of Resource Tab Extension\n```yaml\n((window) => {\n  const component = () => {\n    return React.createElement(\"div\", {}, \"Hello World\");\n  };\n  window.extensionsAPI.registerResourceExtension(\n    component,\n    \"*\",\n    \"*\",\n    \"Nice extension\"\n  );\n})(window);\n```\n\n### Example of System Level Extension\n```yaml\n((window) => {\n  const component = () => {\n    return React.createElement(\n      \"div\",\n      { style: { padding: \"10px\" } },\n      \"Hello World\"\n    );\n  };\n  window.extensionsAPI.registerSystemLevelExtension(\n    component,\n    \"Test Ext\",\n    \"/hello\",\n    \"fa-flask\"\n  );\n})(window);\n```\n\n### Example of Application Status Panel Extension\n```yaml\n((window) => {\n  const component = () => {\n    return React.createElement(\n      \"div\",\n      { style: { padding: \"10px\" } },\n      \"Hello World\"\n    );\n  };\n  window.extensionsAPI.registerStatusPanelExtension(\n    component,\n    \"My Extension\",\n    \"my_extension\"\n  );\n})(window);\n```\n\n### Example of Flyout Widget Extension\n```yaml\n((window) => {\n  const component = (props: {\n    openFlyout: () => any\n  }) => {\n    return React.createElement(\n            \"div\",\n            {\n              style: { padding: \"10px\" },\n              onClick: () => props.openFlyout()\n            },\n            \"Hello World\"\n    );\n  };\n  const flyout = () => {\n    return React.createElement(\n            \"div\",\n            { style: { padding: \"10px\" },\n            \"This is a flyout\"\n    );\n  };\n  window.extensionsAPI.registerStatusPanelExtension(\n          component,\n          \"My Extension\",\n          \"my_extension\",\n          flyout\n  );\n})(window);\n```\n\n### Example of Top Bar Action Menu Extension\n```yaml\n((window) => {\n  const shouldDisplay = () => {\n    return true;\n  };\n  const flyout = () => {\n    return React.createElement(\n            \"div\",\n            { style: { padding: \"10px\" },\n            \"This is a flyout\"\n    );\n  };\n  const component = () => {\n    return React.createElement(\n            \"div\",\n            {\n              onClick: () => flyout()\n            },\n            \"Toolbar Extension Test\"\n    );\n  };\n  window.extensionsAPI.registerTopBarActionMenuExt(\n          component,\n          \"Toolbar Extension Test\",\n          \"Toolbar_Extension_Test\",\n          flyout,\n          shouldDisplay,\n          '',\n          true\n  );\n})(window);\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/ui-extensions", "title": "UI Extensions", "description": "Argo CD web user interface can be extended with additional UI elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:37:51", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "title": "UI Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/developer-guide/extensions/ui-extensions/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "8047a123-1486-4711-bb24-a6903dc47a98", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/ui-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/ui-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"UI Extensions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Extensions should be delivered as a javascript file in the `argocd-server` Pods that are placed in the `/tmp/extensions` directory.\n• Extensions should register themselves using API exposed in the `extensionsAPI` global variable.\n• Extensions should provide a React component that is responsible for rendering the UI element.\n• Extensions should not bundle the React library and should use the `react` global variable instead.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/ui-extensions", "title": "UI Extensions", "description": "Argo CD web user interface can be extended with additional UI elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:37:51", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "title": "UI Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/developer-guide/extensions/ui-extensions/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "8047a123-1486-4711-bb24-a6903dc47a98", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/ui-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/ui-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Overview\"?\n\nAssistant: This guide is for administrators and operators wanting to install and configure Argo CD for other developers.\n\nHere's a detailed explanation:\n\n\n## Overview\nThis guide is for administrators and operators wanting to install and configure Argo CD for other developers.\n\n## Note\nPlease make sure you've completed the getting started guide.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual", "title": "Overview", "description": "This guide is for administrators and operators wanting to install and configure Argo CD for other developers.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:38:01", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/", "readthedocs-project-slug": "argo-cd", "language": "en", "scrapeId": "b0811bc3-ae27-47f9-928a-a1fcc3603cba", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Overview\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure you've completed the getting started guide.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual", "title": "Overview", "description": "This guide is for administrators and operators wanting to install and configure Argo CD for other developers.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:38:01", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/", "readthedocs-project-slug": "argo-cd", "language": "en", "scrapeId": "b0811bc3-ae27-47f9-928a-a1fcc3603cba", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Applications in any namespace\"?\n\nAssistant: This documentation covers how to manage Application resources in namespaces other than the control plane's namespace in Argo CD, including prerequisites, implementation details, and management methods.\n\nHere's a detailed explanation:\n\n\n## Introduction\nAs of version 2.5, Argo CD supports managing `Application` resources in namespaces other than the control plane's namespace (which is usually `argocd`), but this feature has to be explicitly enabled and configured appropriately.\n\nArgo CD administrators can define a certain set of namespaces where `Application` resources may be created, updated and reconciled in. However, applications in these additional namespaces will only be allowed to use certain `AppProjects`, as configured by the Argo CD administrators. This allows ordinary Argo CD users (e.g. application teams) to use patterns like declarative management of `Application` resources, implementing app-of-apps and others without the risk of a privilege escalation through usage of other `AppProjects` that would exceed the permissions granted to the application teams.\n\nSome manual steps will need to be performed by the Argo CD administrator in order to enable this feature.\n\nOne additional advantage of adopting applications in any namespace is to allow end-users to configure notifications for their Argo CD application in the namespace where Argo CD application is running in. See notifications namespace based configuration page for more information.\n\n## Prerequisites\n### Cluster-scoped Argo CD installation\nThis feature can only be enabled and used when your Argo CD is installed as a cluster-wide instance, so it has permissions to list and manipulate resources on a cluster scope. It will not work with an Argo CD installed in namespace-scoped mode.\n\n### Switch resource tracking method\nAlso, while technically not necessary, it is strongly suggested that you switch the application tracking method from the default `label` setting to either `annotation` or `annotation+label`. The reasoning for this is, that application names will be a composite of the namespace's name and the name of the `Application`, and this can easily exceed the 63 characters length limit imposed on label values. Annotations have a notably greater length limit.\n\nTo enable annotation based resource tracking, refer to the documentation about resource tracking methods.\n\n## Implementation details\n### Overview\nIn order for an application to be managed and reconciled outside the Argo CD's control plane namespace, two prerequisites must match:\n\n1. The `Application`'s namespace must be explicitly enabled using the `--application-namespaces` parameter for the `argocd-application-controller` and `argocd-server` workloads. This parameter controls the list of namespaces that Argo CD will be allowed to source `Application` resources from globally. Any namespace not configured here cannot be used from any `AppProject`.\n2. The `AppProject` referenced by the `.spec.project` field of the `Application` must have the namespace listed in its `.spec.sourceNamespaces` field. This setting will determine whether an `Application` may use a certain `AppProject`. If an `Application` specifies an `AppProject` that is not allowed, Argo CD refuses to process this `Application`. As stated above, any namespace configured in the `.spec.sourceNamespaces` field must also be enabled globally.\n\n`Applications` in different namespaces can be created and managed just like any other `Application` in the `argocd` namespace previously, either declaratively or through the Argo CD API (e.g. using the CLI, the web UI, the REST API, etc).\n\n## Reconfigure Argo CD to allow certain namespaces\n#### Change workload startup parameters\nIn order to enable this feature, the Argo CD administrator must reconfigure the `argocd-server` and `argocd-application-controller` workloads to add the `--application-namespaces` parameter to the container's startup command.\n\nThe `--application-namespaces` parameter takes a comma-separated list of namespaces where `Applications` are to be allowed in. Each entry of the list supports:\n\n- shell-style wildcards such as `*`, so for example the entry `app-team-*` would match `app-team-one` and `app-team-two`. To enable all namespaces on the cluster where Argo CD is running on, you can just specify `*`, i.e. `--application-namespaces=*`.\n- regex, requires wrapping the string in `/`, example to allow all namespaces except a particular one: `/^((?!not-allowed).)*$/`.\n\nThe startup parameters for both, the `argocd-server` and the `argocd-application-controller` can also be conveniently set up and kept in sync by specifying the `application.namespaces` settings in the `argocd-cmd-params-cm` ConfigMap _instead_ of changing the manifests for the respective workloads. For example:\n\n```\ndata:\n  application.namespaces: app-team-one, app-team-two\n```\n\nwould allow the `app-team-one` and `app-team-two` namespaces for managing `Application` resources. After a change to the `argocd-cmd-params-cm` namespace, the appropriate workloads need to be restarted:\n\n```\nkubectl rollout restart -n argocd deployment argocd-server\nkubectl rollout restart -n argocd statefulset argocd-application-controller\n```\n\n#### Adapt Kubernetes RBAC\nWe decided to not extend the Kubernetes RBAC for the `argocd-server` workload by default for the time being. If you want `Applications` in other namespaces to be managed by the Argo CD API (i.e. the CLI and UI), you need to extend the Kubernetes permissions for the `argocd-server` ServiceAccount.\n\nWe supply a `ClusterRole` and `ClusterRoleBinding` suitable for this purpose in the `examples/k8s-rbac/argocd-server-applications` directory. For a default Argo CD installation (i.e. installed to the `argocd` namespace), you can just apply them as-is:\n\n```\nkubectl apply -k examples/k8s-rbac/argocd-server-applications/\n```\n\n`argocd-notifications-controller-rbac-clusterrole.yaml` and `argocd-notifications-controller-rbac-clusterrolebinding.yaml` are used to support notifications controller to notify apps in all namespaces.\n\n## Allowing additional namespaces in an AppProject\nAny user with Kubernetes access to the Argo CD control plane's namespace ( `argocd`), especially those with permissions to create or update `Applications` in a declarative way, is to be considered an Argo CD admin.\n\nThis prevented unprivileged Argo CD users from declaratively creating or managing `Applications` in the past. Those users were constrained to using the API instead, subject to Argo CD RBAC which ensures only `Applications` in allowed `AppProjects` were created.\n\nFor an `Application` to be created outside the `argocd` namespace, the `AppProject` referred to in the `Application`'s `.spec.project` field must include the `Application`'s namespace in its `.spec.sourceNamespaces` field.\n\nFor example, consider the two following (incomplete) `AppProject` specs:\n\n```\nkind: AppProject\napiVersion: argoproj.io/v1alpha1\nmetadata:\n  name: project-one\n  namespace: argocd\nspec:\n  sourceNamespaces:\n  - namespace-one\n```\n\nand\n\n```\nkind: AppProject\napiVersion: argoproj.io/v1alpha1\nmetadata:\n  name: project-two\n  namespace: argocd\nspec:\n  sourceNamespaces:\n  - namespace-two\n```\n\nIn order for an Application to set `.spec.project` to `project-one`, it would have to be created in either namespace `namespace-one` or `argocd`. Likewise, in order for an Application to set `.spec.project` to `project-two`, it would have to be created in either namespace `namespace-two` or `argocd`.\n\nIf an Application in `namespace-two` would set their `.spec.project` to `project-one` or an Application in `namespace-one` would set their `.spec.project` to `project-two`, Argo CD would consider this as a permission violation and refuse to reconcile the Application.\n\nAlso, the Argo CD API will enforce these constraints, regardless of the Argo CD RBAC permissions.\n\nThe `.spec.sourceNamespaces` field of the `AppProject` is a list that can contain an arbitrary amount of namespaces, and each entry supports shell-style wildcard, so that you can allow namespaces with patterns like `team-one-*`.\n\nWarning\nDo not add user controlled namespaces in the `.spec.sourceNamespaces` field of any privileged AppProject like the `default` project. Always make sure that the AppProject follows the principle of granting least required privileges. Never grant access to the `argocd` namespace within the AppProject.\n\n## Application names\nFor the CLI and UI, applications are now referred to and displayed as in the format `<namespace>/<name>`.\n\nFor backwards compatibility, if the namespace of the Application is the control plane's namespace (i.e. `argocd`), the `<namespace>` can be omitted from the application name when referring to it. For example, the application names `argocd/someapp` and `someapp` are semantically the same and refer to the same application in the CLI and the UI.\n\n## Application RBAC\nThe RBAC syntax for Application objects has been changed from `<project>/<application>` to `<project>/<namespace>/<application>` to accommodate the need to restrict access based on the source namespace of the Application to be managed.\n\nFor backwards compatibility, Applications in the `argocd` namespace can still be refered to as `<project>/<application>` in the RBAC policy rules.\n\nWildcards do not make any distinction between project and application namespaces yet. For example, the following RBAC rule would match any application belonging to project `foo`, regardless of the namespace it is created in:\n\n```\np, somerole, applications, get, foo/*, allow\n```\n\nIf you want to restrict access to be granted only to `Applications` in project `foo` within namespace `bar`, the rule would need to be adapted as follows:\n\n```\np, somerole, applications, get, foo/bar/*, allow\n```\n\n## Managing applications in other namespaces\n### Declaratively\nFor declarative management of Applications, just create the Application from a YAML or JSON manifest in the desired namespace. Make sure that the `.spec.project` field refers to an AppProject that allows this namespace. For example, the following (incomplete) Application manifest creates an Application in the namespace `some-namespace`:\n\n```\nkind: Application\napiVersion: argoproj.io/v1alpha1\nmetadata:\n  name: some-app\n  namespace: some-namespace\nspec:\n  project: some-project\n  # ...\n```\n\nThe project `some-project` will then need to specify `some-namespace` in the list of allowed source namespaces, e.g.\n\n```\nkind: AppProject\napiVersion: argoproj.io/v1alpha1\nmetadata:\n    name: some-project\n    namespace: argocd\nspec:\n    sourceNamespaces:\n    - some-namespace\n```\n\n### Using the CLI\nYou can use all existing Argo CD CLI commands for managing applications in other namespaces, exactly as you would use the CLI to manage applications in the control plane's namespace.\n\nFor example, to retrieve the `Application` named `foo` in the namespace `bar`, you can use the following CLI command:\n\n```\nargocd app get foo/bar\n```\n\nLikewise, to manage this application, keep referring to it as `foo/bar`:\n\n```\n# Create an application\nargocd app create foo/bar ...\n# Sync the application\nargocd app sync foo/bar\n# Delete the application\nargocd app delete foo/bar\n# Retrieve application's manifest\nargocd app manifests foo/bar\n```\n\nAs stated previously, for applications in the Argo CD's control plane namespace, you can omit the namespace from the application name.\n\n### Using the UI\nSimilar to the CLI, you can refer to the application in the UI as `foo/bar`.\n\nFor example, to create an application named `bar` in the namespace `foo` in the web UI, set the application name in the creation dialogue's _Application Name_ field to `foo/bar`. If the namespace is omitted, the control plane's namespace will be used.\n\n### Using the REST API\nIf you are using the REST API, the namespace for `Application` cannot be specified as the application name, and resources need to be specified using the optional `appNamespace` query parameter. For example, to work with the `Application` resource named `foo` in the namespace `bar`, the request would look like follows:\n\n```\nGET /api/v1/applications/foo?appNamespace=bar\n```\n\nFor other operations such as `POST` and `PUT`, the `appNamespace` parameter must be part of the request's payload.\n\nFor `Application` resources in the control plane namespace, this parameter can be omitted.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace", "title": "Applications in any namespace", "description": "This documentation covers how to manage Application resources in namespaces other than the control plane's namespace in Argo CD, including prerequisites, implementation details, and management methods.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:40:55", "type": "overview", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/app-any-namespace/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Applications in any namespace - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "46201133-94dc-4426-b3ac-d25f92985b4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Applications in any namespace\"?\n\nAssistant: Here are some code examples:\n\n### Change workload startup parameters\n```yaml\n```\nkubectl rollout restart -n argocd deployment argocd-server\nkubectl rollout restart -n argocd statefulset argocd-application-controller\n```\n```\n\n### Adapt Kubernetes RBAC\n```yaml\n```\nkubectl apply -k examples/k8s-rbac/argocd-server-applications/\n```\n```\n\n### Declarative Application manifest\n```yaml\n```\nkind: Application\napiVersion: argoproj.io/v1alpha1\nmetadata:\n  name: some-app\n  namespace: some-namespace\nspec:\n  project: some-project\n  # ...\n```\n```\n\n### AppProject manifest\n```yaml\n```\nkind: AppProject\napiVersion: argoproj.io/v1alpha1\nmetadata:\n    name: some-project\n    namespace: argocd\nspec:\n    sourceNamespaces:\n    - some-namespace\n```\n```\n\n### RBAC rule example\n```yaml\n```\np, somerole, applications, get, foo/bar/*, allow\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace", "title": "Applications in any namespace", "description": "This documentation covers how to manage Application resources in namespaces other than the control plane's namespace in Argo CD, including prerequisites, implementation details, and management methods.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:40:55", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/app-any-namespace/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Applications in any namespace - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "46201133-94dc-4426-b3ac-d25f92985b4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Applications in any namespace\"?\n\nAssistant: Here are the recommended best practices:\n\n• Read the documentation carefully before enabling this feature to avoid misconfiguration and potential security issues.\n• Switch the application tracking method from the default `label` setting to either `annotation` or `annotation+label` to avoid exceeding the 63 characters length limit imposed on label values.\n• Do not add user controlled namespaces in the `.spec.sourceNamespaces` field of any privileged AppProject like the `default` project. Always ensure that the AppProject follows the principle of granting least required privileges.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace", "title": "Applications in any namespace", "description": "This documentation covers how to manage Application resources in namespaces other than the control plane's namespace in Argo CD, including prerequisites, implementation details, and management methods.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:40:55", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/app-any-namespace/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Applications in any namespace - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "46201133-94dc-4426-b3ac-d25f92985b4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Application Sync using impersonation\"?\n\nAssistant: This page covers the experimental alpha feature in Argo CD that allows control over the service account used for application sync operations, enhancing security in multi-tenant environments.\n\nHere's a detailed explanation:\n\n\n## Introduction\nArgo CD supports syncing `Application` resources using the same service account used for its control plane operations. This feature enables users to decouple service account used for application sync from the service account used for control plane operations.\n\nBy default, application syncs in Argo CD have the same privileges as the Argo CD control plane. As a consequence, in a multi-tenant setup, the Argo CD control plane privileges needs to match the tenant that needs the highest privileges. As an example, if an Argo CD instance has 10 Applications and only one of them requires admin privileges, then the Argo CD control plane must have admin privileges in order to be able to sync that one Application. This provides an opportunity for malicious tenants to gain admin level access. Argo CD provides a multi-tenancy model to restrict what each `Application` is authorized to do using `AppProjects`, however it is not secure enough and if Argo CD is compromised, attackers will easily gain `cluster-admin` access to the cluster.\n\nSome manual steps will need to be performed by the Argo CD administrator in order to enable this feature.\n\n## What is Impersonation\nImpersonation is a feature in Kubernetes and enabled in the `kubectl` CLI client, using which, a user can act as another user through impersonation headers. For example, an admin could use this feature to debug an authorization policy by temporarily impersonating another user and seeing if a request was denied.\n\nImpersonation requests first authenticate as the requesting user, then switch to the impersonated user info.\n\n## Prerequisites\nIn a multi-team/multi-tenant environment, a team/tenant is typically granted access to a target namespace to self-manage their kubernetes resources in a declarative way.\nA typical tenant onboarding process looks like below:\n1. The platform admin creates a tenant namespace and the service account to be used for creating the resources is also created in the same tenant namespace.\n2. The platform admin creates one or more Role(s) to manage kubernetes resources in the tenant namespace.\n3. The platform admin creates one or more RoleBinding(s) to map the service account to the role(s) created in the previous steps.\n4. The platform admin can choose to use either the [apps-in-any-namespace](https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/) feature or provide access to tenants to create applications in the ArgoCD control plane namespace.\n5. If the platform admin chooses apps-in-any-namespace feature, tenants can self-service their Argo applications in their respective tenant namespaces and no additional access needs to be provided for the control plane namespace.\n\n## Implementation details\nIn order for an application to use a different service account for the application sync operation, the following steps needs to be performed:\n\n1. The impersonation feature flag should be enabled. Please refer the steps provided in [Enable application sync with impersonation feature](https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation/#enable-application-sync-with-impersonation-feature).\n\n2. The `AppProject` referenced by the `.spec.project` field of the `Application` must have the `DestinationServiceAccounts` mapping the destination server and namespace to a service account to be used for the sync operation. Please refer the steps provided in [Configuring destination service accounts](https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation/#configuring-destination-service-accounts).\n\n## Enable application sync with impersonation feature\nIn order to enable this feature, the Argo CD administrator must reconfigure the `application.sync.impersonation.enabled` settings in the `argocd-cm` ConfigMap as below:\n\n```\ndata:\n  application.sync.impersonation.enabled: \"true\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation", "title": "Application Sync using impersonation", "description": "This page covers the experimental alpha feature in Argo CD that allows control over the service account used for application sync operations, enhancing security in multi-tenant environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:41:13", "type": "overview", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Application Sync using impersonation - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/app-sync-using-impersonation/", "readthedocs-http-status": "200", "scrapeId": "154ea597-b262-4b35-aa4a-772de3fec8c7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Application Sync using impersonation\"?\n\nAssistant: Here are some code examples:\n\n### Enable application sync with impersonation feature\n```yaml\ndata:\n  application.sync.impersonation.enabled: \"true\"\n```\n\n### Disable application sync with impersonation feature\n```yaml\ndata:\n  application.sync.impersonation.enabled: \"false\"\n```\n\n### Using declarative yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\nspec:\n  description: Example Project\n  sourceRepos:\n    - '*'\n  destinations:\n    - '*'\n  destinationServiceAccounts:\n    - server: https://kubernetes.default.svc\n      namespace: guestbook\n      defaultServiceAccount: guestbook-deployer\n    - server: https://kubernetes.default.svc\n      namespace: guestbook-dev\n      defaultServiceAccount: guestbook-dev-deployer\n    - server: https://kubernetes.default.svc\n      namespace: guestbook-stage\n      defaultServiceAccount: guestbook-stage-deployer\n    - server: https://kubernetes.default.svc # catch-all configuration\n      namespace: '*'\n      defaultServiceAccount: default\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation", "title": "Application Sync using impersonation", "description": "This page covers the experimental alpha feature in Argo CD that allows control over the service account used for application sync operations, enhancing security in multi-tenant environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:41:13", "type": "code_examples", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Application Sync using impersonation - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/app-sync-using-impersonation/", "readthedocs-http-status": "200", "scrapeId": "154ea597-b262-4b35-aa4a-772de3fec8c7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Application Sync using impersonation\"?\n\nAssistant: Here are the recommended best practices:\n\n• Read the documentation carefully before enabling the impersonation feature to avoid potential security issues.\n• It is highly recommended to configure a valid service account as a catch-all configuration for all target destinations to avoid sync errors.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation", "title": "Application Sync using impersonation", "description": "This page covers the experimental alpha feature in Argo CD that allows control over the service account used for application sync operations, enhancing security in multi-tenant environments.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:41:13", "type": "best_practices", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Application Sync using impersonation - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/app-sync-using-impersonation/", "readthedocs-http-status": "200", "scrapeId": "154ea597-b262-4b35-aa4a-772de3fec8c7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Understanding JSON Structure\"?\n\nAssistant: This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.\n\nHere's a detailed explanation:\n\n\n## Introduction to JSON\nJSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate.\n\n## JSON Syntax\nJSON syntax is derived from JavaScript object notation. It consists of key/value pairs, where keys are strings and values can be strings, numbers, objects, arrays, booleans, or null.\n\n## Data Types in JSON\nThe data types supported in JSON include:\n1. String\n2. Number\n3. Object\n4. Array\n5. Boolean\n6. Null\n\n## Best Practices for JSON\nWhen working with JSON, consider the following best practices:\n- Use consistent naming conventions for keys.\n- Keep the structure simple and avoid deeply nested objects.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:43:07", "type": "overview", "page_metadata": {"language": "en", "title": "Architectural Overview - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "b1c850a1-97d2-4be7-aafd-bd87dc12159f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Understanding JSON Structure\"?\n\nAssistant: Here are some code examples:\n\n### Basic JSON Example\n```yaml\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"isStudent\": false,\n  \"courses\": [\"Math\", \"Science\"]\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:43:07", "type": "code_examples", "page_metadata": {"language": "en", "title": "Architectural Overview - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "b1c850a1-97d2-4be7-aafd-bd87dc12159f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Understanding JSON Structure\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use double quotes for keys and string values.\n• Avoid trailing commas in objects and arrays.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:43:07", "type": "best_practices", "page_metadata": {"language": "en", "title": "Architectural Overview - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "b1c850a1-97d2-4be7-aafd-bd87dc12159f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-rbac-cm.yaml example\"?\n\nAssistant: An example of an argocd-rbac-cm.yaml file used for configuring RBAC in Argo CD.\n\nHere's a detailed explanation:\n\n\n## Example Configuration\nAn example of an argocd-rbac-cm.yaml file:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-rbac-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  # policy.csv is an file containing user-defined RBAC policies and role definitions (optional).\n  # Policy rules are in the form:\n  #   p, subject, resource, action, object, effect\n  # Role definitions and bindings are in the form:\n  #   g, subject, inherited-subject\n  # See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.\n  policy.csv: |\n    # Grant all members of the group 'my-org:team-alpha; the ability to sync apps in 'my-project'\n    p, my-org:team-alpha, applications, sync, my-project/*, allow\n    # Grant all members of 'my-org:team-beta' admins\n    g, my-org:team-beta, role:admin\n\n  # it is possible to provide additional entries in this configmap to compose the final policy csv.\n  # In this case the key must follow the pattern 'policy.<any string>.csv'. Argo CD will concatenate\n  # all additional policies it finds with this pattern below the main one ('policy.csv'). This is useful\n  # to allow composing policies in config management tools like Kustomize, Helm, etc.\n  policy.overlay.csv: |\n    p, role:tester, applications, *, */*, allow\n    p, role:tester, projects, *, *, allow\n    g, my-org:team-qa, role:tester\n\n  # policy.default is the name of the default role which Argo CD will falls back to, when\n  # authorizing API requests (optional). If omitted or empty, users may be still be able to login,\n  # but will see no apps, projects, etc...\n  policy.default: role:readonly\n\n  # scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).\n  # If omitted, defaults to: '[groups]'. The scope value can be a string, or a list of strings.\n  scopes: '[cognito:groups, email]'\n\n  # matchMode configures the matchers function for casbin.\n  # There are two options for this, 'glob' for glob matcher or 'regex' for regex matcher. If omitted or mis-configured,\n  # will be set to 'glob' as default.\n  policy.matchMode: 'glob'\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml", "title": "argocd-rbac-cm.yaml example", "description": "An example of an argocd-rbac-cm.yaml file used for configuring RBAC in Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:59:03", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/argocd-rbac-cm-yaml/", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd-rbac-cm.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "935765e9-3180-41bb-8d96-c3a997239365", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-rbac-cm.yaml example\"?\n\nAssistant: Here are some code examples:\n\n### argocd-rbac-cm.yaml Configuration Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-rbac-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  policy.csv: |\n    p, my-org:team-alpha, applications, sync, my-project/*, allow\n    g, my-org:team-beta, role:admin\n  policy.overlay.csv: |\n    p, role:tester, applications, *, */*, allow\n    p, role:tester, projects, *, *, allow\n    g, my-org:team-qa, role:tester\n  policy.default: role:readonly\n  scopes: '[cognito:groups, email]'\n  policy.matchMode: 'glob'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml", "title": "argocd-rbac-cm.yaml example", "description": "An example of an argocd-rbac-cm.yaml file used for configuring RBAC in Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:59:03", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/argocd-rbac-cm-yaml/", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd-rbac-cm.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "935765e9-3180-41bb-8d96-c3a997239365", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd-rbac-cm.yaml example\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the 'policy.csv' key to define user-defined RBAC policies and role definitions.\n• Utilize the 'policy.overlay.csv' key for additional policy entries that can be composed with config management tools like Kustomize or Helm.\n• Set 'policy.default' to define a fallback role for users when authorizing API requests.\n• Configure 'scopes' to control which OIDC scopes are examined during RBAC enforcement.\n• Choose 'policy.matchMode' to set the matcher function for Casbin, with options for 'glob' or 'regex'.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml", "title": "argocd-rbac-cm.yaml example", "description": "An example of an argocd-rbac-cm.yaml file used for configuring RBAC in Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:59:03", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/argocd-rbac-cm-yaml/", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd-rbac-cm.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "935765e9-3180-41bb-8d96-c3a997239365", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-repo-creds.yaml example\"?\n\nAssistant: An example of an argocd-repo-creds.yaml file.\n\nHere's a detailed explanation:\n\n\n## argocd-repo-creds.yaml example\nAn example of an argocd-repo-creds.yaml file:\n\n```yaml\n# Repository credentials, for using the same credentials in multiple repositories.\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argoproj-https-creds\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repo-creds\nstringData:\n  url: https://github.com/argoproj\n  type: helm\n  password: my-password\n  username: my-username\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argoproj-ssh-creds\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repo-creds\nstringData:\n  url: git@github.com:argoproj-labs\n  type: helm\n  sshPrivateKey: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    ...\n    -----END OPENSSH PRIVATE KEY-----\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: github-creds\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repo-creds\nstringData:\n  url: https://github.com/argoproj\n  type: helm\n  githubAppID: 1\n  githubAppInstallationID: 2\n  githubAppPrivateKey: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    ...\n    -----END OPENSSH PRIVATE KEY-----\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: github-enterprise-creds\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repo-creds\nstringData:\n  url: https://github.com/argoproj\n  type: helm\n  githubAppID: 1\n  githubAppInstallationID: 2\n  githubAppEnterpriseBaseUrl: https://ghe.example.com/api/v3\n  githubAppPrivateKey: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    ...\n    -----END OPENSSH PRIVATE KEY-----\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds-yaml", "title": "argocd-repo-creds.yaml example", "description": "An example of an argocd-repo-creds.yaml file.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 23:59:41", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/argocd-repo-creds-yaml/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-version-slug": "stable", "title": "argocd-repo-creds.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "17c6840f-d4f6-47d6-a916-5b60ab02c716", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-repo-creds.yaml example\"?\n\nAssistant: Here are some code examples:\n\n### argocd-repo-creds.yaml example\n```yaml\n# Repository credentials, for using the same credentials in multiple repositories.\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argoproj-https-creds\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repo-creds\nstringData:\n  url: https://github.com/argoproj\n  type: helm\n  password: my-password\n  username: my-username\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argoproj-ssh-creds\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repo-creds\nstringData:\n  url: git@github.com:argoproj-labs\n  type: helm\n  sshPrivateKey: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    ...\n    -----END OPENSSH PRIVATE KEY-----\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: github-creds\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repo-creds\nstringData:\n  url: https://github.com/argoproj\n  type: helm\n  githubAppID: 1\n  githubAppInstallationID: 2\n  githubAppPrivateKey: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    ...\n    -----END OPENSSH PRIVATE KEY-----\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: github-enterprise-creds\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repo-creds\nstringData:\n  url: https://github.com/argoproj\n  type: helm\n  githubAppID: 1\n  githubAppInstallationID: 2\n  githubAppEnterpriseBaseUrl: https://ghe.example.com/api/v3\n  githubAppPrivateKey: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    ...\n    -----END OPENSSH PRIVATE KEY-----\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds-yaml", "title": "argocd-repo-creds.yaml example", "description": "An example of an argocd-repo-creds.yaml file.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 23:59:41", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/argocd-repo-creds-yaml/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-version-slug": "stable", "title": "argocd-repo-creds.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "17c6840f-d4f6-47d6-a916-5b60ab02c716", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-repositories.yaml example\"?\n\nAssistant: An example of an argocd-repositories.yaml file.\n\nHere's a detailed explanation:\n\n\n## Example of argocd-repositories.yaml\nAn example of an argocd-repositories.yaml file:\n\n```\n# Git repositories configure Argo CD with (optional).\n# This list is updated when configuring/removing repos from the UI/CLI\n# Note: the last example in the list would use a repository credential template, configured under \"argocd-repo-creds.yaml\".\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-private-https-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  url: https://github.com/argoproj/argocd-example-apps\n  password: my-password\n  username: my-username\n  project: my-project\n  insecure: \"true\" # Ignore validity of server's TLS certificate. Defaults to \"false\"\n  forceHttpBasicAuth: \"true\" # Skip auth method negotiation and force usage of HTTP basic auth. Defaults to \"false\"\n  enableLfs: \"true\" # Enable git-lfs for this repository. Defaults to \"false\"\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-private-ssh-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  url: ssh://git@github.com/argoproj/argocd-example-apps\n  sshPrivateKey: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    ...\n    -----END OPENSSH PRIVATE KEY-----\n  insecure: \"true\" # Do not perform a host key check for the server. Defaults to \"false\"\n  enableLfs: \"true\" # Enable git-lfs for this repository. Defaults to \"false\"\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: istio-helm-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts\n  name: istio.io\n  project: my-project\n  type: helm\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: private-helm-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  url: https://my-private-chart-repo.internal\n  name: private-repo\n  type: helm\n  password: my-password\n  username: my-username\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: private-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  url: https://github.com/argoproj/private-repo\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml", "title": "argocd-repositories.yaml example", "description": "An example of an argocd-repositories.yaml file.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:00:29", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd-repositories.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/argocd-repositories-yaml/", "scrapeId": "15f32576-5232-4b05-bd22-da9366f6d1a1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-repositories.yaml example\"?\n\nAssistant: Here are some code examples:\n\n### argocd-repositories.yaml Example\n```yaml\n# Git repositories configure Argo CD with (optional).\n# This list is updated when configuring/removing repos from the UI/CLI\n# Note: the last example in the list would use a repository credential template, configured under \"argocd-repo-creds.yaml\".\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-private-https-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  url: https://github.com/argoproj/argocd-example-apps\n  password: my-password\n  username: my-username\n  project: my-project\n  insecure: \"true\" # Ignore validity of server's TLS certificate. Defaults to \"false\"\n  forceHttpBasicAuth: \"true\" # Skip auth method negotiation and force usage of HTTP basic auth. Defaults to \"false\"\n  enableLfs: \"true\" # Enable git-lfs for this repository. Defaults to \"false\"\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-private-ssh-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  url: ssh://git@github.com/argoproj/argocd-example-apps\n  sshPrivateKey: |\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    ...\n    -----END OPENSSH PRIVATE KEY-----\n  insecure: \"true\" # Do not perform a host key check for the server. Defaults to \"false\"\n  enableLfs: \"true\" # Enable git-lfs for this repository. Defaults to \"false\"\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: istio-helm-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts\n  name: istio.io\n  project: my-project\n  type: helm\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: private-helm-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  url: https://my-private-chart-repo.internal\n  name: private-repo\n  type: helm\n  password: my-password\n  username: my-username\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: private-repo\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository\nstringData:\n  url: https://github.com/argoproj/private-repo\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml", "title": "argocd-repositories.yaml example", "description": "An example of an argocd-repositories.yaml file.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:00:29", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd-repositories.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/argocd-repositories-yaml/", "scrapeId": "15f32576-5232-4b05-bd22-da9366f6d1a1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-secret.yaml example\"?\n\nAssistant: An example of an argocd-secret.yaml file.\n\nHere's a detailed explanation:\n\n\n## argocd-secret.yaml example\nAn example of an argocd-secret.yaml file:\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-secret\n    app.kubernetes.io/part-of: argocd\ntype: Opaque\ndata:\n  # TLS certificate and private key for API server (required).\n  # Autogenerated with a self-signed certificate when keys are missing or invalid.\n  tls.crt:\n  tls.key:\n\n  # bcrypt hash of the admin password and its last modified time (required).\n  # Autogenerated to be the name of the argocd-server pod when missing.\n  admin.password:\n  admin.passwordMtime:\n\n  # random server signature key for session validation (required).\n  # Autogenerated when missing.\n  server.secretkey:\n\n  # Shared secrets for authenticating GitHub, GitLab, BitBucket webhook events (optional).\n  # See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/webhook.md for additional details.\n  # github webhook secret\n  webhook.github.secret: shhhh! it's a github secret\n  # gitlab webhook secret\n  webhook.gitlab.secret: shhhh! it's a gitlab secret\n  # bitbucket webhook secret\n  webhook.bitbucket.uuid: your-bitbucket-uuid\n  # bitbucket server webhook secret\n  webhook.bitbucketserver.secret: shhhh! it's a bitbucket server secret\n  # gogs server webhook secret\n  webhook.gogs.secret: shhhh! it's a gogs server secret\n\n  # an additional user password and its last modified time (see user definition in argocd-cm.yaml)\n  accounts.alice.password:\n  accounts.alice.passwordMtime:\n  # list of generated account tokens/api keys\n  accounts.alice.tokens: |\n    [{\"id\":\"123\",\"iat\":1583789194,\"exp\":1583789194}]\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml", "title": "argocd-secret.yaml example", "description": "An example of an argocd-secret.yaml file.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:03:25", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "argocd-secret.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/argocd-secret-yaml/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "055463c4-6c6f-4184-8599-c394e749ea87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-secret.yaml example\"?\n\nAssistant: Here are some code examples:\n\n### argocd-secret.yaml example\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-secret\n    app.kubernetes.io/part-of: argocd\ntype: Opaque\ndata:\n  # TLS certificate and private key for API server (required).\n  # Autogenerated with a self-signed certificate when keys are missing or invalid.\n  tls.crt:\n  tls.key:\n\n  # bcrypt hash of the admin password and its last modified time (required).\n  # Autogenerated to be the name of the argocd-server pod when missing.\n  admin.password:\n  admin.passwordMtime:\n\n  # random server signature key for session validation (required).\n  # Autogenerated when missing.\n  server.secretkey:\n\n  # Shared secrets for authenticating GitHub, GitLab, BitBucket webhook events (optional).\n  # See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/webhook.md for additional details.\n  # github webhook secret\n  webhook.github.secret: shhhh! it's a github secret\n  # gitlab webhook secret\n  webhook.gitlab.secret: shhhh! it's a gitlab secret\n  # bitbucket webhook secret\n  webhook.bitbucket.uuid: your-bitbucket-uuid\n  # bitbucket server webhook secret\n  webhook.bitbucketserver.secret: shhhh! it's a bitbucket server secret\n  # gogs server webhook secret\n  webhook.gogs.secret: shhhh! it's a gogs server secret\n\n  # an additional user password and its last modified time (see user definition in argocd-cm.yaml)\n  accounts.alice.password:\n  accounts.alice.passwordMtime:\n  # list of generated account tokens/api keys\n  accounts.alice.tokens: |\n    [{\"id\":\"123\",\"iat\":1583789194,\"exp\":1583789194}]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml", "title": "argocd-secret.yaml example", "description": "An example of an argocd-secret.yaml file.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:03:25", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "argocd-secret.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/argocd-secret-yaml/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "055463c4-6c6f-4184-8599-c394e749ea87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Cluster Bootstrapping\"?\n\nAssistant: This guide is for operators who have already installed Argo CD, and have a new cluster and are looking to install many apps in that cluster.\n\nHere's a detailed explanation:\n\n\n## App Of Apps Pattern\nDeclaratively specify one Argo CD app that consists only of other apps.\n\n![Application of Applications](https://argo-cd.readthedocs.io/en/stable/assets/application-of-applications.png)\n\n### Helm Example\nThis example shows how to use Helm to achieve this. You can, of course, use another tool if you like.\n\nA typical layout of your Git repository for this might be:\n\n```\n├── Chart.yaml\n├── templates\n│   ├── guestbook.yaml\n│   ├── helm-dependency.yaml\n│   ├── helm-guestbook.yaml\n│   └── kustomize-guestbook.yaml\n└── values.yaml\n```\n\n`Chart.yaml` is boiler-plate.\n\n`templates` contains one file for each child app, roughly:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n  destination:\n    namespace: argocd\n    server: {{ .Values.spec.destination.server }}\n  project: default\n  source:\n    path: guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps\n    targetRevision: HEAD\n```\n\nThe sync policy to automated + prune, so that child apps are automatically created, synced, and deleted when the manifest is changed, but you may wish to disable this. I've also added the finalizer, which will ensure that your apps are deleted correctly.\n\nFix the revision to a specific Git commit SHA to make sure that, even if the child apps repo changes, the app will only change when the parent app change that revision. Alternatively, you can set it to HEAD or a branch name.\n\nAs you probably want to override the cluster server, this is a templated values.\n\n`values.yaml` contains the default values:\n\n```\nspec:\n  destination:\n    server: https://kubernetes.default.svc\n```\n\nNext, you need to create and sync your parent app, e.g. via the CLI:\n\n```\nargocd app create apps \\\n    --dest-namespace argocd \\\n    --dest-server https://kubernetes.default.svc \\\n    --repo https://github.com/argoproj/argocd-example-apps.git \\\n    --path apps\nargocd app sync apps\n```\n\nThe parent app will appear as in-sync but the child apps will be out of sync:\n\n![New App Of Apps](https://argo-cd.readthedocs.io/en/stable/assets/new-app-of-apps.png)\n\n> NOTE: You may want to modify this behavior to bootstrap your cluster in waves; see [v1.8 upgrade notes](https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.7-1.8/) for information on changing this.\n\nYou can either sync via the UI, firstly filter by the correct label:\n\n![Filter Apps](https://argo-cd.readthedocs.io/en/stable/assets/filter-apps.png)\n\nThen select the \"out of sync\" apps and sync:\n\n![Sync Apps](https://argo-cd.readthedocs.io/en/stable/assets/sync-apps.png)\n\nOr, via the CLI:\n\n```\nargocd app sync -l app.kubernetes.io/instance=apps\n```\n\nView [the example on GitHub](https://github.com/argoproj/argocd-example-apps/tree/master/apps).\n\n## Cascading deletion\nIf you want to ensure that child-apps and all of their resources are deleted when the parent-app is deleted make sure to add the appropriate [finalizer](https://argo-cd.readthedocs.io/en/stable/user-guide/app_deletion/#about-the-deletion-finalizer) to your `Application` definition\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n ...\n```\n\n\n## Ignoring differences in child applications\nTo allow changes in child apps without triggering an out-of-sync status, or modification for debugging etc, the app of apps pattern works with [diff customization](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-guide/diffing/). The example below shows how to ignore changes to syncPolicy and other common values.\n\n```\nspec:\n  ...\n  syncPolicy:\n    ...\n    syncOptions:\n      - RespectIgnoreDifferences=true\n    ...\n  ignoreDifferences:\n    - group: \"*\"\n      kind: \"Application\"\n      namespace: \"*\"\n      jsonPointers:\n        # Allow manually disabling auto sync for apps, useful for debugging.\n        - /spec/syncPolicy/automated\n        # These are automatically updated on a regular basis. Not ignoring last applied configuration since it's used for computing diffs after normalization.\n        - /metadata/annotations/argocd.argoproj.io~1refresh\n        - /operation\n  ...\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping", "title": "Cluster Bootstrapping", "description": "This guide is for operators who have already installed Argo CD, and have a new cluster and are looking to install many apps in that cluster.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:10:00", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/cluster-bootstrapping/", "title": "Cluster Bootstrapping - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "7ca4cccb-dda1-4a26-814e-de59c89c0ba0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Cluster Bootstrapping\"?\n\nAssistant: Here are some code examples:\n\n### Helm Example - Git Repository Layout\n```yaml\n├── Chart.yaml\n├── templates\n│   ├── guestbook.yaml\n│   ├── helm-dependency.yaml\n│   ├── helm-guestbook.yaml\n│   └── kustomize-guestbook.yaml\n└── values.yaml\n```\n\n### Child Application Definition\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n  destination:\n    namespace: argocd\n    server: {{ .Values.spec.destination.server }}\n  project: default\n  source:\n    path: guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps\n    targetRevision: HEAD\n```\n\n### Parent App Creation via CLI\n```yaml\nargocd app create apps \\\n    --dest-namespace argocd \\\n    --dest-server https://kubernetes.default.svc \\\n    --repo https://github.com/argoproj/argocd-example-apps.git \\\n    --path apps\nargocd app sync apps\n```\n\n### Cascading Deletion Finalizer\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n ...\n```\n\n### Ignoring Differences in Child Applications\n```yaml\nspec:\n  ...\n  syncPolicy:\n    ...\n    syncOptions:\n      - RespectIgnoreDifferences=true\n    ...\n  ignoreDifferences:\n    - group: \"*\"\n      kind: \"Application\"\n      namespace: \"*\"\n      jsonPointers:\n        - /spec/syncPolicy/automated\n        - /metadata/annotations/argocd.argoproj.io~1refresh\n        - /operation\n  ...\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping", "title": "Cluster Bootstrapping", "description": "This guide is for operators who have already installed Argo CD, and have a new cluster and are looking to install many apps in that cluster.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:10:00", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/cluster-bootstrapping/", "title": "Cluster Bootstrapping - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "7ca4cccb-dda1-4a26-814e-de59c89c0ba0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Cluster Bootstrapping\"?\n\nAssistant: Here are the recommended best practices:\n\n• Only admins should have push access to the parent Application's source repository.\n• Admins should review pull requests to that repository, paying particular attention to the `project` field in each Application.\n• Fix the revision to a specific Git commit SHA to ensure stability in child apps.\n• Consider modifying sync behavior to bootstrap your cluster in waves.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping", "title": "Cluster Bootstrapping", "description": "This guide is for operators who have already installed Argo CD, and have a new cluster and are looking to install many apps in that cluster.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:10:00", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/cluster-bootstrapping/", "title": "Cluster Bootstrapping - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "7ca4cccb-dda1-4a26-814e-de59c89c0ba0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Cluster Management\"?\n\nAssistant: This guide is for operators looking to manage clusters on the CLI. If you want to use Kubernetes resources for this, check out Declarative Setup.\n\nHere's a detailed explanation:\n\n\n## Adding a cluster\nRun `argocd cluster add context-name`.\n\nIf you're unsure about the context names, run `kubectl config get-contexts` to get them all listed.\n\nThis will connect to the cluster and install the necessary resources for ArgoCD to connect to it.\nNote that you will need privileged access to the cluster.\n\n## Removing a cluster\nRun `argocd cluster rm context-name`.\n\nThis removes the cluster with the specified name.\n\nin-cluster cannot be removed\n\nThe `in-cluster` cluster cannot be removed with this. If you want to disable the `in-cluster` configuration, you need to update your `argocd-cm` ConfigMap. Set [`cluster.inClusterEnabled`](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/) to \"false\".\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-management", "title": "Cluster Management", "description": "This guide is for operators looking to manage clusters on the CLI. If you want to use Kubernetes resources for this, check out Declarative Setup.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:10:23", "type": "overview", "page_metadata": {"title": "Cluster Management - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/cluster-management/", "readthedocs-project-slug": "argo-cd", "scrapeId": "ab8ab9ed-4b5a-476a-a6df-e92ebbdef6cd", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-management", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-management/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Cluster Management\"?\n\nAssistant: Here are some code examples:\n\n### Add a cluster\n```yaml\nargocd cluster add context-name\n```\n\n### List context names\n```yaml\nkubectl config get-contexts\n```\n\n### Remove a cluster\n```yaml\nargocd cluster rm context-name\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-management", "title": "Cluster Management", "description": "This guide is for operators looking to manage clusters on the CLI. If you want to use Kubernetes resources for this, check out Declarative Setup.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:10:23", "type": "code_examples", "page_metadata": {"title": "Cluster Management - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/cluster-management/", "readthedocs-project-slug": "argo-cd", "scrapeId": "ab8ab9ed-4b5a-476a-a6df-e92ebbdef6cd", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-management", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-management/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Cluster Management\"?\n\nAssistant: Here are the recommended best practices:\n\n• You will need privileged access to the cluster to add it.\n• The `in-cluster` cluster cannot be removed with the standard command. Update the `argocd-cm` ConfigMap to disable it.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-management", "title": "Cluster Management", "description": "This guide is for operators looking to manage clusters on the CLI. If you want to use Kubernetes resources for this, check out Declarative Setup.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:10:23", "type": "best_practices", "page_metadata": {"title": "Cluster Management - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/cluster-management/", "readthedocs-project-slug": "argo-cd", "scrapeId": "ab8ab9ed-4b5a-476a-a6df-e92ebbdef6cd", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-management", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-management/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Config Management Plugins\"?\n\nAssistant: Argo CD's \"native\" config management tools are Helm, Jsonnet, and Kustomize. If you want to use a different config management tools, or if Argo CD's native tool support does not include a feature you need, you might need to turn to a Config Management Plugin (CMP).\n\nHere's a detailed explanation:\n\n\n## Installing a config management plugin\nAn operator can configure a plugin tool via a sidecar to repo-server. The following changes are required to configure a new plugin:\n\n### Write the plugin configuration file\nPlugins will be configured via a ConfigManagementPlugin manifest located inside the plugin container.\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: my-plugin\nspec:\n  version: v1.0\n  init:\n    command: [sh]\n    args: [-c, 'echo \"Initializing...\"']\n  generate:\n    command: [sh, -c]\n    args:\n      - |\n        echo \"{\\\"kind\\\": \\\"ConfigMap\\\", \\\"apiVersion\\\": \\\"v1\\\", \\\"metadata\\\": { \\\"name\\\": \\\"$ARGOCD_APP_NAME\\\", \\\"namespace\\\": \\\"$ARGOCD_APP_NAMESPACE\\\", \\\"annotations\\\": {\\\"Foo\\\": \\\"$ARGOCD_ENV_FOO\\\", \\\"KubeVersion\\\": \\\"$KUBE_VERSION\\\", \\\"KubeApiVersion\\\": \\\"$KUBE_API_VERSIONS\\\",\\\"Bar\\\": \\\"baz\\\"}}}\"\"\n  discover:\n    fileName: \"./subdir/s*.yaml\"\n    find:\n      glob: \"**/Chart.yaml\"\n      command: [sh, -c, find . -name env.yaml]\n  parameters:\n    static:\n      - name: string-param\n        title: Description of the string param\n        tooltip: Tooltip shown when the user hovers the\n        required: false\n        itemType: \"\"\n        collectionType: \"\"\n        string: default-string-value\n      - name: array-param\n        array: [default, items]\n        collectionType: array\n      - name: map-param\n        map:\n          some: value\n        collectionType: map\n    dynamic:\n      command: [echo, '[{\"name\": \"example-param\", \"string\": \"default-string-value\"}]']\n  preserveFileMode: false\n  provideGitCreds: false\n``` \n\n### Place the plugin configuration file in the sidecar\nArgo CD expects the plugin configuration file to be located at `/home/argocd/cmp-server/config/plugin.yaml` in the sidecar.\n\nIf you use a custom image for the sidecar, you can add the file directly to that image.\n\n```dockerfile\nWORKDIR /home/argocd/cmp-server/config/\nCOPY plugin.yaml ./\n```\n\nIf you use a stock image for the sidecar or would rather maintain the plugin configuration in a ConfigMap, just nest the plugin config file in a ConfigMap under the `plugin.yaml` key and mount the ConfigMap in the sidecar.\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-plugin-config\ndata:\n  plugin.yaml: |\n    apiVersion: argoproj.io/v1alpha1\n    kind: ConfigManagementPlugin\n    metadata:\n      name: my-plugin\n    spec:\n      version: v1.0\n      init:\n        command: [sh, -c, 'echo \"Initializing...\"']\n      generate:\n        command: [sh, -c, 'echo \"{\\\"kind\\\": \\\"ConfigMap\\\", \\\"apiVersion\\\": \\\"v1\\\", \\\"metadata\\\": { \\\"name\\\": \\\"$ARGOCD_APP_NAME\\\", \\\"namespace\\\": \\\"$ARGOCD_APP_NAMESPACE\\\", \\\"annotations\\\": {\\\"Foo\\\": \\\"$ARGOCD_ENV_FOO\\\", \\\"KubeVersion\\\": \\\"$KUBE_VERSION\\\", \\\"KubeApiVersion\\\": \\\"$KUBE_API_VERSIONS\\\",\\\"Bar\\\": \\\"baz\\\"}}}\"']\n      discover:\n        fileName: \"./subdir/s*.yaml\"\n``` \n\n### Register the plugin sidecar\nTo install a plugin, patch argocd-repo-server to run the plugin container as a sidecar, with argocd-cmp-server as its entrypoint. You can use either off-the-shelf or custom-built plugin image as sidecar image.\n\n```yaml\ncontainers:\n- name: my-plugin\n  command: [/var/run/argocd/argocd-cmp-server]\n  image: ubuntu\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 999\n  volumeMounts:\n    - mountPath: /var/run/argocd\n      name: var-files\n    - mountPath: /home/argocd/cmp-server/plugins\n      name: plugins\n    - mountPath: /home/argocd/cmp-server/config/plugin.yaml\n      subPath: plugin.yaml\n      name: my-plugin-config\n    - mountPath: /tmp\n      name: cmp-tmp\nvolumes:\n- configMap:\n    name: my-plugin-config\n  name: my-plugin-config\n- emptyDir: {}\n  name: cmp-tmp\n```\n\nDouble-check these items:\n1. Make sure to use `/var/run/argocd/argocd-cmp-server` as an entrypoint.\n2. Make sure that sidecar container is running as user 999.\n3. Make sure that plugin configuration file is present at `/home/argocd/cmp-server/config/plugin.yaml`. It can either be volume mapped via configmap or baked into image.\n\n## Using environment variables in your plugin\nPlugin commands have access to:\n1. The system environment variables of the sidecar\n2. Standard build environment variables\n3. Variables in the Application spec:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n     source:\n       plugin:\n         env:\n        - name: FOO\n          value: bar\n        - name: REV\n          value: test-$ARGOCD_APP_REVISION\n```\n\nBefore reaching the `init.command`, `generate.command`, and `discover.find.command` commands, Argo CD prefixes all user-supplied environment variables with `ARGOCD_ENV_`. This prevents users from directly setting potentially-sensitive environment variables.\n\n4. Parameters in the Application spec:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n    source:\n      plugin:\n        parameters:\n       - name: values-files\n         array: [values-dev.yaml]\n       - name: helm-parameters\n         map:\n           image.tag: v1.2.3\n```\n\nThe parameters are available as JSON in the `ARGOCD_APP_PARAMETERS` environment variable. The example above would produce this JSON:\n\n```json\n[{\"name\": \"values-files\", \"array\": [\"values-dev.yaml\"]}, {\"name\": \"helm-parameters\", \"map\": {\"image.tag\": \"v1.2.3\"}}]\n```\n\nNote: Parameter announcements, even if they specify defaults, are not sent to the plugin in `ARGOCD_APP_PARAMETERS`. Only parameters explicitly set in the Application spec are sent to the plugin. It is up to the plugin to apply the same defaults as the ones announced to the UI.\n\n## Debugging a CMP\nIf you are actively developing a sidecar-installed CMP, keep a few things in mind:\n1. If you are mounting plugin.yaml from a ConfigMap, you will have to restart the repo-server Pod so the plugin will pick up the changes.\n2. If you have baked plugin.yaml into your image, you will have to build, push, and force a re-pull of that image on the repo-server Pod so the plugin will pick up the changes.\n3. CMP errors are cached by the repo-server in Redis. Restarting the repo-server Pod will not clear the cache. Always do a \"Hard Refresh\" when actively developing a CMP so you have the latest output.\n4. Verify your sidecar has started properly by viewing the Pod and seeing that two containers are running `kubectl get pod -l app.kubernetes.io/component=repo-server -n argocd`\n5. Write log message to stderr and set the `--loglevel=info` flag in the sidecar. This will print everything written to stderr, even on successful command execution.\n\n## Other Common Errors\n| Error Message | Cause |\n| --- | --- |\n| `no matches for kind \"ConfigManagementPlugin\" in version \"argoproj.io/v1alpha1\"` | The `ConfigManagementPlugin` CRD was deprecated in Argo CD 2.4 and removed in 2.8. This error means you've tried to put the configuration for your plugin directly into Kubernetes as a CRD. Refer to this [section of documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#write-the-plugin-configuration-file) for how to write the plugin configuration file and place it properly in the sidecar. |\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins", "title": "Config Management Plugins", "description": "Argo CD's \"native\" config management tools are Helm, Jsonnet, and Kustomize. If you want to use a different config management tools, or if Argo CD's native tool support does not include a feature you need, you might need to turn to a Config Management Plugin (CMP).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:11:04", "type": "overview", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/config-management-plugins/", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Config Management Plugins - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "68359b24-da6b-4642-997c-e9cb62b36ebe", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Config Management Plugins\"?\n\nAssistant: Here are some code examples:\n\n### Plugin Configuration File Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: my-plugin\nspec:\n  version: v1.0\n  init:\n    command: [sh]\n    args: [-c, 'echo \"Initializing...\"']\n  generate:\n    command: [sh, -c]\n    args:\n      - |\n        echo \"{\\\"kind\\\": \\\"ConfigMap\\\", \\\"apiVersion\\\": \\\"v1\\\", \\\"metadata\\\": { \\\"name\\\": \\\"$ARGOCD_APP_NAME\\\", \\\"namespace\\\": \\\"$ARGOCD_APP_NAMESPACE\\\", \\\"annotations\\\": {\\\"Foo\\\": \\\"$ARGOCD_ENV_FOO\\\", \\\"KubeVersion\\\": \\\"$KUBE_VERSION\\\", \\\"KubeApiVersion\\\": \\\"$KUBE_API_VERSIONS\\\",\\\"Bar\\\": \\\"baz\\\"}}}\"\"\n  discover:\n    fileName: \"./subdir/s*.yaml\"\n    find:\n      glob: \"**/Chart.yaml\"\n      command: [sh, -c, find . -name env.yaml]\n  parameters:\n    static:\n      - name: string-param\n        title: Description of the string param\n        tooltip: Tooltip shown when the user hovers the\n        required: false\n        itemType: \"\"\n        collectionType: \"\"\n        string: default-string-value\n      - name: array-param\n        array: [default, items]\n        collectionType: array\n      - name: map-param\n        map:\n          some: value\n        collectionType: map\n    dynamic:\n      command: [echo, '[{\"name\": \"example-param\", \"string\": \"default-string-value\"}]']\n  preserveFileMode: false\n  provideGitCreds: false\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins", "title": "Config Management Plugins", "description": "Argo CD's \"native\" config management tools are Helm, Jsonnet, and Kustomize. If you want to use a different config management tools, or if Argo CD's native tool support does not include a feature you need, you might need to turn to a Config Management Plugin (CMP).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:11:04", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/config-management-plugins/", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Config Management Plugins - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "68359b24-da6b-4642-997c-e9cb62b36ebe", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Config Management Plugins\"?\n\nAssistant: Here are the recommended best practices:\n\n• Plugins are granted a level of trust in the Argo CD system, so it is important to implement plugins securely.\n• Argo CD administrators should only install plugins from trusted sources, and they should audit plugins to weigh their particular risks and benefits.\n• Sanitize/escape user input in your plugin to prevent malicious input from causing unwanted behavior.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins", "title": "Config Management Plugins", "description": "Argo CD's \"native\" config management tools are Helm, Jsonnet, and Kustomize. If you want to use a different config management tools, or if Argo CD's native tool support does not include a feature you need, you might need to turn to a Config Management Plugin (CMP).", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:11:04", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/config-management-plugins/", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Config Management Plugins - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "68359b24-da6b-4642-997c-e9cb62b36ebe", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Argo CD Core\"?\n\nAssistant: Argo CD Core is a different installation that runs Argo CD in headless mode, providing a fully functional GitOps engine for Kubernetes without certain features.\n\nHere's a detailed explanation:\n\n\n## Introduction\nArgo CD Core is a different installation that runs Argo CD in headless mode. With this installation, you will have a fully functional GitOps engine capable of getting the desired state from Git repositories and applying it in Kubernetes.\n\nThe following groups of features won't be available in this installation:\n\n- Argo CD RBAC model\n- Argo CD API\n- Argo CD Notification Controller\n- OIDC based authentication\n\nThe following features will be partially available (see the usage section below for more details):\n\n- Argo CD Web UI\n- Argo CD CLI\n- Multi-tenancy (strictly GitOps based on git push permissions)\n\nA few use-cases that justify running Argo CD Core are:\n\n- As a cluster admin, I want to rely on Kubernetes RBAC only.\n- As a devops engineer, I don't want to learn a new API or depend on another CLI to automate my deployments. I want to rely on the Kubernetes API only.\n- As a cluster admin, I don't want to provide Argo CD UI or Argo CD CLI to developers.\n\n## Architecture\nBecause Argo CD is designed with a component based architecture in mind, it is possible to have a more minimalist installation. In this case fewer components are installed and yet the main GitOps functionality remains operational.\n\nIn the diagram below, the Core box, shows the components that will be installed while opting for Argo CD Core:\n\n![Argo CD Core](https://argo-cd.readthedocs.io/en/stable/assets/argocd-core-components.png)\n\nNote that even if the Argo CD controller can run without Redis, it isn't recommended. The Argo CD controller uses Redis as an important caching mechanism reducing the load on Kube API and in Git. For this reason, Redis is also included in this installation method.\n\n## Installing\nArgo CD Core can be installed by applying a single manifest file that contains all the required resources.\n\n## Using\nOnce Argo CD Core is installed, users will be able to interact with it by relying on GitOps. The available Kubernetes resources will be the `Application` and the `ApplicationSet` CRDs. By using those resources, users will be able to deploy and manage applications in Kubernetes.\n\nIt is still possible to use Argo CD CLI even when running Argo CD Core. In this case, the CLI will spawn a local API server process that will be used to handle the CLI command. Once the command is concluded, the local API Server process will also be terminated. This happens transparently for the user with no additional command required. Note that Argo CD Core will rely only on Kubernetes RBAC and the user (or the process) invoking the CLI needs to have access to the Argo CD namespace with the proper permission in the `Application` and `ApplicationSet` resources for executing a given command.\n\nTo use Argo CD CLI in core mode, it is required to pass the `--core` flag with the `login` subcommand.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/core", "title": "Argo CD Core", "description": "Argo CD Core is a different installation that runs Argo CD in headless mode, providing a fully functional GitOps engine for Kubernetes without certain features.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:11:35", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/core/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Argo CD Core - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1c4983f7-6cd0-45a7-89b6-f99f6cb195ec", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/core", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/core/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Argo CD Core\"?\n\nAssistant: Here are some code examples:\n\n### Installing Argo CD Core\n```yaml\nexport ARGOCD_VERSION=<desired argo cd release version (e.g. v2.7.0)>\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/$ARGOCD_VERSION/manifests/core-install.yaml\n```\n\n### Using Argo CD CLI in Core Mode\n```yaml\nkubectl config set-context --current --namespace=argocd # change current kube context to argocd namespace\nargocd login --core\n```\n\n### Starting Argo CD Web UI Locally\n```yaml\nargocd admin dashboard -n argocd\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/core", "title": "Argo CD Core", "description": "Argo CD Core is a different installation that runs Argo CD in headless mode, providing a fully functional GitOps engine for Kubernetes without certain features.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:11:35", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/core/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Argo CD Core - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1c4983f7-6cd0-45a7-89b6-f99f6cb195ec", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/core", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/core/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Argo CD Core\"?\n\nAssistant: Here are the recommended best practices:\n\n• Even if the Argo CD controller can run without Redis, it isn't recommended. It is important for caching and reducing load on Kube API and Git.\n• When using Argo CD CLI in core mode, ensure to pass the --core flag with the login subcommand.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/core", "title": "Argo CD Core", "description": "Argo CD Core is a different installation that runs Argo CD in headless mode, providing a fully functional GitOps engine for Kubernetes without certain features.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:11:35", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/core/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Argo CD Core - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1c4983f7-6cd0-45a7-89b6-f99f6cb195ec", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/core", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/core/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Custom Styles\"?\n\nAssistant: Argo CD imports the majority of its UI stylesheets from the argo-ui project. Sometimes, it may be desired to customize certain components of the UI for branding purposes or to help distinguish between multiple instances of Argo CD running in different environments. Such custom styling can be applied either by supplying a URL to a remotely hosted CSS file, or by loading a CSS file directly onto the argocd-server container. Both mechanisms are driven by modifying the argocd-cm configMap.\n\nHere's a detailed explanation:\n\n\n## Adding Styles Via Remote URL\nThe first method simply requires the addition of the remote URL to the argocd-cm configMap:\n\n### argocd-cm\n\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  ...\n  name: argocd-cm\ndata:\n  ui.cssurl: \"https://www.example.com/my-styles.css\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles", "title": "Custom Styles", "description": "Argo CD imports the majority of its UI stylesheets from the argo-ui project. Sometimes, it may be desired to customize certain components of the UI for branding purposes or to help distinguish between multiple instances of Argo CD running in different environments. Such custom styling can be applied either by supplying a URL to a remotely hosted CSS file, or by loading a CSS file directly onto the argocd-server container. Both mechanisms are driven by modifying the argocd-cm configMap.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:11:53", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "Custom Styles - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/custom-styles/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "e0ac998b-8f81-44ff-aedd-6078bd67ac05", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Custom Styles\"?\n\nAssistant: Here are some code examples:\n\n### argocd-cm\n```yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  ...\n  name: argocd-cm\ndata:\n  ui.cssurl: \"https://www.example.com/my-styles.css\"\n\n```\n\n### argocd-cm\n```yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  ...\n  name: argocd-cm\ndata:\n  ui.cssurl: \"./custom/my-styles.css\"\n\n```\n\n### argocd-styles-cm\n```yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  ...\n  name: argocd-styles-cm\ndata:\n  my-styles.css: |\n    .sidebar {\n      background: linear-gradient(to bottom, #999, #777, #333, #222, #111);\n    }\n\n```\n\n### argocd-server\n```yaml\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: argocd-server\n  ...\nspec:\n  template:\n    ...\n    spec:\n      containers:\n      - command:\n        ...\n        volumeMounts:\n        ...\n        - mountPath: /shared/app/custom\n          name: styles\n      ...\n      volumes:\n      ...\n      - configMap:\n          name: argocd-styles-cm\n        name: styles\n\n```\n\n### argocd-cm\n```yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  ...\n  name: argocd-cm\ndata:\n    ui.bannercontent: \"Banner message linked to a URL\"\n    ui.bannerurl: \"www.bannerlink.com\"\n    ui.bannerpermanent: \"true\"\n    ui.bannerposition: \"bottom\"\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles", "title": "Custom Styles", "description": "Argo CD imports the majority of its UI stylesheets from the argo-ui project. Sometimes, it may be desired to customize certain components of the UI for branding purposes or to help distinguish between multiple instances of Argo CD running in different environments. Such custom styling can be applied either by supplying a URL to a remotely hosted CSS file, or by loading a CSS file directly onto the argocd-server container. Both mechanisms are driven by modifying the argocd-cm configMap.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:11:53", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "Custom Styles - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/custom-styles/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "e0ac998b-8f81-44ff-aedd-6078bd67ac05", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Custom Styles\"?\n\nAssistant: Here are the recommended best practices:\n\n• The cssurl should be specified relative to the \"/shared/app\" directory; not as an absolute path.\n• The CSS file should be mounted within a subdirectory of the \"/shared/app\" directory (e.g. \"/shared/app/custom\"). Otherwise, the file will likely fail to be imported by the browser with an \"incorrect MIME type\" error.\n• It is recommended to test out the styles you wish to apply first by making use of your browser's built-in developer tools. For a more full-featured experience, you may wish to build a separate project using the Argo CD UI dev server.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles", "title": "Custom Styles", "description": "Argo CD imports the majority of its UI stylesheets from the argo-ui project. Sometimes, it may be desired to customize certain components of the UI for branding purposes or to help distinguish between multiple instances of Argo CD running in different environments. Such custom styling can be applied either by supplying a URL to a remotely hosted CSS file, or by loading a CSS file directly onto the argocd-server container. Both mechanisms are driven by modifying the argocd-cm configMap.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:11:53", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "Custom Styles - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/custom-styles/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "e0ac998b-8f81-44ff-aedd-6078bd67ac05", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Custom Tooling\"?\n\nAssistant: Argo CD bundles preferred versions of its supported templating tools (helm, kustomize, ks, jsonnet) as part of its container images. Sometimes, it may be desired to use a specific version of a tool other than what Argo CD bundles.\n\nHere's a detailed explanation:\n\n\n## Adding Tools Via Volume Mounts\nThe first technique is to use an `init` container and a `volumeMount` to copy a different version of a tool into the repo-server container. In the following example, an init container is overwriting the helm binary with a different version than what is bundled in Argo CD:\n\n```\n    spec:\n      # 1. Define an emptyDir volume which will hold the custom binaries\n      volumes:\n      - name: custom-tools\n        emptyDir: {}\n      # 2. Use an init container to download/copy custom binaries into the emptyDir\n      initContainers:\n      - name: download-tools\n        image: alpine:3.8\n        command: [sh, -c]\n        args:\n        - wget -qO- https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz | tar -xvzf - &&\n          mv linux-amd64/helm /custom-tools/\n        volumeMounts:\n        - mountPath: /custom-tools\n          name: custom-tools\n      # 3. Volume mount the custom binary to the bin directory (overriding the existing version)\n      containers:\n      - name: argocd-repo-server\n        volumeMounts:\n        - mountPath: /usr/local/bin/helm\n          name: custom-tools\n          subPath: helm\n``\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom_tools", "title": "Custom Tooling", "description": "Argo CD bundles preferred versions of its supported templating tools (helm, kustomize, ks, jsonnet) as part of its container images. Sometimes, it may be desired to use a specific version of a tool other than what Argo CD bundles.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:12:17", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/custom_tools/", "readthedocs-project-slug": "argo-cd", "title": "Custom Tooling - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "1deb4ce7-09d6-417c-a329-0ebe2c8f56e4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom_tools", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom_tools/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Custom Tooling\"?\n\nAssistant: Here are some code examples:\n\n### Adding Tools Via Volume Mounts Example\n```yaml\n```\n    spec:\n      # 1. Define an emptyDir volume which will hold the custom binaries\n      volumes:\n      - name: custom-tools\n        emptyDir: {}\n      # 2. Use an init container to download/copy custom binaries into the emptyDir\n      initContainers:\n      - name: download-tools\n        image: alpine:3.8\n        command: [sh, -c]\n        args:\n        - wget -qO- https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz | tar -xvzf - &&\n          mv linux-amd64/helm /custom-tools/\n        volumeMounts:\n        - mountPath: /custom-tools\n          name: custom-tools\n      # 3. Volume mount the custom binary to the bin directory (overriding the existing version)\n      containers:\n      - name: argocd-repo-server\n        volumeMounts:\n        - mountPath: /usr/local/bin/helm\n          name: custom-tools\n          subPath: helm\n``\n```\n\n### BYOI (Build Your Own Image) Example\n```yaml\n```\nFROM argoproj/argocd:v2.5.4 # Replace tag with the appropriate argo version\n\n# Switch to root for the ability to perform install\nUSER root\n\n# Install tools needed for your repo-server to retrieve & decrypt secrets, render manifests\n# (e.g. curl, awscli, gpg, sops)\nRUN apt-get update && \\\n    apt-get install -y \\\n        curl \\\n        awscli \\\n        gpg && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \\\n    curl -o /usr/local/bin/sops -L https://github.com/mozilla/sops/releases/download/3.2.0/sops-3.2.0.linux && \\\n    chmod +x /usr/local/bin/sops\n\n# Switch back to non-root user\nUSER $ARGOCD_USER_ID\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom_tools", "title": "Custom Tooling", "description": "Argo CD bundles preferred versions of its supported templating tools (helm, kustomize, ks, jsonnet) as part of its container images. Sometimes, it may be desired to use a specific version of a tool other than what Argo CD bundles.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:12:17", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/custom_tools/", "readthedocs-project-slug": "argo-cd", "title": "Custom Tooling - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "1deb4ce7-09d6-417c-a329-0ebe2c8f56e4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom_tools", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/custom_tools/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Deep Links\"?\n\nAssistant: Deep links allow users to quickly redirect to third-party systems, such as Splunk, Datadog, etc. from the Argo CD user interface.\n\nHere's a detailed explanation:\n\n\n## Configuring Deep Links\nThe configuration for Deep Links is present in `argocd-cm` as `<location>.links` fields where `<location>` determines where it will be displayed. The possible values for `<location>` are:\n\n- `project`: all links under this field will show up in the project tab in the Argo CD UI\n- `application`: all links under this field will show up in the application summary tab\n- `resource`: all links under this field will show up in the resource (deployments, pods, services, etc.) summary tab\n\nEach link in the list has five subfields:\n\n1. `title`: title/tag that will be displayed in the UI corresponding to that link\n2. `url`: the actual URL where the deep link will redirect to, this field can be templated to use data from the corresponding application, project or resource objects (depending on where it is located). This uses [text/template](https://pkg.go.dev/text/template) pkg for templating\n3. `description` (optional): a description for what the deep link is about\n4. `icon.class` (optional): a font-awesome icon class to be used when displaying the links in dropdown menus\n5. `if` (optional): a conditional statement that results in either `true` or `false`, it also has access to the same data as the `url` field. If the condition resolves to `true` the deep link will be displayed - else it will be hidden. If the field is omitted, by default the deep links will be displayed. This uses [expr-lang/expr](https://github.com/expr-lang/expr/tree/master/docs) for evaluating conditions\n\nNote\n\nFor resources of kind Secret the data fields are redacted but other fields are accessible for templating the deep links.\n\nWarning\n\nMake sure to validate the url templates and inputs to prevent data leaks or possible generation of any malicious links.\n\nAs mentioned earlier the links and conditions can be templated to use data from the resource, each category of links can access different types of data linked to that resource. Overall we have these 4 resources available for templating in the system:\n\n- `app` or `application`: this key is used to access the application resource data.\n- `resource`: this key is used to access values for the actual k8s resource.\n- `cluster`: this key is used to access the related destination cluster data like name, server, namespaces etc.\n- `project`: this key is used to access the project resource data.\n\nThe above resources are accessible in particular link categories, here's a list of resources available in each category:\n\n- `resource.links`: `resource`, `application`, `cluster` and `project`\n- `application.links`: `app`/ `application` and `cluster`\n- `project.links`: `project`\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/deep_links", "title": "Deep Links", "description": "Deep links allow users to quickly redirect to third-party systems, such as Splunk, Datadog, etc. from the Argo CD user interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:15:46", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/operator-manual/deep_links/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "Deep Links - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "7010bb64-c9b8-46ea-94d3-4de54a49eb3f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/deep_links", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/deep_links/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Deep Links\"?\n\nAssistant: Here are some code examples:\n\n### Example argocd-cm.yaml file with deep links\n```yaml\n  # sample project level links\n  project.links: |\n    - url: https://myaudit-system.com?project={{.project.metadata.name}}\n      title: Audit\n      description: system audit logs\n      icon.class: \"fa-book\"\n  # sample application level links\n  application.links: |\n    # pkg.go.dev/text/template is used for evaluating url templates\n    - url: https://mycompany.splunk.com?search={{.app.spec.destination.namespace}}&env={{.project.metadata.labels.env}}\n      title: Splunk\n    # conditionally show link e.g. for specific project\n    # github.com/expr-lang/expr is used for evaluation of conditions\n    - url: https://mycompany.splunk.com?search={{.app.spec.destination.namespace}}\n      title: Splunk\n      if: application.spec.project == \"default\"\n    - url: https://{{.app.metadata.annotations.splunkhost}}?search={{.app.spec.destination.namespace}}\n      title: Splunk\n      if: app.metadata.annotations.splunkhost != \"\"\n  # sample resource level links\n  resource.links: |\n    - url: https://mycompany.splunk.com?search={{.resource.metadata.name}}&env={{.project.metadata.labels.env}}\n      title: Splunk\n      if: resource.kind == \"Pod\" || resource.kind == \"Deployment\"\n\n    # sample checking a tag exists that contains - or / and how to alternatively access it\n    - url: https://mycompany.splunk.com?tag={{ index .resource.metadata.labels \"some.specific.kubernetes.like/tag\" }}\n      title: Tag Service\n      if: resource.metadata.labels[\"some.specific.kubernetes.like/tag\"] != nil && resource.metadata.labels[\"some.specific.kubernetes.like/tag\"] != \"\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/deep_links", "title": "Deep Links", "description": "Deep links allow users to quickly redirect to third-party systems, such as Splunk, Datadog, etc. from the Argo CD user interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:15:46", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/operator-manual/deep_links/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "Deep Links - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "7010bb64-c9b8-46ea-94d3-4de54a49eb3f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/deep_links", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/deep_links/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Deep Links\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to validate the url templates and inputs to prevent data leaks or possible generation of any malicious links.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/deep_links", "title": "Deep Links", "description": "Deep links allow users to quickly redirect to third-party systems, such as Splunk, Datadog, etc. from the Argo CD user interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:15:46", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/operator-manual/deep_links/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "Deep Links - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "7010bb64-c9b8-46ea-94d3-4de54a49eb3f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/deep_links", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/deep_links/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Disaster Recovery\"?\n\nAssistant: You can use `argocd admin` to import and export all Argo CD data.\n\nHere's a detailed explanation:\n\n\n## Overview\nYou can use `argocd admin` to import and export all Argo CD data.\n\nMake sure you have `~/.kube/config` pointing to your Argo CD cluster.\n\n## Check Argo CD Version\nFigure out what version of Argo CD you're running:\n\n```\nargocd version | grep server\n# ...\nexport VERSION=v1.0.1\n```\n\n## Export to a Backup\nExport to a backup:\n\n```\ndocker run -v ~/.kube:/home/argocd/.kube --rm quay.io/argoproj/argocd:$VERSION argocd admin export > backup.yaml\n```\n\n## Import from a Backup\nImport from a backup:\n\n```\ndocker run -i -v ~/.kube:/home/argocd/.kube --rm quay.io/argoproj/argocd:$VERSION argocd admin import - < backup.yaml\n```\n\n## Note\nIf you are running Argo CD on a namespace different than default remember to pass the namespace parameter (-n ). 'argocd admin export' will not fail if you run it in the wrong namespace.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/disaster_recovery", "title": "Disaster Recovery", "description": "You can use `argocd admin` to import and export all Argo CD data.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:17:00", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/operator-manual/disaster_recovery/", "readthedocs-version-slug": "stable", "title": "Disaster Recovery - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b68e0d99-9602-4cc1-8269-28ace9a910ae", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/disaster_recovery", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/disaster_recovery/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Disaster Recovery\"?\n\nAssistant: Here are some code examples:\n\n### Check Argo CD Version\n```yaml\nargocd version | grep server\n# ...\nexport VERSION=v1.0.1\n```\n\n### Export to a Backup\n```yaml\ndocker run -v ~/.kube:/home/argocd/.kube --rm quay.io/argoproj/argocd:$VERSION argocd admin export > backup.yaml\n```\n\n### Import from a Backup\n```yaml\ndocker run -i -v ~/.kube:/home/argocd/.kube --rm quay.io/argoproj/argocd:$VERSION argocd admin import - < backup.yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/disaster_recovery", "title": "Disaster Recovery", "description": "You can use `argocd admin` to import and export all Argo CD data.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:17:00", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/operator-manual/disaster_recovery/", "readthedocs-version-slug": "stable", "title": "Disaster Recovery - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b68e0d99-9602-4cc1-8269-28ace9a910ae", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/disaster_recovery", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/disaster_recovery/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Disaster Recovery\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure you have `~/.kube/config` pointing to your Argo CD cluster.\n• If you are running Argo CD on a namespace different than default remember to pass the namespace parameter (-n ).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/disaster_recovery", "title": "Disaster Recovery", "description": "You can use `argocd admin` to import and export all Argo CD data.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:17:00", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/operator-manual/disaster_recovery/", "readthedocs-version-slug": "stable", "title": "Disaster Recovery - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b68e0d99-9602-4cc1-8269-28ace9a910ae", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/disaster_recovery", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/disaster_recovery/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Dynamic Cluster Distribution\"?\n\nAssistant: This page covers the dynamic cluster distribution feature in Argo CD, which allows for runtime distribution of clusters among application controller replicas.\n\nHere's a detailed explanation:\n\n\n## Dynamic Cluster Distribution\nAlpha Feature (Since v2.9.0)\n\nThis is an experimental, alpha-quality feature. It may be removed in future releases or modified in backwards-incompatible ways.\n\n_Current Status: [Alpha][1] (Since v2.9.0)_\n\nBy default, clusters are assigned to shards indefinitely. For users of the default, hash-based sharding algorithm, this static assignment is fine: shards will always be roughly-balanced by the hash-based algorithm. But for users of the round-robin or other custom shard assignment algorithms, this static assignment can lead to unbalanced shards when replicas are added or removed.\n\nStarting v2.9, Argo CD supports a dynamic cluster distribution feature. When replicas are added or removed, the sharding algorithm is re-run to ensure that the clusters are distributed according to the algorithm. If the algorithm is well-balanced, like round-robin, then the shards will be well-balanced.\n\nPreviously, the shard count was set via the ARGOCD_CONTROLLER_REPLICAS environment variable. Changing the environment variable forced a restart of all application controller pods. Now, the shard count is set via the replicas field of the deployment, which does not require a restart of the application controller pods.\n\n## Enabling Dynamic Distribution of Clusters\nThis feature is disabled by default while it is in alpha. In order to utilize the feature, the manifests manifests/ha/base/controller-deployment/ can be applied as a Kustomize overlay. This overlay sets the StatefulSet replicas to 0 and deploys the application controller as a Deployment. Also, you must set the environment ARGOCD_ENABLE_DYNAMIC_CLUSTER_DISTRIBUTION to true when running the Application Controller as a deployment.\n\nImportant\n\nThe use of a Deployment instead of a StatefulSet is an implementation detail which may change in future versions of this feature. Therefore, the directory name of the Kustomize overlay may change as well. Monitor the release notes to avoid issues.\n\nNote the introduction of new environment variable ARGOCD_CONTROLLER_HEARTBEAT_TIME. The environment variable is explained in working of Dynamic Distribution Heartbeat Process.\n\n## Working of Dynamic Distribution\nTo accomplish runtime distribution of clusters, the Application Controller uses a ConfigMap to associate a controller pod with a shard number and a heartbeat to ensure that controller pods are still alive and handling their shard, in effect, their share of the work.\n\nThe Application Controller will create a new ConfigMap named argocd-app-controller-shard-cm to store the Controller <-> Shard mapping. The mapping would look like below for each shard:\n\n```\nShardNumber    : 0\nControllerName : \"argocd-application-controller-hydrxyt\"\nHeartbeatTime  : \"2009-11-17 20:34:58.651387237 +0000 UTC\"\n```\n\n- `ControllerName`: Stores the hostname of the Application Controller pod\n- `ShardNumber` : Stores the shard number managed by the controller pod\n- `HeartbeatTime`: Stores the last time this heartbeat was updated.\n\nController Shard Mapping is updated in the ConfigMap during each readiness probe check of the pod, that is every 10 seconds (otherwise as configured). The controller will acquire the shard during every iteration of readiness probe check and try to update the ConfigMap with the HeartbeatTime. The default HeartbeatDuration after which the heartbeat should be updated is 10 seconds. If the ConfigMap was not updated for any controller pod for more than 3 * HeartbeatDuration, then the readiness probe for the application pod is marked as Unhealthy. To increase the default HeartbeatDuration, you can set the environment variable ARGOCD_CONTROLLER_HEARTBEAT_TIME with the desired value.\n\nThe new sharding mechanism does not monitor the environment variable ARGOCD_CONTROLLER_REPLICAS but instead reads the replica count directly from the Application Controller Deployment. The controller identifies the change in the number of replicas by comparing the replica count in the Application Controller Deployment and the number of mappings in the argocd-app-controller-shard-cm ConfigMap.\n\nIn the scenario when the number of Application Controller replicas increases, a new entry is added to the list of mappings in the argocd-app-controller-shard-cm ConfigMap and the cluster distribution is triggered to re-distribute the clusters.\n\nIn the scenario when the number of Application Controller replicas decreases, the mappings in the argocd-app-controller-shard-cm ConfigMap are reset and every controller acquires the shard again thus triggering the re-distribution of the clusters.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution", "title": "Dynamic Cluster Distribution", "description": "This page covers the dynamic cluster distribution feature in Argo CD, which allows for runtime distribution of clusters among application controller replicas.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:17:21", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Dynamic Cluster Distribution - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/dynamic-cluster-distribution/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "de16a7e9-ba44-4468-b646-43db7d26faf6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Dynamic Cluster Distribution\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap Example\n```yaml\nShardNumber    : 0\nControllerName : \"argocd-application-controller-hydrxyt\"\nHeartbeatTime  : \"2009-11-17 20:34:58.651387237 +0000 UTC\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution", "title": "Dynamic Cluster Distribution", "description": "This page covers the dynamic cluster distribution feature in Argo CD, which allows for runtime distribution of clusters among application controller replicas.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:17:21", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Dynamic Cluster Distribution - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/dynamic-cluster-distribution/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "de16a7e9-ba44-4468-b646-43db7d26faf6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Dynamic Cluster Distribution\"?\n\nAssistant: Here are the recommended best practices:\n\n• Monitor the release notes to avoid issues with the Kustomize overlay directory name changes.\n• To increase the default HeartbeatDuration, set the environment variable ARGOCD_CONTROLLER_HEARTBEAT_TIME with the desired value.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution", "title": "Dynamic Cluster Distribution", "description": "This page covers the dynamic cluster distribution feature in Argo CD, which allows for runtime distribution of clusters among application controller replicas.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:17:21", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Dynamic Cluster Distribution - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/dynamic-cluster-distribution/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "de16a7e9-ba44-4468-b646-43db7d26faf6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Feature Maturity\"?\n\nAssistant: Argo CD features may be marked with a certain status to indicate their stability and maturity. These are the statuses of non-stable features in Argo CD:\n\nHere's a detailed explanation:\n\n\n## Overview\n| Feature | Introduced | Status |\n| --- | --- | --- |\n| [AppSet Progressive Syncs](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs/) | v2.6.0 | Alpha |\n| [Proxy Extensions](https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions/) | v2.7.0 | Alpha |\n| [Skip Application Reconcile](https://argo-cd.readthedocs.io/en/stable/user-guide/skip_reconcile/) | v2.7.0 | Alpha |\n| [AppSets in any Namespace](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace/) | v2.8.0 | Beta |\n| [Cluster Sharding: round-robin](https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/#argocd-application-controller) | v2.8.0 | Alpha |\n| [Dynamic Cluster Distribution](https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution/) | v2.9.0 | Alpha |\n| [Server Side Diff](https://argo-cd.readthedocs.io/en/stable/user-guide/diff-strategies/#server-side-diff) | v2.10.0 | Beta |\n| [Cluster Sharding: consistent-hashing](https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/#argocd-application-controller) | v2.12.0 | Alpha |\n| [Service Account Impersonation](https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation/) | v2.13.0 | Alpha |\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/feature-maturity", "title": "Feature Maturity", "description": "Argo CD features may be marked with a certain status to indicate their stability and maturity. These are the statuses of non-stable features in Argo CD:", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:17:34", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Feature Maturity - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/operator-manual/feature-maturity/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "3b82f1c8-e97d-4a77-8a4c-08c017996bcf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/feature-maturity", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/feature-maturity/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Feature Maturity\"?\n\nAssistant: Here are the recommended best practices:\n\n• Using Alpha/Beta features risks\n• It is highly suggested for Argo users not to rely on these features in production environments, especially if you do not have control over the Argo CD upgrades.\n• Removal of Alpha features may modify your resources to an unpredictable state after Argo CD is upgraded.\n• You should make sure to document which features are in use and review the release notes before upgrading.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/feature-maturity", "title": "Feature Maturity", "description": "Argo CD features may be marked with a certain status to indicate their stability and maturity. These are the statuses of non-stable features in Argo CD:", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:17:34", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Feature Maturity - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/operator-manual/feature-maturity/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "3b82f1c8-e97d-4a77-8a4c-08c017996bcf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/feature-maturity", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/feature-maturity/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Resource Health\"?\n\nAssistant: Argo CD provides built-in health assessment for several standard Kubernetes types, which is then surfaced to the overall Application health status as a whole.\n\nHere's a detailed explanation:\n\n\n## Overview\nArgo CD provides built-in health assessment for several standard Kubernetes types, which is then surfaced to the overall Application health status as a whole. The following checks are made for specific types of Kubernetes resources:\n\n### Deployment, ReplicaSet, StatefulSet, DaemonSet\n- Observed generation is equal to desired generation.\n- Number of **updated** replicas equals the number of desired replicas.\n\n### Service\n- If service type is of type `LoadBalancer`, the `status.loadBalancer.ingress` list is non-empty, with at least one value for `hostname` or `IP`.\n\n### Ingress\n- The `status.loadBalancer.ingress` list is non-empty, with at least one value for `hostname` or `IP`.\n\n### Job\n- If job `.spec.suspended` is set to 'true', then the job and app health will be marked as suspended.\n\n### PersistentVolumeClaim\n- The `status.phase` is `Bound`\n\n### Argocd App\nThe health assessment of `argoproj.io/Application` CRD has been removed in argocd 1.8 (see [#3781](https://github.com/argoproj/argo-cd/issues/3781) for more information). You might need to restore it if you are using app-of-apps pattern and orchestrating synchronization using sync waves. Add the following resource customization in `argocd-cm` ConfigMap:\n\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  resource.customizations.health.argoproj.io_Application: |\n    hs = {}\n    hs.status = \"Progressing\"\n    hs.message = \"\"\n    if obj.status ~= nil then\n      if obj.status.health ~= nil then\n        hs.status = obj.status.health.status\n        if obj.status.health.message ~= nil then\n          hs.message = obj.status.health.message\n        end\n      end\n    end\n    return hs\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/health", "title": "Resource Health", "description": "Argo CD provides built-in health assessment for several standard Kubernetes types, which is then surfaced to the overall Application health status as a whole.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:17:58", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Resource Health - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/operator-manual/health/", "readthedocs-project-slug": "argo-cd", "scrapeId": "6b102528-4797-448b-967a-b93775811a71", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/health", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/health/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Resource Health\"?\n\nAssistant: Here are some code examples:\n\n### Argocd App Health Customization\n```yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  resource.customizations.health.argoproj.io_Application: |\n    hs = {}\n    hs.status = \"Progressing\"\n    hs.message = \"\"\n    if obj.status ~= nil then\n      if obj.status.health ~= nil then\n        hs.status = obj.status.health.status\n        if obj.status.health.message ~= nil then\n          hs.message = obj.status.health.message\n        end\n      end\n    end\n    return hs\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/health", "title": "Resource Health", "description": "Argo CD provides built-in health assessment for several standard Kubernetes types, which is then surfaced to the overall Application health status as a whole.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:17:58", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Resource Health - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/operator-manual/health/", "readthedocs-project-slug": "argo-cd", "scrapeId": "6b102528-4797-448b-967a-b93775811a71", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/health", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/health/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Resource Health\"?\n\nAssistant: Here are the recommended best practices:\n\n• Custom health checks can be defined in the resource.customizations.health.<group>_<kind>: | field of argocd-cm.\n• Wildcards are only supported when using the resource.customizations key, the resource.customizations.health.<group>_<kind> style keys do not work since wildcards (*) are not supported in Kubernetes configmap keys.\n• To ignore the health check of an immediate child resource within an Application, set the annotation argocd.argoproj.io/ignore-healthcheck to true.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/health", "title": "Resource Health", "description": "Argo CD provides built-in health assessment for several standard Kubernetes types, which is then surfaced to the overall Application health status as a whole.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:17:58", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Resource Health - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/operator-manual/health/", "readthedocs-project-slug": "argo-cd", "scrapeId": "6b102528-4797-448b-967a-b93775811a71", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/health", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/health/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Installation\"?\n\nAssistant: Argo CD has two type of installations: multi-tenant and core.\n\nHere's a detailed explanation:\n\n\n## Multi-Tenant\nThe multi-tenant installation is the most common way to install Argo CD. This type of installation is typically used to service multiple application developer teams in the organization and maintained by a platform team.\n\nThe end-users can access Argo CD via the API server using the Web UI or `argocd` CLI. The `argocd` CLI has to be configured using `argocd login <server-host>` command (learn more [here](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_login/)).\n\nTwo types of installation manifests are provided:\n\n### Non High Availability:\nNot recommended for production use. This type of installation is typically used during evaluation period for demonstrations and testing.\n\n- [install.yaml](https://github.com/argoproj/argo-cd/blob/master/manifests/install.yaml) \\- Standard Argo CD installation with cluster-admin access. Use this manifest set if you plan to use Argo CD to deploy applications in the same cluster that Argo CD runs in (i.e. kubernetes.svc.default). It will still be able to deploy to external clusters with inputted credentials.\n\n> Note: The ClusterRoleBinding in the installation manifest is bound to a ServiceAccount in the argocd namespace. Be cautious when modifying the namespace, as changing it may cause permission-related errors unless the ClusterRoleBinding is correctly adjusted to reflect the new namespace.\n\n- [namespace-install.yaml](https://github.com/argoproj/argo-cd/blob/master/manifests/namespace-install.yaml) \\- Installation of Argo CD which requires only namespace level privileges (does not need cluster roles). Use this manifest set if you do not need Argo CD to deploy applications in the same cluster that Argo CD runs in, and will rely solely on inputted cluster credentials. An example of using this set of manifests is if you run several Argo CD instances for different teams, where each instance will be deploying applications to external clusters. It will still be possible to deploy to the same cluster (kubernetes.svc.default) with inputted credentials (i.e. `argocd cluster add <CONTEXT> --in-cluster --namespace <YOUR NAMESPACE>`).\n\n> Note: Argo CD CRDs are not included into [namespace-install.yaml](https://github.com/argoproj/argo-cd/blob/master/manifests/namespace-install.yaml). and have to be installed separately. The CRD manifests are located in the [manifests/crds](https://github.com/argoproj/argo-cd/blob/master/manifests/crds) directory.\n> Use the following command to install them:\n> \n> ```\n> kubectl apply -k https://github.com/argoproj/argo-cd/manifests/crds\\?ref\\=stable\n> ```\n\n### High Availability:\nHigh Availability installation is recommended for production use. This bundle includes the same components but tuned for high availability and resiliency.\n\n- [ha/install.yaml](https://github.com/argoproj/argo-cd/blob/master/manifests/ha/install.yaml) \\- the same as install.yaml but with multiple replicas for supported components.\n\n- [ha/namespace-install.yaml](https://github.com/argoproj/argo-cd/blob/master/manifests/ha/namespace-install.yaml) \\- the same as namespace-install.yaml but with multiple replicas for supported components.\n\n## Core\nThe Argo CD Core installation is primarily used to deploy Argo CD in headless mode. This type of installation is most suitable for cluster administrators who independently use Argo CD and don't need multi-tenancy features. This installation includes fewer components and is easier to setup. The bundle does not include the API server or UI, and installs the lightweight (non-HA) version of each component.\n\nInstallation manifest is available at [core-install.yaml](https://github.com/argoproj/argo-cd/blob/master/manifests/core-install.yaml).\n\nFor more details about Argo CD Core please refer to the [official documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/core/).\n\n## Kustomize\nThe Argo CD manifests can also be installed using Kustomize. It is recommended to include the manifest as a remote resource and apply additional customizations using Kustomize patches.\n\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: argocd\nresources:\n- https://raw.githubusercontent.com/argoproj/argo-cd/v2.7.2/manifests/install.yaml\n```\n\nFor an example of this, see the [kustomization.yaml](https://github.com/argoproj/argoproj-deployments/blob/master/argocd/kustomization.yaml) used to deploy the [Argoproj CI/CD infrastructure](https://github.com/argoproj/argoproj-deployments#argoproj-deployments).\n\n## Installing Argo CD in a Custom Namespace\nIf you want to install Argo CD in a namespace other than the default argocd, you can use Kustomize to apply a patch that updates the ClusterRoleBinding to reference the correct namespace for the ServiceAccount. This ensures that the necessary permissions are correctly set in your custom namespace.\n\nBelow is an example of how to configure your kustomization.yaml to install Argo CD in a custom namespace:\n\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: <your-custom-namespace>\nresources:\n  - https://raw.githubusercontent.com/argoproj/argo-cd/v2.7.2/manifests/install.yaml\n\npatches:\n  - patch: |-\n      - op: replace\n        path: /subjects/0/namespace\n        value: <your-custom-namespace>\n    target:\n      kind: ClusterRoleBinding\n```\n\nThis patch ensures that the ClusterRoleBinding correctly maps to the ServiceAccount in your custom namespace, preventing any permission-related issues during the deployment.\n\n## Helm\nThe Argo CD can be installed using [Helm](https://helm.sh/). The Helm chart is currently community maintained and available at [argo-helm/charts/argo-cd](https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd).\n\n## Supported versions\nFor detailed information regarding Argo CD's version support policy, please refer to the [Release Process and Cadence documentation](https://argo-cd.readthedocs.io/en/stable/developer-guide/release-process-and-cadence/).\n\n## Tested versions\nThe following table shows the versions of Kubernetes that are tested with each version of Argo CD.\n\n| Argo CD version | Kubernetes versions |\n| --- | --- |\n| 2.14 | v1.31, v1.30, v1.29, v1.28 |\n| 2.13 | v1.30, v1.29, v1.28, v1.27 |\n| 2.12 | v1.29, v1.28, v1.27, v1.26 |\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/installation", "title": "Installation", "description": "Argo CD has two type of installations: multi-tenant and core.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 00:24:36", "type": "overview", "page_metadata": {"title": "Installation - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/installation/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "b29e62e5-a8b4-4569-8b53-92f4ccacf41c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/installation", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Installation\"?\n\nAssistant: Here are some code examples:\n\n### Install CRDs\n```yaml\nkubectl apply -k https://github.com/argoproj/argo-cd/manifests/crds\\?ref\\=stable\n```\n\n### Kustomize Example\n```yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: argocd\nresources:\n- https://raw.githubusercontent.com/argoproj/argo-cd/v2.7.2/manifests/install.yaml\n```\n\n### Custom Namespace Kustomize Example\n```yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: <your-custom-namespace>\nresources:\n  - https://raw.githubusercontent.com/argoproj/argo-cd/v2.7.2/manifests/install.yaml\n\npatches:\n  - patch: |-\n      - op: replace\n        path: /subjects/0/namespace\n        value: <your-custom-namespace>\n    target:\n      kind: ClusterRoleBinding\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/installation", "title": "Installation", "description": "Argo CD has two type of installations: multi-tenant and core.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 00:24:36", "type": "code_examples", "page_metadata": {"title": "Installation - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/installation/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "b29e62e5-a8b4-4569-8b53-92f4ccacf41c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/installation", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Installation\"?\n\nAssistant: Here are the recommended best practices:\n\n• Be cautious when modifying the namespace, as changing it may cause permission-related errors unless the ClusterRoleBinding is correctly adjusted to reflect the new namespace.\n• Argo CD CRDs are not included into namespace-install.yaml and have to be installed separately.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/installation", "title": "Installation", "description": "Argo CD has two type of installations: multi-tenant and core.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 00:24:36", "type": "best_practices", "page_metadata": {"title": "Installation - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/installation/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "b29e62e5-a8b4-4569-8b53-92f4ccacf41c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/installation", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Metrics\"?\n\nAssistant: Argo CD exposes different sets of Prometheus metrics per server.\n\nHere's a detailed explanation:\n\n\n## Application Controller Metrics\nMetrics about applications. Scraped at the `argocd-metrics:8082/metrics` endpoint.\n\n| Metric | Type | Description |\n| --- | --- | --- |\n| `argocd_app_info` | gauge | Information about Applications. It contains labels such as `sync_status` and `health_status` that reflect the application state in Argo CD. |\n| `argocd_app_condition` | gauge | Report Applications conditions. It contains the conditions currently present in the application status. |\n| `argocd_app_k8s_request_total` | counter | Number of Kubernetes requests executed during application reconciliation |\n| `argocd_app_labels` | gauge | Argo Application labels converted to Prometheus labels. Disabled by default. See section below about how to enable it. |\n| `argocd_app_orphaned_resources_count` | gauge | Number of orphaned resources per application. |\n| `argocd_app_reconcile` | histogram | Application reconciliation performance in seconds. |\n| `argocd_app_sync_total` | counter | Counter for application sync history |\n| `argocd_cluster_api_resource_objects` | gauge | Number of k8s resource objects in the cache. |\n| `argocd_cluster_api_resources` | gauge | Number of monitored Kubernetes API resources. |\n| `argocd_cluster_cache_age_seconds` | gauge | Cluster cache age in seconds. |\n| `argocd_cluster_connection_status` | gauge | The k8s cluster current connection status. |\n| `argocd_cluster_events_total` | counter | Number of processes k8s resource events. |\n| `argocd_cluster_info` | gauge | Information about cluster. |\n| `argocd_kubectl_exec_pending` | gauge | Number of pending kubectl executions |\n| `argocd_kubectl_exec_total` | counter | Number of kubectl executions |\n| `argocd_redis_request_duration` | histogram | Redis requests duration. |\n| `argocd_redis_request_total` | counter | Number of redis requests executed during application reconciliation |\n| `argocd_resource_events_processing` | histogram | Time to process resource events in batch in seconds |\n| `argocd_resource_events_processed_in_batch` | gauge | Number of resource events processed in batch |\n\nIf you use Argo CD with many application and project creation and deletion,\nthe metrics page will keep in cache your application and project's history.\nIf you are having issues because of a large number of metrics cardinality due\nto deleted resources, you can schedule a metrics reset to clean the\nhistory with an application controller flag. Example:\n`--metrics-cache-expiration=\"24h0m0s\"`.\n\n## Exposing Application labels as Prometheus metrics\nThere are use-cases where Argo CD Applications contain labels that are desired to be exposed as Prometheus metrics.\nSome examples are:\n\n- Having the team name as a label to allow routing alerts to specific receivers\n- Creating dashboards broken down by business units\n\nAs the Application labels are specific to each company, this feature is disabled by default. To enable it, add the\n`--metrics-application-labels` flag to the Argo CD application controller.\n\nThe example below will expose the Argo CD Application labels `team-name` and `business-unit` to Prometheus:\n\n```\ncontainers:\n- command:\n  - argocd-application-controller\n  - --metrics-application-labels\n  - team-name\n  - --metrics-application-labels\n  - business-unit\n```\n\nIn this case, the metric would look like:\n\n```\n# TYPE argocd_app_labels gauge\nargocd_app_labels{label_business_unit=\"bu-id-1\",label_team_name=\"my-team\",name=\"my-app-1\",namespace=\"argocd\",project=\"important-project\"} 1\nargocd_app_labels{label_business_unit=\"bu-id-1\",label_team_name=\"my-team\",name=\"my-app-2\",namespace=\"argocd\",project=\"important-project\"} 1\nargocd_app_labels{label_business_unit=\"bu-id-2\",label_team_name=\"another-team\",name=\"my-app-3\",namespace=\"argocd\",project=\"important-project\"} 1\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/metrics", "title": "Metrics", "description": "Argo CD exposes different sets of Prometheus metrics per server.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:27:34", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Metrics - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/metrics/", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "144795b3-ca50-4593-9244-c8d6b921500c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/metrics", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/metrics/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Metrics\"?\n\nAssistant: Here are some code examples:\n\n### Exposing Application labels\n```yaml\ncontainers:\n- command:\n  - argocd-application-controller\n  - --metrics-application-labels\n  - team-name\n  - --metrics-application-labels\n  - business-unit\n```\n\n### Metric example for Application labels\n```yaml\n# TYPE argocd_app_labels gauge\nargocd_app_labels{label_business_unit=\"bu-id-1\",label_team_name=\"my-team\",name=\"my-app-1\",namespace=\"argocd\",project=\"important-project\"} 1\nargocd_app_labels{label_business_unit=\"bu-id-1\",label_team_name=\"my-team\",name=\"my-app-2\",namespace=\"argocd\",project=\"important-project\"} 1\nargocd_app_labels{label_business_unit=\"bu-id-2\",label_team_name=\"another-team\",name=\"my-app-3\",namespace=\"argocd\",project=\"important-project\"} 1\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/metrics", "title": "Metrics", "description": "Argo CD exposes different sets of Prometheus metrics per server.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:27:34", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Metrics - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/metrics/", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "144795b3-ca50-4593-9244-c8d6b921500c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/metrics", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/metrics/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Metrics\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you use Argo CD with many application and project creation and deletion, the metrics page will keep in cache your application and project's history.\n• If you are having issues because of a large number of metrics cardinality due to deleted resources, you can schedule a metrics reset to clean the history with an application controller flag. Example: `--metrics-cache-expiration=\"24h0m0s\"`.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/metrics", "title": "Metrics", "description": "Argo CD exposes different sets of Prometheus metrics per server.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:27:34", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Metrics - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/metrics/", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "144795b3-ca50-4593-9244-c8d6b921500c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/metrics", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/metrics/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Project Specification\"?\n\nAssistant: The following describes all the available fields of a Project:\n\nHere's a detailed explanation:\n\n\n## Project Specification\nThe following describes all the available fields of a Project:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\n  # Finalizer that ensures that project is not deleted until it is not referenced by any application\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  # Project description\n  description: Example Project\n\n  # Allow manifests to deploy from any Git repos\n  sourceRepos:\n  - '*'\n\n  # Only permit applications to deploy to the guestbook namespace in the same cluster\n  # Destination clusters can be identified by 'server', 'name', or both.\n  destinations:\n  - namespace: guestbook\n    server: https://kubernetes.default.svc\n    name: in-cluster\n\n  # Deny all cluster-scoped resources from being created, except for Namespace\n  clusterResourceWhitelist:\n  - group: ''\n    kind: Namespace\n\n  # Allow all namespaced-scoped resources to be created, except for ResourceQuota, LimitRange, NetworkPolicy\n  namespaceResourceBlacklist:\n  - group: ''\n    kind: ResourceQuota\n  - group: ''\n    kind: LimitRange\n  - group: ''\n    kind: NetworkPolicy\n\n  # Deny all namespaced-scoped resources from being created, except for Deployment and StatefulSet\n  namespaceResourceWhitelist:\n  - group: 'apps'\n    kind: Deployment\n  - group: 'apps'\n    kind: StatefulSet\n\n  # Enables namespace orphaned resource monitoring.\n  orphanedResources:\n    warn: false\n\n  roles:\n  # A role which provides read-only access to all applications in the project\n  - name: read-only\n    description: Read-only privileges to my-project\n    policies:\n    - p, proj:my-project:read-only, applications, get, my-project/*, allow\n    groups:\n    - my-oidc-group\n\n  # A role which provides sync privileges to only the guestbook-dev application, e.g. to provide\n  # sync privileges to a CI system\n  - name: ci-role\n    description: Sync privileges for guestbook-dev\n    policies:\n    - p, proj:my-project:ci-role, applications, sync, my-project/guestbook-dev, allow\n\n    # NOTE: JWT tokens can only be generated by the API server and the token is not persisted\n    # anywhere by Argo CD. It can be prematurely revoked by removing the entry from this list.\n    jwtTokens:\n    - iat: 1535390316\n\n  # Sync windows restrict when Applications may be synced. https://argo-cd.readthedocs.io/en/stable/user-guide/sync_windows/\n  syncWindows:\n  - kind: allow\n    schedule: '10 1 * * *'\n    duration: 1h\n    applications:\n      - '*-prod'\n    manualSync: true\n  - kind: deny\n    schedule: '0 22 * * *'\n    duration: 1h\n    namespaces:\n      - default\n  - kind: allow\n    schedule: '0 23 * * *'\n    duration: 1h\n    clusters:\n      - in-cluster\n      - cluster1\n\n  # By default, apps may sync to any cluster specified under the `destinations` field, even if they are not\n  # scoped to this project. Set the following field to `true` to restrict apps in this cluster to only clusters\n  # scoped to this project.\n  permitOnlyProjectScopedClusters: false\n\n  # When using Applications-in-any-namespace, this field determines which namespaces this AppProject permits\n  # Applications to reside in. Details: https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/\n  sourceNamespaces:\n  - \"argocd-apps-*\"\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/project-specification", "title": "Project Specification", "description": "The following describes all the available fields of a Project:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:28:03", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/operator-manual/project-specification/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Project Specification Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "d444c370-00e9-458a-9472-a836bcd0ae43", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/project-specification", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/project-specification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Project Specification\"?\n\nAssistant: Here are some code examples:\n\n### Project Specification Example\n```yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\n  # Finalizer that ensures that project is not deleted until it is not referenced by any application\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  # Project description\n  description: Example Project\n\n  # Allow manifests to deploy from any Git repos\n  sourceRepos:\n  - '*'\n\n  # Only permit applications to deploy to the guestbook namespace in the same cluster\n  # Destination clusters can be identified by 'server', 'name', or both.\n  destinations:\n  - namespace: guestbook\n    server: https://kubernetes.default.svc\n    name: in-cluster\n\n  # Deny all cluster-scoped resources from being created, except for Namespace\n  clusterResourceWhitelist:\n  - group: ''\n    kind: Namespace\n\n  # Allow all namespaced-scoped resources to be created, except for ResourceQuota, LimitRange, NetworkPolicy\n  namespaceResourceBlacklist:\n  - group: ''\n    kind: ResourceQuota\n  - group: ''\n    kind: LimitRange\n  - group: ''\n    kind: NetworkPolicy\n\n  # Deny all namespaced-scoped resources from being created, except for Deployment and StatefulSet\n  namespaceResourceWhitelist:\n  - group: 'apps'\n    kind: Deployment\n  - group: 'apps'\n    kind: StatefulSet\n\n  # Enables namespace orphaned resource monitoring.\n  orphanedResources:\n    warn: false\n\n  roles:\n  # A role which provides read-only access to all applications in the project\n  - name: read-only\n    description: Read-only privileges to my-project\n    policies:\n    - p, proj:my-project:read-only, applications, get, my-project/*, allow\n    groups:\n    - my-oidc-group\n\n  # A role which provides sync privileges to only the guestbook-dev application, e.g. to provide\n  # sync privileges to a CI system\n  - name: ci-role\n    description: Sync privileges for guestbook-dev\n    policies:\n    - p, proj:my-project:ci-role, applications, sync, my-project/guestbook-dev, allow\n\n    # NOTE: JWT tokens can only be generated by the API server and the token is not persisted\n    # anywhere by Argo CD. It can be prematurely revoked by removing the entry from this list.\n    jwtTokens:\n    - iat: 1535390316\n\n  # Sync windows restrict when Applications may be synced. https://argo-cd.readthedocs.io/en/stable/user-guide/sync_windows/\n  syncWindows:\n  - kind: allow\n    schedule: '10 1 * * *'\n    duration: 1h\n    applications:\n      - '*-prod'\n    manualSync: true\n  - kind: deny\n    schedule: '0 22 * * *'\n    duration: 1h\n    namespaces:\n      - default\n  - kind: allow\n    schedule: '0 23 * * *'\n    duration: 1h\n    clusters:\n      - in-cluster\n      - cluster1\n\n  # By default, apps may sync to any cluster specified under the `destinations` field, even if they are not\n  # scoped to this project. Set the following field to `true` to restrict apps in this cluster to only clusters\n  # scoped to this project.\n  permitOnlyProjectScopedClusters: false\n\n  # When using Applications-in-any-namespace, this field determines which namespaces this AppProject permits\n  # Applications to reside in. Details: https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/\n  sourceNamespaces:\n  - \"argocd-apps-*\"\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/project-specification", "title": "Project Specification", "description": "The following describes all the available fields of a Project:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:28:03", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/operator-manual/project-specification/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Project Specification Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "d444c370-00e9-458a-9472-a836bcd0ae43", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/project-specification", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/project-specification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Project Specification\"?\n\nAssistant: Here are the recommended best practices:\n\n• JWT tokens can only be generated by the API server and the token is not persisted anywhere by Argo CD. It can be prematurely revoked by removing the entry from this list.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/project-specification", "title": "Project Specification", "description": "The following describes all the available fields of a Project:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:28:03", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/operator-manual/project-specification/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Project Specification Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "d444c370-00e9-458a-9472-a836bcd0ae43", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/project-specification", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/project-specification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Reconcile Optimization\"?\n\nAssistant: This page covers how to optimize the reconciliation process in Argo CD by ignoring certain resource updates to reduce CPU usage and improve performance.\n\nHere's a detailed explanation:\n\n\n## System-Level Configuration\nBy default, `resource.ignoreResourceUpdatesEnabled` is set to `true`, enabling Argo CD to ignore resource updates. This default setting ensures that Argo CD maintains sustainable performance by reducing unnecessary reconcile operations. If you need to alter this behavior, you can explicitly set `resource.ignoreResourceUpdatesEnabled` to `false` in the `argocd-cm` ConfigMap:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  resource.ignoreResourceUpdatesEnabled: \"false\"\n```\n\nArgo CD allows ignoring resource updates at a specific JSON path, using [RFC6902 JSON patches](https://tools.ietf.org/html/rfc6902) and [JQ path expressions](https://stedolan.github.io/jq/manual/#path(path_expression)). It can be configured for a specified group and kind in `resource.customizations` key of the `argocd-cm` ConfigMap.\n\nFollowing is an example of a customization which ignores the `refreshTime` status field of an [`ExternalSecret`](https://external-secrets.io/main/api/externalsecret/) resource:\n\n```\ndata:\n  resource.customizations.ignoreResourceUpdates.external-secrets.io_ExternalSecret: |\n    jsonPointers:\n    - /status/refreshTime\n    # JQ equivalent of the above:\n    # jqPathExpressions:\n    # - .status.refreshTime\n```\n\nIt is possible to configure `ignoreResourceUpdates` to be applied to all tracked resources in every Application managed by an Argo CD instance. In order to do so, resource customizations can be configured like in the example below:\n\n```\ndata:\n  resource.customizations.ignoreResourceUpdates.all: |\n    jsonPointers:\n    - /status\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/reconcile", "title": "Reconcile Optimization", "description": "This page covers how to optimize the reconciliation process in Argo CD by ignoring certain resource updates to reduce CPU usage and improve performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:31:26", "type": "overview", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "Reconcile Optimization - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/reconcile/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "77483285-6dab-4b13-9ef7-69376754bc6d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/reconcile", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/reconcile/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Reconcile Optimization\"?\n\nAssistant: Here are some code examples:\n\n### System-Level Configuration Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  resource.ignoreResourceUpdatesEnabled: \"false\"\n```\n\n### Ignoring refreshTime Example\n```yaml\ndata:\n  resource.customizations.ignoreResourceUpdates.external-secrets.io_ExternalSecret: |\n    jsonPointers:\n    - /status/refreshTime\n    # JQ equivalent of the above:\n    # jqPathExpressions:\n    # - .status.refreshTime\n```\n\n### Ignoring All Tracked Resources Example\n```yaml\ndata:\n  resource.customizations.ignoreResourceUpdates.all: |\n    jsonPointers:\n    - /status\n\n```\n\n### Using ignoreDifferences Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  resource.compareoptions: |\n    ignoreDifferencesOnResourceUpdates: true\n\n```\n\n### Application Customization Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  resource.customizations.ignoreResourceUpdates.argoproj.io_Application: |\n    jsonPointers:\n    # Ignore when ownerReferences change, for example when a parent ApplicationSet changes often.\n    - /metadata/ownerReferences\n    # Ignore reconciledAt, since by itself it doesn't indicate any important change.\n    - /status/reconciledAt\n    jqPathExpressions:\n    # Ignore lastTransitionTime for conditions; helpful when SharedResourceWarnings are being regularly updated but not\n    # actually changing in content.\n    - .status?.conditions[]?.lastTransitionTime\n\n```\n\n### CronJob Example\n```yaml\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: hello\n  namespace: test-cronjob\nspec:\n  schedule: \"* * * * *\"\n  jobTemplate:\n    metadata:\n      annotations:\n        argocd.argoproj.io/ignore-resource-updates: \"true\"\n    spec:\n      template:\n        metadata:\n          annotations:\n            argocd.argoproj.io/ignore-resource-updates: \"true\"\n        spec:\n          containers:\n          - name: hello\n            image: busybox:1.28\n            imagePullPolicy: IfNotPresent\n            command:\n            - /bin/sh\n            - -c\n            - date; echo Hello from the Kubernetes cluster\n          restartPolicy: OnFailure\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/reconcile", "title": "Reconcile Optimization", "description": "This page covers how to optimize the reconciliation process in Argo CD by ignoring certain resource updates to reduce CPU usage and improve performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:31:26", "type": "code_examples", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "Reconcile Optimization - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/reconcile/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "77483285-6dab-4b13-9ef7-69376754bc6d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/reconcile", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/reconcile/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Reconcile Optimization\"?\n\nAssistant: Here are the recommended best practices:\n\n• Configure the application-controller's log level to debug to find logs related to resource changes.\n• Use the diff command to identify which fields are changing in resources that trigger frequent reconciles.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/reconcile", "title": "Reconcile Optimization", "description": "This page covers how to optimize the reconciliation process in Argo CD by ignoring certain resource updates to reduce CPU usage and improve performance.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:31:26", "type": "best_practices", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "Reconcile Optimization - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/reconcile/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "77483285-6dab-4b13-9ef7-69376754bc6d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/reconcile", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/reconcile/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Resource actions builtin\"?\n\nAssistant: This page provides a list of built-in resource actions available in Argo CD.\n\nHere's a detailed explanation:\n\n\n## Resource Actions\n- [apps/DaemonSet/restart](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/apps/DaemonSet/actions/restart/action.lua)\n- [apps/Deployment/pause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/apps/Deployment/actions/pause/action.lua)\n- [apps/Deployment/restart](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/apps/Deployment/actions/restart/action.lua)\n- [apps/Deployment/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/apps/Deployment/actions/resume/action.lua)\n- [apps/StatefulSet/restart](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/apps/StatefulSet/actions/restart/action.lua)\n- [argoproj.io/AnalysisRun/terminate](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/AnalysisRun/actions/terminate/action.lua)\n- [argoproj.io/CronWorkflow/create-workflow](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/CronWorkflow/actions/create-workflow/action.lua)\n- [argoproj.io/Rollout/abort](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/Rollout/actions/abort/action.lua)\n- [argoproj.io/Rollout/promote-full](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/Rollout/actions/promote-full/action.lua)\n- [argoproj.io/Rollout/restart](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/Rollout/actions/restart/action.lua)\n- [argoproj.io/Rollout/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/Rollout/actions/resume/action.lua)\n- [argoproj.io/Rollout/retry](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/Rollout/actions/retry/action.lua)\n- [argoproj.io/WorkflowTemplate/create-workflow](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/WorkflowTemplate/actions/create-workflow/action.lua)\n- [batch/CronJob/create-job](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/batch/CronJob/actions/create-job/action.lua)\n- [external-secrets.io/ExternalSecret/refresh](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/external-secrets.io/ExternalSecret/actions/refresh/action.lua)\n- [external-secrets.io/PushSecret/push](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/external-secrets.io/PushSecret/actions/push/action.lua)\n- [helm.toolkit.fluxcd.io/HelmRelease/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/helm.toolkit.fluxcd.io/HelmRelease/actions/reconcile/action.lua)\n- [helm.toolkit.fluxcd.io/HelmRelease/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/helm.toolkit.fluxcd.io/HelmRelease/actions/resume/action.lua)\n- [helm.toolkit.fluxcd.io/HelmRelease/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/helm.toolkit.fluxcd.io/HelmRelease/actions/suspend/action.lua)\n- [image.toolkit.fluxcd.io/ImageRepository/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageRepository/actions/reconcile/action.lua)\n- [image.toolkit.fluxcd.io/ImageRepository/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageRepository/actions/resume/action.lua)\n- [image.toolkit.fluxcd.io/ImageRepository/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageRepository/actions/suspend/action.lua)\n- [image.toolkit.fluxcd.io/ImageUpdateAutomation/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageUpdateAutomation/actions/reconcile/action.lua)\n- [image.toolkit.fluxcd.io/ImageUpdateAutomation/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageUpdateAutomation/actions/resume/action.lua)\n- [image.toolkit.fluxcd.io/ImageUpdateAutomation/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageUpdateAutomation/actions/suspend/action.lua)\n- [kustomize.toolkit.fluxcd.io/Kustomization/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/kustomize.toolkit.fluxcd.io/Kustomization/actions/reconcile/action.lua)\n- [kustomize.toolkit.fluxcd.io/Kustomization/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/kustomize.toolkit.fluxcd.io/Kustomization/actions/resume/action.lua)\n- [kustomize.toolkit.fluxcd.io/Kustomization/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/kustomize.toolkit.fluxcd.io/Kustomization/actions/suspend/action.lua)\n- [notification.toolkit.fluxcd.io/Alert/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Alert/actions/resume/action.lua)\n- [notification.toolkit.fluxcd.io/Alert/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Alert/actions/suspend/action.lua)\n- [notification.toolkit.fluxcd.io/Provider/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Provider/actions/resume/action.lua)\n- [notification.toolkit.fluxcd.io/Provider/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Provider/actions/suspend/action.lua)\n- [notification.toolkit.fluxcd.io/Receiver/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Receiver/actions/reconcile/action.lua)\n- [notification.toolkit.fluxcd.io/Receiver/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Receiver/actions/resume/action.lua)\n- [notification.toolkit.fluxcd.io/Receiver/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Receiver/actions/suspend/action.lua)\n- [numaflow.numaproj.io/MonoVertex/pause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaflow.numaproj.io/MonoVertex/actions/pause/action.lua)\n- [numaflow.numaproj.io/MonoVertex/unpause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaflow.numaproj.io/MonoVertex/actions/unpause/action.lua)\n- [numaflow.numaproj.io/Pipeline/pause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaflow.numaproj.io/Pipeline/actions/pause/action.lua)\n- [numaflow.numaproj.io/Pipeline/unpause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaflow.numaproj.io/Pipeline/actions/unpause/action.lua)\n- [numaplane.numaproj.io/MonoVertexRollout/pause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/MonoVertexRollout/actions/pause/action.lua)\n- [numaplane.numaproj.io/MonoVertexRollout/unpause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/MonoVertexRollout/actions/unpause/action.lua)\n- [numaplane.numaproj.io/PipelineRollout/allow-data-loss](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/PipelineRollout/actions/allow-data-loss/action.lua)\n- [numaplane.numaproj.io/PipelineRollout/disallow-data-loss](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/PipelineRollout/actions/disallow-data-loss/action.lua)\n- [numaplane.numaproj.io/PipelineRollout/pause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/PipelineRollout/actions/pause/action.lua)\n- [numaplane.numaproj.io/PipelineRollout/unpause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/PipelineRollout/actions/unpause/action.lua)\n- [source.toolkit.fluxcd.io/Bucket/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/Bucket/actions/reconcile/action.lua)\n- [source.toolkit.fluxcd.io/Bucket/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/Bucket/actions/resume/action.lua)\n- [source.toolkit.fluxcd.io/Bucket/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/Bucket/actions/suspend/action.lua)\n- [source.toolkit.fluxcd.io/GitRepository/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/GitRepository/actions/reconcile/action.lua)\n- [source.toolkit.fluxcd.io/GitRepository/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/GitRepository/actions/resume/action.lua)\n- [source.toolkit.fluxcd.io/GitRepository/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/GitRepository/actions/suspend/action.lua)\n- [source.toolkit.fluxcd.io/HelmChart/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmChart/actions/reconcile/action.lua)\n- [source.toolkit.fluxcd.io/HelmChart/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmChart/actions/resume/action.lua)\n- [source.toolkit.fluxcd.io/HelmChart/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmChart/actions/suspend/action.lua)\n- [source.toolkit.fluxcd.io/HelmRepository/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmRepository/actions/reconcile/action.lua)\n- [source.toolkit.fluxcd.io/HelmRepository/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmRepository/actions/resume/action.lua)\n- [source.toolkit.fluxcd.io/HelmRepository/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmRepository/actions/suspend/action.lua)\n- [source.toolkit.fluxcd.io/OCIRepository/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/OCIRepository/actions/reconcile/action.lua)\n- [source.toolkit.fluxcd.io/OCIRepository/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/OCIRepository/actions/resume/action.lua)\n- [source.toolkit.fluxcd.io/OCIRepository/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/OCIRepository/actions/suspend/action.lua)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions_builtin", "title": "Resource actions builtin", "description": "This page provides a list of built-in resource actions available in Argo CD.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:35:14", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Resource actions builtin - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/resource_actions_builtin/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "bb401b9e-2b3d-444b-b8ef-6bad967fde4b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions_builtin", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions_builtin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Secret Management\"?\n\nAssistant: Argo CD is un-opinionated about how secrets are managed. There are many ways to do it, and there's no one-size-fits-all solution.\n\nHere's a detailed explanation:\n\n\n## Mitigating Risks of Secret-Injection Plugins\nArgo CD caches the manifests generated by plugins, along with the injected secrets, in its Redis instance. Those manifests are also available via the repo-server API (a gRPC service). This means that the secrets are available to anyone who has access to the Redis instance or to the repo-server.\n\nConsider these steps to mitigate the risks of secret-injection plugins:\n\n1. Set up network policies to prevent direct access to Argo CD components (Redis and the repo-server). Make sure your cluster supports those network policies and can actually enforce them.\n2. Consider running Argo CD on its own cluster, with no other applications running on it.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management", "title": "Secret Management", "description": "Argo CD is un-opinionated about how secrets are managed. There are many ways to do it, and there's no one-size-fits-all solution.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:35:18", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/secret-management/", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Secret Management - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "scrapeId": "321ea9d0-682c-48eb-9bb0-750d3f794bba", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Secret Management\"?\n\nAssistant: Here are the recommended best practices:\n\n• Set up network policies to prevent direct access to Argo CD components (Redis and the repo-server).\n• Consider running Argo CD on its own cluster, with no other applications running on it.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management", "title": "Secret Management", "description": "Argo CD is un-opinionated about how secrets are managed. There are many ways to do it, and there's no one-size-fits-all solution.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:35:18", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/secret-management/", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Secret Management - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "scrapeId": "321ea9d0-682c-48eb-9bb0-750d3f794bba", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Security\"?\n\nAssistant: Argo CD has undergone rigorous internal security reviews and penetration testing to satisfy PCI compliance requirements. The following are some security topics and implementation details of Argo CD.\n\nHere's a detailed explanation:\n\n\n## Authentication\nAuthentication to Argo CD API server is performed exclusively using JSON Web Tokens (JWTs). Username/password bearer tokens are not used for authentication. The JWT is obtained/managed in one of the following ways:\n\n1. For the local `admin` user, a username/password is exchanged for a JWT using the `/api/v1/session` endpoint. This token is signed & issued by the Argo CD API server itself and it expires after 24 hours (this token used not to expire, see CVE-2021-26921). When the admin password is updated, all existing admin JWT tokens are immediately revoked. The password is stored as a bcrypt hash in the `argocd-secret` Secret.\n\n2. For Single Sign-On users, the user completes an OAuth2 login flow to the configured OIDC identity provider (either delegated through the bundled Dex provider, or directly to a self-managed OIDC provider). This JWT is signed & issued by the IDP, and expiration and revocation is handled by the provider. Dex tokens expire after 24 hours.\n\n3. Automation tokens are generated for a project using the `/api/v1/projects/{project}/roles/{role}/token` endpoint, and are signed & issued by Argo CD. These tokens are limited in scope and privilege, and can only be used to manage application resources in the project which it belongs to. Project JWTs have a configurable expiration and can be immediately revoked by deleting the JWT reference ID from the project role.\n\n## Authorization\nAuthorization is performed by iterating the list of group membership in a user's JWT groups claims, and comparing each group against the roles/rules in the RBAC policy. Any matched rule permits access to the API request.\n\n## TLS\nAll network communication is performed over TLS including service-to-service communication between the three components (argocd-server, argocd-repo-server, argocd-application-controller). The Argo CD API server can enforce the use of TLS 1.2 using the flag: `--tlsminversion 1.2`. Communication with Redis is performed over plain HTTP by default. TLS can be setup with command line arguments.\n\n## Git & Helm Repositories\nGit and helm repositories are managed by a stand-alone service, called the repo-server. The repo-server does not carry any Kubernetes privileges and does not store credentials to any services (including git). The repo-server is responsible for cloning repositories which have been permitted and trusted by Argo CD operators, and generating Kubernetes manifests at a given path in the repository. For performance and bandwidth efficiency, the repo-server maintains local clones of these repositories so that subsequent commits to the repository are efficiently downloaded.\n\nThere are security considerations when configuring git repositories that Argo CD is permitted to deploy from. In short, gaining unauthorized write access to a git repository trusted by Argo CD will have serious security implications outlined below.\n\n## Unauthorized Deployments\nSince Argo CD deploys the Kubernetes resources defined in git, an attacker with access to a trusted git repo would be able to affect the Kubernetes resources which are deployed. For example, an attacker could update the deployment manifest deploy malicious container images to the environment, or delete resources in git causing them to be pruned in the live environment.\n\n## Tool command invocation\nIn addition to raw YAML, Argo CD natively supports two popular Kubernetes config management tools, helm and kustomize. When rendering manifests, Argo CD executes these config management tools (i.e. `helm template`, `kustomize build`) to generate the manifests. It is possible that an attacker with write access to a trusted git repository may construct malicious helm charts or kustomizations that attempt to read files out-of-tree. This includes adjacent git repos, as well as files on the repo-server itself. Whether or not this is a risk to your organization depends on if the contents in the git repos are sensitive in nature. By default, the repo-server itself does not contain sensitive information, but might be configured with Config Management Plugins which do (e.g. decryption keys). If such plugins are used, extreme care must be taken to ensure the repository contents can be trusted at all times.\n\nOptionally the built-in config management tools might be individually disabled. If you know that your users will not need a certain config management tool, it's advisable to disable that tool. See Tool Detection for more information.\n\n## Remote bases and helm chart dependencies\nArgo CD's repository allow-list only restricts the initial repository which is cloned. However, both kustomize and helm contain features to reference and follow additional repositories (e.g. kustomize remote bases, helm chart dependencies), of which might not be in the repository allow-list. Argo CD operators must understand that users with write access to trusted git repositories could reference other remote git repositories containing Kubernetes resources not easily searchable or auditable in the configured git repositories.\n\n## Sensitive Information\nArgo CD never returns sensitive data from its API, and redacts all sensitive data in API payloads and logs. This includes:\n\n- cluster credentials\n- Git credentials\n- OAuth2 client secrets\n- Kubernetes Secret values\n\n## External Cluster Credentials\nTo manage external clusters, Argo CD stores the credentials of the external cluster as a Kubernetes Secret in the argocd namespace. This secret contains the K8s API bearer token associated with the `argocd-manager` ServiceAccount created during `argocd cluster add`, along with connection options to that API server (TLS configuration/certs, AWS role-arn, etc...). The information is used to reconstruct a REST config and kubeconfig to the cluster used by Argo CD services.\n\nTo rotate the bearer token used by Argo CD, the token can be deleted (e.g. using kubectl) which causes Kubernetes to generate a new secret with a new bearer token. The new token can be re-inputted to Argo CD by re-running `argocd cluster add`. Run the following commands against the managed cluster:\n\n```\n# run using a kubeconfig for the externally managed cluster\nkubectl delete secret argocd-manager-token-XXXXXX -n kube-system\nargocd cluster add CONTEXTNAME\n```\n\nNote\n\nKubernetes 1.24 stopped automatically creating tokens for Service Accounts. Starting in Argo CD 2.4, `argocd cluster add` creates a ServiceAccount and a non-expiring Service Account token Secret when adding 1.24 clusters. In the future, Argo CD will add support for the Kubernetes TokenRequest API to avoid using long-lived tokens.\n\nTo revoke Argo CD's access to a managed cluster, delete the RBAC artifacts against the managed cluster, and remove the cluster entry from Argo CD:\n\n```\n# run using a kubeconfig for the externally managed cluster\nkubectl delete sa argocd-manager -n kube-system\nkubectl delete clusterrole argocd-manager-role\nkubectl delete clusterrolebinding argocd-manager-role-binding\nargocd cluster rm https://your-kubernetes-cluster-addr\n```\n\nNOTE: for AWS EKS clusters, the get-token command is used to authenticate to the external cluster, which uses IAM roles in lieu of locally stored tokens, so token rotation is not needed, and revocation is handled through IAM.\n\n## Cluster RBAC\nBy default, Argo CD uses a clusteradmin level role in order to:\n\n1. watch & operate on cluster state\n2. deploy resources to the cluster\n\nAlthough Argo CD requires cluster-wide read privileges to resources in the managed cluster to function properly, it does not necessarily need full write privileges to the cluster. The ClusterRole used by argocd-server and argocd-application-controller can be modified such that write privileges are limited to only the namespaces and resources that you wish Argo CD to manage.\n\nTo fine-tune privileges of externally managed clusters, edit the ClusterRole of the `argocd-manager-role`\n\n```\n# run using a kubeconfig for the externally managed cluster\nkubectl edit clusterrole argocd-manager-role\n```\n\nTo fine-tune privileges which Argo CD has against its own cluster (i.e. `https://kubernetes.default.svc`), edit the following cluster roles where Argo CD is running in:\n\n```\n# run using a kubeconfig to the cluster Argo CD is running in\nkubectl edit clusterrole argocd-server\nkubectl edit clusterrole argocd-application-controller\n```\n\nTip\n\nIf you want to deny Argo CD access to a kind of resource then add it as an excluded resource.\n\n## Auditing\nAs a GitOps deployment tool, the Git commit history provides a natural audit log of what changes were made to application configuration, when they were made, and by whom. However, this audit log only applies to what happened in Git and does not necessarily correlate one-to-one with events that happen in a cluster. For example, User A could have made multiple commits to application manifests, but User B could have just only synced those changes to the cluster sometime later.\n\nTo complement the Git revision history, Argo CD emits Kubernetes Events of application activity, indicating the responsible actor when applicable. For example:\n\n```\n$ kubectl get events\nLAST SEEN   FIRST SEEN   COUNT   NAME                         KIND          SUBOBJECT   TYPE      REASON               SOURCE                          MESSAGE\n1m          1m           1       guestbook.157f7c5edd33aeac   Application               Normal    ResourceCreated      argocd-server                   admin created application\n1m          1m           1       guestbook.157f7c5f0f747acf   Application               Normal    ResourceUpdated      argocd-application-controller   Updated sync status:  -> OutOfSync\n1m          1m           1       guestbook.157f7c5f0fbebbff   Application               Normal    ResourceUpdated      argocd-application-controller   Updated health status:  -> Missing\n1m          1m           1       guestbook.157f7c6069e14f4d   Application               Normal    OperationStarted     argocd-server                   admin initiated sync to HEAD (8a1cb4a02d3538e54907c827352f66f20c3d7b0d)\n1m          1m           1       guestbook.157f7c60a55a81a8   Application               Normal    OperationCompleted   argocd-application-controller   Sync operation to 8a1cb4a02d3538e54907c827352f66f20c3d7b0d succeeded\n1m          1m           1       guestbook.157f7c60af1ccae2   Application               Normal    ResourceUpdated      argocd-application-controller   Updated sync status: OutOfSync -> Synced\n1m          1m           1       guestbook.157f7c60af5bc4f0   Application               Normal    ResourceUpdated      argocd-application-controller   Updated health status: Missing -> Progressing\n1m          1m           1       guestbook.157f7c651990e848   Application               Normal    ResourceUpdated      argocd-application-controller   Updated health status: Progressing -> Healthy\n```\n\nThese events can be then be persisted for longer periods of time using other tools as Event Exporter or Event Router.\n\n## WebHook Payloads\nPayloads from webhook events are considered untrusted. Argo CD only examines the payload to infer the involved applications of the webhook event (e.g. which repo was modified), then refreshes the related application for reconciliation. This refresh is the same refresh which occurs regularly at three minute intervals, just fast-tracked by the webhook event.\n\n## Logging\nSecurity-related logs are tagged with a `security` field to make them easier to find, analyze, and report on.\n\n| Level | Friendly Level | Description | Example |\n| --- | --- | --- | --- |\n| 1 | Low | Unexceptional, non-malicious events | Successful access |\n| 2 | Medium | Could indicate malicious events, but has a high likelihood of being user/system error | Access denied |\n| 3 | High | Likely malicious events but one that had no side effects or was blocked | Out of bounds symlinks in repo |\n| 4 | Critical | Any malicious or exploitable event that had a side effect | Secrets being left behind on the filesystem |\n| 5 | Emergency | Unmistakably malicious events that should NEVER occur accidentally and indicates an active attack | Brute forcing of accounts |\n\nWhere applicable, a `CWE` field is also added specifying the Common Weakness Enumeration number.\n\nWarning\n\nPlease be aware that not all security logs are comprehensively tagged yet and these examples are not necessarily implemented.\n\n## API Logs\nArgo CD logs payloads of most API requests except request that are considered sensitive, such as `/cluster.ClusterService/Create`, `/session.SessionService/Create` etc. The full list of method can be found in server/server.go.\n\nArgo CD does not log IP addresses of clients requesting API endpoints, since the API server is typically behind a proxy. Instead, it is recommended to configure IP addresses logging in the proxy server that sits in front of the API server.\n\n## ApplicationSets\nArgo CD's ApplicationSets feature has its own security considerations. Be aware of those issues before using ApplicationSets.\n\n## Limiting Directory App Memory Usage\nDirectory-type Applications (those whose source is raw JSON or YAML files) can consume significant repo-server memory, depending on the size and structure of the YAML files.\n\nTo avoid over-using memory in the repo-server (potentially causing a crash and denial of service), set the `reposerver.max.combined.directory.manifests.size` config option in argocd-cmd-params-cm.\n\nThis option limits the combined size of all JSON or YAML files in an individual app. Note that the in-memory representation of a manifest may be as much as 300x the size of the manifest on disk. Also note that the limit is per Application. If manifests are generated for multiple applications at once, memory usage will be higher.\n\n**Example:**\n\nSuppose your repo-server has a 10G memory limit, and you have ten Applications which use raw JSON or YAML files. To calculate the max safe combined file size per Application, divide 10G by 300 * 10 Apps (300 being the worst-case memory growth factor for the manifests).\n\n```\n10G / 300 * 10 = 3M\n```\n\nSo a reasonably safe configuration for this setup would be a 3M limit per app.\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n  reposerver.max.combined.directory.manifests.size: '3M'\n```\n\nThe 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.\n\nKeep in mind that if a malicious user can create additional Applications, they can increase the total memory usage. Grant App creation privileges carefully.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/security", "title": "Security", "description": "Argo CD has undergone rigorous internal security reviews and penetration testing to satisfy PCI compliance requirements. The following are some security topics and implementation details of Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 00:36:01", "type": "overview", "page_metadata": {"title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/security/", "scrapeId": "1d45c24f-2e1e-411b-8555-68bace05c067", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/security", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/security/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Security\"?\n\nAssistant: Here are some code examples:\n\n### Rotate Bearer Token\n```yaml\n# run using a kubeconfig for the externally managed cluster\nkubectl delete secret argocd-manager-token-XXXXXX -n kube-system\nargocd cluster add CONTEXTNAME\n```\n\n### Revoke Access to Managed Cluster\n```yaml\n# run using a kubeconfig for the externally managed cluster\nkubectl delete sa argocd-manager -n kube-system\nkubectl delete clusterrole argocd-manager-role\nkubectl delete clusterrolebinding argocd-manager-role-binding\nargocd cluster rm https://your-kubernetes-cluster-addr\n```\n\n### Fine-tune Privileges of Externally Managed Clusters\n```yaml\n# run using a kubeconfig for the externally managed cluster\nkubectl edit clusterrole argocd-manager-role\n```\n\n### Fine-tune Privileges Against Own Cluster\n```yaml\n# run using a kubeconfig to the cluster Argo CD is running in\nkubectl edit clusterrole argocd-server\nkubectl edit clusterrole argocd-application-controller\n```\n\n### Limit Combined Size of Manifests\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n  reposerver.max.combined.directory.manifests.size: '3M'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/security", "title": "Security", "description": "Argo CD has undergone rigorous internal security reviews and penetration testing to satisfy PCI compliance requirements. The following are some security topics and implementation details of Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 00:36:01", "type": "code_examples", "page_metadata": {"title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/security/", "scrapeId": "1d45c24f-2e1e-411b-8555-68bace05c067", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/security", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/security/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Security\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you want to deny Argo CD access to a kind of resource then add it as an excluded resource.\n• If you know that your users will not need a certain config management tool, it's advisable to disable that tool.\n• Grant App creation privileges carefully.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/security", "title": "Security", "description": "Argo CD has undergone rigorous internal security reviews and penetration testing to satisfy PCI compliance requirements. The following are some security topics and implementation details of Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 00:36:01", "type": "best_practices", "page_metadata": {"title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/security/", "scrapeId": "1d45c24f-2e1e-411b-8555-68bace05c067", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/security", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/security/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Verification of Argo CD Artifacts\"?\n\nAssistant: This page covers the verification process for Argo CD artifacts, including prerequisites, release assets, and methods for verifying container images, CLI artifacts, and SBOMs.\n\nHere's a detailed explanation:\n\n\n## Prerequisites\n- cosign `v2.0.0` or higher [installation instructions](https://docs.sigstore.dev/cosign/installation)\n- slsa-verifier [installation instructions](https://github.com/slsa-framework/slsa-verifier#installation)\n- crane [installation instructions](https://github.com/google/go-containerregistry/blob/main/cmd/crane/README.md) (for container verification only)\n\n## Release Assets\n| Asset | Description |\n| --- | --- |\n| argocd-darwin-amd64 | CLI Binary |\n| argocd-darwin-arm64 | CLI Binary |\n| argocd-linux_amd64 | CLI Binary |\n| argocd-linux_arm64 | CLI Binary |\n| argocd-linux_ppc64le | CLI Binary |\n| argocd-linux_s390x | CLI Binary |\n| argocd-windows_amd64 | CLI Binary |\n| argocd-cli.intoto.jsonl | Attestation of CLI binaries |\n| argocd-sbom.intoto.jsonl | Attestation of SBOM |\n| cli_checksums.txt | Checksums of binaries |\n| sbom.tar.gz | Sbom |\n| sbom.tar.gz.pem | Certificate used to sign sbom |\n| sbom.tar.gz.sig | Signature of sbom |\n\n## Verification of container images\nArgo CD container images are signed by [cosign](https://github.com/sigstore/cosign) using identity-based (\"keyless\") signing and transparency. Executing the following command can be used to verify the signature of a container image:\n\n```\ncosign verify \\\n--certificate-identity-regexp https://github.com/argoproj/argo-cd/.github/workflows/image-reuse.yaml@refs/tags/v \\\n--certificate-oidc-issuer https://token.actions.githubusercontent.com \\\n--certificate-github-workflow-repository \"argoproj/argo-cd\" \\\nquay.io/argoproj/argocd:v2.11.3 | jq\n```\n\nThe command should output the following if the container image was correctly verified:\n\n```\nThe following checks were performed on each of these signatures:\n  - The cosign claims were validated\n  - Existence of the claims in the transparency log was verified offline\n  - Any certificates were verified against the Fulcio roots.\n[\\\n  {\\\n    \"critical\": {\\\n      \"identity\": {\\\n        \"docker-reference\": \"quay.io/argoproj/argo-cd\"\\\n      },\\\n      \"image\": {\\\n        \"docker-manifest-digest\": \"sha256:63dc60481b1b2abf271e1f2b866be8a92962b0e53aaa728902caa8ac8d235277\"\\\n      },\\\n      \"type\": \"cosign container image signature\"\\\n    },\\\n    \"optional\": {\\\n      \"1.3.6.1.4.1.57264.1.1\": \"https://token.actions.githubusercontent.com\",\\\n      \"1.3.6.1.4.1.57264.1.2\": \"push\",\\\n      \"1.3.6.1.4.1.57264.1.3\": \"a6ec84da0eaa519cbd91a8f016cf4050c03323b2\",\\\n      \"1.3.6.1.4.1.57264.1.4\": \"Publish ArgoCD Release\",\\\n      \"1.3.6.1.4.1.57264.1.5\": \"argoproj/argo-cd\",\\\n      \"1.3.6.1.4.1.57264.1.6\": \"refs/tags/<version>\",\\\n      ...\\\n  }\\\n]``\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/signed-release-assets", "title": "Verification of Argo CD Artifacts", "description": "This page covers the verification process for Argo CD artifacts, including prerequisites, release assets, and methods for verifying container images, CLI artifacts, and SBOMs.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:36:28", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/signed-release-assets/", "title": "Verification of Argo CD Artifacts - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "efd774cf-a81c-4fe2-8c40-6bd33df536ea", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/signed-release-assets", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/signed-release-assets/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Verification of Argo CD Artifacts\"?\n\nAssistant: Here are some code examples:\n\n### Verify Container Image Signature\n```yaml\ncosign verify \\\n--certificate-identity-regexp https://github.com/argoproj/argo-cd/.github/workflows/image-reuse.yaml@refs/tags/v \\\n--certificate-oidc-issuer https://token.actions.githubusercontent.com \\\n--certificate-github-workflow-repository \"argoproj/argo-cd\" \\\nquay.io/argoproj/argocd:v2.11.3 | jq\n```\n\n### Verify Image with SLSA Attestations\n```yaml\n# Get the immutable container image to prevent TOCTOU attacks https://github.com/slsa-framework/slsa-verifier#toctou-attacks\nIMAGE=quay.io/argoproj/argocd:v2.7.0\nIMAGE=\"${IMAGE}@\"$(crane digest \"${IMAGE}\")\n# Verify provenance, including the tag to prevent rollback attacks.\nslsa-verifier verify-image \"$IMAGE\" \\\n    --source-uri github.com/argoproj/argo-cd \\\n    --source-tag v2.7.0\n```\n\n### Verify CLI Artifacts with SLSA Attestations\n```yaml\nslsa-verifier verify-artifact argocd-linux-amd64 \\\n  --provenance-path argocd-cli.intoto.jsonl \\\n  --source-uri github.com/argoproj/argo-cd \\\n  --source-tag v2.7.0\n```\n\n### Verify SBOM\n```yaml\nslsa-verifier verify-artifact sbom.tar.gz \\\n  --provenance-path argocd-sbom.intoto.jsonl \\\n  --source-uri github.com/argoproj/argo-cd \\\n  --source-tag v2.7.0\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/signed-release-assets", "title": "Verification of Argo CD Artifacts", "description": "This page covers the verification process for Argo CD artifacts, including prerequisites, release assets, and methods for verifying container images, CLI artifacts, and SBOMs.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:36:28", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/signed-release-assets/", "title": "Verification of Argo CD Artifacts - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "efd774cf-a81c-4fe2-8c40-6bd33df536ea", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/signed-release-assets", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/signed-release-assets/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Verification of Argo CD Artifacts\"?\n\nAssistant: Here are the recommended best practices:\n\n• `cosign` or `slsa-verifier` can both be used to verify image attestations.\n• Check the documentation of each binary for detailed instructions.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/signed-release-assets", "title": "Verification of Argo CD Artifacts", "description": "This page covers the verification process for Argo CD artifacts, including prerequisites, release assets, and methods for verifying container images, CLI artifacts, and SBOMs.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:36:28", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/signed-release-assets/", "title": "Verification of Argo CD Artifacts - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "efd774cf-a81c-4fe2-8c40-6bd33df536ea", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/signed-release-assets", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/signed-release-assets/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Tested Kubernetes Versions\"?\n\nAssistant: This page lists the compatible Kubernetes versions for different Argo CD versions.\n\nHere's a detailed explanation:\n\n\n## Compatibility Table\n| Argo CD version | Kubernetes versions |\n| --- | --- |\n| 2.14 | v1.31, v1.30, v1.29, v1.28 |\n| 2.13 | v1.30, v1.29, v1.28, v1.27 |\n| 2.12 | v1.29, v1.28, v1.27, v1.26 |\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tested-kubernetes-versions", "title": "Tested Kubernetes Versions", "description": "This page lists the compatible Kubernetes versions for different Argo CD versions.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:36:34", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/tested-kubernetes-versions/", "title": "Tested kubernetes versions - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "b0f6a6b1-71a0-41fc-b2ea-593ea6c08f9e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tested-kubernetes-versions", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tested-kubernetes-versions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"TLS configuration\"?\n\nAssistant: Argo CD provides three inbound TLS endpoints that can be configured: the user-facing endpoint of the argocd-server workload, the endpoint of the argocd-repo-server, and the endpoint of the argocd-dex-server.\n\nHere's a detailed explanation:\n\n\n## Configuring TLS for argocd-server\nYou can configure certain TLS options for the argocd-server workload by setting command line parameters. The following parameters are available:\n\n| Parameter | Default | Description |\n| --- | --- | --- |\n| `--insecure` | `false` | Disables TLS completely |\n| `--tlsminversion` | `1.2` | The minimum TLS version to be offered to clients |\n| `--tlsmaxversion` | `1.3` | The maximum TLS version to be offered to clients |\n| `--tlsciphers` | `TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:TLS_RSA_WITH_AES_256_GCM_SHA384` | A colon separated list of TLS cipher suites to be offered to clients |\n\nThere are two ways to configure the TLS certificates used by argocd-server:\n\n- Setting the `tls.crt` and `tls.key` keys in the `argocd-server-tls` secret to hold PEM data of the certificate and the corresponding private key. The `argocd-server-tls` secret may be of type `tls`, but does not have to be.\n- Setting the `tls.crt` and `tls.key` keys in the `argocd-secret` secret to hold PEM data of the certificate and the corresponding private key. This method is considered deprecated, and only exists for purposes of backwards compatibility. Changing `argocd-secret` should not be used to override the TLS certificate anymore.\n\nArgo CD decides which TLS certificate to use for the endpoint of argocd-server as follows:\n\n- If the `argocd-server-tls` secret exists and contains a valid key pair in the `tls.crt` and `tls.key` keys, this will be used for the certificate of the endpoint of argocd-server.\n- Otherwise, if the `argocd-secret` secret contains a valid key pair in the `tls.crt` and `tls.key` keys, this will be used as certificate for the endpoint of argocd-server.\n- If no `tls.crt` and `tls.key` keys are found in neither of the two mentioned secrets, Argo CD will generate a self-signed certificate and persist it in the `argocd-secret` secret.\n\nThe `argocd-server-tls` secret contains only information for TLS configuration to be used by argocd-server and is safe to be managed via third-party tools such as `cert-manager` or `SealedSecrets`.\n\nTo create this secret manually from an existing key pair, you can use `kubectl`:\n\n```\nkubectl create -n argocd secret tls argocd-server-tls \\\n  --cert=/path/to/cert.pem \\\n  --key=/path/to/key.pem\n```\n\nArgo CD will pick up changes to the `argocd-server-tls` secret automatically and will not require restart of the pods to use a renewed certificate.\n\n## Configuring inbound TLS for argocd-repo-server\nYou can configure certain TLS options for the argocd-repo-server workload by setting command line parameters. The following parameters are available:\n\n| Parameter | Default | Description |\n| --- | --- | --- |\n| `--disable-tls` | `false` | Disables TLS completely |\n| `--tlsminversion` | `1.2` | The minimum TLS version to be offered to clients |\n| `--tlsmaxversion` | `1.3` | The maximum TLS version to be offered to clients |\n| `--tlsciphers` | `TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:TLS_RSA_WITH_AES_256_GCM_SHA384` | A colon separated list of TLS cipher suites to be offered to clients |\n\nTo configure the TLS certificate used by the argocd-repo-server workload, create a secret named `argocd-repo-server-tls` in the namespace where Argo CD is running in with the certificate's key pair stored in `tls.crt` and `tls.key` keys. If this secret does not exist, `argocd-repo-server` will generate and use a self-signed certificate.\n\nTo create this secret, you can use `kubectl`:\n\n```\nkubectl create -n argocd secret tls argocd-repo-server-tls \\\n  --cert=/path/to/cert.pem \\\n  --key=/path/to/key.pem\n```\n\nIf the certificate is self-signed, you will also need to add `ca.crt` to the secret with the contents of your CA certificate.\n\nPlease note, that as opposed to argocd-server, the argocd-repo-server is not able to pick up changes to this secret automatically. If you create (or update) this secret, the argocd-repo-server pods need to be restarted.\n\nAlso note, that the certificate should be issued with the correct SAN entries for the argocd-repo-server, containing at least the entries for `DNS:argocd-repo-server` and `DNS:argocd-repo-server.argo-cd.svc` depending on how your workloads connect to the repository server.\n\n## Configuring inbound TLS for argocd-dex-server\nYou can configure certain TLS options for the argocd-dex-server workload by setting command line parameters. The following parameters are available:\n\n| Parameter | Default | Description |\n| --- | --- | --- |\n| `--disable-tls` | `false` | Disables TLS completely |\n\nTo configure the TLS certificate used by the argocd-dex-server workload, create a secret named `argocd-dex-server-tls` in the namespace where Argo CD is running in with the certificate's key pair stored in `tls.crt` and `tls.key` keys. If this secret does not exist, `argocd-dex-server` will generate and use a self-signed certificate.\n\nTo create this secret, you can use `kubectl`:\n\n```\nkubectl create -n argocd secret tls argocd-dex-server-tls \\\n  --cert=/path/to/cert.pem \\\n  --key=/path/to/key.pem\n```\n\nIf the certificate is self-signed, you will also need to add `ca.crt` to the secret with the contents of your CA certificate.\n\nPlease note, that as opposed to argocd-server, the argocd-dex-server is not able to pick up changes to this secret automatically. If you create (or update) this secret, the argocd-dex-server pods need to be restarted.\n\nAlso note, that the certificate should be issued with the correct SAN entries for the argocd-dex-server, containing at least the entries for `DNS:argocd-dex-server` and `DNS:argocd-dex-server.argo-cd.svc` depending on how your workloads connect to the repository server.\n\n## Configuring TLS between Argo CD components\nBoth argocd-server and argocd-application-controller communicate with the argocd-repo-server using a gRPC API over TLS. By default, argocd-repo-server generates a non-persistent, self signed certificate to use for its gRPC endpoint on startup. Because the argocd-repo-server has no means to connect to the K8s control plane API, this certificate is not being available to outside consumers for verification. Both, the argocd-server and argocd-application-server will use a non-validating connection to the argocd-repo-server for this reason.\n\nTo change this behavior to be more secure by having the argocd-server and argocd-application-controller validate the TLS certificate of the argocd-repo-server endpoint, the following steps need to be performed:\n\n- Create a persistent TLS certificate to be used by argocd-repo-server, as shown above\n- Restart the argocd-repo-server pod(s)\n- Modify the pod startup parameters for argocd-server and argocd-application-controller to include the `--repo-server-strict-tls` parameter.\n\nThe argocd-server and argocd-application-controller workloads will now validate the TLS certificate of the argocd-repo-server by using the certificate stored in the argocd-repo-server-tls secret.\n\nCertificate expiry\n\nPlease make sure that the certificate has a proper life time. Keep in mind that when you have to replace the certificate, all workloads have to be restarted in order to properly work again.\n\n## Disabling TLS to argocd-repo-server\nIn some scenarios where mTLS through side-car proxies is involved (e.g. in a service mesh), you may want configure the connections between the argocd-server and argocd-application-controller to argocd-repo-server to not use TLS at all.\n\nIn this case, you will need to:\n\n- Configure argocd-repo-server with TLS on the gRPC API disabled by specifying the `--disable-tls` parameter to the pod container's startup arguments. Also, consider restricting listening addresses to the loopback interface by specifying `--listen 127.0.0.1` parameter, so that insecure endpoint is not exposed on the pod's network interfaces, but still available to the side-car container.\n- Configure argocd-server and argocd-application-controller to not use TLS for connections to the argocd-repo-server by specifying the parameter `--repo-server-plaintext` to the pod container's startup arguments\n- Configure argocd-server and argocd-application-controller to connect to the side-car instead of directly to the argocd-repo-server service by specifying its address via the `--repo-server <address>` parameter\n\nAfter this change, the argocd-server and argocd-application-controller will use a plain text connection to the side-car proxy, that will handle all aspects of TLS to the argocd-repo-server's TLS side-car proxy.\n\n## Disabling TLS to argocd-dex-server\nIn some scenarios where mTLS through side-car proxies is involved (e.g. in a service mesh), you may want configure the connections between argocd-server to argocd-dex-server to not use TLS at all.\n\nIn this case, you will need to:\n\n- Configure argocd-dex-server with TLS on the HTTPS API disabled by specifying the `--disable-tls` parameter to the pod container's startup arguments\n- Configure argocd-server to not use TLS for connections to the argocd-dex-server by specifying the parameter `--dex-server-plaintext` to the pod container's startup arguments\n- Configure argocd-server to connect to the side-car instead of directly to the argocd-dex-server service by specifying its address via the `--dex-server <address>` parameter\n\nAfter this change, the argocd-server will use a plain text connection to the side-car proxy, that will handle all aspects of TLS to the argocd-dex-server's TLS side-car proxy.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tls", "title": "TLS configuration", "description": "Argo CD provides three inbound TLS endpoints that can be configured: the user-facing endpoint of the argocd-server workload, the endpoint of the argocd-repo-server, and the endpoint of the argocd-dex-server.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:37:06", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/tls/", "title": "TLS configuration - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "88e6f71c-0a92-4049-8048-91f086e80702", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tls", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"TLS configuration\"?\n\nAssistant: Here are some code examples:\n\n### Create argocd-server-tls secret\n```yaml\nkubectl create -n argocd secret tls argocd-server-tls \\\n  --cert=/path/to/cert.pem \\\n  --key=/path/to/key.pem\n```\n\n### Create argocd-repo-server-tls secret\n```yaml\nkubectl create -n argocd secret tls argocd-repo-server-tls \\\n  --cert=/path/to/cert.pem \\\n  --key=/path/to/key.pem\n```\n\n### Create argocd-dex-server-tls secret\n```yaml\nkubectl create -n argocd secret tls argocd-dex-server-tls \\\n  --cert=/path/to/cert.pem \\\n  --key=/path/to/key.pem\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tls", "title": "TLS configuration", "description": "Argo CD provides three inbound TLS endpoints that can be configured: the user-facing endpoint of the argocd-server workload, the endpoint of the argocd-repo-server, and the endpoint of the argocd-dex-server.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:37:06", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/tls/", "title": "TLS configuration - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "88e6f71c-0a92-4049-8048-91f086e80702", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tls", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"TLS configuration\"?\n\nAssistant: Here are the recommended best practices:\n\n• Argo CD will pick up changes to the argocd-server-tls secret automatically and will not require restart of the pods to use a renewed certificate.\n• Please make sure that the certificate has a proper life time. Keep in mind that when you have to replace the certificate, all workloads have to be restarted in order to properly work again.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tls", "title": "TLS configuration", "description": "Argo CD provides three inbound TLS endpoints that can be configured: the user-facing endpoint of the argocd-server workload, the endpoint of the argocd-repo-server, and the endpoint of the argocd-dex-server.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:37:06", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/tls/", "title": "TLS configuration - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "88e6f71c-0a92-4049-8048-91f086e80702", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tls", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Troubleshooting Tools\"?\n\nAssistant: The document describes how to use `argocd admin` subcommands to simplify Argo CD settings customizations and troubleshoot connectivity issues.\n\nHere's a detailed explanation:\n\n\n## Settings\nArgo CD provides multiple ways to customize system behavior and has a lot of settings. It might be dangerous to modify settings on Argo CD used in production by multiple users. Before applying settings you can use `argocd admin` subcommands to make sure that settings are valid and Argo CD is working as expected.\n\nThe `argocd admin settings validate` command performs basic settings validation and print short summary of each settings group.\n\n**Diffing Customization**\n\n[Diffing customization](https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/) allows excluding some resource fields from diffing process. The diffing customizations are configured in `resource.customizations` field of `argocd-cm` ConfigMap.\n\nThe following `argocd admin` command prints information about fields excluded from diffing in the specified ConfigMap.\n\n```\nargocd admin settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n**Health Assessment**\n\nArgo CD provides built-in [health assessment](https://argo-cd.readthedocs.io/en/stable/operator-manual/health/) for several Kubernetes resources which can be further customized by writing your own health checks in [Lua](https://www.lua.org/). The health checks are configured in the `resource.customizations` field of `argocd-cm` ConfigMap.\n\nThe following `argocd admin` command assess resource health using Lua script configured in the specified ConfigMap.\n\n```\nargocd admin settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n**Resource Actions**\n\nResource actions allows configuring named Lua script which performs resource modification.\n\nThe following `argocd admin` command executes action using Lua script configured in the specified ConfigMap and prints applied modifications.\n\n```\nargocd admin settings resource-overrides run-action /tmp/deploy.yaml restart --argocd-cm-path /private/tmp/argocd-cm.yaml\n```\n\nThe following `argocd admin` command lists actions available for a given resource using Lua script configured in the specified ConfigMap.\n\n```\nargocd admin settings resource-overrides list-actions /tmp/deploy.yaml --argocd-cm-path /private/tmp/argocd-cm.yaml\n```\n\n## Cluster credentials\nThe `argocd admin cluster kubeconfig` is useful if you manually created Secret with cluster credentials and trying need to troubleshoot connectivity issues. In this case, it is suggested to use the following steps:\n\n1 SSH into [argocd-application-controller] pod.\n\n```\nkubectl exec -n argocd -it \\\n  $(kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-application-controller -o jsonpath='{.items[0].metadata.name}') bash\n```\n\n2 Use `argocd admin cluster kubeconfig` command to export kubeconfig file from the configured Secret:\n\n```\nargocd admin cluster kubeconfig https://<api-server-url> /tmp/kubeconfig --namespace argocd\n```\n\n3 Use `kubectl` to get more details about connection issues, fix them and apply changes back to secret:\n\n```\nexport KUBECONFIG=/tmp/kubeconfig\nkubectl get pods -v 9\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/troubleshooting", "title": "Troubleshooting Tools", "description": "The document describes how to use `argocd admin` subcommands to simplify Argo CD settings customizations and troubleshoot connectivity issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:37:29", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/troubleshooting/", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "title": "Troubleshooting Tools - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "29527448-66ff-4ab4-8433-414604b4d9e9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/troubleshooting", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/troubleshooting/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Troubleshooting Tools\"?\n\nAssistant: Here are some code examples:\n\n### Diffing Customization Command\n```yaml\nargocd admin settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n### Health Assessment Command\n```yaml\nargocd admin settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n### Resource Actions Command to Execute Action\n```yaml\nargocd admin settings resource-overrides run-action /tmp/deploy.yaml restart --argocd-cm-path /private/tmp/argocd-cm.yaml\n```\n\n### Resource Actions Command to List Actions\n```yaml\nargocd admin settings resource-overrides list-actions /tmp/deploy.yaml --argocd-cm-path /private/tmp/argocd-cm.yaml\n```\n\n### SSH into argocd-application-controller Pod\n```yaml\nkubectl exec -n argocd -it \\\n  $(kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-application-controller -o jsonpath='{.items[0].metadata.name}') bash\n```\n\n### Export Kubeconfig Command\n```yaml\nargocd admin cluster kubeconfig https://<api-server-url> /tmp/kubeconfig --namespace argocd\n```\n\n### Get Pods Command with Verbose Output\n```yaml\nexport KUBECONFIG=/tmp/kubeconfig\nkubectl get pods -v 9\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/troubleshooting", "title": "Troubleshooting Tools", "description": "The document describes how to use `argocd admin` subcommands to simplify Argo CD settings customizations and troubleshoot connectivity issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:37:29", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/troubleshooting/", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "title": "Troubleshooting Tools - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "29527448-66ff-4ab4-8433-414604b4d9e9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/troubleshooting", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/troubleshooting/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Troubleshooting Tools\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `argocd admin` subcommands to validate settings before applying them in production environments.\n• Be cautious when modifying settings in Argo CD used by multiple users.\n• Utilize diffing customizations to exclude specific resource fields from the diffing process.\n• Customize health assessments by writing your own health checks in Lua.\n• Use resource actions to configure named Lua scripts for resource modifications.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/troubleshooting", "title": "Troubleshooting Tools", "description": "The document describes how to use `argocd admin` subcommands to simplify Argo CD settings customizations and troubleshoot connectivity issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:37:29", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/troubleshooting/", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "title": "Troubleshooting Tools - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "29527448-66ff-4ab4-8433-414604b4d9e9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/troubleshooting", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/troubleshooting/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"UI Customization\"?\n\nAssistant: This page covers the customization options available for the UI in Argo CD, specifically focusing on the Application Details view.\n\nHere's a detailed explanation:\n\n\n## Default Application Details View\nBy default, the Application Details will show the `Tree` view.\n\nThis can be configured on an Application basis, by setting the `pref.argocd.argoproj.io/default-view` annotation, accepting one of: `tree`, `pods`, `network`, `list` as values.\n\nFor the Pods view, the default grouping mechanism can be configured using the `pref.argocd.argoproj.io/default-pod-sort` annotation, accepting one of: `node`, `parentResource`, `topLevelResource` as values.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ui-customization", "title": "UI Customization", "description": "This page covers the customization options available for the UI in Argo CD, specifically focusing on the Application Details view.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:37:33", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "title": "UI Customization - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/operator-manual/ui-customization/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "scrapeId": "ec85dcbb-bc07-409f-b563-54c8e25ef4cb", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ui-customization", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ui-customization/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Web-based Terminal\"?\n\nAssistant: Since v2.4, Argo CD has a web-based terminal that allows you to get a shell inside a running pod just like you would with `kubectl exec`. It's basically SSH from your browser, full ANSI color support and all! However, for security this feature is disabled by default.\n\nHere's a detailed explanation:\n\n\n## Enabling the terminal\n1. In the `argocd-cm` ConfigMap, set the `exec.enabled` key to `\"true\"`. This enables the exec feature in Argo CD.\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n     name: argocd-cm\n     namespace: <namespace>  # Replace <namespace> with your actual namespace\ndata:\n     exec.enabled: \"true\"\n```\n\n2. Patch the `argocd-server` Role (if using namespaced Argo) or ClusterRole (if using clustered Argo) to allow `argocd-server` to `exec` into pods\n\n```yaml\n- apiGroups:\n  - \"\"\nresources:\n  - pods/exec\nverbs:\n  - create\n```\n\nIf you'd like to perform the patch imperatively, you can use the following command:\n   - For namespaced Argo\n\n     ```bash\n     kubectl patch role <argocd-server-role-name> -n argocd - type='json' -p='[{\"op\": \"add\", \"path\": \"/rules/-\", \"value\": {\"apiGroups\": [\"*\"], \"resources\": [\"pods/exec\"], \"verbs\": [\"create\"]}}]'\n     ```\n\n   - For clustered Argo\n      ```bash\n          kubectl patch clusterrole <argocd-server-clusterrole-name> - type='json' -p='[{\"op\": \"add\", \"path\": \"/rules/-\", \"value\": {\"apiGroups\": [\"*\"], \"resources\": [\"pods/exec\"], \"verbs\": [\"create\"]}}]'\n      ```\n3. Add RBAC rules to allow your users to `create` the `exec` resource i.e.\n\n```\np, role:myrole, exec, create, */*, allow\n```\n\nThis can be added either to the `argocd-cm` `Configmap` manifest or an `AppProject` manifest.\n\nSee [RBAC Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#exec-resource) for more info.\n\n## Changing allowed shells\nBy default, Argo CD attempts to execute shells in this order:\n\n1. bash\n2. sh\n3. powershell\n4. cmd\n\nIf none of the shells are found, the terminal session will fail. To add to or change the allowed shells, change the `exec.shells` key in the `argocd-cm` ConfigMap, separating them with commas.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/web_based_terminal", "title": "Web-based Terminal", "description": "Since v2.4, Argo CD has a web-based terminal that allows you to get a shell inside a running pod just like you would with `kubectl exec`. It's basically SSH from your browser, full ANSI color support and all! However, for security this feature is disabled by default.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:37:47", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/web_based_terminal/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Web-based Terminal - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "175ae42c-cd79-408d-8440-687a1347ab4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/web_based_terminal", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/web_based_terminal/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Web-based Terminal\"?\n\nAssistant: Here are some code examples:\n\n### Enable exec feature in ConfigMap\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n     name: argocd-cm\n     namespace: <namespace>  # Replace <namespace> with your actual namespace\ndata:\n     exec.enabled: \"true\"\n```\n\n### Patch argocd-server Role\n```yaml\n- apiGroups:\n  - \"\"\nresources:\n  - pods/exec\nverbs:\n  - create\n```\n\n### Imperative patch for namespaced Argo\n```yaml\nkubectl patch role <argocd-server-role-name> -n argocd - type='json' -p='[{\"op\": \"add\", \"path\": \"/rules/-\", \"value\": {\"apiGroups\": [\"*\"], \"resources\": [\"pods/exec\"], \"verbs\": [\"create\"]}}]'\n```\n\n### Imperative patch for clustered Argo\n```yaml\nkubectl patch clusterrole <argocd-server-clusterrole-name> - type='json' -p='[{\"op\": \"add\", \"path\": \"/rules/-\", \"value\": {\"apiGroups\": [\"*\"], \"resources\": [\"pods/exec\"], \"verbs\": [\"create\"]}}]'\n```\n\n### RBAC rule for exec resource\n```yaml\np, role:myrole, exec, create, */*, allow\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/web_based_terminal", "title": "Web-based Terminal", "description": "Since v2.4, Argo CD has a web-based terminal that allows you to get a shell inside a running pod just like you would with `kubectl exec`. It's basically SSH from your browser, full ANSI color support and all! However, for security this feature is disabled by default.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:37:47", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/web_based_terminal/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Web-based Terminal - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "175ae42c-cd79-408d-8440-687a1347ab4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/web_based_terminal", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/web_based_terminal/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Web-based Terminal\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the `exec.enabled` key is set to \"true\" in the `argocd-cm` ConfigMap to enable the terminal feature.\n• Be cautious with the privileges granted to users, as they can run arbitrary code on any Pod managed by an Application.\n• Regularly review and update RBAC rules to maintain security and proper access control.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/web_based_terminal", "title": "Web-based Terminal", "description": "Since v2.4, Argo CD has a web-based terminal that allows you to get a shell inside a running pod just like you would with `kubectl exec`. It's basically SSH from your browser, full ANSI color support and all! However, for security this feature is disabled by default.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:37:47", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/web_based_terminal/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Web-based Terminal - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "175ae42c-cd79-408d-8440-687a1347ab4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/web_based_terminal", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/web_based_terminal/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Git Webhook Configuration\"?\n\nAssistant: This page explains how to configure Git webhooks for Argo CD, detailing the setup process for various Git providers and best practices for security.\n\nHere's a detailed explanation:\n\n\n## Overview\nArgo CD polls Git repositories every three minutes to detect changes to the manifests. To eliminate this delay from polling, the API server can be configured to receive webhook events. Argo CD supports Git webhook notifications from GitHub, GitLab, Bitbucket, Bitbucket Server, Azure DevOps and Gogs. The following explains how to configure a Git webhook for GitHub, but the same process should be applicable to other providers.\n\nNote\n\nThe webhook handler does not differentiate between branch events and tag events where the branch and tag names are the same. A hook event for a push to branch `x` will trigger a refresh for an app pointing at the same repo with `targetRevision: refs/tags/x`.\n\n## 1. Create The WebHook In The Git Provider\nIn your Git provider, navigate to the settings page where webhooks can be configured. The payload URL configured in the Git provider should use the `/api/webhook` endpoint of your Argo CD instance (e.g. `https://argocd.example.com/api/webhook`). If you wish to use a shared secret, input an arbitrary value in the secret. This value will be used when configuring the webhook in the next step.\n\nTo prevent DDoS attacks with unauthenticated webhook events (the `/api/webhook` endpoint currently lacks rate limiting protection), it is recommended to limit the payload size. You can achieve this by configuring the `argocd-cm` ConfigMap with the `webhook.maxPayloadSizeMB` attribute. The default value is 50MB.\n\n## Github\n![Add Webhook](https://argo-cd.readthedocs.io/en/stable/assets/webhook-config.png)\n\nNote\n\nWhen creating the webhook in GitHub, the \"Content type\" needs to be set to \"application/json\". The default value \"application/x-www-form-urlencoded\" is not supported by the library used to handle the hooks.\n\n## Azure DevOps\n![Add Webhook](https://argo-cd.readthedocs.io/en/stable/assets/azure-devops-webhook-config.png)\n\nAzure DevOps optionally supports securing the webhook using basic authentication. To use it, specify the username and password in the webhook configuration and configure the same username/password in `argocd-secret` Kubernetes secret in `webhook.azuredevops.username` and `webhook.azuredevops.password` keys.\n\n## 2. Configure Argo CD With The WebHook Secret (Optional)\nConfiguring a webhook shared secret is optional, since Argo CD will still refresh applications related to the Git repository, even with unauthenticated webhook events. This is safe to do since the contents of webhook payloads are considered untrusted, and will only result in a refresh of the application (a process which already occurs at three-minute intervals). If Argo CD is publicly accessible, then configuring a webhook secret is recommended to prevent a DDoS attack.\n\nIn the `argocd-secret` Kubernetes secret, configure one of the following keys with the Git provider's webhook secret configured in step 1.\n\n| Provider | K8s Secret Key |\n| --- | --- |\n| GitHub | `webhook.github.secret` |\n| GitLab | `webhook.gitlab.secret` |\n| BitBucket | `webhook.bitbucket.uuid` |\n| BitBucketServer | `webhook.bitbucketserver.secret` |\n| Gogs | `webhook.gogs.secret` |\n| Azure DevOps | `webhook.azuredevops.username` |\n|  | `webhook.azuredevops.password` |\n\nEdit the Argo CD Kubernetes secret:\n```\nkubectl edit secret argocd-secret -n argocd\n```\n\nTIP: for ease of entering secrets, Kubernetes supports inputting secrets in the `stringData` field, which saves you the trouble of base64 encoding the values and copying it to the `data` field. Simply copy the shared webhook secret created in step 1, to the corresponding GitHub/GitLab/BitBucket key under the `stringData` field:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  namespace: argocd\ntype: Opaque\ndata:\n...\n\nstringData:\n  # github webhook secret\n  webhook.github.secret: shhhh! it's a GitHub secret\n\n  # gitlab webhook secret\n  webhook.gitlab.secret: shhhh! it's a GitLab secret\n\n  # bitbucket webhook secret\n  webhook.bitbucket.uuid: your-bitbucket-uuid\n\n  # bitbucket server webhook secret\n  webhook.bitbucketserver.secret: shhhh! it's a Bitbucket server secret\n\n  # gogs server webhook secret\n  webhook.gogs.secret: shhhh! it's a gogs server secret\n\n  # azuredevops username and password\n  webhook.azuredevops.username: admin\n  webhook.azuredevops.password: secret-password\n```\n\nAfter saving, the changes should take effect automatically.\n\n## Alternative\nIf you want to store webhook data in **another** Kubernetes `Secret`, instead of `argocd-secret`. ArgoCD knows to check the keys under `data` in your Kubernetes `Secret` starts with `$`, then your Kubernetes `Secret` name and `:` (colon).\n\nSyntax: `$<k8s_secret_name>:<a_key_in_that_k8s_secret>`\n\n> NOTE: Secret must have label `app.kubernetes.io/part-of: argocd`\n\nFor more information refer to the corresponding section in the [User Management Documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#alternative).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook", "title": "Git Webhook Configuration", "description": "This page explains how to configure Git webhooks for Argo CD, detailing the setup process for various Git providers and best practices for security.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:38:09", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/webhook/", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "title": "Git Webhook Configuration - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "scrapeId": "9844cc58-0794-424d-aeb2-65a4367e6df5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Git Webhook Configuration\"?\n\nAssistant: Here are some code examples:\n\n### Edit Argo CD Kubernetes Secret\n```yaml\nkubectl edit secret argocd-secret -n argocd\n```\n\n### Kubernetes Secret Configuration\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  namespace: argocd\ntype: Opaque\ndata:\n...\n\nstringData:\n  # github webhook secret\n  webhook.github.secret: shhhh! it's a GitHub secret\n\n  # gitlab webhook secret\n  webhook.gitlab.secret: shhhh! it's a GitLab secret\n\n  # bitbucket webhook secret\n  webhook.bitbucket.uuid: your-bitbucket-uuid\n\n  # bitbucket server webhook secret\n  webhook.bitbucketserver.secret: shhhh! it's a Bitbucket server secret\n\n  # gogs server webhook secret\n  webhook.gogs.secret: shhhh! it's a gogs server secret\n\n  # azuredevops username and password\n  webhook.azuredevops.username: admin\n  webhook.azuredevops.password: secret-password\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook", "title": "Git Webhook Configuration", "description": "This page explains how to configure Git webhooks for Argo CD, detailing the setup process for various Git providers and best practices for security.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:38:09", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/webhook/", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "title": "Git Webhook Configuration - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "scrapeId": "9844cc58-0794-424d-aeb2-65a4367e6df5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Git Webhook Configuration\"?\n\nAssistant: Here are the recommended best practices:\n\n• To prevent DDoS attacks with unauthenticated webhook events, it is recommended to limit the payload size by configuring the `argocd-cm` ConfigMap with the `webhook.maxPayloadSizeMB` attribute. The default value is 50MB.\n• When creating the webhook in GitHub, the \"Content type\" needs to be set to \"application/json\". The default value \"application/x-www-form-urlencoded\" is not supported by the library used to handle the hooks.\n• For ease of entering secrets, Kubernetes supports inputting secrets in the `stringData` field, which saves you the trouble of base64 encoding the values and copying it to the `data` field.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook", "title": "Git Webhook Configuration", "description": "This page explains how to configure Git webhooks for Argo CD, detailing the setup process for various Git providers and best practices for security.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:38:09", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/webhook/", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "title": "Git Webhook Configuration - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "scrapeId": "9844cc58-0794-424d-aeb2-65a4367e6df5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Introduction to ApplicationSet controller\"?\n\nAssistant: The ApplicationSet controller is a Kubernetes controller that adds support for an ApplicationSet CustomResourceDefinition (CRD). This controller/CRD enables both automation and greater flexibility managing Argo CD Applications across a large number of clusters and within monorepos, plus it makes self-service usage possible on multitenant Kubernetes clusters.\n\nHere's a detailed explanation:\n\n\n## Introduction\nThe ApplicationSet controller is a Kubernetes controller that adds support for an ApplicationSet CustomResourceDefinition (CRD). This controller/CRD enables both automation and greater flexibility managing Argo CD Applications across a large number of clusters and within monorepos, plus it makes self-service usage possible on multitenant Kubernetes clusters.\n\nThe ApplicationSet controller works alongside an existing Argo CD installation. Argo CD is a declarative, GitOps continuous delivery tool, which allows developers to define and control deployment of Kubernetes application resources from within their existing Git workflow.\n\nStarting with Argo CD v2.3, the ApplicationSet controller is bundled with Argo CD.\n\nThe ApplicationSet controller, supplements Argo CD by adding additional features in support of cluster-administrator-focused scenarios. The ApplicationSet controller provides:\n\n- The ability to use a single Kubernetes manifest to target multiple Kubernetes clusters with Argo CD\n- The ability to use a single Kubernetes manifest to deploy multiple applications from one or multiple Git repositories with Argo CD\n- Improved support for monorepos: in the context of Argo CD, a monorepo is multiple Argo CD Application resources defined within a single Git repository\n- Within multitenant clusters, improves the ability of individual cluster tenants to deploy applications using Argo CD (without needing to involve privileged cluster administrators in enabling the destination clusters/namespaces)\n\nNote: Be aware of the security implications of ApplicationSets before using them.\n\n## The ApplicationSet resource\nThis example defines a new guestbook resource of kind ApplicationSet:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n      - cluster: engineering-prod\n        url: https://2.4.6.8\n      - cluster: finance-preprod\n        url: https://9.8.7.6\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: my-project\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\nIn this example, we want to deploy our guestbook application (with the Kubernetes resources for this application coming from Git, since this is GitOps) to a list of Kubernetes clusters (with the list of target clusters defined in the List items element of the ApplicationSet resource).\n\nWhile there are multiple types of generators that are available to use with the ApplicationSet resource, this example uses the List generator, which simply contains a fixed, literal list of clusters to target. This list of clusters will be the clusters upon which Argo CD deploys the guestbook application resources, once the ApplicationSet controller has processed the ApplicationSet resource.\n\nGenerators, such as the List generator, are responsible for generating parameters. Parameters are key-values pairs that are substituted into the template section of the ApplicationSet resource during template rendering.\n\nThere are multiple generators currently supported by the ApplicationSet controller:\n\n- **List generator**: Generates parameters based on a fixed list of cluster name/URL values, as seen in the example above.\n- **Cluster generator**: Rather than a literal list of clusters (as with the list generator), the cluster generator automatically generates cluster parameters based on the clusters that are defined within Argo CD.\n- **Git generator**: The Git generator generates parameters based on files or folders that are contained within the Git repository defined within the generator resource.\n  - Files containing JSON values will be parsed and converted into template parameters.\n  - Individual directory paths within the Git repository may be used as parameter values, as well.\n- **Matrix generator**: The Matrix generators combines the generated parameters of two other generators.\n\nSee the generator section for more information about individual generators, and the other generators not listed above.\n\n## Parameter substitution into templates\nIndependent of which generator is used, parameters generated by a generator are substituted into {{parameter name}} values within the template section of the ApplicationSet resource. In this example, the List generator defines cluster and url parameters, which are then substituted into the template's {{cluster}} and {{url}} values, respectively.\n\nAfter substitution, this guestbook ApplicationSet resource is applied to the Kubernetes cluster:\n\n1. The ApplicationSet controller processes the generator entries, producing a set of template parameters.\n2. These parameters are substituted into the template, once for each set of parameters.\n3. Each rendered template is converted into an Argo CD Application resource, which is then created (or updated) within the Argo CD namespace.\n4. Finally, the Argo CD controller is notified of these Application resources and is responsible for handling them.\n\nWith the three different clusters defined in our example -- engineering-dev, engineering-prod, and finance-preprod -- this will produce three new Argo CD Application resources: one for each cluster.\n\nHere is an example of one of the Application resources that would be created, for the engineering-dev cluster at 1.2.3.4:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: engineering-dev-guestbook\nspec:\n  source:\n    repoURL: https://github.com/infra-team/cluster-deployments.git\n    targetRevision: HEAD\n    path: guestbook/engineering-dev\n  destination:\n    server: https://1.2.3.4\n    namespace: guestbook\n```\n\nWe can see that the generated values have been substituted into the server and path fields of the template, and the template has been rendered into a fully-fleshed out Argo CD Application.\n\nThe Applications are now also visible from within the Argo CD UI:\n\n![List generator example in Argo CD Web UI](https://argo-cd.readthedocs.io/en/stable/assets/applicationset/Introduction/List-Example-In-Argo-CD-Web-UI.png)\n\nThe ApplicationSet controller will ensure that any changes, updates, or deletions made to ApplicationSet resources are automatically applied to the corresponding Application(s).\n\nFor instance, if a new cluster/URL list entry was added to the List generator, a new Argo CD Application resource would be accordingly created for this new cluster. Any edits made to the guestbook ApplicationSet resource will affect all the Argo CD Applications that were instantiated by that resource, including the new Application.\n\nWhile the List generator's literal list of clusters is fairly simplistic, much more sophisticated scenarios are supported by the other available generators in the ApplicationSet controller.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset", "title": "Introduction to ApplicationSet controller", "description": "The ApplicationSet controller is a Kubernetes controller that adds support for an ApplicationSet CustomResourceDefinition (CRD). This controller/CRD enables both automation and greater flexibility managing Argo CD Applications across a large number of clusters and within monorepos, plus it makes self-service usage possible on multitenant Kubernetes clusters.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 00:39:57", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/applicationset/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Introduction - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "e1766a43-5038-4877-a8df-34cebd0fd67a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Introduction to ApplicationSet controller\"?\n\nAssistant: Here are some code examples:\n\n### ApplicationSet resource example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n      - cluster: engineering-prod\n        url: https://2.4.6.8\n      - cluster: finance-preprod\n        url: https://9.8.7.6\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: my-project\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset", "title": "Introduction to ApplicationSet controller", "description": "The ApplicationSet controller is a Kubernetes controller that adds support for an ApplicationSet CustomResourceDefinition (CRD). This controller/CRD enables both automation and greater flexibility managing Argo CD Applications across a large number of clusters and within monorepos, plus it makes self-service usage possible on multitenant Kubernetes clusters.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 00:39:57", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/applicationset/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Introduction - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "e1766a43-5038-4877-a8df-34cebd0fd67a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Application Pruning & Resource Deletion\"?\n\nAssistant: This page covers the deletion process of Application resources created by the ApplicationSet controller in Argo CD, including the implications of the syncPolicy settings.\n\nHere's a detailed explanation:\n\n\n## Overview\nAll `Application` resources created by the ApplicationSet controller (from an ApplicationSet) will contain:\n\n- A `.metadata.ownerReferences` reference back to the _parent_ `ApplicationSet` resource\n- An Argo CD `resources-finalizer.argocd.argoproj.io` finalizer in `.metadata.finalizers` of the Application if `.syncPolicy.preserveResourcesOnDeletion` is set to false.\n\n## Deletion Process\nThe end result is that when an ApplicationSet is deleted, the following occurs (in rough order):\n\n- The `ApplicationSet` resource itself is deleted\n- Any `Application` resources that were created from this `ApplicationSet` (as identified by owner reference) will be deleted\n- Any deployed resources ( `Deployments`, `Services`, `ConfigMaps`, etc) on the managed cluster, that were created from that `Application` resource (by Argo CD), will be deleted.\n  - Argo CD is responsible for handling this deletion, via [the deletion finalizer](https://argo-cd.readthedocs.io/en/stable/user-guide/app_deletion/#about-the-deletion-finalizer).\n  - To preserve deployed resources, set `.syncPolicy.preserveResourcesOnDeletion` to true in the ApplicationSet.\n\n## Lifecycle Equivalence\nThus the lifecycle of the `ApplicationSet`, the `Application`, and the `Application`'s resources, are equivalent.\n\n## Note\nSee also the [controlling resource modification](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/) page for more information about how to prevent deletion or modification of Application resources by the ApplicationSet controller.\n\n## Non-Cascading Delete\nIt _is_ still possible to delete an `ApplicationSet` resource, while preventing `Application` s (and their deployed resources) from also being deleted, using a non-cascading delete:\n\n```\nkubectl delete ApplicationSet (NAME) --cascade=orphan\n```\n\n## Warning\nEven if using a non-cascaded delete, the `resources-finalizer.argocd.argoproj.io` is still specified on the `Application`. Thus, when the `Application` is deleted, all of its deployed resources will also be deleted. (The lifecycle of the Application, and its _child_ objects, are still equivalent.)\n\n## Preventing Resource Deletion\nTo prevent the deletion of the resources of the Application, such as Services, Deployments, etc, set `.syncPolicy.preserveResourcesOnDeletion` to true in the ApplicationSet. This syncPolicy parameter prevents the finalizer from being added to the Application.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Application-Deletion", "title": "Application Pruning & Resource Deletion", "description": "This page covers the deletion process of Application resources created by the ApplicationSet controller in Argo CD, including the implications of the syncPolicy settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 00:40:09", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/applicationset/Application-Deletion/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "Application Pruning & Resource Deletion - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "fefebc15-8c30-40c1-b0bb-e9a15364a7ce", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Application-Deletion", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Application-Deletion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Application Pruning & Resource Deletion\"?\n\nAssistant: Here are some code examples:\n\n### Non-Cascading Delete Command\n```yaml\nkubectl delete ApplicationSet (NAME) --cascade=orphan\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Application-Deletion", "title": "Application Pruning & Resource Deletion", "description": "This page covers the deletion process of Application resources created by the ApplicationSet controller in Argo CD, including the implications of the syncPolicy settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 00:40:09", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/applicationset/Application-Deletion/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "Application Pruning & Resource Deletion - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "fefebc15-8c30-40c1-b0bb-e9a15364a7ce", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Application-Deletion", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Application-Deletion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Application Pruning & Resource Deletion\"?\n\nAssistant: Here are the recommended best practices:\n\n• Set `.syncPolicy.preserveResourcesOnDeletion` to true in the ApplicationSet to preserve deployed resources during deletion.\n• Be aware that using a non-cascading delete does not prevent the deletion of resources if the finalizer is present.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Application-Deletion", "title": "Application Pruning & Resource Deletion", "description": "This page covers the deletion process of Application resources created by the ApplicationSet controller in Argo CD, including the implications of the syncPolicy settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 00:40:09", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/applicationset/Application-Deletion/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "Application Pruning & Resource Deletion - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "fefebc15-8c30-40c1-b0bb-e9a15364a7ce", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Application-Deletion", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Application-Deletion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"ApplicationSet in any namespace\"?\n\nAssistant: This documentation covers the management of ApplicationSet resources in namespaces other than the control plane's namespace in Argo CD, including prerequisites, configurations, and best practices.\n\nHere's a detailed explanation:\n\n\n## Introduction\nAs of version 2.8, Argo CD supports managing `ApplicationSet` resources in namespaces other than the control plane's namespace (which is usually `argocd`), but this feature has to be explicitly enabled and configured appropriately.\n\nArgo CD administrators can define a certain set of namespaces where `ApplicationSet` resources may be created, updated and reconciled in.\n\nAs Applications generated by an ApplicationSet are generated in the same namespace as the ApplicationSet itself, this works in combination with [App in any namespace](https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/).\n\n## Prerequisites\n### App in any namespace configured\nThis feature needs [App in any namespace](https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/) feature activated. The list of namespaces must be the same.\n\n### Cluster-scoped Argo CD installation\nThis feature can only be enabled and used when your Argo CD ApplicationSet controller is installed as a cluster-wide instance, so it has permissions to list and manipulate resources on a cluster scope. It will _not_ work with an Argo CD installed in namespace-scoped mode.\n\n### SCM Providers secrets consideration\nBy allowing ApplicationSet in any namespace you must be aware that any secrets can be exfiltrated using `scmProvider` or `pullRequest` generators. This means if ApplicationSet controller is configured to allow namespace `appNs` and some user is allowed to create an ApplicationSet in `appNs` namespace, then the user can install a malicious Pod into the `appNs` namespace as described below and read out the content of the secret indirectly, thus exfiltrating the secret value.\n\n## Overview\nIn order for an ApplicationSet to be managed and reconciled outside the Argo CD's control plane namespace, two prerequisites must match:\n\n1. The namespace list from which `argocd-applicationset-controller` can source `ApplicationSets` must be explicitly set using environment variable `ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES` or alternatively using parameter `--applicationset-namespaces`.\n2. The enabled namespaces must be entirely covered by the [App in any namespace](https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/), otherwise the generated Applications generated outside the allowed Application namespaces won't be reconciled.\n\n## Reconfigure Argo CD to allow certain namespaces\n### Change workload startup parameters\nIn order to enable this feature, the Argo CD administrator must reconfigure the and `argocd-applicationset-controller` workloads to add the `--applicationset-namespaces` parameter to the container's startup command.\n\n## Safely template project\nAs [App in any namespace](https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/) is a prerequisite, it is possible to safely template project.\n\n## ApplicationSet names\nFor the CLI, applicationSets are now referred to and displayed as in the format `<namespace>/<name>`.\n\n## Applicationsets RBAC\nThe RBAC syntax for Application objects has been changed from `<project>/<applicationset>` to `<project>/<namespace>/<applicationset>` to accommodate the need to restrict access based on the source namespace of the Application to be managed.\n\n## Managing applicationSets in other namespaces\n### Using the CLI\nYou can use all existing Argo CD CLI commands for managing applications in other namespaces, exactly as you would use the CLI to manage applications in the control plane's namespace.\n\n## Clusters secrets consideration\nBy allowing ApplicationSet in any namespace you must be aware that clusters can be discovered and used.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace", "title": "ApplicationSet in any namespace", "description": "This documentation covers the management of ApplicationSet resources in namespaces other than the control plane's namespace in Argo CD, including prerequisites, configurations, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 00:40:25", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "ApplicationSet in any namespace - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/applicationset/Appset-Any-Namespace/", "readthedocs-http-status": "200", "scrapeId": "7eb705a6-7fb9-4c78-8899-4020d1a3633c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"ApplicationSet in any namespace\"?\n\nAssistant: Here are some code examples:\n\n### Example ApplicationSet with SCM Provider\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\n  namespace: appNs\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - scmProvider:\n      gitea:\n        owner: myorg\n        api: http://my-service.appNs.svc.cluster.local\n        allBranches: true\n        tokenRef:\n          secretName: gitea-token\n          key: token\n  template:\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace", "title": "ApplicationSet in any namespace", "description": "This documentation covers the management of ApplicationSet resources in namespaces other than the control plane's namespace in Argo CD, including prerequisites, configurations, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 00:40:25", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "ApplicationSet in any namespace - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/applicationset/Appset-Any-Namespace/", "readthedocs-http-status": "200", "scrapeId": "7eb705a6-7fb9-4c78-8899-4020d1a3633c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"ApplicationSet in any namespace\"?\n\nAssistant: Here are the recommended best practices:\n\n• Please read this documentation carefully before you enable this feature. Misconfiguration could lead to potential security issues.\n• It is highly recommended to enable SCM Providers secrets restrictions to avoid any secrets exfiltration.\n• The allow-list only applies to SCM providers for which the user may configure a custom `api`.\n• If you do not intend to allow users to use the SCM or PR generators, you can disable them entirely.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace", "title": "ApplicationSet in any namespace", "description": "This documentation covers the management of ApplicationSet resources in namespaces other than the control plane's namespace in Argo CD, including prerequisites, configurations, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 00:40:25", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "ApplicationSet in any namespace - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/applicationset/Appset-Any-Namespace/", "readthedocs-http-status": "200", "scrapeId": "7eb705a6-7fb9-4c78-8899-4020d1a3633c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"How ApplicationSet controller interacts with Argo CD\"?\n\nAssistant: This section explains how the ApplicationSet controller interacts with Argo CD, detailing its responsibilities and the relationship between ApplicationSet resources and Argo CD Application resources.\n\nHere's a detailed explanation:\n\n\n## Overview\nWhen you create, update, or delete an `ApplicationSet` resource, the ApplicationSet controller responds by creating, updating, or deleting one or more corresponding Argo CD `Application` resources.\n\nIn fact, the _sole_ responsibility of the ApplicationSet controller is to create, update, and delete `Application` resources within the Argo CD namespace. The controller's only job is to ensure that the `Application` resources remain consistent with the defined declarative `ApplicationSet` resource, and nothing more.\n\n## ApplicationSet Controller Responsibilities\nThus the ApplicationSet controller:\n\n- Does not create/modify/delete Kubernetes resources (other than the `Application` CR)\n- Does not connect to clusters other than the one Argo CD is deployed to\n- Does not interact with namespaces other than the one Argo CD is deployed within\n\n## Namespace Requirements\nUse the Argo CD namespace\n\nAll ApplicationSet resources and the ApplicationSet controller must be installed in the same namespace as Argo CD.\nApplicationSet resources in a different namespace will be ignored.\n\n## Deployment Responsibilities\nIt is Argo CD itself that is responsible for the actual deployment of the generated child `Application` resources, such as Deployments, Services, and ConfigMaps.\n\nThe ApplicationSet controller can thus be thought of as an `Application` 'factory', taking an `ApplicationSet` resource as input, and outputting one or more Argo CD `Application` resources that correspond to the parameters of that set.\n\n## Interaction Diagram\n![ApplicationSet controller vs Argo CD, interaction diagram](https://argo-cd.readthedocs.io/en/stable/assets/applicationset/Argo-CD-Integration/ApplicationSet-Argo-Relationship-v2.png)\n\nIn this diagram an `ApplicationSet` resource is defined, and it is the responsibility of the ApplicationSet controller to create the corresponding `Application` resources. The resulting `Application` resources are then managed by Argo CD: that is, Argo CD is responsible for actually deploying the child resources.\n\n## Resource Generation\nArgo CD generates the application's Kubernetes resources based on the contents of the Git repository defined within the Application `spec` field, deploying e.g. Deployments, Service, and other resources.\n\n## Effects of ApplicationSet Changes\nCreation, update, or deletion of ApplicationSets will have a direct effect on the Applications present in the Argo CD namespace. Likewise, cluster events (the addition/deletion of Argo CD cluster secrets, when using Cluster generator), or changes in Git (when using Git generator), will be used as input to the ApplicationSet controller in constructing `Application` resources.\n\n## Collaboration\nArgo CD and the ApplicationSet controller work together to ensure a consistent set of Application resources exist, and are deployed across the target clusters.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Argo-CD-Integration", "title": "How ApplicationSet controller interacts with Argo CD", "description": "This section explains how the ApplicationSet controller interacts with Argo CD, detailing its responsibilities and the relationship between ApplicationSet resources and Argo CD Application resources.", "has_code_examples": false, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 00:40:35", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "How ApplicationSet controller interacts with Argo CD - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/applicationset/Argo-CD-Integration/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "scrapeId": "d5166397-341c-4b7b-8837-86454a0cc9f3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Argo-CD-Integration", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Argo-CD-Integration/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"How ApplicationSet controller interacts with Argo CD\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that all ApplicationSet resources and the ApplicationSet controller are installed in the same namespace as Argo CD.\n• Understand that the ApplicationSet controller does not manage Kubernetes resources other than Argo CD Applications.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Argo-CD-Integration", "title": "How ApplicationSet controller interacts with Argo CD", "description": "This section explains how the ApplicationSet controller interacts with Argo CD, detailing its responsibilities and the relationship between ApplicationSet resources and Argo CD Application resources.", "has_code_examples": false, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 00:40:35", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "How ApplicationSet controller interacts with Argo CD - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/applicationset/Argo-CD-Integration/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "scrapeId": "d5166397-341c-4b7b-8837-86454a0cc9f3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Argo-CD-Integration", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Argo-CD-Integration/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Controlling if/when the ApplicationSet controller modifies `Application` resources\"?\n\nAssistant: The ApplicationSet controller supports a number of settings that limit the ability of the controller to make changes to generated Applications, for example, preventing the controller from deleting child Applications.\n\nHere's a detailed explanation:\n\n\n## Dry run: prevent ApplicationSet from creating, modifying, or deleting all Applications\nTo prevent the ApplicationSet controller from creating, modifying, or deleting any `Application` resources, you may enable `dry-run` mode. This essentially switches the controller into a \"read only\" mode, where the controller Reconcile loop will run, but no resources will be modified.\n\nTo enable dry-run, add `--dryrun true` to the ApplicationSet Deployment's container launch parameters.\n\nSee 'How to modify ApplicationSet container parameters' below for detailed steps on how to add this parameter to the controller.\n\n## Managed Applications modification Policies\nThe ApplicationSet controller supports a parameter `--policy`, which is specified on launch (within the controller Deployment container), and which restricts what types of modifications will be made to managed Argo CD `Application` resources.\n\nThe `--policy` parameter takes four values: `sync`, `create-only`, `create-delete`, and `create-update`. ( `sync` is the default, which is used if the `--policy` parameter is not specified; the other policies are described below).\n\nIt is also possible to set this policy per ApplicationSet.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  # (...)\n  syncPolicy:\n    applicationsSync: create-only # create-update, create-delete sync\n```\n\n- Policy `create-only`: Prevents ApplicationSet controller from modifying or deleting Applications. **WARNING**: It doesn't prevent Application controller from deleting Applications according to [ownerReferences](https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/) when deleting ApplicationSet.\n- Policy `create-update`: Prevents ApplicationSet controller from deleting Applications. Update is allowed. **WARNING**: It doesn't prevent Application controller from deleting Applications according to [ownerReferences](https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/) when deleting ApplicationSet.\n- Policy `create-delete`: Prevents ApplicationSet controller from modifying Applications. Delete is allowed.\n- Policy `sync`: Update and Delete are allowed.\n\nIf the controller parameter `--policy` is set, it takes precedence on the field `applicationsSync`. It is possible to allow per ApplicationSet sync policy by setting variable `ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE` to argocd-cmd-params-cm `applicationsetcontroller.enable.policy.override` or directly with controller parameter `--enable-policy-override` (default to `false`).\n\n## Policy - `create-only`: Prevent ApplicationSet controller from modifying and deleting Applications\nTo allow the ApplicationSet controller to _create_ `Application` resources, but prevent any further modification, such as _deletion_, or modification of Application fields, add this parameter in the ApplicationSet controller:\n\n**WARNING**: \" _deletion_\" indicates the case as the result of comparing generated Application between before and after, there are Applications which no longer exist. It doesn't indicate the case Applications are deleted according to ownerReferences to ApplicationSet. See [How to prevent Application controller from deleting Applications when deleting ApplicationSet](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/#how-to-prevent-application-controller-from-deleting-applications-when-deleting-applicationset)\n\n```\n--policy create-only\n```\n\nAt ApplicationSet level\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  # (...)\n  syncPolicy:\n    applicationsSync: create-only\n```\n\n## Policy - `create-update`: Prevent ApplicationSet controller from deleting Applications\nTo allow the ApplicationSet controller to create or modify `Application` resources, but prevent Applications from being deleted, add the following parameter to the ApplicationSet controller `Deployment`:\n\n**WARNING**: \" _deletion_\" indicates the case as the result of comparing generated Application between before and after, there are Applications which no longer exist. It doesn't indicate the case Applications are deleted according to ownerReferences to ApplicationSet. See [How to prevent Application controller from deleting Applications when deleting ApplicationSet](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/#how-to-prevent-application-controller-from-deleting-applications-when-deleting-applicationset)\n\n```\n--policy create-update\n```\n\nThis may be useful to users looking for additional protection against deletion of the Applications generated by the controller.\n\nAt ApplicationSet level\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  # (...)\n  syncPolicy:\n    applicationsSync: create-update\n```\n\n## How to prevent Application controller from deleting Applications when deleting ApplicationSet\nBy default, `create-only` and `create-update` policy isn't effective against preventing deletion of Applications when deleting ApplicationSet.\nYou must set the finalizer to ApplicationSet to prevent deletion in such case, and use background cascading deletion.\nIf you use foreground cascading deletion, there's no guarantee to preserve applications.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n  # (...)\n```\n\n## Ignore certain changes to Applications\nThe ApplicationSet spec includes an `ignoreApplicationDifferences` field, which allows you to specify which fields of the ApplicationSet should be ignored when comparing Applications.\n\nThe field supports multiple ignore rules. Each ignore rule may specify a list of either `jsonPointers` or `jqPathExpressions` to ignore.\n\nYou may optionally also specify a `name` to apply the ignore rule to a specific Application, or omit the `name` to apply the ignore rule to all Applications.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  ignoreApplicationDifferences:\n    - jsonPointers:\n        - /spec/source/targetRevision\n    - name: some-app\n      jqPathExpressions:\n        - .spec.source.helm.values\n```\n\n## Allow temporarily toggling auto-sync\nOne of the most common use cases for ignoring differences is to allow temporarily toggling auto-sync for an Application.\n\nFor example, if you have an ApplicationSet that is configured to automatically sync Applications, you may want to temporarily disable auto-sync for a specific Application. You can do this by adding an ignore rule for the `spec.syncPolicy.automated` field.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  ignoreApplicationDifferences:\n    - jsonPointers:\n        - /spec/syncPolicy\n```\n\n## Limitations of `ignoreApplicationDifferences`\nWhen an ApplicationSet is reconciled, the controller will compare the ApplicationSet spec with the spec of each Application that it manages. If there are any differences, the controller will generate a patch to update the Application to match the ApplicationSet spec.\n\nThe generated patch is a MergePatch. According to the MergePatch documentation, \"existing lists will be completely replaced by new lists\" when there is a change to the list.\n\nThis limits the effectiveness of `ignoreApplicationDifferences` when the ignored field is in a list. For example, if you have an application with multiple sources, and you want to ignore changes to the `targetRevision` of one of the sources, changes in other fields or in other sources will cause the entire `sources` list to be replaced, and the `targetRevision` field will be reset to the value defined in the ApplicationSet.\n\nFor example, consider this ApplicationSet:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  ignoreApplicationDifferences:\n    - jqPathExpressions:\n        - .spec.sources[] | select(.repoURL == \"https://git.example.com/org/repo1\").targetRevision\n  template:\n    spec:\n      sources:\n      - repoURL: https://git.example.com/org/repo1\n        targetRevision: main\n      - repoURL: https://git.example.com/org/repo2\n        targetRevision: main\n```\n\nYou can freely change the `targetRevision` of the `repo1` source, and the ApplicationSet controller will not overwrite your change.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  sources:\n  - repoURL: https://git.example.com/org/repo1\n    targetRevision: fix/bug-123\n  - repoURL: https://git.example.com/org/repo2\n    targetRevision: main\n```\n\nHowever, if you change the `targetRevision` of the `repo2` source, the ApplicationSet controller will overwrite the entire `sources` field.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  sources:\n  - repoURL: https://git.example.com/org/repo1\n    targetRevision: main\n  - repoURL: https://git.example.com/org/repo2\n    targetRevision: main\n```\n\n## Prevent an `Application`'s child resources from being deleted, when the parent Application is deleted\nBy default, when an `Application` resource is deleted by the ApplicationSet controller, all of the child resources of the Application will be deleted as well (such as, all of the Application's `Deployments`, `Services`, etc).\n\nTo prevent an Application's child resources from being deleted when the parent Application is deleted, add the `preserveResourcesOnDeletion: true` field to the `syncPolicy` of the ApplicationSet:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  # (...)\n  syncPolicy:\n    preserveResourcesOnDeletion: true\n```\n\n## Prevent an Application's child resources from being modified\nChanges made to the ApplicationSet will propagate to the Applications managed by the ApplicationSet, and then Argo CD will propagate the Application changes to the underlying cluster resources (as per [Argo CD Integration](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Argo-CD-Integration/)).\n\nThe propagation of Application changes to the cluster is managed by the [automated sync settings](https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync/), which are referenced in the ApplicationSet `template` field:\n\n- `spec.template.syncPolicy.automated`: If enabled, changes to Applications will automatically propagate to the cluster resources of the cluster.\n  - Unset this within the ApplicationSet template to 'pause' updates to cluster resources managed by the `Application` resource.\n- `spec.template.syncPolicy.automated.prune`: By default, Automated sync will not delete resources when Argo CD detects the resource is no longer defined in Git.\n  - For extra safety, set this to false to prevent unexpected changes to the backing Git repository from affecting cluster resources.\n\n## How to modify ApplicationSet container launch parameters\nThere are a couple of ways to modify the ApplicationSet container parameters, so as to enable the above settings.\n\n### A) Use `kubectl edit` to modify the deployment on the cluster\nEdit the applicationset-controller `Deployment` resource on the cluster:\n\n```\nkubectl edit deployment/argocd-applicationset-controller -n argocd\n```\n\nLocate the `.spec.template.spec.containers[0].command` field, and add the required parameter(s):\n\n```\nspec:\n    # (...)\n  template:\n    # (...)\n    spec:\n      containers:\n      - command:\n        - entrypoint.sh\n        - argocd-applicationset-controller\n        # Insert new parameters here, for example:\n        # --policy create-only\n    # (...)\n```\n\nSave and exit the editor. Wait for a new `Pod` to start containing the updated parameters.\n\n### Or, B) Edit the `install.yaml` manifest for the ApplicationSet installation\nRather than directly editing the cluster resource, you may instead choose to modify the installation YAML that is used to install the ApplicationSet controller:\n\nApplicable for applicationset versions less than 0.4.0.\n\n```\n# Clone the repository\n\ngit clone https://github.com/argoproj/applicationset\n\n# Checkout the version that corresponds to the one you have installed.\ngit checkout \"(version of applicationset)\"\n# example: git checkout \"0.1.0\"\n\ncd applicationset/manifests\n\n# open 'install.yaml' in a text editor, make the same modifications to Deployment\n# as described in the previous section.\n\n# Apply the change to the cluster\nkubectl apply -n argocd -f install.yaml\n```\n\n## Preserving changes made to an Applications annotations and labels\nNote\n\nThe same behavior can be achieved on a per-app basis using the [`ignoreApplicationDifferences`](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/#ignore-certain-changes-to-applications) feature described above. However, preserved fields may be configured globally, a feature that is not yet available for `ignoreApplicationDifferences`.\n\nIt is common practice in Kubernetes to store state in annotations, operators will often make use of this. To allow for this, it is possible to configure a list of annotations that the ApplicationSet should preserve when reconciling.\n\nFor example, imagine that we have an Application created from an ApplicationSet, but a custom annotation and label has since been added (to the Application) that does not exist in the `ApplicationSet` resource:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  # This annotation and label exists only on this Application, and not in\n  # the parent ApplicationSet template:\n  annotations:\n    my-custom-annotation: some-value\n  labels:\n    my-custom-label: some-value\nspec:\n  # (...)\n```\n\nTo preserve this annotation and label we can use the `preservedFields` property of the `ApplicationSet` like so:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  # (...)\n  preservedFields:\n    annotations: [\"my-custom-annotation\"]\n    labels: [\"my-custom-label\"]\n```\n\nThe ApplicationSet controller will leave this annotation and label as-is when reconciling, even though it is not defined in the metadata of the ApplicationSet itself.\n\nBy default, the Argo CD notifications and the Argo CD refresh type annotations are also preserved.\n\nNote\n\nOne can also set global preserved fields for the controller by passing a comma separated list of annotations and labels to\n`ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS` and `ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS` respectively.\n\n## Debugging unexpected changes to Applications\nWhen the ApplicationSet controller makes a change to an application, it logs the patch at the debug level. To see these logs, set the log level to debug in the `argocd-cmd-params-cm` ConfigMap in the `argocd` namespace:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\n  namespace: argocd\ndata:\n  applicationsetcontroller.log.level: debug\n```\n\n## Previewing changes\nTo preview changes that the ApplicationSet controller would make to Applications, you can create the AppSet in dry-run mode. This works whether the AppSet already exists or not.\n\n```\nargocd appset create --dry-run ./appset.yaml -o json | jq -r '.status.resources[].name'\n```\n\nThe dry-run will populate the returned ApplicationSet's status with the Applications which would be managed with the given config. You can compare to the existing Applications to see what would change.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification", "title": "Controlling if/when the ApplicationSet controller modifies `Application` resources", "description": "The ApplicationSet controller supports a number of settings that limit the ability of the controller to make changes to generated Applications, for example, preventing the controller from deleting child Applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 00:42:20", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/applicationset/Controlling-Resource-Modification/", "language": "en", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "Controlling Resource Modification - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "92c2fda9-a669-471d-ac78-bb0f6c3c8e1c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Controlling if/when the ApplicationSet controller modifies `Application` resources\"?\n\nAssistant: Here are some code examples:\n\n### ApplicationSet with create-only policy\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  # (...)\n  syncPolicy:\n    applicationsSync: create-only\n```\n\n### ApplicationSet with create-update policy\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n  # (...)\n  syncPolicy:\n    applicationsSync: create-update\n```\n\n### Prevent deletion of Applications when deleting ApplicationSet\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n  # (...)\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification", "title": "Controlling if/when the ApplicationSet controller modifies `Application` resources", "description": "The ApplicationSet controller supports a number of settings that limit the ability of the controller to make changes to generated Applications, for example, preventing the controller from deleting child Applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 00:42:20", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/applicationset/Controlling-Resource-Modification/", "language": "en", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "Controlling Resource Modification - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "92c2fda9-a669-471d-ac78-bb0f6c3c8e1c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Controlling if/when the ApplicationSet controller modifies `Application` resources\"?\n\nAssistant: Here are the recommended best practices:\n\n• To enable dry-run mode, add `--dryrun true` to the ApplicationSet Deployment's container launch parameters.\n• Use `kubectl edit` to modify the deployment on the cluster to add required parameters.\n• To preserve annotations and labels, use the `preservedFields` property of the `ApplicationSet`.\n• Set the log level to debug in the `argocd-cmd-params-cm` ConfigMap to see logs of changes made by the ApplicationSet controller.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification", "title": "Controlling if/when the ApplicationSet controller modifies `Application` resources", "description": "The ApplicationSet controller supports a number of settings that limit the ability of the controller to make changes to generated Applications, for example, preventing the controller from deleting child Applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 00:42:20", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/applicationset/Controlling-Resource-Modification/", "language": "en", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "Controlling Resource Modification - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "92c2fda9-a669-471d-ac78-bb0f6c3c8e1c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Cluster Decision Resource Generator\"?\n\nAssistant: The cluster decision resource generates a list of Argo CD clusters using duck-typing, which does not require knowledge of the full shape of the referenced Kubernetes resource.\n\nHere's a detailed explanation:\n\n\n## Example of a Cluster Decision Resource Generator\nThe following is an example of a cluster-decision-resource-based ApplicationSet generator:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n name: guestbook\n namespace: argocd\nspec:\n goTemplate: true\n goTemplateOptions: [\"missingkey=error\"]\n generators:\n - clusterDecisionResource:\n    # ConfigMap with GVK information for the duck type resource\n    configMapRef: my-configmap\n    name: quak           # Choose either \"name\" of the resource or \"labelSelector\"\n    labelSelector:\n      matchLabels:       # OPTIONAL\n        duck: spotted\n      matchExpressions:  # OPTIONAL\n      - key: duck\n        operator: In\n        values:\n        - \"spotted\"\n        - \"canvasback\"\n    # OPTIONAL: Checks for changes every 60sec (default 3min)\n    requeueAfterSeconds: 60\n template:\n   metadata:\n     name: '{{.name}}-guestbook'\n   spec:\n      project: \"default\"\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps/\n        targetRevision: HEAD\n        path: guestbook\n      destination:\n        server: '{{.clusterName}}' # 'server' field of the secret\n        namespace: guestbook\n``\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource", "title": "Cluster Decision Resource Generator", "description": "The cluster decision resource generates a list of Argo CD clusters using duck-typing, which does not require knowledge of the full shape of the referenced Kubernetes resource.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:42:29", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Cluster-Decision-Resource/", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Cluster Decision Resource Generator - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "3aa01864-4014-44cc-b8ca-acf1c13172d6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Cluster Decision Resource Generator\"?\n\nAssistant: Here are some code examples:\n\n### Cluster Decision Resource Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n name: guestbook\n namespace: argocd\nspec:\n goTemplate: true\n goTemplateOptions: [\"missingkey=error\"]\n generators:\n - clusterDecisionResource:\n    configMapRef: my-configmap\n    name: quak\n    labelSelector:\n      matchLabels:\n        duck: spotted\n      matchExpressions:\n      - key: duck\n        operator: In\n        values:\n        - \"spotted\"\n        - \"canvasback\"\n    requeueAfterSeconds: 60\n template:\n   metadata:\n     name: '{{.name}}-guestbook'\n   spec:\n      project: \"default\"\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps/\n        targetRevision: HEAD\n        path: guestbook\n      destination:\n        server: '{{.clusterName}}'\n        namespace: guestbook\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource", "title": "Cluster Decision Resource Generator", "description": "The cluster decision resource generates a list of Argo CD clusters using duck-typing, which does not require knowledge of the full shape of the referenced Kubernetes resource.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:42:29", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Cluster-Decision-Resource/", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Cluster Decision Resource Generator - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "3aa01864-4014-44cc-b8ca-acf1c13172d6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Cluster Decision Resource Generator\"?\n\nAssistant: Here are the recommended best practices:\n\n• The ApplicationSet needs to be created in the Argo CD namespace, placing the ConfigMap in the same namespace allows the ClusterDecisionResource generator to read it.\n• Clusters listed as Status.Decisions must be predefined in Argo CD.\n• The Default Cluster list key is clusters.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource", "title": "Cluster Decision Resource Generator", "description": "The cluster decision resource generates a list of Argo CD clusters using duck-typing, which does not require knowledge of the full shape of the referenced Kubernetes resource.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:42:29", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Cluster-Decision-Resource/", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Cluster Decision Resource Generator - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "3aa01864-4014-44cc-b8ca-acf1c13172d6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Cluster Generator\"?\n\nAssistant: In Argo CD, managed clusters are stored within Secrets in the Argo CD namespace. The ApplicationSet controller uses those same Secrets to generate parameters to identify and target available clusters.\n\nHere's a detailed explanation:\n\n\n## Cluster Generator Overview\nIn Argo CD, managed clusters are stored within Secrets in the Argo CD namespace. The ApplicationSet controller uses those same Secrets to generate parameters to identify and target available clusters.\n\nFor each cluster registered with Argo CD, the Cluster generator produces parameters based on the list of items found within the cluster secret.\n\nIt automatically provides the following parameter values to the Application template for each cluster:\n\n- `name`\n- `nameNormalized` _('name' but normalized to contain only lowercase alphanumeric characters, '-' or '.')_\n- `server`\n- `project` _(the Secret's 'project' field, if present; otherwise, it defaults to '')_\n- `metadata.labels.<key>` _(for each label in the Secret)_\n- `metadata.annotations.<key>` _(for each annotation in the Secret)_\n\nNote\n\nUse the `nameNormalized` parameter if your cluster name contains characters (such as underscores) that are not valid for Kubernetes resource names. This prevents rendering invalid Kubernetes resources with names like `my_cluster-app1`, and instead would convert them to `my-cluster-app1`.\n\n## Cluster Secret Example\nWithin Argo CD cluster Secrets are data fields describing the cluster:\n\n```\nkind: Secret\ndata:\n  # Within Kubernetes these fields are actually encoded in Base64; they are decoded here for convenience.\n  # (They are likewise decoded when passed as parameters by the Cluster generator)\n  config: \"{'tlsClientConfig':{'insecure':false}}\"\n  name: \"in-cluster2\"\n  server: \"https://kubernetes.default.svc\"\nmetadata:\n  labels:\n    argocd.argoproj.io/secret-type: cluster\n# (...)\n```\n\nThe Cluster generator will automatically identify clusters defined with Argo CD, and extract the cluster data as parameters:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters: {} # Automatically use all clusters defined within Argo CD\n  template:\n    metadata:\n      name: '{{.name}}-guestbook' # 'name' field of the Secret\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps/\n        targetRevision: HEAD\n        path: guestbook\n      destination:\n        server: '{{.server}}' # 'server' field of the secret\n        namespace: guestbook\n```\n\n( _The full example can be found [here](https://github.com/argoproj/argo-cd/tree/master/applicationset/examples/cluster)._)\n\nIn this example, the cluster secret's `name` and `server` fields are used to populate the `Application` resource `name` and `server` (which are then used to target that same cluster).\n\n## Label Selector\nA label selector may be used to narrow the scope of targeted clusters to only those matching a specific label:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters:\n      selector:\n        matchLabels:\n          staging: \"true\"\n        # The cluster generator also supports matchExpressions.\n        #matchExpressions:\n        #  - key: staging\n        #    operator: In\n        #    values:\n        #      - \"true\"\n  template:\n  # (...)\n```\n\nThis would match an Argo CD cluster secret containing:\n\n```\napiVersion: v1\nkind: Secret\ndata:\n  # (... fields as above ...)\nmetadata:\n  labels:\n    argocd.argoproj.io/secret-type: cluster\n    staging: \"true\"\n# (...)\n```\n\nThe cluster selector also supports set-based requirements, as used by [several core Kubernetes resources](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#resources-that-support-set-based-requirements).\n\n## Deploying to the Local Cluster\nIn Argo CD, the 'local cluster' is the cluster upon which Argo CD (and the ApplicationSet controller) is installed. This is to distinguish it from 'remote clusters', which are those that are added to Argo CD [declaratively](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters) or via the [Argo CD CLI](https://argo-cd.readthedocs.io/en/stable/getting_started/#5-register-a-cluster-to-deploy-apps-to-optional).\n\nThe cluster generator will automatically target both local and non-local clusters, for every cluster that matches the cluster selector.\n\nIf you wish to target only remote clusters with your Applications (e.g. you want to exclude the local cluster), then use a cluster selector with labels, for example:\n\n```\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters:\n      selector:\n        matchLabels:\n          argocd.argoproj.io/secret-type: cluster\n        # The cluster generator also supports matchExpressions.\n        #matchExpressions:\n        #  - key: staging\n        #    operator: In\n        #    values:\n        #      - \"true\"\n```\n\nThis selector will not match the default local cluster, since the default local cluster does not have a Secret (and thus does not have the `argocd.argoproj.io/secret-type` label on that secret). Any cluster selector that selects on that label will automatically exclude the default local cluster.\n\nHowever, if you do wish to target both local and non-local clusters, while also using label matching, you can create a secret for the local cluster within the Argo CD web UI:\n\n1. Within the Argo CD web UI, select _Settings_, then _Clusters_.\n2. Select your local cluster, usually named `in-cluster`.\n3. Click the _Edit_ button, and change the _NAME_ of the cluster to another value, for example `in-cluster-local`. Any other value here is fine.\n4. Leave all other fields unchanged.\n5. Click _Save_.\n\nThese steps might seem counterintuitive, but the act of changing one of the default values for the local cluster causes the Argo CD Web UI to create a new secret for this cluster. In the Argo CD namespace, you should now see a Secret resource named `cluster-(cluster suffix)` with label `argocd.argoproj.io/secret-type\": \"cluster\". You may also create a local [cluster secret declaratively](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters), or with the CLI using `argocd cluster add \"(context name)\" --in-cluster`, rather than through the Web UI.\n\n## Fetch Clusters Based on Their K8s Version\nThere is also the possibility to fetch clusters based upon their Kubernetes version. To do this, the label `argocd.argoproj.io/auto-label-cluster-info` needs to be set to `true` on the cluster secret.\nOnce that has been set, the controller will dynamically label the cluster secret with the Kubernetes version it is running on. To retrieve that value, you need to use the\n`argocd.argoproj.io/kubernetes-version`, as the example below demonstrates:\n\n```\nspec:\n  goTemplate: true\n  generators:\n  - clusters:\n      selector:\n        matchLabels:\n          argocd.argoproj.io/kubernetes-version: 1.28\n        # matchExpressions are also supported.\n        #matchExpressions:\n        #  - key: argocd.argoproj.io/kubernetes-version\n        #    operator: In\n        #    values:\n        #      - \"1.27\"\n        #      - \"1.28\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster", "title": "Cluster Generator", "description": "In Argo CD, managed clusters are stored within Secrets in the Argo CD namespace. The ApplicationSet controller uses those same Secrets to generate parameters to identify and target available clusters.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:43:07", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Cluster/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Cluster Generator - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "9b53ec7b-af0c-48d3-8f05-786c13b7f819", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Cluster Generator\"?\n\nAssistant: Here are some code examples:\n\n### Cluster Secret Example\n```yaml\nkind: Secret\ndata:\n  config: \"{'tlsClientConfig':{'insecure':false}}\"\n  name: \"in-cluster2\"\n  server: \"https://kubernetes.default.svc\"\nmetadata:\n  labels:\n    argocd.argoproj.io/secret-type: cluster\n\n```\n\n### ApplicationSet Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters: {}\n  template:\n    metadata:\n      name: '{{.name}}-guestbook'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps/\n        targetRevision: HEAD\n        path: guestbook\n      destination:\n        server: '{{.server}}'\n        namespace: guestbook\n\n```\n\n### Label Selector Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters:\n      selector:\n        matchLabels:\n          staging: \"true\"\n  template:\n  # (...)\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster", "title": "Cluster Generator", "description": "In Argo CD, managed clusters are stored within Secrets in the Argo CD namespace. The ApplicationSet controller uses those same Secrets to generate parameters to identify and target available clusters.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:43:07", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Cluster/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Cluster Generator - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "9b53ec7b-af0c-48d3-8f05-786c13b7f819", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Cluster Generator\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `nameNormalized` parameter if your cluster name contains characters (such as underscores) that are not valid for Kubernetes resource names.\n• Ensure you include the `values.` prefix in the parameter name within the `template` when using it.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster", "title": "Cluster Generator", "description": "In Argo CD, managed clusters are stored within Secrets in the Argo CD namespace. The ApplicationSet controller uses those same Secrets to generate parameters to identify and target available clusters.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:43:07", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Cluster/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Cluster Generator - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "9b53ec7b-af0c-48d3-8f05-786c13b7f819", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Git File Generator Globbing\"?\n\nAssistant: This page covers the Git file generator globbing behavior in Argo CD, including the problem with greedy globbing, how to enable new globbing behavior, and usage examples.\n\nHere's a detailed explanation:\n\n\n## Problem Statement\nThe original and default implementation of the Git file generator does very greedy globbing. This can trigger errors or catch users off-guard. For example, consider the following repository layout:\n\n```\n└── cluster-charts/\n    ├── cluster1\n    │   ├── mychart/\n    │   │   ├── charts/\n    │   │   │    └── mysubchart/\n    │   │   │        ├── values.yaml\n    │   │   │        └── etc…\n    │   │   ├── values.yaml\n    │   │   └── etc…\n    │   └── myotherchart/\n    │       ├── values.yaml\n    │       └── etc…\n    └── cluster2\n        └── etc…\n```\n\nIn `cluster1` we have two charts, one of them with a subchart.\n\nAssuming we need the ApplicationSet to template values in the `values.yaml`, then we need to use a Git file generator instead of a directory generator. The value of the `path` key of the Git file generator should be set to:\n\n```\npath: cluster-charts/*/*/values.yaml\n```\n\nHowever, the default implementation will interpret the above pattern as:\n\n```\npath: cluster-charts/**/values.yaml\n```\n\nMeaning, for `mychart` in `cluster1`, that it will pick up both the chart's `values.yaml` but also the one from its subchart. This will most likely fail, and even if it didn't it would be wrong.\n\nThere are multiple other ways this undesirable globbing can fail. For example:\n\n```\npath: some-path/*.yaml\n```\n\nThis will return all YAML files in any directory at any level under `some-path`, instead of only those directly under it.\n\n## Enabling the New Globbing\nSince some users may rely on the old behavior it was decided to make the fix optional and not enabled by default.\n\nIt can be enabled in any of these ways:\n\n1. Pass `--enable-new-git-file-globbing` to the ApplicationSet controller args.\n2. Set `ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING=true` in the ApplicationSet controller environment variables.\n3. Set `applicationsetcontroller.enable.new.git.file.globbing: \"true\"` in the `argocd-cmd-params-cm` ConfigMap.\n\nNote that the default may change in the future.\n\n## Usage\nThe new Git file generator globbing uses the `doublestar` package. You can find it [here](https://github.com/bmatcuk/doublestar).\n\nBelow is a short excerpt from its documentation.\n\ndoublestar patterns match files and directories recursively. For example, if you had the following directory structure:\n\n```\ngrandparent\n`-- parent\n    |-- child1\n    `-- child2\n```\n\nYou could find the children with patterns such as: `**/child*`, `grandparent/**/child?`, `**/parent/*`, or even just `**` by itself (which will return all files and directories recursively).\n\nBash's globstar is doublestar's inspiration and, as such, works similarly. Note that the doublestar must appear as a path component by itself. A pattern such as `/path**` is invalid and will be treated the same as `/path*`, but `/path*/**` should achieve the desired result. Additionally, `/path/**` will match all directories and files under the path directory, but `/path/**/` will only match directories.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git-File-Globbing", "title": "Git File Generator Globbing", "description": "This page covers the Git file generator globbing behavior in Argo CD, including the problem with greedy globbing, how to enable new globbing behavior, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:43:21", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "title": "Git File Generator Globbing - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Git-File-Globbing/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "scrapeId": "c6026ce8-c6a6-4828-a1e5-0ee9199453a0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git-File-Globbing", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git-File-Globbing/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Git File Generator Globbing\"?\n\nAssistant: Here are some code examples:\n\n### Repository Layout Example\n```yaml\n```\n└── cluster-charts/\n    ├── cluster1\n    │   ├── mychart/\n    │   │   ├── charts/\n    │   │   │    └── mysubchart/\n    │   │   │        ├── values.yaml\n    │   │   │        └── etc…\n    │   │   ├── values.yaml\n    │   │   └── etc…\n    │   └── myotherchart/\n    │       ├── values.yaml\n    │       └── etc…\n    └── cluster2\n        └── etc…\n```\n```\n\n### Path Key Example\n```yaml\n```\npath: cluster-charts/*/*/values.yaml\n```\n```\n\n### Default Implementation Path Example\n```yaml\n```\npath: cluster-charts/**/values.yaml\n```\n```\n\n### Another Path Example\n```yaml\n```\npath: some-path/*.yaml\n```\n```\n\n### Doublestar Directory Structure Example\n```yaml\n```\ngrandparent\n`-- parent\n    |-- child1\n    `-- child2\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git-File-Globbing", "title": "Git File Generator Globbing", "description": "This page covers the Git file generator globbing behavior in Argo CD, including the problem with greedy globbing, how to enable new globbing behavior, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:43:21", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "title": "Git File Generator Globbing - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Git-File-Globbing/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "scrapeId": "c6026ce8-c6a6-4828-a1e5-0ee9199453a0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git-File-Globbing", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git-File-Globbing/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Git File Generator Globbing\"?\n\nAssistant: Here are the recommended best practices:\n\n• Enable new globbing behavior to avoid greedy matching issues.\n• Use the `doublestar` package for recursive file matching.\n• Ensure doublestar appears as a path component by itself.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git-File-Globbing", "title": "Git File Generator Globbing", "description": "This page covers the Git file generator globbing behavior in Argo CD, including the problem with greedy globbing, how to enable new globbing behavior, and usage examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:43:21", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "title": "Git File Generator Globbing - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Git-File-Globbing/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "scrapeId": "c6026ce8-c6a6-4828-a1e5-0ee9199453a0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git-File-Globbing", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git-File-Globbing/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Git Generator\"?\n\nAssistant: The Git generator contains two subtypes: the Git directory generator, and Git file generator.\n\nHere's a detailed explanation:\n\n\n## Git Generator: Directories\nThe Git directory generator, one of two subtypes of the Git generator, generates parameters using the directory structure of a specified Git repository.\n\nSuppose you have a Git repository with the following directory structure:\n\n```\n├── argo-workflows\n│   ├── kustomization.yaml\n│   └── namespace-install.yaml\n└── prometheus-operator\n    ├── Chart.yaml\n    ├── README.md\n    ├── requirements.yaml\n    └── values.yaml\n```\n\nThis repository contains two directories, one for each of the workloads to deploy:\n\n- an Argo Workflow controller kustomization YAML file\n- a Prometheus Operator Helm chart\n\nWe can deploy both workloads, using this example:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      directories:\n      - path: applicationset/examples/git-generator-directory/cluster-addons/*\n  template:\n    metadata:\n      name: '{{.path.basename}}'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{.path.basename}}'\n      syncPolicy:\n        syncOptions:\n        - CreateNamespace=true\n```\n\n( _The full example can be found [here](https://github.com/argoproj/argo-cd/tree/master/applicationset/examples/git-generator-directory)._)\n\nThe generator parameters are:\n\n- `{{.path.path}}`: The directory paths within the Git repository that match the `path` wildcard.\n- `{{index .path.segments n}}`: The directory paths within the Git repository that match the `path` wildcard, split into array elements ( `n` - array index)\n- `{{.path.basename}}`: For any directory path within the Git repository that matches the `path` wildcard, the right-most path name is extracted (e.g. `/directory/directory2` would produce `directory2`).\n- `{{.path.basenameNormalized}}`: This field is the same as `path.basename` with unsupported characters replaced with `-` (e.g. a `path` of `/directory/directory_2`, and `path.basename` of `directory_2` would produce `directory-2` here).\n\n**Note**: The right-most path name always becomes `{{.path.basename}}`. For example, for `- path: /one/two/three/four`, `{{.path.basename}}` is `four`.\n\n**Note**: If the `pathParamPrefix` option is specified, all `path`-related parameter names above will be prefixed with the specified value and a dot separator. E.g., if `pathParamPrefix` is `myRepo`, then the generated parameter name would be `.myRepo.path` instead of `.path`. Using this option is necessary in a Matrix generator where both child generators are Git generators (to avoid conflicts when merging the child generators’ items).\n\nWhenever a new Helm chart/Kustomize YAML/Application/plain subdirectory is added to the Git repository, the ApplicationSet controller will detect this change and automatically deploy the resulting manifests within new `Application` resources.\n\nAs with other generators, clusters _must_ already be defined within Argo CD, in order to generate Applications for them.\n\n## Exclude directories\nThe Git directory generator will automatically exclude directories that begin with `.` (such as `.git`).\n\nThe Git directory generator also supports an `exclude` option in order to exclude directories in the repository from being scanned by the ApplicationSet controller:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      directories:\n      - path: applicationset/examples/git-generator-directory/excludes/cluster-addons/*\n      - path: applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook\n        exclude: true\n  template:\n    metadata:\n      name: '{{.path.basename}}'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{.path.basename}}'\n```\n\n( _The full example can be found [here](https://github.com/argoproj/argo-cd/tree/master/applicationset/examples/git-generator-directory/excludes)._)\n\nThis example excludes the `exclude-helm-guestbook` directory from the list of directories scanned for this `ApplicationSet` resource.\n\nExclude rules have higher priority than include rules\n\nIf a directory matches at least one `exclude` pattern, it will be excluded. Or, said another way, _exclude rules take precedence over include rules._\n\nAs a corollary, which directories are included/excluded is not affected by the order of `path`s in the `directories` field list (because, as above, exclude rules always take precedence over include rules).\n\nFor example, with these directories:\n\n```\n.\n└── d\n    ├── e\n    ├── f\n    └── g\n```\n\nSay you want to include `/d/e`, but exclude `/d/f` and `/d/g`. This will _not_ work:\n\n```\n- path: /d/e\n  exclude: false\n- path: /d/*\n  exclude: true\n```\n\nWhy? Because the exclude `/d/*` exclude rule will take precedence over the `/d/e` include rule. When the `/d/e` path in the Git repository is processed by the ApplicationSet controller, the controller detects that at least one exclude rule is matched, and thus that directory should not be scanned.\n\nYou would instead need to do:\n\n```\n- path: /d/*\n- path: /d/f\n  exclude: true\n- path: /d/g\n  exclude: true\n```\n\nOr, a shorter way (using [path.Match](https://golang.org/pkg/path/#Match) syntax) would be:\n\n```\n- path: /d/*\n- path: /d/[fg]\n  exclude: true\n```\n\n## Root Of Git Repo\nThe Git directory generator can be configured to deploy from the root of the git repository by providing `'*'` as the `path`.\nTo exclude directories, you only need to put the name/ [path.Match](https://golang.org/pkg/path/#Match) of the directory you do not want to deploy.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/example/example-repo.git\n      revision: HEAD\n      directories:\n      - path: '*'\n      - path: donotdeploy\n        exclude: true\n  template:\n    metadata:\n      name: '{{.path.basename}}'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/example/example-repo.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{.path.basename}}'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git", "title": "Git Generator", "description": "The Git generator contains two subtypes: the Git directory generator, and Git file generator.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:43:46", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Git/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Git Generator - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "9f9c2548-5ef9-4a05-9463-34205bd4b674", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Git Generator\"?\n\nAssistant: Here are some code examples:\n\n### Example of Git Directory Generator\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      directories:\n      - path: applicationset/examples/git-generator-directory/cluster-addons/*\n  template:\n    metadata:\n      name: '{{.path.basename}}'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{.path.basename}}'\n      syncPolicy:\n        syncOptions:\n        - CreateNamespace=true\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git", "title": "Git Generator", "description": "The Git generator contains two subtypes: the Git directory generator, and Git file generator.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:43:46", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Git/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Git Generator - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "9f9c2548-5ef9-4a05-9463-34205bd4b674", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Git Generator\"?\n\nAssistant: Here are the recommended best practices:\n\n• Git generators are often used to make it easier for (non-admin) developers to create Applications.\n• For ApplicationSets with a templated `project` field, the source of truth _must_ be controlled by admins.\n• PRs must require admin approval for Git generators.\n• Git generator does not support Signature Verification for ApplicationSets with a templated `project` field.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git", "title": "Git Generator", "description": "The Git generator contains two subtypes: the Git directory generator, and Git file generator.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:43:46", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Git/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Git Generator - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "9f9c2548-5ef9-4a05-9463-34205bd4b674", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"List Generator\"?\n\nAssistant: The List generator generates parameters based on an arbitrary list of key/value pairs (as long as the values are string values).\n\nHere's a detailed explanation:\n\n\n## List Generator\nThe List generator generates parameters based on an arbitrary list of key/value pairs (as long as the values are string values). In this example, we're targeting a local cluster named `engineering-dev`:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://kubernetes.default.svc\n      # - cluster: engineering-prod\n      #   url: https://kubernetes.default.svc\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: applicationset/examples/list-generator/guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n\n```\n\n( _The full example can be found [here](https://github.com/argoproj/argo-cd/tree/master/applicationset/examples/list-generator)._)\n\nIn this example, the List generator passes the `url` and `cluster` fields as parameters into the template. If we wanted to add a second environment, we could uncomment the second element and the ApplicationSet controller would automatically target it with the defined application.\n\nWith the ApplicationSet v0.1.0 release, one could _only_ specify `url` and `cluster` element fields (plus arbitrary `values`). As of ApplicationSet v0.2.0, any key/value `element` pair is supported (which is also fully backwards compatible with the v0.1.0 form):\n\n```\nspec:\n  generators:\n  - list:\n      elements:\n        # v0.1.0 form - requires cluster/url keys:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          values:\n            additional: value\n        # v0.2.0+ form - does not require cluster/URL keys\n        # (but they are still supported).\n        - staging: \"true\"\n          gitRepo: https://kubernetes.default.svc\n# (...)\n\n```\n\nClusters must be predefined in Argo CD\n\nThese clusters _must_ already be defined within Argo CD, in order to generate applications for these values. The ApplicationSet controller does not create clusters within Argo CD (for instance, it does not have the credentials to do so).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List", "title": "List Generator", "description": "The List generator generates parameters based on an arbitrary list of key/value pairs (as long as the values are string values).", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:43:59", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "List Generator - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-List/", "scrapeId": "f04988a4-8678-4a8c-ac02-3d1bef0189d8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"List Generator\"?\n\nAssistant: Here are some code examples:\n\n### List Generator Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://kubernetes.default.svc\n      # - cluster: engineering-prod\n      #   url: https://kubernetes.default.svc\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: \"my-project\"\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: applicationset/examples/list-generator/guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List", "title": "List Generator", "description": "The List generator generates parameters based on an arbitrary list of key/value pairs (as long as the values are string values).", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:43:59", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "List Generator - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-List/", "scrapeId": "f04988a4-8678-4a8c-ac02-3d1bef0189d8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"List Generator\"?\n\nAssistant: Here are the recommended best practices:\n\n• Clusters must be predefined in Argo CD. These clusters must already be defined within Argo CD, in order to generate applications for these values. The ApplicationSet controller does not create clusters within Argo CD.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List", "title": "List Generator", "description": "The List generator generates parameters based on an arbitrary list of key/value pairs (as long as the values are string values).", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:43:59", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "List Generator - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-List/", "scrapeId": "f04988a4-8678-4a8c-ac02-3d1bef0189d8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Merge Generator\"?\n\nAssistant: The Merge generator combines parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. A matching parameter set has the same values for the configured merge keys. Non-matching parameter sets are discarded. Override precedence is bottom-to-top: the values from a matching parameter set produced by generator 3 will take precedence over the values from the corresponding parameter set produced by generator 2.\n\nHere's a detailed explanation:\n\n\n## Example: Base Cluster generator + override Cluster generator + List generator\nAs an example, imagine that we have two clusters:\n\n- A `staging` cluster (at `https://1.2.3.4`)\n- A `production` cluster (at `https://2.4.6.8`)\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-git\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    # merge 'parent' generator\n    - merge:\n        mergeKeys:\n          - server\n        generators:\n          - clusters:\n              values:\n                kafka: 'true'\n                redis: 'false'\n          # For clusters with a specific label, enable Kafka.\n          - clusters:\n              selector:\n                matchLabels:\n                  use-kafka: 'false'\n              values:\n                kafka: 'false'\n          # For a specific cluster, enable Redis.\n          - list:\n              elements:\n                - server: https://2.4.6.8\n                  values.redis: 'true'\n  template:\n    metadata:\n      name: '{{.name}}'\n    spec:\n      project: '{{index .metadata.labels \"environment\"}}'\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: app\n        helm:\n          parameters:\n            - name: kafka\n              value: '{{.values.kafka}}'\n            - name: redis\n              value: '{{.values.redis}}'\n      destination:\n        server: '{{.server}}'\n        namespace: default\n```\n\nThe base Cluster generator scans the [set of clusters defined in Argo CD](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/), finds the staging and production cluster secrets, and produces two corresponding sets of parameters:\n\n```\n- name: staging\n  server: https://1.2.3.4\n  values.kafka: 'true'\n  values.redis: 'false'\n\n- name: production\n  server: https://2.4.6.8\n  values.kafka: 'true'\n  values.redis: 'false'\n```\n\nThe override Cluster generator scans the [set of clusters defined in Argo CD](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/), finds the staging cluster secret (which has the required label), and produces the following parameters:\n\n```\n- name: staging\n  server: https://1.2.3.4\n  values.kafka: 'false'\n```\n\nWhen merged with the base generator's parameters, the `values.kafka` value for the staging cluster is set to `'false'.\n\n```\n- name: staging\n  server: https://1.2.3.4\n  values.kafka: 'false'\n  values.redis: 'false'\n\n- name: production\n  server: https://2.4.6.8\n  values.kafka: 'true'\n  values.redis: 'false'\n```\n\nFinally, the List cluster generates a single set of parameters:\n\n```\n- server: https://2.4.6.8\n  values.redis: 'true'\n```\n\nWhen merged with the updated base parameters, the `values.redis` value for the production cluster is set to `'true'. This is the merge generator's final output:\n\n```\n- name: staging\n  server: https://1.2.3.4\n  values.kafka: 'false'\n  values.redis: 'false'\n\n- name: production\n  server: https://2.4.6.8\n  values.kafka: 'true'\n  values.redis: 'true'\n```\n\n## Example: Use value interpolation in merge\nSome generators support additional values and interpolating from generated variables to selected values. This can be used to teach the merge generator which generated variables to use to combine different generators.\n\nThe following example combines discovered clusters and a git repository by cluster labels and the branch name:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-git\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    # merge 'parent' generator:\n    # Use the selector set by both child generators to combine them.\n    - merge:\n        mergeKeys:\n          # Note that this would not work with goTemplate enabled,\n          # nested merge keys are not supported there.\n          - values.selector\n        generators:\n          # Assuming, all configured clusters have a label for their location:\n          # Set the selector to this location.\n          - clusters:\n              values:\n                selector: '{{index .metadata.labels \"location\"}}'\n          # The git repo may have different directories which correspond to the\n          # cluster locations, using these as a selector.\n          - git:\n              repoURL: https://github.com/argoproj/argocd-example-apps/\n              revision: HEAD\n              directories:\n              - path: '*'\n              values:\n                selector: '{{.path.path}}'\n  template:\n    metadata:\n      name: '{{.name}}'\n    spec:\n      project: '{{index .metadata.labels \"environment\"}}'\n      source:\n        repoURL: https://github.com/argoproj/argocd-example-apps/\n        # The cluster values field for each generator will be substituted here:\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: '{{.server}}'\n        namespace: default\n```\n\nAssuming a cluster named `germany01` with the label `metadata.labels.location=Germany` and a git repository containing a directory called `Germany`, this could combine to values as follows:\n\n```\n  # From the cluster generator\n- name: germany01\n  server: https://1.2.3.4\n  # From the git generator\n  path: Germany\n  # Combining selector with the merge generator\n  values.selector: 'Germany'\n  # More values from cluster & git generator\n  # […]\n```\n\n## Restrictions\n1. You should specify only a single generator per array entry. This is not valid:\n\n```\n- merge:\n    generators:\n    - list: # (...)\n      git: # (...)\n```\n   - While this _will_ be accepted by Kubernetes API validation, the controller will report an error on generation. Each generator should be specified in a separate array element, as in the examples above.\n2. The Merge generator does not support [`template` overrides](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Template/#generator-templates) specified on child generators. This `template` will not be processed:\n\n```\n- merge:\n    generators:\n      - list:\n          elements:\n            - # (...)\n          template: { } # Not processed\n```\n3. Combination-type generators (Matrix or Merge) can only be nested once. For example, this will not work:\n\n```\n- merge:\n    generators:\n      - merge:\n          generators:\n            - merge:  # This third level is invalid.\n                generators:\n                  - list:\n                      elements:\n                        - # (...)\n```\n4. Merging on nested values while using `goTemplate: true` is currently not supported, this will not work\n\n```\nspec:\n     goTemplate: true\n     generators:\n  - merge:\n      mergeKeys:\n        - values.merge\n```\n5. When using a Merge generator nested inside another Matrix or Merge generator, [Post Selectors](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Post-Selector/) for this nested generator's generators will only be applied when enabled via `spec.applyNestedSelectors`.\n\n```\n- merge:\n    generators:\n      - merge:\n          generators:\n            - list\n                elements:\n                  - # (...)\n              selector: { } # Only applied when applyNestedSelectors is true\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge", "title": "Merge Generator", "description": "The Merge generator combines parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. A matching parameter set has the same values for the configured merge keys. Non-matching parameter sets are discarded. Override precedence is bottom-to-top: the values from a matching parameter set produced by generator 3 will take precedence over the values from the corresponding parameter set produced by generator 2.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:47:33", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-version-slug": "stable", "title": "Merge Generator - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Merge/", "readthedocs-http-status": "200", "scrapeId": "6d0dcb0b-734a-4494-a033-7ff0b7597b7d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Merge Generator\"?\n\nAssistant: Here are some code examples:\n\n### Base Cluster generator + override Cluster generator + List generator\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-git\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    # merge 'parent' generator\n    - merge:\n        mergeKeys:\n          - server\n        generators:\n          - clusters:\n              values:\n                kafka: 'true'\n                redis: 'false'\n          # For clusters with a specific label, enable Kafka.\n          - clusters:\n              selector:\n                matchLabels:\n                  use-kafka: 'false'\n              values:\n                kafka: 'false'\n          # For a specific cluster, enable Redis.\n          - list:\n              elements:\n                - server: https://2.4.6.8\n                  values.redis: 'true'\n  template:\n    metadata:\n      name: '{{.name}}'\n    spec:\n      project: '{{index .metadata.labels \"environment\"}}'\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: app\n        helm:\n          parameters:\n            - name: kafka\n              value: '{{.values.kafka}}'\n            - name: redis\n              value: '{{.values.redis}}'\n      destination:\n        server: '{{.server}}'\n        namespace: default\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge", "title": "Merge Generator", "description": "The Merge generator combines parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. A matching parameter set has the same values for the configured merge keys. Non-matching parameter sets are discarded. Override precedence is bottom-to-top: the values from a matching parameter set produced by generator 3 will take precedence over the values from the corresponding parameter set produced by generator 2.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:47:33", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-version-slug": "stable", "title": "Merge Generator - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Merge/", "readthedocs-http-status": "200", "scrapeId": "6d0dcb0b-734a-4494-a033-7ff0b7597b7d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Merge Generator\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use a Merge generator when a subset of parameter sets require overriding.\n• Ensure only a single generator per array entry is specified to avoid errors.\n• Avoid using nested merge keys with goTemplate enabled, as it is not supported.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge", "title": "Merge Generator", "description": "The Merge generator combines parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. A matching parameter set has the same values for the configured merge keys. Non-matching parameter sets are discarded. Override precedence is bottom-to-top: the values from a matching parameter set produced by generator 3 will take precedence over the values from the corresponding parameter set produced by generator 2.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:47:33", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-version-slug": "stable", "title": "Merge Generator - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Merge/", "readthedocs-http-status": "200", "scrapeId": "6d0dcb0b-734a-4494-a033-7ff0b7597b7d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Plugin Generator\"?\n\nAssistant: Plugins allow you to provide your own generator.\n\nHere's a detailed explanation:\n\n\n## Simple example\nUsing a generator plugin without combining it with Matrix or Merge.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myplugin\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    - plugin:\n        # Specify the configMap where the plugin configuration is located.\n        configMapRef:\n          name: my-plugin\n        # You can pass arbitrary parameters to the plugin. `input.parameters` is a map, but values may be any type.\n        # These parameters will also be available on the generator's output under the `generator.input.parameters` key.\n        input:\n          parameters:\n            key1: \"value1\"\n            key2: \"value2\"\n            list: [\"list\", \"of\", \"values\"]\n            boolean: true\n            map:\n              key1: \"value1\"\n              key2: \"value2\"\n              key3: \"value3\"\n\n        # You can also attach arbitrary values to the generator's output under the `values` key. These values will be\n        # available in templates under the `values` key.\n        values:\n          value1: something\n\n        # When using a Plugin generator, the ApplicationSet controller polls every `requeueAfterSeconds` interval (defaulting to every 30 minutes) to detect changes.\n        requeueAfterSeconds: 30\n  template:\n    metadata:\n      name: myplugin\n      annotations:\n        example.from.input.parameters: \"{{ index .generator.input.parameters.map \\\"key1\\\" }}\"\n        example.from.values: \"{{ .values.value1 }}\"\n        # The plugin determines what else it produces.\n        example.from.plugin.output: \"{{ .something.from.the.plugin }}\"\n\n```\n\n- `configMapRef.name`: A `ConfigMap` name containing the plugin configuration to use for RPC call.\n- `input.parameters`: Input parameters included in the RPC call to the plugin. (Optional)\n\nNote\n\nThe concept of the plugin should not undermine the spirit of GitOps by externalizing data outside of Git. The goal is to be complementary in specific contexts. For example, when using one of the PullRequest generators, it's impossible to retrieve parameters related to the CI (only the commit hash is available), which limits the possibilities. By using a plugin, it's possible to retrieve the necessary parameters from a separate data source and use them to extend the functionality of the generator.\n\n## Add a ConfigMap to configure the access of the plugin\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-plugin\n  namespace: argocd\ndata:\n  token: \"$plugin.myplugin.token\" # Alternatively $<some_K8S_secret>:plugin.myplugin.token\n  baseUrl: \"http://myplugin.plugin-ns.svc.cluster.local.\"\n  requestTimeout: \"60\"\n```\n\n- `token`: Pre-shared token used to authenticate HTTP request (points to the right key you created in the `argocd-secret` Secret)\n- `baseUrl`: BaseUrl of the k8s service exposing your plugin in the cluster.\n- `requestTimeout`: Timeout of the request to the plugin in seconds (default: 30)\n\n## Store credentials\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-secret\n    app.kubernetes.io/part-of: argocd\ntype: Opaque\ndata:\n  # ...\n  # The secret value must be base64 encoded **once**.\n  # this value corresponds to: `printf \"strong-password\" | base64`.\n  plugin.myplugin.token: \"c3Ryb25nLXBhc3N3b3Jk\"\n  # ...\n```\n\n#### Alternative\n\nIf you want to store sensitive data in **another** Kubernetes `Secret`, instead of `argocd-secret`, ArgoCD knows how to check the keys under `data` in your Kubernetes `Secret` for a corresponding key whenever a value in a configmap starts with `$`, then your Kubernetes `Secret` name and `:` (colon) followed by the key name.\n\nSyntax: `$<k8s_secret_name>:<a_key_in_that_k8s_secret>`\n\n> NOTE: Secret must have label `app.kubernetes.io/part-of: argocd`\n\n## HTTP server\n#### A Simple Python Plugin\n\nYou can deploy it either as a sidecar or as a standalone deployment (the latter is recommended).\n\nIn the example, the token is stored in a file at this location : `/var/run/argo/token`\n\n```\nstrong-password\n```\n\n```\nimport json\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\nwith open(\"/var/run/argo/token\") as f:\n    plugin_token = f.read().strip()\n\nclass Plugin(BaseHTTPRequestHandler):\n\n    def args(self):\n        return json.loads(self.rfile.read(int(self.headers.get('Content-Length'))))\n\n    def reply(self, reply):\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(json.dumps(reply).encode(\"UTF-8\"))\n\n    def forbidden(self):\n        self.send_response(403)\n        self.end_headers()\n\n    def unsupported(self):\n        self.send_response(404)\n        self.end_headers()\n\n    def do_POST(self):\n        if self.headers.get(\"Authorization\") != \"Bearer \" + plugin_token:\n            self.forbidden()\n\n        if self.path == '/api/v1/getparams.execute':\n            args = self.args()\n            self.reply({\n                \"output\": {\n                    \"parameters\": [\\\n                        {\\\n                            \"key1\": \"val1\",\\\n                            \"key2\": \"val2\"\\\n                        },\\\n                        {\\\n                            \"key1\": \"val2\",\\\n                            \"key2\": \"val2\"\\\n                        }\\\n                    ]\n                }\n            })\n        else:\n            self.unsupported()\n\nif __name__ == '__main__':\n    httpd = HTTPServer(('', 4355), Plugin)\n    httpd.serve_forever()\n```\n\nExecute getparams with curl :\n\n```\ncurl http://localhost:4355/api/v1/getparams.execute -H \"Authorization: Bearer strong-password\" -d \\\n'{\n  \"applicationSetName\": \"fake-appset\",\n  \"input\": {\n    \"parameters\": {\n      \"param1\": \"value1\"\n    }\n  }\n}'\n```\n\nSome things to note here:\n\n- You only need to implement the calls `/api/v1/getparams.execute`\n- You should check that the `Authorization` header contains the same bearer value as `/var/run/argo/token`. Return 403 if not\n- The input parameters are included in the request body and can be accessed using the `input.parameters` variable.\n- The output must always be a list of object maps nested under the `output.parameters` key in a map.\n- `generator.input.parameters` and `values` are reserved keys. If present in the plugin output, these keys will be overwritten by the contents of the `input.parameters` and `values` keys in the ApplicationSet's plugin generator spec.\n\n## With matrix and pull request example\nIn the following example, the plugin implementation is returning a set of image digests for the given branch. The returned list contains only one item corresponding to the latest built image for the branch.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: fb-matrix\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    - matrix:\n        generators:\n          - pullRequest:\n              github: ...\n              requeueAfterSeconds: 30\n          - plugin:\n              configMapRef:\n                name: cm-plugin\n              input:\n                parameters:\n                  branch: \"{{.branch}}\" # provided by generator pull request\n              values:\n                branchLink: \"https://git.example.com/org/repo/tree/{{.branch}}\"\n  template:\n    metadata:\n      name: \"fb-matrix-{{.branch}}\"\n    spec:\n      source:\n        repoURL: \"https://github.com/myorg/myrepo.git\"\n        targetRevision: \"HEAD\"\n        path: charts/my-chart\n        helm:\n          releaseName: fb-matrix-{{.branch}}\n          valueFiles:\n            - values.yaml\n          values: |\n            front:\n              image: myregistry:{{.branch}}@{{ .digestFront }} # digestFront is generated by the plugin\n            back:\n              image: myregistry:{{.branch}}@{{ .digestBack }} # digestBack is generated by the plugin\n      project: default\n      syncPolicy:\n        automated:\n          prune: true\n          selfHeal: true\n        syncOptions:\n          - CreateNamespace=true\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: \"{{.branch}}\"\n      info:\n        - name: Link to the Application's branch\n          value: \"{{values.branchLink}}\"\n```\n\nTo illustrate :\n\n- The generator pullRequest would return, for example, 2 branches: `feature-branch-1` and `feature-branch-2`.\n\n- The generator plugin would then perform 2 requests as follows :\n\n```\ncurl http://localhost:4355/api/v1/getparams.execute -H \"Authorization: Bearer strong-password\" -d \\\n'{\n  \"applicationSetName\": \"fb-matrix\",\n  \"input\": {\n    \"parameters\": {\n      \"branch\": \"feature-branch-1\"\n    }\n  }\n}'\n```\n\nThen,\n\n```\ncurl http://localhost:4355/api/v1/getparams.execute -H \"Authorization: Bearer strong-password\" -d \\\n'{\n  \"applicationSetName\": \"fb-matrix\",\n  \"input\": {\n    \"parameters\": {\n      \"branch\": \"feature-branch-2\"\n    }\n  }\n}'\n```\n\nFor each call, it would return a unique result such as :\n\n```\n{\n  \"output\": {\n    \"parameters\": [\\\n      {\\\n        \"digestFront\": \"sha256:a3f18c17771cc1051b790b453a0217b585723b37f14b413ad7c5b12d4534d411\",\\\n        \"digestBack\": \"sha256:4411417d614d5b1b479933b7420079671facd434fd42db196dc1f4cc55ba13ce\"\\\n      }\\\n    ]\n  }\n}\n```\n\nThen,\n\n```\n{\n  \"output\": {\n    \"parameters\": [\\\n      {\\\n        \"digestFront\": \"sha256:7c20b927946805124f67a0cb8848a8fb1344d16b4d0425d63aaa3f2427c20497\",\\\n        \"digestBack\": \"sha256:e55e7e40700bbab9e542aba56c593cb87d680cefdfba3dd2ab9cfcb27ec384c2\"\\\n      }\\\n    ]\n  }\n}\n```\n\nIn this example, by combining the two, you ensure that one or more pull requests are available and that the generated tag has been properly generated. This wouldn't have been possible with just a commit hash because a hash alone does not certify the success of the build.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Plugin", "title": "Plugin Generator", "description": "Plugins allow you to provide your own generator.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:48:23", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Plugin/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Plugin Generator - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "a0cab4f8-c6f7-4d17-a6eb-29764fe87501", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Plugin", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Plugin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Plugin Generator\"?\n\nAssistant: Here are some code examples:\n\n### Simple example\n```yaml\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myplugin\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    - plugin:\n        # Specify the configMap where the plugin configuration is located.\n        configMapRef:\n          name: my-plugin\n        # You can pass arbitrary parameters to the plugin. `input.parameters` is a map, but values may be any type.\n        # These parameters will also be available on the generator's output under the `generator.input.parameters` key.\n        input:\n          parameters:\n            key1: \"value1\"\n            key2: \"value2\"\n            list: [\"list\", \"of\", \"values\"]\n            boolean: true\n            map:\n              key1: \"value1\"\n              key2: \"value2\"\n              key3: \"value3\"\n\n        # You can also attach arbitrary values to the generator's output under the `values` key. These values will be\n        # available in templates under the `values` key.\n        values:\n          value1: something\n\n        # When using a Plugin generator, the ApplicationSet controller polls every `requeueAfterSeconds` interval (defaulting to every 30 minutes) to detect changes.\n        requeueAfterSeconds: 30\n  template:\n    metadata:\n      name: myplugin\n      annotations:\n        example.from.input.parameters: \"{{ index .generator.input.parameters.map \\\"key1\\\" }}\"\n        example.from.values: \"{{ .values.value1 }}\"\n        # The plugin determines what else it produces.\n        example.from.plugin.output: \"{{ .something.from.the.plugin }}\"\n\n```\n```\n\n### Add a ConfigMap to configure the access of the plugin\n```yaml\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-plugin\n  namespace: argocd\ndata:\n  token: \"$plugin.myplugin.token\" # Alternatively $<some_K8S_secret>:plugin.myplugin.token\n  baseUrl: \"http://myplugin.plugin-ns.svc.cluster.local.\"\n  requestTimeout: \"60\"\n```\n```\n\n### Store credentials\n```yaml\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-secret\n    app.kubernetes.io/part-of: argocd\ntype: Opaque\ndata:\n  # ...\n  # The secret value must be base64 encoded **once**.\n  # this value corresponds to: `printf \"strong-password\" | base64`.\n  plugin.myplugin.token: \"c3Ryb25nLXBhc3N3b3Jk\"\n  # ...\n```\n```\n\n### A Simple Python Plugin\n```yaml\n```\nimport json\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\nwith open(\"/var/run/argo/token\") as f:\n    plugin_token = f.read().strip()\n\nclass Plugin(BaseHTTPRequestHandler):\n\n    def args(self):\n        return json.loads(self.rfile.read(int(self.headers.get('Content-Length'))))\n\n    def reply(self, reply):\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(json.dumps(reply).encode(\"UTF-8\"))\n\n    def forbidden(self):\n        self.send_response(403)\n        self.end_headers()\n\n    def unsupported(self):\n        self.send_response(404)\n        self.end_headers()\n\n    def do_POST(self):\n        if self.headers.get(\"Authorization\") != \"Bearer \" + plugin_token:\n            self.forbidden()\n\n        if self.path == '/api/v1/getparams.execute':\n            args = self.args()\n            self.reply({\n                \"output\": {\n                    \"parameters\": [\\\n                        {\\\n                            \"key1\": \"val1\",\\\n                            \"key2\": \"val2\"\\\n                        },\\\n                        {\\\n                            \"key1\": \"val2\",\\\n                            \"key2\": \"val2\"\\\n                        }\\\n                    ]\n                }\n            })\n        else:\n            self.unsupported()\n\nif __name__ == '__main__':\n    httpd = HTTPServer(('', 4355), Plugin)\n    httpd.serve_forever()\n```\n```\n\n### With matrix and pull request example\n```yaml\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: fb-matrix\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    - matrix:\n        generators:\n          - pullRequest:\n              github: ...\n              requeueAfterSeconds: 30\n          - plugin:\n              configMapRef:\n                name: cm-plugin\n              input:\n                parameters:\n                  branch: \"{{.branch}}\" # provided by generator pull request\n              values:\n                branchLink: \"https://git.example.com/org/repo/tree/{{.branch}}\"\n  template:\n    metadata:\n      name: \"fb-matrix-{{.branch}}\"\n    spec:\n      source:\n        repoURL: \"https://github.com/myorg/myrepo.git\"\n        targetRevision: \"HEAD\"\n        path: charts/my-chart\n        helm:\n          releaseName: fb-matrix-{{.branch}}\n          valueFiles:\n            - values.yaml\n          values: |\n            front:\n              image: myregistry:{{.branch}}@{{ .digestFront }} # digestFront is generated by the plugin\n            back:\n              image: myregistry:{{.branch}}@{{ .digestBack }} # digestBack is generated by the plugin\n      project: default\n      syncPolicy:\n        automated:\n          prune: true\n          selfHeal: true\n        syncOptions:\n          - CreateNamespace=true\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: \"{{.branch}}\"\n      info:\n        - name: Link to the Application's branch\n          value: \"{{values.branchLink}}\"\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Plugin", "title": "Plugin Generator", "description": "Plugins allow you to provide your own generator.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:48:23", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Plugin/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Plugin Generator - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "a0cab4f8-c6f7-4d17-a6eb-29764fe87501", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Plugin", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Plugin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Plugin Generator\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can write in any language\n• Simple: a plugin just responds to RPC HTTP requests.\n• You can use it in a sidecar, or standalone deployment.\n• You can get your plugin running today, no need to wait 3-5 months for review, approval, merge and an Argo software release.\n• You can combine it with Matrix or Merge.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Plugin", "title": "Plugin Generator", "description": "Plugins allow you to provide your own generator.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:48:23", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Plugin/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Plugin Generator - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "a0cab4f8-c6f7-4d17-a6eb-29764fe87501", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Plugin", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Plugin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Post Selector all generators\"?\n\nAssistant: The `selector` field on a generator allows an `ApplicationSet` to post-filter results using the Kubernetes common labelSelector format and the generated values.\n\nHere's a detailed explanation:\n\n\n## Introduction\nThe `selector` field on a generator allows an `ApplicationSet` to post-filter results using [the Kubernetes common labelSelector format](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors) and the generated values.\n\n## Using matchLabels\n`matchLabels` is a map of `{key,value}` pairs. This `list` generator generates a set of two `Applications`, which is then filtered using `matchLabels` to only the list element containing the key `env` with value `staging`:\n\n```\nspec:\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          env: staging\n        - cluster: engineering-prod\n          url: https://kubernetes.default.svc\n          env: prod\n    selector:\n      matchLabels:\n        env: staging\n```\n\nThe `list` generator + `matchLabels` selector generates a single set of parameters:\n\n```\n- cluster: engineering-dev\n  url: https://kubernetes.default.svc\n  env: staging\n```\n\nIt is also possible to use `matchExpressions` for more powerful selectors.\n\n## Using matchExpressions\nA single `{key,value}` in the `matchLabels` map is equivalent to an element of `matchExpressions`, whose `key` field is the \"key\", the `operator` is \"In\", and the `values` array contains only the \"value\". So the same example using `matchExpressions` looks like:\n\n```\nspec:\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          env: staging\n        - cluster: engineering-prod\n          url: https://kubernetes.default.svc\n          env: prod\n    selector:\n      matchExpressions:\n        - key: env\n          operator: In\n          values:\n            - staging\n```\n\nValid `operators` include `In`, `NotIn`, `Exists`, and `DoesNotExist`. The `values` set must be non-empty in the case of `In` and `NotIn`.\n\n## Full Example\nIn the example, the list generator generates a set of two applications, which then filter by the key value to only select the `env` with value `staging`:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          env: staging\n        - cluster: engineering-prod\n          url: https://kubernetes.default.svc\n          env: prod\n    selector:\n      matchLabels:\n        env: staging\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj-labs/applicationset.git\n        targetRevision: HEAD\n        path: examples/list-generator/guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Post-Selector", "title": "Post Selector all generators", "description": "The `selector` field on a generator allows an `ApplicationSet` to post-filter results using the Kubernetes common labelSelector format and the generated values.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:48:38", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Post-Selector/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "title": "Post Selector all generators - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "13f3e1a5-0722-4e19-b14b-120606a5e3da", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Post-Selector", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Post-Selector/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Post Selector all generators\"?\n\nAssistant: Here are some code examples:\n\n### List Generator with matchLabels\n```yaml\nspec:\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          env: staging\n        - cluster: engineering-prod\n          url: https://kubernetes.default.svc\n          env: prod\n    selector:\n      matchLabels:\n        env: staging\n\n```\n\n### List Generator with matchExpressions\n```yaml\nspec:\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          env: staging\n        - cluster: engineering-prod\n          url: https://kubernetes.default.svc\n          env: prod\n    selector:\n      matchExpressions:\n        - key: env\n          operator: In\n          values:\n            - staging\n\n```\n\n### Full Example of ApplicationSet\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          env: staging\n        - cluster: engineering-prod\n          url: https://kubernetes.default.svc\n          env: prod\n    selector:\n      matchLabels:\n        env: staging\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj-labs/applicationset.git\n        targetRevision: HEAD\n        path: examples/list-generator/guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Post-Selector", "title": "Post Selector all generators", "description": "The `selector` field on a generator allows an `ApplicationSet` to post-filter results using the Kubernetes common labelSelector format and the generated values.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:48:38", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Post-Selector/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "title": "Post Selector all generators - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "13f3e1a5-0722-4e19-b14b-120606a5e3da", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Post-Selector", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Post-Selector/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Post Selector all generators\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `matchLabels` for simple key-value filtering.\n• Utilize `matchExpressions` for more complex filtering scenarios.\n• Ensure that the `values` set is non-empty when using `In` and `NotIn` operators.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Post-Selector", "title": "Post Selector all generators", "description": "The `selector` field on a generator allows an `ApplicationSet` to post-filter results using the Kubernetes common labelSelector format and the generated values.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:48:38", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Post-Selector/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "title": "Post Selector all generators - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "13f3e1a5-0722-4e19-b14b-120606a5e3da", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Post-Selector", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Post-Selector/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Generators\"?\n\nAssistant: Generators are responsible for generating parameters, which are then rendered into the template fields of the ApplicationSet resource.\n\nHere's a detailed explanation:\n\n\n## Overview\nGenerators are responsible for generating _parameters_, which are then rendered into the `template:` fields of the ApplicationSet resource. See the Introduction for an example of how generators work with templates, to create Argo CD Applications.\n\n## Types of Generators\nGenerators are primarily based on the data source that they use to generate the template parameters. As of this writing there are nine generators:\n\n- **List generator**: The List generator allows you to target Argo CD Applications to clusters based on a fixed list of any chosen key/value element pairs.\n- **Cluster generator**: The Cluster generator allows you to target Argo CD Applications to clusters, based on the list of clusters defined within (and managed by) Argo CD (which includes automatically responding to cluster addition/removal events from Argo CD).\n- **Git generator**: The Git generator allows you to create Applications based on files within a Git repository, or based on the directory structure of a Git repository.\n- **Matrix generator**: The Matrix generator may be used to combine the generated parameters of two separate generators.\n- **Merge generator**: The Merge generator may be used to merge the generated parameters of two or more generators. Additional generators can override the values of the base generator.\n- **SCM Provider generator**: The SCM Provider generator uses the API of an SCM provider (eg GitHub) to automatically discover repositories within an organization.\n- **Pull Request generator**: The Pull Request generator uses the API of an SCMaaS provider (eg GitHub) to automatically discover open pull requests within a repository.\n- **Cluster Decision Resource generator**: The Cluster Decision Resource generator is used to interface with Kubernetes custom resources that use custom resource-specific logic to decide which set of Argo CD clusters to deploy to.\n- **Plugin generator**: The Plugin generator makes RPC HTTP requests to provide parameters.\n\n## Filtering Generators\nAll generators can be filtered by using the Post Selector.\n\n## Getting Started\nIf you are new to generators, begin with the **List** and **Cluster** generators. For more advanced use cases, see the documentation for the remaining generators above.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators", "title": "Generators", "description": "Generators are responsible for generating parameters, which are then rendered into the template fields of the ApplicationSet resource.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:55:02", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators/", "title": "Generators - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "4f764c3d-d1e9-464b-9d0e-e581a1d3756d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Generators\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you are new to generators, begin with the List and Cluster generators. For more advanced use cases, see the documentation for the remaining generators above.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators", "title": "Generators", "description": "Generators are responsible for generating parameters, which are then rendered into the template fields of the ApplicationSet resource.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:55:02", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators/", "title": "Generators - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "4f764c3d-d1e9-464b-9d0e-e581a1d3756d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Getting Started\"?\n\nAssistant: This guide assumes you are familiar with Argo CD and its basic concepts. See the Argo CD documentation for more information.\n\nHere's a detailed explanation:\n\n\n## Requirements\n- Installed kubectl command-line tool\n- Have a kubeconfig file (default location is `~/.kube/config`).\n\n## Installation\nThere are a few options for installing the ApplicationSet controller.\n\n### A) Install ApplicationSet as part of Argo CD\nStarting with Argo CD v2.3, the ApplicationSet controller is bundled with Argo CD. It is no longer necessary to install the ApplicationSet controller separately from Argo CD.\n\nFollow the Argo CD Getting Started instructions for more information.\n\n### B) Install ApplicationSet into an existing Argo CD install (pre-Argo CD v2.3)\n**Note**: These instructions only apply to versions of Argo CD before v2.3.0.\n\nThe ApplicationSet controller _must_ be installed into the same namespace as the Argo CD it is targeting.\n\nPresuming that Argo CD is installed into the `argocd` namespace, run the following command:\n\n```\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/applicationset/v0.4.0/manifests/install.yaml\n```\n\nOnce installed, the ApplicationSet controller requires no additional setup.\n\nThe `manifests/install.yaml` file contains the Kubernetes manifests required to install the ApplicationSet controller:\n\n- CustomResourceDefinition for `ApplicationSet` resource\n- Deployment for `argocd-applicationset-controller`\n- ServiceAccount for use by ApplicationSet controller, to access Argo CD resources\n- Role granting RBAC access to needed resources, for ServiceAccount\n- RoleBinding to bind the ServiceAccount and Role.\n\n## Enabling high availability mode\nTo enable high availability, you have to set the command `--enable-leader-election=true` in argocd-applicationset-controller container and increase the replicas.\ndo following changes in manifests/install.yaml\n\n```\n    spec:\n      containers:\n      - command:\n        - entrypoint.sh\n        - argocd-applicationset-controller\n        - --enable-leader-election=true\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Getting-Started", "title": "Getting Started", "description": "This guide assumes you are familiar with Argo CD and its basic concepts. See the Argo CD documentation for more information.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:55:23", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Getting-Started/", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Installations - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "8842153d-ddf1-4632-9a7e-8377dfd3149f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Getting-Started", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Getting-Started/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Getting Started\"?\n\nAssistant: Here are some code examples:\n\n### Install ApplicationSet into an existing Argo CD install\n```yaml\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/applicationset/v0.4.0/manifests/install.yaml\n```\n\n### Enable high availability mode\n```yaml\n    spec:\n      containers:\n      - command:\n        - entrypoint.sh\n        - argocd-applicationset-controller\n        - --enable-leader-election=true\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Getting-Started", "title": "Getting Started", "description": "This guide assumes you are familiar with Argo CD and its basic concepts. See the Argo CD documentation for more information.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:55:23", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Getting-Started/", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Installations - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "8842153d-ddf1-4632-9a7e-8377dfd3149f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Getting-Started", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Getting-Started/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Getting Started\"?\n\nAssistant: Here are the recommended best practices:\n\n• See the Controlling Resource Modification page for information on additional parameters you may wish to add to the ApplicationSet Resource in install.yaml, to provide extra security against any initial, unexpected post-upgrade behaviour.\n• To temporarily prevent the upgraded ApplicationSet controller from making any changes, you could enable dry-run, use a create-only policy, enable preserveResourcesOnDeletion on your ApplicationSets, or temporarily disable automated sync in your ApplicationSets' template.\n• These parameters would allow you to observe/control the behaviour of the new version of the ApplicationSet controller in your environment, to ensure you are happy with the result (see the ApplicationSet log file for details). Just don't forget to remove any temporary changes when you are done testing!\n• Upgrading the ApplicationSet controller should be a minimally invasive process, and these are only suggested as an optional precaution for extra safety.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Getting-Started", "title": "Getting Started", "description": "This guide assumes you are familiar with Argo CD and its basic concepts. See the Argo CD documentation for more information.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:55:23", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Getting-Started/", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Installations - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "8842153d-ddf1-4632-9a7e-8377dfd3149f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Getting-Started", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Getting-Started/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Go Template\"?\n\nAssistant: ApplicationSet is able to use Go Text Template. To activate this feature, add `goTemplate: true` to your ApplicationSet manifest.\n\nHere's a detailed explanation:\n\n\n## Introduction\nApplicationSet is able to use [Go Text Template](https://pkg.go.dev/text/template). To activate this feature, add `goTemplate: true` to your ApplicationSet manifest.\n\nThe [Sprig function library](https://masterminds.github.io/sprig/) (except for `env`, `expandenv` and `getHostByName`) is available in addition to the default Go Text Template functions.\n\nAn additional `normalize` function makes any string parameter usable as a valid DNS name by replacing invalid characters with hyphens and truncating at 253 characters. This is useful when making parameters safe for things like Application names.\n\nAnother `slugify` function has been added which, by default, sanitizes and smart truncates (it doesn't cut a word into 2). This function accepts a couple of arguments:\n\n- The first argument (if provided) is an integer specifying the maximum length of the slug.\n- The second argument (if provided) is a boolean indicating whether smart truncation is enabled.\n- The last argument (if provided) is the input name that needs to be slugified.\n\n## Usage example\nGo Template is the Go Standard for string templating. It is also more powerful than fasttemplate (the default templating engine) as it allows doing complex templating logic.\n\n## Limitations\nGo templates are applied on a per-field basis, and only on string fields. Here are some examples of what is **not** possible with Go text templates:\n\n- Templating a boolean field.\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n    goTemplate: true\n    goTemplateOptions: [\"missingkey=error\"]\n    template:\n      spec:\n        source:\n          helm:\n            useCredentials: \"{{.useCredentials}}\"  # This field may NOT be templated, because it is a boolean field.\n```\n\n- Templating an object field:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n    goTemplate: true\n    goTemplateOptions: [\"missingkey=error\"]\n    template:\n      spec:\n        syncPolicy: \"{{.syncPolicy}}\"  # This field may NOT be templated, because it is an object field.\n```\n\n- Using control keywords across fields:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n    goTemplate: true\n    goTemplateOptions: [\"missingkey=error\"]\n    template:\n      spec:\n        source:\n          helm:\n            parameters:\n            # Each of these fields is evaluated as an independent template, so the first one will fail with an error.\n          - name: \"{{range .parameters}}\"\n          - name: \"{{.name}}\"\n            value: \"{{.value}}\"\n          - name: throw-away\n            value: \"{{end}}\"\n```\n\n- Signature verification is not supported for the templated `project` field when using the Git generator.\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n    goTemplate: true\n    template:\n      spec:\n        project: {{.project}}\n```\n\n## Migration guide\n### Globals\n\nAll your templates must replace parameters with GoTemplate Syntax:\n\nExample: `{{ some.value }}` becomes `{{ .some.value }}`\n\n### Cluster Generators\n\nBy activating Go Templating, `{{ .metadata }}` becomes an object.\n\n- `{{ metadata.labels.my-label }}` becomes `{{ index .metadata.labels \"my-label\" }}`\n- `{{ metadata.annotations.my/annotation }}` becomes `{{ index .metadata.annotations \"my/annotation\" }}`\n\n### Git Generators\n\nBy activating Go Templating, `{{ .path }}` becomes an object. Therefore, some changes must be made to the Git generators' templating:\n\n- `{{ path }}` becomes `{{ .path.path }}`\n- `{{ path.basename }}` becomes `{{ .path.basename }}`\n- `{{ path.basenameNormalized }}` becomes `{{ .path.basenameNormalized }}`\n- `{{ path.filename }}` becomes `{{ .path.filename }}`\n- `{{ path.filenameNormalized }}` becomes `{{ .path.filenameNormalized }}`\n- `{{ path[n] }}` becomes `{{ index .path.segments n }}`\n- `{{ values }}` if being used in the file generator becomes `{{ .values }}`\n\nHere is an example:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\nname: cluster-addons\nspec:\ngenerators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      directories:\n      - path: applicationset/examples/git-generator-directory/cluster-addons/*\ntemplate:\n    metadata:\n      name: '{{path.basename}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{path.basename}}'\n```\n\nbecomes\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\nname: cluster-addons\nspec:\ngoTemplate: true\ngoTemplateOptions: [\"missingkey=error\"]\ngenerators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      directories:\n      - path: applicationset/examples/git-generator-directory/cluster-addons/*\ntemplate:\n    metadata:\n      name: '{{.path.basename}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{.path.basename}}'\n```\n\nIt is also possible to use Sprig functions to construct the path variables manually:\n\n| with `goTemplate: false` | with `goTemplate: true` | with `goTemplate: true` + Sprig |\n| --- | --- | --- |\n| `{{path}}` | `{{.path.path}}` | `{{.path.path}}` |\n| `{{path.basename}}` | `{{.path.basename}}` | `{{base .path.path}}` |\n| `{{path.filename}}` | `{{.path.filename}}` | `{{.path.filename}}` |\n| `{{path.basenameNormalized}}` | `{{.path.basenameNormalized}}` | `{{normalize .path.path}}` |\n| `{{path.filenameNormalized}}` | `{{.path.filenameNormalized}}` | `{{normalize .path.filename}}` |\n| `{{path[N]}}` | `-` | `{{index .path.segments N}}` |\n\n## Available template functions\nApplicationSet controller provides:\n\n- all [sprig](http://masterminds.github.io/sprig/) Go templates function except `env`, `expandenv` and `getHostByName`\n- `normalize`: sanitizes the input so that it complies with the following rules:\n1. contains no more than 253 characters\n2. contains only lowercase alphanumeric characters, '-' or '.'\n3. starts and ends with an alphanumeric character\n- `slugify`: sanitizes like `normalize` and smart truncates (it doesn't cut a word into 2) like described in the [introduction](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/GoTemplate/#introduction) section.\n\n- `toYaml` / `fromYaml` / `fromYamlArray` helm like functions\n\n## Examples\n### Basic Go template usage\n\nThis example shows basic string parameter substitution.\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\nname: guestbook\nspec:\ngoTemplate: true\ngoTemplateOptions: [\"missingkey=error\"]\ngenerators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n      - cluster: engineering-prod\n        url: https://2.4.6.8\n      - cluster: finance-preprod\n        url: https://9.8.7.6\ntemplate:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: my-project\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\n### Fallbacks for unset parameters\n\nFor some generators, a parameter of a certain name might not always be populated (for example, with the values generator or the git files generator). In these cases, you can use a Go template to provide a fallback value.\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\nname: guestbook\nspec:\ngoTemplate: true\ngoTemplateOptions: [\"missingkey=error\"]\ngenerators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://kubernetes.default.svc\n      - cluster: engineering-prod\n        url: https://kubernetes.default.svc\n        nameSuffix: -my-name-suffix\ntemplate:\n    metadata:\n      name: '{{.cluster}}{{dig \"nameSuffix\" \"\" .}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: applicationset/examples/list-generator/guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\nThis ApplicationSet will produce an Application called `engineering-dev` and another called `engineering-prod-my-name-suffix`.\n\nNote that unset parameters are an error, so you need to avoid looking up a property that doesn't exist. Instead, use template functions like `dig` to do the lookup with a default. If you prefer to have unset parameters default to zero, you can remove `goTemplateOptions: [\"missingkey=error\"]` or set it to `goTemplateOptions: [\"missingkey=invalid\"]`.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/GoTemplate", "title": "Go Template", "description": "ApplicationSet is able to use Go Text Template. To activate this feature, add `goTemplate: true` to your ApplicationSet manifest.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:56:14", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "Go Template - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/operator-manual/applicationset/GoTemplate/", "readthedocs-version-slug": "stable", "scrapeId": "9d35b3f5-8e56-4f98-89f4-d4e1ad890370", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/GoTemplate", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/GoTemplate/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Go Template\"?\n\nAssistant: Here are some code examples:\n\n### Usage example\n```yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: test-appset\nspec:\n  ...\n  template:\n    metadata:\n      name: 'hellos3-{{.name}}-{{ cat .branch | slugify 23 }}'\n      annotations:\n        label-1: '{{ cat .branch | slugify }}'\n        label-2: '{{ cat .branch | slugify 23 }}'\n        label-3: '{{ cat .branch | slugify 50 false }}'\n```\n```\n\n### Limitations - Templating a boolean field\n```yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n    goTemplate: true\n    goTemplateOptions: [\"missingkey=error\"]\n    template:\n      spec:\n        source:\n          helm:\n            useCredentials: \"{{.useCredentials}}\"  # This field may NOT be templated, because it is a boolean field.\n```\n```\n\n### Limitations - Templating an object field\n```yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n    goTemplate: true\n    goTemplateOptions: [\"missingkey=error\"]\n    template:\n      spec:\n        syncPolicy: \"{{.syncPolicy}}\"  # This field may NOT be templated, because it is an object field.\n```\n```\n\n### Limitations - Using control keywords across fields\n```yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n    goTemplate: true\n    goTemplateOptions: [\"missingkey=error\"]\n    template:\n      spec:\n        source:\n          helm:\n            parameters:\n            # Each of these fields is evaluated as an independent template, so the first one will fail with an error.\n          - name: \"{{range .parameters}}\"\n          - name: \"{{.name}}\"\n            value: \"{{.value}}\"\n          - name: throw-away\n            value: \"{{end}}\"\n```\n```\n\n### Limitations - Signature verification not supported\n```yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nspec:\n    goTemplate: true\n    template:\n      spec:\n        project: {{.project}}\n```\n```\n\n### Migration guide - Example\n```yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\nname: cluster-addons\nspec:\ngenerators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      revision: HEAD\n      directories:\n      - path: applicationset/examples/git-generator-directory/cluster-addons/*\ntemplate:\n    metadata:\n      name: '{{path.basename}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{path.basename}}'\n```\n```\n\n### Examples - Basic Go template usage\n```yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\nname: guestbook\nspec:\ngoTemplate: true\ngoTemplateOptions: [\"missingkey=error\"]\ngenerators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n      - cluster: engineering-prod\n        url: https://2.4.6.8\n      - cluster: finance-preprod\n        url: https://9.8.7.6\ntemplate:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: my-project\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n```\n\n### Examples - Fallbacks for unset parameters\n```yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\nname: guestbook\nspec:\ngoTemplate: true\ngoTemplateOptions: [\"missingkey=error\"]\ngenerators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://kubernetes.default.svc\n      - cluster: engineering-prod\n        url: https://kubernetes.default.svc\n        nameSuffix: -my-name-suffix\ntemplate:\n    metadata:\n      name: '{{.cluster}}{{dig \"nameSuffix\" \"\" .}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: applicationset/examples/list-generator/guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/GoTemplate", "title": "Go Template", "description": "ApplicationSet is able to use Go Text Template. To activate this feature, add `goTemplate: true` to your ApplicationSet manifest.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:56:14", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "Go Template - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/operator-manual/applicationset/GoTemplate/", "readthedocs-version-slug": "stable", "scrapeId": "9d35b3f5-8e56-4f98-89f4-d4e1ad890370", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/GoTemplate", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/GoTemplate/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Go Template\"?\n\nAssistant: Here are the recommended best practices:\n\n• The recommended setting of `goTemplateOptions` is `['missingkey=error']`, which ensures that if undefined values are looked up by your template then an error is reported instead of being ignored silently.\n• Use template functions like `dig` to do the lookup with a default for unset parameters. If you prefer to have unset parameters default to zero, you can remove `goTemplateOptions: ['missingkey=error']` or set it to `goTemplateOptions: ['missingkey=invalid'].\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/GoTemplate", "title": "Go Template", "description": "ApplicationSet is able to use Go Text Template. To activate this feature, add `goTemplate: true` to your ApplicationSet manifest.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:56:14", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "Go Template - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/operator-manual/applicationset/GoTemplate/", "readthedocs-version-slug": "stable", "scrapeId": "9d35b3f5-8e56-4f98-89f4-d4e1ad890370", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/GoTemplate", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/GoTemplate/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Progressive Syncs\"?\n\nAssistant: Alpha Feature (Since v2.6.0) This is an experimental, alpha-quality feature that allows you to control the order in which the ApplicationSet controller will create or update the Applications owned by an ApplicationSet resource. It may be removed in future releases or modified in backwards-incompatible ways.\n\nHere's a detailed explanation:\n\n\n## Use Cases\nThe Progressive Syncs feature set is intended to be light and flexible. The feature only interacts with the health of managed Applications. It is not intended to support direct integrations with other Rollout controllers (such as the native ReplicaSet controller or Argo Rollouts).\n\n- Progressive Syncs watch for the managed Application resources to become \"Healthy\" before proceeding to the next stage.\n- Deployments, DaemonSets, StatefulSets, and Argo Rollouts are all supported, because the Application enters a \"Progressing\" state while pods are being rolled out. In fact, any resource with a health check that can report a \"Progressing\" status is supported.\n- Argo CD Resource Hooks are supported. We recommend this approach for users that need advanced functionality when an Argo Rollout cannot be used, such as smoke testing after a DaemonSet change.\n\n## Enabling Progressive Syncs\nAs an experimental feature, progressive syncs must be explicitly enabled, in one of these ways.\n\n1. Pass `--enable-progressive-syncs` to the ApplicationSet controller args.\n2. Set `ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS=true` in the ApplicationSet controller environment variables.\n3. Set `applicationsetcontroller.enable.progressive.syncs: true` in the Argo CD `argocd-cmd-params-cm` ConfigMap.\n\n## Strategies\n- AllAtOnce (default)\n- RollingSync\n\n## AllAtOnce\nThis default Application update behavior is unchanged from the original ApplicationSet implementation.\n\nAll Applications managed by the ApplicationSet resource are updated simultaneously when the ApplicationSet is updated.\n\n## RollingSync\nThis update strategy allows you to group Applications by labels present on the generated Application resources.\nWhen the ApplicationSet changes, the changes will be applied to each group of Application resources sequentially.\n\n- Application groups are selected using their labels and `matchExpressions`.\n- All `matchExpressions` must be true for an Application to be selected (multiple expressions match with AND behavior).\n- The `In` and `NotIn` operators must match at least one value to be considered true (OR behavior).\n- The `NotIn` operator has priority in the event that both a `NotIn` and `In` operator produce a match.\n- All Applications in each group must become Healthy before the ApplicationSet controller will proceed to update the next group of Applications.\n- The number of simultaneous Application updates in a group will not exceed its `maxUpdate` parameter (default is 100%, unbounded).\n- RollingSync will capture external changes outside the ApplicationSet resource, since it relies on watching the OutOfSync status of the managed Applications.\n- RollingSync will force all generated Applications to have autosync disabled. Warnings are printed in the applicationset-controller logs for any Application specs with an automated syncPolicy enabled.\n- Sync operations are triggered the same way as if they were triggered by the UI or CLI (by directly setting the `operation` status field on the Application resource). This means that a RollingSync will respect sync windows just as if a user had clicked the \"Sync\" button in the Argo UI.\n- When a sync is triggered, the sync is performed with the same syncPolicy configured for the Application. For example, this preserves the Application's retry settings.\n- If an Application is considered \"Pending\" for `applicationsetcontroller.default.application.progressing.timeout` seconds, the Application is automatically moved to Healthy status (default 300).\n- If an Application is not selected in any step, it will be excluded from the rolling sync and needs to be manually synced through the CLI or UI.\n\n## Example\nThe following example illustrates how to stage a progressive sync over Applications with explicitly configured environment labels.\n\nOnce a change is pushed, the following will happen in order.\n\n- All `env-dev` Applications will be updated simultaneously.\n- The rollout will wait for all `env-qa` Applications to be manually synced via the `argocd` CLI or by clicking the Sync button in the UI.\n- 10% of all `env-prod` Applications will be updated at a time until all `env-prod` Applications have been updated.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs", "title": "Progressive Syncs", "description": "Alpha Feature (Since v2.6.0) This is an experimental, alpha-quality feature that allows you to control the order in which the ApplicationSet controller will create or update the Applications owned by an ApplicationSet resource. It may be removed in future releases or modified in backwards-incompatible ways.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:56:51", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Progressive Syncs - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/applicationset/Progressive-Syncs/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "0d2bc913-33b4-4ebb-801e-431c39952b15", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Progressive Syncs\"?\n\nAssistant: Here are some code examples:\n\n### Example ApplicationSet Configuration\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n        env: env-dev\n      - cluster: engineering-qa\n        url: https://2.4.6.8\n        env: env-qa\n      - cluster: engineering-prod\n        url: https://9.8.7.6/\n        env: env-prod\n  strategy:\n    type: RollingSync\n    rollingSync:\n      steps:\n        - matchExpressions:\n            - key: envLabel\n              operator: In\n              values:\n                - env-dev\n          #maxUpdate: 100%  # if undefined, all applications matched are updated together (default is 100%)\n        - matchExpressions:\n            - key: envLabel\n              operator: In\n              values:\n                - env-qa\n          maxUpdate: 0      # if 0, no matched applications will be updated\n        - matchExpressions:\n            - key: envLabel\n              operator: In\n              values:\n                - env-prod\n          maxUpdate: 10%    # maxUpdate supports both integer and percentage string values (rounds down, but floored at 1 Application for >0%)\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n      labels:\n        envLabel: '{{.env}}'\n    spec:\n      project: my-project\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs", "title": "Progressive Syncs", "description": "Alpha Feature (Since v2.6.0) This is an experimental, alpha-quality feature that allows you to control the order in which the ApplicationSet controller will create or update the Applications owned by an ApplicationSet resource. It may be removed in future releases or modified in backwards-incompatible ways.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:56:51", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Progressive Syncs - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/applicationset/Progressive-Syncs/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "0d2bc913-33b4-4ebb-801e-431c39952b15", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Progressive Syncs\"?\n\nAssistant: Here are the recommended best practices:\n\n• Progressive Syncs watch for the managed Application resources to become \"Healthy\" before proceeding to the next stage.\n• Use Argo CD Resource Hooks for advanced functionality when an Argo Rollout cannot be used, such as smoke testing after a DaemonSet change.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs", "title": "Progressive Syncs", "description": "Alpha Feature (Since v2.6.0) This is an experimental, alpha-quality feature that allows you to control the order in which the ApplicationSet controller will create or update the Applications owned by an ApplicationSet resource. It may be removed in future releases or modified in backwards-incompatible ways.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:56:51", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Progressive Syncs - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/applicationset/Progressive-Syncs/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "0d2bc913-33b4-4ebb-801e-431c39952b15", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"ApplicationSet Security\"?\n\nAssistant: ApplicationSet is a powerful tool, and it is crucial to understand its security implications before using it.\n\nHere's a detailed explanation:\n\n\n## Only admins may create/update/delete ApplicationSets\nApplicationSets can create Applications under arbitrary Projects. Argo CD setups often include Projects (such as the default) with high levels of permissions, often including the ability to manage the resources of Argo CD itself (like the RBAC ConfigMap).\n\nApplicationSets can also quickly create an arbitrary number of Applications and just as quickly delete them.\n\nFinally, ApplicationSets can reveal privileged information. For example, the git generator can read Secrets in the Argo CD namespace and send them to arbitrary URLs (e.g. URL provided for the api field) as auth headers. (This functionality is intended for authorizing requests to SCM providers like GitHub, but it could be abused by a malicious user.)\n\nFor these reasons, only admins may be given permission (via Kubernetes RBAC or any other mechanism) to create, update, or delete ApplicationSets.\n\n## Admins must apply appropriate controls for ApplicationSets' sources of truth\nEven if non-admins can't create ApplicationSet resources, they may be able to affect the behavior of ApplicationSets.\n\nFor example, if an ApplicationSet uses a git generator, a malicious user with push access to the source git repository could generate an excessively high number of Applications, putting strain on the ApplicationSet and Application controllers. They could also cause the SCM provider's rate limiting to kick in, degrading ApplicationSet service.\n\n## Templated `project` field\nIt's important to pay special attention to ApplicationSets where the project field is templated. A malicious user with write access to the generator's source of truth (for example, someone with push access to the git repo for a git generator) could create Applications under Projects with insufficient restrictions. A malicious user with the ability to create an Application under an unrestricted Project (like the default Project) could take control of Argo CD itself by, for example, modifying its RBAC ConfigMap.\n\nIf the project field is not hard-coded in an ApplicationSet's template, then admins must control all sources of truth for the ApplicationSet's generators.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Security", "title": "ApplicationSet Security", "description": "ApplicationSet is a powerful tool, and it is crucial to understand its security implications before using it.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:57:05", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Security - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/applicationset/Security/", "readthedocs-http-status": "200", "scrapeId": "6b96b324-8deb-4138-be5b-9ab62cd90351", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Security", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Security/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"ApplicationSet Security\"?\n\nAssistant: Here are the recommended best practices:\n\n• Only admins may be given permission to create, update, or delete ApplicationSets.\n• Admins must control all sources of truth for the ApplicationSet's generators.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Security", "title": "ApplicationSet Security", "description": "ApplicationSet is a powerful tool, and it is crucial to understand its security implications before using it.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:57:05", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Security - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/applicationset/Security/", "readthedocs-http-status": "200", "scrapeId": "6b96b324-8deb-4138-be5b-9ab62cd90351", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Security", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Security/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Templates\"?\n\nAssistant: The template fields of the ApplicationSet `spec` are used to generate Argo CD `Application` resources.\n\nHere's a detailed explanation:\n\n\n## Template fields\nAn Argo CD Application is created by combining the parameters from the generator with fields of the template (via `{{values}}`), and from that a concrete `Application` resource is produced and applied to the cluster.\n\nHere is the template subfield from a Cluster generator:\n\n```\n# (...)\ntemplate:\n  metadata:\n    name: '{{ .nameNormalized }}-guestbook'\n  spec:\n    source:\n      repoURL: https://github.com/infra-team/cluster-deployments.git\n      targetRevision: HEAD\n      path: guestbook/{{ .nameNormalized }}\n    destination:\n      server: '{{ .server }}'\n      namespace: guestbook\n```\n\nFor details on all available parameters (like `.name`, `.nameNormalized`, etc.) please refer to the [Cluster Generator docs](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/).\n\nThe template subfields correspond directly to [the spec of an Argo CD `Application` resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#applications):\n\n- `project` refers to the [Argo CD Project](https://argo-cd.readthedocs.io/en/stable/user-guide/projects/) in use ( `default` may be used here to utilize the default Argo CD Project)\n- `source` defines from which Git repository to extract the desired Application manifests\n  - **repoURL**: URL of the repository (eg `https://github.com/argoproj/argocd-example-apps.git`)\n  - **targetRevision**: Revision (tag/branch/commit) of the repository (eg `HEAD`)\n  - **path**: Path within the repository where Kubernetes manifests (and/or Helm, Kustomize, Jsonnet resources) are located\n- `destination`: Defines which Kubernetes cluster/namespace to deploy to\n  - **name**: Name of the cluster (within Argo CD) to deploy to\n  - **server**: API Server URL for the cluster (Example: `https://kubernetes.default.svc`)\n  - **namespace**: Target namespace in which to deploy the manifests from `source` (Example: `my-app-namespace`)\n\nNote:\n\n- Referenced clusters must already be defined in Argo CD, for the ApplicationSet controller to use them\n- Only **one** of `name` or `server` may be specified: if both are specified, an error is returned.\n- Signature Verification does not work with the templated `project` field when using git generator.\n\nThe `metadata` field of template may also be used to set an Application `name`, or to add labels or annotations to the Application.\n\nWhile the ApplicationSet spec provides a basic form of templating, it is not intended to replace the full-fledged configuration management capabilities of tools such as Kustomize, Helm, or Jsonnet.\n\n## Deploying ApplicationSet resources as part of a Helm chart\nApplicationSet uses the same templating notation as Helm ( `{{}}`). If the ApplicationSet templates aren't written as Helm string literals, Helm will throw an error like `function \"cluster\" not defined`. To avoid that error, write the template as a Helm string literal. For example:\n\n```\n    metadata:\n      name: '{{`{{ .nameNormalized }}`}}-guestbook'\n```\n\nThis _only_ applies if you use Helm to deploy your ApplicationSet resources.\n\n## Generator templates\nIn addition to specifying a template within the `.spec.template` of the `ApplicationSet` resource, templates may also be specified within generators. This is useful for overriding the values of the `spec`-level template.\n\nThe generator's `template` field takes precedence over the `spec`'s template fields:\n\n- If both templates contain the same field, the generator's field value will be used.\n- If only one of those templates' fields has a value, that value will be used.\n\nGenerator templates can thus be thought of as patches against the outer `spec`-level template fields.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n      template:\n        metadata: {}\n        spec:\n          project: \"default\"\n          source:\n            targetRevision: HEAD\n            repoURL: https://github.com/argoproj/argo-cd.git\n            # New path value is generated here:\n            path: 'applicationset/examples/template-override/{{ .nameNormalized }}-override'\n          destination: {}\n\n  template:\n    metadata:\n      name: '{{ .nameNormalized }}-guestbook'\n    spec:\n      project: \"default\"\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        # This 'default' value is not used: it is replaced by the generator's template path, above\n        path: applicationset/examples/template-override/default\n      destination:\n        server: '{{ .server }}'\n        namespace: guestbook\n```\n\n( _The full example can be found [here](https://github.com/argoproj/argo-cd/tree/master/applicationset/examples/template-override)._)\n\nIn this example, the ApplicationSet controller will generate an `Application` resource using the `path` generated by the List generator, rather than the `path` value defined in `.spec.template`.\n\n## Template Patch\nTemplating is only available on string type. However, some use cases may require applying templating on other types.\n\nExample:\n\n- Conditionally set the automated sync policy.\n- Conditionally switch prune boolean to `true`.\n- Add multiple helm value files from a list.\n\nThe `templatePatch` feature enables advanced templating, with support for `json` and `yaml`.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          autoSync: true\n          prune: true\n          valueFiles:\n            - values.large.yaml\n            - values.debug.yaml\n  template:\n    metadata:\n      name: '{{ .nameNormalized }}-deployment'\n    spec:\n      project: \"default\"\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{ .nameNormalized }}\n      destination:\n        server: '{{ .server }}'\n        namespace: guestbook\n  templatePatch: |\n    spec:\n      source:\n        helm:\n          valueFiles:\n          {{- range $valueFile := .valueFiles }}\n            - {{ $valueFile }}\n          {{- end }}\n    {{- if .autoSync }}\n      syncPolicy:\n        automated:\n          prune: {{ .prune }}\n    {{- end }}\n```\n\nImportant\n\nThe `templatePatch` can apply arbitrary changes to the template. If parameters include untrustworthy user input, it may be possible to inject malicious changes into the template. It is recommended to use `templatePatch` only with trusted input or to carefully escape the input before using it in the template. Piping input to `toJson` should help prevent, for example, a user from successfully injecting a string with newlines.\n\nThe `spec.project` field is not supported in `templatePatch`. If you need to change the project, you can use the `spec.project` field in the `template` field.\n\nImportant\n\nWhen writing a `templatePatch`, you're crafting a patch. So, if the patch includes an empty `spec: # nothing in here`, it will effectively clear out existing fields. See [#17040](https://github.com/argoproj/argo-cd/issues/17040) for an example of this behavior.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Template", "title": "Templates", "description": "The template fields of the ApplicationSet `spec` are used to generate Argo CD `Application` resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:57:36", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "Templates - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/applicationset/Template/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b10ee8ca-0586-4b7a-a0f1-172bc49958e8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Template", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Template/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Templates\"?\n\nAssistant: Here are some code examples:\n\n### Cluster generator template\n```yaml\n# (...)\ntemplate:\n  metadata:\n    name: '{{ .nameNormalized }}-guestbook'\n  spec:\n    source:\n      repoURL: https://github.com/infra-team/cluster-deployments.git\n      targetRevision: HEAD\n      path: guestbook/{{ .nameNormalized }}\n    destination:\n      server: '{{ .server }}'\n      namespace: guestbook\n\n```\n\n### Helm string literal example\n```yaml\n    metadata:\n      name: '{{`{{ .nameNormalized }}`}}-guestbook'\n\n```\n\n### ApplicationSet resource example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n      template:\n        metadata: {}\n        spec:\n          project: \"default\"\n          source:\n            targetRevision: HEAD\n            repoURL: https://github.com/argoproj/argo-cd.git\n            # New path value is generated here:\n            path: 'applicationset/examples/template-override/{{ .nameNormalized }}-override'\n          destination: {}\n\n  template:\n    metadata:\n      name: '{{ .nameNormalized }}-guestbook'\n    spec:\n      project: \"default\"\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        # This 'default' value is not used: it is replaced by the generator's template path, above\n        path: applicationset/examples/template-override/default\n      destination:\n        server: '{{ .server }}'\n        namespace: guestbook\n\n```\n\n### Template patch example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  generators:\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          autoSync: true\n          prune: true\n          valueFiles:\n            - values.large.yaml\n            - values.debug.yaml\n  template:\n    metadata:\n      name: '{{ .nameNormalized }}-deployment'\n    spec:\n      project: \"default\"\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{ .nameNormalized }}\n      destination:\n        server: '{{ .server }}'\n        namespace: guestbook\n  templatePatch: |\n    spec:\n      source:\n        helm:\n          valueFiles:\n          {{- range $valueFile := .valueFiles }}\n            - {{ $valueFile }}\n          {{- end }}\n    {{- if .autoSync }}\n      syncPolicy:\n        automated:\n          prune: {{ .prune }}\n    {{- end }}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Template", "title": "Templates", "description": "The template fields of the ApplicationSet `spec` are used to generate Argo CD `Application` resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:57:36", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "Templates - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/applicationset/Template/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b10ee8ca-0586-4b7a-a0f1-172bc49958e8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Template", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Template/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Templates\"?\n\nAssistant: Here are the recommended best practices:\n\n• Referenced clusters must already be defined in Argo CD, for the ApplicationSet controller to use them.\n• Only **one** of `name` or `server` may be specified: if both are specified, an error is returned.\n• Signature Verification does not work with the templated `project` field when using git generator.\n• It is recommended to use `templatePatch` only with trusted input or to carefully escape the input before using it in the template. Piping input to `toJson` should help prevent, for example, a user from successfully injecting a string with newlines.\n• When writing a `templatePatch`, you're crafting a patch. So, if the patch includes an empty `spec: # nothing in here`, it will effectively clear out existing fields.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Template", "title": "Templates", "description": "The template fields of the ApplicationSet `spec` are used to generate Argo CD `Application` resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:57:36", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "Templates - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/applicationset/Template/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b10ee8ca-0586-4b7a-a0f1-172bc49958e8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Template", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Template/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Use cases supported by the ApplicationSet controller\"?\n\nAssistant: With the concept of generators, the ApplicationSet controller provides a powerful set of tools to automate the templating and modification of Argo CD Applications. Generators produce template parameter data from a variety of sources, including Argo CD clusters and Git repositories, supporting and enabling new use cases.\n\nHere's a detailed explanation:\n\n\n## Use case: cluster add-ons\nAn initial design focus of the ApplicationSet controller was to allow an infrastructure team's Kubernetes cluster administrators the ability to automatically create a large, diverse set of Argo CD Applications, across a significant number of clusters, and manage those Applications as a single unit. One example of why this is needed is the _cluster add-on use case_.\n\nIn the _cluster add-on use case_, an administrator is responsible for provisioning cluster add-ons to one or more Kubernetes clusters: cluster-addons are operators such as the [Prometheus operator](https://github.com/prometheus-operator/prometheus-operator), or controllers such as the [argo-workflows controller](https://argoproj.github.io/argo-workflows/) (part of the [Argo ecosystem](https://argoproj.github.io/)).\n\nTypically these add-ons are required by the applications of development teams (as tenants of a multi-tenant cluster, for instance, they may wish to provide metrics data to Prometheus or orchestrate workflows via Argo Workflows).\n\nSince installing these add-ons requires cluster-level permissions not held by individual development teams, installation is the responsibility of the infrastructure/ops team of an organization, and within a large organization this team might be responsible for tens, hundreds, or thousands of Kubernetes clusters (with new clusters being added/modified/removed on a regular basis).\n\nThe need to scale across a large number of clusters, and automatically respond to the lifecycle of new clusters, necessarily mandates some form of automation. A further requirement would be allowing the targeting of add-ons to a subset of clusters using specific criteria (eg staging vs production).\n\n![Cluster add-on diagram](https://argo-cd.readthedocs.io/en/stable/assets/applicationset/Use-Cases/Cluster-Add-Ons.png)\n\nIn this example, the infrastructure team maintains a Git repository containing application manifests for the Argo Workflows controller, and Prometheus operator.\n\nThe infrastructure team would like to deploy both these add-on to a large number of clusters, using Argo CD, and likewise wishes to easily manage the creation/deletion of new clusters.\n\nIn this use case, we may use either the List, Cluster, or Git generators of the ApplicationSet controller to provide the required behaviour:\n\n- _List generator_: Administrators maintain two `ApplicationSet` resources, one for each application (Workflows and Prometheus), and include the list of clusters they wish to target within the List generator elements of each.\n  - With this generator, adding/removing clusters requires manually updating the `ApplicationSet` resource's list elements.\n- _Cluster generator_: Administrators maintain two `ApplicationSet` resources, one for each application (Workflows and Prometheus), and ensure that all new cluster are defined within Argo CD.\n  - Since the Cluster generator automatically detects and targets the clusters defined within Argo CD, [adding/remove a cluster from Argo CD](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters) will automatically cause Argo CD Application resources (for each application) to be created by the ApplicationSet controller.\n- _Git generator_: The Git generator is the most flexible/powerful of the generators, and thus there are a number of different ways to tackle this use case. Here are a couple:\n  - Using the Git generator `files` field: A list of clusters is kept as a JSON file within a Git repository. Updates to the JSON file, through Git commits, cause new clusters to be added/removed.\n  - Using the Git generator `directories` field: For each target cluster, a corresponding directory of that name exists in a Git repository. Adding/modifying a directory, through Git commits, would trigger an update for the cluster that has shares the directory name.\n\nSee the [generators section](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators/) for details on each of the generators.\n\n## Use case: monorepos\nIn the _monorepo use case_, Kubernetes cluster administrators manage the entire state of a single Kubernetes cluster from a single Git repository.\n\nManifest changes merged into the Git repository should automatically deploy to the cluster.\n\n![Monorepo diagram](https://argo-cd.readthedocs.io/en/stable/assets/applicationset/Use-Cases/Monorepos.png)\n\nIn this example, the infrastructure team maintains a Git repository containing application manifests for an Argo Workflows controller, and a Prometheus operator. Independent development teams also have added additional services they wish to deploy to the cluster.\n\nChanges made to the Git repository -- for example, updating the version of a deployed artifact -- should automatically cause that update to be applied to the corresponding Kubernetes cluster by Argo CD.\n\nThe Git generator may be used to support this use case:\n\n- The Git generator `directories` field may be used to specify particular subdirectories (using wildcards) containing the individual applications to deploy.\n- The Git generator `files` field may reference Git repository files containing JSON metadata, with that metadata describing the individual applications to deploy.\n- See the Git generator documentation for more details.\n\n## Use case: self-service of Argo CD Applications on multitenant clusters\nThe _self-service use case_ seeks to allow developers (as the end users of a multitenant Kubernetes cluster) greater flexibility to:\n\n- Deploy multiple applications to a single cluster, in an automated fashion, using Argo CD\n- Deploy to multiple clusters, in an automated fashion, using Argo CD\n- But, in both cases, to empower those developers to be able to do so without needing to involve a cluster administrator (to create the necessarily Argo CD Applications/AppProject resources on their behalf)\n\nOne potential solution to this use case is for development teams to define Argo CD `Application` resources within a Git repository (containing the manifests they wish to deploy), in an [app-of-apps pattern](https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/#app-of-apps-pattern), and for cluster administrators to then review/accept changes to this repository via merge requests.\n\nWhile this might sound like an effective solution, a major disadvantage is that a high degree of trust/scrutiny is needed to accept commits containing Argo CD `Application` spec changes. This is because there are many sensitive fields contained within the `Application` spec, including `project`, `cluster`, and `namespace`. An inadvertent merge might allow applications to access namespaces/clusters where they did not belong.\n\nThus in the self-service use case, administrators desire to only allow some fields of the `Application` spec to be controlled by developers (eg the Git source repository) but not other fields (eg the target namespace, or target cluster, should be restricted).\n\nFortunately, the ApplicationSet controller presents an alternative solution to this use case: cluster administrators may safely create an `ApplicationSet` resource containing a Git generator that restricts deployment of application resources to fixed values with the `template` field, while allowing customization of 'safe' fields by developers, at will.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Use-Cases", "title": "Use cases supported by the ApplicationSet controller", "description": "With the concept of generators, the ApplicationSet controller provides a powerful set of tools to automate the templating and modification of Argo CD Applications. Generators produce template parameter data from a variety of sources, including Argo CD clusters and Git repositories, supporting and enabling new use cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:58:11", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Use Cases - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Use-Cases/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "bab1ee1b-d4d6-4c6c-a59c-1382e03483d1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Use-Cases", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Use-Cases/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Use cases supported by the ApplicationSet controller\"?\n\nAssistant: Here are some code examples:\n\n### Example config.json\n```yaml\n{\n  (...)\n  \"app\": {\n    \"source\": \"https://github.com/argoproj/argo-cd\",\n    \"revision\": \"HEAD\",\n    \"path\": \"applicationset/examples/git-generator-files-discovery/apps/guestbook\"\n  }\n  (...)\n}\n```\n\n### Example ApplicationSet resource\n```yaml\nkind: ApplicationSet\n# (...)\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj/argo-cd.git\n      files:\n      - path: \"apps/**/config.json\"\n  template:\n    spec:\n      project: dev-team-one # project is restricted\n      source:\n        # developers may customize app details using JSON files from above repo URL\n        repoURL: {{.app.source}}\n        targetRevision: {{.app.revision}}\n        path: {{.app.path}}\n      destination:\n        name: production-cluster # cluster is restricted\n        namespace: dev-team-one # namespace is restricted\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Use-Cases", "title": "Use cases supported by the ApplicationSet controller", "description": "With the concept of generators, the ApplicationSet controller provides a powerful set of tools to automate the templating and modification of Argo CD Applications. Generators produce template parameter data from a variety of sources, including Argo CD clusters and Git repositories, supporting and enabling new use cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:58:11", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Use Cases - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Use-Cases/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "bab1ee1b-d4d6-4c6c-a59c-1382e03483d1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Use-Cases", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Use-Cases/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Use cases supported by the ApplicationSet controller\"?\n\nAssistant: Here are the recommended best practices:\n\n• Utilize the ApplicationSet controller to automate the templating and modification of Argo CD Applications.\n• Consider using the Git generator for flexible and powerful management of applications across clusters.\n• Be cautious with sensitive fields in the Application spec to prevent unauthorized access to resources.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Use-Cases", "title": "Use cases supported by the ApplicationSet controller", "description": "With the concept of generators, the ApplicationSet controller provides a powerful set of tools to automate the templating and modification of Argo CD Applications. Generators produce template parameter data from a variety of sources, including Argo CD clusters and Git repositories, supporting and enabling new use cases.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:58:11", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Use Cases - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Use-Cases/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "bab1ee1b-d4d6-4c6c-a59c-1382e03483d1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Use-Cases", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Use-Cases/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"ApplicationSet Specification\"?\n\nAssistant: The following describes all the available fields of an ApplicationSet:\n\nHere's a detailed explanation:\n\n\n## ApplicationSet Specification\nThe following describes all the available fields of an ApplicationSet:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: test-hello-world-appset\n  namespace: argocd\nspec:\n  generators:\n\n    # Using a generator plugin without combining it with Matrix or Merge\n    # Plugins allow you to provide your own generator\n    - plugin:\n      # Specify the configMap where the plugin configuration is located.\n      configMapRef:\n        name: my-plugin\n      # You can pass arbitrary parameters to the plugin. `input.parameters` is a map, but values may be any type.\n      # These parameters will also be available on the generator's output under the `generator.input.parameters` key.\n      input:\n        parameters:\n          key1: \"value1\"\n          key2: \"value2\"\n          list: [\"list\", \"of\", \"values\"]\n          boolean: true\n          map:\n            key1: \"value1\"\n            key2: \"value2\"\n            key3: \"value3\"\n        # You can also attach arbitrary values to the generator's output under the `values` key. These values will be\n        # available in templates under the `values` key.\n        values:\n          value1: something\n        # When using a Plugin generator, the ApplicationSet controller polls every `requeueAfterSeconds` interval (defaulting to every 30 minutes) to detect changes.\n        requeueAfterSeconds: 30\n\n    # to automatically discover repositories within an organization\n    - scmProvider:\n        # Which protocol to clone using.\n        cloneProtocol: ssh\n        # The GitHub mode uses the GitHub API to scan an organization in either github.com or GitHub Enterprise\n        github:\n          # The GitHub organization to scan.\n          organization: myorg\n          # For GitHub Enterprise:\n          api: https://git.example.com/\n          # If true, scan every branch of every repository. If false, scan only the default branch. Defaults to false.\n          allBranches: true\n          # Reference to a Secret containing an access token. (optional)\n          tokenRef:\n            secretName: github-token\n            key: token\n          # (optional) use a GitHub App to access the API instead of a PAT.\n          appSecretName: gh-app-repo-creds\n          #Pass additional key-value pairs via values field\n          values:\n            name: \"{{organization}}-{{repository}}\"\n\n        #The GitLab mode uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.\n        gitlab:\n        #The Gitea mode uses the Gitea API to scan organizations in your instance\n        gitea:\n        #Use the Bitbucket Server API (1.0) to scan repos in a project.\n        bitbucketServer:\n        #Uses the Azure DevOps API to look up eligible repositories\n        azureDevOps:\n        # The Bitbucket mode uses the Bitbucket API V2 to scan a workspace in bitbucket.org\n        bitbucket:\n        #Uses AWS ResourceGroupsTagging and AWS CodeCommit APIs to scan repos across AWS accounts and regionsz\n        awsCodeCommit:\n\n        #Filters allow selecting which repositories to generate for.\n        filters:\n        # Include any repository starting with \"myapp\" AND including a Kustomize config AND labeled with \"deploy-ok\" ...\n        - repositoryMatch: ^myapp\n          pathsExist: [kubernetes/kustomization.yaml]\n          labelMatch: deploy-ok\n        # ... OR include any repository starting with \"otherapp\" AND a Helm folder and doesn't have file disabledrepo.txt.\n        - repositoryMatch: ^otherapp\n          pathsExist: [helm]\n          pathsDoNotExist: [disabledrepo.txt]\n    # matrix 'parent' generator\n    - matrix:\n        generators:\n        # any of the top-level generators may be used here instead.\n\n    # merge 'parent' generator\n    # Use the selector set by both child generators to combine them.\n    - merge:\n        mergeKeys:\n          - server\n          # Note that this would not work with goTemplate enabled,\n          # nested merge keys are not supported there.\n          - values.selector\n        generators:\n          - clusters:\n              values:\n                kafka: 'true'\n                redis: 'false'\n          # For clusters with a specific label, enable Kafka.\n          - clusters:\n              selector:\n                matchLabels:\n                  use-kafka: 'false'\n              values:\n                kafka: 'false'\n          # For a specific cluster, enable Redis.\n          - list:\n              elements:\n                - server: https://2.4.6.8\n                  values.redis: 'true'\n\n  # Determines whether go templating will be used in the `template` field below.\n  goTemplate: true\n  # Optional list of go templating options, see https://pkg.go.dev/text/template#Template.Option\n  # This is only relevant if `goTemplate` is true\n  goTemplateOptions: [\"missingkey=error\"]\n\n  # These fields are identical to the Application spec.\n  # The generator's template field takes precedence over the spec's template fields\n  template:\n    metadata:\n      name: test-hello-world-app\n    spec:\n      project: my-project\n      syncPolicy:\n        automated:\n          selfHeal: true\n        syncOptions:\n        - CreateNamespace=true\n      # defines from which Git repository to extract the desired Application manifests\n      source:\n        - chart: '{{.chart}}'\n        # developers may customize app details using JSON files from above repo URL\n          repoURL: https://github.com/argoproj/argo-cd.git\n          targetRevision: HEAD\n          # Path within the repository where Kubernetes manifests are located\n          path: applicationset/examples/list-generator/guestbook/{{cluster}}\n          helm:\n            useCredentials: \"{{.useCredentials}}\"  # This field may NOT be templated, because it is a boolean field\n          parameters:\n          - name: \"image.tag\"\n            value: \"pull-{{head_sha}}\"\n          - name: \"{{.name}}\"\n            value: \"{{.value}}\"\n          - name: throw-away\n            value: \"{{end}}\"\n      destination:\n        # Only one of name or server may be specified: if both are specified, an error is returned.\n        #  Name of the cluster (within Argo CD) to deploy to\n        name: production-cluster # cluster is restricted\n        #  API Server URL for the cluster\n        server: '{{.url}}'\n        # Target namespace in which to deploy the manifests from source\n        namespace: dev-team-one # namespace is restricted\n\n  # This sync policy pertains to the ApplicationSet, not to the Applications it creates.\n  syncPolicy:\n    # Prevents ApplicationSet controller from modifying or deleting Applications\n    applicationsSync: create-only\n\n    # Prevents ApplicationSet controller from deleting Applications. Update is allowed\n    # applicationsSync: create-update\n\n    # Prevents ApplicationSet controller from modifying Applications. Delete is allowed.\n    # applicationsSync: create-delete\n\n    # Prevent an Application's child resources from being deleted, when the parent Application is deleted\n    preserveResourcesOnDeletion: true\n\n  strategy:\n     # The RollingSync update strategy allows you to group Applications by labels present on the generated Application resources\n     # See documentation for \"Progressive Syncs\"\n     type: RollingSync\n     rollingSync:\n      steps:\n        # Application groups are selected using their labels and matchExpressions\n        - matchExpressions:\n            - key: envLabel\n              operator: In\n              values:\n                - env-dev\n        # maxUpdate: 100%  # if undefined, all applications matched are updated together (default is 100%)\n        - matchExpressions:\n            - key: envLabel\n              operator: In\n              values:\n                - env-qa\n          maxUpdate: 0      # if 0, no matched applications will be synced unless they're synced manually\n        - matchExpressions:\n            - key: envLabel\n              operator: In\n              values:\n                - env-prod\n          maxUpdate: 10%    # maxUpdate supports both integer and percentage string values (rounds down, but floored at 1 Application for >0%)\n\n  # Define annotations and labels of the Application that this ApplicationSet will ignore\n  # ignoreApplicationDifferences is the preferred way to accomplish this now.\n  preservedFields:\n    annotations: [ some-annotation-key ]\n    labels: [ some-label-key ]\n\n  # Define fields of the that should be ignored when comparing Applications\n  ignoreApplicationDifferences:\n  - jsonPointers:\n    - /spec/source/targetRevision\n  - name: some-app\n    jqPathExpressions:\n    - .spec.source.helm.values\n\n  # Cluster-decision-resource-based ApplicationSet generator\n  - clusterDecisionResource:\n    # ConfigMap with GVK information for the duck type resource\n    configMapRef: my-configmap\n    name: quak           # Choose either \"name\" of the resource or \"labelSelector\"\n    labelSelector:\n      matchLabels:       # OPTIONAL\n        duck: spotted\n      matchExpressions:  # OPTIONAL\n      - key: duck\n        operator: In\n        values:\n        - \"spotted\"\n        - \"canvasback\"\n    # OPTIONAL: Checks for changes every 60sec (default 3min)\n    requeueAfterSeconds: 60\n\n  # The Pull Request generator uses the API of an SCMaaS provider to automatically discover open pull requests within a repository\n  - pullRequest:\n      # When using a Pull Request generator, the ApplicationSet controller polls every `requeueAfterSeconds` interval (defaulting to every 30 minutes) to detect changes.\n      requeueAfterSeconds: 1800\n      # See below for provider specific options.\n      # Specify the repository from which to fetch the GitHub Pull requests.\n      github:\n        # The GitHub organization or user.\n        owner: myorg\n        # The Github repository\n        repo: myrepository\n        # For GitHub Enterprise (optional)\n        api: https://git.example.com/\n        # Reference to a Secret containing an access token. (optional)\n        tokenRef:\n          secretName: github-token\n          key: token\n        # (optional) use a GitHub App to access the API instead of a PAT.\n        appSecretName: github-app-repo-creds\n        # Labels is used to filter the PRs that you want to target. (optional)\n        labels:\n        - preview\n\n      # Filters allow selecting which pull requests to generate for\n      # Include any pull request ending with \"argocd\". (optional)\n      filters:\n      - branchMatch: \".*-argocd\"\n\n      # Specify the project from which to fetch the GitLab merge requests.\n      gitlab:\n      # Specify the repository from which to fetch the Gitea Pull requests.\n      gitea:\n      # Fetch pull requests from a repo hosted on a Bitbucket Server (not the same as Bitbucket Cloud).\n      bitbucketServer:\n      # Fetch pull requests from a repo hosted on a Bitbucket Cloud.\n      bitbucket:\n      # Specify the organization, project and repository from which you want to fetch pull requests.\n      azuredevops:\n      # Fetch pull requests from AWS CodeCommit repositories.\n      awsCodeCommit:\n\n# The list generator generates a set of two application which then filter by the key value to only select the env with value staging\n  - list:\n      elements:\n        - cluster: engineering-dev\n          url: https://kubernetes.default.svc\n          env: staging\n        - cluster: engineering-prod\n          url: https://kubernetes.default.svc\n          env: prod\n      # The generator's template field takes precedence over the spec's template fields\n      template:\n        metadata: {}\n        spec:\n          project: \"default\"\n          source:\n            revision: HEAD\n            repoURL: https://github.com/argoproj/argo-cd.git\n            # New path value is generated here:\n            path: 'applicationset/examples/template-override/{{cluster}}-override'\n          destination: {}\n\n    selector:\n      matchLabels:\n        env: staging\n  # It is also possible to use matchExpressions for more powerful selectors\n  - clusters: {}\n    selector:\n      matchExpressions:\n        - key: server\n          operator: In\n          values:\n            - https://kubernetes.default.svc\n            - https://some-other-cluster\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/applicationset-specification", "title": "ApplicationSet Specification", "description": "The following describes all the available fields of an ApplicationSet:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:00:00", "type": "overview", "page_metadata": {"title": "ApplicationSet Specification Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/applicationset-specification/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "cb4166cc-843a-4646-95e2-ef40f843e203", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/applicationset-specification", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/applicationset-specification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"ApplicationSet Specification\"?\n\nAssistant: Here are some code examples:\n\n### ApplicationSet Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: test-hello-world-appset\n  namespace: argocd\nspec:\n  generators:\n    - plugin:\n        configMapRef:\n          name: my-plugin\n        input:\n          parameters:\n            key1: \"value1\"\n            key2: \"value2\"\n            list: [\"list\", \"of\", \"values\"]\n            boolean: true\n            map:\n              key1: \"value1\"\n              key2: \"value2\"\n              key3: \"value3\"\n          values:\n            value1: something\n          requeueAfterSeconds: 30\n    - scmProvider:\n        cloneProtocol: ssh\n        github:\n          organization: myorg\n          api: https://git.example.com/\n          allBranches: true\n          tokenRef:\n            secretName: github-token\n            key: token\n          appSecretName: gh-app-repo-creds\n          values:\n            name: \"{{organization}}-{{repository}}\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/applicationset-specification", "title": "ApplicationSet Specification", "description": "The following describes all the available fields of an ApplicationSet:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:00:00", "type": "code_examples", "page_metadata": {"title": "ApplicationSet Specification Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/applicationset-specification/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "cb4166cc-843a-4646-95e2-ef40f843e203", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/applicationset-specification", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/applicationset-specification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"ApplicationSet Specification\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `goTemplate` field to enable go templating in the `template` field.\n• Set `requeueAfterSeconds` to control how often the ApplicationSet controller polls for changes.\n• Use filters to select specific repositories or pull requests based on naming conventions or labels.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/applicationset-specification", "title": "ApplicationSet Specification", "description": "The following describes all the available fields of an ApplicationSet:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:00:00", "type": "best_practices", "page_metadata": {"title": "ApplicationSet Specification Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/applicationset-specification/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "cb4166cc-843a-4646-95e2-ef40f843e203", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/applicationset-specification", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/applicationset-specification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Notifications Overview\"?\n\nAssistant: Argo CD Notifications continuously monitors Argo CD applications and provides a flexible way to notify users about important changes in the application state.\n\nHere's a detailed explanation:\n\n\n## Getting Started\n- Install Triggers and Templates from the catalog\n\n```\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/notifications_catalog/install.yaml\n```\n\n- Add Email username and password token to `argocd-notifications-secret` secret\n\n```\nEMAIL_USER=<your-username>\nPASSWORD=<your-password>\n\nkubectl apply -n argocd -f - << EOF\napiVersion: v1\nkind: Secret\nmetadata:\n    name: argocd-notifications-secret\nstringData:\n    email-username: $EMAIL_USER\n    email-password: $PASSWORD\ntype: Opaque\nEOF\n```\n\n- Register Email notification service\n\n```\nkubectl patch cm argocd-notifications-cm -n argocd --type merge -p '{\"data\": {\"service.email.gmail\": \"{ username: $email-username, password: $email-password, host: smtp.gmail.com, port: 465, from: $email-username }\" }}'\n```\n\n- Subscribe to notifications by adding the `notifications.argoproj.io/subscribe.on-sync-succeeded.slack` annotation to the Argo CD application or project:\n\n```\nkubectl patch app <my-app> -n argocd -p '{\"metadata\": {\"annotations\": {\"notifications.argoproj.io/subscribe.on-sync-succeeded.slack\":\"<my-channel>\"}}}' --type merge\n```\n\nTry syncing an application to get notified when the sync is completed.\n\n## Namespace based configuration\nA common installation method for Argo CD Notifications is to install it in a dedicated namespace to manage a whole cluster. In this case, the administrator is the only person who can configure notifications in that namespace generally. However, in some cases, it is required to allow end-users to configure notifications for their Argo CD applications. For example, the end-user can configure notifications for their Argo CD application in the namespace where they have access to and their Argo CD application is running in.\n\nThis feature is based on applications in any namespace. See [applications in any namespace](https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/) page for more information.\n\nIn order to enable this feature, the Argo CD administrator must reconfigure the argocd-notification-controller workloads to add `--application-namespaces` and `--self-service-notification-enabled` parameters to the container's startup command.\n`--application-namespaces` controls the list of namespaces that Argo CD applications are in. `--self-service-notification-enabled` turns on this feature.\n\nThe startup parameters for both can also be conveniently set up and kept in sync by specifying the `application.namespaces` and `notificationscontroller.selfservice.enabled` in the argocd-cmd-params-cm ConfigMap instead of changing the manifests for the respective workloads. For example:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n  application.namespaces: app-team-one, app-team-two\n  notificationscontroller.selfservice.enabled: \"true\"\n```\n\nTo use this feature, you can deploy configmap named `argocd-notifications-cm` and possibly a secret `argocd-notifications-secret` in the namespace where the Argo CD application lives.\n\nWhen it is configured this way the controller will send notifications using both the controller level configuration (the configmap located in the same namespaces as the controller) as well as the configuration located in the same namespace where the Argo CD application is at.\n\nExample: Application team wants to receive notifications using PagerDutyV2, when the controller level configuration is only supporting Slack.\n\nThe following two resources are deployed in the namespace where the Argo CD application lives.\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.pagerdutyv2: |\n    serviceKeys:\n      my-service: $pagerduty-key-my-service\n...\n```\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-notifications-secret\ntype: Opaque\ndata:\n  pagerduty-key-my-service: <pd-integration-key>\n```\n\nWhen an Argo CD application has the following subscriptions, user receives application sync failure message from pager duty.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-failed.pagerdutyv2: \"<serviceID for Pagerduty>\"\n```\n\nNote\n\nWhen the same notification service and trigger are defined in controller level configuration and application level configuration, both notifications will be sent according to its own configuration.\n\n[Defining and using secrets within notification templates](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/#defining-and-using-secrets-within-notification-templates) function is not available when flag `--self-service-notification-enable` is on.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications", "title": "Notifications Overview", "description": "Argo CD Notifications continuously monitors Argo CD applications and provides a flexible way to notify users about important changes in the application state.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:00:22", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/operator-manual/notifications/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "c86e41b8-9697-4aae-a1c3-5a09de393eab", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Notifications Overview\"?\n\nAssistant: Here are some code examples:\n\n### Install Triggers and Templates from the catalog\n```yaml\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/notifications_catalog/install.yaml\n```\n\n### Add Email username and password token to argocd-notifications-secret secret\n```yaml\nEMAIL_USER=<your-username>\nPASSWORD=<your-password>\n\nkubectl apply -n argocd -f - << EOF\napiVersion: v1\nkind: Secret\nmetadata:\n    name: argocd-notifications-secret\nstringData:\n    email-username: $EMAIL_USER\n    email-password: $PASSWORD\ntype: Opaque\nEOF\n```\n\n### Register Email notification service\n```yaml\nkubectl patch cm argocd-notifications-cm -n argocd --type merge -p '{\"data\": {\"service.email.gmail\": \"{ username: $email-username, password: $email-password, host: smtp.gmail.com, port: 465, from: $email-username }\" }}'\n```\n\n### Subscribe to notifications\n```yaml\nkubectl patch app <my-app> -n argocd -p '{\"metadata\": {\"annotations\": {\"notifications.argoproj.io/subscribe.on-sync-succeeded.slack\":\"<my-channel>\"}}}' --type merge\n```\n\n### ConfigMap for application namespaces and self-service notifications\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n  application.namespaces: app-team-one, app-team-two\n  notificationscontroller.selfservice.enabled: \"true\"\n```\n\n### ConfigMap for PagerDutyV2 notifications\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.pagerdutyv2: |\n    serviceKeys:\n      my-service: $pagerduty-key-my-service\n...\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications", "title": "Notifications Overview", "description": "Argo CD Notifications continuously monitors Argo CD applications and provides a flexible way to notify users about important changes in the application state.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:00:22", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/operator-manual/notifications/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "c86e41b8-9697-4aae-a1c3-5a09de393eab", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Notifications Overview\"?\n\nAssistant: Here are the recommended best practices:\n\n• When the same notification service and trigger are defined in controller level configuration and application level configuration, both notifications will be sent according to its own configuration.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications", "title": "Notifications Overview", "description": "Argo CD Notifications continuously monitors Argo CD applications and provides a flexible way to notify users about important changes in the application state.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:00:22", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/operator-manual/notifications/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "c86e41b8-9697-4aae-a1c3-5a09de393eab", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Functions\"?\n\nAssistant: Time related functions.\n\nHere's a detailed explanation:\n\n\n## time\nTime related functions.\n\n* * *\n\n**`time.Now() Time`**\n\nExecutes function built-in Golang [time.Now](https://golang.org/pkg/time/#Now) function. Returns an instance of Golang [Time](https://golang.org/pkg/time/#Time).\n\n* * *\n\n**`time.Parse(val string) Time`**\n\nParses specified string using RFC3339 layout. Returns an instance of Golang [Time](https://golang.org/pkg/time/#Time).\n\n* * *\n\nTime related constants.\n\n**Durations**\n\n```\n    time.Nanosecond   = 1\n    time.Microsecond  = 1000 * Nanosecond\n    time.Millisecond  = 1000 * Microsecond\n    time.Second       = 1000 * Millisecond\n    time.Minute       = 60 * Second\n    time.Hour         = 60 * Minute\n```\n\n**Timestamps**\n\nUsed when formatting time instances as strings (e.g. `time.Now().Format(time.RFC3339)`).\n\n```\n    time.Layout      = \"01/02 03:04:05PM '06 -0700\" // The reference time, in numerical order.\n    time.ANSIC       = \"Mon Jan _2 15:04:05 2006\"\n    time.UnixDate    = \"Mon Jan _2 15:04:05 MST 2006\"\n    time.RubyDate    = \"Mon Jan 02 15:04:05 -0700 2006\"\n    time.RFC822      = \"02 Jan 06 15:04 MST\"\n    time.RFC822Z     = \"02 Jan 06 15:04 -0700\" // RFC822 with numeric zone\n    time.RFC850      = \"Monday, 02-Jan-06 15:04:05 MST\"\n    time.RFC1123     = \"Mon, 02 Jan 2006 15:04:05 MST\"\n    time.RFC1123Z    = \"Mon, 02 Jan 2006 15:04:05 -0700\" // RFC1123 with numeric zone\n    time.RFC3339     = \"2006-01-02T15:04:05Z07:00\"\n    time.RFC3339Nano = \"2006-01-02T15:04:05.999999999Z07:00\"\n    time.Kitchen     = \"3:04PM\"\n    // Handy time stamps.\n    time.Stamp      = \"Jan _2 15:04:05\"\n    time.StampMilli = \"Jan _2 15:04:05.000\"\n    time.StampMicro = \"Jan _2 15:04:05.000000\"\n    time.StampNano  = \"Jan _2 15:04:05.000000000\"\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/functions", "title": "Functions", "description": "Time related functions.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:05:10", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/functions/", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Functions - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "37e9ec43-bab5-4c09-8b28-40779c28aa13", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/functions", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/functions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Functions\"?\n\nAssistant: Here are some code examples:\n\n### Durations\n```yaml\n```\n    time.Nanosecond   = 1\n    time.Microsecond  = 1000 * Nanosecond\n    time.Millisecond  = 1000 * Microsecond\n    time.Second       = 1000 * Millisecond\n    time.Minute       = 60 * Second\n    time.Hour         = 60 * Minute\n```\n```\n\n### Timestamps\n```yaml\n```\n    time.Layout      = \"01/02 03:04:05PM '06 -0700\" // The reference time, in numerical order.\n    time.ANSIC       = \"Mon Jan _2 15:04:05 2006\"\n    time.UnixDate    = \"Mon Jan _2 15:04:05 MST 2006\"\n    time.RubyDate    = \"Mon Jan 02 15:04:05 -0700 2006\"\n    time.RFC822      = \"02 Jan 06 15:04 MST\"\n    time.RFC822Z     = \"02 Jan 06 15:04 -0700\" // RFC822 with numeric zone\n    time.RFC850      = \"Monday, 02-Jan-06 15:04:05 MST\"\n    time.RFC1123     = \"Mon, 02 Jan 2006 15:04:05 MST\"\n    time.RFC1123Z    = \"Mon, 02 Jan 2006 15:04:05 -0700\" // RFC1123 with numeric zone\n    time.RFC3339     = \"2006-01-02T15:04:05Z07:00\"\n    time.RFC3339Nano = \"2006-01-02T15:04:05.999999999Z07:00\"\n    time.Kitchen     = \"3:04PM\"\n    // Handy time stamps.\n    time.Stamp      = \"Jan _2 15:04:05\"\n    time.StampMilli = \"Jan _2 15:04:05.000\"\n    time.StampMicro = \"Jan _2 15:04:05.000000\"\n    time.StampNano  = \"Jan _2 15:04:05.000000000\"\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/functions", "title": "Functions", "description": "Time related functions.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:05:10", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/functions/", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Functions - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "37e9ec43-bab5-4c09-8b28-40779c28aa13", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/functions", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/functions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Monitoring\"?\n\nAssistant: The Argo CD Notification controller serves Prometheus metrics on port 9001.\n\nHere's a detailed explanation:\n\n\n## Metrics\nThe following metrics are available:\n\n### `argocd_notifications_deliveries_total`\nNumber of delivered notifications.\nLabels:\n\n- `trigger` \\- trigger name\n- `service` \\- notification service name\n- `succeeded` \\- flag that indicates if notification was successfully sent or failed\n\n### `argocd_notifications_trigger_eval_total`\nNumber of trigger evaluations.\nLabels:\n\n- `name` \\- trigger name\n- `triggered` \\- flag that indicates if trigger condition returned true of false\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/monitoring", "title": "Monitoring", "description": "The Argo CD Notification controller serves Prometheus metrics on port 9001.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:05:22", "type": "overview", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Monitoring - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/notifications/monitoring/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "a8ec031a-1e61-4998-a8b0-97c07e988b9f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/monitoring", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/monitoring/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Monitoring\"?\n\nAssistant: Here are some code examples:\n\n### Grafana Dashboard\n```yaml\n[grafana-dashboard.json](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/grafana-dashboard.json)\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/monitoring", "title": "Monitoring", "description": "The Argo CD Notification controller serves Prometheus metrics on port 9001.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:05:22", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Monitoring - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/notifications/monitoring/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "a8ec031a-1e61-4998-a8b0-97c07e988b9f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/monitoring", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/monitoring/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Monitoring\"?\n\nAssistant: Here are the recommended best practices:\n\n• The metrics port can be changed using the `--metrics-port` flag in `argocd-notifications-controller` deployment.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/monitoring", "title": "Monitoring", "description": "The Argo CD Notification controller serves Prometheus metrics on port 9001.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:05:22", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Monitoring - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/notifications/monitoring/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "a8ec031a-1e61-4998-a8b0-97c07e988b9f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/monitoring", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/monitoring/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Subscriptions\"?\n\nAssistant: The subscription to Argo CD application events can be defined using notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient> annotation.\n\nHere's a detailed explanation:\n\n\n## Default Subscriptions\nThe subscriptions might be configured globally in the argocd-notifications-cm ConfigMap using the subscriptions field. The default subscriptions are applied to all applications. The trigger and applications might be configured using the triggers and selector fields:\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions", "title": "Subscriptions", "description": "The subscription to Argo CD application events can be defined using notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient> annotation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:05:59", "type": "overview", "page_metadata": {"title": "Subscriptions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/subscriptions/", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "eec7e6e5-f3d3-4200-9d82-fcdde660987b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Subscriptions\"?\n\nAssistant: Here are some code examples:\n\n### Application Subscription Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: my-channel1;my-channel2\n\n```\n\n### AppProject Subscription Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: my-channel1;my-channel2\n\n```\n\n### Global ConfigMap Subscription Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  # Contains centrally managed global application subscriptions\n  subscriptions: |\n    # subscription for on-sync-status-unknown trigger notifications\n    - recipients:\n      - slack:test2\n      - email:test@gmail.com\n      triggers:\n      - on-sync-status-unknown\n    # subscription restricted to applications with matching labels only\n    - recipients:\n      - slack:test3\n      selector: test=true\n      triggers:\n      - on-sync-status-unknown\n\n```\n\n### Webhook Subscription Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.<webhook-name>: |\n    (snip)\n  subscriptions: |\n    - recipients:\n      - <webhook-name>\n      triggers:\n      - on-sync-status-unknown\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions", "title": "Subscriptions", "description": "The subscription to Argo CD application events can be defined using notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient> annotation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:05:59", "type": "code_examples", "page_metadata": {"title": "Subscriptions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/subscriptions/", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "eec7e6e5-f3d3-4200-9d82-fcdde660987b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Subscriptions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use semicolon separated lists for multiple recipients in subscriptions.\n• Configure global subscriptions in the argocd-notifications-cm ConfigMap for centralized management.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions", "title": "Subscriptions", "description": "The subscription to Argo CD application events can be defined using notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient> annotation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:05:59", "type": "best_practices", "page_metadata": {"title": "Subscriptions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/subscriptions/", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "eec7e6e5-f3d3-4200-9d82-fcdde660987b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Templates\"?\n\nAssistant: The notification template is used to generate the notification content and is configured in the argocd-notifications-cm ConfigMap. The template is leveraging the html/template golang package and allows customization of the notification message. Templates are meant to be reusable and can be referenced by multiple triggers.\n\nHere's a detailed explanation:\n\n\n## Defining user-defined context\nIt is possible to define some shared context between all notification templates by setting a top-level YAML document of key-value pairs, which can then be used within templates, like so:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  context: |\n    region: east\n    environmentName: staging\n\n  template.a-slack-template-with-context: |\n    message: \"Something happened in {{ .context.environmentName }} in the {{ .context.region }} data center!\"\n```\n\n## Defining and using secrets within notification templates\nSome notification service use cases will require the use of secrets within templates. This can be achieved with the use of the secrets data variable available within the templates.\n\nGiven that we have the following argocd-notifications-secret:\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-notifications-secret\nstringData:\n  sampleWebhookToken: secret-token\ntype: Opaque\n```\n\nWe can use the defined sampleWebhookToken in a template as such:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.trigger-webhook: |\n      webhook:\n        sample-webhook:\n          method: POST\n          path: 'webhook/endpoint/with/auth'\n          body: 'token={{ .secrets.sampleWebhookToken }}&variables[APP_SOURCE_PATH]={{ .app.spec.source.path }}\n```\n\n## Notification Service Specific Fields\nThe message field of the template definition allows creating a basic notification for any notification service. You can leverage notification service-specific fields to create complex notifications. For example using service-specific you can add blocks and attachments for Slack, subject for Email or URL path, and body for Webhook.\nSee corresponding service documentation for more information.\n\n## Change the timezone\nYou can change the timezone to show in notifications as follows.\n\n1. Call time functions.\n\n```\n{{ (call .time.Parse .app.status.operationState.startedAt).Local.Format \"2006-01-02T15:04:05Z07:00\" }}\n```\n\n2. Set the TZ environment variable on the argocd-notifications-controller container.\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n     name: argocd-notifications-controller\nspec:\n     template:\n       spec:\n         containers:\n      - name: argocd-notifications-controller\n        env:\n        - name: TZ\n          value: Asia/Tokyo\n```\n\n## Functions\nTemplates have access to the set of built-in functions such as the functions of the Sprig package\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\nname: argocd-notifications-cm\ndata:\ntemplate.my-custom-template-slack-template: |\n    message: \"Author: {{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}\"\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates", "title": "Templates", "description": "The notification template is used to generate the notification content and is configured in the argocd-notifications-cm ConfigMap. The template is leveraging the html/template golang package and allows customization of the notification message. Templates are meant to be reusable and can be referenced by multiple triggers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:06:16", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/notifications/templates/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "title": "Templates - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "ed34c0a1-2cb8-402d-9c8a-9df1602ede87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Templates\"?\n\nAssistant: Here are some code examples:\n\n### Basic Notification Template\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.my-custom-template-slack-template: |\n    message: |\n      Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}.\n      Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n```\n\n### User-defined Context Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  context: |\n    region: east\n    environmentName: staging\n\n  template.a-slack-template-with-context: |\n    message: \"Something happened in {{ .context.environmentName }} in the {{ .context.region }} data center!\"\n```\n\n### Using Secrets in Templates\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.trigger-webhook: |\n      webhook:\n        sample-webhook:\n          method: POST\n          path: 'webhook/endpoint/with/auth'\n          body: 'token={{ .secrets.sampleWebhookToken }}&variables[APP_SOURCE_PATH]={{ .app.spec.source.path }}\n```\n\n### Change Timezone Example\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n     name: argocd-notifications-controller\nspec:\n     template:\n       spec:\n         containers:\n      - name: argocd-notifications-controller\n        env:\n        - name: TZ\n          value: Asia/Tokyo\n```\n\n### Using Built-in Functions\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\nname: argocd-notifications-cm\ndata:\ntemplate.my-custom-template-slack-template: |\n    message: \"Author: {{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates", "title": "Templates", "description": "The notification template is used to generate the notification content and is configured in the argocd-notifications-cm ConfigMap. The template is leveraging the html/template golang package and allows customization of the notification message. Templates are meant to be reusable and can be referenced by multiple triggers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:06:16", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/notifications/templates/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "title": "Templates - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "ed34c0a1-2cb8-402d-9c8a-9df1602ede87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Templates\"?\n\nAssistant: Here are the recommended best practices:\n\n• Templates are meant to be reusable and can be referenced by multiple triggers.\n• Leverage notification service-specific fields to create complex notifications.\n• Define shared context between all notification templates for better organization.\n• Use secrets carefully to manage sensitive data in templates.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates", "title": "Templates", "description": "The notification template is used to generate the notification content and is configured in the argocd-notifications-cm ConfigMap. The template is leveraging the html/template golang package and allows customization of the notification message. Templates are meant to be reusable and can be referenced by multiple triggers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:06:16", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/notifications/templates/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "title": "Templates - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "ed34c0a1-2cb8-402d-9c8a-9df1602ede87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Triggers\"?\n\nAssistant: The trigger defines the condition when the notification should be sent. The definition includes name, condition and notification templates reference. The condition is a predicate expression that returns true if the notification should be sent. The trigger condition evaluation is powered by antonmedv/expr.\n\nHere's a detailed explanation:\n\n\n## Conditions Bundles\nTriggers are typically managed by administrators and encapsulate information about when and which notification should be sent. The end users just need to subscribe to the trigger and specify the notification destination. In order to improve user experience triggers might include multiple conditions with a different set of templates for each condition. For example, the following trigger covers all stages of sync status operation and use a different template for different cases:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  trigger.sync-operation-change: |\n    - when: app.status.operationState.phase in ['Succeeded']\n      send: [github-commit-status]\n    - when: app.status.operationState.phase in ['Running']\n      send: [github-commit-status]\n    - when: app.status.operationState.phase in ['Error', 'Failed']\n      send: [app-sync-failed, github-commit-status]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers", "title": "Triggers", "description": "The trigger defines the condition when the notification should be sent. The definition includes name, condition and notification templates reference. The condition is a predicate expression that returns true if the notification should be sent. The trigger condition evaluation is powered by antonmedv/expr.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:06:40", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/triggers/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Triggers - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "scrapeId": "47bb62e3-516f-4d3b-89ce-c3d78405d900", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Triggers\"?\n\nAssistant: Here are some code examples:\n\n### Trigger on Sync Status Unknown\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  trigger.on-sync-status-unknown: |\n    - when: app.status.sync.status == 'Unknown'     # trigger condition\n      send: [app-sync-status, github-commit-status] # template names\n\n```\n\n### Trigger Sync Operation Change\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  trigger.sync-operation-change: |\n    - when: app.status.operationState.phase in ['Succeeded']\n      send: [github-commit-status]\n    - when: app.status.operationState.phase in ['Running']\n      send: [github-commit-status]\n    - when: app.status.operationState.phase in ['Error', 'Failed']\n      send: [app-sync-failed, github-commit-status]\n\n```\n\n### Trigger on Deployed\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  trigger.on-deployed: |\n    when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'\n    oncePer: app.status.sync.revision\n    send: [app-sync-succeeded]\n\n```\n\n### Default Triggers\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  defaultTriggers: |\n    - on-sync-status-unknown\n\n  defaultTriggers.mattermost: |\n    - on-sync-running\n    - on-sync-succeeded\n\n```\n\n### Functions Example\n```yaml\nwhen: time.Now().Sub(time.Parse(app.status.operationState.startedAt)).Minutes() >= 5\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers", "title": "Triggers", "description": "The trigger defines the condition when the notification should be sent. The definition includes name, condition and notification templates reference. The condition is a predicate expression that returns true if the notification should be sent. The trigger condition evaluation is powered by antonmedv/expr.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:06:40", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/triggers/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Triggers - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "scrapeId": "47bb62e3-516f-4d3b-89ce-c3d78405d900", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Triggers\"?\n\nAssistant: Here are the recommended best practices:\n\n• In some cases, the trigger condition might be \"flapping\". The `oncePer` field configures triggers to generate the notification only when the corresponding application field changes.\n• For mono repos, the better approach will be using `oncePer: app.status.operationState.syncResult.revision` statement. This way a notification will be sent only for a particular Application's revision.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers", "title": "Triggers", "description": "The trigger defines the condition when the notification should be sent. The definition includes name, condition and notification templates reference. The condition is a predicate expression that returns true if the notification should be sent. The trigger condition evaluation is powered by antonmedv/expr.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:06:40", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/triggers/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Triggers - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "scrapeId": "47bb62e3-516f-4d3b-89ce-c3d78405d900", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Troubleshooting commands\"?\n\nAssistant: This page covers troubleshooting commands for Argo CD notifications, including how to get templates, notify recipients, and manage triggers.\n\nHere's a detailed explanation:\n\n\n## argocd admin notifications template get\nPrints information about configured templates\n\n```\nargocd admin notifications template get [flags]\n```\n\n### Examples\n```\n# prints all templates\nargocd admin notifications template get\n# print YAML formatted app-sync-succeeded template definition\nargocd admin notifications template get app-sync-succeeded -o=yaml\n```\n\n### Options\n```\n  -h, --help            help for get\n  -o, --output string   Output format. One of:json|yaml|wide|name (default \"wide\")\n```\n\n### Options inherited from parent commands\n```\n      --argocd-repo-server string       Argo CD repo server address (default \"argocd-repo-server:8081\")\n      --argocd-repo-server-plaintext    Use a plaintext client (non-TLS) to connect to repository server\n      --argocd-repo-server-strict-tls   Perform strict validation of TLS certificates when connecting to repo server\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config-map string               argocd-notifications-cm.yaml file path\n      --context string                  The name of the kubeconfig context to use\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --secret string                   argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty'\n      --server string                   The address and port of the Kubernetes API server\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n## argocd admin notifications template notify\nGenerates notification using the specified template and send it to specified recipients\n\n```\nargocd admin notifications template notify NAME RESOURCE_NAME [flags]\n```\n\n### Examples\n```\n# Trigger notification using in-cluster config map and secret\nargocd admin notifications template notify app-sync-succeeded guestbook --recipient slack:my-slack-channel\n\n# Render notification render generated notification in console\nargocd admin notifications template notify app-sync-succeeded guestbook\n```\n\n### Options\n```\n  -h, --help                    help for notify\n      --recipient stringArray   List of recipients (default [console:stdout])\n```\n\n### Options inherited from parent commands\n```\n      --argocd-repo-server string       Argo CD repo server address (default \"argocd-repo-server:8081\")\n      --argocd-repo-server-plaintext    Use a plaintext client (non-TLS) to connect to repository server\n      --argocd-repo-server-strict-tls   Perform strict validation of TLS certificates when connecting to repo server\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config-map string               argocd-notifications-cm.yaml file path\n      --context string                  The name of the kubeconfig context to use\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --secret string                   argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty'\n      --server string                   The address and port of the Kubernetes API server\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n## argocd admin notifications trigger get\nPrints information about configured triggers\n\n```\nargocd admin notifications trigger get [flags]\n```\n\n### Examples\n```\n# prints all triggers\nargocd admin notifications trigger get\n# print YAML formatted on-sync-failed trigger definition\nargocd admin notifications trigger get on-sync-failed -o=yaml\n```\n\n### Options\n```\n  -h, --help            help for get\n  -o, --output string   Output format. One of:json|yaml|wide|name (default \"wide\")\n```\n\n### Options inherited from parent commands\n```\n      --argocd-repo-server string       Argo CD repo server address (default \"argocd-repo-server:8081\")\n      --argocd-repo-server-plaintext    Use a plaintext client (non-TLS) to connect to repository server\n      --argocd-repo-server-strict-tls   Perform strict validation of TLS certificates when connecting to repo server\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config-map string               argocd-notifications-cm.yaml file path\n      --context string                  The name of the kubeconfig context to use\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --secret string                   argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty'\n      --server string                   The address and port of the Kubernetes API server\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n## argocd admin notifications trigger run\nEvaluates specified trigger condition and prints the result\n\n```\nargocd admin notifications trigger run NAME RESOURCE_NAME [flags]\n```\n\n### Examples\n```\n# Execute trigger configured in 'argocd-notification-cm' ConfigMap\nargocd admin notifications trigger run on-sync-status-unknown ./sample-app.yaml\n\n# Execute trigger using my-config-map.yaml instead of 'argocd-notifications-cm' ConfigMap\nargocd admin notifications trigger run on-sync-status-unknown ./sample-app.yaml \\\n    --config-map ./my-config-map.yaml\n```\n\n### Options\n```\n  -h, --help   help for run\n```\n\n### Options inherited from parent commands\n```\n      --argocd-repo-server string       Argo CD repo server address (default \"argocd-repo-server:8081\")\n      --argocd-repo-server-plaintext    Use a plaintext client (non-TLS) to connect to repository server\n      --argocd-repo-server-strict-tls   Perform strict validation of TLS certificates when connecting to repo server\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config-map string               argocd-notifications-cm.yaml file path\n      --context string                  The name of the kubeconfig context to use\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --secret string                   argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty'\n      --server string                   The address and port of the Kubernetes API server\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-commands", "title": "Troubleshooting commands", "description": "This page covers troubleshooting commands for Argo CD notifications, including how to get templates, notify recipients, and manage triggers.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 01:07:33", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Troubleshooting commands - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/notifications/troubleshooting-commands/", "scrapeId": "1f7b6275-398b-42b1-8f25-aca6b5f3f1ec", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-commands", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-commands/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Troubleshooting commands\"?\n\nAssistant: Here are some code examples:\n\n### argocd admin notifications template get\n```yaml\nargocd admin notifications template get\n```\n\n### argocd admin notifications template get app-sync-succeeded\n```yaml\nargocd admin notifications template get app-sync-succeeded -o=yaml\n```\n\n### argocd admin notifications template notify\n```yaml\nargocd admin notifications template notify app-sync-succeeded guestbook --recipient slack:my-slack-channel\n```\n\n### argocd admin notifications template notify render\n```yaml\nargocd admin notifications template notify app-sync-succeeded guestbook\n```\n\n### argocd admin notifications trigger get\n```yaml\nargocd admin notifications trigger get\n```\n\n### argocd admin notifications trigger get on-sync-failed\n```yaml\nargocd admin notifications trigger get on-sync-failed -o=yaml\n```\n\n### argocd admin notifications trigger run\n```yaml\nargocd admin notifications trigger run on-sync-status-unknown ./sample-app.yaml\n```\n\n### argocd admin notifications trigger run with custom config map\n```yaml\nargocd admin notifications trigger run on-sync-status-unknown ./sample-app.yaml --config-map ./my-config-map.yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-commands", "title": "Troubleshooting commands", "description": "This page covers troubleshooting commands for Argo CD notifications, including how to get templates, notify recipients, and manage triggers.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 01:07:33", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Troubleshooting commands - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/notifications/troubleshooting-commands/", "scrapeId": "1f7b6275-398b-42b1-8f25-aca6b5f3f1ec", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-commands", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-commands/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Troubleshooting errors\"?\n\nAssistant: This page covers common errors encountered when configuring notifications in Argo CD and how to resolve them.\n\nHere's a detailed explanation:\n\n\n## Failed to parse new settings\n### error converting YAML to JSON\nYAML syntax is incorrect.\n\n**incorrect:**\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: $slack-token\n    icon: :rocket:\n```\n\n**correct:**\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: $slack-token\n    icon: \":rocket:\" # <- diff here\n```\n\n### service type 'xxxx' is not supported\nCheck the `argocd-notifications` controller version. For example, the Teams integration support started in `v1.1.0`.\n\n## Failed to notify recipient\n### notification service 'xxxx' is not supported\nYou have not defined `xxxx` in `argocd-notifications-cm` or parsing failed.\n\n### GitHub.repoURL (\\u003cno value\\u003e) does not have a / using the configuration\nLikely caused by an Application with [multiple sources](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/):\n```\nspec:\n  sources:  # <- multiple sources\n  - repoURL: https://github.com/exampleOrg/first.git\n    path: sources/example\n  - repoURL: https://github.com/exampleOrg/second.git\n    targetRevision: \"{{branch}}\"\n```\nThe standard notification template only supports a single source ( `{{.app.spec.source.repoURL}}`). Use an index to specify the source in the array:\n```\ntemplate.example: |\n  github:\n    repoURLPath: \"{{ (index .app.spec.sources 0).repoURL }}\"\n```\n\n### Error message `POST https://api.github.com/repos/xxxx/yyyy/statuses/: 404 Not Found`\nThis case is similar to the previous one, you have multiple sources in the Application manifest.\nDefault `revisionPath` template `{{.app.status.operationState.syncResult.revision}}` is for an Application with single source.\nMulti-source applications report application statuses in an array:\n````\nstatus:\n  operationState:\n    syncResult:\n      revisions:\n        - 38cfa22edf9148caabfecb288bfb47dc4352dfc6\n        - 38cfa22edf9148caabfecb288bfb47dc4352dfc6\nQuick fix for this is to use `index` function to get the first revision:\n```yaml\ntemplate.example: |\ngithub:\n    revisionPath: \"{{index .app.status.operationState.syncResult.revisions 0}}\"\n````\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-errors", "title": "Troubleshooting errors", "description": "This page covers common errors encountered when configuring notifications in Argo CD and how to resolve them.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:07:53", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/notifications/troubleshooting-errors/", "title": "Troubleshooting errors - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "bab0920e-e7ab-4807-b7a6-aab905582d23", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-errors", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-errors/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Troubleshooting errors\"?\n\nAssistant: Here are some code examples:\n\n### Incorrect YAML Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: $slack-token\n    icon: :rocket:\n\n```\n\n### Correct YAML Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: $slack-token\n    icon: \":rocket:\" # <- diff here\n\n```\n\n### Multiple Sources Example\n```yaml\nspec:\n  sources:  # <- multiple sources\n  - repoURL: https://github.com/exampleOrg/first.git\n    path: sources/example\n  - repoURL: https://github.com/exampleOrg/second.git\n    targetRevision: \"{{branch}}\"\n\n```\n\n### Notification Template Example\n```yaml\ntemplate.example: |\n  github:\n    repoURLPath: \"{{ (index .app.spec.sources 0).repoURL }}\"\n\n```\n\n### Application Status Example\n```yaml\nstatus:\n  operationState:\n    syncResult:\n      revisions:\n        - 38cfa22edf9148caabfecb288bfb47dc4352dfc6\n        - 38cfa22edf9148caabfecb288bfb47dc4352dfc6\n\n```\n\n### Revision Path Template Example\n```yaml\ntemplate.example: |\n  github:\n    revisionPath: \"{{index .app.status.operationState.syncResult.revisions 0}}\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-errors", "title": "Troubleshooting errors", "description": "This page covers common errors encountered when configuring notifications in Argo CD and how to resolve them.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:07:53", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/notifications/troubleshooting-errors/", "title": "Troubleshooting errors - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "bab0920e-e7ab-4807-b7a6-aab905582d23", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-errors", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-errors/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Troubleshooting errors\"?\n\nAssistant: Here are the recommended best practices:\n\n• Check the `argocd-notifications` controller version for service type support.\n• Ensure that the secret is in the same namespace as the application.\n• Add the label: `app.kubernetes.io/part-of: argocd` to the secret.\n• Restart the `argocd-notifications` controller if issues persist.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-errors", "title": "Troubleshooting errors", "description": "This page covers common errors encountered when configuring notifications in Argo CD and how to resolve them.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:07:53", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/notifications/troubleshooting-errors/", "title": "Troubleshooting errors - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "bab0920e-e7ab-4807-b7a6-aab905582d23", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-errors", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting-errors/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Troubleshooting\"?\n\nAssistant: `argocd admin notifications` is a CLI command group that helps to configure the controller settings and troubleshoot issues.\n\nHere's a detailed explanation:\n\n\n## Global flags\nThe following global flags are available for all sub-commands:\n\n- `--config-map` \\- path to the file containing `argocd-notifications-cm` ConfigMap. If not specified then the command loads `argocd-notification-cm` ConfigMap using the local Kubernetes config file.\n- `--secret` \\- path to the file containing `argocd-notifications-secret` ConfigMap. If not specified then the command loads `argocd-notification-secret` Secret using the local Kubernetes config file. Additionally, you can specify `:empty` to use empty secret with no notification service settings.\n\n**Examples:**\n\n- Get a list of triggers configured in the local config map:\n\n```\nargocd admin notifications trigger get \\\n    --config-map ./argocd-notifications-cm.yaml --secret :empty\n```\n\n- Trigger notification using in-cluster config map and secret:\n\n```\nargocd admin notifications template notify \\\n    app-sync-succeeded guestbook --recipient slack:argocd admin notifications\n```\n\n## Kustomize\nIf you are managing `argocd-notifications` config using Kustomize you can pipe whole `kustomize build` output into stdin using `--config-map -` flag:\n\n```\nkustomize build ./argocd-notifications | \\\n  argocd-notifications \\\n  template notify app-sync-succeeded guestbook --recipient grafana:argocd \\\n  --config-map -\n```\n\n## How to get it\n### On your laptop\n\nYou can download the `argocd` CLI from the GitHub [release](https://github.com/argoproj/argo-cd/releases) attachments.\n\nThe binary is available in the `quay.io/argoproj/argocd` image. Use the `docker run` and volume mount to execute binary on any platform.\n\n**Example:**\n\n```\ndocker run --rm -it -w /src -v $(pwd):/src \\\n  quay.io/argoproj/argocd:<version> \\\n  /app/argocd admin notifications trigger get \\\n  --config-map ./argocd-notifications-cm.yaml --secret :empty\n```\n\n### In your cluster\n\nSSH into the running `argocd-notifications-controller` pod and use `kubectl exec` command to validate in-cluster configuration.\n\n**Example**\n\n```\nkubectl exec -it argocd-notifications-controller-<pod-hash> \\\n  /usr/local/bin/argocd admin notifications trigger get\n```\n\n## Commands\nThe following commands may help debug issues with notifications:\n\n- [`argocd admin notifications template get`](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_get/)\n- [`argocd admin notifications template notify`](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_notify/)\n- [`argocd admin notifications trigger get`](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_get/)\n- [`argocd admin notifications trigger run`](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_run/)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting", "title": "Troubleshooting", "description": "`argocd admin notifications` is a CLI command group that helps to configure the controller settings and troubleshoot issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:08:51", "type": "overview", "page_metadata": {"language": "en", "title": "Troubleshooting - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/notifications/troubleshooting/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "ea9f7e7a-1135-43bc-9feb-115c3e905c23", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Troubleshooting\"?\n\nAssistant: Here are some code examples:\n\n### Get a list of triggers configured in the local config map\n```yaml\nargocd admin notifications trigger get \\\n    --config-map ./argocd-notifications-cm.yaml --secret :empty\n```\n\n### Trigger notification using in-cluster config map and secret\n```yaml\nargocd admin notifications template notify \\\n    app-sync-succeeded guestbook --recipient slack:argocd admin notifications\n```\n\n### Kustomize build output into stdin\n```yaml\nkustomize build ./argocd-notifications | \\\n  argocd-notifications \\\n  template notify app-sync-succeeded guestbook --recipient grafana:argocd \\\n  --config-map -\n```\n\n### Docker run example\n```yaml\ndocker run --rm -it -w /src -v $(pwd):/src \\\n  quay.io/argoproj/argocd:<version> \\\n  /app/argocd admin notifications trigger get \\\n  --config-map ./argocd-notifications-cm.yaml --secret :empty\n```\n\n### SSH into the running pod\n```yaml\nkubectl exec -it argocd-notifications-controller-<pod-hash> \\\n  /usr/local/bin/argocd admin notifications trigger get\n```\n\n### Incorrect YAML example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: $slack-token\n    icon: :rocket:\n\n```\n\n### Correct YAML example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: $slack-token\n    icon: \":rocket:\" # <- diff here\n```\n\n### Multiple sources example\n```yaml\nspec:\n  sources:  # <- multiple sources\n  - repoURL: https://github.com/exampleOrg/first.git\n    path: sources/example\n  - repoURL: https://github.com/exampleOrg/second.git\n    targetRevision: \"{{branch}}\"\n\n```\n\n### Using index function example\n```yaml\ntemplate.example: |\n  github:\n    repoURLPath: \"{{ (index .app.spec.sources 0).repoURL }}\"\n\n```\n\n### Error message example\n```yaml\nstatus:\n  operationState:\n    syncResult:\n      revisions:\n        - 38cfa22edf9148caabfecb288bfb47dc4352dfc6\n        - 38cfa22edf9148caabfecb288bfb47dc4352dfc6\n\nQuick fix for this is to use `index` function to get the first revision:\n\n```yaml\ntemplate.example: |\n  github:\n    revisionPath: \"{{index .app.status.operationState.syncResult.revisions 0}}\"\n```\n```\n\n### Secret example\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\nname: argocd-slackbot\nnamespace: <the namespace where argocd is installed>\nlabels:\n    app.kubernetes.io/part-of: argocd\ntype: Opaque\ndata:\nslack-token: <base64encryptedtoken>\n\n```\n\n### ConfigMap example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\nname: argocd-notifications-cm\ndata:\nservice.slack: |\n    token: $argocd-slackbot:slack-token\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting", "title": "Troubleshooting", "description": "`argocd admin notifications` is a CLI command group that helps to configure the controller settings and troubleshoot issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:08:51", "type": "code_examples", "page_metadata": {"language": "en", "title": "Troubleshooting - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/notifications/troubleshooting/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "ea9f7e7a-1135-43bc-9feb-115c3e905c23", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Troubleshooting\"?\n\nAssistant: Here are the recommended best practices:\n\n• Check the `argocd-notifications` controller version for service type support.\n• Ensure that the secret is in the same namespace as the custom secret being used.\n• Add the label: `app.kubernetes.io/part-of: argocd` to the secret.\n• Restart the `argocd-notifications` controller if issues persist.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting", "title": "Troubleshooting", "description": "`argocd admin notifications` is a CLI command group that helps to configure the controller settings and troubleshoot issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:08:51", "type": "best_practices", "page_metadata": {"language": "en", "title": "Troubleshooting - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/notifications/troubleshooting/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "ea9f7e7a-1135-43bc-9feb-115c3e905c23", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/troubleshooting/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Alertmanager\"?\n\nAssistant: The notification service is used to push events to Alertmanager, and the following settings need to be specified:\n\nHere's a detailed explanation:\n\n\n## Parameters\nThe notification service is used to push events to [Alertmanager](https://github.com/prometheus/alertmanager), and the following settings need to be specified:\n\n- `targets` \\- the alertmanager service address, array type\n- `scheme` \\- optional, default is \"http\", e.g. http or https\n- `apiPath` \\- optional, default is \"/api/v2/alerts\"\n- `insecureSkipVerify` \\- optional, default is \"false\", when scheme is https whether to skip the verification of ca\n- `basicAuth` \\- optional, server auth\n- `bearerToken` \\- optional, server auth\n- `timeout` \\- optional, the timeout in seconds used when sending alerts, default is \"3 seconds\"\n\n`basicAuth` or `bearerToken` is used for authentication, you can choose one. If the two are set at the same time, `basicAuth` takes precedence over `bearerToken`.\n\n## Example\n### Prometheus Alertmanager config\n```\nglobal:\n  resolve_timeout: 5m\n\nroute:\n  group_by: ['alertname']\n  group_wait: 10s\n  group_interval: 10s\n  repeat_interval: 1h\n  receiver: 'default'\nreceivers:\n- name: 'default'\n  webhook_configs:\n  - send_resolved: false\n    url: 'http://10.5.39.39:10080/api/alerts/webhook'\n```\nYou should turn off \"send_resolved\" or you will receive unnecessary recovery notifications after \"resolve_timeout\".\n\n### Send one alertmanager without auth\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:9093\n```\n\n### Send alertmanager cluster with custom api path\nIf your alertmanager has changed the default api, you can customize \"apiPath\".\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:443\n    scheme: https\n    apiPath: /api/events\n    insecureSkipVerify: true\n```\n\n### Send high availability alertmanager with auth\nStore auth token in `argocd-notifications-secret` Secret and use configure in `argocd-notifications-cm` ConfigMap.\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  alertmanager-username: <username>\n  alertmanager-password: <password>\n  alertmanager-bearer-token: <token>\n```\n- with basicAuth\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:19093\n    - 10.5.39.39:29093\n    - 10.5.39.39:39093\n    scheme: https\n    apiPath: /api/v2/alerts\n    insecureSkipVerify: true\n    basicAuth:\n      username: $alertmanager-username\n      password: $alertmanager-password\n```\n- with bearerToken\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:19093\n    - 10.5.39.39:29093\n    - 10.5.39.39:39093\n    scheme: https\n    apiPath: /api/v2/alerts\n    insecureSkipVerify: true\n    bearerToken: $alertmanager-bearer-token\n```\n\n## Templates\n- `labels` \\- at least one label pair required, implement different notification strategies according to alertmanager routing\n- `annotations` \\- optional, specifies a set of information labels, which can be used to store longer additional information, but only for display\n- `generatorURL` \\- optional, default is '{{.app.spec.source.repoURL}}', backlink used to identify the entity that caused this alert in the client\n\nthe `label` or `annotations` or `generatorURL` values can be templated.\n```\ncontext: |\n  argocdUrl: https://example.com/argocd\n\ntemplate.app-deployed: |\n  message: Application {{.app.metadata.name}} has been healthy.\n  alertmanager:\n    labels:\n      fault_priority: \"P5\"\n      event_bucket: \"deploy\"\n      event_status: \"succeed\"\n      recipient: \"{{.recipient}}\"\n    annotations:\n      application: '<a href=\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\">{{.app.metadata.name}}</a>'\n      author: \"{{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}\"\n      message: \"{{(call .repo.GetCommitMetadata .app.status.sync.revision).Message}}\"\n```\nYou can do targeted push on [Alertmanager](https://github.com/prometheus/alertmanager) according to labels.\n```\ntemplate.app-deployed: |\n  message: Application {{.app.metadata.name}} has been healthy.\n  alertmanager:\n    labels:\n      alertname: app-deployed\n      fault_priority: \"P5\"\n      event_bucket: \"deploy\"\n```\nThere is a special label `alertname`. If you don’t set its value, it will be equal to the template name by default.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/alertmanager", "title": "Alertmanager", "description": "The notification service is used to push events to Alertmanager, and the following settings need to be specified:", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:09:33", "type": "overview", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/notifications/services/alertmanager/", "readthedocs-version-slug": "stable", "title": "Alertmanager - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "2e997f4f-9bd4-421a-a1d9-1e3a0a06a755", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/alertmanager", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/alertmanager/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Alertmanager\"?\n\nAssistant: Here are some code examples:\n\n### Prometheus Alertmanager config\n```yaml\nglobal:\n  resolve_timeout: 5m\n\nroute:\n  group_by: ['alertname']\n  group_wait: 10s\n  group_interval: 10s\n  repeat_interval: 1h\n  receiver: 'default'\nreceivers:\n- name: 'default'\n  webhook_configs:\n  - send_resolved: false\n    url: 'http://10.5.39.39:10080/api/alerts/webhook'\n```\n\n### Send one alertmanager without auth\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:9093\n```\n\n### Send alertmanager cluster with custom api path\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:443\n    scheme: https\n    apiPath: /api/events\n    insecureSkipVerify: true\n```\n\n### Send high availability alertmanager with auth - basicAuth\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:19093\n    - 10.5.39.39:29093\n    - 10.5.39.39:39093\n    scheme: https\n    apiPath: /api/v2/alerts\n    insecureSkipVerify: true\n    basicAuth:\n      username: $alertmanager-username\n      password: $alertmanager-password\n```\n\n### Send high availability alertmanager with auth - bearerToken\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.alertmanager: |\n    targets:\n    - 10.5.39.39:19093\n    - 10.5.39.39:29093\n    - 10.5.39.39:39093\n    scheme: https\n    apiPath: /api/v2/alerts\n    insecureSkipVerify: true\n    bearerToken: $alertmanager-bearer-token\n```\n\n### Templates\n```yaml\ncontext: |\n  argocdUrl: https://example.com/argocd\n\ntemplate.app-deployed: |\n  message: Application {{.app.metadata.name}} has been healthy.\n  alertmanager:\n    labels:\n      fault_priority: \"P5\"\n      event_bucket: \"deploy\"\n      event_status: \"succeed\"\n      recipient: \"{{.recipient}}\"\n    annotations:\n      application: '<a href=\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\">{{.app.metadata.name}}</a>'\n      author: \"{{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}\"\n      message: \"{{(call .repo.GetCommitMetadata .app.status.sync.revision).Message}}\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/alertmanager", "title": "Alertmanager", "description": "The notification service is used to push events to Alertmanager, and the following settings need to be specified:", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:09:33", "type": "code_examples", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/notifications/services/alertmanager/", "readthedocs-version-slug": "stable", "title": "Alertmanager - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "2e997f4f-9bd4-421a-a1d9-1e3a0a06a755", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/alertmanager", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/alertmanager/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Alertmanager\"?\n\nAssistant: Here are the recommended best practices:\n\n• You should turn off \"send_resolved\" or you will receive unnecessary recovery notifications after \"resolve_timeout\".\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/alertmanager", "title": "Alertmanager", "description": "The notification service is used to push events to Alertmanager, and the following settings need to be specified:", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:09:33", "type": "best_practices", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/notifications/services/alertmanager/", "readthedocs-version-slug": "stable", "title": "Alertmanager - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "2e997f4f-9bd4-421a-a1d9-1e3a0a06a755", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/alertmanager", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/alertmanager/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"AWS SQS\"?\n\nAssistant: This notification service is capable of sending simple messages to AWS SQS queue.\n\nHere's a detailed explanation:\n\n\n## Parameters\n- `queue` \\- name of the queue you are intending to send messages to. Can be overridden with target destination annotation.\n- `region` \\- region of the sqs queue can be provided via env variable AWS_DEFAULT_REGION\n- `key` \\- optional, aws access key must be either referenced from a secret via variable or via env variable AWS_ACCESS_KEY_ID\n- `secret` \\- optional, aws access secret must be either referenced from a secret via variable or via env variable AWS_SECRET_ACCESS_KEY\n- `account` optional, external accountId of the queue\n- `endpointUrl` optional, useful for development with localstack\n\n## Example\n### Using Secret for credential retrieval:\n\nResource Annotation:\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  annotations:\n    notifications.argoproj.io/subscribe.on-deployment-ready.awssqs: \"overwrite-myqueue\"\n```\n\n- ConfigMap\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n    name: argocd-notifications-cm\ndata:\n    service.awssqs: |\n      region: \"us-east-2\"\n      queue: \"myqueue\"\n      account: \"1234567\"\n      key: \"$awsaccess_key\"\n      secret: \"$awsaccess_secret\"\n\n    template.deployment-ready: |\n      message: |\n        Deployment {{.obj.metadata.name}} is ready!\n\n    trigger.on-deployment-ready: |\n    - when: any(obj.status.conditions, {.type == 'Available' && .status == 'True'})\n      send: [deployment-ready]\n    - oncePer: obj.metadata.annotations[\"generation\"]\n```\n\nSecret\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\nname: <secret-name>\nstringData:\nawsaccess_key: test\nawsaccess_secret: test\n```\n\n### Minimal configuration using AWS Env variables\n\nEnsure the following list of environment variables are injected via OIDC, or another method. And assuming SQS is local to the account.\nYou may skip usage of secret for sensitive data and omit other parameters. (Setting parameters via ConfigMap takes precedent.)\n\nVariables:\n\n```\nexport AWS_ACCESS_KEY_ID=\"test\"\nexport AWS_SECRET_ACCESS_KEY=\"test\"\nexport AWS_DEFAULT_REGION=\"us-east-1\"\n```\n\nResource Annotation:\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: nginx-deployment\nannotations:\n    notifications.argoproj.io/subscribe.on-deployment-ready.awssqs: \"\"\n```\n\n- ConfigMap\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n    name: argocd-notifications-cm\ndata:\n    service.awssqs: |\n      queue: \"myqueue\"\n\n    template.deployment-ready: |\n      message: |\n        Deployment {{.obj.metadata.name}} is ready!\n\n    trigger.on-deployment-ready: |\n    - when: any(obj.status.conditions, {.type == 'Available' && .status == 'True'})\n      send: [deployment-ready]\n    - oncePer: obj.metadata.annotations[\"generation\"]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/awssqs", "title": "AWS SQS", "description": "This notification service is capable of sending simple messages to AWS SQS queue.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:09:54", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/awssqs/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "AWS SQS - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "689da99a-baf2-4065-9f9b-96eb28b650e7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/awssqs", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/awssqs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"AWS SQS\"?\n\nAssistant: Here are some code examples:\n\n### Using Secret for credential retrieval\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  annotations:\n    notifications.argoproj.io/subscribe.on-deployment-ready.awssqs: \"overwrite-myqueue\"\n\n```\n\n### ConfigMap for Secret retrieval\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n    name: argocd-notifications-cm\ndata:\n    service.awssqs: |\n      region: \"us-east-2\"\n      queue: \"myqueue\"\n      account: \"1234567\"\n      key: \"$awsaccess_key\"\n      secret: \"$awsaccess_secret\"\n\n    template.deployment-ready: |\n      message: |\n        Deployment {{.obj.metadata.name}} is ready!\n\n    trigger.on-deployment-ready: |\n    - when: any(obj.status.conditions, {.type == 'Available' && .status == 'True'})\n      send: [deployment-ready]\n    - oncePer: obj.metadata.annotations[\"generation\"]\n\n```\n\n### Secret for AWS credentials\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\nname: <secret-name>\nstringData:\nawsaccess_key: test\nawsaccess_secret: test\n\n```\n\n### Minimal configuration using AWS Env variables\n```yaml\nexport AWS_ACCESS_KEY_ID=\"test\"\nexport AWS_SECRET_ACCESS_KEY=\"test\"\nexport AWS_DEFAULT_REGION=\"us-east-1\"\n\n```\n\n### Resource Annotation for minimal configuration\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: nginx-deployment\nannotations:\n    notifications.argoproj.io/subscribe.on-deployment-ready.awssqs: \"\"\n```\n\n### ConfigMap for minimal configuration\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n    name: argocd-notifications-cm\ndata:\n    service.awssqs: |\n      queue: \"myqueue\"\n\n    template.deployment-ready: |\n      message: |\n        Deployment {{.obj.metadata.name}} is ready!\n\n    trigger.on-deployment-ready: |\n    - when: any(obj.status.conditions, {.type == 'Available' && .status == 'True'})\n      send: [deployment-ready]\n    - oncePer: obj.metadata.annotations[\"generation\"]\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/awssqs", "title": "AWS SQS", "description": "This notification service is capable of sending simple messages to AWS SQS queue.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:09:54", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/awssqs/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "AWS SQS - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "689da99a-baf2-4065-9f9b-96eb28b650e7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/awssqs", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/awssqs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"AWS SQS\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure the following list of environment variables are injected via OIDC, or another method.\n• You may skip usage of secret for sensitive data and omit other parameters. (Setting parameters via ConfigMap takes precedent.)\n• To send to a FIFO SQS Queue you must include a `messageGroupId` in the template.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/awssqs", "title": "AWS SQS", "description": "This notification service is capable of sending simple messages to AWS SQS queue.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:09:54", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/awssqs/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "AWS SQS - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "689da99a-baf2-4065-9f9b-96eb28b650e7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/awssqs", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/awssqs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Email\"?\n\nAssistant: The Email notification service sends email notifications using SMTP protocol and requires specifying the following settings: host, port, username, password, from, html, and insecure_skip_verify.\n\nHere's a detailed explanation:\n\n\n## Parameters\nThe Email notification service sends email notifications using SMTP protocol and requires specifying the following settings:\n\n- `host` \\- the SMTP server host name\n- `port` \\- the SMTP server port\n- `username` \\- username\n- `password` \\- password\n- `from` \\- from email address\n- `html` \\- optional bool, true or false\n- `insecure_skip_verify` \\- optional bool, true or false\n\n## Example\nThe following snippet contains sample Gmail service configuration:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.email.gmail: |\n    username: $email-username\n    password: $email-password\n    host: smtp.gmail.com\n    port: 465\n    from: $email-username\n```\n\nWithout authentication:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.email.example: |\n    host: smtp.example.com\n    port: 587\n    from: $email-username\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/email", "title": "Email", "description": "The Email notification service sends email notifications using SMTP protocol and requires specifying the following settings: host, port, username, password, from, html, and insecure_skip_verify.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 01:10:04", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "Email - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/operator-manual/notifications/services/email/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "c88ae76c-e559-4a15-9096-6aed4b8652b2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/email", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/email/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Email\"?\n\nAssistant: Here are some code examples:\n\n### Gmail Service Configuration\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.email.gmail: |\n    username: $email-username\n    password: $email-password\n    host: smtp.gmail.com\n    port: 465\n    from: $email-username\n\n```\n\n### Example Service Configuration Without Authentication\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.email.example: |\n    host: smtp.example.com\n    port: 587\n    from: $email-username\n\n```\n\n### Email Notification Template\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.app-sync-succeeded: |\n    email:\n      subject: Application {{.app.metadata.name}} has been successfully synced.\n    message: |\n      {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n      Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/email", "title": "Email", "description": "The Email notification service sends email notifications using SMTP protocol and requires specifying the following settings: host, port, username, password, from, html, and insecure_skip_verify.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 01:10:04", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "Email - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/operator-manual/notifications/services/email/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "c88ae76c-e559-4a15-9096-6aed4b8652b2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/email", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/email/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"GitHub\"?\n\nAssistant: The GitHub notification service changes commit status using GitHub Apps and requires specifying the following settings.\n\nHere's a detailed explanation:\n\n\n## Parameters\nThe GitHub notification service changes commit status using [GitHub Apps](https://docs.github.com/en/developers/apps) and requires specifying the following settings:\n\n- `appID` \\- the app id\n- `installationID` \\- the app installation id\n- `privateKey` \\- the app private key\n- `enterpriseBaseURL` \\- optional URL, e.g. https://git.example.com/api/v3\n\n> ⚠️ _NOTE:_ Specifying `/api/v3` in the `enterpriseBaseURL` is required until [argoproj/notifications-engine#205](https://github.com/argoproj/notifications-engine/issues/205) is resolved.\n\n## Configuration\n1. Create a GitHub Apps using https://github.com/settings/apps/new\n2. Change repository permissions to enable write commit statuses and/or deployments and/or pull requests comments\n    ![2](https://user-images.githubusercontent.com/18019529/108397381-3ca57980-725b-11eb-8d17-5b8992dc009e.png)\n3. Generate a private key, and download it automatically\n    ![3](https://user-images.githubusercontent.com/18019529/108397926-d4a36300-725b-11eb-83fe-74795c8c3e03.png)\n4. Install app to account\n5. Store privateKey in `argocd-notifications-secret` Secret and configure GitHub integration\n    in `argocd-notifications-cm` ConfigMap\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.github: |\n    appID: <app-id>\n    installationID: <installation-id>\n    privateKey: $github-privateKey\n```\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  github-privateKey: |\n    -----BEGIN RSA PRIVATE KEY-----\n    (snip)\n    -----END RSA PRIVATE KEY-----\n```\n\n1. Create subscription for your GitHub integration\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.github: \"\"\n```\n\n## Templates\n![](https://user-images.githubusercontent.com/18019529/108520497-168ce180-730e-11eb-93cb-b0b91f99bdc5.png)\n\n```yaml\ntemplate.app-deployed: |\n  message: |\n    Application {{.app.metadata.name}} is now running new version of deployments manifests.\n  github:\n    repoURLPath: \"{{.app.spec.source.repoURL}}\"\n    revisionPath: \"{{.app.status.operationState.syncResult.revision}}\"\n    status:\n      state: success\n      label: \"continuous-delivery/{{.app.metadata.name}}\"\n      targetURL: \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n    deployment:\n      state: success\n      environment: production\n      environmentURL: \"https://{{.app.metadata.name}}.example.com\"\n      logURL: \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      requiredContexts: []\n      autoMerge: true\n      transientEnvironment: false\n      reference: v1.0.0\n    pullRequestComment:\n      content: |\n        Application {{.app.metadata.name}} is now running new version of deployments manifests.\n        See more here: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/github", "title": "GitHub", "description": "The GitHub notification service changes commit status using GitHub Apps and requires specifying the following settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:10:28", "type": "overview", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "GitHub - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/notifications/services/github/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "fea31daa-0bce-4da2-8851-eae8d8a9772b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/github", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/github/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"GitHub\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap for GitHub Integration\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.github: |\n    appID: <app-id>\n    installationID: <installation-id>\n    privateKey: $github-privateKey\n\n```\n\n### Secret for GitHub Private Key\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  github-privateKey: |\n    -----BEGIN RSA PRIVATE KEY-----\n    (snip)\n    -----END RSA PRIVATE KEY-----\n\n```\n\n### Application Subscription for GitHub Integration\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.github: \"\"\n```\n\n### Template for App Deployed Notification\n```yaml\ntemplate.app-deployed: |\n  message: |\n    Application {{.app.metadata.name}} is now running new version of deployments manifests.\n  github:\n    repoURLPath: \"{{.app.spec.source.repoURL}}\"\n    revisionPath: \"{{.app.status.operationState.syncResult.revision}}\"\n    status:\n      state: success\n      label: \"continuous-delivery/{{.app.metadata.name}}\"\n      targetURL: \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n    deployment:\n      state: success\n      environment: production\n      environmentURL: \"https://{{.app.metadata.name}}.example.com\"\n      logURL: \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      requiredContexts: []\n      autoMerge: true\n      transientEnvironment: false\n      reference: v1.0.0\n    pullRequestComment:\n      content: |\n        Application {{.app.metadata.name}} is now running new version of deployments manifests.\n        See more here: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/github", "title": "GitHub", "description": "The GitHub notification service changes commit status using GitHub Apps and requires specifying the following settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:10:28", "type": "code_examples", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "GitHub - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/notifications/services/github/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "fea31daa-0bce-4da2-8851-eae8d8a9772b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/github", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/github/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"GitHub\"?\n\nAssistant: Here are the recommended best practices:\n\n• If the message is set to 140 characters or more, it will be truncated.\n• If `github.repoURLPath` and `github.revisionPath` are same as above, they can be omitted.\n• Automerge is optional and `true` by default for github deployments to ensure the requested ref is up to date with the default branch. Setting this option to `false` is required if you would like to deploy older refs in your default branch.\n• If `github.pullRequestComment.content` is set to 65536 characters or more, it will be truncated.\n• Reference is optional. When set, it will be used as the ref to deploy. If not set, the revision will be used as the ref to deploy.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/github", "title": "GitHub", "description": "The GitHub notification service changes commit status using GitHub Apps and requires specifying the following settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:10:28", "type": "best_practices", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "GitHub - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/notifications/services/github/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "fea31daa-0bce-4da2-8851-eae8d8a9772b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/github", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/github/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Google Chat\"?\n\nAssistant: The Google Chat notification service send message notifications to a google chat webhook. This service uses the following settings: - `webhooks` \\- a map of the form `webhookName: webhookUrl`\n\nHere's a detailed explanation:\n\n\n## Parameters\nThe Google Chat notification service send message notifications to a google chat webhook. This service uses the following settings:\n\n- `webhooks` \\- a map of the form `webhookName: webhookUrl`\n\n## Configuration\n1. Open `Google chat` and go to the space to which you want to send messages\n2. From the menu at the top of the page, select **Configure Webhooks**\n3. Under **Incoming Webhooks**, click **Add Webhook**\n4. Give a name to the webhook, optionally add an image and click **Save**\n5. Copy the URL next to your webhook\n6. Store the URL in `argocd-notification-secret` and declare it in `argocd-notifications-cm`\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.googlechat: |\n    webhooks:\n      spaceName: $space-webhook-url\n```\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  space-webhook-url: https://chat.googleapis.com/v1/spaces/<space_id>/messages?key=<key>&token=<token>\n```\n\n1. Create a subscription for your space\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.googlechat: spaceName\n``\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/googlechat", "title": "Google Chat", "description": "The Google Chat notification service send message notifications to a google chat webhook. This service uses the following settings: - `webhooks` \\- a map of the form `webhookName: webhookUrl`", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:10:50", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "title": "Google Chat - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/notifications/services/googlechat/", "readthedocs-http-status": "200", "scrapeId": "745facf5-d1c8-4f92-a99b-5f2655aadab5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/googlechat", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/googlechat/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Google Chat\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap for Google Chat Notifications\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.googlechat: |\n    webhooks:\n      spaceName: $space-webhook-url\n\n```\n\n### Secret for Webhook URL\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  space-webhook-url: https://chat.googleapis.com/v1/spaces/<space_id>/messages?key=<key>&token=<token>\n\n```\n\n### Application Subscription for Notifications\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.googlechat: spaceName\n\n```\n\n### Simple Text Message Template\n```yaml\ntemplate.app-sync-succeeded: |\n  message: The app {{ .app.metadata.name }} has successfully synced!\n\n```\n\n### Card Message Template\n```yaml\ntemplate.app-sync-succeeded: |\n  googlechat:\n    cardsV2: |\n      - header:\n          title: ArgoCD Bot Notification\n        sections:\n          - widgets:\n              - decoratedText:\n                  text: The app {{ .app.metadata.name }} has successfully synced!\n          - widgets:\n              - decoratedText:\n                  topLabel: Repository\n                  text: {{ call .repo.RepoURLToHTTPS .app.spec.source.repoURL }}\n              - decoratedText:\n                  topLabel: Revision\n                  text: {{ .app.spec.source.targetRevision }}\n              - decoratedText:\n                  topLabel: Author\n                  text: {{ (call .repo.GetCommitMetadata .app.status.sync.revision).Author }}\n\n```\n\n### Thread Key for Chat Messages\n```yaml\ntemplate.app-sync-succeeded: |\n  message: The app {{ .app.metadata.name }} has successfully synced!\n  googlechat:\n    threadKey: {{ .app.metadata.name }}\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/googlechat", "title": "Google Chat", "description": "The Google Chat notification service send message notifications to a google chat webhook. This service uses the following settings: - `webhooks` \\- a map of the form `webhookName: webhookUrl`", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:10:50", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "title": "Google Chat - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/notifications/services/googlechat/", "readthedocs-http-status": "200", "scrapeId": "745facf5-d1c8-4f92-a99b-5f2655aadab5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/googlechat", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/googlechat/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Google Chat\"?\n\nAssistant: Here are the recommended best practices:\n\n• All Card fields are supported and can be used in notifications.\n• It is recommended to use the newer `cardsV2` instead of the deprecated `cards` key.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/googlechat", "title": "Google Chat", "description": "The Google Chat notification service send message notifications to a google chat webhook. This service uses the following settings: - `webhooks` \\- a map of the form `webhookName: webhookUrl`", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:10:50", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "title": "Google Chat - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/notifications/services/googlechat/", "readthedocs-http-status": "200", "scrapeId": "745facf5-d1c8-4f92-a99b-5f2655aadab5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/googlechat", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/googlechat/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Grafana\"?\n\nAssistant: To be able to create Grafana annotation with argocd-notifications you have to create an API Key inside your Grafana.\n\nHere's a detailed explanation:\n\n\n## Available parameters\n- `apiURL` \\- the server url, e.g. https://grafana.example.com\n- `apiKey` \\- the API key for the serviceaccount\n- `insecureSkipVerify` \\- optional bool, true or false\n\n## Steps to create API Key\n- Login to your Grafana instance as `admin`\n- On the left menu, go to Configuration / API Keys\n- Click \"Add API Key\"\n- Fill the Key with name `ArgoCD Notification`, role `Editor` and Time to Live `10y` (for example)\n- Click on Add button\n- Store apiKey in `argocd-notifications-secret` Secret and Copy your API Key and define it in `argocd-notifications-cm` ConfigMap\n\n## ConfigMap Example\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.grafana: |\n    apiUrl: https://grafana.example.com/api\n    apiKey: $grafana-api-key\n```\n\n\n## Secret Example\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  grafana-api-key: api-key\n```\n\n\n## Create Subscription\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.grafana: tag1|tag2 # list of tags separated with |\n```\n\n\n## Change the Annotations Settings\n![8](https://user-images.githubusercontent.com/18019529/112022083-47fb0600-8b75-11eb-849b-d25d41925909.png)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana", "title": "Grafana", "description": "To be able to create Grafana annotation with argocd-notifications you have to create an API Key inside your Grafana.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:11:13", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Grafana - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/notifications/services/grafana/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "scrapeId": "bd50263f-43cb-423a-bdeb-30d79d7f503f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Grafana\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.grafana: |\n    apiUrl: https://grafana.example.com/api\n    apiKey: $grafana-api-key\n\n```\n\n### Secret Example\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  grafana-api-key: api-key\n\n```\n\n### Create Subscription Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.grafana: tag1|tag2 # list of tags separated with |\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana", "title": "Grafana", "description": "To be able to create Grafana annotation with argocd-notifications you have to create an API Key inside your Grafana.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:11:13", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Grafana - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/notifications/services/grafana/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "scrapeId": "bd50263f-43cb-423a-bdeb-30d79d7f503f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Grafana\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to store the API key securely in the argocd-notifications-secret Secret.\n• Use a meaningful name for the API Key, such as 'ArgoCD Notification'.\n• Set the role to 'Editor' and a reasonable Time to Live for the API Key.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana", "title": "Grafana", "description": "To be able to create Grafana annotation with argocd-notifications you have to create an API Key inside your Grafana.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:11:13", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Grafana - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/notifications/services/grafana/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "scrapeId": "bd50263f-43cb-423a-bdeb-30d79d7f503f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Mattermost\"?\n\nAssistant: Configuration and parameters for integrating Mattermost with Argo CD notifications.\n\nHere's a detailed explanation:\n\n\n## Parameters\n- `apiURL` - the server url, e.g. https://mattermost.example.com\n- `token` - the bot token\n- `insecureSkipVerify` - optional bool, true or false\n\n## Configuration\n1. Create a bot account and copy token after creating it\n![1](https://user-images.githubusercontent.com/18019529/111499520-62ed0500-8786-11eb-88b0-d0aade61fed4.png)\n2. Invite team\n![2](https://user-images.githubusercontent.com/18019529/111500197-1229dc00-8787-11eb-98e5-587ee36c94a9.png)\n3. Store token in `argocd-notifications-secret` Secret and configure Mattermost integration in `argocd-notifications-cm` ConfigMap\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.mattermost: |\n    apiURL: <api-url>\n    token: $mattermost-token\n```\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  mattermost-token: token\n```\n\n1. Copy channel id\n![4](https://user-images.githubusercontent.com/18019529/111501289-333efc80-8788-11eb-9731-8353170cd73a.png)\n\n2. Create subscription for your Mattermost integration\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.mattermost: <channel-id>\n``\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/mattermost", "title": "Mattermost", "description": "Configuration and parameters for integrating Mattermost with Argo CD notifications.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:11:53", "type": "overview", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/mattermost/", "title": "Mattermost - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "2b5f36b8-b68f-4c55-ac3d-05fc5bacd7a7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/mattermost", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/mattermost/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Mattermost\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap for Mattermost Integration\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.mattermost: |\n    apiURL: <api-url>\n    token: $mattermost-token\n\n```\n\n### Secret for Mattermost Token\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  mattermost-token: token\n\n```\n\n### Application Subscription for Mattermost\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.mattermost: <channel-id>\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/mattermost", "title": "Mattermost", "description": "Configuration and parameters for integrating Mattermost with Argo CD notifications.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:11:53", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/mattermost/", "title": "Mattermost - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "2b5f36b8-b68f-4c55-ac3d-05fc5bacd7a7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/mattermost", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/mattermost/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Mattermost\"?\n\nAssistant: Here are the recommended best practices:\n\n• Create a bot account in Mattermost and copy the token after creating it.\n• Store the Mattermost token securely in a Kubernetes Secret.\n• Ensure to invite the bot to the relevant team in Mattermost for it to send notifications.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/mattermost", "title": "Mattermost", "description": "Configuration and parameters for integrating Mattermost with Argo CD notifications.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:11:53", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/mattermost/", "title": "Mattermost - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "2b5f36b8-b68f-4c55-ac3d-05fc5bacd7a7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/mattermost", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/mattermost/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"NewRelic\"?\n\nAssistant: Configuration and parameters for integrating NewRelic with Argo CD notifications.\n\nHere's a detailed explanation:\n\n\n## Parameters\n- `apiURL` \\- the api server url, e.g. https://api.newrelic.com\n- `apiKey` \\- a [NewRelic ApiKey](https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/introduction-new-relic-rest-api-v2/#api_key)\n\n## Configuration\n1. Create a NewRelic [Api Key](https://docs.newrelic.com/docs/apis/intro-apis/new-relic-api-keys/#user-api-key)\n2. Store apiKey in `argocd-notifications-secret` Secret and configure NewRelic integration in `argocd-notifications-cm` ConfigMap\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.newrelic: |\n    apiURL: <api-url>\n    apiKey: $newrelic-apiKey\n```\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  newrelic-apiKey: apiKey\n```\n\n1. Copy [Application ID](https://docs.newrelic.com/docs/apis/rest-api-v2/get-started/get-app-other-ids-new-relic-one/#apm)\n2. Create subscription for your NewRelic integration\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.newrelic: <app-id>\n```\n\n## Templates\n- `description` \\- **optional**, high-level description of this deployment, visible in the [Summary](https://docs.newrelic.com/docs/apm/applications-menu/monitoring/apm-overview-page) page and on the [Deployments](https://docs.newrelic.com/docs/apm/applications-menu/events/deployments-page) page when you select an individual deployment.\n- Defaults to `message`\n- `changelog` \\- **optional**, A summary of what changed in this deployment, visible in the [Deployments](https://docs.newrelic.com/docs/apm/applications-menu/events/deployments-page) page when you select (selected deployment) > Change log.\n- Defaults to `{{(call .repo.GetCommitMetadata .app.status.sync.revision).Message}}`\n- `user` \\- **optional**, A username to associate with the deployment, visible in the [Summary](https://docs.newrelic.com/docs/apm/applications-menu/events/deployments-page) and on the [Deployments](https://docs.newrelic.com/docs/apm/applications-menu/events/deployments-page).\n- Defaults to `{{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}`\n\n```\ncontext: |\n  argocdUrl: https://example.com/argocd\n\ntemplate.app-deployed: |\n  message: Application {{.app.metadata.name}} has successfully deployed.\n  newrelic:\n    description: Application {{.app.metadata.name}} has successfully deployed\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/newrelic", "title": "NewRelic", "description": "Configuration and parameters for integrating NewRelic with Argo CD notifications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:12:15", "type": "overview", "page_metadata": {"title": "NewRelic - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/notifications/services/newrelic/", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "680a0b7c-d33c-4ec3-aaf3-7974154b10b6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/newrelic", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/newrelic/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"NewRelic\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap for NewRelic Integration\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.newrelic: |\n    apiURL: <api-url>\n    apiKey: $newrelic-apiKey\n\n```\n\n### Secret for NewRelic API Key\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  newrelic-apiKey: apiKey\n\n```\n\n### Application Subscription for NewRelic\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.newrelic: <app-id>\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/newrelic", "title": "NewRelic", "description": "Configuration and parameters for integrating NewRelic with Argo CD notifications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:12:15", "type": "code_examples", "page_metadata": {"title": "NewRelic - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/notifications/services/newrelic/", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "680a0b7c-d33c-4ec3-aaf3-7974154b10b6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/newrelic", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/newrelic/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"NewRelic\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the apiKey is stored securely in the Secret.\n• Use descriptive names for your ConfigMap and Secret to avoid confusion.\n• Regularly review and rotate your API keys for security.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/newrelic", "title": "NewRelic", "description": "Configuration and parameters for integrating NewRelic with Argo CD notifications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:12:15", "type": "best_practices", "page_metadata": {"title": "NewRelic - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/notifications/services/newrelic/", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "680a0b7c-d33c-4ec3-aaf3-7974154b10b6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/newrelic", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/newrelic/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Opsgenie\"?\n\nAssistant: To be able to send notifications with argocd-notifications you have to create an API Integration inside your Opsgenie Team.\n\nHere's a detailed explanation:\n\n\n## Creating an API Integration in Opsgenie\n01. Login to Opsgenie at https://app.opsgenie.com or https://app.eu.opsgenie.com (if you have an account in the European Union).\n02. Make sure you already have a team; if not, follow this guide: https://docs.opsgenie.com/docs/teams.\n03. Click \"Teams\" in the Menu on the left.\n04. Select the team that you want to notify.\n05. In the team's configuration menu, select \"Integrations\".\n06. Click \"Add Integration\" in the top right corner.\n07. Select \"API\" integration.\n08. Give your integration a name, copy the \"API key\", and save it somewhere for later.\n09. Click \"Edit\" in the integration settings.\n10. Make sure the checkbox for \"Create and Update Access\" is selected; disable the other checkboxes to remove unnecessary permissions.\n11. Click \"Save\" at the bottom.\n12. Click \"Turn on integration\" in the top right corner.\n13. Check your browser for the correct server apiURL. If it is \"app.opsgenie.com\", then use the US/international API URL `api.opsgenie.com`; otherwise, use `api.eu.opsgenie.com` (European API).\n14. You are finished with configuring Opsgenie. Now you need to configure argocd-notifications. Use the apiUrl, the team name, and the apiKey to configure the Opsgenie integration in the `argocd-notifications-secret` secret.\n15. You can find the example `argocd-notifications-cm` configuration below.\n\n## Configuration Options\n| **Option** | **Required** | **Type** | **Description** | **Example** |\n| --- | --- | --- | --- | --- |\n| `description` | True | `string` | Description field of the alert that is generally used to provide detailed information about the alert. | `Hello from Argo CD!` |\n| `priority` | False | `string` | Priority level of the alert. Possible values are P1, P2, P3, P4, and P5. Default value is P3. | `P1` |\n| `alias` | False | `string` | Client-defined identifier of the alert, that is also the key element of Alert De-Duplication. | `Life is too short for no alias` |\n| `note` | False | `string` | Additional note that will be added while creating the alert. | `Error from Argo CD!` |\n| `actions` | False | `[]string` | Custom actions that will be available for the alert. | `[\n\n## Example Configuration\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.opsgenie: |\n    apiUrl: <api-url>\n    apiKeys:\n      <your-team>: <integration-api-key>\n  template.opsgenie: |\n    message: |\n      [Argo CD] Application {{.app.metadata.name}} has a problem.\n    opsgenie:\n      description: |\n        Application: {{.app.metadata.name}}\n        Health Status: {{.app.status.health.status}}\n        Operation State Phase: {{.app.status.operationState.phase}}\n        Sync Status: {{.app.status.sync.status}}\n      priority: P1\n      alias: {{.app.metadata.name}}\n      note: Error from Argo CD!\n      actions:\n        - Restart\n        - AnExampleAction\n      tags:\n        - OverwriteQuietHours\n        - Critical\n      visibleTo:\n        - Id: \"{{.app.metadata.responderId}}\"\n          Type: \"team\"\n        - Name: \"rocket_team\"\n          Type: \"team\"\n        - Id: \"{{.app.metadata.responderUserId}}\"\n          Type: \"user\"\n        - Username: \"trinity@opsgenie.com\"\n          Type: \"user\"\n      details:\n        environment: production\n        service: web\n      entity: Argo CD Application\n      user: John Doe\n  trigger.on-a-problem: |\n    - description: Application has a problem.\n      send:\n      - opsgenie\n      when: app.status.health.status == 'Degraded' or app.status.operationState.phase in ['Error', 'Failed'] or app.status.sync.status == 'Unknown'\n```\n\n1. Add annotation in the application YAML file to enable notifications for a specific Argo CD app.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n     annotations:\n       notifications.argoproj.io/subscribe.on-a-problem.opsgenie: <your-team>\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/opsgenie", "title": "Opsgenie", "description": "To be able to send notifications with argocd-notifications you have to create an API Integration inside your Opsgenie Team.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:12:56", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/notifications/services/opsgenie/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "title": "Opsgenie - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "d5f967b5-2a3c-4421-9ea6-a104f2309f01", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/opsgenie", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/opsgenie/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Opsgenie\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap Example for Opsgenie\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.opsgenie: |\n    apiUrl: <api-url>\n    apiKeys:\n      <your-team>: <integration-api-key>\n  template.opsgenie: |\n    message: |\n      [Argo CD] Application {{.app.metadata.name}} has a problem.\n    opsgenie:\n      description: |\n        Application: {{.app.metadata.name}}\n        Health Status: {{.app.status.health.status}}\n        Operation State Phase: {{.app.status.operationState.phase}}\n        Sync Status: {{.app.status.sync.status}}\n      priority: P1\n      alias: {{.app.metadata.name}}\n      note: Error from Argo CD!\n      actions:\n        - Restart\n        - AnExampleAction\n      tags:\n        - OverwriteQuietHours\n        - Critical\n      visibleTo:\n        - Id: \"{{.app.metadata.responderId}}\"\n          Type: \"team\"\n        - Name: \"rocket_team\"\n          Type: \"team\"\n        - Id: \"{{.app.metadata.responderUserId}}\"\n          Type: \"user\"\n        - Username: \"trinity@opsgenie.com\"\n          Type: \"user\"\n      details:\n        environment: production\n        service: web\n      entity: Argo CD Application\n      user: John Doe\n  trigger.on-a-problem: |\n    - description: Application has a problem.\n      send:\n      - opsgenie\n      when: app.status.health.status == 'Degraded' or app.status.operationState.phase in ['Error', 'Failed'] or app.status.sync.status == 'Unknown'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/opsgenie", "title": "Opsgenie", "description": "To be able to send notifications with argocd-notifications you have to create an API Integration inside your Opsgenie Team.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:12:56", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/notifications/services/opsgenie/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "title": "Opsgenie - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "d5f967b5-2a3c-4421-9ea6-a104f2309f01", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/opsgenie", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/opsgenie/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Opsgenie\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to save the API key securely after creating the integration.\n• Disable unnecessary permissions in the integration settings to enhance security.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/opsgenie", "title": "Opsgenie", "description": "To be able to send notifications with argocd-notifications you have to create an API Integration inside your Opsgenie Team.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:12:56", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/notifications/services/opsgenie/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "title": "Opsgenie - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "d5f967b5-2a3c-4421-9ea6-a104f2309f01", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/opsgenie", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/opsgenie/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Overview\"?\n\nAssistant: The notification services represent integration with services such as slack, email or custom webhook. Services are configured in `argocd-notifications-cm` ConfigMap using `service.<type>.(<custom-name>)` keys and might reference sensitive data from `argocd-notifications-secret` Secret.\n\nHere's a detailed explanation:\n\n\n## Sensitive Data\nSensitive data like authentication tokens should be stored in `<secret-name>` Secret and can be referenced in service configuration using `$<secret-key>` format. For example `$slack-token` referencing value of key `slack-token` in `<secret-name>` Secret.\n\n## Custom Names\nService custom names allow configuring two instances of the same service type.\n\n```\n  service.slack.workspace1: |\n    token: $slack-token-workspace1\n  service.slack.workspace2: |\n    token: $slack-token-workspace2\n\n```\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.workspace1: my-channel\n    notifications.argoproj.io/subscribe.on-sync-succeeded.workspace2: my-channel\n\n```\n\n## Service Types\n- [AwsSqs](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/awssqs/)\n- [Email](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/email/)\n- [GitHub](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/github/)\n- [Slack](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack/)\n- [Mattermost](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/mattermost/)\n- [Opsgenie](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/opsgenie/)\n- [Grafana](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana/)\n- [Webhook](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webhook/)\n- [Telegram](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/telegram/)\n- [Teams](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/teams/)\n- [Google Chat](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/googlechat/)\n- [Rocket.Chat](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/rocketchat/)\n- [Pushover](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pushover/)\n- [Alertmanager](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/alertmanager/)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview", "title": "Overview", "description": "The notification services represent integration with services such as slack, email or custom webhook. Services are configured in `argocd-notifications-cm` ConfigMap using `service.<type>.(<custom-name>)` keys and might reference sensitive data from `argocd-notifications-secret` Secret.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 01:13:14", "type": "overview", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/overview/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "959a11d6-252a-4f63-b93b-a25cd1b714ea", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Overview\"?\n\nAssistant: Here are some code examples:\n\n### Slack Service Configuration\n```yaml\n  service.slack: |\n    token: $slack-token\n\n```\n\n### Custom Names for Slack Service\n```yaml\n  service.slack.workspace1: |\n    token: $slack-token-workspace1\n  service.slack.workspace2: |\n    token: $slack-token-workspace2\n\n```\n\n### Application Annotations Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.workspace1: my-channel\n    notifications.argoproj.io/subscribe.on-sync-succeeded.workspace2: my-channel\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview", "title": "Overview", "description": "The notification services represent integration with services such as slack, email or custom webhook. Services are configured in `argocd-notifications-cm` ConfigMap using `service.<type>.(<custom-name>)` keys and might reference sensitive data from `argocd-notifications-secret` Secret.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 01:13:14", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/overview/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "959a11d6-252a-4f63-b93b-a25cd1b714ea", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"PagerDuty\"?\n\nAssistant: The PagerDuty notification service is used to create PagerDuty incidents and requires specifying the following settings.\n\nHere's a detailed explanation:\n\n\n## Parameters\nThe PagerDuty notification service is used to create PagerDuty incidents and requires specifying the following settings:\n\n- `pagerdutyToken` \\- the PagerDuty auth token\n- `from` \\- email address of a valid user associated with the account making the request.\n- `serviceID` \\- The ID of the resource.\n\n## Example\nThe following snippet contains sample PagerDuty service configuration:\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  pagerdutyToken: <pd-api-token>\n```\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.pagerduty: |\n    token: $pagerdutyToken\n    from: <emailid>\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty", "title": "PagerDuty", "description": "The PagerDuty notification service is used to create PagerDuty incidents and requires specifying the following settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:13:51", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/notifications/services/pagerduty/", "readthedocs-http-status": "200", "title": "PagerDuty - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "ef341df2-c3c4-4ae1-851e-de6bf441cd39", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"PagerDuty\"?\n\nAssistant: Here are some code examples:\n\n### PagerDuty Service Configuration - Secret\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  pagerdutyToken: <pd-api-token>\n\n```\n\n### PagerDuty Service Configuration - ConfigMap\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.pagerduty: |\n    token: $pagerdutyToken\n    from: <emailid>\n\n```\n\n### Notification Template for PagerDuty\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.rollout-aborted: |\n    message: Rollout {{.rollout.metadata.name}} is aborted.\n    pagerduty:\n      title: \"Rollout {{.rollout.metadata.name}}\"\n      urgency: \"high\"\n      body: \"Rollout {{.rollout.metadata.name}} aborted \"\n      priorityID: \"<priorityID of incident>\"\n\n```\n\n### Annotation Sample for PagerDuty Notifications\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-rollout-aborted.pagerduty: \"<serviceID for PagerDuty>\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty", "title": "PagerDuty", "description": "The PagerDuty notification service is used to create PagerDuty incidents and requires specifying the following settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:13:51", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/notifications/services/pagerduty/", "readthedocs-http-status": "200", "title": "PagerDuty - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "ef341df2-c3c4-4ae1-851e-de6bf441cd39", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"PagerDuty\"?\n\nAssistant: Here are the recommended best practices:\n\n• A Priority is a label representing the importance and impact of an incident. This is only available on Standard and Enterprise plans of PagerDuty.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty", "title": "PagerDuty", "description": "The PagerDuty notification service is used to create PagerDuty incidents and requires specifying the following settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:13:51", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/notifications/services/pagerduty/", "readthedocs-http-status": "200", "title": "PagerDuty - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "ef341df2-c3c4-4ae1-851e-de6bf441cd39", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"PagerDuty V2\"?\n\nAssistant: The PagerDuty notification service is used to trigger PagerDuty events and requires specifying the following settings.\n\nHere's a detailed explanation:\n\n\n## Parameters\nThe PagerDuty notification service is used to trigger PagerDuty events and requires specifying the following settings:\n\n- `serviceKeys` \\- a dictionary with the following structure:\n- `service-name: $pagerduty-key-service-name` where `service-name` is the name you want to use for the service to make events for, and `$pagerduty-key-service-name` is a reference to the secret that contains the actual PagerDuty integration key (Events API v2 integration)\n\nIf you want multiple Argo apps to trigger events to their respective PagerDuty services, create an integration key in each service you want to setup alerts for.\n\nTo create a PagerDuty integration key, [follow these instructions](https://support.pagerduty.com/docs/services-and-integrations#create-a-generic-events-api-integration) to add an Events API v2 integration to the service of your choice.\n\n## Configuration\nThe following snippet contains sample PagerDuty service configuration. It assumes the service you want to alert on is called `my-service`.\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  pagerduty-key-my-service: <pd-integration-key>\n\n```\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.pagerdutyv2: |\n    serviceKeys:\n      my-service: $pagerduty-key-my-service\n\n```\n\n## Template\n[Notification templates](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/) support specifying subject for PagerDuty notifications:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.rollout-aborted: |\n    message: Rollout {{.rollout.metadata.name}} is aborted.\n    pagerdutyv2:\n      summary: \"Rollout {{.rollout.metadata.name}} is aborted.\"\n      severity: \"critical\"\n      source: \"{{.rollout.metadata.name}}\"\n\n```\n\nThe parameters for the PagerDuty configuration in the template generally match with the payload for the Events API v2 endpoint. All parameters are strings.\n\n- `summary` \\- (required) A brief text summary of the event, used to generate the summaries/titles of any associated alerts.\n- `severity` \\- (required) The perceived severity of the status the event is describing with respect to the affected system. Allowed values: `critical`, `warning`, `error`, `info`\n- `source` \\- (required) The unique location of the affected system, preferably a hostname or FQDN.\n- `component` \\- Component of the source machine that is responsible for the event.\n- `group` \\- Logical grouping of components of a service.\n- `class` \\- The class/type of the event.\n- `url` \\- The URL that should be used for the link \"View in ArgoCD\" in PagerDuty.\n\nThe `timestamp` and `custom_details` parameters are not currently supported.\n\n## Annotation\nAnnotation sample for PagerDuty notifications:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-rollout-aborted.pagerdutyv2: \"<serviceID for PagerDuty>\"\n\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty_v2", "title": "PagerDuty V2", "description": "The PagerDuty notification service is used to trigger PagerDuty events and requires specifying the following settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:14:11", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/pagerduty_v2/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "PagerDuty V2 - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "b5ed75bb-9858-44e2-8b31-ce7e99db3578", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty_v2", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty_v2/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"PagerDuty V2\"?\n\nAssistant: Here are some code examples:\n\n### PagerDuty Service Configuration - Secret\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  pagerduty-key-my-service: <pd-integration-key>\n\n```\n\n### PagerDuty Service Configuration - ConfigMap\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.pagerdutyv2: |\n    serviceKeys:\n      my-service: $pagerduty-key-my-service\n\n```\n\n### Notification Template for PagerDuty\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.rollout-aborted: |\n    message: Rollout {{.rollout.metadata.name}} is aborted.\n    pagerdutyv2:\n      summary: \"Rollout {{.rollout.metadata.name}} is aborted.\"\n      severity: \"critical\"\n      source: \"{{.rollout.metadata.name}}\"\n\n```\n\n### Annotation Sample for PagerDuty Notifications\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-rollout-aborted.pagerdutyv2: \"<serviceID for PagerDuty>\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty_v2", "title": "PagerDuty V2", "description": "The PagerDuty notification service is used to trigger PagerDuty events and requires specifying the following settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:14:11", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/pagerduty_v2/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "PagerDuty V2 - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "b5ed75bb-9858-44e2-8b31-ce7e99db3578", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty_v2", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty_v2/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"PagerDuty V2\"?\n\nAssistant: Here are the recommended best practices:\n\n• Create an integration key in each service you want to setup alerts for if you want multiple Argo apps to trigger events to their respective PagerDuty services.\n• Follow the instructions to add an Events API v2 integration to the service of your choice.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty_v2", "title": "PagerDuty V2", "description": "The PagerDuty notification service is used to trigger PagerDuty events and requires specifying the following settings.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:14:11", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/pagerduty_v2/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "PagerDuty V2 - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "b5ed75bb-9858-44e2-8b31-ce7e99db3578", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty_v2", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pagerduty_v2/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Pushover\"?\n\nAssistant: Instructions for integrating Pushover notifications with Argo CD.\n\nHere's a detailed explanation:\n\n\n## Creating a Pushover App\n1. Create an app at [pushover.net](https://pushover.net/apps/build).\n\n## Storing API Key in Secret and ConfigMap\n2. Store the API key in `<secret-name>` Secret and define the secret name in `argocd-notifications-cm` ConfigMap:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.pushover: |\n    token: $pushover-token\n```\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  pushover-token: avtc41pn13asmra6zaiyf7dh6cgx97\n```\n\n## Adding User Key to Application Resource\n1. Add your user key to your Application resource:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.pushover: uumy8u4owy7bgkapp6mc5mvhfsvpcd\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pushover", "title": "Pushover", "description": "Instructions for integrating Pushover notifications with Argo CD.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 01:14:30", "type": "overview", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Pushover - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/pushover/", "scrapeId": "379575c3-dcb6-45a2-a4d5-352b6306f1d1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pushover", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pushover/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Pushover\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap for Pushover\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.pushover: |\n    token: $pushover-token\n\n```\n\n### Secret for Pushover Token\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  pushover-token: avtc41pn13asmra6zaiyf7dh6cgx97\n\n```\n\n### Application Resource with User Key\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.pushover: uumy8u4owy7bgkapp6mc5mvhfsvpcd\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pushover", "title": "Pushover", "description": "Instructions for integrating Pushover notifications with Argo CD.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 01:14:30", "type": "code_examples", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Pushover - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/pushover/", "scrapeId": "379575c3-dcb6-45a2-a4d5-352b6306f1d1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pushover", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/pushover/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Rocket.Chat\"?\n\nAssistant: The Rocket.Chat notification service configuration includes settings and instructions for integrating Rocket.Chat with Argo CD notifications.\n\nHere's a detailed explanation:\n\n\n## Parameters\nThe Rocket.Chat notification service configuration includes following settings:\n\n- `email` \\- the Rocker.Chat user's SAMAccountName\n- `password` \\- the Rocker.Chat user's password\n- `alias` \\- optional alias that should be used to post message\n- `icon` \\- optional message icon\n- `avatar` \\- optional message avatar\n- `serverUrl` \\- optional Rocket.Chat server url\n\n## Configuration\n1. Login to your RocketChat instance\n2. Go to user management\n\n![2](https://user-images.githubusercontent.com/15252187/115824993-7ccad900-a411-11eb-89de-6a0c4438ffdf.png)\n\n1. Add new user with `bot` role. Also note that `Require password change` checkbox must be not checked\n\n![3](https://user-images.githubusercontent.com/15252187/115825174-b4d21c00-a411-11eb-8f20-cda48cea9fad.png)\n\n1. Copy username and password that you was created for bot user\n2. Create a public or private channel, or a team, for this example `my_channel`\n3. Add your bot to this channel **otherwise it won't work**\n4. Store email and password in argocd-notifications-secret Secret\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  rocketchat-email: <email>\n  rocketchat-password: <password>\n```\n\n1. Finally, use these credentials to configure the RocketChat integration in the `argocd-configmap` config map:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.rocketchat: |\n    email: $rocketchat-email\n    password: $rocketchat-password\n```\n\n1. Create a subscription for your Rocket.Chat integration:\n\n_Note: channel, team or user must be prefixed with # or @ elsewhere we will be interpretative destination as a room ID_\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.rocketchat: #my_channel\n``\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/rocketchat", "title": "Rocket.Chat", "description": "The Rocket.Chat notification service configuration includes settings and instructions for integrating Rocket.Chat with Argo CD notifications.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:14:58", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/operator-manual/notifications/services/rocketchat/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Rocket.Chat - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "d72ffc1c-5d5b-4fe3-9868-8c59b2b90b04", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/rocketchat", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/rocketchat/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Rocket.Chat\"?\n\nAssistant: Here are some code examples:\n\n### Secret Configuration\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  rocketchat-email: <email>\n  rocketchat-password: <password>\n\n```\n\n### ConfigMap Configuration\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.rocketchat: |\n    email: $rocketchat-email\n    password: $rocketchat-password\n\n```\n\n### Application Subscription\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.rocketchat: #my_channel\n\n```\n\n### Notification Template with Attachments\n```yaml\ntemplate.app-sync-status: |\n  message: |\n    Application {{.app.metadata.name}} sync is {{.app.status.sync.status}}.\n    Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  rocketchat:\n    attachments: |\n      [{\\\n        \"title\": \"{{.app.metadata.name}}\",\\\n        \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\\\n        \"color\": \"#18be52\",\\\n        \"fields\": [{\\\n          \"title\": \"Sync Status\",\\\n          \"value\": \"{{.app.status.sync.status}}\",\\\n          \"short\": true\\\n        }, {\\\n          \"title\": \"Repository\",\\\n          \"value\": \"{{.app.spec.source.repoURL}}\",\\\n          \"short\": true\\\n        }]\\\n      }]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/rocketchat", "title": "Rocket.Chat", "description": "The Rocket.Chat notification service configuration includes settings and instructions for integrating Rocket.Chat with Argo CD notifications.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:14:58", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/operator-manual/notifications/services/rocketchat/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Rocket.Chat - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "d72ffc1c-5d5b-4fe3-9868-8c59b2b90b04", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/rocketchat", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/rocketchat/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Rocket.Chat\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the 'Require password change' checkbox is not checked when creating the bot user.\n• Add your bot to the channel to ensure it works properly.\n• Use the correct prefix (# or @) for channels, teams, or users in subscriptions.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/rocketchat", "title": "Rocket.Chat", "description": "The Rocket.Chat notification service configuration includes settings and instructions for integrating Rocket.Chat with Argo CD notifications.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:14:58", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/operator-manual/notifications/services/rocketchat/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Rocket.Chat - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "d72ffc1c-5d5b-4fe3-9868-8c59b2b90b04", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/rocketchat", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/rocketchat/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Slack\"?\n\nAssistant: If you want to send message using incoming webhook, you can use webhook.\n\nHere's a detailed explanation:\n\n\n## Parameters\nThe Slack notification service configuration includes following settings:\n\n| **Option** | **Required** | **Type** | **Description** | **Example** |\n| --- | --- | --- | --- | --- |\n| `apiURL` | False | `string` | The server URL. | `https://example.com/api` |\n| `channels` | False | `list[string]` |  | `[\"my-channel-1\", \"my-channel-2\"]` |\n| `icon` | False | `string` | The app icon. | `:robot_face:` or `https://example.com/image.png` |\n| `insecureSkipVerify` | False | `bool` |  | `true` |\n| `signingSecret` | False | `string` |  | `8f742231b10e8888abcd99yyyzzz85a5` |\n| `token` | **True** | `string` | The app's OAuth access token. | `xoxb-1234567890-1234567890123-5n38u5ed63fgzqlvuyxvxcx6` |\n| `username` | False | `string` | The app username. | `argocd` |\n| `disableUnfurl` | False | `bool` | Disable slack unfurling links in messages | `true` \n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack", "title": "Slack", "description": "If you want to send message using incoming webhook, you can use webhook.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:15:21", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/notifications/services/slack/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Slack - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "2cf435f5-0c43-4031-bf92-4a49ee748a56", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Slack\"?\n\nAssistant: Here are some code examples:\n\n### Store Oauth access token in argocd-notifications-secret secret\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n    name: <secret-name>\nstringData:\n    slack-token: <Oauth-access-token>\n\n```\n\n### Define service type slack in data section of argocd-notifications-cm configmap\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.slack: |\n    token: $slack-token\n\n```\n\n### Add annotation in application yaml file to enable notifications for specific argocd app\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: my_channel\n\n```\n\n### Annotation with more than one trigger\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscriptions: |\n  - trigger: [on-scaling-replica-set, on-rollout-updated, on-rollout-step-completed]\n    destinations:\n      - service: slack\n        recipients: [my-channel-1, my-channel-2]\n      - service: email\n        recipients: [recipient-1, recipient-2, recipient-3 ]\n  - trigger: [on-rollout-aborted, on-analysis-run-failed, on-analysis-run-error]\n    destinations:\n      - service: slack\n        recipients: [my-channel-21, my-channel-22]\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack", "title": "Slack", "description": "If you want to send message using incoming webhook, you can use webhook.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:15:21", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/notifications/services/slack/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Slack - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "2cf435f5-0c43-4031-bf92-4a49ee748a56", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Slack\"?\n\nAssistant: Here are the recommended best practices:\n\n• Create a public or private channel and invite your slack bot to this channel; otherwise, the slack bot won't be able to deliver notifications to this channel.\n• When multiple applications will be updated at the same time or frequently, aggregate messages with a grouping key to make them easier to read.\n• Specify an icon and username for each message in the template if needed.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack", "title": "Slack", "description": "If you want to send message using incoming webhook, you can use webhook.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:15:21", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/notifications/services/slack/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Slack - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "2cf435f5-0c43-4031-bf92-4a49ee748a56", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Teams\"?\n\nAssistant: The Teams notification service send message notifications using Teams bot and requires specifying the following settings:\n\nHere's a detailed explanation:\n\n\n## Parameters\nThe Teams notification service send message notifications using Teams bot and requires specifying the following settings:\n\n- `recipientUrls` \\- the webhook url map, e.g. `channelName: https://example.com`\n\n## Configuration\n1. Open `Teams` and goto `Apps`\n2. Find `Incoming Webhook` microsoft app and click on it\n3. Press `Add to a team` -> select team and channel -> press `Set up a connector`\n4. Enter webhook name and upload image (optional)\n5. Press `Create` then copy webhook url and store it in `argocd-notifications-secret` and define it in `argocd-notifications-cm`\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.teams: |\n    recipientUrls:\n      channelName: $channel-teams-url\n```\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  channel-teams-url: https://example.com\n```\n\n1. Create subscription for your Teams integration:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.teams: channelName\n```\n\n## Templates\n[Notification templates](https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/) can be customized to leverage teams message sections, facts, themeColor, summary and potentialAction [feature](https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using).\n\n```yaml\ntemplate.app-sync-succeeded: |\n  teams:\n    themeColor: \"#000080\"\n    sections: |\n      [{\\\n        \"facts\": [\\\n          {\\\n            \"name\": \"Sync Status\",\\\n            \"value\": \"{{.app.status.sync.status}}\"\\\n          },\\\n          {\\\n            \"name\": \"Repository\",\\\n            \"value\": \"{{.app.spec.source.repoURL}}\"\\\n          }\\\n        ]\\\n      }]\n    potentialAction: |-\n      [{\\\n        \"@type\":\"OpenUri\",\\\n        \"name\":\"Operation Details\",\\\n        \"targets\":[{\\\n          \"os\":\"default\",\\\n          \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\\\n        }]\\\n      }]\n    title: Application {{.app.metadata.name}} has been successfully synced\n    text: Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n    summary: \"{{.app.metadata.name}} sync succeeded\"\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/teams", "title": "Teams", "description": "The Teams notification service send message notifications using Teams bot and requires specifying the following settings:", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:16:52", "type": "overview", "page_metadata": {"title": "Teams - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/notifications/services/teams/", "scrapeId": "7c4d2362-b265-4e03-90d0-f68da579c172", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/teams", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/teams/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Teams\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap for Teams Notification\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.teams: |\n    recipientUrls:\n      channelName: $channel-teams-url\n\n```\n\n### Secret for Teams Webhook URL\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  channel-teams-url: https://example.com\n\n```\n\n### Application Subscription for Teams Integration\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.teams: channelName\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/teams", "title": "Teams", "description": "The Teams notification service send message notifications using Teams bot and requires specifying the following settings:", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:16:52", "type": "code_examples", "page_metadata": {"title": "Teams - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/notifications/services/teams/", "scrapeId": "7c4d2362-b265-4e03-90d0-f68da579c172", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/teams", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/teams/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Teams\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can use `facts` field instead of `sections` field.\n• You can set theme color as hex string for the message.\n• You can set a summary of the message that will be shown on Notification & Activity Feed.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/teams", "title": "Teams", "description": "The Teams notification service send message notifications using Teams bot and requires specifying the following settings:", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:16:52", "type": "best_practices", "page_metadata": {"title": "Teams - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/notifications/services/teams/", "scrapeId": "7c4d2362-b265-4e03-90d0-f68da579c172", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/teams", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/teams/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Telegram\"?\n\nAssistant: Instructions for integrating Telegram notifications with Argo CD.\n\nHere's a detailed explanation:\n\n\n## Getting Started\n1. Get an API token using [@Botfather](https://t.me/Botfather).\n2. Store token in `<secret-name>` Secret and configure telegram integration in `argocd-notifications-cm` ConfigMap:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.telegram: |\n    token: $telegram-token\n```\n\n## Creating a Telegram Channel\n1. Create new Telegram [channel](https://telegram.org/blog/channels).\n2. Add your bot as an administrator.\n3. Use this channel `username` (public channel) or `chatID` (private channel) in the subscription for your Telegram integration:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.telegram: username\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/telegram", "title": "Telegram", "description": "Instructions for integrating Telegram notifications with Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:17:13", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Telegram - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/telegram/", "scrapeId": "3e229b1f-8a26-4d62-b1ca-e0881d19378d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/telegram", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/telegram/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Telegram\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap for Telegram Integration\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.telegram: |\n    token: $telegram-token\n\n```\n\n### Application Subscription for Public Channel\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.telegram: username\n\n```\n\n### Application Subscription for Private Channel\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.telegram: -1000000000000\n\n```\n\n### Application Subscription with Thread ID\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.telegram: -1000000000000|2\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/telegram", "title": "Telegram", "description": "Instructions for integrating Telegram notifications with Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:17:13", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Telegram - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/telegram/", "scrapeId": "3e229b1f-8a26-4d62-b1ca-e0881d19378d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/telegram", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/telegram/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Telegram\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure your bot has the necessary permissions in the Telegram channel.\n• Use the correct format for the channel username or chatID when configuring subscriptions.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/telegram", "title": "Telegram", "description": "Instructions for integrating Telegram notifications with Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:17:13", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Telegram - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/telegram/", "scrapeId": "3e229b1f-8a26-4d62-b1ca-e0881d19378d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/telegram", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/telegram/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Webex Teams\"?\n\nAssistant: Configuration for the Webex Teams notification service in Argo CD.\n\nHere's a detailed explanation:\n\n\n## Parameters\nThe Webex Teams notification service configuration includes following settings:\n\n- `token` \\- the app token\n\n## Configuration\n1. Create a Webex [Bot](https://developer.webex.com/docs/bots)\n2. Copy the bot access [token](https://developer.webex.com/my-apps) and store it in the `argocd-notifications-secret` Secret and configure Webex Teams integration in `argocd-notifications-cm` ConfigMap\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  webex-token: <bot access token>\n```\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webex: |\n    token: $webex-token\n```\n\n3. Create subscription for your Webex Teams integration\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.webex: <personal email or room id>\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webex", "title": "Webex Teams", "description": "Configuration for the Webex Teams notification service in Argo CD.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 01:17:37", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "Webex Teams - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/notifications/services/webex/", "readthedocs-version-slug": "stable", "scrapeId": "3e2e8df4-fa95-4fd4-b475-2c1643b95d53", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webex", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webex/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Webex Teams\"?\n\nAssistant: Here are some code examples:\n\n### Secret Configuration\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <secret-name>\nstringData:\n  webex-token: <bot access token>\n\n```\n\n### ConfigMap Configuration\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webex: |\n    token: $webex-token\n\n```\n\n### Application Subscription\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.webex: <personal email or room id>\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webex", "title": "Webex Teams", "description": "Configuration for the Webex Teams notification service in Argo CD.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 01:17:37", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "Webex Teams - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/notifications/services/webex/", "readthedocs-version-slug": "stable", "scrapeId": "3e2e8df4-fa95-4fd4-b475-2c1643b95d53", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webex", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webex/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Additional configuration method\"?\n\nAssistant: Additional configuration methods for configuring commands `argocd-server`, `argocd-repo-server` and `argocd-application-controller`.\n\nHere's a detailed explanation:\n\n\n## Additional configuration methods\nAdditional configuration methods for configuring commands `argocd-server`, `argocd-repo-server` and `argocd-application-controller`.\n\n## Synopsis\nThe commands can also be configured by setting the respective flag of the available options in `argocd-cmd-params-cm.yaml`. Each component has a specific prefix associated with it.\n\n```\nargocd-server                 --> server\nargocd-repo-server            --> reposerver\nargocd-application-controller --> controller\n```\n\nThe flags that do not have a prefix are shared across multiple components. One such flag is `repo.server`\nThe list of flags that are available can be found in [argocd-cmd-params-cm.yaml](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cmd-params-cm.yaml)\n\n## Example\nTo set `logformat` of `argocd-application-controller`, add below entry to the config map `argocd-cmd-params-cm.yaml`.\n\n```\ndata:\n    controller.log.format: \"text\"\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/additional-configuration-method", "title": "Additional configuration method", "description": "Additional configuration methods for configuring commands `argocd-server`, `argocd-repo-server` and `argocd-application-controller`.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 01:22:07", "type": "overview", "page_metadata": {"title": "Additional configuration method - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/server-commands/additional-configuration-method/", "scrapeId": "4ce63f54-baa6-48c2-a2f4-b4e55925d23a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/additional-configuration-method", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/additional-configuration-method/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Additional configuration method\"?\n\nAssistant: Here are some code examples:\n\n### Synopsis of command prefixes\n```yaml\n```\nargocd-server                 --> server\nargocd-repo-server            --> reposerver\nargocd-application-controller --> controller\n```\n```\n\n### Example of setting log format\n```yaml\n```\ndata:\n    controller.log.format: \"text\"\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/additional-configuration-method", "title": "Additional configuration method", "description": "Additional configuration methods for configuring commands `argocd-server`, `argocd-repo-server` and `argocd-application-controller`.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 01:22:07", "type": "code_examples", "page_metadata": {"title": "Additional configuration method - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/server-commands/additional-configuration-method/", "scrapeId": "4ce63f54-baa6-48c2-a2f4-b4e55925d23a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/additional-configuration-method", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/additional-configuration-method/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-application-controller Command Reference\"?\n\nAssistant: Run ArgoCD Application Controller\n\nHere's a detailed explanation:\n\n\n## Synopsis\nArgoCD application controller is a Kubernetes controller that continuously monitors running applications and compares the current, live state against the desired target state (as specified in the repo). This command runs Application Controller in the foreground. It can be configured by following options.\n\n## Options\n--app-hard-resync int                                       Time period in seconds for application hard resync.\n--app-resync int                                            Time period in seconds for application resync. (default 180)\n--app-resync-jitter int                                     Maximum time period in seconds to add as a delay jitter for application resync.\n--app-state-cache-expiration duration                       Cache expiration for app state (default 1h0m0s)\n--application-namespaces strings                            List of additional namespaces that applications are allowed to be reconciled from\n--as string                                                 Username to impersonate for the operation\n--as-group stringArray                                      Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n--as-uid string                                             UID to impersonate for the operation\n--certificate-authority string                              Path to a cert file for the certificate authority\n--client-certificate string                                 Path to a client certificate file for TLS\n--client-key string                                         Path to a client key file for TLS\n--cluster string                                            The name of the kubeconfig cluster to use\n--commit-server string                                      Commit server address. (default \"argocd-commit-server:8086\")\n--context string                                            The name of the kubeconfig context to use\n--default-cache-expiration duration                         Cache expiration default (default 24h0m0s)\n--disable-compression                                       If true, opt-out of response compression for all requests to the server\n--dynamic-cluster-distribution-enabled                      Enables dynamic cluster distribution.\n--enable-k8s-event none                                     Enable ArgoCD to use k8s event. For disabling all events, set the value as none. (e.g --enable-k8s-event=none), For enabling specific events, set the value as `event reason`. (e.g --enable-k8s-event=StatusRefreshed,ResourceCreated) (default [all])\n--gloglevel int                                             Set the glog logging level\n-h, --help                                                  help for argocd-application-controller\n--hydrator-enabled                                          Feature flag to enable Hydrator. Default (\"false\")\n--ignore-normalizer-jq-execution-timeout-seconds duration   Set ignore normalizer JQ execution timeout\n--insecure-skip-tls-verify                                  If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n--kubeconfig string                                         Path to a kube config. Only required if out-of-cluster\n--kubectl-parallelism-limit int                             Number of allowed concurrent kubectl fork/execs. Any value less than 1 means no limit. (default 20)\n--logformat string                                          Set the logging format. One of: text|json (default \"text\")\n--loglevel string                                           Set the logging level. One of: debug|info|warn|error (default \"info\")\n--metrics-application-conditions strings                    List of Application conditions that will be added to the argocd_application_conditions metric\n--metrics-application-labels strings                        List of Application labels that will be added to the argocd_application_labels metric\n--metrics-cache-expiration duration                         Prometheus metrics cache expiration (disabled  by default. e.g. 24h0m0s)\n--metrics-port int                                          Start metrics server on given port (default 8082)\n-n, --namespace string                                      If present, the namespace scope for this CLI request\n--operation-processors int                                  Number of application operation processors (default 10)\n--otlp-address string                                       OpenTelemetry collector address to send traces to\n--otlp-attrs strings                                        List of OpenTelemetry collector extra attrs when send traces, each attribute is separated by a colon(e.g. key:value)\n--otlp-headers stringToString                               List of OpenTelemetry collector extra headers sent with traces, headers are comma-separated key-value pairs(e.g. key1=value1,key2=value2) (default [])\n--otlp-insecure                                             OpenTelemetry collector insecure mode (default true)\n--password string                                           Password for basic authentication to the API server\n--persist-resource-health                                   Enables storing the managed resources health in the Application CRD (default true)\n--proxy-url string                                          If provided, this URL will be used to connect via proxy\n--redis string                                              Redis server hostname and port (e.g. argocd-redis:6379).\n--redis-ca-certificate string                               Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation.\n--redis-client-certificate string                           Path to Redis client certificate (e.g. /etc/certs/redis/client.crt).\n--redis-client-key string                                   Path to Redis client key (e.g. /etc/certs/redis/client.crt).\n--redis-compress string                                     Enable compression for data sent to Redis with the required compression algorithm. (possible values: gzip, none) (default \"gzip\")\n--redis-insecure-skip-tls-verify                            Skip Redis server certificate validation.\n--redis-use-tls                                             Use TLS when connecting to Redis.\n--redisdb int                                               Redis database.\n--repo-error-grace-period-seconds int                       Grace period in seconds for ignoring consecutive errors while communicating with repo server. (default 180)\n--repo-server string                                        Repo server address. (default \"argocd-repo-server:8081\")\n--repo-server-plaintext                                     Disable TLS on connections to repo server\n--repo-server-strict-tls                                    Whether to use strict validation of the TLS cert presented by the repo server\n--repo-server-timeout-seconds int                           Repo server RPC call timeout seconds. (default 60)\n--request-timeout string                                    The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n--self-heal-backoff-cap-seconds int                         Specifies max timeout of exponential backoff between application self heal attempts (default 300)\n--self-heal-backoff-factor int                              Specifies factor of exponential timeout between application self heal attempts (default 3)\n--self-heal-backoff-timeout-seconds int                     Specifies initial timeout of exponential backoff between self heal attempts (default 2)\n--self-heal-timeout-seconds int                             Specifies timeout between application self heal attempts\n--sentinel stringArray                                      Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379).\n--sentinelmaster string                                     Redis sentinel master group name. (default \"master\")\n--server string                                             The address and port of the Kubernetes API server\n--server-side-diff-enabled                                  Feature flag to enable ServerSide diff. Default (\"false\")\n--sharding-method string                                    Enables choice of sharding method. Supported sharding methods are : [legacy, round-robin, consistent-hashing]  (default \"legacy\")\n--status-processors int                                     Number of application status processors (default 20)\n--sync-timeout int                                          Specifies the timeout after which a sync would be terminated. 0 means no timeout (default 0).\n--tls-server-name string                                    If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n--token string                                              Bearer token for authentication to the API server\n--user string                                               The name of the kubeconfig user to use\n--username string                                           Username for basic authentication to the API server\n--wq-backoff-factor float                                   Set Workqueue Per Item Rate Limiter Backoff Factor, default is 1.5 (default 1.5)\n--wq-basedelay-ns duration                                  Set Workqueue Per Item Rate Limiter Base Delay duration in nanoseconds, default 1000000 (1ms) (default 1ms)\n--wq-bucket-qps float                                       Set Workqueue Rate Limiter Bucket QPS, default set to MaxFloat64 which disables the bucket limiter (default 1.7976931348623157e+308)\n--wq-bucket-size int                                        Set Workqueue Rate Limiter Bucket Size, default 500 (default 500)\n--wq-cooldown-ns duration                                   Set Workqueue Per Item Rate Limiter Cooldown duration in ns, default 0(per item rate limiter disabled)\n--wq-maxdelay-ns duration                                   Set Workqueue Per Item Rate Limiter Max Delay duration in nanoseconds, default 1000000000 (1s) (default 1s)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-application-controller", "title": "argocd-application-controller Command Reference", "description": "Run ArgoCD Application Controller", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 01:22:47", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-application-controller/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "argocd-application-controller Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "81ff10ef-a71b-4dcf-91a8-e77922f6f756", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-application-controller", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-application-controller/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-application-controller Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nargocd-application-controller [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-application-controller", "title": "argocd-application-controller Command Reference", "description": "Run ArgoCD Application Controller", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 01:22:47", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-application-controller/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "argocd-application-controller Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "81ff10ef-a71b-4dcf-91a8-e77922f6f756", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-application-controller", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-application-controller/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-dex Command Reference\"?\n\nAssistant: argocd-dex tools used by Argo CD\n\nHere's a detailed explanation:\n\n\n## Synopsis\nargocd-dex has internal utility tools used by Argo CD\n\n```\nargocd-dex [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex", "title": "argocd-dex Command Reference", "description": "argocd-dex tools used by Argo CD", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:22:54", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-dex/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd-dex Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "08ab2973-8720-4d80-b68d-6653376cf26f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-dex Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### argocd-dex Command\n```yaml\nargocd-dex [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex", "title": "argocd-dex Command Reference", "description": "argocd-dex tools used by Argo CD", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:22:54", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-dex/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd-dex Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "08ab2973-8720-4d80-b68d-6653376cf26f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd-dex Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -h or --help flag to get help for argocd-dex.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex", "title": "argocd-dex Command Reference", "description": "argocd-dex tools used by Argo CD", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:22:54", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-dex/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd-dex Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "08ab2973-8720-4d80-b68d-6653376cf26f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-dex gendexcfg Command Reference\"?\n\nAssistant: Generates a dex config from Argo CD settings\n\nHere's a detailed explanation:\n\n\n## argocd-dex gendexcfg\nGenerates a dex config from Argo CD settings\n\n```\nargocd-dex gendexcfg [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_gendexcfg", "title": "argocd-dex gendexcfg Command Reference", "description": "Generates a dex config from Argo CD settings", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:24:28", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd-dex gendexcfg Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-dex_gendexcfg/", "readthedocs-version-slug": "stable", "scrapeId": "6244d560-c800-436e-9d6f-738222cc1233", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_gendexcfg", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_gendexcfg/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-dex gendexcfg Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n      --disable-tls                    Disable TLS on the HTTP endpoint\n  -h, --help                           help for gendexcfg\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n      --logformat string               Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string               If present, the namespace scope for this CLI request\n  -o, --out string                     Output to the specified file instead of stdout\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_gendexcfg", "title": "argocd-dex gendexcfg Command Reference", "description": "Generates a dex config from Argo CD settings", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:24:28", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd-dex gendexcfg Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-dex_gendexcfg/", "readthedocs-version-slug": "stable", "scrapeId": "6244d560-c800-436e-9d6f-738222cc1233", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_gendexcfg", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_gendexcfg/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-dex rundex Command Reference\"?\n\nAssistant: Runs dex generating a config using settings from the Argo CD configmap and secret\n\nHere's a detailed explanation:\n\n\n## argocd-dex rundex\nRuns dex generating a config using settings from the Argo CD configmap and secret\n\n```\nargocd-dex rundex [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_rundex", "title": "argocd-dex rundex Command Reference", "description": "Runs dex generating a config using settings from the Argo CD configmap and secret", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:24:45", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd-dex rundex Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-dex_rundex/", "scrapeId": "4602858d-451e-4b6f-8ef1-03c30edc5a54", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_rundex", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_rundex/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-dex rundex Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n      --disable-tls                    Disable TLS on the HTTP endpoint\n  -h, --help                           help for rundex\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n      --logformat string               Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_rundex", "title": "argocd-dex rundex Command Reference", "description": "Runs dex generating a config using settings from the Argo CD configmap and secret", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:24:45", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd-dex rundex Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-dex_rundex/", "scrapeId": "4602858d-451e-4b6f-8ef1-03c30edc5a54", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_rundex", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-dex_rundex/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-repo-server Command Reference\"?\n\nAssistant: Run ArgoCD Repository Server\n\nHere's a detailed explanation:\n\n\n## Synopsis\nArgoCD Repository Server is an internal service which maintains a local cache of the Git repository holding the application manifests, and is responsible for generating and returning the Kubernetes manifests. This command runs Repository Server in the foreground. It can be configured by following options.\n\n## Options\n--address string                                 Listen on given address for incoming connections (default \"0.0.0.0\")\n--allow-oob-symlinks                             Allow out-of-bounds symlinks in repositories (not recommended)\n--default-cache-expiration duration              Cache expiration default (default 24h0m0s)\n--disable-helm-manifest-max-extracted-size       Disable maximum size of helm manifest archives when extracted\n--disable-tls                                    Disable TLS on the gRPC endpoint\n--helm-manifest-max-extracted-size string        Maximum size of helm manifest archives when extracted (default \"1G\")\n--helm-registry-max-index-size string            Maximum size of registry index file (default \"1G\")\n-h, --help                                           help for argocd-repo-server\n--include-hidden-directories                     Include hidden directories from Git\n--logformat string                               Set the logging format. One of: text|json (default \"text\")\n--loglevel string                                Set the logging level. One of: debug|info|warn|error (default \"info\")\n--max-combined-directory-manifests-size string   Max combined size of manifest files in a directory-type Application (default \"10M\")\n--metrics-address string                         Listen on given address for metrics (default \"0.0.0.0\")\n--metrics-port int                               Start metrics server on given port (default 8084)\n--otlp-address string                            OpenTelemetry collector address to send traces to\n--otlp-attrs strings                             List of OpenTelemetry collector extra attrs when send traces, each attribute is separated by a colon(e.g. key:value)\n--otlp-headers stringToString                    List of OpenTelemetry collector extra headers sent with traces, headers are comma-separated key-value pairs(e.g. key1=value1,key2=value2) (default [])\n--otlp-insecure                                  OpenTelemetry collector insecure mode (default true)\n--parallelismlimit int                           Limit on number of concurrent manifests generate requests. Any value less the 1 means no limit.\n--plugin-tar-exclude stringArray                 Globs to filter when sending tarballs to plugins.\n--plugin-use-manifest-generate-paths             Pass the resources described in argocd.argoproj.io/manifest-generate-paths value to the cmpserver to generate the application manifests.\n--port int                                       Listen on given port for incoming connections (default 8081)\n--redis string                                   Redis server hostname and port (e.g. argocd-redis:6379).\n--redis-ca-certificate string                    Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation.\n--redis-client-certificate string                Path to Redis client certificate (e.g. /etc/certs/redis/client.crt).\n--redis-client-key string                        Path to Redis client key (e.g. /etc/certs/redis/client.crt).\n--redis-compress string                          Enable compression for data sent to Redis with the required compression algorithm. (possible values: gzip, none) (default \"gzip\")\n--redis-insecure-skip-tls-verify                 Skip Redis server certificate validation.\n--redis-use-tls                                  Use TLS when connecting to Redis.\n--redisdb int                                    Redis database.\n--repo-cache-expiration duration                 Cache expiration for repo state, incl. app lists, app details, manifest generation, revision meta-data (default 24h0m0s)\n--revision-cache-expiration duration             Cache expiration for cached revision (default 3m0s)\n--revision-cache-lock-timeout duration           Cache TTL for locks to prevent duplicate requests on revisions, set to 0 to disable (default 10s)\n--sentinel stringArray                           Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379).\n--sentinelmaster string                          Redis sentinel master group name. (default \"master\")\n--streamed-manifest-max-extracted-size string    Maximum size of streamed manifest archives when extracted (default \"1G\")\n--streamed-manifest-max-tar-size string          Maximum size of streamed manifest archives (default \"100M\")\n--tlsciphers string                              The list of acceptable ciphers to be used when establishing TLS connections. Use 'list' to list available ciphers. (default \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\")\n--tlsmaxversion string                           The maximum SSL/TLS version that is acceptable (one of: 1.0|1.1|1.2|1.3) (default \"1.3\")\n--tlsminversion string                           The minimum SSL/TLS version that is acceptable (one of: 1.0|1.1|1.2|1.3) (default \"1.2\")\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-repo-server", "title": "argocd-repo-server Command Reference", "description": "Run ArgoCD Repository Server", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:26:15", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "argocd-repo-server Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-repo-server/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1b051b73-2672-41ef-8922-4b8af86f28c6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-repo-server", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-repo-server/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-repo-server Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nargocd-repo-server [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-repo-server", "title": "argocd-repo-server Command Reference", "description": "Run ArgoCD Repository Server", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:26:15", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "argocd-repo-server Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-repo-server/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1b051b73-2672-41ef-8922-4b8af86f28c6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-repo-server", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-repo-server/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd-repo-server Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Allow out-of-bounds symlinks in repositories is not recommended.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-repo-server", "title": "argocd-repo-server Command Reference", "description": "Run ArgoCD Repository Server", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:26:15", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "argocd-repo-server Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-repo-server/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1b051b73-2672-41ef-8922-4b8af86f28c6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-repo-server", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-repo-server/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-server Command Reference\"?\n\nAssistant: Run the ArgoCD API server\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThe API server is a gRPC/REST server which exposes the API consumed by the Web UI, CLI, and CI/CD systems. This command runs API server in the foreground. It can be configured by following options.\n\n```\nargocd-server [flags]\n```\n\n\n## Examples\n```\n  # Start the Argo CD API server with default settings\n  $ argocd-server\n\n  # Start the Argo CD API server on a custom port and enable tracing\n  $ argocd-server --port 8888 --otlp-address localhost:4317\n```\n\n\n## Options\n```\n      --address string                                  Listen on given address (default \"0.0.0.0\")\n      --api-content-types string                        Semicolon separated list of allowed content types for non GET api requests. Any content type is allowed if empty. (default \"application/json\")\n      --app-state-cache-expiration duration             Cache expiration for app state (default 1h0m0s)\n      --application-namespaces strings                  List of additional namespaces where application resources can be managed in\n      --appset-allowed-scm-providers strings            The list of allowed custom SCM provider API URLs. This restriction does not apply to SCM or PR generators which do not accept a custom API URL. (Default: Empty = all)\n      --appset-enable-new-git-file-globbing             Enable new globbing in Git files generator.\n      --appset-enable-scm-providers                     Enable retrieving information from SCM providers, used by the SCM and PR generators (Default: true) (default true)\n      --appset-scm-root-ca-path string                  Provide Root CA Path for self-signed TLS Certificates\n      --as string                                       Username to impersonate for the operation\n      --as-group stringArray                            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                                   UID to impersonate for the operation\n      --basehref string                                 Value for base href in index.html. Used if Argo CD is running behind reverse proxy under subpath different from / (default \"/\")\n      --certificate-authority string                    Path to a cert file for the certificate authority\n      --client-certificate string                       Path to a client certificate file for TLS\n      --client-key string                               Path to a client key file for TLS\n      --cluster string                                  The name of the kubeconfig cluster to use\n      --connection-status-cache-expiration duration     Cache expiration for cluster/repo connection status (default 1h0m0s)\n      --content-security-policy value                   Set Content-Security-Policy header in HTTP responses to value. To disable, set to \"\". (default \"frame-ancestors 'self';\")\n      --context string                                  The name of the kubeconfig context to use\n      --default-cache-expiration duration               Cache expiration default (default 24h0m0s)\n      --dex-server string                               Dex server address (default \"argocd-dex-server:5556\")\n      --dex-server-plaintext                            Use a plaintext client (non-TLS) to connect to dex server\n      --dex-server-strict-tls                           Perform strict validation of TLS certificates when connecting to dex server\n      --disable-auth                                    Disable client authentication\n      --disable-compression                             If true, opt-out of response compression for all requests to the server\n      --enable-gzip                                     Enable GZIP compression (default true)\n      --enable-k8s-event none                           Enable ArgoCD to use k8s event. For disabling all events, set the value as none. (e.g --enable-k8s-event=none), For enabling specific events, set the value as `event reason`. (e.g --enable-k8s-event=StatusRefreshed,ResourceCreated) (default [all])\n      --enable-proxy-extension                          Enable Proxy Extension feature\n      --gloglevel int                                   Set the glog logging level\n  -h, --help                                            help for argocd-server\n      --hydrator-enabled                                Feature flag to enable Hydrator. Default (\"false\")\n      --insecure                                        Run server without TLS\n      --insecure-skip-tls-verify                        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string                               Path to a kube config. Only required if out-of-cluster\n      --logformat string                                Set the logging format. One of: text|json (default \"text\")\n      --login-attempts-expiration duration              Cache expiration for failed login attempts (default 24h0m0s)\n      --loglevel string                                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --metrics-address string                          Listen for metrics on given address (default \"0.0.0.0\")\n      --metrics-port int                                Start metrics on given port (default 8083)\n  -n, --namespace string                                If present, the namespace scope for this CLI request\n      --oidc-cache-expiration duration                  Cache expiration for OIDC state (default 3m0s)\n      --otlp-address string                             OpenTelemetry collector address to send traces to\n      --otlp-attrs strings                              List of OpenTelemetry collector extra attrs when send traces, each attribute is separated by a colon(e.g. key:value)\n      --otlp-headers stringToString                     List of OpenTelemetry collector extra headers sent with traces, headers are comma-separated key-value pairs(e.g. key1=value1,key2=value2) (default [])\n      --otlp-insecure                                   OpenTelemetry collector insecure mode (default true)\n      --password string                                 Password for basic authentication to the API server\n      --port int                                        Listen on given port (default 8080)\n      --proxy-url string                                If provided, this URL will be used to connect via proxy\n      --redis string                                    Redis server hostname and port (e.g. argocd-redis:6379).\n      --redis-ca-certificate string                     Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation.\n      --redis-client-certificate string                 Path to Redis client certificate (e.g. /etc/certs/redis/client.crt).\n      --redis-client-key string                         Path to Redis client key (e.g. /etc/certs/redis/client.crt).\n      --redis-compress string                           Enable compression for data sent to Redis with the required compression algorithm. (possible values: gzip, none) (default \"gzip\")\n      --redis-insecure-skip-tls-verify                  Skip Redis server certificate validation.\n      --redis-use-tls                                   Use TLS when connecting to Redis.\n      --redisdb int                                     Redis database.\n      --repo-cache-expiration duration                  Cache expiration for repo state, incl. app lists, app details, manifest generation, revision meta-data (default 24h0m0s)\n      --repo-server string                              Repo server address (default \"argocd-repo-server:8081\")\n      --repo-server-default-cache-expiration duration   Cache expiration default (default 24h0m0s)\n      --repo-server-plaintext                           Use a plaintext client (non-TLS) to connect to repository server\n      --repo-server-redis string                        Redis server hostname and port (e.g. argocd-redis:6379).\n      --repo-server-redis-ca-certificate string         Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation.\n      --repo-server-redis-client-certificate string     Path to Redis client certificate (e.g. /etc/certs/redis/client.crt).\n      --repo-server-redis-client-key string             Path to Redis client key (e.g. /etc/certs/redis/client.crt).\n      --repo-server-redis-compress string               Enable compression for data sent to Redis with the required compression algorithm. (possible values: gzip, none) (default \"gzip\")\n      --repo-server-redis-insecure-skip-tls-verify      Skip Redis server certificate validation.\n      --repo-server-redis-use-tls                       Use TLS when connecting to Redis.\n      --repo-server-redisdb int                         Redis database.\n      --repo-server-sentinel stringArray                Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379).\n      --repo-server-sentinelmaster string               Redis sentinel master group name. (default \"master\")\n      --repo-server-strict-tls                          Perform strict validation of TLS certificates when connecting to repo server\n      --repo-server-timeout-seconds int                 Repo server RPC call timeout seconds. (default 60)\n      --request-timeout string                          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --revision-cache-expiration duration              Cache expiration for cached revision (default 3m0s)\n      --revision-cache-lock-timeout duration            Cache TTL for locks to prevent duplicate requests on revisions, set to 0 to disable (default 10s)\n      --rootpath string                                 Used if Argo CD is running behind reverse proxy under subpath different from /\n      --sentinel stringArray                            Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379).\n      --sentinelmaster string                           Redis sentinel master group name. (default \"master\")\n      --server string                                   The address and port of the Kubernetes API server\n      --staticassets string                             Directory path that contains additional static assets (default \"/shared/app\")\n      --tls-server-name string                          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --tlsciphers string                               The list of acceptable ciphers to be used when establishing TLS connections. Use 'list' to list available ciphers. (default \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\")\n      --tlsmaxversion string                            The maximum SSL/TLS version that is acceptable (one of: 1.0|1.1|1.2|1.3) (default \"1.3\")\n      --tlsminversion string                            The minimum SSL/TLS version that is acceptable (one of: 1.0|1.1|1.2|1.3) (default \"1.2\")\n      --token string                                    Bearer token for authentication to the API server\n      --user string                                     The name of the kubeconfig user to use\n      --username string                                 Username for basic authentication to the API server\n      --webhook-parallelism-limit int                   Number of webhook requests processed concurrently (default 50)\n      --x-frame-options value                           Set X-Frame-Options header in HTTP responses to value. To disable, set to \"\". (default \"sameorigin\")\n```\n\n\n## SEE ALSO\n- [argocd-server version](https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server_version/) \\- Print version information\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server", "title": "argocd-server Command Reference", "description": "Run the ArgoCD API server", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 01:28:01", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "title": "argocd-server Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-server/", "scrapeId": "59758252-5a6a-4d35-92de-c66450dd889d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-server Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Start the Argo CD API server with default settings\n```yaml\n$ argocd-server\n```\n\n### Start the Argo CD API server on a custom port and enable tracing\n```yaml\n$ argocd-server --port 8888 --otlp-address localhost:4317\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server", "title": "argocd-server Command Reference", "description": "Run the ArgoCD API server", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 01:28:01", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "title": "argocd-server Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-server/", "scrapeId": "59758252-5a6a-4d35-92de-c66450dd889d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-server version Command Reference\"?\n\nAssistant: Print version information\n\nHere's a detailed explanation:\n\n\n## argocd-server version\nPrint version information\n\n```\nargocd-server version [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server_version", "title": "argocd-server version Command Reference", "description": "Print version information", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:29:17", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "argocd-server version Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-server_version/", "readthedocs-http-status": "200", "scrapeId": "0352b8b8-739f-40f9-bb4b-e16a98dbc6d8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server_version", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server_version/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-server version Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command to print version information\n```yaml\nargocd-server version [flags]\n```\n\n### Options\n```yaml\n  -h, --help    help for version\n      --short   print just the version number\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server_version", "title": "argocd-server version Command Reference", "description": "Print version information", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:29:17", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "argocd-server version Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-server_version/", "readthedocs-http-status": "200", "scrapeId": "0352b8b8-739f-40f9-bb4b-e16a98dbc6d8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server_version", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server_version/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd-server version Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --short option to print just the version number for a quick check.\n• Be cautious with the --insecure-skip-tls-verify option as it makes your HTTPS connections insecure.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server_version", "title": "argocd-server version Command Reference", "description": "Print version information", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:29:17", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "argocd-server version Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/server-commands/argocd-server_version/", "readthedocs-http-status": "200", "scrapeId": "0352b8b8-739f-40f9-bb4b-e16a98dbc6d8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server_version", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-server_version/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v1.0 to 1.1\"?\n\nAssistant: The v1.1 release does not introduce backward incompatible changes. Please note that Kustomize v1.0 is deprecated and support will be removed in the Argo CD v1.2 release.\n\nHere's a detailed explanation:\n\n\n## Upgrade Notes\nThe v1.1 release does not introduce backward incompatible changes. Please note that Kustomize v1.0 is deprecated and support will be removed in the Argo CD v1.2 release.\n\n## Upgrade Process\nFrom here on you can follow the regular upgrade process.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.0-1.1", "title": "v1.0 to 1.1", "description": "The v1.1 release does not introduce backward incompatible changes. Please note that Kustomize v1.0 is deprecated and support will be removed in the Argo CD v1.2 release.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:30:39", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "v1.0 to 1.1 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.0-1.1/", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b6e933d7-d53e-4bd4-a633-1a658c27d059", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.0-1.1", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.0-1.1/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v1.0 to 1.1\"?\n\nAssistant: Here are the recommended best practices:\n\n• Kustomize v1.0 is deprecated and support will be removed in the Argo CD v1.2 release.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.0-1.1", "title": "v1.0 to 1.1", "description": "The v1.1 release does not introduce backward incompatible changes. Please note that Kustomize v1.0 is deprecated and support will be removed in the Argo CD v1.2 release.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:30:39", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "v1.0 to 1.1 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.0-1.1/", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b6e933d7-d53e-4bd4-a633-1a658c27d059", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.0-1.1", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.0-1.1/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v1.1 to 1.2\"?\n\nAssistant: This section covers the upgrade process from Argo CD version 1.1 to 1.2, including changes in Kustomize and ConfigMap labels.\n\nHere's a detailed explanation:\n\n\n## Kustomize\n- Kustomize v1 support is removed. All kustomize charts are built using the same Kustomize version\n- Kustomize v2.0.3 upgraded to v3.1.0. We've noticed one backward incompatible change: https://github.com/kubernetes-sigs/kustomize/issues/42. Starting v2.1.0 namespace prefix feature works with CRD (which might cause renaming of generated resource definitions).\n\n## ConfigMap labels\nArgo CD config maps must be annotated with `app.kubernetes.io/part-of: argocd` label. Make sure to apply updated `install.yaml` manifest in addition to changing image version.\n\nFrom here on you can follow the [regular upgrade process](https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview/).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.1-1.2", "title": "v1.1 to 1.2", "description": "This section covers the upgrade process from Argo CD version 1.1 to 1.2, including changes in Kustomize and ConfigMap labels.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:31:32", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.1-1.2/", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "v1.1 to 1.2 - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "49cb220c-b469-4bbb-8a0b-a1ceb3fd3620", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.1-1.2", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.1-1.2/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v1.1 to 1.2\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to annotate Argo CD config maps with the correct label.\n• Apply the updated install.yaml manifest after changing the image version.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.1-1.2", "title": "v1.1 to 1.2", "description": "This section covers the upgrade process from Argo CD version 1.1 to 1.2, including changes in Kustomize and ConfigMap labels.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:31:32", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.1-1.2/", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "v1.1 to 1.2 - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "49cb220c-b469-4bbb-8a0b-a1ceb3fd3620", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.1-1.2", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.1-1.2/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v1.2 to 1.3\"?\n\nAssistant: This section covers the upgrade process from Argo CD version 1.2 to 1.3, including API changes and upgrade instructions.\n\nHere's a detailed explanation:\n\n\n## API Changes\nThe 1.3 release introduces backward incompatible changes in some public Argo CD APIs. Please make sure to upgrade Argo CD CLI to v1.3.\n\nFrom here on you can follow the regular upgrade process.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.2-1.3", "title": "v1.2 to 1.3", "description": "This section covers the upgrade process from Argo CD version 1.2 to 1.3, including API changes and upgrade instructions.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:31:43", "type": "overview", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.2-1.3/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "v1.2 to 1.3 - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "0e201b2c-6a48-40f7-bc89-d15419d435b3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.2-1.3", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.2-1.3/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v1.2 to 1.3\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to upgrade Argo CD CLI to v1.3 before proceeding with the upgrade.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.2-1.3", "title": "v1.2 to 1.3", "description": "This section covers the upgrade process from Argo CD version 1.2 to 1.3, including API changes and upgrade instructions.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:31:43", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.2-1.3/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "v1.2 to 1.3 - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "0e201b2c-6a48-40f7-bc89-d15419d435b3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.2-1.3", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.2-1.3/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v1.3 to 1.4\"?\n\nAssistant: This page covers the upgrade process from Argo CD version 1.3 to 1.4, including changes in sync hooks and API changes.\n\nHere's a detailed explanation:\n\n\n## Sync Hooks\nThe Argo CD deletes all **in-flight** hooks if you terminate running sync operation. The hook state assessment change implemented in this release the Argo CD enables detection of an in-flight state for all Kubernetes resources including `Deployment`, `PVC`, `StatefulSet`, `ReplicaSet` etc. So if you terminate the sync operation that has, for example, `StatefulSet` hook that is `Progressing` it will be deleted. The long-running jobs are not supposed to be used as a sync hook and you should consider using [Sync Waves](https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves/) instead. From here on you can follow the [regular upgrade process](https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview/).\n\n## API Changes\nThe 1.3 release introduces backward incompatible changes in some public Argo CD APIs. Please make sure to upgrade Argo CD CLI to v1.3.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.3-1.4", "title": "v1.3 to 1.4", "description": "This page covers the upgrade process from Argo CD version 1.3 to 1.4, including changes in sync hooks and API changes.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:33:05", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.3-1.4/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "v1.3 to 1.4 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "5d436352-4017-4745-84be-8fe695c7b5c6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.3-1.4", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.3-1.4/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v1.3 to 1.4\"?\n\nAssistant: Here are the recommended best practices:\n\n• The long-running jobs are not supposed to be used as a sync hook and you should consider using Sync Waves instead.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.3-1.4", "title": "v1.3 to 1.4", "description": "This page covers the upgrade process from Argo CD version 1.3 to 1.4, including changes in sync hooks and API changes.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:33:05", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.3-1.4/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "v1.3 to 1.4 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "5d436352-4017-4745-84be-8fe695c7b5c6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.3-1.4", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.3-1.4/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v1.4 to 1.5\"?\n\nAssistant: This page covers the upgrade process from Argo CD version 1.4 to 1.5, including changes in metrics, Redis HA Proxy, and Kustomize version.\n\nHere's a detailed explanation:\n\n\n## Updated prometheus metrics\nThe `argocd_app_sync_status`, `argocd_app_health_status` and `argocd_app_created_time` prometheus metrics are deprecated in favor of additional labels to `argocd_app_info` metric. The deprecated labels are still available can be re-enabled using `ARGOCD_LEGACY_CONTROLLER_METRICS=true` environment variable. The legacy example Grafana dashboard is available at [examples/dashboard-legacy.json](https://github.com/argoproj/argo-cd/blob/master/examples/dashboard-legacy.json).\n\n## Redis HA Proxy\nWarning\n\nManual intervention might be required to complete the upgrade.\n\nHigh-availability (HA) Argo CD manifests now bundles Redis in HA Proxy in front of it. Following issue have been observed during the upgrade:\n\n- you might see intermittent login failures;\n- after upgrade is completed ha proxy might be unable to access redis server (see [argo-cd#3547](https://github.com/argoproj/argo-cd/issues/3547), [DandyDeveloper/charts#26](https://github.com/DandyDeveloper/charts/issues/26)). As workaround \"restart\" `argocd-redis-ha-haproxy` Deployment and `argocd-redis-ha-server` StatefulSet.\n\n## Upgraded Kustomize Version\nNote that bundled Kustomize has been upgraded to v3.6.1.\n\nFrom here on you can follow the [regular upgrade process](https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview/).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.4-1.5", "title": "v1.4 to 1.5", "description": "This page covers the upgrade process from Argo CD version 1.4 to 1.5, including changes in metrics, Redis HA Proxy, and Kustomize version.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:33:26", "type": "overview", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.4-1.5/", "title": "v1.4 to 1.5 - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "506c901b-e182-42ce-b52f-b7132be5174b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.4-1.5", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.4-1.5/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v1.4 to 1.5\"?\n\nAssistant: Here are the recommended best practices:\n\n• Re-enable deprecated labels using `ARGOCD_LEGACY_CONTROLLER_METRICS=true` environment variable.\n• Restart `argocd-redis-ha-haproxy` Deployment and `argocd-redis-ha-server` StatefulSet if you encounter access issues after the upgrade.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.4-1.5", "title": "v1.4 to 1.5", "description": "This page covers the upgrade process from Argo CD version 1.4 to 1.5, including changes in metrics, Redis HA Proxy, and Kustomize version.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:33:26", "type": "best_practices", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.4-1.5/", "title": "v1.4 to 1.5 - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "506c901b-e182-42ce-b52f-b7132be5174b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.4-1.5", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.4-1.5/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v1.5 to 1.6\"?\n\nAssistant: This section covers the changes and upgrade process from Argo CD version 1.5 to 1.6.\n\nHere's a detailed explanation:\n\n\n## Removed Deprecated Field of /managed-resources API\nThe deprecated `diff` field had been removed from `/api/v1/applications/<app-name>/managed-resources` API. The field is not used by Argo CD CLI or UI, so it might affect you only if you programmatically use the `managed-resources` API.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.5-1.6", "title": "v1.5 to 1.6", "description": "This section covers the changes and upgrade process from Argo CD version 1.5 to 1.6.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:33:40", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "v1.5 to 1.6 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.5-1.6/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "2405d164-8228-4cb3-9261-b4d30d84431c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.5-1.6", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.5-1.6/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v1.5 to 1.6\"?\n\nAssistant: Here are the recommended best practices:\n\n• From here on you can follow the regular upgrade process.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.5-1.6", "title": "v1.5 to 1.6", "description": "This section covers the changes and upgrade process from Argo CD version 1.5 to 1.6.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:33:40", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "v1.5 to 1.6 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.5-1.6/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "2405d164-8228-4cb3-9261-b4d30d84431c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.5-1.6", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.5-1.6/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v1.6 to 1.7\"?\n\nAssistant: This page covers the upgrade process from Argo CD version 1.6 to 1.7, detailing changes and considerations during the upgrade.\n\nHere's a detailed explanation:\n\n\n## AppProject tokens moved to status field\nIn order to address argoproj/argo-cd#2718 the JWT tokens stored in AppProject CRD have been moved from `spec` to `status` field. The migration is performed automatically during upgrade and might cause few seconds delay. No additional side effects besides the delay are expected. It is acceptable to rollback to previous version - no data loss is expected.\n\n## Resources like ConfigMap might become out-of-sync due to YAML library upgrade\nAs part of v1.7 release, the Kubernetes client library have been upgrade to v1.18.8 as well as we've started using https://github.com/kubernetes-sigs/yaml for YAML handling to be consistent with `kubectl` behavior. This introduced a change of multiline string handling in resource manifests. As a result, YAML manifests with multiline strings might become out-of-sync after upgrading and you might have to trigger the synchronization once to resolve it.\n\n## New RBAC rules for GnuPG related features\nThe GnuPG feature has introduced a new RBAC resource in Argo CD, `gpgkeys`. Please adapt your RBAC rules with the appropriate permissions. The least set of permissions every role should have is:\n\n```\np, <your-role>, gpgkeys, get, *, allow\n```\n\nMore information can be found in the documentation.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.6-1.7", "title": "v1.6 to 1.7", "description": "This page covers the upgrade process from Argo CD version 1.6 to 1.7, detailing changes and considerations during the upgrade.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:33:51", "type": "overview", "page_metadata": {"title": "v1.6 to 1.7 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.6-1.7/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "87ded3f8-27a8-411c-ac79-b4934e1f6588", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.6-1.7", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.6-1.7/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v1.6 to 1.7\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap Example\n```yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-config-map\ndata:\n  value: |+ # block chomping indicator is dropped by Argo CD v1.7 ( same as kubectl apply)\n  hello\n\n```\n\n### RBAC Rule Example\n```yaml\n```\np, <your-role>, gpgkeys, get, *, allow\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.6-1.7", "title": "v1.6 to 1.7", "description": "This page covers the upgrade process from Argo CD version 1.6 to 1.7, detailing changes and considerations during the upgrade.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:33:51", "type": "code_examples", "page_metadata": {"title": "v1.6 to 1.7 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.6-1.7/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "87ded3f8-27a8-411c-ac79-b4934e1f6588", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.6-1.7", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.6-1.7/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v1.6 to 1.7\"?\n\nAssistant: Here are the recommended best practices:\n\n• The migration of JWT tokens is automatic during the upgrade, but expect a few seconds delay.\n• After upgrading, check for YAML manifests with multiline strings that may become out-of-sync and trigger synchronization if necessary.\n• Adapt RBAC rules to include permissions for the new `gpgkeys` resource.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.6-1.7", "title": "v1.6 to 1.7", "description": "This page covers the upgrade process from Argo CD version 1.6 to 1.7, detailing changes and considerations during the upgrade.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:33:51", "type": "best_practices", "page_metadata": {"title": "v1.6 to 1.7 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.6-1.7/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "87ded3f8-27a8-411c-ac79-b4934e1f6588", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.6-1.7", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.6-1.7/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v1.7 to 1.8\"?\n\nAssistant: This page covers the changes and upgrade instructions from version 1.7 to 1.8 of Argo CD.\n\nHere's a detailed explanation:\n\n\n## The argocd-application-controller converted to StatefulSet\nThe `argocd-application-controller` has been converted to StatefulSet. That means you need to manually delete `argocd-application-controller` Deployment after upgrading. Similarly if you decided to rollback to v1.7 don't forget to delete `argocd-application-controller` StatefulSet.\n\n## Health assessment of argoproj.io/Application CRD has been removed\nThe health assessment of `argoproj.io/Application` CRD has been removed (see [#3781](https://github.com/argoproj/argo-cd/issues/3781) for more information). You might need to restore it if you are using app-of-apps pattern and orchestrating synchronization using sync waves. Add the following resource customization in `argocd-cm` ConfigMap:\n\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  resource.customizations: |\n    argoproj.io/Application:\n      health.lua: |\n        hs = {}\n        hs.status = \"Progressing\"\n        hs.message = \"\"\n        if obj.status ~= nil then\n          if obj.status.health ~= nil then\n            hs.status = obj.status.health.status\n            if obj.status.health.message ~= nil then\n              hs.message = obj.status.health.message\n            end\n          end\n        end\n        return hs\n```\n\n> To modify an existing installation with no existing `resources.customizations`, you can save the `data:` stanza to file and patch the configmap with e.g.: `kubectl -n argocd patch configmaps argocd-cm --patch-file argocd-cm-patch.yaml`.\n\n## gRPC metrics are disabled by default\nThe gRPC metrics are not exposed by default by `argocd-server` and `argocd-repo-server` anymore. These metrics appear to be too expensive so we've decided to disable them by default. Metrics can be enabled using `ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM=true` environment variable.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.7-1.8", "title": "v1.7 to 1.8", "description": "This page covers the changes and upgrade instructions from version 1.7 to 1.8 of Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:34:04", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "v1.7 to 1.8 - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.7-1.8/", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "2748f54b-1f17-431c-a67d-8ad456d5a9da", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.7-1.8", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.7-1.8/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v1.7 to 1.8\"?\n\nAssistant: Here are some code examples:\n\n### Resource Customization for argoproj.io/Application\n```yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  resource.customizations: |\n    argoproj.io/Application:\n      health.lua: |\n        hs = {}\n        hs.status = \"Progressing\"\n        hs.message = \"\"\n        if obj.status ~= nil then\n          if obj.status.health ~= nil then\n            hs.status = obj.status.health.status\n            if obj.status.health.message ~= nil then\n              hs.message = obj.status.health.message\n            end\n          end\n        end\n        return hs\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.7-1.8", "title": "v1.7 to 1.8", "description": "This page covers the changes and upgrade instructions from version 1.7 to 1.8 of Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:34:04", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "v1.7 to 1.8 - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.7-1.8/", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "2748f54b-1f17-431c-a67d-8ad456d5a9da", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.7-1.8", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.7-1.8/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v1.7 to 1.8\"?\n\nAssistant: Here are the recommended best practices:\n\n• To modify an existing installation with no existing `resources.customizations`, you can save the `data:` stanza to file and patch the configmap with e.g.: `kubectl -n argocd patch configmaps argocd-cm --patch-file argocd-cm-patch.yaml`.\n• Metrics can be enabled using `ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM=true` environment variable.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.7-1.8", "title": "v1.7 to 1.8", "description": "This page covers the changes and upgrade instructions from version 1.7 to 1.8 of Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:34:04", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "v1.7 to 1.8 - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.7-1.8/", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "2748f54b-1f17-431c-a67d-8ad456d5a9da", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.7-1.8", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.7-1.8/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v1.8 to 2.0\"?\n\nAssistant: This page covers the upgrade process from Argo CD version 1.8 to 2.0, detailing changes and recommendations for users.\n\nHere's a detailed explanation:\n\n\n## Redis Upgraded to v6.2.1\nThe bundled Redis version has been upgraded to v6.2.1.\n\nThe Redis itself should be able to upgrade with no downtime, as well as Argo CD does not use it as a persistent store. However, if you are running Argo CD in production with multiple users it is recommended to upgrade during off-peak hours to avoid user-visible failures.\n\n## Environment variables expansion\nArgo CD supports using environment variables in config management tools parameters. The expansion logic has been improved and now expands missing environment variables into an empty string.\n\n## Docker image migrated to use Ubuntu as base\nThe official Docker image has been migrated to use `ubuntu:20.10` instead of `debian:10-slim` as base image. While this should not affect user experience, you might be affected if you use custom-built images and/or include third party tools in custom-built images.\n\nPlease make sure that your custom tools are still working with the update to v2.0 before deploying it onto production.\n\n## Container registry switched to quay.io and sundown of Docker Hub repository\nDue to Docker Hub's new rate-limiting and retention policies, the Argo project has decided to switch to the quay.io registry as a new home for all images published by its sub-projects.\n\nAs of Argo CD version 2.0, the installation manifests are configured to pull the container images from `quay.io` and we announce the **sundown** of the existing Docker Hub repositories. For the 2.0 release this means, we will still push to both registries, but we will stop pushing images to Docker Hub once Argo CD 2.1 has been released.\n\nPlease make sure that your clusters can pull from the `quay.io` registry. If you aren't able to do so timely, you can change the container image slugs in the installation manually to Docker Hub as a workaround to install Argo CD 2.0. This workaround will not be possible anymore with 2.1, however.\n\n## Dex tool migrated from argocd-util to argocd-dex\nThe dex commands `rundex` and `gendexcfg` have been migrated from `argocd-util` to `argocd-dex`. It means that you need to update `argocd-dex-server` deployment's commands to install `argocd-dex` binary instead of `argocd-util` in init container and run dex command from `argocd-dex` instead of `argocd-util`:\n\n```\ninitContainers:\n- command:\n  - cp\n  - -n\n  - /usr/local/bin/argocd\n  - /shared/argocd-dex\n```\n\n```\ncontainers:\n- command:\n  - /shared/argocd-dex\n  - rundex\n```\n\nNote that starting from v2.0 argocd binary behaviour has changed. It will have all argocd binaries such `argocd-dex`, `argocd-server`, `argocd-repo-server`, `argocd-application-controller`, `argocd-util`, `argocd` baked inside. The binary will change behaviour based on its name.\n\n## Updated retry params type from String to Duration for app sync\nApp Sync command exposes certain retry options, which allows the users to parameterize the sync retries. Two of those params, `retry-backoff-duration` and `retry-backoff-max-duration` were declared as type `string` rather than `duration`. This allowed users to provide the values to these flags without time unit (seconds, minutes, hours ...) or any random string as well, but since we have migrated from `string` to `duration`, it is now mandatory for users to provide a unit (valid duration).\n\n```\nEXAMPLE:\nargocd app sync <app-name> --retry-backoff-duration=10 -> invalid\nargocd app sync <app-name> --retry-backoff-duration=10s -> valid\n```\n\n\n## Switch to Golang 1.16\nThe official Argo CD binaries are now being build using Go 1.16, making a jump from the previous 1.14.x. Users should note that Go 1.15 introduced deprecation of validating server names against the `CommonName` property of a certificate when performing TLS connections.\n\nIf you have repository servers with an incompatible certificate, connections to those servers might break. You will have to issue correct certificates to unbreak such a situation.\n\n## Migration of CRDs from apiextensions/v1beta1 to apiextensions/v1\nOur CRDs ( `Application` and `AppProject`) have been moved from the deprecated `apiextensions/v1beta1` to the `apiextensions/v1` API group.\n\nThis does **not** affect the version of the CRDs themselves.\n\nWe do not expect that changes to existing CRs for `Application` and `AppProject` are required from users, or that this change requires otherwise actions and this note is just included for completeness.\n\n## Helm v3 is now the default when rendering Charts\nWith this release, we made Helm v3 being the default version for rendering any Helm charts through Argo CD. We also disabled the Helm version auto-detection depending on the `apiVersion` field of the `Chart.yaml`, so the charts will be rendered using Helm v3 regardless of what's in the Chart's `apiVersion` field.\n\nThis can result in minor out-of-sync conditions on your Applications that were previously rendered using Helm v2 (e.g. a change in one of the annotations that Helm adds). You can fix this by syncing the Application.\n\nIf you have existing Charts that require to be rendered using Helm v2, you will need to explicitly configure your Application to use Helm v2 for rendering the chart, as described here. Please also note that Helm v2 is now being considered deprecated in Argo CD, as it will not receive any updates from the upstream Helm project anymore. We will still ship the Helm v2 binary for the next two releases, but it will be subject to removal after that grace period.\n\nUsers are encouraged to upgrade any Charts that still require Helm v2 to be compatible with Helm v3.\n\n## Kustomize version updated to v3.9.4\nArgo CD now ships with Kustomize v3.9.4 by default. Please make sure that your manifests will render correctly with this Kustomize version.\n\nIf you need backwards compatibility to a previous version of Kustomize, please consider setting up a custom Kustomize version and configure your Applications to be rendered using that specific version.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.8-2.0", "title": "v1.8 to 2.0", "description": "This page covers the upgrade process from Argo CD version 1.8 to 2.0, detailing changes and recommendations for users.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 01:34:30", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.8-2.0/", "title": "v1.8 to 2.0 - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "f0d35aa3-7161-4af3-8195-c4972ab8ad97", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.8-2.0", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.8-2.0/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v1.8 to 2.0\"?\n\nAssistant: Here are some code examples:\n\n### Dex tool migration commands\n```yaml\ninitContainers:\n- command:\n  - cp\n  - -n\n  - /usr/local/bin/argocd\n  - /shared/argocd-dex\n\n```\n\n### Dex tool migration commands\n```yaml\ncontainers:\n- command:\n  - /shared/argocd-dex\n  - rundex\n\n```\n\n### App sync retry parameters example\n```yaml\nEXAMPLE:\nargocd app sync <app-name> --retry-backoff-duration=10 -> invalid\nargocd app sync <app-name> --retry-backoff-duration=10s -> valid\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.8-2.0", "title": "v1.8 to 2.0", "description": "This page covers the upgrade process from Argo CD version 1.8 to 2.0, detailing changes and recommendations for users.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 01:34:30", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.8-2.0/", "title": "v1.8 to 2.0 - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "f0d35aa3-7161-4af3-8195-c4972ab8ad97", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.8-2.0", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.8-2.0/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v1.8 to 2.0\"?\n\nAssistant: Here are the recommended best practices:\n\n• Upgrade Redis during off-peak hours to avoid user-visible failures if running in production with multiple users.\n• Ensure custom tools are still working with the update to v2.0 before deploying to production.\n• Make sure clusters can pull from the quay.io registry and change container image slugs manually if necessary for installation.\n• Update `argocd-dex-server` deployment's commands to use `argocd-dex` instead of `argocd-util`.\n• Provide a unit for retry parameters in app sync commands after the migration from string to duration.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.8-2.0", "title": "v1.8 to 2.0", "description": "This page covers the upgrade process from Argo CD version 1.8 to 2.0, detailing changes and recommendations for users.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 01:34:30", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/upgrading/1.8-2.0/", "title": "v1.8 to 2.0 - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "f0d35aa3-7161-4af3-8195-c4972ab8ad97", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.8-2.0", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.8-2.0/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.0 to 2.1\"?\n\nAssistant: This page covers the upgrade process from Argo CD version 2.0 to 2.1, detailing changes in Kustomize, configuration flags, and CLI commands.\n\nHere's a detailed explanation:\n\n\n## Upgraded Kustomize Version\nNote that bundled Kustomize has been upgraded to v4.2.0. Some of the flags are changed in Kustomize V4. For example flag name `load_restrictor` is changed in Kustomize v4+. It is changed from `--load_restrictor=none` to `--load-restrictor LoadRestrictionsNone.`\n\n## Replacing `--app-resync` flag with `timeout.reconciliation` setting\nThe `--app-resync` flag allows controlling how frequently Argo CD application controller checks resolve the target application revision of each application. In order to allow caching resolved revision per repository as opposed to per application, the `--app-resync` flag has been deprecated. Please use `timeout.reconciliation` setting in `argocd-cm` ConfigMap instead. The value of `timeout.reconciliation` is a duration string e.g `60s`, `1m`, `1h` or `1d`. See example in [argocd-cm.yaml](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm.yaml). From here on you can follow the [regular upgrade process](https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview/).\n\n## Replacing `repositories` and `repository.credentials` with Secrets\nThe configuration of repositories and repository credential templates via the `argocd-cm` has been deprecated. Repositories and repository credentials are now discovered via Secrets that are labeled with `argocd.argoproj.io/secret-type=repository` or `argocd.argoproj.io/secret-type=repo-creds` respectively. See the examples in [argocd-repositories.yaml](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories.yaml) and [argocd-repo-creds.yaml](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml).\n\n## The `argocd-util` CLI commands merged into `argocd admin`\nThe `argocd-util` CLI commands are available under `argocd admin` and the `argocd-util` binary is no longer available.\n\n## Replace runtime system user while BYOI\nRuntime system user should to be changed from `argocd` to `999`, as shown below.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.0-2.1", "title": "v2.0 to 2.1", "description": "This page covers the upgrade process from Argo CD version 2.0 to 2.1, detailing changes in Kustomize, configuration flags, and CLI commands.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:34:43", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.0-2.1/", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "v2.0 to 2.1 - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "bdc3f972-e4b4-4ad6-9159-5d675586c152", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.0-2.1", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.0-2.1/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v2.0 to 2.1\"?\n\nAssistant: Here are some code examples:\n\n### Change Runtime System User Example\n```yaml\n```\nFROM argoproj/argocd:latest\n\n# Switch to root for the ability to perform install\nUSER root\n\n# Something custom here\nRUN apt-get update\n\n# Switch back to non-root user\n\n# deprecated: USER argocd\nUSER 999\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.0-2.1", "title": "v2.0 to 2.1", "description": "This page covers the upgrade process from Argo CD version 2.0 to 2.1, detailing changes in Kustomize, configuration flags, and CLI commands.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:34:43", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.0-2.1/", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "v2.0 to 2.1 - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "bdc3f972-e4b4-4ad6-9159-5d675586c152", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.0-2.1", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.0-2.1/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.0 to 2.1\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to update the Kustomize version to v4.2.0 and adjust the flags accordingly.\n• Replace the `--app-resync` flag with the `timeout.reconciliation` setting in the ConfigMap for better caching.\n• Use Secrets for managing repository credentials instead of the deprecated `argocd-cm` configuration.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.0-2.1", "title": "v2.0 to 2.1", "description": "This page covers the upgrade process from Argo CD version 2.0 to 2.1, detailing changes in Kustomize, configuration flags, and CLI commands.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:34:43", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.0-2.1/", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "v2.0 to 2.1 - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "bdc3f972-e4b4-4ad6-9159-5d675586c152", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.0-2.1", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.0-2.1/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.1 to 2.2\"?\n\nAssistant: This page covers the upgrade process from Argo CD version 2.1 to 2.2, including changes in Helm version and SSH key signature algorithm support.\n\nHere's a detailed explanation:\n\n\n## Upgraded Helm Version\nNote that bundled Helm has been upgraded from 3.6.0 to v3.7+. This includes following breaking changes:\n\n- Repository credentials are no longer passed to download charts that are being served from a different domain than the repository.\n\nYou can still force older behavior with `--helm-pass-credentials` option to `argocd app create`.\n\nMore information in the [Helm v3.6.1 release notes](https://github.com/helm/helm/releases/tag/v3.6.1).\n\n- Experimental OCI support has been rewritten.\n\nMore information in the [Helm v3.7.0 release notes](https://github.com/helm/helm/releases/tag/v3.7.0).\n\n## Support for private repo SSH keys using the SHA-1 signature hash algorithm is removed in 2.2.12\nArgo CD 2.2.12 upgraded its base image from Ubuntu 21.10 to Ubuntu 22.04, which upgraded OpenSSH to 8.9. OpenSSH starting with 8.8 dropped support for the `ssh-rsa` SHA-1 key signature algorithm.\n\nThe signature algorithm is _not_ the same as the algorithm used when generating the key. There is no need to update keys.\n\nThe signature algorithm is negotiated with the SSH server when the connection is being set up. The client offers its list of accepted signature algorithms, and if the server has a match, the connection proceeds. For most SSH servers on up-to-date git providers, acceptable algorithms other than `ssh-rsa` should be available.\n\nBefore upgrading to Argo CD 2.2.12, check whether your git provider(s) using SSH authentication support algorithms newer than `rsa-ssh`.\n\n1. Make sure your version of SSH >= 8.9 (the version used by Argo CD). If not, upgrade it before proceeding.\n\n```\nssh -V\n```\n\nExample output: `OpenSSH_8.9p1 Ubuntu-3, OpenSSL 3.0.2 15 Mar 2022`\n\n1. Once you have a recent version of OpenSSH, follow the directions from the [OpenSSH 8.8 release notes](https://www.openssh.com/txt/release-8.7):\n\n> To check whether a server is using the weak ssh-rsa public key algorithm, for host authentication, try to connect to it after removing the ssh-rsa algorithm from ssh(1)'s allowed list:\n>\n> ```\n> ssh -oHostKeyAlgorithms=-ssh-rsa user@host\n> ```\n>\n> If the host key verification fails and no other supported host key types are available, the server software on that host should be upgraded.\n\nIf the server does not support an acceptable version, you will get an error similar to this;\n\n```\n$ ssh -oHostKeyAlgorithms=-ssh-rsa vs-ssh.visualstudio.com\nUnable to negotiate with 20.42.134.1 port 22: no matching host key type found. Their offer: ssh-rsa\n```\n\nThis indicates that the server needs to update its supported key signature algorithms, and Argo CD will not connect to it.\n\n## Workaround\nThe [OpenSSH 8.8 release notes](https://www.openssh.com/txt/release-8.8) describe a workaround if you cannot change the server's key signature algorithms configuration.\n\n> Incompatibility is more likely when connecting to older SSH implementations that have not been upgraded or have not closely tracked improvements in the SSH protocol. For these cases, it may be necessary to selectively re-enable RSA/SHA1 to allow connection and/or user authentication via the HostkeyAlgorithms and PubkeyAcceptedAlgorithms options. For example, the following stanza in ~/.ssh/config will enable RSA/SHA1 for host and user authentication for a single destination host:\n>\n> ```\n> Host old-host\n>     HostkeyAlgorithms +ssh-rsa\n>     PubkeyAcceptedAlgorithms +ssh-rsa\n> ```\n>\n> We recommend enabling RSA/SHA1 only as a stopgap measure until legacy implementations can be upgraded or reconfigured with another key type (such as ECDSA or Ed25519).\n\nTo apply this to Argo CD, you could create a ConfigMap with the desired ssh config file and then mount it at `/home/argocd/.ssh/config`.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.1-2.2", "title": "v2.1 to 2.2", "description": "This page covers the upgrade process from Argo CD version 2.1 to 2.2, including changes in Helm version and SSH key signature algorithm support.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:35:02", "type": "overview", "page_metadata": {"title": "v2.1 to 2.2 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.1-2.2/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "2c4ebd94-3646-4432-b6e9-df801f85bec4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.1-2.2", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.1-2.2/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v2.1 to 2.2\"?\n\nAssistant: Here are some code examples:\n\n### Check SSH Version\n```yaml\nssh -V\n```\n\n### Check Host Key Algorithms\n```yaml\nssh -oHostKeyAlgorithms=-ssh-rsa user@host\n```\n\n### SSH Error Example\n```yaml\n$ ssh -oHostKeyAlgorithms=-ssh-rsa vs-ssh.visualstudio.com\nUnable to negotiate with 20.42.134.1 port 22: no matching host key type found. Their offer: ssh-rsa\n```\n\n### SSH Config Example for Workaround\n```yaml\nHost old-host\n    HostkeyAlgorithms +ssh-rsa\n    PubkeyAcceptedAlgorithms +ssh-rsa\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.1-2.2", "title": "v2.1 to 2.2", "description": "This page covers the upgrade process from Argo CD version 2.1 to 2.2, including changes in Helm version and SSH key signature algorithm support.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:35:02", "type": "code_examples", "page_metadata": {"title": "v2.1 to 2.2 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.1-2.2/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "2c4ebd94-3646-4432-b6e9-df801f85bec4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.1-2.2", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.1-2.2/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.1 to 2.2\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure your version of SSH >= 8.9 before upgrading to Argo CD 2.2.12.\n• Enable RSA/SHA1 only as a stopgap measure until legacy implementations can be upgraded or reconfigured with another key type.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.1-2.2", "title": "v2.1 to 2.2", "description": "This page covers the upgrade process from Argo CD version 2.1 to 2.2, including changes in Helm version and SSH key signature algorithm support.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:35:02", "type": "best_practices", "page_metadata": {"title": "v2.1 to 2.2 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.1-2.2/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "2c4ebd94-3646-4432-b6e9-df801f85bec4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.1-2.2", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.1-2.2/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.10 to 2.11\"?\n\nAssistant: This section covers the changes and updates made in the Argo CD upgrade from version 2.10 to 2.11.\n\nHere's a detailed explanation:\n\n\n## initiatedBy added in Application CRD\nIn order to address [argoproj/argo-cd#16612](https://github.com/argoproj/argo-cd/issues/16612), initiatedBy has been added in the Application CRD.\n\n## Egress NetworkPolicy for `argocd-redis` and `argocd-redis-ha-haproxy`\nStarting with Argo CD 2.11.2, the NetworkPolicy for the `argocd-redis` and `argocd-redis-ha-haproxy` dropped Egress restrictions. This change was made to allow access to the Kubernetes API to create a secret to secure Redis access.\n\nTo retain similar networking restrictions as before 2.11.2, you can add an Egress rule to allow access only to the Kubernetes API and access needed by Redis itself. The Egress rule for Kubernetes access will depend entirely on your Kubernetes setup. The access for Redis itself can be allowed by adding the following to the `argocd-redis-network-policy` NetworkPolicy:\n\n```yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-network-policy\nspec:\n  policyTypes:\n  - Ingress\n  +  - Egress\n  +  egress:\n  +  - ports:\n  +    - port: 53\n  +      protocol: UDP\n  +    - port: 53\n  +      protocol: TCP\n```\n\n```yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-ha-haproxy\nspec:\n  policyTypes:\n  - Ingress\n  +  - Egress\n  +  egress:\n  +  - ports:\n  +    - port: 6379\n  +      protocol: TCP\n  +    - port: 26379\n  +      protocol: TCP\n  +    to:\n  +    - podSelector:\n  +        matchLabels:\n  +          app.kubernetes.io/name: argocd-redis-ha\n  +  - ports:\n  +    - port: 53\n  +      protocol: UDP\n  +    - port: 53\n  +      protocol: TCP\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.10-2.11", "title": "v2.10 to 2.11", "description": "This section covers the changes and updates made in the Argo CD upgrade from version 2.10 to 2.11.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:35:17", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "v2.10 to 2.11 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.10-2.11/", "scrapeId": "d4547b1f-1a34-4606-981a-a56372ea1fb8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.10-2.11", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.10-2.11/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v2.10 to 2.11\"?\n\nAssistant: Here are some code examples:\n\n### Egress rule for argocd-redis-network-policy\n```yaml\n```yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-network-policy\nspec:\n  policyTypes:\n  - Ingress\n  +  - Egress\n  +  egress:\n  +  - ports:\n  +    - port: 53\n  +      protocol: UDP\n  +    - port: 53\n  +      protocol: TCP\n```\n```\n\n### Egress rule for argocd-redis-ha-haproxy\n```yaml\n```yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-ha-haproxy\nspec:\n  policyTypes:\n  - Ingress\n  +  - Egress\n  +  egress:\n  +  - ports:\n  +    - port: 6379\n  +      protocol: TCP\n  +    - port: 26379\n  +      protocol: TCP\n  +    to:\n  +    - podSelector:\n  +        matchLabels:\n  +          app.kubernetes.io/name: argocd-redis-ha\n  +  - ports:\n  +    - port: 53\n  +      protocol: UDP\n  +    - port: 53\n  +      protocol: TCP\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.10-2.11", "title": "v2.10 to 2.11", "description": "This section covers the changes and updates made in the Argo CD upgrade from version 2.10 to 2.11.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:35:17", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "v2.10 to 2.11 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.10-2.11/", "scrapeId": "d4547b1f-1a34-4606-981a-a56372ea1fb8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.10-2.11", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.10-2.11/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.10 to 2.11\"?\n\nAssistant: Here are the recommended best practices:\n\n• To retain similar networking restrictions as before 2.11.2, add an Egress rule to allow access only to the Kubernetes API and access needed by Redis itself.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.10-2.11", "title": "v2.10 to 2.11", "description": "This section covers the changes and updates made in the Argo CD upgrade from version 2.10 to 2.11.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:35:17", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "v2.10 to 2.11 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.10-2.11/", "scrapeId": "d4547b1f-1a34-4606-981a-a56372ea1fb8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.10-2.11", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.10-2.11/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.11 to 2.12\"?\n\nAssistant: This page covers the changes and updates when upgrading from Argo CD version 2.11 to 2.12.\n\nHere's a detailed explanation:\n\n\n## Cluster secret scoping changes\nFrom Argo CD 2.12, there have been some changes to the use of cluster secrets where a `project` is a non-empty value. Previously, an `Application` or `ApplicationSet` would use any cluster secret matching the URL of the `repoUrl` field. From 2.12, we now check to see whether the project field of an application _also_ matches the project field of the cluster secret. What this means is that if you have a cluster secret scoped to `project-a`, an application scoped to `project-b` can no longer make use of the secret. If you have a cluster secret that's intended to be used by applications in multiple projects, you need to **unset** the `project` field.\n\nThis also applies when using the Git generator in applicationsets; since an applicationset is not scoped to a particular project any cluster secrets it makes use of also needs to be globally scoped (i.e. any secret needs to have an unset `project`).\n\n## Upgraded Helm Version\nNote that bundled Helm version has been upgraded from 3.14.4 to 3.15.2.\n\n## Image Registry Change for `redis` and `haproxy`\nArgo CD 2.12 upgraded its [upstream redis-ha Helm chart](https://artifacthub.io/packages/helm/dandydev-charts/redis-ha/) version from 4.22.3 to 4.26.6.\n\nAs part of the upgrade, the image registry for `redis` and `haproxy` was changed from DockerHub to ECR.\n\nMake sure that the registry change will work for your environment. One example of a problem would be that your environment can use Cosign to verify the image signature for DockerHub but not for ECR. You would need to make sure your Image Validation policy includes the AWS ECR as an approved registry. Please validate that the registry change is acceptable before upgrading.\n\n## Server-Side Apply Management of ApplicationSet Fields\n### Summary\nIf you are using server-side apply with multiple field managers to manage a single `selector` or `labelSelector` field in an ApplicationSet, that field management must be changed to be atomic starting with 2.12.\n\n### Details\nArgo CD 2.12 upgraded its controller-gen version from 0.4.1 to 0.14.0. As part of that change, several ApplicationSet CRD fields now have `x-kubernetes-map-type: atomic`.\n\nEach of the affected fields is a label selector with two child keys: `matchLabels` and `matchExpressions`.\n\nPrior to this change, two field managers could manage the `matchLabels` and `matchExpressions` fields independently. Starting with the 2.12 CRD, a single field manager must manage both of those fields. This behavior is in line with the upstream behavior of the label selector struct.\n\nSee the [Kubernetes server-side apply merge strategy docs](https://kubernetes.io/docs/reference/using-api/server-side-apply/#merge-strategy) for more information about the fields' behavior.\n\nThe affected ApplicationSet fields are the following (jq selector syntax):\n- `.spec.generators[].selector`\n- `.spec.generators[].cluster.selector`\n- `.spec.generators[].clusterDecisionResource.labelSelector`\n- `.spec.generators[].matrix.generators[].selector`\n- `.spec.generators[].merge.generators[].selector\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.11-2.12", "title": "v2.11 to 2.12", "description": "This page covers the changes and updates when upgrading from Argo CD version 2.11 to 2.12.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:35:29", "type": "overview", "page_metadata": {"title": "v2.11 to 2.12 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.11-2.12/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "b3c023fb-609e-490a-8150-3880f8bf8db7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.11-2.12", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.11-2.12/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.11 to 2.12\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you have a cluster secret that's intended to be used by applications in multiple projects, you need to unset the `project` field.\n• Make sure that the registry change will work for your environment before upgrading.\n• Validate that the registry change is acceptable before upgrading.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.11-2.12", "title": "v2.11 to 2.12", "description": "This page covers the changes and updates when upgrading from Argo CD version 2.11 to 2.12.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:35:29", "type": "best_practices", "page_metadata": {"title": "v2.11 to 2.12 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.11-2.12/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "b3c023fb-609e-490a-8150-3880f8bf8db7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.11-2.12", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.11-2.12/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.12 to 2.13\"?\n\nAssistant: This page covers the changes and upgrades from version 2.12 to 2.13 of Argo CD, including upgraded Helm and Dex versions, custom resource actions and health checks, and changes in job naming and log file extensions.\n\nHere's a detailed explanation:\n\n\n## Upgraded Helm Version\nNote that bundled Helm version has been upgraded from 3.15.2 to 3.15.4.\n\n## Custom Resource Actions for Flux Resources\n[`Custom Resource Actions`](https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions/#Custom-Resource-Actions) have been added for Flux Resources.\n\nThe following actions are now available:\n\n| Custom Resource | Supported Actions |\n| --- | --- |\n| HelmRelease | `Suspend`, `Resume`, `Reconcile` |\n| ImageRepository | `Suspend`, `Resume`, `Reconcile` |\n| ImageUpdateAutomation | `Suspend`, `Resume`, `Reconcile` |\n| Kustomization | `Suspend`, `Resume`, `Reconcile` |\n| Alert | `Suspend`, `Resume` |\n| Provider | `Suspend`, `Resume` |\n| Receiver | `Suspend`, `Resume`, `Reconcile` |\n| Bucket | `Suspend`, `Resume`, `Reconcile` |\n| GitRepository | `Suspend`, `Resume`, `Reconcile` |\n| HelmChart | `Suspend`, `Resume`, `Reconcile` |\n| HelmRepository | `Suspend`, `Resume`, `Reconcile` |\n| OCIRepository | `Suspend`, `Resume`, `Reconcile` |\n\nIf you want to use these actions do not forget to update the permissions (RBAC) for your Argo CD instance.\n\n## Custom Resource Health for Flux Resources\n[`Custom Resource Health`](https://argo-cd.readthedocs.io/en/stable/operator-manual/health/#custom-health-checks) has been added for Flux Resources.\n\nThe following Flux resources now support health checks:\n\\- HelmRelease\n\\- ImagePolicy\n\\- ImageRepository\n\\- ImageUpdateAutomation\n\\- Kustomization\n\\- Receiver\n\\- Bucket\n\\- GitRepository\n\\- HelmChart\n\\- HelmRepository\n\\- OCIRepository\n\n## Upgraded Dex Version\nDex [v2.39.0](https://github.com/dexidp/dex/releases/tag/v2.39.0) included a breaking change for the LDAP connector:\n\n> The validation of username and password in the LDAP connector is much more strict now.\n> As of today, Dex uses the EscapeFilter function to check for special characters in credentials and prevent injections by denying such requests.\n\n## Updated Job name for manually started CronJob jobs\nThe naming of Jobs that are manually started from CronJobs (using Argo CD) was changed. Instead of the previous postfix `-YYYYMMDDHHmm` (4-digit year), manually started Jobs now receive postfix `-YYMMDDHHmm` (2-digit year).\n\nThe format of Jobs that are started from a CronJob on schedule (by Kubernetes) is not handled by Argo CD and remains unchanged.\n\n## Change in Log File Extension for Downloaded Logs\nThe default extension for log files generated by Argo CD when using the \"Download Logs\" feature has been changed from `.txt` to `.log`. This change aligns with industry standards and improves compatibility with various log management tools and IDEs that offer enhanced features for `.log` files.\n\n**Impact:**\n\\- Users and systems that rely on the `.txt` extension will need to adjust their workflows.\n\\- Automated scripts and processes that specifically target `.txt` log files should be updated to handle `.log` files.\n\n**Benefits:**\n\\- Improved readability and parsing in IDEs and log management tools.\n\\- Consistency with standard log file conventions.\n\nIf you have any custom scripts or tools that depend on the `.txt` extension, please update them accordingly.\n\n## Added proxy to kustomize\nProxy config set on repository credentials / repository templates is now passed down to the `kustomize build` command.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.12-2.13", "title": "v2.12 to 2.13", "description": "This page covers the changes and upgrades from version 2.12 to 2.13 of Argo CD, including upgraded Helm and Dex versions, custom resource actions and health checks, and changes in job naming and log file extensions.", "has_code_examples": false, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 01:35:47", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "v2.12 to 2.13 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.12-2.13/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "034ef14d-0324-433f-813c-80f4ea0d3f62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.12-2.13", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.12-2.13/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.12 to 2.13\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you want to use the new custom resource actions, do not forget to update the permissions (RBAC) for your Argo CD instance.\n• If you have any custom scripts or tools that depend on the .txt extension, please update them accordingly.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.12-2.13", "title": "v2.12 to 2.13", "description": "This page covers the changes and upgrades from version 2.12 to 2.13 of Argo CD, including upgraded Helm and Dex versions, custom resource actions and health checks, and changes in job naming and log file extensions.", "has_code_examples": false, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 01:35:47", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "v2.12 to 2.13 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.12-2.13/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "034ef14d-0324-433f-813c-80f4ea0d3f62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.12-2.13", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.12-2.13/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.13 to 2.14\"?\n\nAssistant: Documentation on upgrading from version 2.13 to 2.14 of Argo CD.\n\nHere's a detailed explanation:\n\n\n## Upgraded Helm Version\nHelm was upgraded to 3.16.2 and the skipSchemaValidation Flag was added to the CLI and Application CR.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.13-2.14", "title": "v2.13 to 2.14", "description": "Documentation on upgrading from version 2.13 to 2.14 of Argo CD.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:35:51", "type": "overview", "page_metadata": {"title": "v2.13 to 2.14 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.13-2.14/", "scrapeId": "ef99410a-8a6b-4b4a-a83b-fc767ee65f3e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.13-2.14", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.13-2.14/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.2 to 2.3\"?\n\nAssistant: This page covers the upgrade process from Argo CD version 2.2 to 2.3, including changes in bundled components, binary support, and SSH key signature algorithm updates.\n\nHere's a detailed explanation:\n\n\n## Argo CD Notifications and ApplicationSet Are Bundled into Argo CD\nThe Argo CD Notifications and ApplicationSet are part of Argo CD now. You no longer need to install them separately.\nThe Notifications and ApplicationSet components are bundled into default Argo CD installation manifests.\n\nThe bundled manifests are drop-in replacements for the previous versions. If you are using Kustomize to bundle the manifests together then just remove references to https://github.com/argoproj-labs/argocd-notifications and https://github.com/argoproj-labs/applicationset.\n\nIf you are using the argocd-notifications helm chart, you can move the chart values to the notifications section of the argo-cd chart values. Although most values remain as is, for details please look up the values that are relevant to you.\n\nNo action is required if you are using kubectl apply.\n\n## Configure Additional Argo CD Binaries\nWe have removed non-Linux Argo CD binaries (Darwin amd64 and Windows amd64) from the image and the associated download buttons in the help page in the UI.\n\nThose removed binaries will still be included in the release assets and we made those configurable. You can add download buttons for other OS architectures by adding the following to your argocd-cm ConfigMap:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  help.download.linux-arm64: \"path-or-url-to-download\"\n  help.download.darwin-amd64: \"path-or-url-to-download\"\n  help.download.darwin-arm64: \"path-or-url-to-download\"\n  help.download.windows-amd64: \"path-or-url-to-download\"\n```\n\n## Removed Python from the base image\nIf you are using a Config Management Plugin that relies on Python, you will need to build a custom image on the Argo CD base to install Python.\n\n## Upgraded Kustomize Version\nNote that bundled Kustomize version has been upgraded from 4.2.0 to 4.4.1.\n\n## Upgraded Helm Version\nNote that bundled Helm version has been upgraded from 3.7.1 to 3.8.0.\n\n## Support for private repo SSH keys using the SHA-1 signature hash algorithm is removed in 2.3.7\nArgo CD 2.3.7 upgraded its base image from Ubuntu 21.04 to Ubuntu 22.04, which upgraded OpenSSH to 8.9. OpenSSH starting with 8.8 dropped support for the ssh-rsa SHA-1 key signature algorithm.\n\nThe signature algorithm is not the same as the algorithm used when generating the key. There is no need to update keys.\n\nThe signature algorithm is negotiated with the SSH server when the connection is being set up. The client offers its list of accepted signature algorithms, and if the server has a match, the connection proceeds. For most SSH servers on up-to-date git providers, acceptable algorithms other than ssh-rsa should be available.\n\nBefore upgrading to Argo CD 2.3.7, check whether your git provider(s) using SSH authentication support algorithms newer than rsa-ssh.\n\n1. Make sure your version of SSH >= 8.9 (the version used by Argo CD). If not, upgrade it before proceeding.\n\n```\nssh -V\n```\n\nExample output: `OpenSSH_8.9p1 Ubuntu-3, OpenSSL 3.0.2 15 Mar 2022`\n\n1. Once you have a recent version of OpenSSH, follow the directions from the OpenSSH 8.8 release notes:\n\n> To check whether a server is using the weak ssh-rsa public key algorithm, for host authentication, try to connect to it after removing the ssh-rsa algorithm from ssh(1)'s allowed list:\n>\n> ```\n> ssh -oHostKeyAlgorithms=-ssh-rsa user@host\n> ```\n>\n> If the host key verification fails and no other supported host key types are available, the server software on that host should be upgraded.\n\nIf the server does not support an acceptable version, you will get an error similar to this;\n\n```\n$ ssh -oHostKeyAlgorithms=-ssh-rsa vs-ssh.visualstudio.com\nUnable to negotiate with 20.42.134.1 port 22: no matching host key type found. Their offer: ssh-rsa\n```\n\nThis indicates that the server needs to update its supported key signature algorithms, and Argo CD will not connect to it.\n\n## Workaround\nThe OpenSSH 8.8 release notes describe a workaround if you cannot change the server's key signature algorithms configuration.\n\n> Incompatibility is more likely when connecting to older SSH implementations that have not been upgraded or have not closely tracked improvements in the SSH protocol. For these cases, it may be necessary to selectively re-enable RSA/SHA1 to allow connection and/or user authentication via the HostkeyAlgorithms and PubkeyAcceptedAlgorithms options. For example, the following stanza in ~/.ssh/config will enable RSA/SHA1 for host and user authentication for a single destination host:\n>\n> ```\n> Host old-host\n>     HostkeyAlgorithms +ssh-rsa\n>     PubkeyAcceptedAlgorithms +ssh-rsa\n> ```\n>\n> We recommend enabling RSA/SHA1 only as a stopgap measure until legacy implementations can be upgraded or reconfigured with another key type (such as ECDSA or Ed25519).\n\nTo apply this to Argo CD, you could create a ConfigMap with the desired ssh config file and then mount it at /home/argocd/.ssh/config.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.2-2.3", "title": "v2.2 to 2.3", "description": "This page covers the upgrade process from Argo CD version 2.2 to 2.3, including changes in bundled components, binary support, and SSH key signature algorithm updates.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 01:36:17", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.2-2.3/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "v2.2 to 2.3 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "scrapeId": "08ae1d87-1e69-48dd-853c-dde78d77a527", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.2-2.3", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.2-2.3/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v2.2 to 2.3\"?\n\nAssistant: Here are some code examples:\n\n### ConfigMap for additional Argo CD binaries\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  help.download.linux-arm64: \"path-or-url-to-download\"\n  help.download.darwin-amd64: \"path-or-url-to-download\"\n  help.download.darwin-arm64: \"path-or-url-to-download\"\n  help.download.windows-amd64: \"path-or-url-to-download\"\n```\n\n### Check SSH version\n```yaml\nssh -V\n```\n\n### Check SSH host key algorithms\n```yaml\nssh -oHostKeyAlgorithms=-ssh-rsa user@host\n```\n\n### Example error message for unsupported key signature algorithms\n```yaml\n$ ssh -oHostKeyAlgorithms=-ssh-rsa vs-ssh.visualstudio.com\nUnable to negotiate with 20.42.134.1 port 22: no matching host key type found. Their offer: ssh-rsa\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.2-2.3", "title": "v2.2 to 2.3", "description": "This page covers the upgrade process from Argo CD version 2.2 to 2.3, including changes in bundled components, binary support, and SSH key signature algorithm updates.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 01:36:17", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.2-2.3/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "v2.2 to 2.3 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "scrapeId": "08ae1d87-1e69-48dd-853c-dde78d77a527", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.2-2.3", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.2-2.3/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.2 to 2.3\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure your version of SSH is >= 8.9 before upgrading to Argo CD 2.3.7.\n• If you cannot change the server's key signature algorithms configuration, consider using the workaround to selectively re-enable RSA/SHA1 for host and user authentication.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.2-2.3", "title": "v2.2 to 2.3", "description": "This page covers the upgrade process from Argo CD version 2.2 to 2.3, including changes in bundled components, binary support, and SSH key signature algorithm updates.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 01:36:17", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.2-2.3/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "v2.2 to 2.3 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "scrapeId": "08ae1d87-1e69-48dd-853c-dde78d77a527", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.2-2.3", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.2-2.3/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.3 to 2.4\"?\n\nAssistant: This page covers the known issues and changes when upgrading from Argo CD version 2.3 to 2.4.\n\nHere's a detailed explanation:\n\n\n## Known Issues\nThis section outlines the known issues when upgrading from Argo CD 2.3 to 2.4.\n\n## Broken `project` filter before 2.4.27\nArgo CD 2.4.0 introduced a breaking API change, renaming the `project` filter to `projects`. A similar issue applies to other API clients which communicate with the Argo CD API server via its REST API. If the client uses the `project` field to filter projects, the filter will not be applied. **The failing project filter could** **have detrimental consequences if, for example, you rely on it to list Applications to be deleted.**\n\n## Impact to API clients\nA similar issue applies to other API clients which communicate with the Argo CD API server via its REST API. If the client uses the `project` field to filter projects, the filter will not be applied. **The failing project filter could** **have detrimental consequences if, for example, you rely on it to list Applications to be deleted.**\n\n## Impact to CLI clients\nCLI clients older that v2.4.0 rely on client-side filtering and are not impacted by this bug.\n\n## How to fix the problem\nUpgrade to Argo CD >=2.4.27, >=2.5.15, or >=2.6.6. This version of Argo CD will accept both `project` and `projects` as valid filters.\n\n## KSonnet support is removed\nKsonnet was deprecated in 2019 and is no longer maintained. The time has come to remove it from the Argo CD.\n\n## Helm 2 support is removed\nHelm 2 has not been officially supported since Nov 2020. In order to ensure a smooth transition, Helm 2 support was preserved in the Argo CD. We feel that Helm 3 is stable, and it is time to drop Helm 2 support.\n\n## Support for private repo SSH keys using the SHA-1 signature hash algorithm is removed\nNote: this change was back-ported to 2.3.7 and 2.2.12. Argo CD 2.4 upgraded its base image from Ubuntu 20.04 to Ubuntu 22.04, which upgraded OpenSSH to 8.9. OpenSSH starting with 8.8 dropped support for the `ssh-rsa` SHA-1 key signature algorithm. The signature algorithm is _not_ the same as the algorithm used when generating the key. There is no need to update keys. The signature algorithm is negotiated with the SSH server when the connection is being set up. The client offers its list of accepted signature algorithms, and if the server has a match, the connection proceeds. For most SSH servers on up-to-date git providers, acceptable algorithms other than `ssh-rsa` should be available. Before upgrading to Argo CD 2.4, check whether your git provider(s) using SSH authentication support algorithms newer than `rsa-ssh`.\n\n## Workaround\nThe OpenSSH 8.8 release notes describe a workaround if you cannot change the server's key signature algorithms configuration. Incompatibility is more likely when connecting to older SSH implementations that have not been upgraded or have not closely tracked improvements in the SSH protocol. For these cases, it may be necessary to selectively re-enable RSA/SHA1 to allow connection and/or user authentication via the HostkeyAlgorithms and PubkeyAcceptedAlgorithms options. For example, the following stanza in ~/.ssh/config will enable RSA/SHA1 for host and user authentication for a single destination host:\n\n```\nHost old-host\n    HostkeyAlgorithms +ssh-rsa\n    PubkeyAcceptedAlgorithms +ssh-rsa\n```\n\nWe recommend enabling RSA/SHA1 only as a stopgap measure until legacy implementations can be upgraded or reconfigured with another key type (such as ECDSA or Ed25519). To apply this to Argo CD, you could create a ConfigMap with the desired ssh config file and then mount it at `/home/argocd/.ssh/config`.\n\n## Configure RBAC to account for new `exec` resource\n2.4 introduces a new `exec` RBAC resource. When you upgrade to 2.4, RBAC policies with `*` in the resource field and `create` or `*` in the action field will automatically grant the `exec` privilege. To avoid granting the new privilege, replace the existing policy with a list of new policies explicitly listing the old resources. The exec feature is disabled by default, but it is still a good idea to double-check your RBAC configuration to enforce least necessary privileges.\n\n## Example\nOld:\n```\np, role:org-admin, *, create, my-proj/*, allow\n```\nNew:\n```\np, role:org-admin, clusters, create, my-proj/*, allow\np, role:org-admin, projects, create, my-proj/*, allow\np, role:org-admin, applications, create, my-proj/*, allow\np, role:org-admin, repositories, create, my-proj/*, allow\np, role:org-admin, certificates, create, my-proj/*, allow\np, role:org-admin, accounts, create, my-proj/*, allow\np, role:org-admin, gpgkeys, create, my-proj/*, allow\n```\n\n## Enable logs RBAC enforcement\n2.4 introduced `logs` as a new RBAC resource. In 2.3, users with `applications, get` access automatically get logs access. Important Logs RBAC enforcement **will not** be enabled by default in 2.5. This decision was made to avoid breaking logs access under Project Roles, which do not provide a mechanism to grant `logs` resource access. To enable logs RBAC enforcement, add this to your argocd-cm ConfigMap:\n```\nserver.rbac.log.enforce.enable: \"true\"\n```\nIf you want to allow the same users to continue to have logs access, just find every line that grants `applications, get` access and also grant `logs, get`.\n\n## Example\nOld:\n```\np, role:staging-db-admins, applications, get, staging-db-admins/*, allow\np, role:test-db-admins, applications, *, staging-db-admins/*, allow\n```\nNew:\n```\np, role:staging-db-admins, applications, get, staging-db-admins/*, allow\np, role:staging-db-admins, logs, get, staging-db-admins/*, allow\np, role:test-db-admins, applications, *, staging-db-admins/*, allow\np, role:test-db-admins, logs, get, staging-db-admins/*, allow\n```\n\n## Pod Logs UI\nSince 2.4.9, the LOGS tab in pod view is visible in the UI only for users with explicit allow get logs policy.\n\n## Known pod logs UI issue prior to 2.4.9\nUpon pressing the \"LOGS\" tab in pod view by users who don't have an explicit allow get logs policy, the red \"unable to load data: Internal error\" is received in the bottom of the screen, and \"Failed to load data, please try again\" is displayed.\n\n## Test repo-server with its new dedicated Service Account\nAs a security enhancement, the argocd-repo-server Deployment uses its own Service Account instead of `default`. If you have a custom environment that might depend on repo-server using the `default` Service Account (such as a plugin that uses the Service Account for auth), be sure to test before deploying the 2.4 upgrade to production.\n\n## Plugins\nThis section outlines the changes related to plugins in Argo CD 2.4.\n\n## Remove the shared volume from any sidecar plugins\nAs a security enhancement, sidecar plugins no longer share the /tmp directory with the repo-server. If you have one or more sidecar plugins enabled, replace the /tmp volume mount for each sidecar to use a volume specific to each plugin.\n\n## Update plugins to use newly-prefixed environment variables\nIf you use plugins that depend on user-supplied environment variables, then they must be updated to be compatible with Argo CD 2.4. Here is an example of user-supplied environment variables in the `plugin` section of an Application spec:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    plugin:\n      env:\n        - name: FOO\n          value: bar\n```\nGoing forward, all user-supplied environment variables will be prefixed with `ARGOCD_ENV_` before being sent to the plugin's `init`, `generate`, or `discover` commands. This prevents users from setting potentially-sensitive environment variables. If you have written a custom plugin which handles user-provided environment variables, update it to handle the new prefix.\n\n## Confirm sidecar plugins have all necessary environment variables\nA bug in < 2.4 caused `init` and `generate` commands to receive environment variables from the main repo-server container, taking precedence over environment variables from the plugin's sidecar. Starting in 2.4, sidecar plugins will not receive environment variables from the main repo-server container. Make sure that any environment variables necessary for the sidecar plugin to function are set on the sidecar plugin.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.3-2.4", "title": "v2.3 to 2.4", "description": "This page covers the known issues and changes when upgrading from Argo CD version 2.3 to 2.4.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-28 01:36:53", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.3-2.4/", "viewport": "width=device-width,initial-scale=1", "title": "v2.3 to 2.4 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "94bd8952-5aaa-4ca9-be27-c62030919089", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.3-2.4", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.3-2.4/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v2.3 to 2.4\"?\n\nAssistant: Here are some code examples:\n\n### Check SSH version\n```yaml\nssh -V\n```\n\n### Example output for SSH version\n```yaml\nOpenSSH_8.9p1 Ubuntu-3, OpenSSL 3.0.2 15 Mar 2022\n```\n\n### Check server using weak ssh-rsa public key algorithm\n```yaml\nssh -oHostKeyAlgorithms=-ssh-rsa user@host\n```\n\n### Error message for unsupported key signature algorithms\n```yaml\n$ ssh -oHostKeyAlgorithms=-ssh-rsa vs-ssh.visualstudio.com\nUnable to negotiate with 20.42.134.1 port 22: no matching host key type found. Their offer: ssh-rsa\n```\n\n### Old RBAC policy example\n```yaml\np, role:org-admin, *, create, my-proj/*, allow\n```\n\n### New RBAC policy example\n```yaml\np, role:org-admin, clusters, create, my-proj/*, allow\np, role:org-admin, projects, create, my-proj/*, allow\np, role:org-admin, applications, create, my-proj/*, allow\np, role:org-admin, repositories, create, my-proj/*, allow\np, role:org-admin, certificates, create, my-proj/*, allow\np, role:org-admin, accounts, create, my-proj/*, allow\np, role:org-admin, gpgkeys, create, my-proj/*, allow\n```\n\n### Old RBAC policy example for logs\n```yaml\np, role:staging-db-admins, applications, get, staging-db-admins/*, allow\np, role:test-db-admins, applications, *, staging-db-admins/*, allow\n```\n\n### New RBAC policy example for logs\n```yaml\np, role:staging-db-admins, applications, get, staging-db-admins/*, allow\np, role:staging-db-admins, logs, get, staging-db-admins/*, allow\np, role:test-db-admins, applications, *, staging-db-admins/*, allow\np, role:test-db-admins, logs, get, staging-db-admins/*, allow\n```\n\n### Sidecar plugin volume mount example\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: argocd-repo-server\nspec:\n  template:\n    spec:\n      containers:\n      - name: your-plugin-name\n        volumeMounts:\n        - mountPath: /tmp\n          name: your-plugin-name-tmp\n      volumes:\n        # Add this volume.\n        - name: your-plugin-name-tmp\n          emptyDir: {}\n```\n\n### User-supplied environment variables in plugin section\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  source:\n    plugin:\n      env:\n        - name: FOO\n          value: bar\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.3-2.4", "title": "v2.3 to 2.4", "description": "This page covers the known issues and changes when upgrading from Argo CD version 2.3 to 2.4.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-28 01:36:53", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.3-2.4/", "viewport": "width=device-width,initial-scale=1", "title": "v2.3 to 2.4 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "94bd8952-5aaa-4ca9-be27-c62030919089", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.3-2.4", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.3-2.4/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.3 to 2.4\"?\n\nAssistant: Here are the recommended best practices:\n\n• Upgrade to Argo CD >=2.4.27, >=2.5.15, or >=2.6.6 to fix the broken project filter issue.\n• Check your git provider(s) for SSH authentication support algorithms before upgrading to Argo CD 2.4.\n• Double-check your RBAC configuration to enforce least necessary privileges after upgrading to 2.4.\n• Remove the shared volume from any sidecar plugins to enhance security.\n• Update plugins to use newly-prefixed environment variables to prevent setting sensitive variables.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.3-2.4", "title": "v2.3 to 2.4", "description": "This page covers the known issues and changes when upgrading from Argo CD version 2.3 to 2.4.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-28 01:36:53", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.3-2.4/", "viewport": "width=device-width,initial-scale=1", "title": "v2.3 to 2.4 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "94bd8952-5aaa-4ca9-be27-c62030919089", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.3-2.4", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.3-2.4/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.4 to 2.5\"?\n\nAssistant: This page covers the known issues, configuration changes, and upgrades required when transitioning from Argo CD version 2.4 to 2.5.\n\nHere's a detailed explanation:\n\n\n## Known Issues\nThis section outlines the known issues when upgrading from Argo CD 2.4 to 2.5.\n\n## Broken `project` filter before 2.5.15\nArgo CD 2.4.0 introduced a breaking API change, renaming the `project` filter to `projects`. A similar issue applies to other API clients which communicate with the Argo CD API server via its REST API. If the client uses the `project` field to filter projects, the filter will not be applied. **The failing project filter could** **have detrimental consequences if, for example, you rely on it to list Applications to be deleted.**\n\n## Impact to API clients\nA similar issue applies to other API clients which communicate with the Argo CD API server via its REST API. If the client uses the `project` field to filter projects, the filter will not be applied. **The failing project filter could** **have detrimental consequences if, for example, you rely on it to list Applications to be deleted.**\n\n## Impact to CLI clients\nCLI clients older that v2.4.0 rely on client-side filtering and are not impacted by this bug.\n\n## How to fix the problem\nUpgrade to Argo CD >=2.4.27, >=2.5.15, or >=2.6.6. This version of Argo CD will accept both `project` and `projects` as valid filters.\n\n## Broken matrix-nested git files generator in 2.5.14\nArgo CD 2.5.14 introduced a bug in the matrix-nested git files generator. The bug only applies when the git files generator is the second generator nested under a matrix. For example:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - matrix:\n      generators:\n        - clusters: {}\n        - git:\n            repoURL: https://git.example.com/org/repo.git\n            revision: HEAD\n            files:\n              - path: \"defaults/*.yaml\"\n  template:\n    # ...\n```\n\nThe nested git files generator will produce no parameters, causing the matrix generator to also produce no parameters. This will cause the ApplicationSet to produce no Applications. If the ApplicationSet controller is configured with the ability to delete applications, it will delete all Applications which were previously created by the ApplicationSet. To avoid this issue, upgrade directly to >=2.5.15 or >= 2.6.6.\n\n## Configure RBAC to account for new `applicationsets` resource\n2.5 introduces a new `applicationsets` RBAC resource. When you upgrade to 2.5, RBAC policies with `*` in the resource field and `create`, `update`, `delete`, `get`, or `*` in the action field will automatically grant the `applicationsets` privilege. To avoid granting the new privilege, replace the existing policy with a list of new policies explicitly listing the old resources.\n\n## Example\nOld:\n\n```\np, role:org-admin, *, create, *, allow\n```\n\nNew:\n\n```\np, role:org-admin, clusters,     create, *, allow\np, role:org-admin, projects,     create, *, allow\np, role:org-admin, applications, create, *, allow\np, role:org-admin, repositories, create, *, allow\np, role:org-admin, certificates, create, *, allow\np, role:org-admin, accounts,     create, *, allow\np, role:org-admin, gpgkeys,      create, *, allow\np, role:org-admin, exec,         create, *, allow\n```\n\n(Note that `applicationsets` is missing from the list, to preserve pre-2.5 permissions.)\n\n## argocd-cm plugins (CMPs) are deprecated\nStarting with Argo CD v2.5, installing config management plugins (CMPs) via the `argocd-cm` ConfigMap is deprecated. Support will be removed in v2.7. You can continue to use the plugins by installing them as sidecars on the repo-server Deployment. Sidecar plugins are significantly more secure. Plugin code runs in its own container with an almost completely-isolated filesystem. If an attacker compromises a plugin, the attacker's ability to cause harm is significantly mitigated.\n\n## Dex server TLS configuration\nIn order to secure the communications between the dex server and the Argo CD API server, TLS is now enabled by default on the dex server. By default, without configuration, the dex server will generate a self-signed certificate upon startup. However, we recommend that users configure their own TLS certificate using the `argocd-dex-server-tls` secret. Please refer to the TLS configuration guide for more information.\n\n## Invalid users.session.duration values now fall back to 24h\nBefore v2.5, an invalid `users.session.duration` value in argocd-cm would 1) log a warning and 2) result in user sessions having no duration limit. Starting with v2.5, invalid duration values will fall back to the default value of 24 hours with a warning.\n\n## Out-of-bounds symlinks now blocked at fetch\nThere have been several path traversal and identification vulnerabilities disclosed in the past related to symlinks. To help prevent any further vulnerabilities, we now scan all repositories and Helm charts for out of bounds symlinks at the time they are fetched and block further processing if they are found.\n\n## Deprecated client-side manifest diffs\nWhen using `argocd app diff --local`, code from the repo server is run on the user's machine in order to locally generate manifests for comparing against the live manifests of an app. However, this requires that the necessary tools (Helm, Kustomize, etc) are installed with the correct versions. Even worse, it does not support Config Management Plugins (CMPs) whatsoever.\n\n## Upgraded Kustomize Version\nThe bundled Kustomize version has been upgraded from 4.4.1 to 4.5.7.\n\n## Upgraded Helm Version\nNote that bundled Helm version has been upgraded from 3.9.0 to 3.10.1.\n\n## Upgraded HAProxy version\nThe HAProxy version in the HA manifests has been upgraded from 2.0.25 to 2.6.2.\n\n## Logs RBAC enforcement will remain opt-in\nThis note is just for clarity. No action is required.\n\n## `argocd app create` for old CLI versions fails with API version >=2.5.16\nStarting with Argo CD 2.5.16, the API returns `PermissionDenied` instead of `NotFound` for Application `GET` requests if the Application does not exist.\n\n## Golang upgrade in 2.5.20\nIn 2.5.20, we upgrade the Golang version used to build Argo CD from 1.18 to 1.19. If you use Argo CD as a library, you may need to upgrade your Go version.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.4-2.5", "title": "v2.4 to 2.5", "description": "This page covers the known issues, configuration changes, and upgrades required when transitioning from Argo CD version 2.4 to 2.5.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-02-28 01:37:29", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.4-2.5/", "language": "en", "title": "v2.4 to 2.5 - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "4f9985eb-be3a-4960-8774-da36c3b774b7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.4-2.5", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.4-2.5/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v2.4 to 2.5\"?\n\nAssistant: Here are some code examples:\n\n### Broken matrix-nested git files generator example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - matrix:\n      generators:\n        - clusters: {}\n        - git:\n            repoURL: https://git.example.com/org/repo.git\n            revision: HEAD\n            files:\n              - path: \"defaults/*.yaml\"\n  template:\n    # ...\n\n```\n\n### Old RBAC policy example\n```yaml\np, role:org-admin, *, create, *, allow\n\n```\n\n### New RBAC policy example\n```yaml\np, role:org-admin, clusters,     create, *, allow\np, role:org-admin, projects,     create, *, allow\np, role:org-admin, applications, create, *, allow\np, role:org-admin, repositories, create, *, allow\np, role:org-admin, certificates, create, *, allow\np, role:org-admin, accounts,     create, *, allow\np, role:org-admin, gpgkeys,      create, *, allow\np, role:org-admin, exec,         create, *, allow\n\n```\n\n### Out-of-bounds symlinks example\n```yaml\nchart\n├── Chart.yaml\n├── values\n│   └── values.yaml\n├── bad-link.yaml   -> ../out-of-bounds.yaml       # Blocked\n├── bad-link-2.yaml -> ../chart/values/values.yaml # Blocked because it leaves the root\n├── bad-link-3.yaml -> /absolute/link.yaml         # Blocked\n└── good-link.yaml  -> values/values.yaml          # OK\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.4-2.5", "title": "v2.4 to 2.5", "description": "This page covers the known issues, configuration changes, and upgrades required when transitioning from Argo CD version 2.4 to 2.5.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-02-28 01:37:29", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.4-2.5/", "language": "en", "title": "v2.4 to 2.5 - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "4f9985eb-be3a-4960-8774-da36c3b774b7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.4-2.5", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.4-2.5/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.4 to 2.5\"?\n\nAssistant: Here are the recommended best practices:\n\n• Upgrade to Argo CD >=2.4.27, >=2.5.15, or >=2.6.6 to fix the broken project filter issue.\n• Upgrade directly to >=2.5.15 or >= 2.6.6 to resolve the matrix-nested git files generator bug.\n• Replace existing RBAC policies with explicit lists of old resources to avoid granting new privileges for applicationsets.\n• Install config management plugins as sidecars for better security.\n• Configure your own TLS certificate for the dex server instead of using the self-signed certificate generated by default.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.4-2.5", "title": "v2.4 to 2.5", "description": "This page covers the known issues, configuration changes, and upgrades required when transitioning from Argo CD version 2.4 to 2.5.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-02-28 01:37:29", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.4-2.5/", "language": "en", "title": "v2.4 to 2.5 - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "4f9985eb-be3a-4960-8774-da36c3b774b7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.4-2.5", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.4-2.5/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.5 to 2.6\"?\n\nAssistant: This page covers the known issues and changes when upgrading from Argo CD version 2.5 to 2.6.\n\nHere's a detailed explanation:\n\n\n## Known Issues\nThis section outlines the known issues when upgrading from Argo CD v2.5 to v2.6.\n\n## Broken `project` filter before 2.6.6\nArgo CD 2.4.0 introduced a breaking API change, renaming the `project` filter to `projects`. A similar issue applies to other API clients which communicate with the Argo CD API server via its REST API. If the client uses the `project` field to filter projects, the filter will not be applied. **The failing project filter could have detrimental consequences if, for example, you rely on it to list Applications to be deleted.** CLI clients older that v2.4.0 rely on client-side filtering and are not impacted by this bug. Upgrade to Argo CD >=2.4.27, >=2.5.15, or >=2.6.6. This version of Argo CD will accept both `project` and `projects` as valid filters.\n\n## Broken matrix-nested git files generator in 2.6.5\nArgo CD 2.6.5 introduced a bug in the matrix-nested git files generator. The bug only applies when the git files generator is the second generator nested under a matrix. For example:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - matrix:\n      generators:\n        - clusters: {}\n        - git:\n            repoURL: https://git.example.com/org/repo.git\n            revision: HEAD\n            files:\n              - path: \"defaults/*.yaml\"\n  template:\n    # ...\n```\n\nThe nested git files generator will produce no parameters, causing the matrix generator to also produce no parameters. This will cause the ApplicationSet to produce no Applications. If the ApplicationSet controller is configured with the ability to delete applications, it will delete all Applications which were previously created by the ApplicationSet. To avoid this issue, upgrade directly to >=2.5.15 or >= 2.6.6.\n\n## ApplicationSets: `^` behavior change in Sprig's semver functions\nArgo CD 2.5 introduced Go templating in ApplicationSets. Go templates have access to the Sprig function library. Argo CD 2.6 upgrades Sprig to v3. That upgrade includes an upgrade of Masterminds/semver to v3. Masterminds/semver v3 changed the behavior of the `^` prefix in semantic version constraints. If you are using Go-templated ApplicationSets which include references to Sprig's semver functions and use the `^` prefix, read the Masterminds/semver changelog to understand how your ApplicationSets' behavior may change.\n\n## Applications with suspended jobs now marked \"Suspended\" instead of \"Progressing\"\nPrior to Argo CD v2.6, an Application managing a suspended Job would be marked as \"Progressing\". This was confusing/unexpected behavior for many. Starting with v2.6, Argo CD will mark such Applications as \"Suspended\". If you have processes which rely on the previous behavior (for example, a CI job with an argocd app wait call), update those before upgrading to v2.6.\n\n## The API Server now requires tokens to include the `aud` claim by default\nArgo CD v2.6 now requires that the `aud` claim be present in the token used to authenticate to the API Server. This is a security improvement, as it prevents tokens from being used against the API Server which were not intended for it. If you rely on an OIDC provider which does not provide a `aud` claim, you can disable this requirement by setting the `skipAudienceCheckWhenTokenHasNoAudience` flag to `true` in your Argo CD OIDC configuration.\n\n## Removal of argocd-cm plugin support delayed until 2.7\nSupport for argocd-cm plugins was previously scheduled for 2.6. At the time, sidecar plugins could not be specified by name. Argo CD v2.6 introduces support for specifying sidecar plugins by name. Removal of argocd-cm plugin support has been delayed until 2.7 to provide a transition time for users who need to specify plugins by name.\n\n## `argocd app create` for old CLI versions fails with API version >=2.6.7\nStarting with Argo CD 2.6.7, the API returns `PermissionDenied` instead of `NotFound` for Application `GET` requests if the Application does not exist. The Argo CD CLI before versions starting with version 2.5.0-rc1 and before versions 2.5.16 and 2.6.7 does a `GET` request before the `POST` request in `argocd app create`. The command does not gracefully handle the `PermissionDenied` response and will therefore fail to create/update the Application. To solve the issue, upgrade the CLI to at least 2.5.16, or 2.6.7.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.5-2.6", "title": "v2.5 to 2.6", "description": "This page covers the known issues and changes when upgrading from Argo CD version 2.5 to 2.6.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 01:37:47", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "title": "v2.5 to 2.6 - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.5-2.6/", "scrapeId": "65982489-9ce3-450b-a8fd-26b9e482dada", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.5-2.6", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.5-2.6/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v2.5 to 2.6\"?\n\nAssistant: Here are some code examples:\n\n### Nested git files generator example\n```yaml\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - matrix:\n      generators:\n        - clusters: {}\n        - git:\n            repoURL: https://git.example.com/org/repo.git\n            revision: HEAD\n            files:\n              - path: \"defaults/*.yaml\"\n  template:\n    # ...\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.5-2.6", "title": "v2.5 to 2.6", "description": "This page covers the known issues and changes when upgrading from Argo CD version 2.5 to 2.6.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 01:37:47", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "title": "v2.5 to 2.6 - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.5-2.6/", "scrapeId": "65982489-9ce3-450b-a8fd-26b9e482dada", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.5-2.6", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.5-2.6/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.5 to 2.6\"?\n\nAssistant: Here are the recommended best practices:\n\n• Upgrade to Argo CD >=2.4.27, >=2.5.15, or >=2.6.6 to fix the broken project filter issue.\n• Upgrade directly to >=2.5.15 or >= 2.6.6 to avoid issues with the matrix-nested git files generator.\n• Update processes that rely on the previous behavior of Applications with suspended jobs before upgrading to v2.6.\n• If using an OIDC provider that does not provide an `aud` claim, set the `skipAudienceCheckWhenTokenHasNoAudience` flag to `true` in your Argo CD OIDC configuration.\n• Upgrade the CLI to at least 2.5.16, or 2.6.7 to avoid issues with `argocd app create`.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.5-2.6", "title": "v2.5 to 2.6", "description": "This page covers the known issues and changes when upgrading from Argo CD version 2.5 to 2.6.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 01:37:47", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "title": "v2.5 to 2.6 - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.5-2.6/", "scrapeId": "65982489-9ce3-450b-a8fd-26b9e482dada", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.5-2.6", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.5-2.6/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.6 to 2.7\"?\n\nAssistant: This page covers the upgrade process from Argo CD version 2.6 to 2.7, including changes in RBAC, Helm and Kustomize versions, and other important updates.\n\nHere's a detailed explanation:\n\n\n## Configure RBAC to account for new `extensions` resource\n2.7 introduces the new [Proxy Extensions](https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions/) feature with a new `extensions` [RBAC resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#the-extensions-resource).\n\nWhen you upgrade to 2.7, RBAC policies with `*` in the _resource_ field and `*` in the action field, it will automatically grant the `extensions` privilege.\n\nThe Proxy Extension feature is disabled by default, however it is recommended to check your RBAC configurations to enforce the least necessary privileges.\n\n## Upgraded Helm Version\nNote that bundled Helm version has been upgraded from 3.10.3 to 3.11.2.\n\n## Upgraded Kustomize Version\nNote that bundled Kustomize version has been upgraded from 4.5.7 to 5.0.1.\n\n## Notifications: `^` behavior change in Sprig's semver functions\nArgo CD 2.7 upgrades Sprig templating specifically within Argo CD notifications to v3. That upgrade includes an upgrade of [Masterminds/semver](https://github.com/Masterminds/semver/releases) to v3.\n\nMasterminds/semver v3 changed the behavior of the `^` prefix in semantic version constraints. If you are using sprig template functions in your notifications templates which include references to [Sprig's semver functions](https://masterminds.github.io/sprig/semver.html) and use the `^` prefix, read the [Masterminds/semver changelog](https://github.com/Masterminds/semver/releases/tag/v3.0.0) to understand how your notifications' behavior may change.\n\n## Tini as entrypoint\nThe manifests are now using [`tini` as entrypoint](https://github.com/argoproj/argo-cd/pull/12707), instead of `entrypoint.sh`. Until 2.8, `entrypoint.sh` is retained for upgrade compatibility. This means that the deployment manifests have to be updated after upgrading to 2.7, and before upgrading to 2.8 later. In case the manifests are updated before moving to 2.8, the containers will not be able to start.\n\n## Deep Links template updates\nDeep Links now allow you to access other values like `cluster`, `project`, `application` and `resource` in the url and condition templates for specific categories of links.\nThe templating syntax has also been updated to be prefixed with the type of resource you want to access for example previously if you had a `resource.links` config like :\n\n```\n  resource.links: |\n    - url: https://mycompany.splunk.com?search={{.metadata.name}}\n      title: Splunk\n      if: kind == \"Pod\" || kind == \"Deployment\"\n```\n\nThis would become :\n\n```\n  resource.links: |\n    - url: https://mycompany.splunk.com?search={{.resource.metadata.name}}&env={{.project.metadata.label.env}}\n      title: Splunk\n      if: resource.kind == \"Pod\" || resource.kind == \"Deployment\"\n```\n\nRead the full [documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/deep_links/) to see all possible combinations of values accessible fo each category of links.\n\n## Support of `helm.sh/resource-policy` annotation\nArgo CD now supports the `helm.sh/resource-policy` annotation to control the deletion of resources. The behavior is the same as the behavior of `argocd.argoproj.io/sync-options: Delete=false` annotation: if the annotation is present and set to `keep`, the resource will not be deleted when the application is deleted.\n\n## Check your Kustomize patches for `--redis` changes\nStarting in Argo CD 2.7, the install manifests no longer pass the Redis server name via `--redis`.\n\nIf your environment uses Kustomize JSON patches to modify the Redis server name, the patch might break when you upgrade to the 2.7 manifests. If it does, you can remove the patch and instead set the Redis server name via the `redis.server` field in the argocd-cmd-params-cm ConfigMap. That value will be passed to the necessary components via `valueFrom` environment variables.\n\n## `argocd applicationset` CLI incompatibilities for ApplicationSets with list generators\nIf you are running Argo CD v2.7.0-2.7.2 server-side, then CLI versions outside that range will incorrectly handle list generators. That is because the gRPC interface for those versions used the `elements` field number for the new `elementsYaml` field.\n\nIf you are running the Argo CD CLI versions v2.7.0-2.7.2 with a server-side version of v2.7.3 or later, then the CLI will send the contents of the `elements` field to the server, which will interpret it as the `elementsYaml` field. This will cause the ApplicationSet to fail at runtime with an error similar to this:\n\n```\nerror unmarshling decoded ElementsYaml error converting YAML to JSON: yaml: control characters are not allowed\n```\n\nBe sure to use CLI version v2.7.3 or later with server-side version v2.7.3 or later.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.6-2.7", "title": "v2.6 to 2.7", "description": "This page covers the upgrade process from Argo CD version 2.6 to 2.7, including changes in RBAC, Helm and Kustomize versions, and other important updates.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 01:38:11", "type": "overview", "page_metadata": {"title": "v2.6 to 2.7 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.6-2.7/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "88c7e270-4295-4931-b327-717b8c0ec9f8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.6-2.7", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.6-2.7/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v2.6 to 2.7\"?\n\nAssistant: Here are some code examples:\n\n### Old RBAC Policy Example\n```yaml\np, role:org-admin, *, *, *, allow\n```\n\n### New RBAC Policy Example\n```yaml\np, role:org-admin, clusters, create, my-proj/*, allow\np, role:org-admin, projects, create, my-proj/*, allow\np, role:org-admin, applications, create, my-proj/*, allow\np, role:org-admin, repositories, create, my-proj/*, allow\np, role:org-admin, certificates, create, my-proj/*, allow\np, role:org-admin, accounts, create, my-proj/*, allow\np, role:org-admin, gpgkeys, create, my-proj/*, allow\n# If you don't want to grant the new permission, don't include the following line\np, role:org-admin, extensions, invoke, my-proj/*, allow\n```\n\n### Deep Links Resource Links Example\n```yaml\nresource.links: |\n  - url: https://mycompany.splunk.com?search={{.resource.metadata.name}}&env={{.project.metadata.label.env}}\n    title: Splunk\n    if: resource.kind == \"Pod\" || resource.kind == \"Deployment\"\n```\n\n### Error Example for CLI Incompatibility\n```yaml\nerror unmarshling decoded ElementsYaml error converting YAML to JSON: yaml: control characters are not allowed\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.6-2.7", "title": "v2.6 to 2.7", "description": "This page covers the upgrade process from Argo CD version 2.6 to 2.7, including changes in RBAC, Helm and Kustomize versions, and other important updates.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 01:38:11", "type": "code_examples", "page_metadata": {"title": "v2.6 to 2.7 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.6-2.7/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "88c7e270-4295-4931-b327-717b8c0ec9f8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.6-2.7", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.6-2.7/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.6 to 2.7\"?\n\nAssistant: Here are the recommended best practices:\n\n• Check your RBAC configurations to enforce the least necessary privileges.\n• Be sure to use CLI version v2.7.3 or later with server-side version v2.7.3 or later.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.6-2.7", "title": "v2.6 to 2.7", "description": "This page covers the upgrade process from Argo CD version 2.6 to 2.7, including changes in RBAC, Helm and Kustomize versions, and other important updates.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 01:38:11", "type": "best_practices", "page_metadata": {"title": "v2.6 to 2.7 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.6-2.7/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "88c7e270-4295-4931-b327-717b8c0ec9f8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.6-2.7", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.6-2.7/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.7 to 2.8\"?\n\nAssistant: This page covers the upgrade process from Argo CD version 2.7 to 2.8, detailing changes and necessary actions for a successful transition.\n\nHere's a detailed explanation:\n\n\n## Support dropped for argocd-cm plugins\nConfig Management Plugins installed via the argocd-cm ConfigMap will not work starting with v2.8.\n\nSee the migration guide to upgrade your plugin.\n\n## Tini as entrypoint\nWith the 2.8 release `entrypoint.sh` will be removed from the containers, because starting with 2.7, the implicit entrypoint is set to `tini` in the `Dockerfile` explicitly, and the Kubernetes manifests has been updated to use it. Simply updating the containers without updating the deployment manifests will result in pod startup failures, as the old manifests are relying on `entrypoint.sh` instead of `tini`. Please make sure the manifests are updated properly before moving to 2.8.\n\n## Filtering applied to cluster List API endpoint\nPrior to `v2.8`, the `List` endpoint on the `ClusterService` did **not** filter clusters when responding, despite accepting query parameters. This bug has been addressed, and query parameters are now taken into account to filter the resulting list of clusters.\n\n## Configure RBAC to account for new actions\n2.8 introduces three new actions:\n\n- Create a Job from a CronJob\n- Create a Workflow from a CronWorkflow\n- Create a Workflow from a WorkflowTemplate\n\nWhen you upgrade to 2.8, RBAC policies with `applications` in the _resource_ field and `*` or `action/*` in the action field, it will automatically grant the ability to use these new actions.\n\nIf you would like to avoid granting these new permissions, you can update your RBAC policies to be more specific.\n\n## Example\nOld:\n\n```\np, role:action-runner, applications, actions/, *, allow\n```\n\nNew:\n\n```\np, role:action-runner, applications, action/argoproj.io/Rollout/abort, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/promote-full, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/retry, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/resume, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/restart, *, allow\np, role:action-runner, applications, action/argoproj.io/AnalysisRun/terminate, *, allow\np, role:action-runner, applications, action/apps/DaemonSet/restart, *, allow\np, role:action-runner, applications, action/apps/StatefulSet/restart, *, allow\np, role:action-runner, applications, action/apps/Deployment/pause, *, allow\np, role:action-runner, applications, action/apps/Deployment/resume, *, allow\np, role:action-runner, applications, action/apps/Deployment/restart, *, allow\n\n# If you don't want to grant the new permissions, don't include the following lines\np, role:action-runner, applications, action/argoproj.io/WorkflowTemplate/create-workflow, *, allow\np, role:action-runner, applications, action/argoproj.io/CronWorkflow/create-workflow, *, allow\np, role:action-runner, applications, action/batch/CronJob/create-job, *, allow\n```\n\n\n## Change default file open mode\nIn version 2.7, the CMP plugin was changed to open Git/Helm files with all executable bits set (unless `preserveFileMode` was specified).\n\nVersion 2.8 removes the executable bits in cases where they are not necessary.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.7-2.8", "title": "v2.7 to 2.8", "description": "This page covers the upgrade process from Argo CD version 2.7 to 2.8, detailing changes and necessary actions for a successful transition.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:38:31", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "v2.7 to 2.8 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.7-2.8/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "f78ae50d-5922-4604-b052-7b71cca7db9f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.7-2.8", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.7-2.8/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v2.7 to 2.8\"?\n\nAssistant: Here are some code examples:\n\n### RBAC Policy Example\n```yaml\nOld:\n\n```\np, role:action-runner, applications, actions/, *, allow\n```\n\nNew:\n\n```\np, role:action-runner, applications, action/argoproj.io/Rollout/abort, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/promote-full, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/retry, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/resume, *, allow\np, role:action-runner, applications, action/argoproj.io/Rollout/restart, *, allow\np, role:action-runner, applications, action/argoproj.io/AnalysisRun/terminate, *, allow\np, role:action-runner, applications, action/apps/DaemonSet/restart, *, allow\np, role:action-runner, applications, action/apps/StatefulSet/restart, *, allow\np, role:action-runner, applications, action/apps/Deployment/pause, *, allow\np, role:action-runner, applications, action/apps/Deployment/resume, *, allow\np, role:action-runner, applications, action/apps/Deployment/restart, *, allow\n\n# If you don't want to grant the new permissions, don't include the following lines\np, role:action-runner, applications, action/argoproj.io/WorkflowTemplate/create-workflow, *, allow\np, role:action-runner, applications, action/argoproj.io/CronWorkflow/create-workflow, *, allow\np, role:action-runner, applications, action/batch/CronJob/create-job, *, allow\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.7-2.8", "title": "v2.7 to 2.8", "description": "This page covers the upgrade process from Argo CD version 2.7 to 2.8, detailing changes and necessary actions for a successful transition.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:38:31", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "v2.7 to 2.8 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.7-2.8/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "f78ae50d-5922-4604-b052-7b71cca7db9f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.7-2.8", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.7-2.8/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.7 to 2.8\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to update the deployment manifests when upgrading to 2.8 to avoid pod startup failures.\n• If you want to avoid granting new permissions in RBAC, update your policies to be more specific.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.7-2.8", "title": "v2.7 to 2.8", "description": "This page covers the upgrade process from Argo CD version 2.7 to 2.8, detailing changes and necessary actions for a successful transition.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:38:31", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "v2.7 to 2.8 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.7-2.8/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "f78ae50d-5922-4604-b052-7b71cca7db9f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.7-2.8", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.7-2.8/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.8 to 2.9\"?\n\nAssistant: Documentation on upgrading from Argo CD version 2.8 to 2.9.\n\nHere's a detailed explanation:\n\n\n## Upgraded Kustomize Version\nNote that bundled Kustomize version has been upgraded from 5.1.0 to 5.2.1.\n\n## Egress NetworkPolicy for `argocd-redis` and `argocd-redis-ha-haproxy`\nStarting with Argo CD 2.9.16, the NetworkPolicy for the `argocd-redis` and `argocd-redis-ha-haproxy` dropped Egress restrictions. This change was made to allow access to the Kubernetes API to create a secret to secure Redis access.\n\nTo retain similar networking restrictions as before 2.9.16, you can add an Egress rule to allow access only to the Kubernetes API and access needed by Redis itself. The Egress rule for Kubernetes access will depend entirely on your Kubernetes setup. The access for Redis itself can be allowed by adding the following to the `argocd-redis-network-policy` NetworkPolicy:\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.8-2.9", "title": "v2.8 to 2.9", "description": "Documentation on upgrading from Argo CD version 2.8 to 2.9.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:38:44", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/upgrading/2.8-2.9/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "v2.8 to 2.9 - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "52e67966-cb7c-4381-9c47-a34db93752e0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.8-2.9", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.8-2.9/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v2.8 to 2.9\"?\n\nAssistant: Here are some code examples:\n\n### Egress Rule for argocd-redis\n```yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-network-policy\nspec:\n  policyTypes:\n  - Ingress\n+  - Egress\n+  egress:\n+  - ports:\n+    - port: 53\n+      protocol: UDP\n+    - port: 53\n+      protocol: TCP\n\n```\n\n### Egress Rule for argocd-redis-ha-haproxy\n```yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-ha-haproxy\nspec:\n  policyTypes:\n  - Ingress\n+  - Egress\n+  egress:\n+  - ports:\n+    - port: 6379\n+      protocol: TCP\n+    - port: 26379\n+      protocol: TCP\n+    to:\n+    - podSelector:\n+        matchLabels:\n+          app.kubernetes.io/name: argocd-redis-ha\n+  - ports:\n+    - port: 53\n+      protocol: UDP\n+    - port: 53\n+      protocol: TCP\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.8-2.9", "title": "v2.8 to 2.9", "description": "Documentation on upgrading from Argo CD version 2.8 to 2.9.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:38:44", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/upgrading/2.8-2.9/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "v2.8 to 2.9 - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "52e67966-cb7c-4381-9c47-a34db93752e0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.8-2.9", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.8-2.9/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.8 to 2.9\"?\n\nAssistant: Here are the recommended best practices:\n\n• To retain similar networking restrictions as before 2.9.16, add an Egress rule to allow access only to the Kubernetes API and access needed by Redis itself.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.8-2.9", "title": "v2.8 to 2.9", "description": "Documentation on upgrading from Argo CD version 2.8 to 2.9.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:38:44", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/upgrading/2.8-2.9/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "v2.8 to 2.9 - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "52e67966-cb7c-4381-9c47-a34db93752e0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.8-2.9", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.8-2.9/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"v2.9 to 2.10\"?\n\nAssistant: This page covers the changes and upgrades from Argo CD version 2.9 to 2.10, including changes in managedNamespaceMetadata, Helm version upgrades, and network policy updates.\n\nHere's a detailed explanation:\n\n\n## `managedNamespaceMetadata` no longer preserves client-side-applied labels or annotations\nArgo CD 2.10 upgraded kubectl from 1.24 to 1.26. This upgrade introduced a change where client-side-applied labels and annotations are no longer preserved when using a server-side kubectl apply. This change affects the `managedNamespaceMetadata` field of the `Application` CRD. Previously, labels and annotations applied via a client-side apply would be preserved when `managedNamespaceMetadata` was enabled. Now, those existing labels and annotation will be removed.\n\nTo avoid unexpected behavior, follow the [client-side to server-side resource upgrade guide](https://kubernetes.io/docs/reference/using-api/server-side-apply/#upgrading-from-client-side-apply-to-server-side-apply) before enabling `managedNamespaceMetadata` on an existing namespace.\n\n## Upgraded Helm Version\nNote that bundled Helm version has been upgraded from 3.13.2 to 3.14.3.\n\n## Egress NetworkPolicy for `argocd-redis` and `argocd-redis-ha-haproxy`\nStarting with Argo CD 2.10.11, the NetworkPolicy for the `argocd-redis` and `argocd-redis-ha-haproxy` dropped Egress restrictions. This change was made to allow access to the Kubernetes API to create a secret to secure Redis access.\n\nTo retain similar networking restrictions as before 2.10.11, you can add an Egress rule to allow access only to the Kubernetes API and access needed by Redis itself. The Egress rule for Kubernetes access will depend entirely on your Kubernetes setup. The access for Redis itself can be allowed by adding the following to the `argocd-redis-network-policy` NetworkPolicy:\n\n```yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-network-policy\nspec:\n  policyTypes:\n  - Ingress\n+  - Egress\n+  egress:\n+  - ports:\n+    - port: 53\n+      protocol: UDP\n+    - port: 53\n+      protocol: TCP\n```\n\n```yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-ha-haproxy\nspec:\n  policyTypes:\n  - Ingress\n+  - Egress\n+  egress:\n+  - ports:\n+    - port: 6379\n+      protocol: TCP\n+    - port: 26379\n+      protocol: TCP\n+    to:\n+    - podSelector:\n+        matchLabels:\n+          app.kubernetes.io/name: argocd-redis-ha\n+  - ports:\n+    - port: 53\n+      protocol: UDP\n+    - port: 53\n+      protocol: TCP\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.9-2.10", "title": "v2.9 to 2.10", "description": "This page covers the changes and upgrades from Argo CD version 2.9 to 2.10, including changes in managedNamespaceMetadata, Helm version upgrades, and network policy updates.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:38:59", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "title": "v2.9 to 2.10 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.9-2.10/", "language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "scrapeId": "6af75128-3337-4fe5-8d7e-c10b8a29205f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.9-2.10", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.9-2.10/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"v2.9 to 2.10\"?\n\nAssistant: Here are some code examples:\n\n### argocd-redis-network-policy\n```yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-network-policy\nspec:\n  policyTypes:\n  - Ingress\n+  - Egress\n+  egress:\n+  - ports:\n+    - port: 53\n+      protocol: UDP\n+    - port: 53\n+      protocol: TCP\n\n```\n\n### argocd-redis-ha-haproxy\n```yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: argocd-redis-ha-haproxy\nspec:\n  policyTypes:\n  - Ingress\n+  - Egress\n+  egress:\n+  - ports:\n+    - port: 6379\n+      protocol: TCP\n+    - port: 26379\n+      protocol: TCP\n+    to:\n+    - podSelector:\n+        matchLabels:\n+          app.kubernetes.io/name: argocd-redis-ha\n+  - ports:\n+    - port: 53\n+      protocol: UDP\n+    - port: 53\n+      protocol: TCP\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.9-2.10", "title": "v2.9 to 2.10", "description": "This page covers the changes and upgrades from Argo CD version 2.9 to 2.10, including changes in managedNamespaceMetadata, Helm version upgrades, and network policy updates.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:38:59", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "title": "v2.9 to 2.10 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.9-2.10/", "language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "scrapeId": "6af75128-3337-4fe5-8d7e-c10b8a29205f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.9-2.10", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.9-2.10/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"v2.9 to 2.10\"?\n\nAssistant: Here are the recommended best practices:\n\n• Follow the client-side to server-side resource upgrade guide before enabling `managedNamespaceMetadata` on an existing namespace.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.9-2.10", "title": "v2.9 to 2.10", "description": "This page covers the changes and upgrades from Argo CD version 2.9 to 2.10, including changes in managedNamespaceMetadata, Helm version upgrades, and network policy updates.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:38:59", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "title": "v2.9 to 2.10 - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/upgrading/2.9-2.10/", "language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "scrapeId": "6af75128-3337-4fe5-8d7e-c10b8a29205f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.9-2.10", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/2.9-2.10/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Overview\"?\n\nAssistant: This section contains information on upgrading Argo CD. Before upgrading please make sure to read details about the breaking changes between Argo CD versions.\n\nHere's a detailed explanation:\n\n\n## Upgrade Guidelines\nArgo CD uses semver-like versioning that ensures the following rules:\n\n- The patch release does not introduce any breaking changes. So if you are upgrading from v1.5.1 to v1.5.3 there should be no special instructions to follow.\n- The minor release might introduce minor changes with a workaround. If you are upgrading from v1.3.0 to v1.5.2 please make sure to check upgrading details in both [v1.3 to v1.4](https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.3-1.4/) and [v1.4 to v1.5](https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/1.4-1.5/) upgrading instructions.\n- The major release introduces backward incompatible behavior changes. It is recommended to take a backup of Argo CD settings using disaster recovery [guide](https://argo-cd.readthedocs.io/en/stable/operator-manual/disaster_recovery/).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview", "title": "Overview", "description": "This section contains information on upgrading Argo CD. Before upgrading please make sure to read details about the breaking changes between Argo CD versions.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:39:07", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/upgrading/overview/", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "scrapeId": "df34da5b-c371-4e49-85cd-93cc8cc6d52d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Overview\"?\n\nAssistant: Here are some code examples:\n\n### Upgrade Command for Non-HA\n```yaml\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/<version>/manifests/install.yaml\n```\n\n### Upgrade Command for HA\n```yaml\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/<version>/manifests/ha/install.yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview", "title": "Overview", "description": "This section contains information on upgrading Argo CD. Before upgrading please make sure to read details about the breaking changes between Argo CD versions.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:39:07", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/upgrading/overview/", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "scrapeId": "df34da5b-c371-4e49-85cd-93cc8cc6d52d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Overview\"?\n\nAssistant: Here are the recommended best practices:\n\n• Even though some releases require only image change it is still recommended to apply whole manifests set. Manifest changes might include important parameter modifications and applying the whole set will protect you from introducing misconfiguration.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview", "title": "Overview", "description": "This section contains information on upgrading Argo CD. Before upgrading please make sure to read details about the breaking changes between Argo CD versions.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:39:07", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/upgrading/overview/", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "scrapeId": "df34da5b-c371-4e49-85cd-93cc8cc6d52d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/upgrading/overview/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"User Management\"?\n\nAssistant: This page covers user management in Argo CD, including local user creation, SSO integration, and managing user accounts.\n\nHere's a detailed explanation:\n\n\n## Overview\nOnce installed Argo CD has one built-in `admin` user that has full access to the system. It is recommended to use `admin` user only for initial configuration and then switch to local users or configure SSO integration.\n\n## Local users/accounts\nThe local users/accounts feature serves two main use-cases:\n\n- Auth tokens for Argo CD management automation. It is possible to configure an API account with limited permissions and generate an authentication token. Such token can be used to automatically create applications, projects etc.\n- Additional users for a very small team where use of SSO integration might be considered an overkill. The local users don't provide advanced features such as groups, login history etc. So if you need such features it is strongly recommended to use SSO.\n\nNote\n\nWhen you create local users, each of those users will need additional [RBAC rules](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/) set up, otherwise they will fall back to the default policy specified by `policy.default` field of the `argocd-rbac-cm` ConfigMap.\n\nThe maximum length of a local account's username is 32.\n\n## Create new user\nNew users should be defined in `argocd-cm` ConfigMap:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  # add an additional local user with apiKey and login capabilities\n  #   apiKey - allows generating API keys\n  #   login - allows to login using UI\n  accounts.alice: apiKey, login\n  # disables user. User is enabled by default\n  accounts.alice.enabled: \"false\"\n```\n\nEach user might have two capabilities:\n\n- apiKey - allows generating authentication tokens for API access\n- login - allows to login using UI\n\n## Delete user\nIn order to delete a user, you must remove the corresponding entry defined in the `argocd-cm` ConfigMap:\n\nExample:\n\n```\nkubectl patch -n argocd cm argocd-cm --type='json' -p='[{\"op\": \"remove\", \"path\": \"/data/accounts.alice\"}]'\n```\n\nIt is recommended to also remove the password entry in the `argocd-secret` Secret:\n\nExample:\n\n```\nkubectl patch -n argocd secrets argocd-secret --type='json' -p='[{\"op\": \"remove\", \"path\": \"/data/accounts.alice.password\"}]'\n```\n\n\n## Disable admin user\nAs soon as additional users are created it is recommended to disable `admin` user:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  admin.enabled: \"false\"\n```\n\n\n## Manage users\nThe Argo CD CLI provides set of commands to set user password and generate tokens.\n\n- Get full users list\n\n```\nargocd account list\n```\n\n- Get specific user details\n\n```\nargocd account get --account <username>\n```\n\n- Set user password\n\n```\n# if you are managing users as the admin user, <current-user-password> should be the current admin password.\nargocd account update-password \\\n    --account <name> \\\n    --current-password <current-user-password> \\\n    --new-password <new-user-password>\n```\n\n- Generate auth token\n\n```\n# if flag --account is omitted then Argo CD generates token for current user\nargocd account generate-token --account <username>\n```\n\n## Failed logins rate limiting\nArgo CD rejects login attempts after too many failed in order to prevent password brute-forcing. The following environments variables are available to control throttling settings:\n\n- `ARGOCD_SESSION_FAILURE_MAX_FAIL_COUNT`: Maximum number of failed logins before Argo CD starts rejecting login attempts. Default: 5.\n- `ARGOCD_SESSION_FAILURE_WINDOW_SECONDS`: Number of seconds for the failure window. Default: 300 (5 minutes). If this is set to 0, the failure window is disabled and the login attempts gets rejected after 10 consecutive logon failures, regardless of the time frame they happened.\n- `ARGOCD_SESSION_MAX_CACHE_SIZE`: Maximum number of entries allowed in the cache. Default: 1000\n- `ARGOCD_MAX_CONCURRENT_LOGIN_REQUESTS_COUNT`: Limits max number of concurrent login requests. If set to 0 then limit is disabled. Default: 50.\n\n## SSO\nThere are two ways that SSO can be configured:\n\n- [Bundled Dex OIDC provider](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#dex) \\- use this option if your current provider does not support OIDC (e.g. SAML, LDAP) or if you wish to leverage any of Dex's connector features (e.g. the ability to map GitHub organizations and teams to OIDC groups claims). Dex also supports OIDC directly and can fetch user information from the identity provider when the groups cannot be included in the IDToken.\n- [Existing OIDC provider](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#existing-oidc-provider) \\- use this if you already have an OIDC provider which you are using (e.g. [Okta](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/okta/), [OneLogin](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/onelogin/), [Auth0](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/auth0/), [Microsoft](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/microsoft/), [Keycloak](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak/), [Google (G Suite)](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/google/)), where you manage your users, groups, and memberships.\n\n## Dex\nArgo CD embeds and bundles [Dex](https://github.com/dexidp/dex) as part of its installation, for the purpose of delegating authentication to an external identity provider. Multiple types of identity providers are supported (OIDC, SAML, LDAP, GitHub, etc...). SSO configuration of Argo CD requires editing the `argocd-cm` ConfigMap with [Dex connector](https://dexidp.io/docs/connectors/) settings.\n\nThis document describes how to configure Argo CD SSO using GitHub (OAuth2) as an example, but the steps should be similar for other identity providers.\n\n## 1. Register the application in the identity provider\nIn GitHub, register a new application. The callback address should be the `/api/dex/callback` endpoint of your Argo CD URL (e.g. `https://argocd.example.com/api/dex/callback`).\n\n![Register OAuth App](https://argo-cd.readthedocs.io/en/stable/assets/register-app.png)\n\nAfter registering the app, you will receive an OAuth2 client ID and secret. These values will be inputted into the Argo CD configmap.\n\n![OAuth2 Client Config](https://argo-cd.readthedocs.io/en/stable/assets/oauth2-config.png)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management", "title": "User Management", "description": "This page covers user management in Argo CD, including local user creation, SSO integration, and managing user accounts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 01:39:42", "type": "overview", "page_metadata": {"title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/user-management/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "c9da7f25-4713-4411-b25a-19d8025603a2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"User Management\"?\n\nAssistant: Here are some code examples:\n\n### Create new user\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  # add an additional local user with apiKey and login capabilities\n  #   apiKey - allows generating API keys\n  #   login - allows to login using UI\n  accounts.alice: apiKey, login\n  # disables user. User is enabled by default\n  accounts.alice.enabled: \"false\"\n```\n\n### Delete user\n```yaml\nkubectl patch -n argocd cm argocd-cm --type='json' -p='[{\"op\": \"remove\", \"path\": \"/data/accounts.alice\"}]'\n```\n\n### Remove password entry\n```yaml\nkubectl patch -n argocd secrets argocd-secret --type='json' -p='[{\"op\": \"remove\", \"path\": \"/data/accounts.alice.password\"}]'\n```\n\n### Disable admin user\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  admin.enabled: \"false\"\n```\n\n### Get full users list\n```yaml\nargocd account list\n```\n\n### Get specific user details\n```yaml\nargocd account get --account <username>\n```\n\n### Set user password\n```yaml\nargocd account update-password \\\n    --account <name> \\\n    --current-password <current-user-password> \\\n    --new-password <new-user-password>\n```\n\n### Generate auth token\n```yaml\nargocd account generate-token --account <username>\n```\n\n### SSO configuration example\n```yaml\ndata:\n  url: https://argocd.example.com\n\n  dex.config: |\n    connectors:\n      # GitHub example\n      - type: github\n        id: github\n        name: GitHub\n        config:\n          clientID: aabbccddeeff00112233\n          clientSecret: $dex.github.clientSecret # Alternatively $<some_K8S_secret>:dex.github.clientSecret\n          orgs:\n          - name: your-github-org\n\n      # GitHub enterprise example\n      - type: github\n        id: acme-github\n        name: Acme GitHub\n        config:\n          hostName: github.acme.example.com\n          clientID: abcdefghijklmnopqrst\n          clientSecret: $dex.acme.clientSecret  # Alternatively $<some_K8S_secret>:dex.acme.clientSecret\n          orgs:\n          - name: your-github-org\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management", "title": "User Management", "description": "This page covers user management in Argo CD, including local user creation, SSO integration, and managing user accounts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 01:39:42", "type": "code_examples", "page_metadata": {"title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/user-management/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "c9da7f25-4713-4411-b25a-19d8025603a2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"User Management\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `admin` user only for initial configuration and then switch to local users or configure SSO integration.\n• When creating local users, ensure to set up additional RBAC rules to avoid falling back to default policies.\n• It is recommended to disable the `admin` user as soon as additional users are created.\n• Store sensitive data such as client secrets in Kubernetes secrets and reference them in the configmaps.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management", "title": "User Management", "description": "This page covers user management in Argo CD, including local user creation, SSO integration, and managing user accounts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 01:39:42", "type": "best_practices", "page_metadata": {"title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/user-management/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "c9da7f25-4713-4411-b25a-19d8025603a2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Auth0\"?\n\nAssistant: This page covers user management with Auth0 in Argo CD, including user definitions, app registration, authorization rules, and configuration steps.\n\nHere's a detailed explanation:\n\n\n## User-definitions\nUser-definitions in Auth0 is out of scope for this guide. Add them directly in Auth0 database, use an enterprise registry, or \"social login\".\n_Note_: all users have access to all Auth0 defined apps unless you restrict access via configuration - keep this in mind if argo is exposed on the internet or else anyone can login.\n\n## Registering the app with Auth0\nFollow the [register app](https://auth0.com/docs/dashboard/guides/applications/register-app-spa) instructions to create the argocd app in Auth0. In the app definition:\n\n- Take note of the _clientId_ and _clientSecret_ values.\n- Register login url as https://your.argoingress.address/login\n- Set allowed callback url to https://your.argoingress.address/auth/callback\n- Under connections, select the user-registries you want to use with argo.\n\nAny other settings are non-essential for the authentication to work.\n\n## Adding authorization rules to Auth0\nFollow Auth0 [authorization guide](https://auth0.com/docs/authorization) to setup authorization.\nThe important part to note here is that group-membership is a non-standard claim, and hence is required to be put under a FQDN claim name, for instance `http://your.domain/groups`.\n\n## Configuring argo\n### Configure OIDC for ArgoCD\n\n`kubectl edit configmap argocd-cm`\n\n```\n...\ndata:\n  application.instanceLabelKey: argocd.argoproj.io/instance\n  url: https://your.argoingress.address\n  oidc.config: |\n    name: Auth0\n    issuer: https://<yourtenant>.<eu|us>.auth0.com/\n    clientID: <theClientId>\n    clientSecret: <theClientSecret>\n    domain_hint: <theDomainHint>\n    requestedScopes:\n    - openid\n    - profile\n    - email\n    # not strictly necessary - but good practice:\n    - 'http://your.domain/groups'\n...\n```\n\n### Configure RBAC for ArgoCD\n\n`kubectl edit configmap argocd-rbac-cm` (or use helm values).\n\n```\n...\ndata:\n  policy.csv: |\n    # let members with group someProjectGroup handle apps in someProject\n    # this can also be defined in the UI in the group-definition to avoid doing it there in the configmap\n    p, someProjectGroup, applications, *, someProject/*, allow\n    # let the group membership argocd-admins from OIDC become role:admin - needs to go into the configmap\n    g, argocd-global-admins, role:admin\n  policy.default: role:readonly\n  # essential to get argo to use groups for RBAC:\n  scopes: '[http://your.domain/groups, email]'\n...\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/auth0", "title": "Auth0", "description": "This page covers user management with Auth0 in Argo CD, including user definitions, app registration, authorization rules, and configuration steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:40:12", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Auth0 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/user-management/auth0/", "readthedocs-http-status": "200", "scrapeId": "f3f79d95-0e25-4461-bcbf-b37c890317b7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/auth0", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/auth0/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Auth0\"?\n\nAssistant: Here are some code examples:\n\n### Configure OIDC for ArgoCD\n```yaml\nkubectl edit configmap argocd-cm\n\n```\n...\ndata:\n  application.instanceLabelKey: argocd.argoproj.io/instance\n  url: https://your.argoingress.address\n  oidc.config: |\n    name: Auth0\n    issuer: https://<yourtenant>.<eu|us>.auth0.com/\n    clientID: <theClientId>\n    clientSecret: <theClientSecret>\n    domain_hint: <theDomainHint>\n    requestedScopes:\n    - openid\n    - profile\n    - email\n    # not strictly necessary - but good practice:\n    - 'http://your.domain/groups'\n...\n```\n```\n\n### Configure RBAC for ArgoCD\n```yaml\nkubectl edit configmap argocd-rbac-cm (or use helm values).\n\n```\n...\ndata:\n  policy.csv: |\n    # let members with group someProjectGroup handle apps in someProject\n    # this can also be defined in the UI in the group-definition to avoid doing it there in the configmap\n    p, someProjectGroup, applications, *, someProject/*, allow\n    # let the group membership argocd-admins from OIDC become role:admin - needs to go into the configmap\n    g, argocd-global-admins, role:admin\n  policy.default: role:readonly\n  # essential to get argo to use groups for RBAC:\n  scopes: '[http://your.domain/groups, email]'\n...\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/auth0", "title": "Auth0", "description": "This page covers user management with Auth0 in Argo CD, including user definitions, app registration, authorization rules, and configuration steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:40:12", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Auth0 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/user-management/auth0/", "readthedocs-http-status": "200", "scrapeId": "f3f79d95-0e25-4461-bcbf-b37c890317b7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/auth0", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/auth0/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Auth0\"?\n\nAssistant: Here are the recommended best practices:\n\n• All users have access to all Auth0 defined apps unless you restrict access via configuration.\n• Group-membership is a non-standard claim and should be put under a FQDN claim name.\n• Storing client secrets securely is essential.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/auth0", "title": "Auth0", "description": "This page covers user management with Auth0 in Argo CD, including user definitions, app registration, authorization rules, and configuration steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:40:12", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Auth0 - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/user-management/auth0/", "readthedocs-http-status": "200", "scrapeId": "f3f79d95-0e25-4461-bcbf-b37c890317b7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/auth0", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/auth0/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Google\"?\n\nAssistant: This page covers the integration of Argo CD login with Google Workspace users using various methods including OpenID Connect and SAML.\n\nHere's a detailed explanation:\n\n\n## Overview\nThere are three different ways to integrate Argo CD login with your Google Workspace users. Generally the OpenID Connect (oidc) method would be the recommended way of doing this integration (and easier, as well...), but depending on your needs, you may choose a different option.\n\n- OpenID Connect using Dex: This is the recommended login method if you don't need information about the groups the user's belongs to. Google doesn't expose the `groups` claim via oidc, so you won't be able to use Google Groups membership information for RBAC.\n- SAML App Auth using Dex: Dex recommends avoiding this method. Also, you won't get Google Groups membership information through this method.\n- OpenID Connect plus Google Groups using Dex: This is the recommended method if you need to use Google Groups membership in your RBAC configuration.\n\nOnce you've set up one of the above integrations, be sure to edit `argo-rbac-cm` to configure permissions (as in the example below). See RBAC Configurations for more detailed scenarios.\n\n## OpenID Connect using Dex\n### Configure your OAuth consent screen\nIf you've never configured this, you'll be redirected straight to this if you try to create an OAuth Client ID\n\n1. Go to your OAuth Consent configuration. If you still haven't created one, select `Internal` or `External` and click `Create`\n2. Go and edit your OAuth consent screen. Verify you're in the correct project!\n3. Configure a name for your login app and a user support email address\n4. The app logo and filling the information links is not mandatory, but it's a nice touch for the login page\n5. In \"Authorized domains\" add the domains who are allowed to log in to ArgoCD (e.g. if you add `example.com`, all Google Workspace users with an `@example.com` address will be able to log in)\n6. Save to continue to the \"Scopes\" section\n7. Click on \"Add or remove scopes\" and add the `.../auth/userinfo.profile` and the `openid` scopes\n8. Save, review the summary of your changes and finish.\n\n### Configure a new OAuth Client ID\n1. Go to your Google API Credentials console, and make sure you're in the correct project.\n2. Click on \"+Create Credentials\"/\"OAuth Client ID\"\n3. Select \"Web Application\" in the Application Type drop down menu, and enter an identifying name for your app (e.g. `Argo CD`)\n4. Fill \"Authorized JavaScript origins\" with your Argo CD URL, e.g. `https://argocd.example.com`\n5. Fill \"Authorized redirect URIs\" with your Argo CD URL plus `/api/dex/callback`, e.g. `https://argocd.example.com/api/dex/callback`\n6. Click \"Create\" and save your \"Client ID\" and your \"Client Secret\" for later.\n\n### Configure Argo to use OpenID Connect\nEdit `argocd-cm` and add the following `dex.config` to the data section, replacing `clientID` and `clientSecret` with the values you saved before:\n\n```\ndata:\n  url: https://argocd.example.com\n  dex.config: |\n    connectors:\n    - config:\n        issuer: https://accounts.google.com\n        clientID: XXXXXXXXXXXXX.apps.googleusercontent.com\n        clientSecret: XXXXXXXXXXXXX\ntype: oidc\nid: google\nname: Google\n```\n\n## SAML App Auth using Dex\n### Configure a new SAML App\n* * *\nDeprecation Warning\nNote that, according to Dex documentation, SAML is considered unsafe and they are planning to deprecate that module.\n* * *\n1. In the Google admin console, open the left-side menu and select `Apps` > `SAML Apps`\n2. Under `Add App` select `Add custom SAML app`\n3. Enter a `Name` for the application (e.g. `Argo CD`), then choose `Continue`\n4. Download the metadata or copy the `SSO URL`, `Certificate`, and optionally `Entity ID` from the identity provider details for use in the next section. Choose `continue`.\n   - Base64 encode the contents of the certificate file, for example:\n   - `$ cat ArgoCD.cer | base64`\n   - Keep a copy of the encoded output to be used in the next section.\n   - Ensure that the certificate is in PEM format before base64 encoding.\n5. For both the `ACS URL` and `Entity ID`, use your Argo Dex Callback URL, for example: `https://argocd.example.com/api/dex/callback`\n6. Add SAML Attribute Mapping, Map `Primary email` to `name` and `Primary Email` to `email`. and click `ADD MAPPING` button.\n7. Finish creating the application.\n\n### Configure Argo to use the new Google SAML App\nEdit `argocd-cm` and add the following `dex.config` to the data section, replacing the `caData`, `argocd.example.com`, `sso-url`, and optionally `google-entity-id` with your values from the Google SAML App:\n\n```\ndata:\n  url: https://argocd.example.com\n  dex.config: |\n    connectors:\n    - type: saml\n      id: saml\n      name: saml\n      config:\n        ssoURL: https://sso-url (e.g. https://accounts.google.com/o/saml2/idp?idpid=Abcde0)\n        entityIssuer: https://argocd.example.com/api/dex/callback\n        caData: |\n          BASE64-ENCODED-CERTIFICATE-DATA\n        redirectURI: https://argocd.example.com/api/dex/callback\n        usernameAttr: name\n        emailAttr: email\n        # optional\n        ssoIssuer: https://google-entity-id (e.g. https://accounts.google.com/o/saml2?idpid=Abcde0)\n```\n\n## OpenID Connect plus Google Groups using Dex\nWe're going to use Dex's `google` connector to get additional Google Groups information from your users, allowing you to use group membership on your RBAC, i.e., giving `admin` role to the whole `sysadmins@yourcompany.com` group.\n\nThis connector uses two different credentials:\n- An oidc client ID and secret: Same as when you're configuring an OpenID connection, this authenticates your users.\n- A Google service account: This is used to connect to the Google Directory API and pull information about your user's group membership.\n\nAlso, you'll need the email address for an admin user on this domain. Dex will impersonate that user identity to fetch user information from the API.\n\n### Configure OpenID Connect\nGo through the same steps as in OpenID Connect using Dex, except for configuring `argocd-cm`. We'll do that later.\n\n### Set up Directory API access\n1. Follow Google instructions to create a service account with Domain-Wide Delegation.\n   - When assigning API scopes to the service account assign **only** the `https://www.googleapis.com/auth/admin.directory.group.readonly` scope and nothing else. If you assign any other scopes, you won't be able to fetch information from the API.\n   - Create the credentials in JSON format and store them in a safe place, we'll need them later.\n2. Enable the Admin SDK.\n\n### Configure Dex\n1. Create a secret with the contents of the previous json file encoded in base64, like this:\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n     name: argocd-google-groups-json\n     namespace: argocd\ndata:\n     googleAuth.json: JSON_FILE_BASE64_ENCODED\n```\n\n2. Edit your `argocd-dex-server` deployment to mount that secret as a file.\n   - Add a volume mount in `/spec/template/spec/containers/0/volumeMounts/` like this. Be aware of editing the running container and not the init container!\n\n     ```\n     volumeMounts:\n- mountPath: /shared\n  name: static-files\n- mountPath: /tmp\n  name: dexconfig\n- mountPath: /tmp/oidc\n  name: google-json\n  readOnly: true\n```  \n   - Add a volume in `/spec/template/spec/volumes/` like this:\n\n     ```\n     volumes:\n- emptyDir: {}\n  name: static-files\n- emptyDir: {}\n  name: dexconfig\n- name: google-json\n  secret:\n    defaultMode: 420\n    secretName: argocd-google-groups-json\n```  \n3. Edit `argocd-cm` and add the following `dex.config` to the data section, replacing `clientID` and `clientSecret` with the values you saved before, `adminEmail` with the address for the admin user you're going to impersonate, and editing `redirectURI` with your Argo CD domain (note that the `type` is now `google` instead of `oidc`):\n\n```\ndex.config: |\n     connectors:\n  - config:\n      redirectURI: https://argocd.example.com/api/dex/callback\n      clientID: XXXXXXXXXXXXX.apps.googleusercontent.com\n      clientSecret: XXXXXXXXXXXXX\n      serviceAccountFilePath: /tmp/oidc/googleAuth.json\n      adminEmail: admin-email@example.com\n    type: google\n    id: google\n    name: Google\n```\n4. Restart your `argocd-dex-server` deployment to be sure it's using the latest configuration.\n5. Login to Argo CD and go to the \"User info\" section, were you should see the groups you're member.\n6. Now you can use groups email addresses to give RBAC permissions.\n7. Dex (> v2.31.0) can also be configure to fetch transitive group membership as follows:\n\n```\ndex.config: |\n     connectors:\n  - config:\n      redirectURI: https://argocd.example.com/api/dex/callback\n      clientID: XXXXXXXXXXXXX.apps.googleusercontent.com\n      clientSecret: XXXXXXXXXXXXX\n      serviceAccountFilePath: /tmp/oidc/googleAuth.json\n      adminEmail: admin-email@example.com\n      fetchTransitiveGroupMembership: True\n    type: google\n    id: google\n    name: Google\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/google", "title": "Google", "description": "This page covers the integration of Argo CD login with Google Workspace users using various methods including OpenID Connect and SAML.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:40:55", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/user-management/google/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "Google - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "6c62f82c-bc0e-4ea3-830d-c4d8e1f290f0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/google", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/google/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Google\"?\n\nAssistant: Here are some code examples:\n\n### RBAC Config Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\ndata:\n  policy.default: role:readonly\n\n```\n\n### OpenID Connect Configuration\n```yaml\ndata:\n  url: https://argocd.example.com\n  dex.config: |\n    connectors:\n    - config:\n        issuer: https://accounts.google.com\n        clientID: XXXXXXXXXXXXX.apps.googleusercontent.com\n        clientSecret: XXXXXXXXXXXXX\n      type: oidc\n      id: google\n      name: Google\n\n```\n\n### SAML App Configuration\n```yaml\ndata:\n  url: https://argocd.example.com\n  dex.config: |\n    connectors:\n    - type: saml\n      id: saml\n      name: saml\n      config:\n        ssoURL: https://sso-url (e.g. https://accounts.google.com/o/saml2/idp?idpid=Abcde0)\n        entityIssuer: https://argocd.example.com/api/dex/callback\n        caData: |\n          BASE64-ENCODED-CERTIFICATE-DATA\n        redirectURI: https://argocd.example.com/api/dex/callback\n        usernameAttr: name\n        emailAttr: email\n        # optional\n        ssoIssuer: https://google-entity-id (e.g. https://accounts.google.com/o/saml2?idpid=Abcde0)\n\n```\n\n### Google Groups Configuration\n```yaml\ndex.config: |\n     connectors:\n  - config:\n      redirectURI: https://argocd.example.com/api/dex/callback\n      clientID: XXXXXXXXXXXXX.apps.googleusercontent.com\n      clientSecret: XXXXXXXXXXXXX\n      serviceAccountFilePath: /tmp/oidc/googleAuth.json\n      adminEmail: admin-email@example.com\n    type: google\n    id: google\n    name: Google\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/google", "title": "Google", "description": "This page covers the integration of Argo CD login with Google Workspace users using various methods including OpenID Connect and SAML.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:40:55", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/user-management/google/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "Google - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "6c62f82c-bc0e-4ea3-830d-c4d8e1f290f0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/google", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/google/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Google\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use OpenID Connect for easier integration unless group membership is required.\n• Avoid using SAML App Auth as it is considered unsafe and may be deprecated.\n• Ensure to configure the OAuth consent screen properly before creating OAuth Client ID.\n• Always save your Client ID and Client Secret securely after creation.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/google", "title": "Google", "description": "This page covers the integration of Argo CD login with Google Workspace users using various methods including OpenID Connect and SAML.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:40:55", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/user-management/google/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "Google - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "6c62f82c-bc0e-4ea3-830d-c4d8e1f290f0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/google", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/google/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Identity Center (AWS SSO)\"?\n\nAssistant: A working Single Sign-On configuration using Identity Center (AWS SSO) has been achieved using the following method: SAML (with Dex).\n\nHere's a detailed explanation:\n\n\n## SAML (with Dex)\n1. Create a new SAML application in Identity Center and download the certificate.\n   - ![Identity Center SAML App 1](https://argo-cd.readthedocs.io/en/stable/assets/identity-center-1.png)\n   - ![Identity Center SAML App 2](https://argo-cd.readthedocs.io/en/stable/assets/identity-center-2.png)\n2. Click `Assign Users` after creating the application in Identity Center, and select the users or user groups you wish to grant access to this application.\n   - ![Identity Center SAML App 3](https://argo-cd.readthedocs.io/en/stable/assets/identity-center-3.png)\n3. Copy the Argo CD URL into the `data.url` field in the `argocd-cm` ConfigMap.\n\n\n```\ndata:\n     url: https://argocd.example.com\n\n```\n\n4. Configure Attribute mappings.\n\n\nGroup attribute mapping is not officially!\n\n\nGroup attribute mapping is not officially supported in the AWS docs, however the workaround is currently working.\n\n\n   - ![Identity Center SAML App 4](https://argo-cd.readthedocs.io/en/stable/assets/identity-center-4.png)\n   - ![Identity Center SAML App 5](https://argo-cd.readthedocs.io/en/stable/assets/identity-center-5.png)\n\n1. Download the CA certificate to use in the `argocd-cm` configuration.\n   - If using the `caData` field, you'll need to base64-encode the entire certificate, including the `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` stanzas (e.g., `base64 my_cert.pem`).\n   - If using the `ca` field and storing the CA certificate separately as a secret, you will need to mount the secret onto the `dex` container in the `argocd-dex-server` Deployment.\n   - ![Identity Center SAML App 6](https://argo-cd.readthedocs.io/en/stable/assets/identity-center-6.png)\n2. Edit the `argocd-cm` and configure the `data.dex.config` section:\n\n```\ndex.config: |\n  logger:\n    level: debug\n    format: json\n  connectors:\n  - type: saml\n    id: aws\n    name: \"AWS IAM Identity Center\"\n    config:\n      # You need value of Identity Center APP SAML (IAM Identity Center sign-in URL)\n      ssoURL: https://portal.sso.yourregion.amazonaws.com/saml/assertion/id\n      # You need `caData` _OR_ `ca`, but not both.\n      caData: <CA cert (IAM Identity Center Certificate of Identity Center APP SAML) passed through base64 encoding>\n      # Path to mount the secret to the dex container\n      entityIssuer: https://external.path.to.argocd.io/api/dex/callback\n      redirectURI: https://external.path.to.argocd.io/api/dex/callback\n      usernameAttr: email\n      emailAttr: email\n      groupsAttr: groups\n\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/identity-center", "title": "Identity Center (AWS SSO)", "description": "A working Single Sign-On configuration using Identity Center (AWS SSO) has been achieved using the following method: SAML (with Dex).", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:41:15", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "title": "Identity Center (AWS SSO) - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/user-management/identity-center/", "scrapeId": "30dd8d9c-be34-4df5-b059-f5f2c805365c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/identity-center", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/identity-center/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Identity Center (AWS SSO)\"?\n\nAssistant: Here are some code examples:\n\n### Argo CD URL Configuration\n```yaml\ndata:\n     url: https://argocd.example.com\n```\n\n### Dex Configuration\n```yaml\ndex.config: |\n  logger:\n    level: debug\n    format: json\n  connectors:\n  - type: saml\n    id: aws\n    name: \"AWS IAM Identity Center\"\n    config:\n      ssoURL: https://portal.sso.yourregion.amazonaws.com/saml/assertion/id\n      caData: <CA cert (IAM Identity Center Certificate of Identity Center APP SAML) passed through base64 encoding>\n      entityIssuer: https://external.path.to.argocd.io/api/dex/callback\n      redirectURI: https://external.path.to.argocd.io/api/dex/callback\n      usernameAttr: email\n      emailAttr: email\n      groupsAttr: groups\n```\n\n### RBAC Configuration\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\ndata:\n  policy.csv: |\n    g, <Identity Center Group ID>, role:admin\n  scopes: '[groups, email]'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/identity-center", "title": "Identity Center (AWS SSO)", "description": "A working Single Sign-On configuration using Identity Center (AWS SSO) has been achieved using the following method: SAML (with Dex).", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:41:15", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "title": "Identity Center (AWS SSO) - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/user-management/identity-center/", "scrapeId": "30dd8d9c-be34-4df5-b059-f5f2c805365c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/identity-center", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/identity-center/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Identity Center (AWS SSO)\"?\n\nAssistant: Here are the recommended best practices:\n\n• If using the `caData` field, base64-encode the entire certificate, including the `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` stanzas.\n• If using the `ca` field, store the CA certificate separately as a secret and mount it onto the `dex` container in the `argocd-dex-server` Deployment.\n• Group attribute mapping is not officially supported in the AWS docs, but a workaround is currently working.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/identity-center", "title": "Identity Center (AWS SSO)", "description": "A working Single Sign-On configuration using Identity Center (AWS SSO) has been achieved using the following method: SAML (with Dex).", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:41:15", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "title": "Identity Center (AWS SSO) - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/user-management/identity-center/", "scrapeId": "30dd8d9c-be34-4df5-b059-f5f2c805365c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/identity-center", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/identity-center/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Keycloak\"?\n\nAssistant: Keycloak and ArgoCD integration can be configured in two ways with Client authentication and with PKCE.\n\nHere's a detailed explanation:\n\n\n## Keycloak and ArgoCD with Client authentication\nThese instructions will take you through the entire process of getting your ArgoCD application authenticating with Keycloak.\n\nYou will create a client within Keycloak and configure ArgoCD to use Keycloak for authentication, using groups set in Keycloak to determine privileges in Argo.\n\n### Creating a new client in Keycloak\nFirst we need to setup a new client.\n\nStart by logging into your keycloak server, select the realm you want to use ( `master` by default) and then go to **Clients** and click the **Create client** button at the top.\n\nEnable the **Client authentication**.\n\nConfigure the client by setting the **Root URL**, **Web origins**, **Admin URL** to the hostname (https://{hostname}).\n\nAlso you can set **Home URL** to _/applications_ path and **Valid Post logout redirect URIs** to \"https://{hostname}/applications\".\n\nThe Valid Redirect URIs should be set to https://{hostname}/auth/callback (you can also set the less secure https://{hostname}/\\* for testing/development purposes, but it's not recommended in production).\n\nMake sure to click **Save**.\n\nThere should be a tab called **Credentials**. You can copy the Client Secret that we'll use in our ArgoCD configuration.\n\n### Configuring ArgoCD OIDC\nLet's start by storing the client secret you generated earlier in the argocd secret _argocd-secret_.\n\nYou can patch it with value copied previously:\n\n```\nkubectl -n argo-cd patch secret argocd-secret --patch='{\"stringData\": { \"oidc.keycloak.clientSecret\": \"<REPLACE_WITH_CLIENT_SECRET>\" }}'\n```\n\nNow we can configure the config map and add the oidc configuration to enable our keycloak authentication.\nYou can use `$ kubectl edit configmap argocd-cm`.\n\nYour ConfigMap should look like this:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  url: https://argocd.example.com\n  oidc.config: |\n    name: Keycloak\n    issuer: https://keycloak.example.com/realms/master\n    clientID: argocd\n    clientSecret: $oidc.keycloak.clientSecret\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n```\n\nMake sure that:\n\n- **issuer** ends with the correct realm (in this example _master_)\n- **issuer** on Keycloak releases older than version 17 the URL must include /auth (in this example /auth/realms/master)\n- **clientID** is set to the Client ID you configured in Keycloak\n- **clientSecret** points to the right key you created in the _argocd-secret_ Secret\n- **requestedScopes** contains the _groups_ claim if you didn't add it to the Default scopes.\n\n## Keycloak and ArgoCD with PKCE\nThese instructions will take you through the entire process of getting your ArgoCD application authenticating with Keycloak.\n\nYou will create a client within Keycloak and configure ArgoCD to use Keycloak for authentication, using groups set in Keycloak to determine privileges in Argo.\n\nYou will also be able to authenticate using argo-cd command line.\n\n### Creating a new client in Keycloak\nFirst we need to setup a new client.\n\nStart by logging into your keycloak server, select the realm you want to use ( `master` by default) and then go to **Clients** and click the **Create client** button at the top.\n\nLeave default values.\n\nConfigure the client by setting the **Root URL**, **Web origins**, **Admin URL** to the hostname (https://{hostname}).\n\nAlso you can set **Home URL** to _/applications_ path and **Valid Post logout redirect URIs** to \"https://{hostname}/applications\".\n\nThe Valid Redirect URIs should be set to:\n\\- http://localhost:8085/auth/callback (needed for argo-cd cli, depends on value from [--sso-port](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_login/))\n\\- https://{hostname}/auth/callback\n\\- https://{hostname}/pkce/verify\n\nMake sure to click **Save**.\n\nNow go to a tab called **Advanced**, look for parameter named **Proof Key for Code Exchange Code Challenge Method** and set it to **S256**.\n\nMake sure to click **Save**.\n\n### Configuring ArgoCD OIDC\nNow we can configure the config map and add the oidc configuration to enable our keycloak authentication.\nYou can use `$ kubectl edit configmap argocd-cm`.\n\nYour ConfigMap should look like this:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  url: https://argocd.example.com\n  oidc.config: |\n    name: Keycloak\n    issuer: https://keycloak.example.com/realms/master\n    clientID: argocd\n    enablePKCEAuthentication: true\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n```\n\nMake sure that:\n\n- **issuer** ends with the correct realm (in this example _master_)\n- **issuer** on Keycloak releases older than version 17 the URL must include /auth (in this example /auth/realms/master)\n- **clientID** is set to the Client ID you configured in Keycloak\n- **enablePKCEAuthentication** must be set to true to enable correct ArgoCD behaviour with PKCE\n- **requestedScopes** contains the _groups_ claim if you didn't add it to the Default scopes.\n\n## Configuring the groups claim\nIn order for ArgoCD to provide the groups the user is in we need to configure a groups claim that can be included in the authentication token.\n\nTo do this we'll start by creating a new **Client Scope** called _groups_.\n\nOnce you've created the client scope you can now add a Token Mapper which will add the groups claim to the token when the client requests the groups scope.\n\nIn the Tab \"Mappers\", click on \"Configure a new mapper\" and choose **Group Membership**.\n\nMake sure to set the **Name** as well as the **Token Claim Name** to _groups_. Also disable the \"Full group path\".\n\nWe can now configure the client to provide the _groups_ scope.\n\nGo back to the client we've created earlier and go to the Tab \"Client Scopes\".\n\nClick on \"Add client scope\", choose the _groups_ scope and add it either to the **Default** or to the **Optional** Client Scope.\n\nIf you put it in the Optional category you will need to make sure that ArgoCD requests the scope in its OIDC configuration.\nSince we will always want group information, I recommend using the Default category.\n\nCreate a group called _ArgoCDAdmins_ and have your current user join the group.\n\n## Configuring ArgoCD Policy\nNow that we have an authentication that provides groups we want to apply a policy to these groups.\nWe can modify the _argocd-rbac-cm_ ConfigMap using `$ kubectl edit configmap argocd-rbac-cm`.\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\ndata:\n  policy.csv: |\n    g, ArgoCDAdmins, role:admin\n```\n\nIn this example we give the role _role:admin_ to all users in the group _ArgoCDAdmins_.\n\n## Login\nYou can now login using our new Keycloak OIDC authentication:\n\nIf you have used PKCE method, you can also authenticate using command line:\n\n```\nargocd login argocd.example.com --sso --grpc-web\n```\n\nargocd cli will start to listen on localhost:8085 and open your web browser to allow you to authenticate with Keycloak.\n\nOnce done, you should see Authentication successful!\n\n## Troubleshoot\nIf ArgoCD auth returns 401 or when the login attempt leads to the loop, then restart the argocd-server pod.\n\n```\nkubectl rollout restart deployment argocd-server -n argocd\n```\n\nIf you migrate from Client authentification to PKCE, you can have the following error `invalid_request: Missing parameter: code_challenge_method`.\nIt could be a redirect issue, try in private browsing or clean browser cookies.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak", "title": "Keycloak", "description": "Keycloak and ArgoCD integration can be configured in two ways with Client authentication and with PKCE.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:41:50", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/user-management/keycloak/", "viewport": "width=device-width,initial-scale=1", "title": "Keycloak - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "218a6788-7a9d-40f9-9597-e1b5aaf7b5a8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Keycloak\"?\n\nAssistant: Here are some code examples:\n\n### Patch argocd-secret with client secret\n```yaml\nkubectl -n argo-cd patch secret argocd-secret --patch='{\"stringData\": { \"oidc.keycloak.clientSecret\": \"<REPLACE_WITH_CLIENT_SECRET>\" }}'\n```\n\n### ConfigMap for ArgoCD OIDC with Client authentication\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  url: https://argocd.example.com\n  oidc.config: |\n    name: Keycloak\n    issuer: https://keycloak.example.com/realms/master\n    clientID: argocd\n    clientSecret: $oidc.keycloak.clientSecret\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n```\n\n### ConfigMap for ArgoCD OIDC with PKCE\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  url: https://argocd.example.com\n  oidc.config: |\n    name: Keycloak\n    issuer: https://keycloak.example.com/realms/master\n    clientID: argocd\n    enablePKCEAuthentication: true\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n```\n\n### RBAC ConfigMap for ArgoCD\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\ndata:\n  policy.csv: |\n    g, ArgoCDAdmins, role:admin\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak", "title": "Keycloak", "description": "Keycloak and ArgoCD integration can be configured in two ways with Client authentication and with PKCE.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:41:50", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/user-management/keycloak/", "viewport": "width=device-width,initial-scale=1", "title": "Keycloak - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "218a6788-7a9d-40f9-9597-e1b5aaf7b5a8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Keycloak\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to click **Save** after configuring the client in Keycloak.\n• Use the Default category for the _groups_ scope to ensure ArgoCD always requests group information.\n• If you migrate from Client authentication to PKCE, check for the error `invalid_request: Missing parameter: code_challenge_method` and consider redirect issues.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak", "title": "Keycloak", "description": "Keycloak and ArgoCD integration can be configured in two ways with Client authentication and with PKCE.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:41:50", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/user-management/keycloak/", "viewport": "width=device-width,initial-scale=1", "title": "Keycloak - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "218a6788-7a9d-40f9-9597-e1b5aaf7b5a8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/keycloak/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Microsoft\"?\n\nAssistant: Entra ID was formerly known as Azure AD.\n\nHere's a detailed explanation:\n\n\n## Entra ID SAML Enterprise App Auth using Dex\n### Configure a new Entra ID Enterprise App\n1. From the `Microsoft Entra ID` > `Enterprise applications` menu, choose `+ New application`\n2. Select `Non-gallery application`\n3. Enter a `Name` for the application (e.g. `Argo CD`), then choose `Add`\n4. Once the application is created, open it from the `Enterprise applications` menu.\n5. From the `Users and groups` menu of the app, add any users or groups requiring access to the service.\n6. From the `Single sign-on` menu, edit the `Basic SAML Configuration` section as follows (replacing `my-argo-cd-url` with your Argo URL):\n   - **Identifier (Entity ID):** https:// `<my-argo-cd-url>`/api/dex/callback\n   - **Reply URL (Assertion Consumer Service URL):** https:// `<my-argo-cd-url>`/api/dex/callback\n   - **Sign on URL:** https:// `<my-argo-cd-url>`/auth/login\n   - **Relay State:** `<empty>`\n   - **Logout Url:** `<empty>`\n7. From the `Single sign-on` menu, edit the `User Attributes & Claims` section to create the following claims:\n   - `+ Add new claim` | **Name:** email | **Source:** Attribute | **Source attribute:** user.mail\n   - `+ Add group claim` | **Which groups:** All groups | **Source attribute:** Group ID | **Customize:** True | **Name:** Group | **Namespace:** `<empty>` | **Emit groups as role claims:** False\n   - _Note: The `Unique User Identifier` required claim can be left as the default `user.userprincipalname`_\n8. From the `Single sign-on` menu, download the SAML Signing Certificate (Base64)\n   - Base64 encode the contents of the downloaded certificate file, for example:\n   - `$ cat ArgoCD.cer | base64`\n   - _Keep a copy of the encoded output to be used in the next section._\n9. From the `Single sign-on` menu, copy the `Login URL` parameter, to be used in the next section.\n\n## Configure Argo to use the new Entra ID Enterprise App\n1. Edit `argocd-cm` and add the following `dex.config` to the data section, replacing the `caData`, `my-argo-cd-url` and `my-login-url` your values from the Entra ID App:\n\n```\n       data:\n         url: https://my-argo-cd-url\n         dex.config: |\n           logger:\n             level: debug\n             format: json\n           connectors:\n        - type: saml\n          id: saml\n          name: saml\n          config:\n            entityIssuer: https://my-argo-cd-url/api/dex/callback\n            ssoURL: https://my-login-url (e.g. https://login.microsoftonline.com/xxxxx/a/saml2)\n            caData: |\n               MY-BASE64-ENCODED-CERTIFICATE-DATA\n            redirectURI: https://my-argo-cd-url/api/dex/callback\n            usernameAttr: email\n            emailAttr: email\n            groupsAttr: Group\n```\n\n2. Edit `argocd-rbac-cm` to configure permissions, similar to example below.\n   - Use Entra ID `Group IDs` for assigning roles.\n   - See [RBAC Configurations](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/) for more detailed scenarios.\n\n```\n     # example policy\n     policy.default: role:readonly\n     policy.csv: |\n        p, role:org-admin, applications, *, */*, allow\n        p, role:org-admin, clusters, get, *, allow\n        p, role:org-admin, repositories, get, *, allow\n        p, role:org-admin, repositories, create, *, allow\n        p, role:org-admin, repositories, update, *, allow\n        p, role:org-admin, repositories, delete, *, allow\n        g, \"84ce98d1-e359-4f3b-85af-985b458de3c6\", role:org-admin # (azure group assigned to role)\n``\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/microsoft", "title": "Microsoft", "description": "Entra ID was formerly known as Azure AD.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:42:09", "type": "overview", "page_metadata": {"title": "Microsoft - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/user-management/microsoft/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "scrapeId": "ca74cc57-b93a-4dfd-abdf-f92a64e101bc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/microsoft", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/microsoft/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Microsoft\"?\n\nAssistant: Here are some code examples:\n\n### Configure Argo to use the new Entra ID Enterprise App\n```yaml\n```\n       data:\n         url: https://my-argo-cd-url\n         dex.config: |\n           logger:\n             level: debug\n             format: json\n           connectors:\n        - type: saml\n          id: saml\n          name: saml\n          config:\n            entityIssuer: https://my-argo-cd-url/api/dex/callback\n            ssoURL: https://my-login-url (e.g. https://login.microsoftonline.com/xxxxx/a/saml2)\n            caData: |\n               MY-BASE64-ENCODED-CERTIFICATE-DATA\n            redirectURI: https://my-argo-cd-url/api/dex/callback\n            usernameAttr: email\n            emailAttr: email\n            groupsAttr: Group\n``\n```\n\n### RBAC Configuration Example\n```yaml\n```\n     # example policy\n     policy.default: role:readonly\n     policy.csv: |\n        p, role:org-admin, applications, *, */*, allow\n        p, role:org-admin, clusters, get, *, allow\n        p, role:org-admin, repositories, get, *, allow\n        p, role:org-admin, repositories, create, *, allow\n        p, role:org-admin, repositories, update, *, allow\n        p, role:org-admin, repositories, delete, *, allow\n        g, \"84ce98d1-e359-4f3b-85af-985b458de3c6\", role:org-admin # (azure group assigned to role)\n``\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/microsoft", "title": "Microsoft", "description": "Entra ID was formerly known as Azure AD.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:42:09", "type": "code_examples", "page_metadata": {"title": "Microsoft - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/user-management/microsoft/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "scrapeId": "ca74cc57-b93a-4dfd-abdf-f92a64e101bc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/microsoft", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/microsoft/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Microsoft\"?\n\nAssistant: Here are the recommended best practices:\n\n• Keep a copy of the encoded output of the SAML Signing Certificate to be used in the next section.\n• Use Entra ID Group IDs for assigning roles in RBAC configurations.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/microsoft", "title": "Microsoft", "description": "Entra ID was formerly known as Azure AD.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:42:09", "type": "best_practices", "page_metadata": {"title": "Microsoft - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/operator-manual/user-management/microsoft/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "scrapeId": "ca74cc57-b93a-4dfd-abdf-f92a64e101bc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/microsoft", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/microsoft/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Okta\"?\n\nAssistant: This page covers the integration of Okta with Argo CD for user management, including SAML and OIDC configurations.\n\nHere's a detailed explanation:\n\n\n## SAML (with Dex)\nOkta app group assignment\n\nThe Okta app's **Group Attribute Statements** regex will be used later to map Okta groups to Argo CD RBAC roles.\n\n1. Create a new SAML application in Okta UI.\n   - ![Okta SAML App 1](https://argo-cd.readthedocs.io/en/stable/assets/saml-1.png)\n      I've disabled `App Visibility` because Dex doesn't support Provider-initiated login flows.\n   - ![Okta SAML App 2](https://argo-cd.readthedocs.io/en/stable/assets/saml-2.png)\n2. Click `View setup instructions` after creating the application in Okta.\n   - ![Okta SAML App 3](https://argo-cd.readthedocs.io/en/stable/assets/saml-3.png)\n3. Copy the Argo CD URL to the `argocd-cm` in the data.url\n\n```\ndata:\n  url: https://argocd.example.com\n\n```\n\n1. Download the CA certificate to use in the `argocd-cm` configuration.\n   - If you are using this in the caData field, you will need to pass the entire certificate (including `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` stanzas) through base64 encoding, for example, `base64 my_cert.pem`.\n   - If you are using the ca field and storing the CA certificate separately as a secret, you will need to mount the secret to the `dex` container in the `argocd-dex-server` Deployment.\n   - ![Okta SAML App 4](https://argo-cd.readthedocs.io/en/stable/assets/saml-4.png)\n2. Edit the `argocd-cm` and configure the `data.dex.config` section:\n\n```\ndex.config: |\n  logger:\n    level: debug\n    format: json\n  connectors:\n  - type: saml\n    id: okta\n    name: Okta\n    config:\n      ssoURL: https://yourorganization.oktapreview.com/app/yourorganizationsandbox_appnamesaml_2/rghdr9s6hg98s9dse/sso/saml\n      # You need `caData` _OR_ `ca`, but not both.\n      caData: |\n        <CA cert passed through base64 encoding>\n      # You need `caData` _OR_ `ca`, but not both.\n      # Path to mount the secret to the dex container\n      ca: /path/to/ca.pem\n      redirectURI: https://ui.argocd.yourorganization.net/api/dex/callback\n      usernameAttr: email\n      emailAttr: email\n      groupsAttr: group\n\n```\n\n* * *\n\n### Private deployment\n\nIt is possible to setup Okta SSO with a private Argo CD installation, where the Okta callback URL is the only publicly exposed endpoint.\nThe settings are largely the same with a few changes in the Okta app configuration and the `data.dex.config` section of the `argocd-cm` ConfigMap.\n\nUsing this deployment model, the user connects to the private Argo CD UI and the Okta authentication flow seamlessly redirects back to the private UI URL.\n\nOften this public endpoint is exposed through an [Ingress object](https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#private-argo-cd-ui-with-multiple-ingress-objects-and-byo-certificate).\n\n1. Update the URLs in the Okta app's General settings\n   - ![Okta SAML App Split](https://argo-cd.readthedocs.io/en/stable/assets/saml-split.png)\n      The `Single sign on URL` field points to the public exposed endpoint, and all other URL fields point to the internal endpoint.\n2. Update the `data.dex.config` section of the `argocd-cm` ConfigMap with the external endpoint reference.\n\n```\ndex.config: |\n  logger:\n    level: debug\n  connectors:\n  - type: saml\n    id: okta\n    name: Okta\n    config:\n      ssoURL: https://yourorganization.oktapreview.com/app/yourorganizationsandbox_appnamesaml_2/rghdr9s6hg98s9dse/sso/saml\n      # You need `caData` _OR_ `ca`, but not both.\n      caData: |\n        <CA cert passed through base64 encoding>\n      # You need `caData` _OR_ `ca`, but not both.\n      # Path to mount the secret to the dex container\n      ca: /path/to/ca.pem\n      redirectURI: https://external.path.to.argocd.io/api/dex/callback\n      usernameAttr: email\n      emailAttr: email\n      groupsAttr: group\n\n```\n\n### Connect Okta Groups to Argo CD Roles\n\nArgo CD is aware of user memberships of Okta groups that match the _Group Attribute Statements_ regex.\nThe example above uses the `argocd-*` regex, so Argo CD would be aware of a group named `argocd-admins`.\n\nModify the `argocd-rbac-cm` ConfigMap to connect the `argocd-admins` Okta group to the builtin Argo CD `admin` role.\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\ndata:\n  policy.csv: |\n    g, argocd-admins, role:admin\n  scopes: '[email,groups]'\n\n``\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/okta", "title": "Okta", "description": "This page covers the integration of Okta with Argo CD for user management, including SAML and OIDC configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:42:42", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Okta - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/user-management/okta/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "ad5e5d47-4c5e-4830-a1ce-861f06480c95", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/okta", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/okta/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Okta\"?\n\nAssistant: Here are some code examples:\n\n### SAML Configuration in argocd-cm\n```yaml\ndata:\n  url: https://argocd.example.com\n\n```\n\n### Dex Configuration in argocd-cm\n```yaml\ndex.config: |\n  logger:\n    level: debug\n    format: json\n  connectors:\n  - type: saml\n    id: okta\n    name: Okta\n    config:\n      ssoURL: https://yourorganization.oktapreview.com/app/yourorganizationsandbox_appnamesaml_2/rghdr9s6hg98s9dse/sso/saml\n      # You need `caData` _OR_ `ca`, but not both.\n      caData: |\n        <CA cert passed through base64 encoding>\n      # You need `caData` _OR_ `ca`, but not both.\n      # Path to mount the secret to the dex container\n      ca: /path/to/ca.pem\n      redirectURI: https://ui.argocd.yourorganization.net/api/dex/callback\n      usernameAttr: email\n      emailAttr: email\n      groupsAttr: group\n\n```\n\n### Private Deployment Dex Configuration in argocd-cm\n```yaml\ndex.config: |\n  logger:\n    level: debug\n  connectors:\n  - type: saml\n    id: okta\n    name: Okta\n    config:\n      ssoURL: https://yourorganization.oktapreview.com/app/yourorganizationsandbox_appnamesaml_2/rghdr9s6hg98s9dse/sso/saml\n      # You need `caData` _OR_ `ca`, but not both.\n      caData: |\n        <CA cert passed through base64 encoding>\n      # You need `caData` _OR_ `ca`, but not both.\n      # Path to mount the secret to the dex container\n      ca: /path/to/ca.pem\n      redirectURI: https://external.path.to.argocd.io/api/dex/callback\n      usernameAttr: email\n      emailAttr: email\n      groupsAttr: group\n\n```\n\n### RBAC Configuration in argocd-rbac-cm\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\ndata:\n  policy.csv: |\n    g, argocd-admins, role:admin\n  scopes: '[email,groups]'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/okta", "title": "Okta", "description": "This page covers the integration of Okta with Argo CD for user management, including SAML and OIDC configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:42:42", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Okta - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/user-management/okta/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "ad5e5d47-4c5e-4830-a1ce-861f06480c95", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/okta", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/okta/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Okta\"?\n\nAssistant: Here are the recommended best practices:\n\n• Consider contributing to the documentation if you are using this IdP.\n• Ensure to pass the entire CA certificate through base64 encoding if using in the caData field.\n• Use a separate dedicated App Integration for CLI login with Okta.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/okta", "title": "Okta", "description": "This page covers the integration of Okta with Argo CD for user management, including SAML and OIDC configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:42:42", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Okta - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/operator-manual/user-management/okta/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "ad5e5d47-4c5e-4830-a1ce-861f06480c95", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/okta", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/okta/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"OneLogin\"?\n\nAssistant: Instructions for integrating OneLogin with ArgoCD for authentication and user management.\n\nHere's a detailed explanation:\n\n\n## Integrating OneLogin and ArgoCD\nThese instructions will take you through the entire process of getting your ArgoCD application authenticating with OneLogin. You will create a custom OIDC application within OneLogin and configure ArgoCD to use OneLogin for authentication, using UserRoles set in OneLogin to determine privileges in Argo.\n\n## Creating and Configuring OneLogin App\nFor your ArgoCD application to communicate with OneLogin, you will first need to create and configure the OIDC application on the OneLogin side.\n\n## Create OIDC Application\nTo create the application, do the following:\n\n1. Navigate to your OneLogin portal, then Administration > Applications.\n2. Click \"Add App\".\n3. Search for \"OpenID Connect\" in the search field.\n4. Select the \"OpenId Connect (OIDC)\" app to create.\n5. Update the \"Display Name\" field (could be something like \"ArgoCD (Production)\".\n6. Click \"Save\".\n\n## Configuring OIDC Application Settings\nNow that the application is created, you can configure the settings of the app.\n\n## Configuration Tab\nUpdate the \"Configuration\" settings as follows:\n\n1. Select the \"Configuration\" tab on the left.\n2. Set the \"Login Url\" field to https://argocd.myproject.com/auth/login, replacing the hostname with your own.\n3. Set the \"Redirect Url\" field to https://argocd.myproject.com/auth/callback, replacing the hostname with your own.\n4. Click \"Save\".\n\nOneLogin may not let you save any other fields until the above fields are set.\n\n## Info Tab\nYou can update the \"Display Name\", \"Description\", \"Notes\", or the display images that appear in the OneLogin portal here.\n\n## Parameters Tab\nThis tab controls what information is sent to Argo in the token. By default it will contain a Groups field and \"Credentials are\" is set to \"Configured by admin\". Leave \"Credentials are\" as the default.\n\nHow the Value of the Groups field is configured will vary based on your needs, but to use OneLogin User roles for ArgoCD privileges, configure the Value of the Groups field with the following:\n\n1. Click \"Groups\". A modal appears.\n2. Set the \"Default if no value selected\" field to \"User Roles\".\n3. Set the transform field (below it) to \"Semicolon Delimited Input\".\n4. Click \"Save\".\n\nWhen a user attempts to login to Argo with OneLogin, the User roles in OneLogin, say, Manager, ProductTeam, and TestEngineering, will be included in the Groups field in the token.\n\n## Rules Tab\nTo get up and running, you do not need to make modifications to any settings here.\n\n## SSO Tab\nThis tab contains much of the information needed to be placed into your ArgoCD configuration file (API endpoints, client ID, client secret).\n\nConfirm \"Application Type\" is set to \"Web\".\n\nConfirm \"Token Endpoint\" is set to \"Basic\".\n\n## Access Tab\nThis tab controls who can see this application in the OneLogin portal.\n\nSelect the roles you wish to have access to this application and click \"Save\".\n\n## Users Tab\nThis tab shows you the individual users that have access to this application (usually the ones that have roles specified in the Access Tab).\n\nTo get up and running, you do not need to make modifications to any settings here.\n\n## Privileges Tab\nThis tab shows which OneLogin users can configure this app.\n\nTo get up and running, you do not need to make modifications to any settings here.\n\n## Updating OIDC configuration in ArgoCD\nNow that the OIDC application is configured in OneLogin, you can update Argo configuration to communicate with OneLogin, as well as control permissions for those users that authenticate via OneLogin.\n\n## Tell Argo where OneLogin is\nArgo needs to have its config map (argocd-cm) updated in order to communicate with OneLogin. Consider the following yaml:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/part-of: argocd\ndata:\n  url: https://<argocd.myproject.com>\n  oidc.config: |\n    name: OneLogin\n    issuer: https://<subdomain>.onelogin.com/oidc/2\n    clientID: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaaaaaaaa\n    clientSecret: abcdef123456\n\n    # Optional set of OIDC scopes to request. If omitted, defaults to: [\"openid\", \"profile\", \"email\", \"groups\"]\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n```\n\nThe \"url\" key should have a value of the hostname of your Argo project.\n\nThe \"clientID\" is taken from the SSO tab of the OneLogin application.\n\nThe “issuer” is taken from the SSO tab of the OneLogin application. It is one of the issuer api endpoints.\n\nThe \"clientSecret\" value is a client secret located in the SSO tab of the OneLogin application.\n\nIf you get an `invalid_client` error when trying the authenticate with OneLogin, there is a possibility that your client secret is not proper. Keep in mind that in previous versions `clientSecret` value had to be base64 encrypted, but it is not required anymore.\n\n## Configure Permissions for OneLogin Auth'd Users\nPermissions in ArgoCD can be configured by using the OneLogin role names that are passed in the Groups field in the token. Consider the following yaml in argocd-rbac-cm.yaml:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/part-of: argocd\ndata:\n  policy.default: role:readonly\n  policy.csv: |\n    p, role:org-admin, applications, *, */*, allow\n    p, role:org-admin, clusters, get, *, allow\n    p, role:org-admin, repositories, get, *, allow\n    p, role:org-admin, repositories, create, *, allow\n    p, role:org-admin, repositories, update, *, allow\n    p, role:org-admin, repositories, delete, *, allow\n\n    g, TestEngineering, role:org-admin\n```\n\nIn OneLogin, a user with user role \"TestEngineering\" will receive ArgoCD admin privileges when they log in to Argo via OneLogin. All other users will receive the readonly role. The key takeaway here is that \"TestEngineering\" is passed via the Group field in the token (which is specified in the Parameters tab in OneLogin).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/onelogin", "title": "OneLogin", "description": "Instructions for integrating OneLogin with ArgoCD for authentication and user management.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-28 01:43:10", "type": "overview", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/user-management/onelogin/", "title": "OneLogin - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "60eca6e1-0edb-4437-b295-bb252dc8ba62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/onelogin", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/onelogin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"OneLogin\"?\n\nAssistant: Here are some code examples:\n\n### ArgoCD ConfigMap Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/part-of: argocd\ndata:\n  url: https://<argocd.myproject.com>\n  oidc.config: |\n    name: OneLogin\n    issuer: https://<subdomain>.onelogin.com/oidc/2\n    clientID: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaaaaaaaa\n    clientSecret: abcdef123456\n\n    # Optional set of OIDC scopes to request. If omitted, defaults to: [\"openid\", \"profile\", \"email\", \"groups\"]\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n\n```\n\n### ArgoCD RBAC ConfigMap Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/part-of: argocd\ndata:\n  policy.default: role:readonly\n  policy.csv: |\n    p, role:org-admin, applications, *, */*, allow\n    p, role:org-admin, clusters, get, *, allow\n    p, role:org-admin, repositories, get, *, allow\n    p, role:org-admin, repositories, create, *, allow\n    p, role:org-admin, repositories, update, *, allow\n    p, role:org-admin, repositories, delete, *, allow\n\n    g, TestEngineering, role:org-admin\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/onelogin", "title": "OneLogin", "description": "Instructions for integrating OneLogin with ArgoCD for authentication and user management.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-28 01:43:10", "type": "code_examples", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/user-management/onelogin/", "title": "OneLogin - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "60eca6e1-0edb-4437-b295-bb252dc8ba62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/onelogin", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/onelogin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"OneLogin\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you get an `invalid_client` error when trying to authenticate with OneLogin, ensure that your client secret is correct.\n• In previous versions, the `clientSecret` value had to be base64 encrypted, but it is not required anymore.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/onelogin", "title": "OneLogin", "description": "Instructions for integrating OneLogin with ArgoCD for authentication and user management.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-28 01:43:10", "type": "best_practices", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/user-management/onelogin/", "title": "OneLogin - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "60eca6e1-0edb-4437-b295-bb252dc8ba62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/onelogin", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/onelogin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"OpenUnison\"?\n\nAssistant: Instructions for integrating OpenUnison and ArgoCD to support single sign-on and add a badge to the OpenUnison portal for access to both Kubernetes and ArgoCD.\n\nHere's a detailed explanation:\n\n\n## Integrating OpenUnison and ArgoCD\nThese instructions will take your through the steps of integrating OpenUnison and ArgoCD to support single sign-on and add a \"badge\" to your OpenUnison portal to create a single access point for both Kubernetes and ArgoCD. These instructions assume you'll be using both ArgoCD's web interface and command line interface. These instructions assume you are running OpenUnison 1.0.20+.\n\n## Create an OpenUnison Trust\nUpdate the below `Trust` object and add it to the `openunison` namespace. The only change you need to make is to replace `argocd.apps.domain.com` with the host name of your ArgoCD URL. The localhost URL is needed for the cli to work. There is no client secret used for ArgoCD since the cli will not work with it.\n\n## Create a \"Badge\" in OpenUnison\nDownload the yaml for a `PortalUrl` object and update the `url` to point to your ArgoCD instance. Add the updated `PortalUrl` to the `openunison` namespace of your cluster.\n\n## Configure SSO in ArgoCD\nNext, update the `argocd-cm` ConfigMap in the `argocd` namespace. Add the `url` and `oidc.config` sections as seen below. Update `issuer` with the host for OpenUnison.\n\n## Configure ArgoCD Policy\nOpenUnison places groups in the `groups` claim. These claims will show up when you click on the user-info section of the ArgoCD portal. If you're using LDAP, Active Directory, or Active Directory Federation Services the groups will provided to ArgoCD as full Distinguished Names (DN). Since a DN containers commas ( `,`) you'll need to quote the group name in your policy.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/openunison", "title": "OpenUnison", "description": "Instructions for integrating OpenUnison and ArgoCD to support single sign-on and add a badge to the OpenUnison portal for access to both Kubernetes and ArgoCD.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:43:29", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/user-management/openunison/", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "title": "OpenUnison - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "3357fcd4-4255-498e-a624-06e604c0fb43", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/openunison", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/openunison/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"OpenUnison\"?\n\nAssistant: Here are some code examples:\n\n### OpenUnison Trust Object\n```yaml\napiVersion: openunison.tremolo.io/v1\nkind: Trust\nmetadata:\n  name: argocd\n  namespace: openunison\nspec:\n  accessTokenSkewMillis: 120000\n  accessTokenTimeToLive: 1200000\n  authChainName: login-service\n  clientId: argocd\n  codeLastMileKeyName: lastmile-oidc\n  codeTokenSkewMilis: 60000\n  publicEndpoint: true\n  redirectURI:\n  - https://argocd.apps.domain.com/auth/callback\n  - http://localhost:8085/auth/callback\n  signedUserInfo: true\n  verifyRedirect: true\n\n```\n\n### ArgoCD ConfigMap\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  url: https://argocd.apps.domain.com\n  oidc.config: |-\n    name: OpenUnison\n    issuer: https://k8sou.apps.192-168-2-144.nip.io/auth/idp/k8sIdp\n    clientID: argocd\n    requestedScopes: [\"openid\", \"profile\", \"email\", \"groups\"]\n\n```\n\n### ArgoCD RBAC Policy\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\ndata:\n  policy.csv: |\n    g, \"CN=k8s_login_cluster_admins,CN=Users,DC=ent2k12,DC=domain,DC=com\", role:admin\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/openunison", "title": "OpenUnison", "description": "Instructions for integrating OpenUnison and ArgoCD to support single sign-on and add a badge to the OpenUnison portal for access to both Kubernetes and ArgoCD.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:43:29", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/user-management/openunison/", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "title": "OpenUnison - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "3357fcd4-4255-498e-a624-06e604c0fb43", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/openunison", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/openunison/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"OpenUnison\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you are using OpenUnison 1.0.20+ for compatibility with ArgoCD.\n• Replace the placeholder URL with your actual ArgoCD URL in the Trust object.\n• When configuring policies, quote group names that contain commas.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/openunison", "title": "OpenUnison", "description": "Instructions for integrating OpenUnison and ArgoCD to support single sign-on and add a badge to the OpenUnison portal for access to both Kubernetes and ArgoCD.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:43:29", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/user-management/openunison/", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "title": "OpenUnison - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "3357fcd4-4255-498e-a624-06e604c0fb43", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/openunison", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/openunison/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Zitadel\"?\n\nAssistant: This page provides instructions for integrating Zitadel with ArgoCD for authentication and authorization.\n\nHere's a detailed explanation:\n\n\n## Integrating Zitadel and ArgoCD\nThese instructions will take you through the entire process of getting your ArgoCD application authenticating and authorizing with Zitadel. You will create an application within Zitadel and configure ArgoCD to use Zitadel for authentication using roles set in Zitadel to determine privileges in ArgoCD.\n\nThe following steps are required to integrate ArgoCD with Zitadel:\n1. Create a new project and a new application in Zitadel\n2. Configure the application in Zitadel\n3. Set up roles in Zitadel\n4. Set up an action in Zitadel\n5. Configure ArgoCD configmaps\n6. Test the setup\n\nThe following values will be used in this example:\n- Zitadel FQDN: `auth.example.com`\n- Zitadel Project: `argocd-project`\n- Zitadel Application: `argocd-application`\n- Zitadel Action: `groupsClaim`\n- ArgoCD FQDN: `argocd.example.com`\n- ArgoCD Administrator Role: `argocd_administrators`\n- ArgoCD User Role: `argocd_users`\n\nYou may choose different values in your setup; these are used to keep the guide consistent.\n\n## Setting up your project and application in Zitadel\nFirst, we will create a new project within Zitadel. Go to **Projects** and select **Create New Project**.\n\nYou should now see the following screen.\n\nCheck the following options:\n- Assert Roles on Authentication\n- Check authorization on Authentication\n\nGo to **Roles** and click **New**. Create the following two roles. Use the specified values below for both fields **Key** and **Group**.\n- `argocd_administrators`\n- `argocd_users`\n\nNext, go to **Authorizations** and assign your user the role `argocd_administrators`. Click **New**, enter the name of your user and click **Continue**. Select the role `argocd_administrators` and click **Save**.\n\n## Creating an application\nGo to **General** and create a new application. Name the application `argocd-application`.\n\nFor type of the application, select **WEB** and click continue.\n\nSelect **CODE** and continue.\n\nNext, we will set up the redirect and post-logout URIs. Set the following values:\n- Redirect URI: `https://argocd.example.com/auth/callback`\n- Post Logout URI: `https://argocd.example.com`\n\nVerify your configuration on the next screen and click **Create** to create the application.\n\nAfter clicking **Create** you will be shown the `ClientId` and the `ClientSecret` for your application. Make sure to copy the ClientSecret as you will not be able to retrieve it after closing this window.\n\nFor our example, the following values are used:\n- ClientId: `227060711795262483@argocd-project`\n- ClientSecret: `UGvTjXVFAQ8EkMv2x4GbPcrEwrJGWZ0sR2KbwHRNfYxeLsDurCiVEpa5bkgW0pl0`\n\nOnce you have saved the ClientSecret in a safe place, click **Close** to complete creating the application.\n\nGo to **Token Settings** and enable the following options:\n- User roles inside ID Token\n- User Info inside ID Token.\n\n## Setting up an action in Zitadel\nTo include the role of the user in the token issued by Zitadel, we will need to set up a Zitadel Action. The authorization in ArgoCD will be determined by the role contained within the auth token.\n\nGo to **Actions**, click **New** and choose `groupsClaim` as the name of your action.\n\nPaste the following code into the action:\n\n```\n/**\n * sets the roles an additional claim in the token with roles as value an project as key\n *\n * The role claims of the token look like the following:\n *\n * // added by the code below\n * \"groups\": [\"{roleName}\", \"{roleName}\", ...],\n *\n * Flow: Complement token, Triggers: Pre Userinfo creation, Pre access token creation\n *\n * @param ctx\n * @param api\n */\nfunction groupsClaim(ctx, api) {\n  if (ctx.v1.user.grants === undefined || ctx.v1.user.grants.count == 0) {\n    return;\n  }\n\n  let grants = [];\n  ctx.v1.user.grants.grants.forEach((claim) => {\n    claim.roles.forEach((role) => {\n      grants.push(role);\n    });\n  });\n\n  api.v1.claims.setClaim(\"groups\", grants);\n}\n```\n\nCheck **Allowed To Fail** and click **Add** to add your action.\n\n_Note: If Allowed To Fail is not checked and a user does not have a role assigned, it may be possible that the user is no longer able to log in to Zitadel as the login flow fails when the action fails._\n\nNext, add your action to the **Complement Token** flow. Select the **Complement Token** flow from the dropdown and click **Add trigger**.\n\nAdd your action to both triggers **Pre Userinfo creation** and **Pre access token creation**.\n\n## Configuring the ArgoCD configmaps\nNext, we will configure two ArgoCD configmaps:\n- [argocd-cm.yaml](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml)\n- [argocd-rbac-cm.yaml](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-rbac-cm.yaml)\n\nConfigure your configmaps as follows while making sure to replace the relevant values such as `url`, `issuer`, `clientID`, `clientSecret` and `logoutURL` with ones matching your setup.\n\n### argocd-cm.yaml\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/part-of: argocd\ndata:\n  admin.enabled: \"false\"\n  url: https://argocd.example.com\n  oidc.config: |\n    name: Zitadel\n    issuer: https://auth.example.com\n    clientID: 227060711795262483@argocd-project\n    clientSecret: UGvTjXVFAQ8EkMv2x4GbPcrEwrJGWZ0sR2KbwHRNfYxeLsDurCiVEpa5bkgW0pl0\n    requestedScopes:\n      - openid\n      - profile\n      - email\n      - groups\n    logoutURL: https://auth.example.com/oidc/v1/end_session\n```\n\n### argocd-rbac-cm.yaml\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/part-of: argocd\ndata:\n  scopes: '[groups]'\n  policy.csv: |\n    g, argocd_administrators, role:admin\n    g, argocd_users, role:readonly\n  policy.default: ''\n```\n\nThe roles specified under `policy.csv` must match the roles configured in Zitadel.\n\nThe Zitadel role `argocd_administrators` will be assigned the ArgoCD role `admin` granting admin access to ArgoCD.\n\nThe Zitadel role `argocd_users` will be assigned the ArgoCD role `readonly` granting read-only access to ArgoCD.\n\nDeploy your ArgoCD configmaps. ArgoCD and Zitadel should now be set up correctly to allow users to log in to ArgoCD using Zitadel.\n\n## Testing the setup\nGo to your ArgoCD instance. You should now see the **LOG IN WITH ZITADEL** button above the usual username/password login.\n\nAfter logging in with your Zitadel user go to **User Info**. If everything is set up correctly you should now see the group `argocd_administrators`.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/zitadel", "title": "Zitadel", "description": "This page provides instructions for integrating Zitadel with ArgoCD for authentication and authorization.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:43:59", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/user-management/zitadel/", "title": "Zitadel - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b311eb47-24b8-4a02-8165-280892379bfe", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/zitadel", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/zitadel/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Zitadel\"?\n\nAssistant: Here are some code examples:\n\n### Zitadel Action Code\n```yaml\nfunction groupsClaim(ctx, api) {\n  if (ctx.v1.user.grants === undefined || ctx.v1.user.grants.count == 0) {\n    return;\n  }\n\n  let grants = [];\n  ctx.v1.user.grants.grants.forEach((claim) => {\n    claim.roles.forEach((role) => {\n      grants.push(role);\n    });\n  });\n\n  api.v1.claims.setClaim(\"groups\", grants);\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/zitadel", "title": "Zitadel", "description": "This page provides instructions for integrating Zitadel with ArgoCD for authentication and authorization.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:43:59", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/user-management/zitadel/", "title": "Zitadel - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b311eb47-24b8-4a02-8165-280892379bfe", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/zitadel", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/zitadel/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Zitadel\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to copy the ClientSecret after creating the application, as it cannot be retrieved later.\n• Check 'Allowed To Fail' when setting up actions to prevent login issues if a user does not have a role assigned.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/zitadel", "title": "Zitadel", "description": "This page provides instructions for integrating Zitadel with ArgoCD for authentication and authorization.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:43:59", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/user-management/zitadel/", "title": "Zitadel - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b311eb47-24b8-4a02-8165-280892379bfe", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/zitadel", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/zitadel/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Neat Enhancement Idea\"?\n\nAssistant: This is the title of the enhancement. Keep it simple and descriptive. A good title can help communicate what the enhancement is and should be considered as part of any review.\n\nHere's a detailed explanation:\n\n\n## Open Questions [optional]\nThis is where to call out areas of the design that require closure before deciding to implement the design.\n\n## Summary\nThe `Summary` is required for producing accurate user-focused documentation such as release notes or a development roadmap. It should be possible to collect this information before implementation begins in order to avoid requiring implementors to split their attention between writing release notes and implementing the feature itself. Before you get started with this document, please feel free to have a conversation on this with the maintainers/community on Github that would help drive a more organized thought process for the formal proposal here.\n\n## Motivation\nThis section is for explicitly listing the motivation, goals and non-goals of this proposal. Describe why the change is important and the benefits to users.\n\n## Goals\nList the specific goals of the proposal and their measurable results. How will we know that this has succeeded?\n\n## Non-Goals\nWhat is out of scope for this proposal? Listing non-goals helps to focus discussion and make progress.\n\n## Proposal\nThis is where we get down to details of what the proposal is about.\n\n## Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n## Use case 1\nAs a user, I would like to understand the drift. (This is an example)\n\n## Use case 2\nAs a user, I would like to take an action on the deviation/drift. (This is an example)\n\n## Implementation Details/Notes/Constraints [optional]\nWhat are the caveats to the implementation? What are some important details that didn't come across above. Go in to as much detail as necessary here. This might be a good place to talk about core concepts and how they relate.\n\nYou may have a work-in-progress Pull Request to demonstrate the functioning of the enhancement you are proposing.\n\n## Detailed examples\n\n\n## Security Considerations\n- How does this proposal impact the security aspects of Argo CD workloads ?\n- Are there any unresolved follow-ups that need to be done to make the enhancement more robust ?\n\n## Risks and Mitigations\nWhat are the risks of this proposal and how do we mitigate. Think broadly.\n\nFor example, consider both security and how this will impact the larger Kubernetes ecosystem.\n\nConsider including folks that also work outside your immediate sub-project.\n\n## Upgrade / Downgrade Strategy\nIf applicable, how will the component be upgraded and downgraded? Make sure this is in the test plan.\n\nConsider the following in developing an upgrade/downgrade strategy for this enhancement:\n\n- What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to keep previous behavior?\n- What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to make use of the enhancement?\n\n## Drawbacks\nThe idea is to find the best form of an argument why this enhancement should _not_ be implemented.\n\n## Alternatives\nSimilar to the `Drawbacks` section the `Alternatives` section is used to highlight and record other possible approaches to delivering the value proposed by an enhancement.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/001-proposal-template", "title": "Neat Enhancement Idea", "description": "This is the title of the enhancement. Keep it simple and descriptive. A good title can help communicate what the enhancement is and should be considered as part of any review.", "has_code_examples": false, "has_best_practices": false, "section_count": 16, "timestamp": "2025-02-28 01:44:10", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/proposals/001-proposal-template/", "title": "Neat-enhancement-idea - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "6f548b22-796e-474d-9182-28b65e903411", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/001-proposal-template", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/001-proposal-template/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Argo CD Extensions\"?\n\nAssistant: This proposal is to provide a mechanism to extend Argo CD such that it can provide resource-specific visualizations, capabilities and interactions.\n\nHere's a detailed explanation:\n\n\n## Summary\nThis proposal is to provide a mechanism to extend Argo CD such that it can provide resource-specific visualizations, capabilities and interactions in the following ways:\n\n1. Richer and context-sensitive UI components can be displayed in the user interface about custom resources.\n2. Custom health checks can be configured to assess the health of the resource.\n3. Custom actions could be performed to manipulate resources in predefined ways.\n\n## Motivation\nArgo CD is commonly used as a dashboard to Kubernetes applications. The current UI is limited in that it only displays very general information about Kubernetes objects. Any special visualizations can currently only be done for native Kubernetes kinds.\n\nFor custom resources, Argo CD does not by default have any special handling or understanding of CRs, such as how to assess the health of the object or visualizations. When examining a resource, a user can only see a YAML view of the object, which is not helpful unless they are familiar with the object's spec and status information.\n\nNote that Argo CD does currently have a resource customizations feature, which allows operators to define health checks and actions via lua scripts in the argocd-cm ConfigMap. However, the current mechanism of configuring resource customizations is difficult and highly error prone.\n\nThis proposal would allow operators to more easily configure Argo CD to understand custom resources, as well as provide more powerful visualization of objects.\n\n## Use cases\n### Use case 1:\nAs a user, I would like to see visual information about my Rollout without having to use the CLI or otherwise leave Argo CD.\n\n### Use case 2:\nAs an operator, I would like to configure Argo CD to be able to assess the health of a custom resource based on its status.\n\n### Use case 3:\nAs an operator, I would like to configure Argo CD to perform pre-defined actions (object mutations) on a custom resource, for example restarting a Rollout.\n\n## Goals\n- Enable new visualizations in the UI for resources that do not have baked-in support\n- Extensions can be configured by operators at runtime, without a feature being built directly into Argo CD, and with no need to recompile UI code.\n- Extensions should be easy to develop and install.\n- Loose coupling between Argo CD and extensions.\n- Replace current resource customizations in `argocd-cm` ConfigMap with extensions.\n\n## Proposal\nA new `ArgoCDExtension` CRD would be introduced which will allow operators configure Argo CD to understand how to handle and visualize custom resources. Visualizing a object requires javascript to render the object, and health/actions require lua scripts. As such, the extension CR would need to point to some location where the javascript/lua code would be hosted.\n\nIt is proposed that a git repository be used to contain the javascript code, as well as the lua scripts necessary to assess health or perform actions of a resource.\n\n## ArgoCDExtension CRD\nIn the most simplest form, an Argo CD extension could simply be a pointer to a git repository at a revision:\n\n```\nkind: ArgoCDExtension\nmetadata:\n  name: argo-rollouts\nspec:\n  repository: https://github.com/argoproj-labs/rollout-extension\n  revision: HEAD\n```\n\n## Git Repository Structure\nThe git repository would have an expected structure, such that the scripts and UI component could be discovered easily by Argo CD based on resource kind.\n\n```\n├── README.md\n├── argoproj.io\n│   ├── AnalysisRun\n│   │   ├── actions\n│   │   │   ├── discovery.lua\n│   │   │   └── terminate\n│   │   │       └── action.lua\n│   │   └── health.lua\n│   ├── Experiment\n│   │   └── health.lua\n│   └── Rollout\n│       ├── ui\n│       │   └── extension.js   # dynamically loaded by argocd-server\n│       ├── actions\n│       │   ├── abort\n│       │   │   └── action.lua\n│       │   ├── discovery.lua\n│       │   ├── promote-full\n│       │   │   └── action.lua\n│       │   ├── restart\n│       │   │   └── action.lua\n│       │   ├── resume\n│       │   │   └── action.lua\n│       │   ├── retry\n│       │   │   └── action.lua\n```\n\n## User Interface\nIn the UI, a new tab in the Resource View will be made available. The contents of that tab would dynamically loaded by the Argo CD API server at the git URL specified in the extension, which would be cloned locally by the API server.\n\n## Implementation Details\nAt a high level an Argo CD extension is simply a React component, which is dynamically loaded at runtime by the Argo CD API server.\n\nIn order for the component to render some visualization about a resource, it needs to be supplied at least two key pieces of information:\n1. The full resource object itself\n2. The entire Application Resource Tree\n\nWe provide the entire application tree to accomplish two things:\n1. Extensions get basic (shallow) live updates for free because the Resource Tree is already live updated\n2. Extensions may wish to display richer hierarchical structure for other related objects (e.g. the Rollout extension would want to display ReplicaSets and Pods)\n\nFurther, if an Extension needs richer information than that provided by the Resource Tree, it can request additional information about a resource from the Argo CD API server.\n\n```\ninterface Extention {\n    ResourceTab: React.Component<{resource: any}>;\n}\n```\n\nThe UI will dynamically import an Extension React component from the Argo CD API Server. This is accomplished by specifying the generic Extension component as a Webpack external, and including a `<script>` tag in the `index.html` template that refers to the Argo CD API Server's generic extension endpoint (i.e. `/api/v1/extensions`). The API Server serves a different instantiation of the generic Extension component depending on the Resource being displayed; the generic extensions endpoint will have intelligence that reverse proxies the relevant third-party Extension API. The third-party Extension itself must conform to certain standards for this dynamic import (i.e. it must not bundle React).\n\n## Installation\nInstalling Argo CD Extensions support will be enabled with a single `kubectl apply`. This will:\n1. Install the `ArgoCDExtension` CRD\n2. Patch the Argo CD API Server with a sidecar\n\nThe sidecar will be responsible for cloning repos specified in `ArgoCDExtension` CRs and mounting them in a well known location understood by the API server.\n\nSome changes are required in the Argo CD API server:\n1. It will serve Javascript assets mounted by the sidecar in the well known location to the UI at an endpoint (i.e. `/api/v1/extensions/<resource-kind>`)\n2. It will retrieve Actions Lua scripts from the same well known location mounted by the sidecar instead of from `argocd-cm`.\n\n## Security Considerations\n- Any write operations must be configured as Lua scripts defined in the ArgoCDExtension Custom Resource so that Argo CD RBAC can be enforced when a user invokes an action.\n\n## Risks and Mitigations\nWe will be allowing the Argo CD UI to serve dynamically imported UI assets; while these dynamic imports will only occur from same-origin, malicious Extensions may inject hazardous code. We may also consider publishing a list of \"sanctioned\" or \"approved\" Extensions that we believe to be trustworthy (e.g. Argo Rollouts' or Workflows' Extensions).\n\n## Upgrade / Downgrade Strategy\nExisting Argo CD instances should be unaffected by this change. Extensions are opt-in only, and ideally none should be installed by default.\n\nTo opt in, operators will need to install services that comply with the Argo CD Extensions API and expose that service such that it is reachable by the Argo CD API Server. To uninstall an extension should be as simple as deleting the ArgoCDExtension CR.\n\n## Drawbacks\nArgo CD was designed to be a GitOps tool, not a cluster visualization dashboard. Extensions open the door to increase Argo CD's scope in a way that may not be desirable.\n\n## Alternatives\nWe originally considered building native support for resources like a Rollout directly into Argo CD. However, this tightly couples the Argo CD Server to an Argo Rollouts version, which is problematic when Argo CD manages several clusters all running different Rollouts versions.\n\nWe additionally considered requiring recompilation of the Argo CD UI (and by extension, the API server) to install Extensions in a similar fashion to Config Management Plugins. However, this is a headache for operators, and given that we are in the process of improving the Config Management Plugin paradigm, we should not go down this path if possible.\n\n## Open Questions\nIt will be important to allow Extensions to specify their own documentation URLs to be displayed as a button or banner to users, as to make clear that UI with support requests for third party extensions.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/002-ui-extensions", "title": "Argo CD Extensions", "description": "This proposal is to provide a mechanism to extend Argo CD such that it can provide resource-specific visualizations, capabilities and interactions.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 01:44:51", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Argo CD Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/proposals/002-ui-extensions/", "readthedocs-http-status": "200", "scrapeId": "643d33a6-4fe4-4258-ab42-5c737ce88965", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/002-ui-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/002-ui-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Argo CD Extensions\"?\n\nAssistant: Here are some code examples:\n\n### ArgoCDExtension CRD Example\n```yaml\nkind: ArgoCDExtension\nmetadata:\n  name: argo-rollouts\nspec:\n  repository: https://github.com/argoproj-labs/rollout-extension\n  revision: HEAD\n```\n\n### Git Repository Structure Example\n```yaml\n├── README.md\n├── argoproj.io\n│   ├── AnalysisRun\n│   │   ├── actions\n│   │   │   ├── discovery.lua\n│   │   │   └── terminate\n│   │   │       └── action.lua\n│   │   └── health.lua\n│   ├── Experiment\n│   │   └── health.lua\n│   └── Rollout\n│       ├── ui\n│       │   └── extension.js   # dynamically loaded by argocd-server\n│       ├── actions\n│       │   ├── abort\n│       │   │   └── action.lua\n│       │   ├── discovery.lua\n│       │   ├── promote-full\n│       │   │   └── action.lua\n│       │   ├── restart\n│       │   │   └── action.lua\n│       │   ├── resume\n│       │   │   └── action.lua\n│       │   ├── retry\n│       │   │   └── action.lua\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/002-ui-extensions", "title": "Argo CD Extensions", "description": "This proposal is to provide a mechanism to extend Argo CD such that it can provide resource-specific visualizations, capabilities and interactions.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 01:44:51", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Argo CD Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/proposals/002-ui-extensions/", "readthedocs-http-status": "200", "scrapeId": "643d33a6-4fe4-4258-ab42-5c737ce88965", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/002-ui-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/002-ui-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Argo CD Extensions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Extensions should be easy to develop and install.\n• Loose coupling between Argo CD and extensions is recommended.\n• Extensions are opt-in only, and ideally none should be installed by default.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/002-ui-extensions", "title": "Argo CD Extensions", "description": "This proposal is to provide a mechanism to extend Argo CD such that it can provide resource-specific visualizations, capabilities and interactions.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 01:44:51", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Argo CD Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/proposals/002-ui-extensions/", "readthedocs-http-status": "200", "scrapeId": "643d33a6-4fe4-4258-ab42-5c737ce88965", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/002-ui-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/002-ui-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Allow Application resources to exist in any namespace\"?\n\nAssistant: Improve Argo CDs multi-tenancy model to allow Application CRs to be created and consumed from different namespaces than the control plane's namespace.\n\nHere's a detailed explanation:\n\n\n## Open Questions\n- The major open question is, how to name `Application` s in a scenario where the K8s resource's name isn't unique anymore.\n\n## Summary\nThe multi-tenancy model of Argo CD is currently of limited use in a purely declarative setup when full autonomy of the tenants is desired. This stems mainly from the fact that the multi-tenancy model is built around the premise that only a full administrative party has access to the Argo CD control plane namespace (usually `argocd`), and the multi-tenancy is enforced through the Argo CD API instead of Kubernetes.\n\nThe Argo CD multi-tenancy model is centered around the `AppProject`, which is used to impose certain rules and limitations to the `Application` that is associated with the `AppProject`. These limitations e.g. include the target clusters and namespaces where an `Application` is allowed to sync to, what kind of resources are allowed to be synced by an `Application` and so forth.\n\nAn `Application` is associated to an `AppProject` by referencing it in the `.spec.project` field of the `Application` resource. Argo CD has an internal RBAC model to control the `AppProject` that can be referenced from the `Application`, but only when created or modified throught Argo CD's API layer.\n\nWhoever can create or modify `Application` resources in the control-plane namespace, can effectively circumvent any restrictions that should be imposed by the `AppProject`, simply by chosing another value for the `.spec.project` field. So naturally, access to the `argocd` namespace is considered equal to super user access within Argo CD RBAC model. This prevents a fully-declarative way in which every party could autonomously manage their applications using plain Kubernetes mechanisms (e.g. create, modify and delete applications through K8s API control plane) and also full GitOps-style management of `Application` resources in a multi-tenant setup.\n\n## Motivation\nThe main motivation behind this enhancement proposal is to allow organisations who whish to set-up Argo CD for multi-tenancy can enable their tenants to fully self-manage `Application` resources in a declarative way, including being synced from Git (e.g. via an _app of apps_ pattern).\n\nThe owning party could also set-up a dedicated _app of apps_ pattern for their tenants, e.g.\n\n- Have one _management_ namespace per tenant\n\n- Provide a Git repository to the tenant for managing Argo CD `Application` resources\n\n- Create an appropriate `AppProject` per tenant that restricts source to above mentioned Git repository, restricts destination to above mentioned namespace and restricts allowed resources to be `Application`.\n\n- Create an appropriate `Application` in Argo CD, which uses above mentionend Git repository as source, and above mentioned Namespace as destination.\n\n## Goals\n- Allow reconciliation from Argo CD `Application` resources from any namespace in the cluster where the Argo CD control plane is installed to.\n\n- Allow declarative self-service management of `Application` resources from users without access to the Argo CD control plane's namespace (e.g. `argocd`)\n\n- Be as less intrusive as possible, while not introducing additional controllers or components.\n\n## Non-Goals\n- Allow reconciliation from Argo CD `Application` resources that are created in remote clusters. We believe this would be possible with some adaptions, but for this initial proposal we only consider the control plane's cluster as a source for `Application` resources.\n\n- Allow users to create `AppProject` resources on their own. Since `AppProject` is used as central entity for enforcing governance and security, these should stay in the control of the cluster administrators.\n\n- Replace or modify Argo CD internal RBAC model.\n\n## Proposal\nWe suggest to adapt the current mechanisms of reconciliation of `Application` resources to include resources within the control plane's cluster, but outside the control plane's namespace (e.g. `argocd`).\n\nWe think the following changes would need to be performed so that this will become possible in a secure manner:\n\n- Adapt the `AppProject` spec to include a new field, e.g. `sourceNamespaces`. The values of this new field will define which applications will be allowed to associate to the `AppProject`. Consider the following example:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: some-project\n  namespace: argocd\nspec:\n  sourceNamespaces:\n  - foo-ns\n  - bar-ns\n```\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: some-app\n  namespace: bar-ns\nspec:\n  project: some-project\n```\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: other-app\n  namespace: other-ns\nspec:\n  project: some-project\n```\n\nwould allow `Application` resources that are created in either namespace `foo-ns` or `bar-ns` to specify `some-project` in their `.spec.project` field to associate themselves to the `AppProject` named `some-project`. In the above example, the Application `some-app` would be allowed to associate to the AppProject `some-project`, but the Application `other-app` would be invalid.\n\nThis method would allow to delegate certain namespaces where users have Kubernetes RBAC access to create `Application` resources.\n\n- `Applications` created in the control-plane's namespace (e.g. `argocd`) are allowed to associate with any project when created declaratively, as they are considered created by a super-user. So the following example would be allowed to associate itself to project `some-project`, even with the `argocd` namespace not being in the list of allowed `sourceNamespaces`:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: superuser-app\n  namespace: argocd\nspec:\n  project: some-project\n```\n\n- `Applications` created imperatively (e.g. through Argo CD API via UI or CLI) will keep being created in the control plane namespace, and Argo CD RBAC will still be applied to determine whether a user is allowed to create `Application` for given `AppProject`.\n\nIf no `.spec.sourceNamespaces` is set to an `AppProject`, a default of the control plane's namespace (e.g. `argocd`) will be assumed, and the current behaviour would not be changed (only `Application` resources created in the `argocd` namespace would be allowed to associate with the `AppProject`).\n\nWhen the `argocd-application-controllers` discovers an `Application` to consider for reconciliation, it would make sure that the `Application` is valid by:\n\n- Looking up the `AppProject` from the value of `.spec.project` field in the `Application` resource\n\n- Matching the value of `.metadata.namespace` in the `Application` to a namespace found in `.spec.sourceNamespaces` in the referenced `AppProject` resource.\n\n- If there is a match, reconciliation would continue as normal with the association desired in the `Application`'s spec.\n\n- If there is no match, reconciliation would be aborted with a permission error.\n\n## Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n#### Use case 1: Autonomous self-service of declarative configuration\nAs a developer, I want to be able to create & manage an Argo CD `Application` in a declarative way, without sending a pull-request to the cluster admin's repository and possibly wait for their review, approval and merge. I want this process to be in full control of my DevOps team.\n\nAs a cluster admin, I want to allow my users the self management of Argo CD `Application` resources without getting involved in the creation process, e.g. by reviewing & approving PRs into our admin namespace. I still want to be sure that users cannot circumvent any restrictions that our organisation wants to impose on these applications capabilities.\n\n#### Use case 2: App-of-apps pattern for my own applications\nAs a developer, I want to have the ability to use app-of-apps for my own `Application` resources. For this, I will have to create `Application` manifests, but I'm currently not allowed to write to the `argocd` namespace.\n\n#### Use case 3: Easy onboarding of new applications and tenants\nAs an administrator, I want to provide my tenants with a very easy way to create their applications from a simple commit to Git, without losing my ability to govern and restrict what goes into my cluster. I want to set up an Argo CD application that reconciles my tenant's `Application` manifests to a fixed location (namespace) in my cluster, so that the tenant can just put their manifests into the Git repository and Argo CD will pick it up from there, without having to use complex tools such as Open Policy Agent to enforce what AppProjects my tenants are allowed to use.\n\n## Implementation Details/Notes/Constraints\nOne major challenge to solve is the _uniqueness_ of `Application` names. As of now this is enforced by Kubernetes, since the `Application` name is also the name of the Kubernetes resource (e.g. value of `.metadata.name`). Because all `Application` resources must currently exist in the same namespace, Kubernetes already enforces a unique name for each `Application`.\n\nThis imposes a major challenge when `Application` resources may exist in other namespaces, because it would be possible that two resources will have the same name.\n\nOne way to mitigate this would be to decouple the application's name from the name of the `Application` resource by considering the name of the resource's namespace as part of the applicatio name.\n\nE.g. consider the two following examples:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: some-app\n  namespace: foons\nspec:\n  project: some-project\n```\n\nand\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: some-app\n  namespace: barns\nspec:\n  project: some-project\n```\n\nThe _name_ of the first application would become `foons/some-app` and the _name_ of the second application would become `barns/some-app`. This would have the advantage to instantly have a clue about _where_ the application is coming from, without having to resort to the Kubernetes API to inspect `.spec.namespace` field of the app. The notation may also use a hyphen ( `-`) or underscore ( `_`) instead of a slash ( `/`) as a divider between the _source_ and the _name_, this is implementation detail.\n\nIt is suggested to _not_ apply this naming convention to `Application` resources created in the control plane's namespace, as this may break backwards compat with existing RBAC rules. So, when considering the following example:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: some-app\n  namespace: argocd\nspec:\n  project: some-project\n```\n\nThe name of the application would still be `some-app`, instead of `argocd/some-app`. This would allow us introducing the change without breaking the RBAC rules of existing installations, and it would be not as intrusive. Since for all other `Application` resources in external namespaces the name will be prefixed, collisions in names should not happen.\n\nWe also considered the name of the `AppProject` instead the name of the `Application`'s namespace. However, since in this proposal an `AppProject` could allow resources from _multiple_ namespaces, and in each namespace an `Application` with the same name could co-exist, this wouldn't solve the uniqueness requirement.\n\n## Detailed examples\n\n\n## Security Considerations\nWe think that the security model of this proposal fits nicely within existing mechanisms of Argo CD (e.g. RBAC, `AppProject` constraints).\n\nHowever, on a bug in the implementation - e.g. the unwanted possibility for non-admin users to associate their `Application` resources to arbitrary or non-allowed `AppProject` resources - privilege escalation could occur.\n\nGood unit- and end-to-end tests need to be in place for this functionality to ensure we don't accidentally introduce a change that would allow any form of uncontrolled association between an `Application` and an `AppProject.\n\n## Risks and Mitigations\nA rogue party or process (e.g. malfunctioning CI) could create a tremenduous amount of unwanted `Application` resources in an allowed source namespace, with a potential performance impact on the Argo CD installation. However, this is also true for a rogue party using the Argo CLI with appropriate Argo CD RBAC permissions to create applications or even with ApplicationSet.\n\nA possible mitigation to this would be to enforce an (optional) quota to the number of `Application` resources allowed to associate with any given `AppProject` resource.\n\n## Upgrade / Downgrade Strategy\nUpgrading to a version implementing this proposal should be frictionless and wouldn't require administrators to perform any changes in the configuration to keep the current behaviour. `AppProject` resources without the new field `.spec.sourceNamespaces` being set will keep their behaviour, since they will allow `Application` resources in the control plane's namespace to be associated with the `AppProject`. Also, these `Applications` wouldn't be subject to a name change (e.g. the proposed `<namespace>-<appname>` name).\n\nDowngrading would not be easily possible once users start to make use of the feature and create `Applications` in other namespaces than the control plane's one. These applications would be simply ignored in a downgrade scenario, and effectively become unmanaged. The mitigation to this would be to take these `Application` resources and migrate them back to the control plane's namespace, but possibly would have to adapt application names for uniqueness as well, with consequences to RBAC rules.\n\n## Drawbacks\n- Application names have to change considerably to stay _unique_\n\n- The Application CRs still need to reside on the control plane's cluster\n\n- Downgrade/rollback would not be easily possible.\n\n## Alternatives\nOne alternative is `ApplicationSet`, which automates the creation of `Application` resources using generators with user-controlled input. However, this does not solve creation of one-off `Applications` and is considerably more complex to setup and maintain.\n\nWe do think that the proposed solution will nicely play together with the `ApplicationSet` mechanism, and also could be used in conjuction with it to provide better isolation of `Application` resources generated by `ApplicationSet.\n\nAnother recent proposal is the `AppSource` CRD and controller. We suggest this proposal as a direct alternative to the `AppSource` CRD, with the drawback that `Application` resources require to reside in the control plane's cluster instead of the ability being created on remote clusters as well.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/003-applications-outside-argocd-namespace", "title": "Allow Application resources to exist in any namespace", "description": "Improve Argo CDs multi-tenancy model to allow Application CRs to be created and consumed from different namespaces than the control plane's namespace.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 01:47:45", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/proposals/003-applications-outside-argocd-namespace/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "title": "Allow Application resources to exist in any namespace - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "5c6ce81b-ce48-4ddc-a433-470d93fee687", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/003-applications-outside-argocd-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/003-applications-outside-argocd-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Allow Application resources to exist in any namespace\"?\n\nAssistant: Here are some code examples:\n\n### AppProject Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: some-project\n  namespace: argocd\nspec:\n  sourceNamespaces:\n  - foo-ns\n  - bar-ns\n\n```\n\n### Application Example 1\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: some-app\n  namespace: bar-ns\nspec:\n  project: some-project\n\n```\n\n### Application Example 2\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: other-app\n  namespace: other-ns\nspec:\n  project: some-project\n\n```\n\n### Superuser Application Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: superuser-app\n  namespace: argocd\nspec:\n  project: some-project\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/003-applications-outside-argocd-namespace", "title": "Allow Application resources to exist in any namespace", "description": "Improve Argo CDs multi-tenancy model to allow Application CRs to be created and consumed from different namespaces than the control plane's namespace.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 01:47:45", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/proposals/003-applications-outside-argocd-namespace/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "title": "Allow Application resources to exist in any namespace - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "5c6ce81b-ce48-4ddc-a433-470d93fee687", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/003-applications-outside-argocd-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/003-applications-outside-argocd-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Allow Application resources to exist in any namespace\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure good unit- and end-to-end tests are in place for the new functionality to prevent privilege escalation.\n• Consider implementing an optional quota to limit the number of `Application` resources associated with any given `AppProject` to mitigate performance impacts.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/003-applications-outside-argocd-namespace", "title": "Allow Application resources to exist in any namespace", "description": "Improve Argo CDs multi-tenancy model to allow Application CRs to be created and consumed from different namespaces than the control plane's namespace.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-28 01:47:45", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/proposals/003-applications-outside-argocd-namespace/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "title": "Allow Application resources to exist in any namespace - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "5c6ce81b-ce48-4ddc-a433-470d93fee687", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/003-applications-outside-argocd-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/003-applications-outside-argocd-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Argo CD Scalability Benchmarking\"?\n\nAssistant: This document outlines the proposal for benchmarking the scalability of Argo CD, including goals, use cases, implementation details, and initial members involved in the proposal.\n\nHere's a detailed explanation:\n\n\n## Open Questions\n- What are the scalability factors to prioritize when benchmarking Argo CD?\n  - Reconciliation time for all, one, or several applications in the cluster.\n\n## Motivation\nUsers of Argo CD are interested to know how to scale Argo CD, what configuration tweaks and deployment options they have, and how far they can push resources (in terms of the number of supported applications, Git repositories, managing clusters, etc.).\n\nWhile the Argo CD documentation discusses options to scale up, the actual process is not clear and, as articulated in this thread, oftentimes a point of confusion for users.\n\nBy running large-scale benchmarking, we aim at helping the Argo CD community with the following:\n\n- Give confidence to organizations running at a significant scale (needs to be quantified) that Argo CD can support their use-case, with empirical evidence.\n- Create clear guidelines for scaling Argo CD based on the key scalability factors.\n- Provide recommendations for which topology is best suited for users based on their needs.\n- Determine what work, if any, is needed to improve the scalability of Argo CD.\n\n## Goals\n1. Create a standard set of repeatable benchmarking procedures to objectively measure the limitations of Argo CD.\n1. This may result in a new `argo-cd-benchmarking` repo under `argoproj-labs` so that anyone can easily replicate it and the development of the procedures can happen outside of the lifecycle for Argo CD (unlike the current `gen-resources` hack in the main project).\n2. Include detailed test scenarios that account for key scalability factors that allow for easy tweaking of the parameters to simplify testing of alternative scenarios.\n2. Determine the baseline for when tweaking is required on the default configuration (resource allocations and replicas).\n1. One cluster, Applications in In-cluster, default resource allocations.\n3. Quantify how tweaking existing parameters (replicas, sharding, parallelism, etc) impacts the performance of Argo CD.\n4. Provide a set of metrics and thresholds that will provide a basis for automatically scaling the Argo CD components and alerting for when performance is being impacted by limitations.\n5. All tooling, recommendations, examples, and scenarios will be vendor-agnostic.\n\n## Non-Goals\n- This proposal does not intend to cover the implementation of any auto-scaling based on the metrics and thresholds determined by the scalability benchmarking. A separate proposal will be used for any auto-scaling enhancements.\n- This proposal does not intend to add testing that determines how a change impacts the scalability of Argo CD based on the benchmarks.\n- We do not intend to analyze the cost implications of running different topologies and purely focus on scalability requirements from a technology perspective.\n\n## Initial Members\nThe initial members for this proposal and their affiliations are:\n| Name | Company |\n|-----------------------------------------------------|-----------|\n| [Andrew Lee](https://github.com/andklee) | AWS |\n| [Carlos Santana](https://github.com/csantanapr) | AWS |\n| [Nicholas Morey](https://github.com/morey-tech) | Akuity |\n| [Nima Kaviani](https://github.com/nimakaviani) | AWS |\n\nWith the introduction of [the proposed Scalability SIG](https://github.com/argoproj/argoproj/pull/192), the members participating in the proposal may change.\n\nAny community member is welcome to participate in the work for this proposal. Either by joining the Scalability SIG or through contributing to the proposed `argoproj-labs/argo-cd-benchmarking` repository containing the tooling.\n\n## Proposal\n1. Create new `argo-cd-benchmarking` repo under `argoproj-labs` and add the authors of this proposal as maintainers.\n2. Create a set of key scalability factors to use as testing parameters. For example:\n1. Number of Applications.\n2. Number of resources managed by an Application.\n3. Number of resources in a cluster.\n4. The size of the resources in a cluster and managed by an Application.\n5. Churn rate for resources in the cluster (how often resources change).\n6. Number of clusters.\n7. Number of repositories being monitored.\n8. Size of the repositories.\n9. The tooling (e.g., directory/raw manifests, Helm, Kustomize).\n3. Determine the metrics that reflect limitations in scalability factors.\n1. Application sync time for x number of apps\n2. Emptying the queues (app_reconciliation_queue, app_operation_processing_queue)\n4. Create automated testing procedures for Argo CD that take the key scalability factors as testing parameters.\n5. Test the default installation of Argo CD to determine the limit based on the key scalability factors.\n6. Create test scenarios that reflect the common topologies (Argo CD 1-1 with clusters, Argo CD 1-many with clusters).\n7. Determine the thresholds for the metrics identified earlier to capture when performance is being impacted.\n1. Contribute back Grafana thresholds and alerts for Prometheus.\n\n## Use cases\nEach use case will cover a specific topology with N permutations based on the key scalability factors. They will be measured using the metrics given in the proposal.\n\nWe intend to focus on two key topologies: one Argo CD per cluster and one Argo CD for all remote clusters. All other variations are an extension of these.\n\n#### Topology 1: One Argo CD per cluster.\nThe exact key scalability factors used in each permutation will be determined once we get to the testing.\n\n#### Topology 2: One Argo CD for all remote clusters.\nThis will capture the impact of network throughput on performance.\n\n#### Topology 3: One Namespaced Argo CD.\nThis instance will only manage namespace-level resources to determine the impact of monitoring cluster-scoped resources (related to the effect of resource churn in the cluster).\n\n## Implementation Details/Notes/Constraints\nThere is already some [tooling in the Argo CD repository](https://github.com/argoproj/argo-cd/pull/8037/files) for scalability testing. We plan to build on the existing effort and further push the boundaries of testing it.\n\n- Automatically set up supporting tooling for capturing metrics (Grafana, Prometheus)\n- Use a local Gitea in the cluster to support many repositories used in testing, and avoid performance variance by depending on the performance of an external git SaaS (ie GitHub)\n- Simulate the cluster and nodes using vcluster or kwok, in addition to using a cloud provider with a real cluster fleet.\n  - The simulated clusters and nodes are intended to make the testing accessible, but ultimately the infrastructure should be easily changed to test more realistic scenarios. Once the benchmarking tooling is functional, we can determine if the simulated components skew the results.\n\nOnce we have the benchmarking tooling, we can determine if the simulated components skew the results compared to the real world.\n\nAWS intends to provide the infrastructure required to benchmark large-scale scenarios.\n\n## Security Considerations\nThere is no intention to change the security model of Argo CD and therefore this project has no direct security considerations.\n\n## Risks and Mitigations\nConsider including folks that also work outside your immediate sub-project.\n\n## Drawbacks\n\n\n## Alternatives\n- Implementing Argo CD into an environment than waiting for scaling issues to arise. Monitoring the metrics to understand what the limitations are to address them. Using arbitrary resource allocation and replica counts to avoid running into limitations.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/004-scalability-benchmarking", "title": "Argo CD Scalability Benchmarking", "description": "This document outlines the proposal for benchmarking the scalability of Argo CD, including goals, use cases, implementation details, and initial members involved in the proposal.", "has_code_examples": false, "has_best_practices": false, "section_count": 12, "timestamp": "2025-02-28 01:48:09", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "title": "Argo CD Scalability Benchmarking - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/proposals/004-scalability-benchmarking/", "language": "en", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "4a5a4f50-db3b-4b0e-a223-3cc08c557a7e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/004-scalability-benchmarking", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/004-scalability-benchmarking/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"ApplicationSet Progressive Rollout Strategy\"?\n\nAssistant: Enhance the ArgoCD ApplicationSet resource to embed a rollout strategy for a progressive application resource update after the ApplicationSet spec or Application templates are modified.\n\nHere's a detailed explanation:\n\n\n## Summary\nEnhance the ArgoCD ApplicationSet resource to embed a rollout strategy for a progressive application resource update after the ApplicationSet spec or Application templates are modified. Further discussion and interest has been communicated here: https://github.com/argoproj/argo-cd/issues/9437\n\n## Motivation\nAs cluster operators, we would like to make changes to ApplicationSets which may target multiple environments, pre-defined staging areas, or other configurations, and have these changes rolled out in a declarative, defined manner rather than all at once as ApplicationSets currently behave. A progressive ApplicationSet rollout would prevent mistakes in configuration from having a larger blast radius than intended and give cluster operators a chance to verify and have confidence in their changes.\n\n## Goals\nUsers are able to make a single change to ApplicationSet that is updated across the generated Applications in a controlled manner. When this enhancement is enabled, Applications are updated in a declaractive order, instead of simultaneously.\n\n## Non-Goals\nHandling controlled rollouts for changes to a helm chart or raw manifests referenced by the Applications managed by the ApplicationSet. We understand this would be valuable, but we would like to implement the rollout implementation handling only changes to the ApplicationSet initially.\n\n## Proposal\nThis is where we get down to details of what the proposal is about.\n\n## Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n## Use case 1\nAs a user, I would like to declaratively control the rollout order of ApplicationSet changes to its generated Application resources. We propose adding a `RollingUpdate` and `RollingSync` strategy spec (taking inspiration from other controllers). The rolling update strategy deterministically chooses applications to update following a maxUpdate value. If maxUpdate is set to 1, then applications are updated one by one, proceeding each step only if the previous application syncs completed successfully. If set to more than 1, then applications are updated in parallel up to that number. Steps for the rolling update are defined by a list of matchExpression label selectors. Each step must finish updating before the next step advances. If steps are left undefined the application update order is deterministic.\n\n## Complete ApplicationSet spec example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n        env: dev\n      - cluster: engineering-prod\n        url: https://2.4.6.8\n        env: prod\n      - cluster: engineering-qa\n        url: https://9.8.7.6/\n        env: qa\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      steps:\n        - matchExpressions:\n            - key: env\n              operator: In\n              values:\n                - dev\n          maxUpdate: 0 # if undefined or 0, all applications matched are updated together\n        - matchExpressions:\n            - key: env\n              operator: In\n              values:\n                - qa\n        - matchExpressions:\n            - key: env\n              operator: In\n              values:\n                - us-east-2\n                - eu-west-1\n                - ap-southeast-1\n          maxUpdate: 1 # maxUpdate supports both integer and percentage string values\n  template:\n    metadata:\n      name: '{{cluster}}-guestbook'\n      labels:\n        env: \"{{env}}\"                                # label can be provided explicitly from a list generator\n        region: \"{{metadata.labels.cluster/region}}\"  # or pulled from labels on the argo cluster secrets\n    spec:\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{cluster}}\n      destination:\n        server: '{{url}}'\n        namespace: guestbook\n```\nIn the above example, when the guestbook ApplicationSet is created or modified, the Application resources are each updated in the order defined in `strategy.rollingUpdate`. In this case, all generated Applications (applied or not) with a label that matches the expression `env: dev` are updated to match the template. All Applications in this step are updated in parallel, because the `maxUpdate` is set to zero. The rolling update strategy progresses after the first set of Applications has successfully progressed and become healthy again. Progress towards the next step starts only after the current step has completely finished, regardless of the `maxUpdate` value. The `maxUpdate` field only throttles the total number of matching Applications updating in the current step. After the first step completes, the ApplicationSet updates all Application resources with label `env: qa` at the same time, because `maxUpdate` is undefined. Finally, during the third step, the Application resources labeled `region: us-east-2`, `region: eu-west-1`, or `region: ap-southeast-1` are updated, one by one, as the `maxUpdate` for the final step is 1.\n\n## Use case 2\nAs a user, I would like to continue to use the current simultaneous Application update behavior of the ApplicationSet controller. If no strategy is provided, we propose defaulting to an `AllAtOnce` strategy, which maintains the current behavior.\n\n## Implementation Details/Notes/Constraints\nApplication resource creation from an ApplicationSet with a defined strategy looks much like the update process. When a brand new ApplicationSet is first created with a rollout strategy specified, the desired Application resource metadata labels are used to determine when each Application resource is created. Each Application created will be created in the order defined by the steps, if any, and advance to the next step only when a step completes successfully. The same applies if an ApplicationSet is modified to target a different set of destination clusters or namespaces, Applications are created or updated in the order defined by their desired state and the defined step order in the strategy.\n\n## ApplicationSet Rollout Failure\nIn the event that an ApplicationSet spec or template is modified and a target Application resource fails to “complete” a sync in any of the steps, the ApplicationSet rollout is stalled. The ApplicationSet resource will ensure the status field for “ApplicationSetUpToDate” is False. If the maxUpdate allows it, the ApplicationSet will continue updating Applications in the current step, but otherwise, no further changes will be propagated to Application resources by the ApplicationSet, and no steps will advance until each Application can successfully complete a sync. If the ApplicationSet is modified while still in the midst of an ApplicationSet rollout, stalled or otherwise, then the existing rollout is abandoned, the application resources are left in their present state, and the new rollout begins.\n\n## Pausing Application Changes During Rollout\nTo implement the “paused” functionality of Applications that are not yet ready to be updated, we have a few options.\\* Disable auto-sync.\\*\\* Potentially conflicts with user provided auto-sync settings.\\*\\* Provides the benefit of being able to see the full diff of the ApplicationSet change.\\* “Pause” the Application.\\*\\* Not Yet Implemented: https://github.com/argoproj/argo-cd/issues/4808\\* Prevent any updates at all to the live Applications via the rolling update strategy defined.\\*\\* This is likely the initial implementation method we'll target.\n\n## Draft Pull Request\nThis PR is now functional and ready for comment. We are actively working on unit tests and documentation. https://github.com/wmgroot/argo-cd/pull/1\n\n## Security Considerations\nWe do not believe this proposal results in any new security considerations for the ApplicationSet controller.\n\n## Risks and Mitigations\nIf this proposal is implemented, I believe the next logical step would be to solve the case where users would like to control rollout order for Application resources with a consistent specification, but changes being pushed to the upstream `source` of the Application. A common use case is an update to an unversioned \"wrapper\" helm chart that depends on a versioned upstream chart. The wrapper chart is often used to apply simple supplementary resources in a gitops pattern, such as company specific RBAC configuration, or ExternalSecrets configuration. These supplementary resources do not typically warrant publishing a versioned wrapper chart, making it difficult to implement changes to the chart's templates or value files and roll them out in an ordered way with the ApplicationSet changes discussed here. Implementing progressive rollout stragies to handled changes upstream of the generated Application source could be difficult, since the applicationset controller would need to intercept the sync operation of the Application to prevent the changes from syncing automatically. Added maintenance burden on the ArgoCD team is always a risk with the addition of new features.\n\n## Upgrade / Downgrade Strategy\nWe are introducing new fields to the ApplicationSet CRD, however no existing fields are being changed. We believe this means that a new ApplicationSet version is unnecessary, and that upgrading to the new spec with extra fields will be a clean operation. Downgrading would risk users receiving K8s API errors if they continue to try to apply the `strategy` field to a downgraded version of the ApplicationSet resource. Downgrading the controller while keeping the upgraded version of the CRD should cleanly downgrade/revert the behavior of the controller to the previous version without requiring users to adjust their existing ApplicationSet specs.\n\n## Drawbacks\nThe idea is to find the best form of an argument why this enhancement should _not_ be implemented.\n\n## Alternatives\nOne alternative we considered was to create an extra CRD specifically to govern the rollout process for an ApplicationSet. We ultimately decided against this approach because all other rollout strategy specs we looked at were implemented in the same CRD resource (K8s Deployments, Argo Rollouts, CAPI MachineDeployments, etc). Another alternative is to implement Application Dependencies through the application-controller instead. This is a far more complicated approach that requires implementing and maintaining an Application DAG. https://github.com/argoproj/argo-cd/issues/7437\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/2022-07-13-appset-progressive-rollout-strategy", "title": "ApplicationSet Progressive Rollout Strategy", "description": "Enhance the ArgoCD ApplicationSet resource to embed a rollout strategy for a progressive application resource update after the ApplicationSet spec or Application templates are modified.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 01:48:44", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/proposals/2022-07-13-appset-progressive-rollout-strategy/", "title": "ApplicationSet Progressive Rollout Strategy - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "d3d1371e-eb38-4823-bd84-914076557563", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/2022-07-13-appset-progressive-rollout-strategy", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/2022-07-13-appset-progressive-rollout-strategy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"ApplicationSet Progressive Rollout Strategy\"?\n\nAssistant: Here are some code examples:\n\n### Complete ApplicationSet spec example\n```yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n        env: dev\n      - cluster: engineering-prod\n        url: https://2.4.6.8\n        env: prod\n      - cluster: engineering-qa\n        url: https://9.8.7.6/\n        env: qa\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      steps:\n        - matchExpressions:\n            - key: env\n              operator: In\n              values:\n                - dev\n          maxUpdate: 0 # if undefined or 0, all applications matched are updated together\n        - matchExpressions:\n            - key: env\n              operator: In\n              values:\n                - qa\n        - matchExpressions:\n            - key: env\n              operator: In\n              values:\n                - us-east-2\n                - eu-west-1\n                - ap-southeast-1\n          maxUpdate: 1 # maxUpdate supports both integer and percentage string values\n  template:\n    metadata:\n      name: '{{cluster}}-guestbook'\n      labels:\n        env: \"{{env}}\"                                # label can be provided explicitly from a list generator\n        region: \"{{metadata.labels.cluster/region}}\"  # or pulled from labels on the argo cluster secrets\n    spec:\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{cluster}}\n      destination:\n        server: '{{url}}'\n        namespace: guestbook\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/2022-07-13-appset-progressive-rollout-strategy", "title": "ApplicationSet Progressive Rollout Strategy", "description": "Enhance the ArgoCD ApplicationSet resource to embed a rollout strategy for a progressive application resource update after the ApplicationSet spec or Application templates are modified.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 01:48:44", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/proposals/2022-07-13-appset-progressive-rollout-strategy/", "title": "ApplicationSet Progressive Rollout Strategy - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "d3d1371e-eb38-4823-bd84-914076557563", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/2022-07-13-appset-progressive-rollout-strategy", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/2022-07-13-appset-progressive-rollout-strategy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"ApplicationSet Progressive Rollout Strategy\"?\n\nAssistant: Here are the recommended best practices:\n\n• When implementing a rollout strategy, ensure that the maxUpdate value is set appropriately to control the number of applications being updated simultaneously.\n• Consider using the `RollingSync` strategy for applications that may become OutOfSync, as it triggers sync operations in a controlled manner.\n• Always verify the health of applications after each step in the rollout process before proceeding to the next step.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/2022-07-13-appset-progressive-rollout-strategy", "title": "ApplicationSet Progressive Rollout Strategy", "description": "Enhance the ArgoCD ApplicationSet resource to embed a rollout strategy for a progressive application resource update after the ApplicationSet spec or Application templates are modified.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 01:48:44", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/proposals/2022-07-13-appset-progressive-rollout-strategy/", "title": "ApplicationSet Progressive Rollout Strategy - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "d3d1371e-eb38-4823-bd84-914076557563", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/2022-07-13-appset-progressive-rollout-strategy", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/2022-07-13-appset-progressive-rollout-strategy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Change the way application resources are identified\"?\n\nAssistant: This is a proposal to introduce the tracking method settings that allows using an annotation as the application identifier instead of the application instance label.\n\nHere's a detailed explanation:\n\n\n## Summary\nArgo CD identifies resources it manages by setting the application instance label to the name of the managing Application on all resources that are managed (i.e. reconciled from Git). The default label used is the well-known label app.kubernetes.io/instance.\n\nThis proposal suggests to introduce the trackingMethod setting that allows controlling how application resources are identified and allows switching to using the annotation instead of app.kubernetes.io/instance label.\n\n## Motivation\nThe main motivation behind this change is to solve the following known issues:\n\n- The Kubernetes label value cannot be longer than 63 characters. In large scale installations, in order to build up an easy to understand and well-formed naming schemes for applications managed by Argo CD, people often hit the 63 character limit and need to define the naming scheme around this unnecessary limit.\n\n- Popular off-the-shelf Helm charts often add the app.kubernetes.io/instance label to the generated resource manifests. This label confuses Argo CD and makes it think the resource is managed by the application.\n\n- Kubernetes operators often create additional resources without creating owner reference and copy the app.kubernetes.io/instance label from the application resource. This is also confusing Argo CD and makes it think the resource is managed by the application.\n\nAn additional motivation - while we're at touching at application instance label - is to improve the way how multiple Argo CD instances could manage applications on the same cluster, without requiring the user to actually perform instance specific configuration.\n\n## Goals\n- Allow application names of more than 63 characters\n\n- Prevent confusion caused by copied/generated app.kubernetes.io/instance label\n\n- Keep having a human-readable way to identify resources that belong to a given Argo CD application\n\n- As a stretch-goal, allow multiple Argo CD instances to manage resources on the same cluster without the need for configuring application instance label key (usually app.kubernetes.io/instance)\n\n## Non-Goals\n- Change the default name of the application instance label\n\n## Proposal\nWe propose introducing a new setting trackingMethod that allows to control how application resources are identified. The trackingMethod setting takes one of the following values:\n\n- label (default) - Argo CD keep using the app.kubernetes.io/instance label.\n- annotation+label - Argo CD keep adding app.kubernetes.io/instance but only for informational purposes: label is not used for tracking, value is truncated if longer than 63 characters. The app.kubernetes.io/instance annotation is used to track application resources.\n- annotation - Argo CD uses the app.kubernetes.io/instance annotation to track application resources.\n\nThe app.kubernetes.io/instance attribute values includes the application name, resources identifier it is applied to, and optionally the Argo CD installation ID:\n\nThe application name allows to identify the application that manages the resource. The resource identifier prevents confusion if an operation copies the app.kubernetes.io/instance annotation to another resource. Finally optional installation ID allows separate two Argo CD instances that manages resources in the same cluster.\n\nThe trackingMethod setting should be available at the system level and the application level to allow the smooth transition from the old app.kubernetes.io/instance label to the new tracking method. Using the app leverl settings users will be able to first switch applications one by one to the new tracking method and prepare for the migration. Next system level setting can be changed to annotation or annotation+label and not-migrated applications can be configured to use labels using application level setting.\n\n## Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n#### Use case 1: Allow for more than 63 characters in application name\nAs a user, I would like to be able to give my applications names with arbitrary length, because I want to include identifiers like target regions and possibly availability zones, the environment and possibly other identifiers (e.g. a team name) in the application names. The current restriction of 63 characters is not sufficient for my naming requirements.\n\n#### Use case 2: Allow for retrieving all resources using Kubernetes\nAs an administrator, I want to enable my users to use more than 63 characters in their application names, but I still want to be able to retrieve all of the resources managed by that particular application using Kubernetes mechanisms, e.g. a label selector as in the following example:\n\n```\nkubectl get deployments -l app.kubernetes.io/instance=<application> --all-namespaces\n```\n\n#### Use case 3: Multiple Argo CD instances managing apps on same cluster\nI also want to be able to see which application and Argo CD instance is the one in charge of a given resource.\n\n## Implementation Details/Notes/Constraints\n#### Include resource identifies in the app.kubernetes.io/instance annotation\nThe app.kubernetes.io/instance annotation might be accidently added or copied same as label. To prevent Argo CD confusion the annotation value should include the identifier of the resource annotation was applied to. The resource identifier includes the group, kind, namespace and name of the resource. It is proposed to use ; to separate identifier from the application name.\n\n```\nannotations:\n    app.kubernetes.io/instance: <application-name>;<group>/<kind>/<namespace>/<name>\n```\n\nExample:\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  namespace: default\n  annotations:\n    app.kubernetes.io/instance: my-application;apps/Deployment/default/my-deployment\n```\n\n#### Allow multiple Argo CD instances manage applications on same cluster\nAs of today, to allow two or more Argo CD instances with a similar set of permissions (e.g. cluster-wide read access to resources) manage applications on the same cluster, users would have to configure the application instance label key in the Argo CD configuration to a unique value. Otherwise, if an application with the same name exists in two different Argo CD installations, both would claim ownership of the resources of that application.\n\nWe do see the need for preventing such scenarios out-of-the-box in Argo CD. For this, we do suggest the introduction of an installation ID in the form of a standard GUID.\n\nThis GUID would be generated once by Argo CD upon startup, and is persisted in the Argo CD configuration, e.g. by storing it as installationID in the argocd-cm ConfigMap. The GUID of the installation would need to be encoded in some way in the resources managed by that Argo CD instance.\n\nWe suggest using a dedicated annotation to store the GUID and modify Argo CD so that it matches both, the app instance key and the GUID to determine whether a resource is managed by this Argo CD instance. Given above mentioned GUID, this may look like the following on a resource:\n\n```\napiVersion: v1\nKind: Secret\nmetadata:\n  name: some-secret\n  namespace: some-namespace\n  annotations:\n    app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret\n    argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd\n```\n\nThe user should be able to opt-out of this feature by setting the installationID to an empty string.\n\n## Security Considerations\nWe think this change will not have a direct impact on the security of Argo CD or the applications it manages.\n\n## Risks and Mitigations\nThe proposal assumes that user can keep adding app.kubernetes.io/instance label to be able to retrieve resources using kubectl get -l app.kubernetes.io/instance=<application> command. However, Argo CD is going to truncate the value of the label if it is longer than 63 characters. There is a small possibility that there are several applications with the same first 63 characters in the name. This should be clearly stated in documentation.\n\n## Upgrade / Downgrade Strategy\nUpgrading to a version that implements this proposal should be seamless, as previously injected labels will not be removed and additional annotations will be applied to the resource. E.g. consider following resource in Git, that will be synced as part of an application named some-application. In Git, the resource looks like follows:\n\n```\napiVersion: v1\nKind: Secret\nmetadata:\n  name: some-secret\n  namespace: some-namespace\n```\n\nWhen synced with the current incarnation of Argo CD, Argo CD would inject the application instance label and once the resource is applied in the cluster, it would look like follows:\n\n```\napiVersion: v1\nKind: Secret\nmetadata:\n  name: some-secret\n  namespace: some-namespace\n  labels:\n    app.kubernetes.io/instance: some-application\n```\n\nOnce Argo CD is updated to a version implementing this proposal, the resource would be rewritten to look like the following:\n\n```\napiVersion: v1\nKind: Secret\nmetadata:\n  name: some-secret\n  namespace: some-namespace\n  labels:\n    app.kubernetes.io/instance: some-application\n  annotations:\n    app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret\n    argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd\n```\n\nOn a rollback to a previous Argo CD version, this change would be reverted and the resource would look like the first shown example above.\n\n## Drawbacks\nWe do see some drawbacks to this implementation:\n\n- This change would trigger a re-sync of each and every managed resource, which may result in unexpected heavy load on Argo CD and the cluster at upgrade time. The workaround is an ability to opt-out of this as a default and enable it on application basis.\n\n## Alternatives\n- Enabling application names longer than 63 characters could also be done by using the hashed value of the application name and additional metadata as a label. The disadvantage of this approach is that hash value is not human friendly. In particular, it is difficult to retrieve application manifests using kubectl get -l app.kubernetes.io/instance=<application>.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/application-name-identifier", "title": "Change the way application resources are identified", "description": "This is a proposal to introduce the tracking method settings that allows using an annotation as the application identifier instead of the application instance label.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 01:49:31", "type": "overview", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/application-name-identifier/", "readthedocs-version-slug": "stable", "title": "Change the way application resources are identified - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b596a7ed-ca95-42f9-bb1f-e08a3254374a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/application-name-identifier", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/application-name-identifier/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Change the way application resources are identified\"?\n\nAssistant: Here are some code examples:\n\n### Use case 2: Allow for retrieving all resources using Kubernetes\n```yaml\nkubectl get deployments -l app.kubernetes.io/instance=<application> --all-namespaces\n```\n\n### Include resource identifies in the app.kubernetes.io/instance annotation\n```yaml\nannotations:\n    app.kubernetes.io/instance: <application-name>;<group>/<kind>/<namespace>/<name>\n```\n\n### Example of app.kubernetes.io/instance annotation\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  namespace: default\n  annotations:\n    app.kubernetes.io/instance: my-application;apps/Deployment/default/my-deployment\n```\n\n### Example of resource with installation ID\n```yaml\napiVersion: v1\nKind: Secret\nmetadata:\n  name: some-secret\n  namespace: some-namespace\n  annotations:\n    app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret\n    argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd\n```\n\n### Example of resource before and after upgrade\n```yaml\nBefore:\napiVersion: v1\nKind: Secret\nmetadata:\n  name: some-secret\n  namespace: some-namespace\n\nAfter:\napiVersion: v1\nKind: Secret\nmetadata:\n  name: some-secret\n  namespace: some-namespace\n  labels:\n    app.kubernetes.io/instance: some-application\n  annotations:\n    app.kubernetes.io/instance: my-application;/Secret/some-namespace/some-secret\n    argo-cd.argoproj.io/installation-id: 61199294-412c-4e78-a237-3ebba6784fcd\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/application-name-identifier", "title": "Change the way application resources are identified", "description": "This is a proposal to introduce the tracking method settings that allows using an annotation as the application identifier instead of the application instance label.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 01:49:31", "type": "code_examples", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/application-name-identifier/", "readthedocs-version-slug": "stable", "title": "Change the way application resources are identified - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b596a7ed-ca95-42f9-bb1f-e08a3254374a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/application-name-identifier", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/application-name-identifier/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Change the way application resources are identified\"?\n\nAssistant: Here are the recommended best practices:\n\n• Clearly state the possibility of multiple applications having the same first 63 characters in the name due to label truncation.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/application-name-identifier", "title": "Change the way application resources are identified", "description": "This is a proposal to introduce the tracking method settings that allows using an annotation as the application identifier instead of the application instance label.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 01:49:31", "type": "best_practices", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/application-name-identifier/", "readthedocs-version-slug": "stable", "title": "Change the way application resources are identified - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b596a7ed-ca95-42f9-bb1f-e08a3254374a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/application-name-identifier", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/application-name-identifier/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"ApplicationSet `plugin` generator\"?\n\nAssistant: Provide a generator that request its values through a RPC call.\n\nHere's a detailed explanation:\n\n\n## Summary\nApplicationSet generators are useful for modeling templates using external data sources to deploy applications.\n\nToday, generators have been developed based on the needs of the community, and when a new need arises, it's necessary to modify the Appset codebase.\n\nThe proposal here is to have a \"plugin\" generator that would allow extending the codebase according to specific needs, without having to modify it directly.\n\n## Motivation\nUsing the current generators, we sometimes encounter a need that arises, which may or may not be useful for the community. In such cases, several procedures need to be undertaken to make the modification, and sometimes it may be rejected because it's not in everyone's interest.\n\nThe plugin approach also reduces the burden on community developers by externalizing feature requests into plugins that are outside the Appset controller's scope. From a security and scalability perspective, this can be advantageous.\n\nWith this approach, it becomes possible to offer a catalog of plugins and encourage people with specific needs to develop standalone plugins that are independent of the controller's codebase.\n\n## Goals\nEmpowering community developers to develop and use plugins that extend the list of generators can be a significant advantage. It would be possible to offer a page listing plugins maintained by the community, which can help promote the development of a rich ecosystem of plugins for various use cases. This can enhance the overall user experience by providing more options for generating application templates.\n\nAdditionally, allowing developers to create plugins and share them with the community can foster innovation and encourage experimentation with new features and functionalities. It can also reduce the workload on the Appset development team, enabling them to focus on core features and functionalities.\n\nOverall, giving autonomy to community developers through plugins is a practical way to enhance the Appset platform and provide more value to users.\n\n## Non-Goals\nThe concept of the plugin should not undermine the spirit of GitOps by externalizing data outside of Git. The goal is to be complementary in specific contexts.\n\nFor example, when using one of the PullRequest generators, it's impossible to retrieve parameters related to the CI (only the commit hash is available), which limits the possibilities. By using a plugin, it's possible to retrieve the necessary parameters from a separate data source and use them to extend the functionality of the generator. This approach allows for greater flexibility and can help overcome limitations imposed by GitOps.\n\nOverall, the use of plugins should be considered as a way to enhance the capabilities of existing tools and processes rather than as a replacement for them. By leveraging plugins, developers can take advantage of the strengths of different tools and technologies, resulting in a more robust and flexible development process.\n\n## Proposal\n### Add a new `generator` plugin\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: fb-plugin\n  namespace: argo-system\nspec:\n  generators:\n    - plugin:\n        configMapRef: fb-plugin\n        name: feature-branch-plugin\n        params:\n          repo: \"my-repo\"\n          branch: \"my-branch\"\n        requeueAfterSeconds: 10\n  template:\n...\n```\n\n### Add a configMap to configure the plugin\n\nThe configMap name must match the configMapRef value in the plugin configuration. The configMap must be in the namespace of argo.\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: fb-plugin\n  namespace: argo-system\ndata:\n  token: $plugin.myplugin.token # Alternatively $<some_K8S_secret>:plugin.myplugin.token\n  baseUrl: http://myplugin.plugin.svc.cluster.local\n```\n\n- token is used a bearer token in the RPC request. It could be a [sensitive reference](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets).\n\n## Reconciliation logic\nHere is a diagram describing what the plugin generator should do to get the params to return:\n\n```\nsequenceDiagram\n    alt generator is plugin\n    Generator->>K8S: Get configmap {configMapRef}\n    K8S-->>Generator: (url,token)\n    Generator->>Plugin endpoint: POST {url}/v1/generator.getParams<br/>Authorization: Bearer {token}<br/>Content-Type: application/json<br/>{params}\n    Plugin endpoint-->>Generator: []map{string}interface{}\n    end\n```\n\n\n## Use cases\n#### Use case 1:\n\nAs a user, I would like to enrich PullRequest generator params with digests of images generated by the pull request CI pipeline.\n\nI could define a generator matrix like\n\n```yaml\n  generators:\n    - matrix:\n        generators:\n          - pullRequest:\n              github:\n                owner: binboum\n                repo: argo-test\n                labels:\n                - preview-matrix\n                tokenRef:\n                  secretName: github-secret\n                  key: token\n          - plugin:\n              configMapRef: cm-plugin\n              name: plugin-matrix\n              params:\n                repo: \"argo-test\"\n                branch: \"{{.branch}}\"\n```\n\nWhen pullRequest returns a new PR matching my labels, the plugin will be called with the branch name and would return a set of digests like\n\n```json\n[\\\n  {\\\n    \"digestFront\": \"xxxxxxxx\",\\\n    \"digestBack\": \"xxxxxxxx\",\\\n  }\\\n]\n```\n\nValues can then be used in the template section :\n\n```yaml\n  template:\n    metadata:\n      name: \"fb-matrix-{{.branch}}\"\n    spec:\n      source:\n        repoURL: \"git@github.com:binboum/argo-test.git\"\n        targetRevision: \"HEAD\"\n        path: charts/app-client\n        helm:\n          releaseName: feature-test-matrix-{{.branch}}\n          valueFiles:\n            - values.yaml\n          values: |\n            front:\n              image: registry.my/argo-test/front:{{.branch}}@{{ .digestFront }}\n            back:\n              image: registry.my/argo-test/back:{{.branch}}@{{ .digestBack }}\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: \"{{.branch}}\"\n```\n\n\n## Detailed examples\n\n\n## Security Considerations\n- Plugin server only has access to the params content. When deployed outside of the applicationset controller pod, operator must ensure the communication between applicationset controller and the plugin server is properly secured (https/network policy...). A few authentication mechanism are handled to help the plugin server authenticate the request.\n- For now, the response payload is considered trusted and returned params are used as-is upstream.\n\n## Risks and Mitigations\nTBD\n\n## Upgrade / Downgrade Strategy\nOn the evolution of the plugin, and calls :\n\nThe RPC method is standardized with a versioning system, which allows for a version parameter to be included in the API call. This makes it possible to avoid breaking changes in case of architecture changes in the future.\n\nThought that the contract interface with the plugin server is kept simple to reduce future changes and breaking changes.\n\n## Drawbacks\nNo idea\n\n## Alternatives\n1. A design similar to Argo Workflow executor plugin :\n\n```yaml\ngenerators:\n- plugin:\n    hello: {}\n```\n\nA set of ConfigMaps or a specific CRDs to express configuration of the plugin endpoint would be walk by ApplicationSet server. For each configuration, call the plugin endpoint with the content of plugin until one return a valid response.\n\nReconciliation should be fast as fast as possible and trying out every endpoint to figure out which one is able to handle the plugin payload could induce a lot of delay.\n\nConfiguration rely on implicit and weakly typed convention which make the usage of the plugin less self documented.\n\n2. Plugin server as defacto sidecars\n\nSome magic could have inject a container image for the plugin in the ApplicationSet controller in a similar way, Argo Workflow does when creating a pod to execute a job.\n\nRequire an external controler or manual configuration. The plugin would not scale independently of the ApplicationSet controller.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/applicationset-plugin-generator", "title": "ApplicationSet `plugin` generator", "description": "Provide a generator that request its values through a RPC call.", "has_code_examples": true, "has_best_practices": false, "section_count": 13, "timestamp": "2025-02-28 01:49:59", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "applicationset-plugin-generator - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/applicationset-plugin-generator/", "scrapeId": "308d47fe-dcf6-4790-ae35-cdbe6c0f2eed", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/applicationset-plugin-generator", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/applicationset-plugin-generator/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"ApplicationSet `plugin` generator\"?\n\nAssistant: Here are some code examples:\n\n### Add a new `generator` plugin\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: fb-plugin\n  namespace: argo-system\nspec:\n  generators:\n    - plugin:\n        configMapRef: fb-plugin\n        name: feature-branch-plugin\n        params:\n          repo: \"my-repo\"\n          branch: \"my-branch\"\n        requeueAfterSeconds: 10\n  template:\n...\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/applicationset-plugin-generator", "title": "ApplicationSet `plugin` generator", "description": "Provide a generator that request its values through a RPC call.", "has_code_examples": true, "has_best_practices": false, "section_count": 13, "timestamp": "2025-02-28 01:49:59", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "applicationset-plugin-generator - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/applicationset-plugin-generator/", "scrapeId": "308d47fe-dcf6-4790-ae35-cdbe6c0f2eed", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/applicationset-plugin-generator", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/applicationset-plugin-generator/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Neat Enhancement Idea\"?\n\nAssistant: This is a proposal to add support for creating ApplicationSets via the Argo CD Web/CLI, by adding support to the ApplicationSet and API Server backend that respects Argo CD RBAC.\n\nHere's a detailed explanation:\n\n\n## Summary\nCurrently, users can only create ApplicationSets by applying configurations declaratively using `kubectl`. Introducing support for CLI/UI would improve the overall experience for managing large number of applications using ApplicationSet.\n\n## Motivation\nAs ApplicationSet Controller is now part of ArgoCD installation, we would like to allow users to be able to create/update/delete application sets via CLI/UI.\n\n## Goals\n- **Expose endpoints in the API server to interact with ApplicationSets**\n\nUsers should be able to create/update/delete ApplicationSets using argocd CLI/UI.\n\n- **Changes to CLI**\n\nAdd a new argocd command option `appset` with `create`, `delete`, `update` and `list` sub-commands.\n\n## Proposal\nThis is the high level overview of creation (update/deletion) of an ApplicationSet via Argo CD CLI/UI.\n\n![High Level Architecture](https://argo-cd.readthedocs.io/en/stable/proposals/backend-support-appset.png)\n\n1. User issues `argocd appset create/update/delete`(or Web UI equivalent) command from CLI, into an Argo CD server on which they are logged-in. The command converts the command request into GRPC and sends it off to Argo CD API Server.\n\n## Argo CD API Server\n1. The API Server receives Create/Update/Delete request via GRPC and verifies that ApplicationSet controller is installed within the namespace (if not, return an error response back to user).\n2. The API Server sends the GRPC request to the ApplicationSet controller via GRPC including authentication information from the user in the request.\n\n## ApplicationSet controller\n1. ApplicationSet controller receives Create/Update/Delete GRPC. (These next steps will be a create example, but update and delete are similar.)\n\n2. **_Pre-generate check:_** Application controller will perform various checks before creating ApplicationSet:\n   - Ensure user has appropriate RBAC to run the generator:\n   - Verify that the user can access the Git repository (for Git generators)\n   - Verify that user has cluster access (to see the clusters, for Cluster generator)\n   - Verify that the user has permission to create/update/delete (depending on the request type) at least one Application within the RBAC policy. We want to prevent the generators being invoked by users that don't have permissions to create any Applications (since generators or templates might be exploited to DoS the ApplicationSet controller, using a malicious ApplicationSet)\n3. Once the pre-checks have been confirmed, the controller will run the generator, and render the parameters into the template. Upon generating the template, the controller will need to perform some checks before creating the Applications.\n\n4. **_Post-generate check:_** Look at the generated Applications (but don't apply them yet!), and verify that user has the required RBAC permissions to perform the required actions. This is a dynamic (or runtime) check, as it works on the dynamically generated applications; eg. it is not possible to predict the result of these checks without first running the generator, unlike the static checks.\n\n5. Once all the checks have passed, apply the ApplicationSet and the Applications, to the namespace.\n\n## Should we add a new 'applicationset' RBAC resource?\n- Do we need to add a new RBAC resource for applicationsets, alongside the existing ones? (clusters, projects, applications, repositories, certificates, accounts, gpgkeys)\nNot mandatory for the design explained in this proposal.\n\n- If we DID add a new RBAC resource, this would require application administrators to add a new ApplicationSet resource to the RBAC policy list, alongside their existing Application policies and to keep the ApplicationSet and Application RBAC policy lists in sync. Or, said another way: there would be very few (if any) cases where a user would need to be able to create an Application, but not be able to create an ApplicationSet (and vice versa). When it comes to security, the less moving parts that need to be synchronized, the better (with some minor loss in flexibility, eg the ability to specifically prevent access to ApplicationSet resource).\n\n- If there is no RBAC resource for applicationsets, how do we control access to them?\nInstead of an applicationset rbac resource, we instead examine the Applications that are owned by the applicationset. An ApplicationSet inherits permissions from its generated children.\nExample: if you try to delete an ApplicationSet, we check if you can delete it’s child Applications.\n\n## ApplicationSet Deletion Algorithm\nA user is only able to delete an ApplicationSet if they have permissions to delete all of the Applications managed by the ApplicationSet. This check is performed in ApplicationSet controller, on receiving a delete request via GRPC from API server.\n\n- For each application owned by the ApplicationSet that the user is attempting to delete:\n  - Check if the user has delete permission on the Application\n  - Check if the user has delete permission within the project (?)\n- If the user does NOT have permission on least one of these, the operation should fail.\n- On pass, ApplicationController server deletes (ie kubectl delete) the ApplicationSet resource.\n\n## ApplicationSet Update Algorithm\nA user can only update an ApplicationSet if the user has permission to create, update, delete all of the Applications currently owned by the ApplicationSet.\n\n- When the user makes a change to an ApplicationSet, we assume that it's possible that the change might affect any or all of the Applications, and thus we require the user to have write access to all of those Applications.\n- We likewise check that the resulting generated Applications are also compliant with the user's permissions.\n\nAlgorithm is, if the user attempts to update an ApplicationSet via Web UI/CLI:\n\n- ApplicationSet controller receives a request to update an ApplicationSet from API server\n- The ApplicationSetController looks at all the Applications owned by the ApplicationSet (via ownerref or annotation): Verify that the user has permission to act on all of the Applications currently managed by the ApplicationSet\n- If the above precondition is met, proceed to the next step, otherwise fail.\n- The ApplicationSet is generated and rendered into a template\n- Look at the generated Applications, and make sure the user has appropriate privileges\n  - All the same checks done by the Create workflow, described above, are done here (user can access repo, cluster, etc\n- Finally, on success, the API server applies (kubectl apply) the requested change to the ApplicationSet (and the Applications).\n\n## ApplicationSets and AppProjects\nAn important design constraint in this area: ApplicationSets do not belong to projects. They generate Applications that are a part of projects, but they themselves are not part of a project.\n\n1. Why not just include a project field on ApplicationSet CR?\n\nA single ApplicationSet has the power to produce Applications within multiple projects, so it does not necessarily make sense to include an ApplicationSet within a single project.\n\n1. Why not just include a projects field (array of strings) on ApplicationSets, to allow it to belong to multiple projects?\n\nThis is getting closer to ideal, but still limits the expressive power of the ApplicationSet: it requires a user to specify, up front, what projects they expect to generate applications for. Eg you must statically define an ApplicationSet's projects. This excludes the scenario where the projects that a particular ApplicationSet will generate Applications for is truly dynamic, eg coming from a configuration file in Git, and thus not known at creation.\n\n1. We still need a way to limit the scope of user actions against ApplicationSets. Even though ApplicationSets don't belong to a project, we still need to prevent users from modifying ApplicationSets that they don't have RBAC access to. By looking at the projects of child objects, we achieve the same goal. We don't want users to be able to delete ApplicationSets that they don't have RBAC access to. But, since ApplicationSets don't have a project, we need some way to tell what applications/projects an ApplicationSet manages. So we use the applications and projects within it.\n\n## Command Design\n```\nargocd appset create \"(filename.yaml)\"\nargocd appset delete \"(applicationset resource name)\"\nargocd appset apply  \"(filename.yaml)\"\n```\n\nThis proposal assumes that the ApplicationSet controller is still an optional, standalone install. Thus all argocd appset commands should fail if the ApplicationSet controller is not installed. (The Argo CD API server would check if the ApplicationServer is running by looking for a deployment with a specific 'applicationset controller' annotation, or similar mechanism.)\n\nThis command proposal differs significantly from how the argocd app create command is designed: notice the lack of parameters to appset create/apply besides the filename. Rather than creating an application(set) by adding support for a large number of parameters, eg:\n\n```\nargocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse\n```\n\nInstead appset create and appset apply will just take as a parameter, a path to a YAML file, in the form of a standard ApplicationSet CR:\n\n```\n# cluster-addons.yaml:\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\nspec:\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj-labs/applicationset.git\n      revision: HEAD\n      directories:\n      - path: examples/git-generator-directory/cluster-addons/*\n  template:\n    metadata:\n      name: '{{path.basename}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj-labs/applicationset.git\n        targetRevision: HEAD\n        path: '{{path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{path.basename}}'\n```\n\n```\n# Create the above ApplicationSet\nargocd appset create cluster-addons.yaml\n```\n\nIn general, the reason to use YAML is that CLI parameters aren't a good fit for allowing the user to fully express what can be represented with an ApplicationSet resource.\n\n## Why use YAML file, over CLI params\n- Easier for users to specify a YAML file, than specifying a bunch of parameters\n- By my count, if creating an ApplicationSet using parameters, it would take at least 8 parameters (16+ command arguments)\n- For example, the above ApplicationSet would look like:\n```\nappset create --name cluster-addons --gitGeneratorRepoURL \"repo url\" --gitGeneratorRevision \"HEAD\" --gitGeneratorDirectory \"examples/git-generator-directory/cluster-addons/*\" --templateMetadataName \"{{path.basename}}\" --templateProject \"default\" --templateSrcRepoURL \"https://github.com/argoproj-labs/applicationset.git\" --templateSrcRevision \"HEAD\" --templateSrcPath \"{{path}}\" --templateDestServer \"https://kubernetes.default.svc\" --templateDestNamespace \"{{path.basename}}\"\n```\n- Matrix generator is especially tough to represent with parameters, as it takes two generators as input, eg:\n```\nspec:\n  generators:\n  - matrix:\n      generators:\n        - git:\n            name: cluster-deployments\n            repoURL: https://github.com/argoproj-labs/applicationset.git\n            revision: HEAD\n            directories:\n            - path: examples/proposal/matrix/cluster-addons/*\n        - clusters:\n            selector:\n              matchLabels:\n                argocd.argoproj.io/secret-type: cluster\n```\n- Likewise, tough to get full expressive power of YAML, due to support for arrays of generators:\n```\nspec:\n  generators:\n  - list:\n    # (...)\n  - list:\n    # (...)\n  - list:\n    # (...)\n```\n\n## Why use CLI params, instead of YAML\n- Users might be more familiar with Argo CD CLI style commands\n- Some folks are less literate in YAML, and thus don't grok YAML's hierarchy/parsing rules (which is totally fair, they are initially obtuse)\n- CLI has the advantage of hiding the hierarchy (for better or worse)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/backend-support-appset", "title": "Neat Enhancement Idea", "description": "This is a proposal to add support for creating ApplicationSets via the Argo CD Web/CLI, by adding support to the ApplicationSet and API Server backend that respects Argo CD RBAC.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 01:51:41", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/backend-support-appset/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Adding backend support for ApplicationSets RBAC CLI/Web requests - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "58dae6d6-7caf-478e-844e-1c83daa3d0de", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/backend-support-appset", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/backend-support-appset/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Neat Enhancement Idea\"?\n\nAssistant: Here are some code examples:\n\n### Create ApplicationSet\n```yaml\nargocd appset create cluster-addons.yaml\n```\n\n### ApplicationSet YAML Example\n```yaml\n# cluster-addons.yaml:\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-addons\nspec:\n  generators:\n  - git:\n      repoURL: https://github.com/argoproj-labs/applicationset.git\n      revision: HEAD\n      directories:\n      - path: examples/git-generator-directory/cluster-addons/*\n  template:\n    metadata:\n      name: '{{path.basename}}'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj-labs/applicationset.git\n        targetRevision: HEAD\n        path: '{{path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: '{{path.basename}}'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/backend-support-appset", "title": "Neat Enhancement Idea", "description": "This is a proposal to add support for creating ApplicationSets via the Argo CD Web/CLI, by adding support to the ApplicationSet and API Server backend that respects Argo CD RBAC.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 01:51:41", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/backend-support-appset/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Adding backend support for ApplicationSets RBAC CLI/Web requests - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "58dae6d6-7caf-478e-844e-1c83daa3d0de", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/backend-support-appset", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/backend-support-appset/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Neat Enhancement Idea\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use YAML files for creating ApplicationSets to fully express the configuration.\n• CLI parameters can be cumbersome for complex ApplicationSet configurations.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/backend-support-appset", "title": "Neat Enhancement Idea", "description": "This is a proposal to add support for creating ApplicationSets via the Argo CD Web/CLI, by adding support to the ApplicationSet and API Server backend that respects Argo CD RBAC.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 01:51:41", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/backend-support-appset/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Adding backend support for ApplicationSets RBAC CLI/Web requests - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "58dae6d6-7caf-478e-844e-1c83daa3d0de", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/backend-support-appset", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/backend-support-appset/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Config Management Plugin Enhancement\"?\n\nAssistant: We want to enhance config management plugin in order to improve Argo CD operator and end-user experience for using additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc.\n\nHere's a detailed explanation:\n\n\n## Summary\nCurrently, Argo CD provides first-class support for Helm, Kustomize and Jsonnet/YAML. The support includes:\n\n- Bundled binaries (maintainers periodically upgrade binaries)\n- An ability to override parameters using UI/CLI\n- The applications are discovered in Git repository and auto-suggested during application creation in UI\n- Performance optimizations. Argo CD \"knows\" when it is safe to generate manifests concurrently and takes advantage of it.\n\nWe want to enhance the configuration management plugin so that it can provide similar first-class support for additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc.\n\n## Motivation\nThe config management plugin feature should be improved to provide the same level of user experience as for the natively supported tools to the additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc., including Argo CD operators as well as end-user experience.\n\n## Goals\nThe goals for config management plugin enhancement are,\n\n#### Improve Installation Experience\nThe current Config Management plugin installation experience requires two changes:\n\n- An entry in configManagementPlugins in the Argo CD configmap (i.e. argocd-cm)\n- Either an init container with a volume mount that adds a new binary into Argo CD repo server pod, or a rebuild of the argocd image, which contains the necessary tooling\n\nThe problem with this approach is that the process is error-prone, manual, and requires learning from each and every Argo CD administrator.\n\nThe goal is to make additional tools easily accessible for installation to Argo CD operators.\n\n#### Provide Discovery (Auto-selection of Tool)\nFor Argo CD’s natively supported config management plugins (Helm, Kustomize, Jsonnet), Argo CD auto-detects and selects the appropriate tool given only the path in the Git repository. This selection is based on the recognition of well-known files in the directory (e.g. Chart.yaml, kustomization.yaml, etc...).\n\nCurrently, unlike natively supported tools, when a plugin is used, a user needs to explicitly specify the plugin that should be used to render the manifests. As part of the improvements to config management plugins,\n\nWe want to provide the same ability to auto-select the plugin based on recognized files in the path of the git repository.\n\n#### Parameters support in UI/CLI\nCurrently, configuration management plugins allow specifying only a list of environment variables via UI/CLI.\n\nWe want to extend its functionality to provide a similar experience as for existing natively supported tools to additional config management tools.\n\n## Non-Goals\n- We aren't planning on changing the existing support for native plugins as of now.\n\n## Proposal\nWe have drafted the solution to the problem statement as **running configuration management plugin tools as sidecar in the argocd-repo-server**.\n\nAll it means that Argo CD Config Management Plugin 2.0 will be,\n\n- A user-supplied container image with all the necessary tooling installed in it.\n- It will run as a sidecar in the repo server deployment and will have shared access to the git repositories.\n- It will contain a CMP YAML specification file describing how to render manifests.\n- Its entrypoint will be a lightweight CMP API server that receives requests by the main repo-server to render manifests, based on the CMP specification file.\n\nThis mechanism will provide the following benefits over the existing solution,\n\n- Plugin owners control their execution environment, packaging whatever dependent binaries required.\n- An Argo CD user who wants to use additional config management tools does not have to go through the hassle of building a customized argocd-repo-server in order to install required dependencies.\n- The plugin image will be running in a container separate from the main repo-server.\n\n## Use cases\n- UC1: As an Argo CD user, I would like to use first-class support provided for additional tools to generate and manage deployable kubernetes manifests\n- UC2: As an Argo CD operator, I want to have smooth experience while installing additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc.\n- UC3: As a plugin owner, I want to have some control over the execution environment as I want to package whatever dependent binaries required.\n\n## Implementation Details\nConfig Management Plugin v2.0 implementation and experience will be as,\n\n#### Installation\nTo install a plugin, an operator will simply patch argocd-repo-server to run config management plugin container as a sidecar, with argocd-cmp-server as it’s entrypoint. Operator can use either off-the-shelf or custom built plugin image as sidecar image.\n\n```\n# A plugin is a container image which runs as a sidecar, with the execution environment\n# necessary to render manifests. To install a plugin,\ncontainers:\n- name: cdk8s\n  command: [/var/run/argocd/argocd-cmp-server]\n  image: docker.ui/cdk8s/cdk8s:latest\n  volumeMounts:\n  - mountPath: /var/run/argocd\n    name: var-files\n```\n\nThe argocd-cmp-server binary will be populated inside the plugin container via an init container in the argocd-repo-server,\nwhich will pre-populate a volume shared between plugins and the repo-server.\n\n```\n# An init container will copy the argocd static binary into the shared volume\n# so that the CMP server can become the entrypoint\ninitContainers:\n- command:\n  - cp\n  - -n\n  - /usr/local/bin/argocd\n  - /var/run/argocd/argocd-cmp-server\n  image: quay.io/argoproj/argocd:latest\n  name: copyutil\n  volumeMounts:\n  - mountPath: /var/run/argocd\n    name: var-files\n\n# var-files is a shared volume between repo-server and cmp-server which holds:\n# 1) socket files that repo-server uses to communicate to each plugin\n# 2) git repositories cloned by repo-server\nvolumes:\n- emptyDir: {}\n  name: var-files\n```\n\n#### Configuration\nPlugins will be configured via a ConfigManagementPlugin manifest located inside the plugin container, placed at a well-known location (e.g. /home/argocd/plugins/plugin.yaml). Argo CD is agnostic to the mechanism of how the plugin.yaml would be placed,\nbut various options can be used on how to place this file, including:\n\n- Baking the file into the plugin image as part of docker build\n- Volume mapping the file through a configmap.\n\nNote that, while the ConfigManagementPlugin looks like a Kubernetes object, it is not actually a custom resource.\nIt only follows kubernetes-style spec conventions.\n\n```\n# metadata file is in the root and shell executor knows about it\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: cdk8s\nspec:\n  version: v1.0\n  init:\n    command: [cdk8s, init]\n  generate:\n    command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"]\n  discovery:\n    find:\n    - command: [find . -name main.ts]\n      glob: \"**/*/main.ts\"\n    check:\n    - command: [-f ./main.ts]\n      glob: \"main.ts\"\n```\n\n#### Config Management Plugin API Server (cmp-server)\nThe Config Management Plugin API Server (cmp-server) will be a new Argo CD component whose sole responsibility will be to execute `generate` commands inside the plugin environment (the sidecar container), at the request of the repo-server.\n\nThe cmp-server will expose the following APIs to the repo-server,\n\n- GenerateManifests(path) - returns YAML output using plugin tooling\n- IsSupported(path) - returns whether or not the given path is supported by the plugin\n\nAt startup, cmp-server looks at the /home/argocd/cmp-server/plugin.yaml ConfigManagementPlugin specification file to understand how to perform the requests.\n\n#### Registration & Communication\nThe repo-server needs to understand what all plugins are available to render manifests. To do this, the cmp-server sidecars will register themselves as available plugins to the argocd-repo-server by populating named socket files in the shared volume between repo-server and cmp-server. e.g.: \n\n```\n/home/argocd/plugins/\n                        cdk8s.sock\n                        jkcfg.sock\n                        pulumi.sock\n```\n\nThe name of the socket file will indicate the plugin name. To discover the available plugins, the repo-server will list the shared plugins directory to discover the available plugins.\n\nTo communicate with a plugin, the repo-server will simply need to connect to the socket and make gRPC calls against the cmp-server listening on the other side.\n\n#### Discovery (Auto-selection of Tool)\n- The plugin discovery will run in the main repo-server container.\n- Argo CD repo-server lists the shared plugins directory and runs `discover` command from the specification file,\nwhichever plugin provides a positive response first will be selected.\n\n#### Versioning\nThere will be one sidecar container per version. Hence, for two different versions users will have to configure two different sidecars.\n\n## Security Considerations\nThe use of the plugin as sidecars separate from the repo-server is already a security improvement over the current v1.8 config management plugin mechanism, since the plugin tooling will no longer have access to the files of the argocd-repo-server image. However additional improvements can be made to increase security.\n\n## Risks and Mitigations\nOne issue is that currently when repositories are cloned, the repo is cloned using the same UID of the repo-server user, and so all repository files are created using that UID. This means that a command which executes in the git repository path, could traverse upwards and see/write files which are outside of the repository tree.\n\nOne proposal to prevent out-of-tree access to files, is that each git repository could be cloned with unique UIDs, different from the repo-server’s UID. When the cmp-server executes the tooling command to generate manifests,\nthe command could be executed using the UID of the git repository files. e.g.: \n\n```\ncmd := exec.Command(command, args...)\ncmd.SysProcAttr = &syscall.SysProcAttr{}\ncmd.SysProcAttr.Credential = &syscall.Credential{Uid: uid, Gid: gid}\n```\n\nThis would ensure that the command could not read or write anything out-of-tree from the repository directory.\n\n## Upgrade / Downgrade Strategy\nThe argocd-repo-server manifest will change in order to populate the argocd-cmp-server binary inside the plugin container via an init container.\n\n```\n# An init container will copy the argocd static binary into the shared volume\n# so that the CMP server can become the entrypoint\ninitContainers:\n- command:\n  - cp\n  - -n\n  - /usr/local/bin/argocd\n  - /var/run/argocd/argocd-cmp-server\n  image: quay.io/argoproj/argocd:latest\n  name: copyutil\n  volumeMounts:\n  - mountPath: /var/run/argocd\n    name: var-files\n\n# var-files is a shared volume between repo-server and cmp-server which holds:\n# 1) socket files that repo-server uses to communicate to each plugin\n# 2) git repositories cloned by repo-server\nvolumes:\n- emptyDir: {}\n  name: var-files\n```\n\nAfter upgrading to CMP v2, an Argo CD operator will have to make following changes,\n\n- In order to install a plugin, an Argo CD operator will simply have to patch argocd-repo-server to run config management plugin container as a sidecar, with argocd-cmp-server as it’s entrypoint:\n\n```\n# A plugin is a container image which runs as a sidecar, with the execution environment\n# necessary to render manifests. To install a plugin,\ncontainers:\n- name: cdk8s\ncommand: [/var/run/argocd/argocd-cmp-server]\nimage: docker.ui/cdk8s/cdk8s:latest\nvolumeMounts:\n  - mountPath: /var/run/argocd\n    name: var-files\n```\n\n- Plugins will be configured via a ConfigManagementPlugin manifest located inside the plugin container, placed at a well-known location (e.g. /plugin.yaml). Argo CD is agnostic to the mechanism of how the plugin.yaml would be placed,\nbut various options can be used on how to place this file, including:\n  - Baking the file into the plugin image as part of docker build\n  - Volume mapping the file through a configmap.\n\n(For more details please refer to [implementation details](https://argo-cd.readthedocs.io/en/stable/proposals/config-management-plugin-v2/#configuration))\n\n## Drawbacks\nThere aren't any major drawbacks to this proposal. Also, the advantages supersede the minor learning curve of the new way of managing plugins.\n\nHowever following are few minor drawbacks,\n\n- With addition of plugin.yaml, there will be more yamls to manage\n- Operators need to be aware of the modified Kubernetes manifests in the subsequent version.\n- The format of the CMP manifest is a new \"contract\" that would need to adhere the usual Argo CD compatibility promises in future.\n\n## Alternatives\n1. ConfigManagementPlugin as CRD. Have a CR which the human operator creates:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n     name: cdk8s\nspec:\n     name: cdk8s\n     image: docker.ui/cdk8s/cdk8s:latest\n     version: v1.0\n     init:\n       command: [cdk8s, init]\n     generate:\n       command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"]\n       discovery:\n       find:\n    - command: [find . -name main.ts]\n      glob: \"**/*/main.ts\"\n      check:\n    - command: [-f ./main.ts]\n      glob: \"main.ts\"\n```\n\n2. Something magically patches the relevant manifest to add the sidecar.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/config-management-plugin-v2", "title": "Config Management Plugin Enhancement", "description": "We want to enhance config management plugin in order to improve Argo CD operator and end-user experience for using additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 01:52:33", "type": "overview", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Config-Management-Plugin-Enhancement - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/proposals/config-management-plugin-v2/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "8a213bde-85c8-43fe-ade2-0245b3cfdac7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/config-management-plugin-v2", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/config-management-plugin-v2/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Config Management Plugin Enhancement\"?\n\nAssistant: Here are some code examples:\n\n### Plugin Installation Example\n```yaml\ncontainers:\n- name: cdk8s\n  command: [/var/run/argocd/argocd-cmp-server]\n  image: docker.ui/cdk8s/cdk8s:latest\n  volumeMounts:\n  - mountPath: /var/run/argocd\n    name: var-files\n\n```\n\n### Init Container Example\n```yaml\ninitContainers:\n- command:\n  - cp\n  - -n\n  - /usr/local/bin/argocd\n  - /var/run/argocd/argocd-cmp-server\n  image: quay.io/argoproj/argocd:latest\n  name: copyutil\n  volumeMounts:\n  - mountPath: /var/run/argocd\n    name: var-files\n\n```\n\n### ConfigManagementPlugin Manifest Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: cdk8s\nspec:\n  version: v1.0\n  init:\n    command: [cdk8s, init]\n  generate:\n    command: [sh, -c, \"cdk8s synth && cat dist/*.yaml\"]\n  discovery:\n    find:\n    - command: [find . -name main.ts]\n      glob: \"**/*/main.ts\"\n    check:\n    - command: [-f ./main.ts]\n      glob: \"main.ts\"\n```\n\n### Command Execution with UID Example\n```yaml\ncmd := exec.Command(command, args...)\ncmd.SysProcAttr = &syscall.SysProcAttr{}\ncmd.SysProcAttr.Credential = &syscall.Credential{Uid: uid, Gid: gid}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/config-management-plugin-v2", "title": "Config Management Plugin Enhancement", "description": "We want to enhance config management plugin in order to improve Argo CD operator and end-user experience for using additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 01:52:33", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Config-Management-Plugin-Enhancement - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/proposals/config-management-plugin-v2/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "8a213bde-85c8-43fe-ade2-0245b3cfdac7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/config-management-plugin-v2", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/config-management-plugin-v2/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Config Management Plugin Enhancement\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make additional tools easily accessible for installation to Argo CD operators.\n• Provide the same ability to auto-select the plugin based on recognized files in the path of the git repository.\n• Extend functionality to provide a similar experience as for existing natively supported tools to additional config management tools.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/config-management-plugin-v2", "title": "Config Management Plugin Enhancement", "description": "We want to enhance config management plugin in order to improve Argo CD operator and end-user experience for using additional tools such as cdk8s, Tanka, jkcfg, QBEC, Dhall, pulumi, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 01:52:33", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Config-Management-Plugin-Enhancement - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/proposals/config-management-plugin-v2/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "8a213bde-85c8-43fe-ade2-0245b3cfdac7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/config-management-plugin-v2", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/config-management-plugin-v2/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Deep Links\"?\n\nAssistant: Deep links allow end users to quickly redirect to third-party systems such as Splunk, DataDog etc. from the Argo CD user interface.\n\nHere's a detailed explanation:\n\n\n## Summary\nArgo CD administrator will be able to configure links that redirect users to third-party systems such as Splunk, DataDog etc. The template should be able to reference different types of resources relating to where the links show up, this includes projects, applications, or individual resources(pods, services etc.) that are part of the application.\n\nDeep Link is a generic integration solution for third-party systems which enables users to integrate any system - not only popular solutions but also custom/private systems that can leverage the data available in Argo CD.\n\n## Motivation\nArgo CD UI with deep links to third-party integrations will provide a unified solution for users making it easier for them to switch between relevant systems without having to separately navigate and correlate the information.\n\n## Proposal\nThe configuration for Deep Links will be present in the `argocd-cm`, we will add new `<location>.links` fields in the cm to list all the deep links that will be displayed in the provided location. The possible values for `<location>` currently are :\n- `project` : all links under this field will show up in the project tab in the Argo CD UI.\n- `application` : all links under this field will show up in the application summary tab.\n- `resource` : all links under this field will show up in the individual resource(deployments, pods, services etc.) summary tab.\n\nEach link in the list has five subfields :\n1. `title` : title/tag that will be displayed in the UI corresponding to that link\n2. `url` : the actual URL where the deep link will redirect to, this field can be templated to use data from the application, project or resource objects (depending on where it is located)\n3. `description` (optional) : a description for what the deep link is about\n4. `icon.class` (optional) : a font-awesome icon class to be used when displaying the links in dropdown menus.\n5. `if` (optional) : a conditional statement that results in either `true` or `false`, it also has access to the same data as the `url` field. If the condition resolves to `true` the deep link will be displayed else it will be hidden. If the field is omitted by default the deep links will be displayed.\n\n## Example Configuration\nAn example `argocd-cm.yaml` file with deep links and its variations :\n```\ndata:\n  # project level links\n  project.links: |\n    - url: https://myaudit-system.com?project={{proj.metadata.name}}\n      title: Audit\n  # application level links\n  application.links: |\n    - url: https://mycompany.splunk.com?search={{app.spec.destination.namespace}}\n      title: Splunk\n    # conditionally show link e.g. for specific project\n    - url: https://mycompany.splunk.com?search={{app.spec.destination.namespace}}\n      title: Splunk\n      if: app.spec.proj == \"abc\"\n    - url: https://{{project.metadata.annotations.splunkhost}}?search={{app.spec.destination.namespace}}\n      title: Splunk\n      if: project.metadata.annotations.splunkhost\n\n  # resource level links\n  resource.links: |\n    - url: https://mycompany.splunk.com?search={{res.metadata.namespace}}\n      title: Splunk\n      if: res.kind == \"Pod\" || res.kind == \"Deployment\"\n```\nThe argocd server will expose new APIs for rendering deep links in the UI, the server will handle the templating and conditional rendering logic and will provide the UI with the final list of links that need to be displayed for a particular location/resource.\n\n## Proposed API Methods\nThe following API methods are proposed:\n```\nmessage LinkInfo {\n  required string name = 1;\n  required string url = 2;\n  optional string description = 3;\n  optional string iconClass = 4;\n}\n\nmessage LinksResponse {\n  repeated LinkInfo items = 1;\n}\n\nservice ApplicationService {\n  rpc ListLinks(google.protobuf.Empty) returns (LinksResponse) {\n    option (google.api.http).get = \"/api/v1/applications/{name}/links\";\n  }\n\n  rpc ListResourceLinks(ApplicationResourceRequest) returns (LinksResponse) {\n    option (google.api.http).get = \"/api/v1/applications/{name}/resource/links\";\n  }\n}\n\nservice ProjectService {\n  rpc ListLinks(google.protobuf.Empty) returns (LinksResponse) {\n    option (google.api.http).get = \"/api/v1/projects/{name}/links\";\n  }\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/deep-links", "title": "Deep Links", "description": "Deep links allow end users to quickly redirect to third-party systems such as Splunk, DataDog etc. from the Argo CD user interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:56:01", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Deep Links - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/proposals/deep-links/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "918a2332-9142-4afe-a180-e7c0edd89693", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/deep-links", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/deep-links/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Deep Links\"?\n\nAssistant: Here are some code examples:\n\n### Example argocd-cm.yaml\n```yaml\ndata:\n  # project level links\n  project.links: |\n    - url: https://myaudit-system.com?project={{proj.metadata.name}}\n      title: Audit\n  # application level links\n  application.links: |\n    - url: https://mycompany.splunk.com?search={{app.spec.destination.namespace}}\n      title: Splunk\n    # conditionally show link e.g. for specific project\n    - url: https://mycompany.splunk.com?search={{app.spec.destination.namespace}}\n      title: Splunk\n      if: app.spec.proj == \"abc\"\n    - url: https://{{project.metadata.annotations.splunkhost}}?search={{app.spec.destination.namespace}}\n      title: Splunk\n      if: project.metadata.annotations.splunkhost\n\n  # resource level links\n  resource.links: |\n    - url: https://mycompany.splunk.com?search={{res.metadata.namespace}}\n      title: Splunk\n      if: res.kind == \"Pod\" || res.kind == \"Deployment\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/deep-links", "title": "Deep Links", "description": "Deep links allow end users to quickly redirect to third-party systems such as Splunk, DataDog etc. from the Argo CD user interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:56:01", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Deep Links - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/proposals/deep-links/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "918a2332-9142-4afe-a180-e7c0edd89693", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/deep-links", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/deep-links/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Deep Links\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the deep links are configured correctly in the argocd-cm to avoid broken links in the UI.\n• Use conditional statements wisely to control the visibility of links based on the context of the application or resource.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/deep-links", "title": "Deep Links", "description": "Deep links allow end users to quickly redirect to third-party systems such as Splunk, DataDog etc. from the Argo CD user interface.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:56:01", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Deep Links - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/proposals/deep-links/", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "918a2332-9142-4afe-a180-e7c0edd89693", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/deep-links", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/deep-links/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Offering Feature Bounties (Experimental)\"?\n\nAssistant: We'd like to have the ability to offer monetary rewards for significant features to be added to Argo.\n\nHere's a detailed explanation:\n\n\n## Summary\nWe'd like to have the ability to offer monetary rewards for significant features to be added to Argo.\n\n## Motivation\nThe Argo Project is driven by community contributions and in shared trust with maintainer companies. Sometimes there are important features worth investing in that represent substantial work and are tougher, or take longer to implement.\n\nBy providing a financial incentive, we can spur additional development from the community and indepdent contributors.\n\n## Proposal\nAdd the ability to mark a proposal with a bounty and a specific amount. When a PR is successfully merged, release payment to the PR author(s).\n\nThis proposal is experimental, meaning after trying a single bounty, we will review as a project and decide if we would like to continue this program. Accepting this proposal only constitutes the program for a single bounty as an experiment.\n\n## Guidelines and Rules\n### Creating a Bounty\nA bounty is a special proposal created under `docs/proposals/feature-bounties`.\n\n- A bounty proposal may only be created by an existing Argo maintainer.\n- The proposal document must be reviewed in regular maintainer meetings and an invitation for feedback will provide 7-days to comment.\n- Bounty should have approval with [lazy-consensus](https://community.apache.org/committers/lazyConsensus.html)\n- Once a bounty is created, they must be honored.\n- Bounty progress will be tracked in a GitHub issue linked in the proposal.\n- Creating a bounty requires the funds be available and not already committed elsewhere.\n\n### Claiming a Bounty\n- Argo will pay out bounties once a pull request implementing the requested features/changes/fixes is merged.\n- A bounty is limited to a single successful PR.\n- Those interested in working on the bounty are encouraged to comment on the issue, and users may team up to split a bounty if they prefer but collaboration is not required and users should not shame eachother for their preferences to work alone or together.\n- A comment of interest does not constitute a claim and will not be treated as such.\n- The first pull request submitted that is ready for merge will be reviewed by maintainers. Maintainers will also consider any competing pull requests submitted within 24-hours. We expect this will be a very rare circumstance. If multiple, high-quality, merge ready pull requests are submitted, 3-5 Approvers for the sub-project will vote to decide the final pull request merged.\n\n## Funding\nThe Argo Project has a small amount of funds from HackerOne bounties that can provide for a few feature bounties.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties", "title": "Offering Feature Bounties (Experimental)", "description": "We'd like to have the ability to offer monetary rewards for significant features to be added to Argo.", "has_code_examples": false, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 01:56:10", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/feature-bounties/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Offering Feature Bounties (Experimental) - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "8ae27b23-26d5-44cf-ad59-e01e508421ea", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Neat Enhancement Idea\"?\n\nAssistant: Support \"disabling\" multi-tenancy features by introducing Headless Argo CD.\n\nHere's a detailed explanation:\n\n\n## Summary\nThere are two main group of GitOps users:\n\n- Application developers - engineers who leverages Kubernetes to run applications.\n- Cluster administrators - engineers who manage and support Kubernetes clusters for the organization.\n\nArgo CD is a perfect fit for application developers thanks to its multi-tenancy features. Instead of running a separate Argo CD instance for each team, it is possible to run on the instance and leverage features like SSO, RBAC, and Web user interface. However, this is not the case for cluster administrators. Administrators prefer to rely on Kubernetes RBAC and view SSO and Argo CD RBAC as an obstacle and security threat. SSO, RBAC, and UI/API are totally optional and can be disabled but it requires additional configuration and learning.\n\n## Motivation\nIt is proposed to introduce officially supported **Headless Argo CD** that encapsulates changes required to disable multi-tenancy features and provide a seamless experience for cluster administrators (or any other user who don't need multi-tenancy).\n\n## Goals\nThe goals of \"Headless Argo CD\" are:\n\n#### Provide an easy way to deploy Argo CD without API/UI\nThe end-user should be able to install required components using a single `kubectl apply` command without following any additional instructions.\n\n#### Provide an easy way to use and manage Headless Argo CD\nThe `Headless Argo CD` should provide a simple way to view and manage Argo CD applications using CLI/UI. The access control should be enforced by Kubernetes RBAC only.\n\n#### Easy transition from Headless to non-Headless Argo CD\nIt is a common case when the Argo CD adopter wants to start small and then expand Argo CD to the whole organization. It should be easy to \"upgrade\" headless to full Argo CD installation.\n\n## Non-Goals\n#### Not modified Argo CD\nThe `Headless Argo CD` is not modified Argo CD. It is Argo CD distribution that missing UI/API and CLI that provides commands for Argo CD admin.\n\n#### Not deprecating existing operational methods\nThe `Headless Argo CD` is not intended to deprecate any of the existing operational methods.\n\n## Proposal\n#### Headless Installation Manifests\nIn order to simplify installation of Argo CD without API we need introduce `headless/install.yaml` in [manifests](https://argo-cd.readthedocs.io/en/stable/manifests) directory. The installation manifests should include only non HA controller, repo-server, Redis components, and RBAC.\n\n#### Headless CLI\nWithout the API server, users won't be able to take advantage of Argo CD UI and `argocd` CLI so the user experience won't be complete. To fill that gap we need to change the `argocd` CLI that and support talking directly to Kubernetes without requiring Argo CD API Server. The [argo-cd#6361](https://github.com/argoproj/argo-cd/pull/6361) demonstrates required changes:\n\n- Adds `--headless` flag to `argocd` commands\n- If the `--headless` flag is set to true then pre-run function that starts \"local\" Argo CD API server and points CLI to locally running instance\n- Finally on-demand port-forwards to Redis and repo server.\n\nThe user should be able to store `--headless` flag in config in order to avoid specifying the flag for every command. It is proposed to use `argocd login --headless` to generate \"headless\" config.\n\n#### Local UI\nIn addition to exposing CLI commands the PR introduces `argocd admin dashboard` command. The new command starts API server locally and exposes Argo CD UI locally. In order to make this possible the static assets have been embedded into Argo CD binary.\n\n### Merge Argo CD Util\nThe potential users of \"headless\" mode will benefit from `argocd-util` commands. The experience won't be smooth since they will need to switch back and forth between `argocd` and `argocd-util`. Given that we still have not finalized how users are supposed to get `argocd-util` binary (https://github.com/argoproj/argo-cd/issues/5307) it is proposed to deprecate `argocd-util` and merge in into `argocd` CLI under admin subcommand:\n\n```\nargocd admin app generate-spec guestbook --repo https://github.com/argoproj/argocd-example-apps\n```\n\n### Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n## Use cases\n## Use case 1:\nAs an Argo CD administrator, I would like to manage cluster resources using Argo CD without exposing API/UI outside of the cluster.\n\n## Use case 2:\nAs an Argo CD administrator, I would like to use Argo CD CLI commands and user interface to manage Argo CD applications/settings using only `kubeconf` file and without Argo CD API access.\n\n## Security Considerations\nThe Headless CLI/UI disables built-in Argo CD authentication and relies only on Kubernetes RBAC. So if the user will be able to make the same change using Headless CLI as using kubectl.\n\n## Risks and Mitigations\nTBD\n\n## Upgrade / Downgrade Strategy\nSwitching to and from Argo CD Headless does not modify any persistent data or settings. So upgrade/downgrade should be seamless by just applying the right manifest file.\n\n## Drawbacks\n- Embedding static resources into the binary increases it's size by ~20 mb. The image size is the same.\n\n## Alternatives\n- Re-invent GitOps Agent CLI experience and don't re-use Argo CD.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/headless-argocd", "title": "Neat Enhancement Idea", "description": "Support \"disabling\" multi-tenancy features by introducing Headless Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 01:56:29", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/headless-argocd/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Headless argocd - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "scrapeId": "7b9f3405-b852-44b5-81d2-c46e6f942860", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/headless-argocd", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/headless-argocd/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Neat Enhancement Idea\"?\n\nAssistant: Here are some code examples:\n\n### Headless CLI Command Example\n```yaml\nargocd admin app generate-spec guestbook --repo https://github.com/argoproj/argocd-example-apps\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/headless-argocd", "title": "Neat Enhancement Idea", "description": "Support \"disabling\" multi-tenancy features by introducing Headless Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 01:56:29", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/headless-argocd/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Headless argocd - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "scrapeId": "7b9f3405-b852-44b5-81d2-c46e6f942860", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/headless-argocd", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/headless-argocd/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Neat Enhancement Idea\"?\n\nAssistant: Here are the recommended best practices:\n\n• The end-user should be able to install required components using a single kubectl apply command without following any additional instructions.\n• The user should be able to store --headless flag in config in order to avoid specifying the flag for every command. It is proposed to use argocd login --headless to generate \"headless\" config.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/headless-argocd", "title": "Neat Enhancement Idea", "description": "Support \"disabling\" multi-tenancy features by introducing Headless Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 01:56:29", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/headless-argocd/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "title": "Headless argocd - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "scrapeId": "7b9f3405-b852-44b5-81d2-c46e6f942860", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/headless-argocd", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/headless-argocd/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Argo CD Manifest Hydrator\"?\n\nAssistant: This document explains how to take advantage of Argo CD's tooling to hydrate manifests and push them to git.\n\nHere's a detailed explanation:\n\n\n## Setting up git Push Access\nTo use Argo CD's source hydration tooling, you have to grant Argo CD push access to all the repositories for apps using the source hydrator.\n\n## Security Considerations\nArgo CD stores git push secrets separately from the main Argo CD components and separately from git pull credentials to minimize the possibility of a malicious actor stealing the secrets or hijacking Argo CD components to push malicious changes.\n\nPushing hydrated manifests to git can improve security by ensuring that all state changes are stored and auditable. If a malicious actor does manage to produce malicious changes in manifests, those changes will be discoverable in git instead of living only in the live cluster state.\n\nYou should use your SCM's security mechanisms to ensure that Argo CD can only push to the allowed repositories and branches.\n\n## Adding the Access Credentials\nTo set up push access, add a secret to the `argocd-push` namespace with the following format:\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-example-apps\n  labels:\n    # Note that this is \"repository-push\" instead of \"repository\". The same secret should never be used for both push and pull access.\n    argocd.argoproj.io/secret-type: repository-push\ntype: Opaque\nstringData:\n  url: https://github.com/argoproj/argocd-example-apps.git\n  username: '****'\n  password: '****'\n```\n\nOnce the secret is available, any Application which has pull access to a given repo will be able to use the source hydration tooling to also push to that repo.\n\n## Using the `sourceHydrator` Field\n\n\n## Migrating from the `source` or `sources` Field\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator", "title": "Argo CD Manifest Hydrator", "description": "This document explains how to take advantage of Argo CD's tooling to hydrate manifests and push them to git.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:56:39", "type": "overview", "page_metadata": {"title": "Argo CD Manifest Hydrator - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/proposals/manifest-hydrator/", "readthedocs-http-status": "200", "scrapeId": "16f92ee2-cf05-4052-8abd-872106354ddd", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Argo CD Manifest Hydrator\"?\n\nAssistant: Here are some code examples:\n\n### Adding Access Credentials Secret\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-example-apps\n  labels:\n    argocd.argoproj.io/secret-type: repository-push\ntype: Opaque\nstringData:\n  url: https://github.com/argoproj/argocd-example-apps.git\n  username: '****'\n  password: '****'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator", "title": "Argo CD Manifest Hydrator", "description": "This document explains how to take advantage of Argo CD's tooling to hydrate manifests and push them to git.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:56:39", "type": "code_examples", "page_metadata": {"title": "Argo CD Manifest Hydrator - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/proposals/manifest-hydrator/", "readthedocs-http-status": "200", "scrapeId": "16f92ee2-cf05-4052-8abd-872106354ddd", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Argo CD Manifest Hydrator\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use your SCM's security mechanisms to ensure that Argo CD can only push to the allowed repositories and branches.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator", "title": "Argo CD Manifest Hydrator", "description": "This document explains how to take advantage of Argo CD's tooling to hydrate manifests and push them to git.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:56:39", "type": "best_practices", "page_metadata": {"title": "Argo CD Manifest Hydrator - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/proposals/manifest-hydrator/", "readthedocs-http-status": "200", "scrapeId": "16f92ee2-cf05-4052-8abd-872106354ddd", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"UI Support for Multiple Sources in Applications\"?\n\nAssistant: This is the proposal for the UI changes to support multiple sources for an Application.\n\nHere's a detailed explanation:\n\n\n## Summary\nThis is a follow-on proposal to supporting Multiple Sources for Applications, but for the UI.\n\nThe above original ‘core’ proposal deferred any design changes for the UI to a separate feature or secondary proposal. The proposal implementation that was made in PR 10432 enabled the UI to tolerate multi-source applications with the new Sources field, while still supporting the original Source field.\n\nHere are the current restrictions and limitations of the UI when applications with multiple sources are used:\n\n1. The application’s details page currently shows one ApplicationSource, regardless of whether the application has one source or multiple sources. With the PR 10432 implementation, if the application has multiple sources, the UI displays only the first of the sources. Also, in particular, in the Summary tab, the source parameters are non-editable.\n\n2. History and Rollback is disabled for multi-source applications. The button is disabled. Jorge has submitted a PR for rollback which includes controller and UI changes.\n\n3. The New Application dialog currently only allows users to provide one source.\n\nThus, multiple source applications are not considered first class citizens in the UI.\n\n## Motivation\nThe motivation behind this change is to add a more complete story for the multiple source feature. The UI should support the creation of multiple source applications, and also support the viewing and editing of parameters from all sources. The three points in the summary above are the base or core changes that need to be addressed.\n\n## Goals\nThe goals of the proposal are:\n\n- Provide first-class support of multiple sources for applications in the UI (e.g. address the aforementioned restrictions)\n- Outline stages of implementation that will help ease PR review, and reduce the risk of introducing regressions/issues.\n\n## Non-goals\n- The design changes for the Argo CD CLI is beyond the scope of this proposal (The server APIs can probably be reused).\n\n## Proposal\nAs mentioned in the previous summary section, the application source parameters are surfaced in the UI in three locations. The Resource details pages, specifically, the Summary and Parameters tabs, the deployment history, and the Application Create panel page. These pages should be updated.\n\n## Resource Details\nThe following describes the current behavior and proposed changes for the Summary tab and the Parameters Tab.\n\n## i) Summary Tab\nCurrent Behavior:\n\nThe current Summary tab includes source-related information, including the repository.\n\nProposed Change:\n\nTo support multiple sources, the source-related information, from a single-source-based design, will be ‘pulled out’ and put into a new tab called Sources, and it will be combined with the Parameters tab. The new Sources tab will allow users to view all the information related to each source, including the repo URL and path, chart and revision for Helm, etc.\n\n## ii) Parameters Tab\nCurrent Behavior:\n\nThe Parameters tab shows the application parameters for the application’s repository details type or source.\n\nProposed Change:\n\nThe Parameter tab will be removed but the contents of the current parameters tab will be ‘reused’ and will be shown in the new SOURCES tab as described above. The parameters and parameter values will be shown for whatever source is selected by the user.\n\n## iii) Update/Edit Capability in the New Sources Tab\nThe above points describe how all the sources will be rendered. However, the Sources tab should be the page to allow users to delete and add sources. \n\nCurrent Behavior:\n\nThe current form-based UI doesn’t support deleting a chosen/desired source of a multi-source application.\n\nProposed Change:\n\nIn addition to adding the new SOURCES tab from section i) and ii), two new buttons (Add Source and Delete Source) will be added to the page.\n\n## History and Rollback\nCurrent Behavior: The History and Rollback button for multi-source apps is disabled. It's only enabled for single-source apps.\n\nJorge has submitted a PR for rollback which includes controller and UI changes. This can be treated as a separate, independent proposal.\n\n## New App Dialog\nCurrent Behavior:\n\nThe dialog currently allows users to ‘quickly’ create a single source application.\n\nProposed Changes:\n\nMake the form view of the dialog support adding, updating and viewing of multiple sources.\n\n## Use cases\nThe use cases involves those areas in the UI where the current source is displayed. These have been described in the Summary and Proposal sections.\n\n## Implementation Details\nThe implementation plan can be divided into different stages. Read-only capability can be provided first and it will be the safest change. The UI currently is not showing all the sources for the multi-source application so this should be the highest priority.\n\n## Security Considerations\nNone\n\n## Risks and Mitigations\nNone\n\n## Upgrade / Downgrade Strategy\nIf downgraded, the UI will revert to showing just the first source.\n\n## Drawbacks\nNone\n\n## Open Questions\nSupporting multiple sources in the New App dialog may not be ‘worth’ the effort? The drawback is that switching from the YAML editor and form editor can lead to loss of information.\n\n## Appendix\nMultiple sources can be shown as a list of collapsible cards or sections, one below the other, under one page of the SOURCES tab.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications-ui", "title": "UI Support for Multiple Sources in Applications", "description": "This is the proposal for the UI changes to support multiple sources for an Application.", "has_code_examples": false, "has_best_practices": true, "section_count": 19, "timestamp": "2025-02-28 01:56:58", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "Proposal for support multi-source apps in the UI - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/multiple-sources-for-applications-ui/", "scrapeId": "d61f4a9f-d0e5-44c3-b686-3cd7e6d5ff73", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications-ui", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications-ui/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"UI Support for Multiple Sources in Applications\"?\n\nAssistant: Here are the recommended best practices:\n\n• Provide first-class support of multiple sources for applications in the UI.\n• Outline stages of implementation that will help ease PR review, and reduce the risk of introducing regressions/issues.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications-ui", "title": "UI Support for Multiple Sources in Applications", "description": "This is the proposal for the UI changes to support multiple sources for an Application.", "has_code_examples": false, "has_best_practices": true, "section_count": 19, "timestamp": "2025-02-28 01:56:58", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "Proposal for support multi-source apps in the UI - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/multiple-sources-for-applications-ui/", "scrapeId": "d61f4a9f-d0e5-44c3-b686-3cd7e6d5ff73", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications-ui", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications-ui/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Multiple Sources for application\"?\n\nAssistant: Support more than one source for creating an Application.\n\nHere's a detailed explanation:\n\n\n## Open Questions\n- Adding external sources to the Application resource would add additional latencies for creation/reconciliation process. Should we add it to the doc in Risks?\n\n## Summary\nCurrently, Argo CD supports Applications with only a single ApplicationSource. In certain scenarios, it would be useful to support more than one source for the application. For example, consider a need to create multiple deployments of the same application and manifests but manifests can come from different sources. Today we would have to copy manifest files from one application to another.\n\nFor example, from one of the comments on this proposal PR:\n\n\"An independent support of the Helm charts and their values files. This opens a door to such highly requested scenarios like multiple deployments of the same (possibly external) Helm chart with different values files or an independent migration to a newer Helm chart version for the same applications installed in Test and Production environments.\"\n\nCreating applications from multiple sources would allow users to configure multiple services stored at various sources within the same application.\n\n## Motivation\nThe main motivation behind this enhancement proposal is to allow users to create an application using services that are stored in various sources.\n\n## Goals\nThe goals of the enhancement are:\n\n#### Supporting multiple sources for creating an application\nUsers should be able to specify multiple sources to add services to the application. Argo CD should compile all the sources and reconcile each source individually for creating the application.\n\n#### Allow specifying external value files for Helm repositories\nUsers should be able to specify different sources for Helm charts and values files. The Helm charts specified by the user could be available in Git or Helm repository and the value files are stored in Git. Argo CD should track changes in both the Helm charts and the value files repository and reconcile the application.\n\n#### Changes to UI\nThe UI should allow users to add multiple sources while creating the application. For each source, UI should allow users to add multiple external values files Helm projects. We would need a separate proposal for changes to UI.\n\n#### Changes to cli\nThe cli would need to support adding a list of resources instead of just one while creating the application. `values` field should allow referencing value files from other sources. We would need a separate proposal for changes to cli.\n\n## Non-goals\n*\n\n## Proposal\n### Add new `sources` field in Application Spec\nThe proposal is to add a new field `sources` which would allow users to input list of `ApplicationSource` s. We would mark field `source` as deprecated and would ignore the details under `source` with details under `sources` field.\n\nBelow example shows how the yaml would look like for `source` and `sources` field. We would ignore the `source` field and apply the resources mentioned under `sources` field.\n\n```yaml\nspec:\n  source:\n    repoURL: https://github.com/elastic/helm-charts/tree/main/elasticsearch\n    targetRevision: 6.8\n    helm:\n      valueFiles:\n        - values.yaml\n  sources:                                          # new field\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch\n      helm:\n        valueFiles:\n          - values.yaml\n```\n\n### Make `path/chart` field optional\nWhile adding sources to the application, users can decide not to add `path/chart` field in the application yaml. The controller will not generate manifests for the sources that do not have `path/chart` field specified. For example, in the below application spec, controller will generate the manifest for `elasticsearch` source but not for source `my-repo`.\n\n```yaml\nspec:\n  sources:\n    - repoURL: https://github.com/my-org/my-repo # path is missing so no manifests are generated\n      targetRevision: master\n      ref: myRepo                                 # repo is available via symlink \"my-repo\"\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch               # path \"incubator/elasticsearch\" is used to generate manifests\n      helm:\n        valueFiles:\n          - $myRepo/values.yaml                   # values.yaml is located in source with reference name $myRepo\n```\n\n### Add optional `ref` field to Application Source\nFor making files accessible to other sources, add a new `ref` field to the source. For example, in below ApplicationSpec, we have added `ref: myRepo` to the `my-repo` repository and have used reference `$myRepo` to the `elasticSearch` repository.\n\n```yaml\nspec:\n  sources:\n    - repoURL: https://github.com/my-org/my-repo  # path is missing so no manifests are generated\n      targetRevision: master\n      ref: myRepo                                 # repo is available via symlink \"myRepo\"\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch               # path \"incubator/elasticsearch\" is used to generate manifests\n      helm:\n        valueFiles:\n          - $myRepo/values.yaml                   # values.yaml is located in source with reference name $myRepo\n```\n\n### Combined Example Application yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: grafana\n  namespace: argocd\nspec:\n  destination:\n    namespace: monitoring\n    server: https://some.k8s.url.com:6443\n  project: default\n  source:\n    repoURL: https://github.com/helm/charts\n    targetRevision: master\n    helm:\n    valueFiles:\n        - values.yaml\n    chart: incubator/elasticsearch\n  sources:                                          # new field\n  # application that consists of MongoDB and ElasticSearch resources\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/mongodb\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch\n    - repoURL: https://github.com/my-org/my-repo  # path is missing so no manifests are generated\n      targetRevision: master\n      ref: myRepo                                 # repo is available via symlink \"my-repo\"\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch               # path \"incubator/elasticsearch\" is used to generate manifests\n      helm:\n        valueFiles:\n          - $myRepo/values.yaml                   # values.yaml is located in source with reference name $myRepo\n  syncPolicy:\n    automated: {}\n```\nIn scenarios, where you have same resource mentioned multiple times in the application yaml, the last resource in the source list will override the previous resources.\n\n## Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n#### Use case 1:\nAs a user, I have an Application that uses the [elasticsearch](https://github.com/helm/charts/tree/master/incubator/elasticsearch) helm chart as source. Today, user needs to create a separate Application to configure the [elasticsearch-exporter](https://github.com/helm/charts/tree/master/stable/elasticsearch-exporter) to expose Prometheus metrics.\n\n#### Use case 2:\nAs per one of the comment on the issue [Helm chart + values files from Git](https://github.com/argoproj/argo-cd/issues/2789):\n\n\"We have a Helm Chart which is used in 30+ Services and each of them is customized for 3 possible environments.\nReplicating this Chart 30 times without a centralized Repo looks dirty. Can be a show stopper for the whole migration.\nModifying the Application definition is not an option since the whole goal is to reduce the rights that the CI-solution has. Giving it the right to update all Application-definitions from various teams in the argocd namespace is a hard thing to convince people with.\"\n\n## Implementation Details\n#### Attach multiple sources to the Application\nTo allow multiple sources to the Application, we would add a new field `sources` which would allow users to input list of `ApplicationSource` s. As part of this update and to support backward compatibility, we would mark field `source` as deprecated and remove it in later revisions.\n\nTo avoid complexity on the deciding the list of sources, if both `source` and `sources` fields are specified, we would override the source under `source` field with all the sources under `sources` field.\n\n**Depracating `source` field:** - Once the `sources` field is implemented in UI and cli as well, we will mark the `source` field as deprecated. At the same time, we will log `WARNING` messages and add UI blurbs about the deprecation. When maintainers feel confident about the adoption of the `sources` field, we will remove the `source` field from later releases.\n\n#### Invalidating existing cache\nArgo CD benefits from the assumption of a single repo per application to detect changes and to cache the results. But this enhancement now requires us to look at all the source repo \"HEAD\" s and invalidate the cache if any one of them changes.\n\n#### Reconcilation of the Application\nAs we would have multiple sources as part of the same Application, we would need to track updates to each source and reconcile the Application for each source. When one of the sources change, we would need to ensure that target revisions of other sources are up-to-date, e.g. force a simple refresh to see if target revision of the source (e.g. HEAD), still points to revisionX for example.\n\n#### Updates to UI\nToday, we allow users to add only one source in the UI. We would need to update the UI to add multiple sources and configure specific\n\n#### Updates to cli\nWe would need to create new options to the `argocd app create` command for adding multiple sources to the Application. We would also need to introduce allowing `ref` field for sources and to reference the files from symlinked source.\nAs per the community call on February 3, changes to UI and cli are huge and are not planned to be part of first iteration.\n\n## Security Considerations\nGood unit- and end-to-end tests need to be in place for this functionality to ensure we don't accidentally introduce a change that would break the feature.\n\n## Risks and Mitigations\n#### Uncontrolled number of sources added to Application\nThe users might add a huge number of external sources to the Application, with a potential performance impact on the Argo CD creation/reconciliation processes. This would apply even for the external value files for Helm projects.\nA possible mitigation to this would be to enforce the number of external sources allowed per Application.\n\n#### Unauthorised access to external resources\nThe users might reference the source that has not been whitelisted in the project. This might lead to access issues and failure to sync the Application.\nA possible solution would be to check for the source repository to be whitelisted in the project before syncing and report appropriate error messages in respective scenarios.\n\n## Upgrade / Downgrade Strategy\nUpgrading to a version implementing this proposal should be frictionless and wouldn't require administrators to perform any changes in the configuration to keep the current behaviour. Application created without the new field `.spec.sources` being set will keep their behaviour, since they will allow Application resources to be created the same way they are today.\nDowngrading would not be easily possible once users start to make use of the feature and create Applications with the new field `.spec.sources` being set. The Application would no longer be able to recognize the resources and will fail the reconciliation/creation step.\n\n## Drawbacks\n- Downgrade/rollback would not be easily possible.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications", "title": "Multiple Sources for application", "description": "Support more than one source for creating an Application.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 01:57:32", "type": "overview", "page_metadata": {"title": "Neat-enhancement-idea - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/proposals/multiple-sources-for-applications/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "f6bcf566-d420-40ed-8798-fadf932ccdf2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Multiple Sources for application\"?\n\nAssistant: Here are some code examples:\n\n### Add new `sources` field in Application Spec\n```yaml\nspec:\n  source:\n    repoURL: https://github.com/elastic/helm-charts/tree/main/elasticsearch\n    targetRevision: 6.8\n    helm:\n      valueFiles:\n        - values.yaml\n  sources:                                          # new field\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch\n      helm:\n        valueFiles:\n          - values.yaml\n\n```\n\n### Make `path/chart` field optional\n```yaml\nspec:\n  sources:\n    - repoURL: https://github.com/my-org/my-repo # path is missing so no manifests are generated\n      targetRevision: master\n      ref: myRepo                                 # repo is available via symlink \"my-repo\"\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch               # path \"incubator/elasticsearch\" is used to generate manifests\n      helm:\n        valueFiles:\n          - $myRepo/values.yaml                   # values.yaml is located in source with reference name $myRepo\n\n```\n\n### Add optional `ref` field to Application Source\n```yaml\nspec:\n  sources:\n    - repoURL: https://github.com/my-org/my-repo  # path is missing so no manifests are generated\n      targetRevision: master\n      ref: myRepo                                 # repo is available via symlink \"myRepo\"\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch               # path \"incubator/elasticsearch\" is used to generate manifests\n      helm:\n        valueFiles:\n          - $myRepo/values.yaml                   # values.yaml is located in source with reference name $myRepo\n\n```\n\n### Combined Example Application yaml\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: grafana\n  namespace: argocd\nspec:\n  destination:\n    namespace: monitoring\n    server: https://some.k8s.url.com:6443\n  project: default\n  source:\n    repoURL: https://github.com/helm/charts\n    targetRevision: master\n    helm:\n    valueFiles:\n        - values.yaml\n    chart: incubator/elasticsearch\n  sources:                                          # new field\n  # application that consists of MongoDB and ElasticSearch resources\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/mongodb\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch\n    - repoURL: https://github.com/my-org/my-repo  # path is missing so no manifests are generated\n      targetRevision: master\n      ref: myRepo                                 # repo is available via symlink \"my-repo\"\n    - repoURL: https://github.com/helm/charts\n      targetRevision: master\n      path: incubator/elasticsearch               # path \"incubator/elasticsearch\" is used to generate manifests\n      helm:\n        valueFiles:\n          - $myRepo/values.yaml                   # values.yaml is located in source with reference name $myRepo\n  syncPolicy:\n    automated: {}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications", "title": "Multiple Sources for application", "description": "Support more than one source for creating an Application.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 01:57:32", "type": "code_examples", "page_metadata": {"title": "Neat-enhancement-idea - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/proposals/multiple-sources-for-applications/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "f6bcf566-d420-40ed-8798-fadf932ccdf2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Multiple Sources for application\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure good unit- and end-to-end tests are in place for this functionality to avoid breaking changes.\n• Consider enforcing the number of external sources allowed per Application to mitigate performance impacts.\n• Check for the source repository to be whitelisted in the project before syncing to avoid unauthorized access issues.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications", "title": "Multiple Sources for application", "description": "Support more than one source for creating an Application.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 01:57:32", "type": "best_practices", "page_metadata": {"title": "Neat-enhancement-idea - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/proposals/multiple-sources-for-applications/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "f6bcf566-d420-40ed-8798-fadf932ccdf2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/multiple-sources-for-applications/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Argo CD first-class OCI support\"?\n\nAssistant: Storing and retrieving manifests within in OCI registries\n\nHere's a detailed explanation:\n\n\n## Summary\nCurrently, Argo CD supports obtaining manifests from either a Git repository, a Helm chart repository, or a Helm chart stored within an OCI registry. Given that OCI registries are more frequently being used to store content aside from container images, introduce a mechanism for storing and retrieving manifests that can be used by any of the existing supported tools in any of the supported methods of representing assets that are to be applied to a Kubernetes environment.\n\n## Motivation\nThe industry is seeing a rapid adoption of OCI Artifacts as a method for storing and retrieving content. Adding support for sourcing resources stored in OCI artifacts not only provides immediate benefits, but opens up additional possible integrations in the future.\n\n**Dependency Reduction**\n\nAt the present time, a user must have access to either a Git repository, or a remote Helm chart repository. Most users or enterprise organizations already have access to an OCI registry as it represents the primary source of image related content within a Kubernetes environment. By sourcing assets from OCI registries, no additional infrastructure is required in order to store a variety of content types simplifying the set of requirements in order to begin to fully leverage the capabilities of Argo CD.\n\n**Market Relevance**\n\nArgo CD continues to be one of the most popular GitOps tools in the industry. As the industry continues to evolve, other tools within the GitOps market have already began to adopt OCI artifacts as a source for storing and retrieving GitOps resources.\n\n## Goals\n- Enable the retrieval of resources stored as artifacts in OCI registries that are formatted in any of the supported options (Kustomize, Jsonnet, Helm, plain-manifest, CMPs, etc)\n- Define a format for storing resources that can be processed by Argo CD as an OCI artifact including the composition and Media Type(s)\n- Support the retrieval of artifacts from OCI registries using custom / self signed TLS certificates.\n- Support the retrieval of artifacts from OCI registries requiring authentication.\n\n## Non-Goals\n- CLI Integration to package and publish resources in a format for storage in an OCI registry\n- Attach metadata to OCI artifact manifest to provide additional details related to the content (such as original Git source [URL, revision])\n\n## Proposal\nThis is where we get down to details of what the proposal is about.\n\n## Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n#### Publishing and retrieval of content from OCI registries:\nAs a user, I would like to make use of content that is represented by any of the supported options (Kustomize, Jsonnet, Helm, plain-manifest, etc) or those that could be consumed using a Config Management Plugin from an OCI registry.\n\n#### Authenticating to OCI registries:\nAs a user, I would like to enforce proper security controls by requiring authentication to an OCI registry and configure Argo CD to be able to interact with this registry.\n\n#### CLI Integration:\nAs a user, I would like the ability to produce, store and retrieve resources (pull/push) in a OCI registry using the Argo CD CLI.\n\n## Implementation Details/Notes/Constraints\nThe Argo CD repo-server currently maintains two types of clients - Helm and git. By adding a third client, and invoking it in the same places as the other two, we can support OCI artifacts.\n\nIt seems likely that we should create a new, common interface to represent all three clients. Then we can instantiate the client we need, toggling on whatever value in the repo config determines what kind of repo we're fetching from.\n\n## Format of OCI Artifact\nAn OCI artifact can contain any type of binary content. It is important that the content be formatted in a manner that can be consumed by Argo CD.\n\n## Content\nResources that is consumed by Argo CD can be represented by a series of files and folders. To be stored within an OCI artifact, these assets are stored within a compressed tar archive (.tar.gz) OCI layer. The OCI Image Specification allows for metadata to be added through the use of annotations to provide attribute based details describing the included content. This level of detail is important as it satisfies many of the existing capabilities of Argo CD for tracking content, such as Git repository URL, branch name/revision.\n\n## Media Types\nThe OCI Image Specification makes extensive use of Media Types to identity the format of content. To provide not only a way that signifies the content of the OCI artifact contains Argo CD manifests, but to define the structure of the content. An understanding of the composition and requirements enable a broad ecosystem of tooling that can be used to produce and consume Argo CD resources within OCI registries.\n\nTwo new Media Types will be used for this purpose as defined below:\n\n- `application/vnd.cncf.argoproj.argocd.content.v1.tar+gzip` - Primary asset stored within the OCI artifact containing a gzip compressed tar archive of Argo CD resources. Further details are outlined in the prior section.\n- `application/vnd.cncf.argoproj.argocd.config.v1+json` - An OCI Image Configuration.\n\n## Detailed examples\n\n\n## Security Considerations\nThe direct integration with an external endpoint from the core subsystem of Argo CD introduces several considerations as it relates to security. It is worthy to note that Argo CD currently does support sourcing Helm charts that are stored within OCI registries. However, this interaction is performed by Helm and its underlying library, ORAS, and not Argo CD itself. Capabilities included within this proposal can make use of the same libraries to facilitate the interaction.\n\n## Credentials\nSecurity controls may be enforced within the OCI registry to enforce that clients authenticate. The introduction of additional mechanisms to authenticate against target systems is outside the scope of this proposal. However, an integration with existing capabilities and features, such as sourcing from repository credentials is required.\n\n## Risks and Mitigation's\n#### Overlap with existing Helm OCI integration\nArgo CD already includes support for sourcing Helm Charts from OCI registries and the retrieval is delegated to functionality provided by Helm. Considerations must be taken into account to determine whether the intent by the end user is to consume an OCI artifact containing Argo CD related resources or a Helm chart. One such method for addressing this concern is to inspect the mediaType of the OCI artifact.\n\n## Upgrade / Downgrade Strategy\nIf applicable, how will the component be upgraded and downgraded? Make sure this is in the test plan.\n\nConsider the following in developing an upgrade/downgrade strategy for this enhancement:\n\n- What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to keep previous behavior?\n- What changes (in invocations, configurations, API use, etc.) is an existing cluster required to make on upgrade in order to make use of the enhancement?\n\n## Drawbacks\n- Sourcing content from an OCI registry may be perceived to be against GitOps principles as content is not sourced from a Git repository. This concern could be mitigated by attaching additional details related to the content (such as original Git source [URL, revision]). Though it should be noted that the GitOps principles only require a source of truth to be visioned and immutable which OCI registries support.\n\n## Alternatives\n### Config Management Plugin\nContent stored within OCI artifacts could be sourced using a Config Management Plugin which would not require changes to the core capabilities provided by Argo CD. However, this would be hacky and not represent itself within the Argo CD UI.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/native-oci-support", "title": "Argo CD first-class OCI support", "description": "Storing and retrieving manifests within in OCI registries", "has_code_examples": false, "has_best_practices": false, "section_count": 17, "timestamp": "2025-02-28 01:58:04", "type": "overview", "page_metadata": {"title": "Argo CD first-class OCI support - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/proposals/native-oci-support/", "scrapeId": "a9e90e11-aba6-48c6-9db2-40d2d837aaff", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/native-oci-support", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/native-oci-support/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Subscribe to a notification from the Application Details page\"?\n\nAssistant: Provide the ability to subscribe to a notification from the Application Details page\n\nHere's a detailed explanation:\n\n\n## Summary\nAllow users to subscribe application with a notification from the Application Details page using provided instruments for selecting available triggers and services.\n\n## Motivation\nIt is already possible to subscribe to notifications by modifying annotations however this is a pretty poor user experience. Users have to understand annotation structure and have to find available services and triggers in configmap.\n\n## Goals\nBe able to subscribe to a notification from the Application Details page without forcing users to read the notification configmap.\n\n## Non-Goals\nWe provide only ability to select existing services and triggers, we don't provide instruments to add/edit/delete notification services and triggers.\n\n## Proposal\nTwo changes are required:\n\n- Implement notifications API that would expose a list of configured triggers and services\n- Implement UI that leverages notifications API and helps users to create a correct annotation.\n\n## Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n#### Use case 1:\nAs a user, I would like to be able to subscribe application to a notification from the Application Details Page without reading knowing of annotation format and reading notification configmap.\n\n## Implementation Details/Notes/Constraints\nThree read-only API endpoints will be added to provide a list of notification services, triggers, and templates.\n\n## Security Considerations\nNew API endpoints are available only for authenticated users. API endpoints response does not contain any sensitive data.\n\n## Risks and Mitigations\nTBD\n\n## Upgrade / Downgrade Strategy\nBy default, we don't have a notification configmap in the system; in that case, API should return an empty list instead of erroring.\n\n## Drawbacks\n\n\n## Alternatives\nContinue to do that manually.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/notifications-API", "title": "Subscribe to a notification from the Application Details page", "description": "Provide the ability to subscribe to a notification from the Application Details page", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-02-28 01:58:16", "type": "overview", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/proposals/notifications-API/", "title": "Subscribe to a notification from the Application Details page - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "scrapeId": "05d389c4-a8fe-46bf-8601-3a1c59dd279e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/notifications-API", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/notifications-API/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Subscribe to a notification from the Application Details page\"?\n\nAssistant: Here are some code examples:\n\n### Notification Service API\n```yaml\nmessage Triggers { repeated string triggers = 1; }\nmessage TriggersListRequest {}\nmessage Services { repeated string services = 1; }\nmessage ServicesListRequest {}\nmessage Templates { repeated string templates = 1; }\nmessage TemplatesListRequest {}\nservice NotificationService {\n    rpc ListTriggers(TriggersListRequest) returns (Triggers) {\n        option (google.api.http).get = \"/api/v1/notifications/triggers\";\n    }\n    rpc ListServices(ServicesListRequest) returns (Services) {\n        option (google.api.http).get = \"/api/v1/notifications/services\";\n    }\n    rpc ListTemplates(TemplatesListRequest) returns (Templates) {\n        option (google.api.http).get = \"/api/v1/notifications/templates\";\n    }\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/notifications-API", "title": "Subscribe to a notification from the Application Details page", "description": "Provide the ability to subscribe to a notification from the Application Details page", "has_code_examples": true, "has_best_practices": false, "section_count": 12, "timestamp": "2025-02-28 01:58:16", "type": "code_examples", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/proposals/notifications-API/", "title": "Subscribe to a notification from the Application Details page - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "scrapeId": "05d389c4-a8fe-46bf-8601-3a1c59dd279e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/notifications-API", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/notifications-API/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Parameterized Config Management Plugins\"?\n\nAssistant: Config Management Plugin (CMP) parameterization defines a way for plugins to \"announce\" and then consume acceptable parameters for an Application. Announcing parameters allows CMPs to provide a UI experience similar to native config management tools (Helm, Kustomize, etc.).\n\nHere's a detailed explanation:\n\n\n## Open Questions\n- Should we write examples in documentation in Python instead of shell scripts?\n\nIt's very easy to write an insecure shell script. People copy/paste code from documentation to start their own work. Maybe by using a different language in examples, we can encourage more secure CMP development.\n\n## Summary\n[Config Management Plugins](https://argo-cd.readthedocs.io/en/stable/user-guide/config-management-plugins/) allow Argo CD administrators to define custom manifest generation tooling.\n\nThe only existing way for users to parameterize manifest generation is with environment variables.\n\nThis proposed feature will allow a plugin to \"announce\" acceptable parameters for an Application. It will also allow the plugin to consume parameters once the user has set them.\n\nParameters definitions may be simple (advertising a simple key/value string pair) or more complex (accepting an array of strings or a map of string keys to string values). Parameter definitions can also specify a data type (string, number, or boolean) to help the UI present the most relevant input field.\n\n## Motivation\n### 1. CMPs are under-utilized\nCMPs, especially the sidecar type, are under-utilized. Making them more robust will increase adoption. Increased adoption will help us find bugs and then make CMPs more robust. In other words, we need to reach a critical mass of CMP users.\n\nMore robust CMPs will make it easier to start supporting tools like [Tanka](https://tanka.dev/).\n\n### 2. Decisions about config management tools are limited by the core code\nFor example, there's a [Helm bug](https://github.com/argoproj/argo-cd/issues/7291) affecting Argo CD users. The fix would involve importing the Helm SDK (a very large dependency) into Argo CD. Implementing Helm support as a CMP would allow us to use that SDK without embedding it in the core code.\n\n### 3. Ksonnet is deprecated, and CMPs are a good place to maintain support\nOffloading Ksonnet to a plugin would allow us to support existing users without maintaining Ksonnet code in the more actively-developed base. But we need CMP parameters to provide Ksonnet support on-par with native support.\n\n## Goals\nParameterized CMPs must be:\n\\* Easy to write\n\\* An Argo CD admin should be able to write a simple parameterized CMP in just a few lines of code.\n\\* An Argo CD admin should be able to write an _advanced_ parameterized CMP server relying on thorough docs.\n\n```\nWriting a custom CMP server might be preferable if the parameters announcement code gets too complex to be an inline shell script.\n```\n\n- Easy to install\n- Installing a simple CMP or even a CMP with a custom server should be intuitive and painless.\n- Easy to use\n- Argo CD end-users (for example, developers) should be able to\n1. View and set parameters in the Argo CD Application UI\n2. See the parameters reflected in the Application manifest\n3. Easily read/modify the generated parameters in the manifest (they should be structured in a way that's easy to read)\n- CMPs should be able to announce parameters with more helpful interfaces than a simple text field.\n  - For example, numbers and booleans should be represented in the UI with the appropriate inputs.\n- Future-proof\n- Since the rich parameters UI is an important feature for config management tools, the parameter definition schema should be flexible enough to announce new _types_ of parameters so the UI can customize its presentation.\n- Backwards-compatible\n- CMPs written before this enhancement should work fine after this enhancement is released.\n- Proven with a rich demonstration\n- The initial release of this feature should include a CMP implementation of the Helm config tool. This will\n1. Serve as a rich example for others CMP developers to mimic\n2. Allow us to decouple the Helm config management release cycle from the Argo release cycle\n3. Allow us to work around [this bug](https://github.com/argoproj/argo-cd/issues/7291) without including the Helm SDK in the core Argo CD code\n- The Helm CMP must be on-par with the native implementation.\n1. It must present an equivalent parameters UI.\n2. It must communicate errors back to the repo-server (and then the UI) the same as the native implementation.\n\n## Non-Goals\nWe should not:\n\\* Re-implement config management tools as CMPs (besides Helm)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/parameterized-config-management-plugins", "title": "Parameterized Config Management Plugins", "description": "Config Management Plugin (CMP) parameterization defines a way for plugins to \"announce\" and then consume acceptable parameters for an Application. Announcing parameters allows CMPs to provide a UI experience similar to native config management tools (Helm, Kustomize, etc.).", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:58:51", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/proposals/parameterized-config-management-plugins/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "Parameterized-Config-Management-Plugins - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "1020ea2b-41a6-4ca4-a8dc-cbf042afe1e4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/parameterized-config-management-plugins", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/parameterized-config-management-plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Parameterized Config Management Plugins\"?\n\nAssistant: Here are some code examples:\n\n### Example 1: trivial parameterized CMP\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: trivial-cmp\nspec:\n  version: v1.0\n  generate:\n    command:\n      - sh\n      - -c\n      - |\n        # Pull one parameter value from the \"main\" section of the given parameters.\n        CM_NAME_SUFFIX=$(echo \"$ARGOCD_APP_PARAMETERS\" | jq -r '.\"main\"[] | select(.name == \"cm-name-suffix\").value')\n        cat << EOM\n        {\n          \"kind\": \"ConfigMap\",\n          \"apiVersion\": \"v1\",\n          \"metadata\": {\n            \"name\": \"$ARGOCD_APP_NAME-$CM_NAME_SUFFIX\",\n            \"namespace\": \"$ARGOCD_APP_NAMESPACE\"\n          }\n        }\n        EOM\n  discover:\n    fileName: \"./trivial-cmp\"\n  parameters:\n    command:\n      - sh\n      - -c\n      - |\n        echo '[{\"name\": \"cm-name-suffix\"}]'\n```\n\n### Example 2: Helm parameters from Kustomize dependency\n```yaml\n**Plugin config**\n\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: kustomize-helm-proxy-cmp\nspec:\n  version: v1.0\n  generate:\n    command: [/home/argocd/generate.sh]\n  discover:\n    fileName: \"./kustomization.yaml\"\n  parameters:\n    static:\n      - name: version\n        title: VERSION\n        string: v4.3.0\n      - name: name-prefix\n        title: NAME PREFIX\n      - name: name-suffix\n        title: NAME SUFFIX\n    dynamic:\n      command: [/home/argocd/get-parameters.sh]\n\n**generate.sh**\n\nThis script would be non-trivial. Kustomize only accepts YAML-formatted values for Helm charts. The script would have to convert the dot-notated parameters to a YAML file.\n\n**get-parameters.sh**\n\n```\nkustomize build . --enable-helm > /dev/null\n\nget_parameters() {\nwhile read -r chart; do\n  yq e -o=p \"charts/$chart/values.yaml\" | jq --arg chart \"$chart\" --slurp --raw-input '\n    {\n      name: \"\\($chart)-helm-parameters\",\n      title: \"\\($chart) Helm parameters\",\n      tooltip: \"Parameter overrides for the \\($chart) Helm chart.\",\n      collectionType: \"map\",\n      map: split(\"\\n\") | map(capture(\"(?<key>.*) = (?<value>.*)\") | from_entries)\n    }'\ndone << EOF\n$(yq e '.helmCharts[].name' kustomization.yaml)\nEOF\n}\n\n# Collect the parameters generated for each chart into one array.\nget_parameters | jq --slurp\n```\n\n**Dockerfile**\n\n```\nFROM ubuntu:20.04\n\nRUN apt install jq yq helm kustomize -y\n\nADD get-parameters.sh /home/argocd/get-parameters.sh\n```\n```\n\n### Example 3: simple Helm CMP\n```yaml\nThis example demonstrates how the Helm parameters interface could be achieved with a parameterized CMP.\n\n![Helm parameters interface](https://argo-cd.readthedocs.io/en/stable/proposals/images/helm-parameters.png)\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: simple-helm-cmp\nspec:\n  version: v1.0\n  generate:\n    command: [/home/argocd/generate.sh]\n  discover:\n    fileName: \"./values.yaml\"\n  parameters:\n    static:\n    - name: values-files\n      title: VALUES FILES\n      collectionType: array\n    dynamic:\n      command: [/home/argocd/get-parameters.sh]\n```\n\n**generate.sh**\n\n```\n# Convert the values-files parameter value to a newline-delimited list of Helm CLI arguments.\nARGUMENTS=$(echo \"$ARGOCD_APP_PARAMETERS\" | jq -r '.[] | select(.name == \"values-files\").array | .[] | \"--values=\" + .')\n# Convert JSON parameters to comma-delimited k=v pairs.\nPARAMETERS=$(echo \"$ARGOCD_APP_PARAMETERS\" | jq -r '.[] | select(.name == \"helm-parameters\").map | to_entries | map(\"\\(.key)=\\(.value)\") | .[] | \"--set=\" + .')\n# Add parameters to the arguments variable.\nARGUMENTS=\"$ARGUMENTS\\n$PARAMETERS\"\necho \"$ARGUMENTS\" | xargs helm template .\n```\n\nThe manifest generation command will be\n`helm template . --values=a.yaml --values=b.yaml --set=image.repo=alpine --set=image.tag=latest`\nfor the following value of `$ARGOCD_APP_PARAMETERS`:\n\n```\n[\\\n  {\\\n    \"name\": \"values-files\",\\\n    \"array\": [\"a.yaml\", \"b.yaml\"]\\\n  },\\\n  {\\\n    \"name\": \"helm-parameters\",\\\n    \"map\": {\\\n      \"image.repo\": \"alpine\",\\\n      \"image.tag\": \"latest\"\\\n    }\\\n  }\\\n]\n```\n\n**get-parameters.sh**\n\n```\nyq e -o=p values.yaml | jq --slurp --raw-input '\n  [{\\\n    name: \"helm-parameters\",\\\n    title: \"Helm Parameters\",\\\n    collectionType: \"map\",\\\n    map: split(\"\\n\") | map(capture(\"(?<key>.*) = (?<value>.*)\") | from_entries)\\\n  }]'\n```\n\nConsider a very simple values.yaml:\n\n```\nimage:\n  repo: quay.io/argoproj/argocd\n  tag: latest\n```\n\nThe script above will produce the following parameters announcement:\n\n```\n[\\\n  {\\\n    \"name\": \"helm-parameters\",\\\n    \"title\": \"Helm Parameters\",\\\n    \"collectionType\": \"map\",\\\n    \"map\": {\\\n      \"image.repo\": \"quay.io/argoproj/argocd\",\\\n      \"image.tag\": \"latest\"\\\n    }\\\n  }]\\\n``\n```\n\n### Example 4: simple Kustomize CMP\n```yaml\n```\napiVersion: argoproj.io/v1alpha1\nkind: ConfigManagementPlugin\nmetadata:\n  name: kustomize\nspec:\n  parameters:\n    static:\n    - name: version\n      title: VERSION\n      string: v4.3.0\n    - name: name-prefix\n      title: NAME PREFIX\n    - name: name-suffix\n      title: NAME SUFFIX\n    dynamic:\n      command: [\"generate-params.sh\"]\n```\n\n`parameters.dynamic.command` will produce something like this:\n\n```\n[\\\n  {\\\n    \"name\": \"images\",\\\n    \"title\": \"Image Overrides\",\\\n    \"collectionType\": \"map\",\\\n    \"map\": {\\\n      \"quay.io/argoproj/argocd\": \"docker.example.com/proxy/argoproj/argocd\",\\\n      \"ubuntu:latest\": \"docker.example.com/proxy/argoproj/argocd\"\\\n    }\\\n  }]\\\n``\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/parameterized-config-management-plugins", "title": "Parameterized Config Management Plugins", "description": "Config Management Plugin (CMP) parameterization defines a way for plugins to \"announce\" and then consume acceptable parameters for an Application. Announcing parameters allows CMPs to provide a UI experience similar to native config management tools (Helm, Kustomize, etc.).", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:58:51", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/proposals/parameterized-config-management-plugins/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "Parameterized-Config-Management-Plugins - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "1020ea2b-41a6-4ca4-a8dc-cbf042afe1e4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/parameterized-config-management-plugins", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/parameterized-config-management-plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Parameterized Config Management Plugins\"?\n\nAssistant: Here are the recommended best practices:\n\n• Our examples will have shell scripts, and users will write shell scripts. Scripts are difficult to write securely - this is especially true when the scripts are embedded in YAML, and developers don't get helpful warnings from the IDE.\n• Our docs should emphasize the importance of handling input carefully in any scripts (or other programs) which will be executed as part of CMPs.\n• The docs should also warn against embedding large scripts in YAML and recommend plugin authors instead build custom images with the script invoked as its own file.\n• The docs should also recommend taking advantage of IDE plugins as well as image and source code scanning tools in CI/CD.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/parameterized-config-management-plugins", "title": "Parameterized Config Management Plugins", "description": "Config Management Plugin (CMP) parameterization defines a way for plugins to \"announce\" and then consume acceptable parameters for an Application. Announcing parameters allows CMPs to provide a UI experience similar to native config management tools (Helm, Kustomize, etc.).", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:58:51", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/proposals/parameterized-config-management-plugins/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "Parameterized-Config-Management-Plugins - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "1020ea2b-41a6-4ca4-a8dc-cbf042afe1e4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/parameterized-config-management-plugins", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/parameterized-config-management-plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Neat Enhancement Idea\"?\n\nAssistant: Support project scoped Repositories and Clusters to enable self-service end-users onboarding.\n\nHere's a detailed explanation:\n\n\n## Summary\nThe Argo CD has two type of users:\n\n- Administrators who configure the Argo CD and manage the Argo CD projects.\n- Developers who use Argo CD to manage resources in the Kubernetes clusters.\n\nThese two roles enable sharing on the Argo CD instance in a multi-tenant environment. Typically the developer requests a new project from an administrator. The administrator creates the project, defines which repositories can and clusters can be used within the project which concludes the onboarding.\n\nThe problem is that list of repositories and clusters are often not known during the onboarding process. Developers get it later and have to again contact an administrator, somehow share repo/cluster credentials. This back and forth process takes time and creates friction.\n\nWe want to streamline the process of adding repositories and clusters to the project and make it self-service. The Argo CD admins should be able to optionally enable self onboarding of repositories/clusters for some projects.\n\n## Motivation\nAs long as the developer has the required credentials he/she should be able to add repository/cluster to the project without involving the administrator. To archive it, we are proposing to introduce project scoped repositories and clusters.\n\n## Goals\nThe goals of project scoped repositories and clusters are:\n\n#### Allow Self-Registering Repositories/Clusters in a Project\nDeveloper should be able to add a repository/cluster into the project without asking help from Argo CD administrator.\n\n## Non-Goals\nThe repositories and clusters that can be used across multiple projects still have to be managed by Argo CD administrator.\n\n## Proposal\n#### Project scoped repository/cluster\nThe proposal is to introduce project scoped clusters and repositories that can be managed by a developer who has access to the project.\nThe only difference of project scoped repository/cluster is that it has `project` field with the project name it belongs to. Both repositories and clusters are stored as Kubernetes Secrets, so a new field could be stored as a Secret data key:\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-example-apps\n  labels:\n    argocd.argoproj.io/secret-type: repository\ntype: Opaque\nstringData:\n  project: my-project1                                     # new project field\n  name: argocd-example-apps\n  url: https://github.com/argoproj/argocd-example-apps.git\n  username: ****\n  password: ****\n```\n\n- The project scoped repository/cluster is automatically allowed in the project.\nThis enables developers to allow new cluster/repository without modifying the project.\n- The project scoped repository/cluster still can be used in other project but it has to be allowed by admin (as normal repository/cluster).\n- If another team wants to add the same repository/cluster into a different project they would have to ask admin.\n\n## Project RBAC Changes\nThe organization still might want to enforce certain rules so developers won't get permission to add a project-specific repository/cluster by default. The administrator might use RBAC to control access to the project scoped repositories cluster. The access to project scope actions will be checked using `<projectName>/<name>` pattern. For example, to allow users to add project scoped repositories admin would have to add the following RBAC rules:\n\n```\np, proj:my-project:admin, repositories, create, my-project/*, allow\np, proj:my-project:admin, repositories, delete, my-project/*, allow\np, proj:my-project:admin, repositories, update, my-project/*, allow\n```\n\nThis provides extra flexibility so that admin can have stricter rules. e.g.: \n\n```\np, proj:my-project:admin, repositories, update, my-project/\"https://github.example.com/*\", allow\n```\n\n\n## UI/CLI Changes\nBoth User interface and CLI should get ability to optionally specify project. If project is specified than cluster/repository is considered project scoped:\n\n```\nargocd repo add --name stable https://charts.helm.sh/stable --type helm --project my-project\n```\n\n## Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n## Use case 1\nAs a developer, I would like to register credentials of a Git repository I own so I can deploy manifests stored in that repository.\n\n## Use case 2\nAs a developer, I would like to register credentials of a Kubernetes cluster so I can manage resources in that cluster.\n\n## Implementation Details/Notes/Constraints\nAs of v2.0.1 Argo CD stores Repository non-sensitive metadata in `argocd-cm` ConfigMap. This is going to change in https://github.com/argoproj/argo-cd/issues/5436.\nSo we would have to wait for #5436 implementation.\n\n## Detailed examples\n\n\n## Security Considerations\nThe security considerations are explained in `Project RBAC Changes` section.\n\n## Risks and Mitigations\n#### Developers Might Overload Argo CD\nThe developers are typically not responsible for Argo CD health and don't have access to Argo CD metrics. So adding too many clusters might overload Argo CD.\nTwo improvements are proposed to mitigate that risk:\n\n**Improved Cluster Metrics**\n\nThe existing metrics should be improved so that administrators could quickly discover if the project \"has\" too many clusters and easily discover who added the cluster:\n\n- Add `project` tag to existing cluster metrics: [clustercollector.go](https://github.com/argoproj/argo-cd/blob/bfd0b155eff4212e9354a6958e329dbd64f9a69a/controller/metrics/clustercollector.go#L20).\n- Document how administrator can leverage metrics to configure limits per project and get notifications when the limit is exceeded.\n- Add `owner` field to the cluster (and repository for consistency ) and use it to store username of the user who added cluster/repository. The administrator can use the `owner` field to contact the person who added the cluster and exceeded the limit.\n\n**Project Sharding**\n\nIt should be possible to automatically assign project scoped clusters to the specific clusters shard. This way admin can isolate large projects from each other and limit the blast radius.\n\n## Upgrade / Downgrade Strategy\nIn case of rollback to the previous version, the project scoped clusters/repositories will be treated as normal (non-scoped) clusters/repositories.\nSo it is safe to rollback and then roll forward.\n\n## Open Issues\nIf the same cluster or repository required in multiple projects that there is no way to configure it without involving Argo CD admin. The end-user would still have to reach out to the administrator and request Argo CD config changes.\n\n## Alternatives\nDon't introduce first-class support for this feature and instead create optional CRD that manages clusters and repositories.\nIn this case, the first-class support seems like a very natural fit into the existing design.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/project-repos-and-clusters", "title": "Neat Enhancement Idea", "description": "Support project scoped Repositories and Clusters to enable self-service end-users onboarding.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-02-28 01:59:19", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "Project repos and clusters - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/project-repos-and-clusters/", "scrapeId": "f29e4223-679a-4d10-9a14-6f7d061ba5a3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/project-repos-and-clusters", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/project-repos-and-clusters/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Neat Enhancement Idea\"?\n\nAssistant: Here are some code examples:\n\n### Project Scoped Repository/Cluster Example\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-example-apps\n  labels:\n    argocd.argoproj.io/secret-type: repository\ntype: Opaque\nstringData:\n  project: my-project1                                     # new project field\n  name: argocd-example-apps\n  url: https://github.com/argoproj/argocd-example-apps.git\n  username: ****\n  password: ****\n```\n\n### RBAC Rules Example\n```yaml\np, proj:my-project:admin, repositories, create, my-project/*, allow\np, proj:my-project:admin, repositories, delete, my-project/*, allow\np, proj:my-project:admin, repositories, update, my-project/*, allow\n```\n\n### UI/CLI Command Example\n```yaml\nargocd repo add --name stable https://charts.helm.sh/stable --type helm --project my-project\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/project-repos-and-clusters", "title": "Neat Enhancement Idea", "description": "Support project scoped Repositories and Clusters to enable self-service end-users onboarding.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-02-28 01:59:19", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "Project repos and clusters - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/project-repos-and-clusters/", "scrapeId": "f29e4223-679a-4d10-9a14-6f7d061ba5a3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/project-repos-and-clusters", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/project-repos-and-clusters/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Neat Enhancement Idea\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that developers have the required credentials before allowing self-service onboarding of repositories and clusters.\n• Monitor cluster metrics to prevent overload and manage project limits effectively.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/project-repos-and-clusters", "title": "Neat Enhancement Idea", "description": "Support project scoped Repositories and Clusters to enable self-service end-users onboarding.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-02-28 01:59:19", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "Project repos and clusters - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/project-repos-and-clusters/", "scrapeId": "f29e4223-679a-4d10-9a14-6f7d061ba5a3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/project-repos-and-clusters", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/project-repos-and-clusters/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Project scoped repository credential enhancements\"?\n\nAssistant: This proposal allows the possibility to have multiple repository credentials which share the same URL, addressing the limitations of the current Argo CD API.\n\nHere's a detailed explanation:\n\n\n## Summary\nThis is to allow the possibility to have multiple repository credentials which share the same URL. Currently, multiple repository credentials sharing the same URL is disallowed by the Argo CD API.\n\n## Motivation\nThis is to allow the possibility to have multiple repository credentials which share the same URL. Currently, multiple repository credentials sharing the same URL is disallowed by the Argo CD API. If the credentials are added directly to the argocd namespace, we \"get around\" argocd-server returning an error, but this still does not work since the first secret that matches a repository URL is the one that gets returned, and the order is also undefined.\n\nThe reason why we want this is due to the fact that in a multi-tenant environment, multiple teams may want to independently use the same repositories without needing to ask an Argo CD admin to add the repository for them, and then add the necessary RBAC in the relevant AppProjects to prevent other teams from having access to the repository credentials. In other words, this will enable more self-service capabilities for dev teams.\n\n## Goals\nThe goal of this proposal is to allow multiple app projects to have the ability to have separate repository credentials which happen to share the same URL.\n\n## Non-Goals\n- Having multiple repository secrets sharing the same URL within the same AppProject.\n- Allowing a single repository credential to be used in multiple AppProjects.\n- Preventing non project-scoped repository credentials from being used by an Application.\n- Extending this to repository credential templates.\n\n## Proposal\nThere are a few parts to this proposal.\n\nWe need to distinguish between a user accessing a repository via the API/CLI/UI and an application retrieving repository credentials. In the first case, we need to maintain backwards compatibility for API consumers. The current behaviour is that the API will return the first repository found matching the URL given. Since we now want to allow the same URL to potentially be in multiple projects, we need to do some minor changes.\n\n- If there is only one matching repository with the same URL, and assuming the user is allowed to access it and there is no app project given as a parameter, use that repository ignoring any project-scope. This is in line with the current behavior.\n- If there is only one matching repository with the same URL, and assuming the user is allowed to access it and there is an app project given as a parameter, use that repository only if it also matches the app project given.\n- If there are multiple repositories with the same URL and assuming the user is allowed to access them, then setting a project parameter would be required, since there would otherwise be no way to determine which of the credentials a user wants to access. This is not a breaking change since this adds functionality which has previously not existed.\n\nThis change would apply when we retrieve a single repository credential, or when we delete a repository credential. For listing repository credentials, nothing changes - the logic would be the same as today.\n\nIn the case of selecting a suitable repository for an application, the logic would differ slightly. What instead happens is that the lookup would first attempt to find the first repository secret which matches the project and repository URL of the requesting application. If there are no credentials which match the requested project, it will fall back to returning the first unscoped credential, i.e, the first credential with an empty project parameter.\n\nWhen it comes to mutating a repository credential we need to strictly match the project to which the repository belongs, since there would otherwise be a risk of changing (inadvertently or otherwise) a credential not belonging to the correct project. This can be done without any breaking changes.\n\nThe second part is specifically for when we imperatively create repository secrets. Currently, when we create a repository secret in the UI/CLI, a suffix gets generated which is a hash of the repository URL. This mechanism will be extended to also hash the repository project.\n\nOn the API server side no major changes are anticipated to the public API. The only change we need to do from the API perspective is to add an appProject parameter when retrieving or deleting a repository credential. To preserve backwards compatibility this option is optional and would only be a required parameter if multiple repository credentials are found for the same URL.\n\nFinally, we need to change the way the cache keys for the repository paths are generated in the repo-server.\n\n## Security Considerations\n- Special care needs to be taken in order not to inadvertently expose repository credentials belonging to other AppProjects. Access to repositories are covered by RBAC checks on the project, so we should be good.\n- We need to change how the cache keys for the checked out repository paths are generated on the repo-server side, the reason being that we do not want separate AppProjects sharing the same paths of sources which have been downloaded. With this change there is a potential for multiple AppProjects to have rendered/downloaded different manifests due to having different sets of credentials, so to mitigate that we need to check out a separate copy of the repository per AppProject.\n\n## Risks and Mitigations\n\n\n## Upgrade / Downgrade Strategy\nWhen upgrading no changes need to happen - the repository credentials will work as before. On the other hand, when downgrading to an older version we need to consider that the existing order in which multiple credentials with the same URL gets returned is undefined. This means that deleting the credentials before downgrading to an older version would be advisable.\n\n## Drawbacks\n- It will be more difficult to reason about how a specific repository credential gets selected. There could be scenarios where a repository has both a global repository credential and a scoped credential for the project to which the application belongs.\n- There will be more secrets proliferating in the argocd namespace. This has the potential to increase maintenance burden to keeping said secrets safe, and it also makes it harder to have a bird's eye view from an Argo CD admin's perspective.\n- Depending on the number of projects making use of distinct credentials for the same repository URL, loading the correct credentials from the repository secrets has the potential to scale linearly with the number of app projects (in the worst case scenario we would need to loop through all the credentials before finding the correct credential to load). This is likely a non-issue in practice.\n- Also depending on the number of projects making use of distinct credentials for the same repository URL, this will imply that for each AppProject sharing the same repository URL, a separate copy of the repository will be checked out. This has potential implications in terms of memory consumption, sync times, CPU load times etc. This is something of which an Argo CD admin will need to be mindful.\n\n## Alternatives\nTo keep the existing behavior of having a single repository credential shared by multiple AppProjects. It would be up to the Argo CD admins to ensure that a specific repository credential cannot be used by unauthorized parties.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/project-scoped-repository-enhancements", "title": "Project scoped repository credential enhancements", "description": "This proposal allows the possibility to have multiple repository credentials which share the same URL, addressing the limitations of the current Argo CD API.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-02-28 01:59:48", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Project scoped repository credential enhancements - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/proposals/project-scoped-repository-enhancements/", "scrapeId": "a9c60e31-e956-4e36-9c93-2826e04873a5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/project-scoped-repository-enhancements", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/project-scoped-repository-enhancements/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Reverse-Proxy Extensions support for Argo CD\"?\n\nAssistant: Enable UI extensions to use a backend service.\n\nHere's a detailed explanation:\n\n\n## Summary\nArgo CD currently supports the creation of UI extensions allowing developers to define the visual content of the \"more\" tab inside a specific resource. Developers are able to access the resource state to build the UI. However, currently it isn't possible to use a backend service to provide additional functionality to extensions. This proposal defines a new reverse proxy feature in Argo CD, allowing developers to create a backend service that can be used in UI extensions. Extensions backend code will live outside Argo CD main repository.\n\n## Motivation\nThe initiative to implement the anomaly detection capability in Argo CD highlighted the need to improve the existing UI extensions feature. The new capability will required the UI to have access to data that isn't available as part of Application's owned resources. It is necessary to access an API defined by the extension's development team so the proper information can be displayed.\n\n## Goals\nThe following goals are desired but not necessarily all must be implemented in a given Argo CD release:\n\n#### [G-1] Argo CD (API Server) must have low performance impact when running extensions\nArgo CD API server is a critical component as it serves all APIs used by the CLI as well as the UI. The Argo CD team has no controll over what is going to be executed in extension's backend service. Thus it is important that the reverse proxy implementation to cause the lowest possible impact in the API server while processing high latency requests.\n\nPossible solutions:\n- Implement a rate limit layer to protect Argo CD API server\n- Implement configurable different types of timeouts (idle connection, duration, etc) between Argo CD API server and backend services.\n- Implement the reverse proxy as a separate server/pod (needs discussion).\n\n#### [G-2] Argo CD admins should be able to define rbacs to define which users can invoke specific extensions\nArgo CD Admins must be able to define which extensions are allowed to be executed by the logged in user. This should be fine grained by Argo CD project like the current rbac implementation.\n\n#### [G-3] Argo CD deployment should be independent from backend services\nExtension developers should be able to deploy their backend services independently from Argo CD. An extension can evolve their internal API and deploying a new version shouldn't require Argo CD to be updated or restarted.\n\n#### [G-4] Enhance the current Extensions framework to configure backend services\n_Not in the first release_\nArgo CD extensions is an argoproj-labs project that supports loading extensions in runtime. Currently the project is implementing a controller that defines and reconciles the custom resource ArgoCDExtension. This CRD should be enhanced to provide the ability to define backend services that will be used by the extension. Once configured UI can send requests to API server in a specific endpoint. API server will act as a reverse proxy receiving the request from the UI and routing to the appropriate backend service.\n\nExample:\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCDExtension\nmetadata:\n  name: my-cool-extention\n  finalizers:\n    - extensions-finalizer.argocd.argoproj.io\nspec:\n  sources:\n    - git:\n        url: https://github.com/some-org/my-cool-extension.git\n  backend:\n    serviceName: some-backend-svc\n    endpoint: /some-backend\n```\n**Note**: While this is a nice-to-have, it won't be part of the first proxy extension version. This would need to be considered if Argo CD extensions eventually get traction.\n\n#### [G-5] Setup multiple backend services for the same extension\nIn case of one Argo CD instance managing applications in multiple clusters, it will be necessary to configure backend service URLs per cluster for the same extension. This should be an optional configuration. If only one URL is configured, that one should be used for all clusters.\n\n#### [G-6] Provide safe communication channel between Argo CD API server and extension backend\nArgo CD API server should provide configuration for establishing a safe communication channel with the extension backend. This can be achieved similarly to how Kubernetes API Server does to authenticate with aggregated servers by using certificates.\n\n## Non-Goals\nIt isn't in the scope of this proposal to specify commands in the Argo CD CLI. This proposal covers the reverse-proxy extension spec that will be used by Argo CD UI.\n\n## Proposal\n### Use cases\nThe following use cases should be implemented for the conclusion of this proposal:\n\n#### [UC-1]: As an Argo CD admin, I want to configure a backend services so it can be used by my UI extension\nDefine a new section in the Argo CD configmap (argocd-cm.yaml) allowing admins to register and configure new extensions. All enabled extensions backend will be available to be invoked by the Argo CD UI under the following API base path:\n\n`<argocd-host>/api/v1/extensions/<extension-name>`\n\nWith the configuration below, the expected behavior is explained in the following examples:\n```yaml\nextension.config: |\n  extensions:\n    - name: some-extension\n      enabled: true\n      backend:\n        idleConnTimeout: 10s\n        services:\n          - url: http://extension-name.com:8080\n```\n- **Example 1**:\nArgo CD API server acts as a reverse-proxy forwarding http requests as follows:\n```\n   ┌────────────┐\n   │ Argo CD UI │\n   └──────┬─────┘\n          │\n          │ GET http://argo.com/api/v1/extensions/some-extension\n          │\n          ▼\n ┌──────────────────┐\n │Argo CD API Server│\n └────────┬─────────┘\n          │\n          │ GET http://extension-name.com:8080\n          │\n          ▼\n  ┌───────────────┐\n  │Backend Service│\n  └───────────────┘\n```\n- **Example 2**:\nIf a backend provides an API under the `/apiv1/metrics` endpoint, Argo CD should be able to invoke it such as:\n```\n   ┌────────────┐\n   │ Argo CD UI │\n   └──────┬─────┘\n          │\n          │ GET http://argo.com/api/v1/extensions/some-extension/apiv1/metrics/123\n          │\n          ▼\n ┌──────────────────┐\n │Argo CD API Server│\n └────────┬─────────┘\n          │\n          │ GET http://extension-name.com:8080/apiv1/metrics/123\n          │\n          ▼\n  ┌───────────────┐\n  │Backend Service│\n  └───────────────┘\n```\n- **Example 3**:\nIn this use-case we have one Argo CD instance connected with different clusters. There is a requirement defining that every extension instance needs to be deployed in each of the target clusters. To address this use-case there is a need to configure multiple backend URLs for the same extension (one for each cluster). For doing so, the following configuration should be possible:\n```yaml\nextension.config: |\n  extensions:\n    - name: some-extension\n      enabled: true\n      backend:\n        idleConnTimeout: 10s\n        services:\n          - url: http://extension-name.com:8080\n            clusterName: kubernetes.local\n          - url: https://extension-name.ppd.cluster.k8s.local:8080\n            clusterName: admins@ppd.cluster.k8s.local\n```\nNote that there is an URL configuration per cluster name. The cluster name is extracted from the Argo CD cluster secret and must match the field `data.name`. In this case the UI must send the header `Argocd-Application-Name` with the full qualified application name (`<namespace>/<application-name>`).\n\nExample:\n`Argocd-Application-Name: preprod/some-application`\n\nWith this information, API Server can check in which cluster it should get the backend URL from. This will be done by inspecting the Application destination configuration to find the proper cluster name.\n\nThe diagram below shows how Argo CD UI could send the request with the additional header to get the proxy forwarding it to the proper cluster:\n```\n   ┌────────────┐\n   │ Argo CD UI │\n   └──────┬─────┘\n          │\n          │ GET http://argo.com/api/v1/extensions/some-extension\n          │ HEADER: \"Argocd-Application-Name: default/ppd-application\"\n          │\n          ▼\n ┌──────────────────┐\n │Argo CD API Server│\n └────────┬─────────┘\n          │\n          │ GET https://extension-name.ppd.cluster.k8s.local:8080\n          │\n          ▼\n  ┌───────────────┐\n  │Backend Service│\n  └───────────────┘\n```\n##### Considerations\n- The `idleConnTimeout` can be used to avoid accumulating too many goroutines waiting slow for extensions. In this case a proper timeout error (408) should be returned to the browser.\n- Scheme, http verb and request body are forwarded as it is received by the API server to the backend service.\n- Headers will be filtered and not forwarded as it is received in Argo CD API server. Sensitive headers will be removed (e.g. `Cookie`).\n- A new header is added in the forwared request ( `X-Forwarded-Host`) to allow ssl redirection.\n- This proposal doesn't specify how backends should implement authz or authn. This topic could be discussed as a future enhancement to the proxy extension feature in Argo CD.\n\n## Security Considerations\n- Argo CD API Server must apply **authn** and **authz** for all incoming extensions requests\n- Argo CD must authorize requests coming from UI and check that the authenticated user has access to invoke a specific URL belonging to an extension.\n\n## Risks and Mitigations\n\n\n## Upgrade / Downgrade\n\n\n## Drawbacks\n- Slight increase in Argo CD code base complexity.\n- Increased security risk.\n- Impact of extensions on overall Argo CD performance (mitigated by rate limiting + idle conn timeout).\n\n## Open Questions\n1. What are the possible actions that can be provided to extensions RBAC?\nA. This proposal does not define additional RBAC actions for extensions. Currently the only possible value is `*` which will allow admins to enable or disable certain extensions per project. If there is a new requirement to support additional actions for extensions to limit just specific HTTP verbs for example, an enhancement can be created to extend this functionality. If this requirement becomes necessary, it won't be a breaking change as it will be more restrictive.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/proxy-extensions", "title": "Reverse-Proxy Extensions support for Argo CD", "description": "Enable UI extensions to use a backend service.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 02:00:23", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/proposals/proxy-extensions/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Reverse Proxy Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "85c8e1ca-2450-4a8c-9cc5-e0ecd07bf7e8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/proxy-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/proxy-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Reverse-Proxy Extensions support for Argo CD\"?\n\nAssistant: Here are some code examples:\n\n### ArgoCDExtension Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ArgoCDExtension\nmetadata:\n  name: my-cool-extention\n  finalizers:\n    - extensions-finalizer.argocd.argoproj.io\nspec:\n  sources:\n    - git:\n        url: https://github.com/some-org/my-cool-extension.git\n  backend:\n    serviceName: some-backend-svc\n    endpoint: /some-backend\n\n```\n\n### Extension Configuration Example\n```yaml\nextension.config: |\n  extensions:\n    - name: some-extension\n      enabled: true\n      backend:\n        idleConnTimeout: 10s\n        services:\n          - url: http://extension-name.com:8080\n\n```\n\n### Multiple Backend Services Configuration Example\n```yaml\nextension.config: |\n  extensions:\n    - name: some-extension\n      enabled: true\n      backend:\n        idleConnTimeout: 10s\n        services:\n          - url: http://extension-name.com:8080\n            clusterName: kubernetes.local\n          - url: https://extension-name.ppd.cluster.k8s.local:8080\n            clusterName: admins@ppd.cluster.k8s.local\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/proxy-extensions", "title": "Reverse-Proxy Extensions support for Argo CD", "description": "Enable UI extensions to use a backend service.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 02:00:23", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/proposals/proxy-extensions/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Reverse Proxy Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "85c8e1ca-2450-4a8c-9cc5-e0ecd07bf7e8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/proxy-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/proxy-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Reverse-Proxy Extensions support for Argo CD\"?\n\nAssistant: Here are the recommended best practices:\n\n• Implement a rate limit layer to protect Argo CD API server.\n• Implement configurable different types of timeouts (idle connection, duration, etc) between Argo CD API server and backend services.\n• Implement the reverse proxy as a separate server/pod.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/proxy-extensions", "title": "Reverse-Proxy Extensions support for Argo CD", "description": "Enable UI extensions to use a backend service.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 02:00:23", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/proposals/proxy-extensions/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Reverse Proxy Extensions - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "85c8e1ca-2450-4a8c-9cc5-e0ecd07bf7e8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/proxy-extensions", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/proxy-extensions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Neat Enhancement Idea\"?\n\nAssistant: Rebalance clusters across shards automatically on changes to the number of available shards.\n\nHere's a detailed explanation:\n\n\n## Open Questions\nThis is where to call out areas of the design that require closure before deciding to implement the design.\n\n## Summary\nCurrent implementation of sharding uses StatefulSet for the application controller and the goal is to move towards an agile stateless Deployment. Although the application controller does not have any state to preserve, stateful sets were used to get predictable hostnames and the serial number in the hostname was used to get the shard id of a particular instance. Using StatefulSet has the following limitations:\n\nAny change done to the StatefulSet would cause all the child pods to restart in a serial fashion. This makes scaling up/down of the application controller slow as even existing healthy instances need to be restarted as well.\nScaling up or down happens one at a time. If there are 10 instances and if scaled to 20, then the scaling happens one at a time, causing considerable delay for the scaling to complete.\n\nEach shard replica knows about the total number of available shards by evaluating the environment variable ARGOCD_CONTROLLER_REPLICAS, which needs to be kept up-to-date with the actual number of available replicas (shards). If the number of replicas does not equal the number set in ARGOCD_CONTROLLER_REPLICAS, sharding will not work as intended, leading to both, unused and overused replicas. As this environment variable is set on the StatefulSet and propagated to the pods, all the pods in the StatefulSet need to be restarted in order to pick up the new number of total shards.\n\nThe current sharding mechanism relies on predictable pod names for the application controller to determine which shard a given replica should impersonate, e.g. the first replica of the StatefulSet (argocd-application-controller-0) will be the first shard, the second replica (argocd-application-controller-1) will be the second and so forth.\n\n## Motivation\nIf the number of available shards is changed (i.e. one or more application controller replicas are added or removed), all pods in the statefulset have to be restarted so that the managed clusters are redistributed over the available shards. Additionally, the application controller workload is deployed as a StatefulSet, which is not intended for dynamic horizontal scaling.\n\n## Goals\n- Improve the application controller’s ability to scale horizontally with a growing number of clusters\n- Remove the need to run application controller as a StatefulSet workload\n\n## Non-Goals\n- Expand the scope of sharding to other assets than clusters (e.g. applications)\n- Make a single shard highly available (e.g. by having 2 or more replicas by shard)\n\n## Proposal\n### Why use Deployments instead of StatefulSet:\nStatefulSet is a Kubernetes resource that manages multiple pods that have unique identities, and are not interchangeable (unlike a regular Kubernetes Deployment, in which pods are stateless and can be destroyed and recreated as often as needed).\n\nStateless applications scale horizontally very easily as compared to stateful applications due to the fact that infrastructure allows adding as many computing resources as needed. Changing the StatefulSet to Deployments for Application Controller will allow us to dynamically scale the replicas without restarting existing application controller pods. Also, the shard to application controller assignment would help in making sure the shards are scaled and distributed across the available healthy replicas of application controllers.\n\n### Distributing shards among Application Controllers:\nInorder to be able to accurately know which shards are being managed by which application-controller, especially in scenarios of redistribution of load, addition/removal of application controller, etc., we would need to have a mechanism to assign clusters to the shards.\n\nIn most scenarios, the service account used by the application controller has read access to all the resources in the cluster. Thus, instead of setting the environment variable ARGOCD_CONTROLLER_REPLICAS representing the number of replicas, the number of replicas can be read directly from the number of healthy replicas of the application controller deployment.\n\nFor other scenarios, some users install controller with only argocd-application-controller-role role and use it to manage remote clusters only. In this case, we would need to update the argocd-application-controller-role role and allow controller inspect it's own deployment and find out the number of replicas.\n\nThe application controllers will claim one of the available shards by checking which shard is not present in the ConfigMap or is assigned to an unhealthy controller. We will store the assignment list of Application Controller to Shard in ConfigMap. The mapping of Application Controller to Shard will store the below information:\n- Name/Id of the shard\n- Name of the Application Controller currently managing the shard\n- Last time of successful update to ConfigMap (Heartbeat)\n\nThe mapping will be updated in ConfigMap every X (heartbeat interval) seconds with the help of heartbeat process performed by every application controller. If the heartbeat was not performed by the application controller for a certain time, the application controller is assumed to be unhealthy and the number of healthy/managed shards would be reduced, that is, the number of healthy replicas of the application controller deployment changes.\n\nThe heartbeat interval will be a configurable parameter initialized while setting up the application controller. This way, users will be able to control the frequency at which they want the heartbeat process to take place.\n\nAs part of the readiness probe, we will also add a check whether application controller was able to claim a shard successfully or not. If the shard claim failed, the readiness probe will fail marking the controller as unhealthy. Anytime the number of healthy replicas of application controllers is different from the number of application controllers to shard mappings, we would re-distribute the clusters among the healthy replicas again. We can summarize the above statement using the below formula:\n\n```\nNumber of Replicas ≠ Count of {Application Controller, Shard} mapping\n```\n\nThe below logic can be used to perform application controller to shard assignment:\n1) If a new application controller is added, that is, a new shard is added, we would perform the re-distribution of clusters among the shards with the existing sharding algorithm being used.\n2) In scenarios when one of the application controllers is identified to be unhealthy, we will not trigger the re-ditribution of clusters across shards. The new instance of the application controller will claim this unassigned shard and start managing the shard.\n\nHow will this work?\n\\* The application controller will query the ConfigMap for the status of all the application controllers and last updated heartbeat timestamps.\n\\* It will check if any application controller is flagged as Unhealthy or has not updated its status in ConfigMap during the heartbeat process for a certain period of time.\n\\* If the status for an application controller was already flagged as Unhealthy, we will not re-trigger the redistribution of clusters across healthy shards. The new application controller will come online and try to claim this unassigned shard.\n\\* If the status is not flagged and an application controller has not updated the last active timestamp in a long time, then we mark the Application Controller as Unhealthy and unassign the shard in the ConfigMap.\n\n_Note:_ We will continue to use the cluster to shard assignment approach being used today.\n\n## Pros\n- Every Application Controller would be able to take action on finding the distribution of load.\n- Every Application Controller will monitor the status of Unhealthy shard and would be able to take action or flag for action.\n\n## Cons\n- ~~Possibility of race conditions while flagging the shard as Unhealthy during the heartbeat process. Although this can be handled using the [distributed locks](https://redis.io/docs/manual/patterns/distributed-locks/) in Redis.~~ As we are using ConfigMap, this Con get's removed. Kubernetes would give conflict errors in case multiple edits are tried on the ConfigMap at the same time. We can leverage this error messages to avoid race conditions.\n\n- ~~In scenarios when Redis becomes unavailable, the heartbeat mechanism will pause working till the redis comes back online again. This will also pause the dynamic redistribution of clusters till Redis comes back online. The redistribution of clusters will be triggered again when Redis comes back online.~~ We would not see this issue by using ConfigMap instead of Redis.\n\n## Security Considerations\n- This would be a breaking change of converting StatefulSets to Deployments. Any automation done by customers which is based on the assumption that the controller is modelled as a StatefulSet would break with this change.\n\n- ~~We would rely on Redis to store the current Application Controller to Shard mapping. In case the Redis is not available, it would not affect the regular working of ArgoCD. The dynamic distribution of clusters among healthy shards would stop working with the heartbeat process till Redis comes back up online, but the application controllers will continue managing their workloads.~~ We would not rely on Redis by using ConfigMap avoiding this issue.\n\n## Upgrade / Downgrade Strategy\n- Working ArgoCD itself should not affected. An initial restart of all the application controller pods is expected when we switch from StatefulSet to Deployment or vice-versa.\n\n- There would be some initial delays in the reconciliation process during the transistion from StatefulSet to Deployment. If someone is not using sharding at all, they should not face any issues.\n\n## Alternatives\nAn alternative approach would be to use Leader Election strategy. By implementing leader election, one of the healthy application controllers will be appointed as leader. The leader controller will be responsible for assigning clusters to the shards and balancing load across the shards.\n\nThe leader controller will continue sending heartbeats to every replica controller and monitor the health of the controllers. In case one of the replica controllers crashes, the leader will distribute the shards managed by the unhealthy replica among the healthy replicas.\n\nIf the leader goes down, the leader election process will be initiated among the healthy candidates and one of the candidates will be marked as leader who will perform the heartbeat process and redistribution of resources.\n\nOne of the possible examples for selecting the leader is by checking the load handled by each healthy candidate and selecting the candidate which has the least load / number of resources running on it.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/rebalancing-clusters-across-shards-dynamically", "title": "Neat Enhancement Idea", "description": "Rebalance clusters across shards automatically on changes to the number of available shards.", "has_code_examples": false, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 02:00:55", "type": "overview", "page_metadata": {"title": "Neat-enhancement-idea - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/proposals/rebalancing-clusters-across-shards-dynamically/", "readthedocs-project-slug": "argo-cd", "scrapeId": "e86db23f-dc6d-4f99-9b04-8690e9145cc7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/rebalancing-clusters-across-shards-dynamically", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/rebalancing-clusters-across-shards-dynamically/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Neat Enhancement Idea\"?\n\nAssistant: Here are the recommended best practices:\n\n• The heartbeat interval will be a configurable parameter initialized while setting up the application controller. This way, users will be able to control the frequency at which they want the heartbeat process to take place.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/rebalancing-clusters-across-shards-dynamically", "title": "Neat Enhancement Idea", "description": "Rebalance clusters across shards automatically on changes to the number of available shards.", "has_code_examples": false, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 02:00:55", "type": "best_practices", "page_metadata": {"title": "Neat-enhancement-idea - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/proposals/rebalancing-clusters-across-shards-dynamically/", "readthedocs-project-slug": "argo-cd", "scrapeId": "e86db23f-dc6d-4f99-9b04-8690e9145cc7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/rebalancing-clusters-across-shards-dynamically", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/rebalancing-clusters-across-shards-dynamically/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Neat Enhancement Idea\"?\n\nAssistant: Support manual approval for pruning and deleting Kubernetes resources during application syncing/deletion.\n\nHere's a detailed explanation:\n\n\n## Summary\nIntroduce Kubernetes resource-level annotations that require manual user approval using Argo CD UI/CLI/API before the resource is pruned or deleted. The annotations should be respected while Argo CD attempts to synchronize or delete the application.\n\n## Motivation\nWe’ve seen cases where Argo CD deleted Kubernetes resources due to a bug or misconfiguration.​ Examples include corrupted data in Redis, user errors and bug in the automation on top of Argo CD. These examples don’t mean Argo CD is not reliable; however, there are cases where misbehavior is catastrophic, and erroneous deletion is not acceptable. Examples include the app-of-apps pattern where Argo CD is used to manage itself, or namespaces in production clusters.\n\n## Goals\nThe goals of a proposal are:\n\n1. Allow developers to mark resources that require manual approval before application deletion. Developers should be able to add an annotation to resources that require manual approval before deletion. The annotation should be respected by Argo CD when it attempts to delete the application.\n\n2. Allow developers to mark resources that require manual approval before pruning. Developers should be able to add an annotation to resources that require manual approval before pruning. The annotation should be respected by Argo CD when it attempts to prune extra resources while syncing the application.\n\n## Non-Goals\n1. Implement automatic self check while deleting resources. We've made our best effort to implement corrected behavior, and as of now, we are not aware of any bugs that cause erroneous deletion. The goal of this proposal is to provide a safety net for cases where deletion is not acceptable.\n\n## Proposal\nIt is proposed to introduce two new sync options for Argo CD applications: `Prune=confirm` and `Delete=confirm`. Options would protect resources from accidental deletion during cascading application deletion as well as during sync operations.\n\n## Introduce `confirm` option for Prune sync option\nArgo CD already supports `argocd.argoproj.io/sync-options: Prune=false` sync option that prevents resource deletion while syncing the application. This, however, is not ideal since it prevents implementing fully automated workflows that include resource deletion.\n\nIn order to improve the situation, we propose to introduce `confirm` option for Prune sync option. When `confirm` option is set, Argo CD should pause the sync operation before deleting any app resources and wait for the user to confirm the deletion. The confirmation can be done in a very friendly way using Argo CD UI, CLI or API.\n\n- **Sync Operation status**. I suggest not to introduce new sync operation states to avoid disturbing the existing automation around syncing (CI pipelines, scripts etc). If Argo CD is waiting for the operation state should remain `Progressing`. Once the user confirms the deletion, the operation should resume.\n- **Sync Waves**. The sync wave should be \"paused\" while Argo CD is waiting for the user to confirm the deletion. No difference from waiting for the resource to become healthy.\n\n## Introduce `confirm` option for Delete sync option\nSimilarly to `Prune` sync option we need to introduce `confirm` value for `Delete` sync option: `argocd.argoproj.io/sync-options: Delete=confirm`. The `confirm` option should pause the sync operation before deleting any app resources and wait for the user to confirm the deletion. The confirmation can be done in a very friendly way using Argo CD UI, CLI or API.\n\n## Friendly pruning/deletion manual approval\nSince we know Argo CD is often used to implement fully automated developer workflows that include resource deletion, the deletion approval process should be as painless as possible. This way, platform administrators can instruct end users to apply the new prune/delete option to resources that require special care without significantly disturbing the developer experience.\n\nIn both cases where Argo CD requires manual approval, the user should be able to approve the deletion using Argo CD UI, CLI, or API. The approval process should be as simple as possible and should not require the user to understand the internals of Argo CD.\n\n## New `requiresDeletionApproval` resource field in application status\nA new field `requiresDeletionApproval` should be added to the `status.resources` list items. The field should be set to `true` when the resource deletion approval is required.\n\n```\n  - health:\n      status: Healthy\n    kind: Service\n    name: guestbook-ui\n    namespace: default\n    status: OutOfSync\n    version: v1\n    requiresPruning: true\n    requiresDeletionApproval: true # new field that indicates that deletion approval is required\n```\n\nThe Argo CD UI, CLI should visualize the `requiresDeletionApproval` field so that the user can easily discover which resources require manual approval.\n\n## Approve deletion resource action\nThe Argo CD UI, CLI should bundle the `Approve Deletion` resource action that would allow the user to approve the deletion. The action should patch the resource with the `argocd.argoproj.io/deletion-approved: true` annotation. Once annotation is applied the Argo CD should proceed with the deletion.\n\nThe main reason to use the action is that we can reuse existing RBAC to control who can approve the deletion.\n\n## UI/CLI Convenience to approve all resources\nThe Argo CD UI should provide a convenient way to approve resources that require manual approval. The existing user interface will provide a button that allows end user execute the `Approve Deletion` action and approve resources one by one. In addition to the single resource approval, the UI should provide a way to approve all resources that require manual approval. The new button should execute the `Approve Deletion` action for all resources that require manual approval.\n\nArgo CD CLI would no need changes since existing `argocd app actions run` command allows to execute an action against multiple resources.\n\n## Require deletion approval notification\nThe default Argo CD notification catalog should include a trigger and notification template that notifies the user when deletion approval is required. The notification template should include a list of resources that require approval.\n\n## Declarative approval\nThe user should be able to approve resource deletion without using the UI or CLI by manually adding the `argocd.argoproj.io/deletion-approved: true` annotation to the resource.\n\n## Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n## Use case 1\nAs a developer, I would like to mark resources that require manual pruning approval so I can prevent the accidental deletion of critical resources.\n\n## Use case 2\nAs a developer, I would like to mark resources that require manual deletion approval so I can prevent the accidental deletion of critical resources.\n\n## Security Considerations\nThe resource approval would require a mechanism to control who can approve the deletion. The proposal to use resource-level actions solves this problem and allows us to reuse the existing RBAC model.\n\n## Risks and Mitigations\nNone.\n\n## Upgrade / Downgrade Strategy\nIn case of rollback to the previous version the sync option would be ignored and the resources would be deleted as before.\n\n## Open Issues\nThe proposal would require end users to learn about the new behavior and adjust their workflows. It includes a set of enhancements aimed at minimizing the impact on end users.\n\n## Alternatives\nNone.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/resource-deletion-with-approval", "title": "Neat Enhancement Idea", "description": "Support manual approval for pruning and deleting Kubernetes resources during application syncing/deletion.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-28 02:01:28", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "title": "Resource deletion with approval - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/resource-deletion-with-approval/", "language": "en", "scrapeId": "2ad13838-0759-47bd-9a15-7034658f6af9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/resource-deletion-with-approval", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/resource-deletion-with-approval/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Neat Enhancement Idea\"?\n\nAssistant: Here are some code examples:\n\n### New `requiresDeletionApproval` resource field example\n```yaml\n  - health:\n      status: Healthy\n    kind: Service\n    name: guestbook-ui\n    namespace: default\n    status: OutOfSync\n    version: v1\n    requiresPruning: true\n    requiresDeletionApproval: true # new field that indicates that deletion approval is required\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/resource-deletion-with-approval", "title": "Neat Enhancement Idea", "description": "Support manual approval for pruning and deleting Kubernetes resources during application syncing/deletion.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-28 02:01:28", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "title": "Resource deletion with approval - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/resource-deletion-with-approval/", "language": "en", "scrapeId": "2ad13838-0759-47bd-9a15-7034658f6af9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/resource-deletion-with-approval", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/resource-deletion-with-approval/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Neat Enhancement Idea\"?\n\nAssistant: Here are the recommended best practices:\n\n• The deletion approval process should be as painless as possible.\n• The approval process should be as simple as possible and should not require the user to understand the internals of Argo CD.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/resource-deletion-with-approval", "title": "Neat Enhancement Idea", "description": "Support manual approval for pruning and deleting Kubernetes resources during application syncing/deletion.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-28 02:01:28", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "title": "Resource deletion with approval - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/resource-deletion-with-approval/", "language": "en", "scrapeId": "2ad13838-0759-47bd-9a15-7034658f6af9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/resource-deletion-with-approval", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/resource-deletion-with-approval/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Respect RBAC for Resource Inclusions/Exclusions\"?\n\nAssistant: This is a proposal to provide the ability to configure argocd controller, to respect the current RBAC permissions when handling resources besides the already existing resource inclusions and exclusions.\n\nHere's a detailed explanation:\n\n\n## Enhancement Idea\nThis is a proposal to provide the ability to configure argocd controller, to respect the current RBAC permissions when handling resources besides the already existing resource inclusions and exclusions.\n\n## Summary\nArgo CD administrator will be able to configure in `argocd-cm`, whether to enable or disable(default) the feature where the controller will only monitor resources that the current service account allows it to read.\n\n## Motivation\nSome users restrict the access of the argocd to specific resources using rbac and this feature will enable them to continue using argocd without having to manually configure resource exclusions for all the resources that they don't want argocd to be managing.\n\n## Proposal\nThe configuration for this will be present in the `argocd-cm`, we will add new boolean field `resource.respectRBAC` in the cm which can be set to `true` to enable this feature, by default the feature is disabled.\n\nFor the implementation there are 3 proposals :\n\n1. Modify `gitops-engine` pkg to make a `SelfSubjectAccessReview` request before adding any resource to the watch list, in this approach we are making an extra api server call to check if controller has access to the resource, this does increase the no. of kubeapi calls made but is more accurate.\n2. Modify `gitops-engine` pkg to check for forbidden/unauthorized errors when listing for resources, this is more efficient approach as the no. of kubeapi calls made does not change, but there is a chance of false positives as similar errors can be returned from kubeapi server or env specific proxies in other situations.\n3. Combine approaches 1 and 2, in this controller will check the api response for the list call, and if it receives forbidden/unauthorized it will make the `SelfSubjectAccessReview` call. This approach is accurate and at the same time, only makes extra api calls if the list calls fail in the first place.\n\nIn all solutions, once controller determines that it does not have access to the resource it will stop monitoring it.\n\n## Implementation decision\nIt was decided that we will go with approach 3 from the above list, but instead of a boolean flag we will have the `resource.respectRBAC` take 3 configuration options for the users :\n- `strict` : This will perform both the checks i.e. whether the list call response is forbidden/unauthorized and if it is make the `SelfSubjectAccessReview` call to confirm.\n- `normal` : This will only check whether the list call response is forbidden/unauthorized and skip `SelfSubjectAccessReview` call.\n- unset/empty : This will disable the feature and controller will continue to monitor all resources.\n\nNOTE: By default `resource.respectRBAC` will be unset or `\"\"` which disables the feature.\n\nUsers who are okay with an increase in kube api server calls can opt for strict option while users who are concerned with higher api calls can compromise on the accuracy and opt for the normal option.\n\n## Security Considerations and Risks\nThere are no particular security risks associated with this change, this proposal rather improves the argocd controller to not access/monitor resources that it does not have permission to access.\n\n## Upgrade / Downgrade Strategy\nThere is no special upgrade strategy needed, all existing argocd configmaps will continue to work and old configs without the `resource.respectRBAC` config will cause no change in argocd controllers behavior.\n\nWhile downgrading to older version, if the user had configured `resource.respectRBAC` previously this would be ignored completely and argocd would revert to its default behavior of trying to monitor all resources.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/respect-rbac-for-resource-exclusions", "title": "Respect RBAC for Resource Inclusions/Exclusions", "description": "This is a proposal to provide the ability to configure argocd controller, to respect the current RBAC permissions when handling resources besides the already existing resource inclusions and exclusions.", "has_code_examples": false, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:02:59", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Respect rbac for resource exclusions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/proposals/respect-rbac-for-resource-exclusions/", "scrapeId": "01c37539-3ddb-49b6-ad52-f16726eddb87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/respect-rbac-for-resource-exclusions", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/respect-rbac-for-resource-exclusions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Respect RBAC for Resource Inclusions/Exclusions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Users who are okay with an increase in kube api server calls can opt for strict option while users who are concerned with higher api calls can compromise on the accuracy and opt for the normal option.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/respect-rbac-for-resource-exclusions", "title": "Respect RBAC for Resource Inclusions/Exclusions", "description": "This is a proposal to provide the ability to configure argocd controller, to respect the current RBAC permissions when handling resources besides the already existing resource inclusions and exclusions.", "has_code_examples": false, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:02:59", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Respect rbac for resource exclusions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/proposals/respect-rbac-for-resource-exclusions/", "scrapeId": "01c37539-3ddb-49b6-ad52-f16726eddb87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/respect-rbac-for-resource-exclusions", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/respect-rbac-for-resource-exclusions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Server-Side Apply support for ArgoCD\"?\n\nAssistant: Server-Side Apply (SSA) allows calculating the final patch to update resources in Kubernetes in the server instead of the client. This proposal describes how ArgoCD can leverage SSA during syncs.\n\nHere's a detailed explanation:\n\n\n## Open Questions\n### [Q-1] How to handle conflicts?\nWhen SSA is enabled, the server may return field conflicts with other managers. What ArgoCD controller should do in case of conflict? Just force the sync and log warnings (like some other controllers do?)\n\n#### Conclusion\nThe first version should use the force flag and override even if there are conflicts. We could improve and add other options once there is a use case.\n\n### [Q-2] Should we support multiple managers?\nShould Server-Side Apply support in ArgoCD be implemented allowing multiple managers for the same controller?\n\n## Summary\nArgoCD can benefit from Server-Side Apply during syncs. A few improvements to consider:\n\n- More reliable dry-runs (as admission controller is executed)\n- Syncs always run mutating webhooks (even without diff)\n- Fix big CRD sync issues\n- Better interoperability with different controllers\n\nKubernetes SSA Proposal has more details about how it works.\n\n## Motivation\nArgoCD uses kubectl library while syncing resources in the cluster. Kubectl uses by default a 3-way-merge logic between the live state (in k8s), desired state (in git) and the previous state (last-applied-configuration annotation) to calculate diffs and patch resources in the cluster. This logic is executed in the client (ArgoCD) and once the patch is calculated it is then sent to the server.\n\nThis strategy works well in the majority of the use cases. However, there are some scenarios where calculating patches in the client side can cause problems.\n\n## Goals\nAll following goals should be achieve in order to conclude this proposal:\n\n#### [G-1] Fine grained configuration\n- Provide the ability for users to define if they want to use SSA during syncs\n- Users should be able to enable SSA at the controller level (via binary flag)\n- Users should be able to enable SSA for a given Application (via syncOptions)\n- Users should be able to enable SSA at resource level (via annotation)\n\n#### [G-2] Strategic merge patch while diffing\n- Diffing needs to support strategic merge patch\n\n#### [G-3] Admission Controllers compatibility\n- Allow Admission Controllers to execute even when there is no diff for a particular resource.\n\n#### [G-4] Conflict management\n- ArgoCD should respect field ownership and provide a configuration to allow users to define the behavior in case of conflicts.\n\n#### [G-5] Register a proper manager\n- ArgoCD must register itself with a pre-defined manager.\n\n## Non-Goals\nTBD\n\n## Proposal\nChange ArgoCD controller to accept new parameter to enable Server-Side Apply during syncs. Changes are necessary in ArgoCD as well as in gitops-engine library.\n\n## Use cases\nThe following use cases should be implemented:\n\n#### [UC-1]: As a user, I would like enable SSA at the controller level so all Application are applied server-side\nImplement a binary flag to configure ArgoCD to run all syncs using SSA.\n\n#### [UC-2]: As a user, I would like enable SSA at the Application level so all resources are applied server-side\nImplement a new syncOption to allow users to enable SSA at the application level.\n\n#### [UC-3]: As a user, I would like enable SSA at the resource level so only a single manifest is applied server-side\nLeverage the existing argocd.argoproj.io/sync-options annotation allowing the ServerSideApply=true to be informed at the resource level.\n\n## Security Considerations\nTBD\n\n## Risks and Mitigations\n#### [R-1] Supported K8s version check\nArgoCD must check if the target Kubernetes cluster has full support for SSA.\n\n#### [R-2] Alternating Server-Side Client-Side syncs\nKubernetes SSA proposal mentions about alternating between server-side and client-side applies.\n\n## Upgrade / Downgrade\nNo CRD update necessary as syncOption field in Application resource is non-typed (string array). Upgrade will only require ArgoCD controller update.\n\n## Drawbacks\nSlight increase in ArgoCD code base complexity.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-apply", "title": "Server-Side Apply support for ArgoCD", "description": "Server-Side Apply (SSA) allows calculating the final patch to update resources in Kubernetes in the server instead of the client. This proposal describes how ArgoCD can leverage SSA during syncs.", "has_code_examples": false, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 02:03:17", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Server-Side Apply - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/server-side-apply/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "scrapeId": "c470d95d-ec9b-4a85-a9f8-c8145efd5865", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-apply", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-apply/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Server-Side Apply support for ArgoCD\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use SSA during syncs for better interoperability with Admission Controllers.\n• Enable SSA at different levels (controller, application, resource) for fine-grained control.\n• Check Kubernetes version compatibility before enabling SSA.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-apply", "title": "Server-Side Apply support for ArgoCD", "description": "Server-Side Apply (SSA) allows calculating the final patch to update resources in Kubernetes in the server instead of the client. This proposal describes how ArgoCD can leverage SSA during syncs.", "has_code_examples": false, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 02:03:17", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "Server-Side Apply - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/proposals/server-side-apply/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "scrapeId": "c470d95d-ec9b-4a85-a9f8-c8145efd5865", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-apply", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-apply/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Introduce Server Side Pagination for Applications List and Watch APIs\"?\n\nAssistant: Improve Argo CD performance by introducing server side pagination for Applications List and Watch APIs.\n\nHere's a detailed explanation:\n\n\n## Open Questions\nThis is where to call out areas of the design that require closure before deciding to implement the design.\n\n## Summary\nThe Argo CD API server currently returns all applications in a single response. This can be a performance bottleneck when there are a large number of applications. This proposal is to introduce server side pagination for the Applications List and Watch APIs.\n\n## Motivation\nThe main motivation for this proposal it to improve the Argo CD UI responsiveness when there are a large number of applications. The API server memory usage increases with the number of applications however this is not critical and can be mitigated by increasing memory limits for the API server deployment. The UI however becames unresponsive even on a powerful machine when the number of applications increases 2000. The server side pagination will allow to reduce amount of data returned by the API server and improve the UI responsiveness.\n\n## Goals\n- Support server side pagination for Applications List and Watch APIs\n- Leverage pagination in the Argo CD UI to improve responsiveness\n- Leverage pagination in the Argo CD CLI to improve performance and reduce load on the API server\n\n## Non-Goals\n- The API Server is known to use a lot of CPU while applying very large RBAC policies to a large number of applications. Even with pagination API still need to apply RBAC policies to return \"last page\" response. So the issue is not addressed by this proposal.\n\n## Proposal\n**Pagination Cursor**\nIt is proposed to add `offset` and `limit` fields for pagination support in Application List API. The Watch API is a bit more complex. Both Argo CD user interface and CLI are relying on the Watch API to display real time updates of Argo CD applications. The Watch API currently supports filtering by a project and an application name. In order to effectively implement server side pagination for the Watch API we cannot rely on the order of the applications returned by the API server. Instead of relying on the order it is proposed to rely on the application name and use it as a cursor for pagination. Both the Applications List and Watch APIs will be extended with the optional `minName` and `maxName` fields. The `minName` field will be used to specify the application name to start from and the `maxName` field will be used to specify the application name to end at. The fields should be added to the `ApplicationQuery` message which is used as a request payload for the Applications List and Watch APIs.\n\n```\nmessage ApplicationQuery {\n  // ... existing fields\n  // New proto fields for server side pagination\n    // the application name to start from (app with min name is included in response)\n    optional string minName = 9;\n    // the application name to end at (app with max name is included in response)\n    optional string maxName = 10;\n    // offset\n    optional int64 offset = 18;\n    // limit\n    optional int64 limit = 19;\n}\n```\n\n**Server Side Filtering**\nIn order to support server side pagination the filtering has to be moved to the server side as well. `ApplicationQuery` message needs to be extended with the following fields:\n\n```\nmessage ApplicationQuery {\n  // ... existing fields\n  // New proto fields for server side filtering\n    // the repos filter\n    repeated string repos = 11;\n    // the clusters filter\n    repeated string clusters = 12;\n    // the namespaces filter\n    repeated string namespaces = 13;\n    // the auth sync filter\n    optional bool autoSyncEnabled = 14;\n    // the sync status filter\n    repeated string syncStatuses = 15;\n    // the health status filter\n    repeated string healthStatuses = 16;\n    // search\n    optional string search = 17;\n}\n```\n\nThe Argo CD UI should be updated to populate fields in the List and Watch API requests instead of performing filtering on the client side.\n\n**Applications Stats**\nThe Argo CD UI displays the breakdown of the applications by the sync status, health status etc. Stats numbers are calculated on the client side and rely on the full list of applications returned by the API server. The server side pagination will break the stats calculation. The proposal is to intoduce a new `stats` field to the Applications List API response. The field will contain the breakdown of the applications by various statuses.\n\n```\ntype ApplicationLabelStats struct {\n    Key    string   `json:\"key\" protobuf:\"bytes,1,opt,name=key\"`  \n    Values []string `json:\"values\" protobuf:\"bytes,2,opt,name=values\"`  \n}\n\n// ApplicationListStats holds additional information about the list of applications\ntype ApplicationListStats struct {\n    Total                int64                             `json:\"total\" protobuf:\"bytes,1,opt,name=total\"`\n    TotalBySyncStatus    map[SyncStatusCode]int64          `json:\"totalBySyncStatus,omitempty\" protobuf:\"bytes,2,opt,name=totalBySyncStatus\"`\n    TotalByHealthStatus  map[health.HealthStatusCode]int64 `json:\"totalByHealthStatus,omitempty\" protobuf:\"bytes,3,opt,name=totalByHealthStatus\"`\n    AutoSyncEnabledCount int64                             `json:\"autoSyncEnabledCount\" protobuf:\"bytes,4,opt,name=autoSyncEnabledCount\"`\n    Destinations         []ApplicationDestination          `json:\"destinations\" protobuf:\"bytes,5,opt,name=destinations\"`\n    Namespaces           []string                          `json:\"namespaces\" protobuf:\"bytes,6,opt,name=namespaces\"`\n    Labels               []ApplicationLabelStats           `json:\"labels,omitempty\" protobuf:\"bytes,7,opt,name=labels\"`\n}\n```\n\nThe `stats` filter should be populated with information about all applications returned by the API server even when single page is loaded. The Argo CD UI should be updated to use the stats returned by the API server instead of calculating the stats on the client side.\n\n**Argo CD CLI**\nThe Argo CD CLI should be updated to support server side pagination. The `argocd app list` command should be updated to support `--offset` and `--limit` flags. If the `--offset` and `--limit` flags are not specified the CLI should use pagination to load all applications in batches of 500 applications.\n\n## Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n#### User Server Side Pagination in Argo CD User Interface to improve responsiveness:\nAs a user, I would like to be able to navigate through the list of applications using the pagination controls.\n\n#### User Server Side Pagination in Argo CD CLI to reduce load on the API server:\nAs a user, I would like to use Argo CD CLI to list applications while leveraging the pagination without overloading the API server.\n\n## Implementation Details/Notes/Constraints\n**Application Stats**\n\n**CLI Backward Compatibility**\nTypically we bump minimal supported API version when we introduce a new feature in CLI. In this case I suggest to support gracefully missing pagination support in CLI. If the API server returns more applications than specified in `limit` the CLI should assume pagination is not supported and response has full list of applications. This way the user can downgrade API server without downgrading CLI.\n\n## Security Considerations\nThe proposal does not introduce any new security risks.\n\n## Risks and Mitigations\nWe might need to bump minimal supported API version in CLI to support pagination. The `Implementation Details` section contains the proposal to avoid doing it.\n\n## Upgrade / Downgrade Strategy\nThe proposal does not introduce any breaking changes. The API server should gracefully handle requests without pagination fields.\n\n## Drawbacks\nNone.\n\n## Alternatives\n* * *\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-pagination", "title": "Introduce Server Side Pagination for Applications List and Watch APIs", "description": "Improve Argo CD performance by introducing server side pagination for Applications List and Watch APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 02:03:53", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Server Side Pagination for Applications List and Watch APIs - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/proposals/server-side-pagination/", "scrapeId": "be274292-117c-4f68-aa13-7b52c07d1d98", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-pagination", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-pagination/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Introduce Server Side Pagination for Applications List and Watch APIs\"?\n\nAssistant: Here are some code examples:\n\n### ApplicationQuery Message for Pagination\n```yaml\nmessage ApplicationQuery {\n  // ... existing fields\n  // New proto fields for server side pagination\n    optional string minName = 9;\n    optional string maxName = 10;\n    optional int64 offset = 18;\n    optional int64 limit = 19;\n}\n```\n\n### ApplicationQuery Message for Filtering\n```yaml\nmessage ApplicationQuery {\n  // ... existing fields\n  // New proto fields for server side filtering\n    repeated string repos = 11;\n    repeated string clusters = 12;\n    repeated string namespaces = 13;\n    optional bool autoSyncEnabled = 14;\n    repeated string syncStatuses = 15;\n    repeated string healthStatuses = 16;\n    optional string search = 17;\n}\n```\n\n### ApplicationLabelStats Struct\n```yaml\ntype ApplicationLabelStats struct {\n    Key    string   `json:\"key\" protobuf:\"bytes,1,opt,name=key\"`\n    Values []string `json:\"values\" protobuf:\"bytes,2,opt,name=values\"`\n}\n\ntype ApplicationListStats struct {\n    Total                int64                             `json:\"total\" protobuf:\"bytes,1,opt,name=total\"`\n    TotalBySyncStatus    map[SyncStatusCode]int64          `json:\"totalBySyncStatus,omitempty\" protobuf:\"bytes,2,opt,name=totalBySyncStatus\"`\n    TotalByHealthStatus  map[health.HealthStatusCode]int64 `json:\"totalByHealthStatus,omitempty\" protobuf:\"bytes,3,opt,name=totalByHealthStatus\"`\n    AutoSyncEnabledCount int64                             `json:\"autoSyncEnabledCount\" protobuf:\"bytes,4,opt,name=autoSyncEnabledCount\"`\n    Destinations         []ApplicationDestination          `json:\"destinations\" protobuf:\"bytes,5,opt,name=destinations\"`\n    Namespaces           []string                          `json:\"namespaces\" protobuf:\"bytes,6,opt,name=namespaces\"`\n    Labels               []ApplicationLabelStats           `json:\"labels,omitempty\" protobuf:\"bytes,7,opt,name=labels\"`\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-pagination", "title": "Introduce Server Side Pagination for Applications List and Watch APIs", "description": "Improve Argo CD performance by introducing server side pagination for Applications List and Watch APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 02:03:53", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Server Side Pagination for Applications List and Watch APIs - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/proposals/server-side-pagination/", "scrapeId": "be274292-117c-4f68-aa13-7b52c07d1d98", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-pagination", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-pagination/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Introduce Server Side Pagination for Applications List and Watch APIs\"?\n\nAssistant: Here are the recommended best practices:\n\n• Support server side pagination for Applications List and Watch APIs.\n• Leverage pagination in the Argo CD UI to improve responsiveness.\n• Leverage pagination in the Argo CD CLI to improve performance and reduce load on the API server.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-pagination", "title": "Introduce Server Side Pagination for Applications List and Watch APIs", "description": "Improve Argo CD performance by introducing server side pagination for Applications List and Watch APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-28 02:03:53", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Server Side Pagination for Applications List and Watch APIs - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/proposals/server-side-pagination/", "scrapeId": "be274292-117c-4f68-aa13-7b52c07d1d98", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-pagination", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/server-side-pagination/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Sync Operation Timeout & Termination Settings\"?\n\nAssistant: The Sync Operation Timeout & Termination Settings feature introduces new sync operation settings that control automatic sync operation termination.\n\nHere's a detailed explanation:\n\n\n## Summary\nThe feature includes two types of settings:\n\n- The sync timeout allows users to set a timeout for the sync operation. If the sync operation exceeds this timeout, it will be terminated.\n\n- The Termination settings are an advanced set of options that enable terminating the sync operation earlier when a known resource is stuck in a certain state for a specified amount of time.\n\n## Motivation\nComplex synchronization operations that involve sync hooks and sync waves can be time-consuming and may occasionally become stuck in a specific state for an extended duration. In certain instances, these operations might indefinitely remain in this state. This situation becomes particularly inconvenient when the synchronization is initiated by an automation tool like a CI/CD pipeline. In these scenarios, the automation tool may end up waiting indefinitely for the synchronization process to complete.\n\nTo address this issue, this feature enables users to establish a timeout for the sync operation. If the operation exceeds the specified time limit, it will be terminated, preventing extended periods of inactivity or indefinite waiting in automated processes.\n\n## Goals\nThe following goals are intended to be met by this enhancement:\n\n#### [G-1] Synchronization timeout\nThe synchronization timeout feature should allow users to set a timeout for the sync operation. If the sync operation exceeds this timeout, it will be terminated.\n\n#### [G-2] Termination settings\nThe termination settings would allow users to terminate the sync operation earlier when a known resource is stuck in a certain state for a specified amount of time.\n\n## Proposal\nThe proposed additional synchronization settings are to be added to the `syncPolicy.terminate` field within the Application CRD. The following features are to be added:\n\n- `timeout` - The timeout for the sync operation. If the sync operation exceeds this timeout, it will be terminated.\n- `resources` - A list of resources to monitor for termination. If any of the resources in the list are stuck in a certain state for a specified amount of time, the sync operation will be terminated.\n\nExample:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\nspec:\n  ... # standard application spec\n\n  syncPolicy:\n    terminate:\n      timeout: 10m # timeout for the sync operation\n      resources:\n        - kind: Deployment\n          name: guestbook-ui\n          timeout: 5m # timeout for the resource\n          health: Progressing # health status of the resource\n``\n\n## Use cases\nAdd a list of detailed use cases this enhancement intends to take care of.\n\n#### Normal sync operation:\nAs a user, I would like to trigger a sync operation and expect it to complete within a certain time limit.\n\n#### CI triggered sync operation:\nAs a user, I would like to trigger a sync operation from a CI/CD pipeline and expect it to complete within a certain time limit.\n\n#### Preview Applications:\nAs a user, I would like to leverage ApplicationSet PR generator to generate preview applications and expect the auto sync operation fails automatically if it exceeds a certain time limit.\n\n## Implementation Details/Notes/Constraints\nThe application CRD status field already has all required information to implement sync timeout.\n\n- Global sync timeout: only the operation start time is required to implement this functionality. It is provided by the `status.operationState.startedAt` field.\n- Resources state based termination. This part is a bit more complex and requires information about resources affected/created during the sync operation. Most of the required information is already available in the Application CRD status field. The `status.operationState.syncResult.resources` field contains a list of resources affected/created during the sync operation. Each `resource` list item includes the resource name, kind, and the resource health status. In order to provide accurate duration of the resource health status it is proposed to add `modifiedAt` field to the `resource` list item. This field will be updated every time the resource health/phase changes.\n\n## Security Considerations\nProposed changes don't expand the scope of the application CRD and don't introduce any new security concerns.\n\n## Risks and Mitigations\nThe execution of a synchronization operation is carried out in phases, which involve a series of Kubernetes API calls and typically take up to a few seconds. There is no easy way to terminate the operation during the phase. So the operation might take few seconds longer than the specified timeout. It does not seem reasonable to implement a more complex logic to terminate the operation during the phase. So it is proposed to just document that the operation might be terminated few seconds after the timeout is reached.\n\n## Upgrade / Downgrade Strategy\nThe proposed changes don't require any special upgrade/downgrade strategy. The new settings are optional and can be used by users only if they need them.\n\n## Drawbacks\nSlight increase of the application synchronization logic complexity.\n\n## Alternatives\nRely on the external tools to terminate the sync operation. For example, the CI/CD pipeline can terminate the sync operation if it exceeds a certain time limit.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/sync-timeout", "title": "Sync Operation Timeout & Termination Settings", "description": "The Sync Operation Timeout & Termination Settings feature introduces new sync operation settings that control automatic sync operation termination.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 02:04:10", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "title": "Neat-enhancement-idea - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/sync-timeout/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "9b63c382-c804-4b61-a682-26a9e4f47772", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/sync-timeout", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/sync-timeout/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Sync Operation Timeout & Termination Settings\"?\n\nAssistant: Here are some code examples:\n\n### Example of Sync Policy with Timeout\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\nspec:\n  ... # standard application spec\n\n  syncPolicy:\n    terminate:\n      timeout: 10m # timeout for the sync operation\n      resources:\n        - kind: Deployment\n          name: guestbook-ui\n          timeout: 5m # timeout for the resource\n          health: Progressing # health status of the resource\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/sync-timeout", "title": "Sync Operation Timeout & Termination Settings", "description": "The Sync Operation Timeout & Termination Settings feature introduces new sync operation settings that control automatic sync operation termination.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 02:04:10", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "title": "Neat-enhancement-idea - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/sync-timeout/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "9b63c382-c804-4b61-a682-26a9e4f47772", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/sync-timeout", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/sync-timeout/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Sync Operation Timeout & Termination Settings\"?\n\nAssistant: Here are the recommended best practices:\n\n• Establish a timeout for sync operations to prevent indefinite waiting in automated processes.\n• Monitor specific resources for termination to enhance control over sync operations.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/sync-timeout", "title": "Sync Operation Timeout & Termination Settings", "description": "The Sync Operation Timeout & Termination Settings feature introduces new sync operation settings that control automatic sync operation termination.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 02:04:10", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "title": "Neat-enhancement-idea - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/sync-timeout/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "9b63c382-c804-4b61-a682-26a9e4f47772", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/sync-timeout", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/sync-timeout/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Proposal: Allow Hiding Certain Annotations in the Argo CD Web UI\"?\n\nAssistant: This proposal outlines a solution to allow hiding certain annotations in the Argo CD Web UI, specifically focusing on the `openshift.io/token-secret.value` annotation.\n\nHere's a detailed explanation:\n\n\n## Solution\nThis is the proposed solution. The accepted PR may differ from this proposal.\n\nAdd a new config item in argocd-cm:\n\n```\nhide.secret.annotations: |\n- openshift.io/token-secret.value\n```\n\nThis will hide the `openshift.io/token-secret.value` annotation from the UI. Behind the scenes, it would likely work the same way as the `last-applied-configuration` annotation hiding works: https://github.com/argoproj/gitops-engine/blob/b0fffe419a0f0a40f9f2c0b6346b752ed6537385/pkg/diff/diff.go#L897\n\nI considered whether we'd want to support hiding things besides annotations and in resources besides secrets, but having reviewed existing issues, I think this narrow feature is sufficient.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties/hide-annotations", "title": "Proposal: Allow Hiding Certain Annotations in the Argo CD Web UI", "description": "This proposal outlines a solution to allow hiding certain annotations in the Argo CD Web UI, specifically focusing on the `openshift.io/token-secret.value` annotation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:04:17", "type": "overview", "page_metadata": {"title": "Proposal: Allow Hiding Certain Annotations in the Argo CD Web UI - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/feature-bounties/hide-annotations/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "1da900d5-1824-469a-9ef9-0bc9c10056ab", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties/hide-annotations", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties/hide-annotations/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Proposal: Allow Hiding Certain Annotations in the Argo CD Web UI\"?\n\nAssistant: Here are some code examples:\n\n### Configuration to Hide Annotations\n```yaml\nhide.secret.annotations: |\n- openshift.io/token-secret.value\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties/hide-annotations", "title": "Proposal: Allow Hiding Certain Annotations in the Argo CD Web UI", "description": "This proposal outlines a solution to allow hiding certain annotations in the Argo CD Web UI, specifically focusing on the `openshift.io/token-secret.value` annotation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:04:17", "type": "code_examples", "page_metadata": {"title": "Proposal: Allow Hiding Certain Annotations in the Argo CD Web UI - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/feature-bounties/hide-annotations/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "1da900d5-1824-469a-9ef9-0bc9c10056ab", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties/hide-annotations", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties/hide-annotations/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Proposal: Allow Hiding Certain Annotations in the Argo CD Web UI\"?\n\nAssistant: Here are the recommended best practices:\n\n• The accepted PR may differ from this proposal, so be prepared for changes in the final implementation.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties/hide-annotations", "title": "Proposal: Allow Hiding Certain Annotations in the Argo CD Web UI", "description": "This proposal outlines a solution to allow hiding certain annotations in the Argo CD Web UI, specifically focusing on the `openshift.io/token-secret.value` annotation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:04:17", "type": "best_practices", "page_metadata": {"title": "Proposal: Allow Hiding Certain Annotations in the Argo CD Web UI - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/proposals/feature-bounties/hide-annotations/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "1da900d5-1824-469a-9ef9-0bc9c10056ab", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties/hide-annotations", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/feature-bounties/hide-annotations/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Commit Server\"?\n\nAssistant: The Argo CD Commit Server provides push access to git repositories for hydrated manifests.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe server exposes a gRPC service which accepts requests to push hydrated manifests to a git repository.\n\n## gRPC Interface\nThe following is the interface for the Commit Server.\n\n## CommitManifests Message\nCommitManifests represents the caller's request for some Kubernetes manifests to be pushed to a git repository.\n\n## CommitPathDetails Message\nCommitPathDetails represents the details about a specific path for the manifests.\n\n## CommitManifestsResponse Message\nThis message is used as a response for the CommitManifests request.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/commit-server", "title": "Commit Server", "description": "The Argo CD Commit Server provides push access to git repositories for hydrated manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:04:23", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "Commit Server - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/proposals/manifest-hydrator/commit-server/", "readthedocs-http-status": "200", "scrapeId": "5f3a56dd-509c-4cef-8b06-4ccd836bfad0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/commit-server", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/commit-server/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Commit Server\"?\n\nAssistant: Here are some code examples:\n\n### CommitManifests Message Definition\n```yaml\nmessage CommitManifests {\n  required string repoURL = 1;\n  required string targetBranch = 2;\n  required string drySHA = 3;\n  required string commitAuthor = 4;\n  required string commitMessage = 5;\n  required string commitTime = 6;\n  repeated CommitPathDetails details = 7;\n}\n```\n\n### CommitPathDetails Message Definition\n```yaml\nmessage CommitPathDetails {\n  required string path = 1;\n  repeated string manifests = 2;\n  required string readme = 3;\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/commit-server", "title": "Commit Server", "description": "The Argo CD Commit Server provides push access to git repositories for hydrated manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:04:23", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "Commit Server - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/proposals/manifest-hydrator/commit-server/", "readthedocs-http-status": "200", "scrapeId": "5f3a56dd-509c-4cef-8b06-4ccd836bfad0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/commit-server", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/commit-server/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Commit Server\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the repoURL is valid and accessible via HTTPS or SSH.\n• Use meaningful commit messages to describe the changes being pushed.\n• Keep the commit time accurate to maintain a proper history of changes.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/commit-server", "title": "Commit Server", "description": "The Argo CD Commit Server provides push access to git repositories for hydrated manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:04:23", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "Commit Server - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/proposals/manifest-hydrator/commit-server/", "readthedocs-http-status": "200", "scrapeId": "5f3a56dd-509c-4cef-8b06-4ccd836bfad0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/commit-server", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/manifest-hydrator/commit-server/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Snyk Scans\"?\n\nAssistant: Every Sunday, Snyk scans are generated for Argo CD's `master` branch and the most recent patches of the three most recent minor releases.\n\nHere's a detailed explanation:\n\n\n## Scans\n### master\n\n|  | Critical | High | Medium | Low |\n| --- | --- | --- | --- | --- |\n| [go.mod](https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-test.html) | 0 | 0 | 6 | 0 |\n| [ui/yarn.lock](https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-test.html) | 0 | 0 | 1 | 0 |\n| [dex:v2.41.1](https://argo-cd.readthedocs.io/en/stable/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html) | 0 | 0 | 0 | 2 |\n| [haproxy:2.6.17-alpine](https://argo-cd.readthedocs.io/en/stable/snyk/master/public.ecr.aws_docker_library_haproxy_2.6.17-alpine.html) | 0 | 0 | 2 | 4 |\n| [redis:7.0.15-alpine](https://argo-cd.readthedocs.io/en/stable/snyk/master/public.ecr.aws_docker_library_redis_7.0.15-alpine.html) | 0 | 0 | 0 | 1 |\n| [argocd:latest](https://argo-cd.readthedocs.io/en/stable/snyk/master/quay.io_argoproj_argocd_latest.html) | 0 | 0 | 3 | 10 |\n| [redis:7.0.15-alpine](https://argo-cd.readthedocs.io/en/stable/snyk/master/redis_7.0.15-alpine.html) | 0 | 0 | 0 | 1 |\n| [install.yaml](https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-install.html) | - | - | - | - |\n| [namespace-install.yaml](https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-namespace-install.html) | - | - | - | - |\n\n### v2.13.2\n\n|  | Critical | High | Medium | Low |\n| --- | --- | --- | --- | --- |\n| [go.mod](https://argo-cd.readthedocs.io/en/stable/snyk/v2.13.2/argocd-test.html) | 1 | 0 | 7 | 2 |\n| [ui/yarn.lock](https://argo-cd.readthedocs.io/en/stable/snyk/v2.13.2/argocd-test.html) | 0 | 0 | 1 | 0 |\n| [dex:v2.41.1](https://argo-cd.readthedocs.io/en/stable/snyk/v2.13.2/ghcr.io_dexidp_dex_v2.41.1.html) | 0 | 0 | 0 | 2 |\n| [haproxy:2.6.17-alpine](https://argo-cd.readthedocs.io/en/stable/snyk/v2.13.2/public.ecr.aws_docker_library_haproxy_2.6.17-alpine.html) | 0 | 0 | 2 | 4 |\n| [redis:7.0.15-alpine](https://argo-cd.readthedocs.io/en/stable/snyk/v2.13.2/public.ecr.aws_docker_library_redis_7.0.15-alpine.html) | 0 | 0 | 0 | 1 |\n| [argocd:v2.13.2](https://argo-cd.readthedocs.io/en/stable/snyk/v2.13.2/quay.io_argoproj_argocd_v2.13.2.html) | 0 | 0 | 3 | 10 |\n| [redis:7.0.15-alpine](https://argo-cd.readthedocs.io/en/stable/snyk/v2.13.2/redis_7.0.15-alpine.html) | 0 | 0 | 0 | 1 |\n| [install.yaml](https://argo-cd.readthedocs.io/en/stable/snyk/v2.13.2/argocd-iac-install.html) | - | - | - | - |\n| [namespace-install.yaml](https://argo-cd.readthedocs.io/en/stable/snyk/v2.13.2/argocd-iac-namespace-install.html) | - | - | - | - |\n\n### v2.12.8\n\n|  | Critical | High | Medium | Low |\n| --- | --- | --- | --- | --- |\n| [go.mod](https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.8/argocd-test.html) | 1 | 0 | 8 | 2 |\n| [ui/yarn.lock](https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.8/argocd-test.html) | 0 | 0 | 1 | 0 |\n| [dex:v2.38.0](https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.8/ghcr.io_dexidp_dex_v2.38.0.html) | 0 | 0 | 6 | 7 |\n| [haproxy:2.6.17-alpine](https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.8/public.ecr.aws_docker_library_haproxy_2.6.17-alpine.html) | 0 | 0 | 2 | 4 |\n| [redis:7.0.15-alpine](https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.8/public.ecr.aws_docker_library_redis_7.0.15-alpine.html) | 0 | 0 | 0 | 1 |\n| [argocd:v2.12.8](https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.8/quay.io_argoproj_argocd_v2.12.8.html) | 0 | 0 | 3 | 10 |\n| [redis:7.0.15-alpine](https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.8/redis_7.0.15-alpine.html) | 0 | 0 | 0 | 1 |\n| [install.yaml](https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.8/argocd-iac-install.html) | - | - | - | - |\n| [namespace-install.yaml](https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.8/argocd-iac-namespace-install.html) | - | - | - | - |\n\n### v2.11.12\n\n|  | Critical | High | Medium | Low |\n| --- | --- | --- | --- | --- |\n| [go.mod](https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.12/argocd-test.html) | 1 | 2 | 9 | 2 |\n| [ui/yarn.lock](https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.12/argocd-test.html) | 0 | 0 | 1 | 0 |\n| [dex:v2.38.0](https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.12/ghcr.io_dexidp_dex_v2.38.0.html) | 0 | 0 | 6 | 7 |\n| [haproxy:2.6.14-alpine](https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.12/haproxy_2.6.14-alpine.html) | 0 | 1 | 7 | 7 |\n| [argocd:v2.11.12](https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.12/quay.io_argoproj_argocd_v2.11.12.html) | 0 | 0 | 4 | 20 |\n| [redis:7.0.15-alpine](https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.12/redis_7.0.15-alpine.html) | 0 | 0 | 0 | 1 |\n| [install.yaml](https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.12/argocd-iac-install.html) | - | - | - | - |\n| [namespace-install.yaml](https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.12/argocd-iac-namespace-install.html) | - | - | - | - |\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk", "title": "Snyk Scans", "description": "Every Sunday, Snyk scans are generated for Argo CD's `master` branch and the most recent patches of the three most recent minor releases.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:04:50", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/snyk/", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Snyk Scans - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "837a959c-d732-4049-8d96-f492306241f3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Overview\"?\n\nAssistant: This guide is for developers who have Argo CD installed for them and are managing applications.\n\nHere's a detailed explanation:\n\n\n## Note\nPlease make sure you've completed the getting started guide.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide", "title": "Overview", "description": "This guide is for developers who have Argo CD installed for them and are managing applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:04:54", "type": "overview", "page_metadata": {"title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "6a086aad-ea58-4749-81f4-3a629ff463db", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Overview\"?\n\nAssistant: Here are the recommended best practices:\n\n• Complete the getting started guide before proceeding.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide", "title": "Overview", "description": "This guide is for developers who have Argo CD installed for them and are managing applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:04:54", "type": "best_practices", "page_metadata": {"title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "6a086aad-ea58-4749-81f4-3a629ff463db", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Annotations and Labels used by Argo CD\"?\n\nAssistant: This page covers the annotations and labels used by Argo CD, detailing their keys, target resources, possible values, and descriptions.\n\nHere's a detailed explanation:\n\n\n## Annotations\n| Annotation key | Target resource(es) | Possible values | Description |\n| --- | --- | --- | --- |\n| argocd.argoproj.io/application-set-refresh | ApplicationSet | \"true\" | Added when an ApplicationSet is requested to be refreshed by a webhook. The ApplicationSet controller will remove this annotation at the end of reconciliation. |\n| argocd.argoproj.io/compare-options | any | [see compare options docs](https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options/) | Configures how an app's current state is compared to its desired state. |\n| argocd.argoproj.io/hook | any | [see resource hooks docs](https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/) | Used to configure [resource hooks](https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/). |\n| argocd.argoproj.io/hook-delete-policy | any | [see resource hooks docs](https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/#hook-deletion-policies) | Used to set a [resource hook's deletion policy](https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/#hook-deletion-policies). |\n| argocd.argoproj.io/manifest-generate-paths | Application | [see scaling docs](https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/#webhook-and-manifest-paths-annotation) | Used to avoid unnecessary Application refreshes, especially in mono-repos. |\n| argocd.argoproj.io/refresh | Application | `normal`, `hard` | Indicates that app needs to be refreshed. Removed by application controller after app is refreshed. Value \"hard\" means manifest cache and target cluster state cache should be invalidated before refresh. |\n| argocd.argoproj.io/skip-reconcile | Application | \"true\" | Indicates to the Argo CD application controller that the Application should not be reconciled. See the [skip reconcile documentation](https://argo-cd.readthedocs.io/en/stable/user-guide/skip_reconcile/) for use cases. |\n| argocd.argoproj.io/sync-options | any | [see sync options docs](https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/) | Provides a variety of settings to determine how an Application's resources are synced. |\n| argocd.argoproj.io/sync-wave | any | [see sync waves docs](https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves/) |  |\n| argocd.argoproj.io/tracking-id | any | any | Used by Argo CD to track resources it manages. See [resource tracking docs](https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking/) for details. |\n| argocd.argoproj.io/ignore-resource-updates | any | \"true\", false | Used by Argo CD to ignore resource updates. See [reconcile docs](https://argo-cd.readthedocs.io/en/stable/operator-manual/reconcile/) reconcile_docs for details. |\n| link.argocd.argoproj.io/{some link name} | any | An http(s) URL | Adds a link to the Argo CD UI for the resource. See [external URL docs](https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/) for details. |\n| pref.argocd.argoproj.io/default-pod-sort | Application | [see UI customization docs](https://argo-cd.readthedocs.io/en/stable/operator-manual/ui-customization/) | Sets the Application's default grouping mechanism. |\n| pref.argocd.argoproj.io/default-view | Application | [see UI customization docs](https://argo-cd.readthedocs.io/en/stable/operator-manual/ui-customization/) | Sets the Application's default view mode (e.g. \"tree\" or \"list\") |\n\n## Labels\n| Label key | Target resource(es) | Possible values | Description |\n| --- | --- | --- | --- |\n| argocd.argoproj.io/instance | Application | any | Recommended tracking label to [avoid conflicts with other tools which use `app.kubernetes.io/instance`](https://argo-cd.readthedocs.io/en/stable/faq/#why-is-my-app-out-of-sync-even-after-syncing). |\n| argocd.argoproj.io/secret-type | Secret | `cluster`, `repository`, `repo-creds`, `scm-creds` | Identifies certain types of Secrets used by Argo CD. See the [Declarative Setup docs](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/) for details about the first three, and [AppSet-in-any-namespace docs](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace/) for the last one. |\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/annotations-and-labels", "title": "Annotations and Labels used by Argo CD", "description": "This page covers the annotations and labels used by Argo CD, detailing their keys, target resources, possible values, and descriptions.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 02:05:08", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "title": "Annotations and Labels used by Argo CD - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/annotations-and-labels/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "cd3c95b5-1457-4b38-8f67-f37e83385dc6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/annotations-and-labels", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/annotations-and-labels/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"App Deletion\"?\n\nAssistant: Apps can be deleted with or without a cascade option. A cascade delete deletes both the app and its resources, rather than only the app.\n\nHere's a detailed explanation:\n\n\n## Deletion Using `argocd`\nTo perform a non-cascade delete:\n\n```\nargocd app delete APPNAME --cascade=false\n```\n\nTo perform a cascade delete:\n\n```\nargocd app delete APPNAME --cascade\n```\n\nor\n\n```\nargocd app delete APPNAME\n```\n\n## Deletion Using `kubectl`\nTo perform a non-cascade delete, make sure the finalizer is unset and then delete the app:\n\n```\nkubectl patch app APPNAME  -p '{\"metadata\": {\"finalizers\": null}}' --type merge\nkubectl delete app APPNAME\n```\n\nTo perform a cascade delete set the finalizer, e.g. using `kubectl patch`:\n\n```\nkubectl patch app APPNAME  -p '{\"metadata\": {\"finalizers\": [\"resources-finalizer.argocd.argoproj.io\"]}}' --type merge\nkubectl delete app APPNAME\n```\n\n## About The Deletion Finalizer\n```\nmetadata:\n  finalizers:\n    # The default behaviour is foreground cascading deletion\n    - resources-finalizer.argocd.argoproj.io\n    # Alternatively, you can use background cascading deletion\n    # - resources-finalizer.argocd.argoproj.io/background\n```\n\nWhen deleting an Application with this finalizer, the Argo CD application controller will perform a cascading delete of the Application's resources.\n\nAdding the finalizer enables cascading deletes when implementing the App of Apps pattern.\nThe default propagation policy for cascading deletion is foreground cascading deletion.\nArgo CD performs background cascading deletion when `resources-finalizer.argocd.argoproj.io/background` is set.\n\nWhen you invoke `argocd app delete` with `--cascade`, the finalizer is added automatically.\nYou can set the propagation policy with `--propagation-policy <foreground|background>`.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/app_deletion", "title": "App Deletion", "description": "Apps can be deleted with or without a cascade option. A cascade delete deletes both the app and its resources, rather than only the app.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:05:23", "type": "overview", "page_metadata": {"title": "App Deletion - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/app_deletion/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "7575b03a-9487-4378-8b19-a4db2edfba0f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/app_deletion", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/app_deletion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"App Deletion\"?\n\nAssistant: Here are some code examples:\n\n### Non-Cascade Delete using argocd\n```yaml\nargocd app delete APPNAME --cascade=false\n```\n\n### Cascade Delete using argocd\n```yaml\nargocd app delete APPNAME --cascade\n```\n\n### Non-Cascade Delete using kubectl\n```yaml\nkubectl patch app APPNAME  -p '{\"metadata\": {\"finalizers\": null}}' --type merge\nkubectl delete app APPNAME\n```\n\n### Cascade Delete using kubectl\n```yaml\nkubectl patch app APPNAME  -p '{\"metadata\": {\"finalizers\": [\"resources-finalizer.argocd.argoproj.io\"]}}' --type merge\nkubectl delete app APPNAME\n```\n\n### Deletion Finalizer Metadata\n```yaml\nmetadata:\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/app_deletion", "title": "App Deletion", "description": "Apps can be deleted with or without a cascade option. A cascade delete deletes both the app and its resources, rather than only the app.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:05:23", "type": "code_examples", "page_metadata": {"title": "App Deletion - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/app_deletion/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "7575b03a-9487-4378-8b19-a4db2edfba0f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/app_deletion", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/app_deletion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"App Deletion\"?\n\nAssistant: Here are the recommended best practices:\n\n• The default behaviour is foreground cascading deletion.\n• You can use background cascading deletion by setting the finalizer to resources-finalizer.argocd.argoproj.io/background.\n• When invoking argocd app delete with --cascade, the finalizer is added automatically.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/app_deletion", "title": "App Deletion", "description": "Apps can be deleted with or without a cascade option. A cascade delete deletes both the app and its resources, rather than only the app.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:05:23", "type": "best_practices", "page_metadata": {"title": "App Deletion - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/app_deletion/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "7575b03a-9487-4378-8b19-a4db2edfba0f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/app_deletion", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/app_deletion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Generating Applications with ApplicationSet\"?\n\nAssistant: Automating the generation of Argo CD Applications with the ApplicationSet Controller\n\nHere's a detailed explanation:\n\n\n## Overview\nThe ApplicationSet controller adds Application automation and seeks to improve multi-cluster support and cluster multitenant support within Argo CD. Argo CD Applications may be templated from multiple different sources, including from Git or Argo CD's own defined cluster list.\n\n## Developer Access\nThe set of tools provided by the ApplicationSet controller may also be used to allow developers (without access to the Argo CD namespace) to independently create Applications without cluster-administrator intervention.\n\n## Security Warning\nBe aware of the security implications before allowing developers to create Applications via ApplicationSets.\n\n## ApplicationSet Resource Example\nThe ApplicationSet controller automatically generates Argo CD Applications based on the contents of an ApplicationSet Custom Resource (CR). Here is an example of an ApplicationSet resource that can be used to target an Argo CD Application to multiple clusters.\n\n## List Generator\nThe List generator passes the url and cluster fields into the template as {{param}}-style parameters, which are then rendered into three corresponding Argo CD Applications (one for each defined cluster). Targeting new clusters (or removing existing clusters) is simply a matter of altering the ApplicationSet resource, and the corresponding Argo CD Applications will be automatically created.\n\n## Managing Applications\nLikewise, changes made to the ApplicationSet template fields will automatically be applied to every generated Application. Managing a set of multiple Argo CD Applications is thus as easy as managing a single ApplicationSet resource.\n\n## Other Generators\nWithin ApplicationSet there exist other more powerful generators in addition to the List generator, including the Cluster generator (which automatically uses Argo CD-defined clusters to template Applications), and the Git generator (which uses the files/directories of a Git repository to template applications).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-set", "title": "Generating Applications with ApplicationSet", "description": "Automating the generation of Argo CD Applications with the ApplicationSet Controller", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:05:33", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Generating Applications with ApplicationSet - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/application-set/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "9f08ae14-fb5f-47f9-9280-41f0e58eddd2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-set", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Generating Applications with ApplicationSet\"?\n\nAssistant: Here are some code examples:\n\n### ApplicationSet Resource Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: guestbook\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - list:\n      elements:\n      - cluster: engineering-dev\n        url: https://1.2.3.4\n      - cluster: engineering-prod\n        url: https://2.4.6.8\n      - cluster: finance-preprod\n        url: https://9.8.7.6\n  template:\n    metadata:\n      name: '{{.cluster}}-guestbook'\n    spec:\n      project: my-project\n      source:\n        repoURL: https://github.com/infra-team/cluster-deployments.git\n        targetRevision: HEAD\n        path: guestbook/{{.cluster}}\n      destination:\n        server: '{{.url}}'\n        namespace: guestbook\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-set", "title": "Generating Applications with ApplicationSet", "description": "Automating the generation of Argo CD Applications with the ApplicationSet Controller", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:05:33", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Generating Applications with ApplicationSet - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/application-set/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "9f08ae14-fb5f-47f9-9280-41f0e58eddd2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-set", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Generating Applications with ApplicationSet\"?\n\nAssistant: Here are the recommended best practices:\n\n• Be aware of the security implications before allowing developers to create Applications via ApplicationSets.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-set", "title": "Generating Applications with ApplicationSet", "description": "Automating the generation of Argo CD Applications with the ApplicationSet Controller", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:05:33", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Generating Applications with ApplicationSet - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/application-set/", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "9f08ae14-fb5f-47f9-9280-41f0e58eddd2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-set", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Application Specification\"?\n\nAssistant: The following describes all the available fields of an Application:\n\nHere's a detailed explanation:\n\n\n## Application Specification\nThe following describes all the available fields of an Application:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  # You'll usually want to add your resources to the argocd namespace.\n  namespace: argocd\n  # Add this finalizer ONLY if you want these to cascade delete.\n  finalizers:\n    # The default behaviour is foreground cascading deletion\n    - resources-finalizer.argocd.argoproj.io\n    # Alternatively, you can use background cascading deletion\n    # - resources-finalizer.argocd.argoproj.io/background\n  # Add labels to your application object.\n  labels:\n    name: guestbook\nspec:\n  # The project the application belongs to.\n  project: default\n\n  # Source of the application manifests\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git  # Can point to either a Helm chart repo or a git repo.\n    targetRevision: HEAD  # For Helm, this refers to the chart version.\n    path: guestbook  # This has no meaning for Helm charts pulled directly from a Helm repo instead of git.\n\n    # helm specific config\n    chart: chart-name  # Set this when pulling directly from a Helm repo. DO NOT set for git-hosted Helm charts.\n    helm:\n      passCredentials: false # If true then adds --pass-credentials to Helm commands to pass credentials to all domains\n      # Extra parameters to set (same as setting through values.yaml, but these take precedence)\n      parameters:\n      - name: \"nginx-ingress.controller.service.annotations.external-dns\\.alpha\\.kubernetes\\.io/hostname\"\n        value: mydomain.example.com\n      - name: \"ingress.annotations.kubernetes\\.io/tls-acme\"\n        value: \"true\"\n        forceString: true # ensures that value is treated as a string\n\n      # Use the contents of files as parameters (uses Helm's --set-file)\n      fileParameters:\n      - name: config\n        path: files/config.json\n\n      # Release name override (defaults to application name)\n      releaseName: guestbook\n\n      # Helm values files for overriding values in the helm chart\n      # The path is relative to the spec.source.path directory defined above\n      valueFiles:\n      - values-prod.yaml\n\n      # Ignore locally missing valueFiles when installing Helm chart. Defaults to false\n      ignoreMissingValueFiles: false\n\n      # Values file as block file. Prefer to use valuesObject if possible (see below)\n      values: |\n        ingress:\n          enabled: true\n          path: /\n          hosts:\n            - mydomain.example.com\n          annotations:\n            kubernetes.io/ingress.class: nginx\n            kubernetes.io/tls-acme: \"true\"\n          labels: {}\n          tls:\n            - secretName: mydomain-tls\n              hosts:\n                - mydomain.example.com\n\n      # Values file as block file. This takes precedence over values\n      valuesObject:\n        ingress:\n          enabled: true\n          path: /\n          hosts:\n            - mydomain.example.com\n          annotations:\n            kubernetes.io/ingress.class: nginx\n            kubernetes.io/tls-acme: \"true\"\n          labels: {}\n          tls:\n            - secretName: mydomain-tls\n              hosts:\n                - mydomain.example.com\n\n      # Skip custom resource definition installation if chart contains custom resource definitions. Defaults to false\n      skipCrds: false\n\n      # Skip schema validation if chart contains JSON schema validation. Defaults to false\n      skipSchemaValidation: false\n\n      # Optional Helm version to template with. If omitted it will fall back to look at the 'apiVersion' in Chart.yaml\n      # and decide which Helm binary to use automatically. This field can be either 'v2' or 'v3'.\n      version: v2\n\n      # You can specify the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD uses\n      # the Kubernetes version of the target cluster. The value must be semver formatted. Do not prefix with `v`.\n      kubeVersion: 1.30.0\n\n      # You can specify the Kubernetes resource API versions to pass to Helm when templating manifests. By default, Argo\n      # CD uses the API versions of the target cluster. The format is [group/]version/kind.\n      apiVersions:\n        - traefik.io/v1alpha1/TLSOption\n        - v1/Service\n\n      # Optional namespace to template with. If left empty, defaults to the app's destination namespace.\n      namespace: custom-namespace\n\n    # kustomize specific config\n    kustomize:\n      # Optional kustomize version. Note: version must be configured in argocd-cm ConfigMap\n      version: v3.5.4\n      # Supported kustomize transformers. https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/\n      namePrefix: prod-\n      nameSuffix: -some-suffix\n      commonLabels:\n        foo: bar\n      commonAnnotations:\n        beep: boop-${ARGOCD_APP_REVISION}\n      # Toggle which enables/disables env variables substitution in commonAnnotations\n      commonAnnotationsEnvsubst: true\n      forceCommonLabels: false\n      forceCommonAnnotations: false\n      images:\n      - gcr.io/heptio-images/ks-guestbook-demo:0.2\n      - my-app=gcr.io/my-repo/my-app:0.1\n      namespace: custom-namespace\n      replicas:\n      - name: kustomize-guestbook-ui\n        count: 4\n      components:\n        - ../component  # relative to the kustomization.yaml (`source.path`).\n      patches:\n        - target:\n            kind: Deployment\n            name: guestbook-ui\n          patch: |-\n            - op: add # Add new element to manifest\n              path: /spec/template/spec/nodeSelector/\n              value:\n                env: \"pro\"\n\n      # You can specify the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD uses\n      # the Kubernetes version of the target cluster. The value must be semver formatted. Do not prefix with `v`.\n      kubeVersion: 1.30.0\n\n      # You can specify the Kubernetes resource API versions to pass to Helm when templating manifests. By default, Argo\n      # CD uses the API versions of the target cluster. The format is [group/]version/kind.\n      apiVersions:\n        - traefik.io/v1alpha1/TLSOption\n        - v1/Service\n\n    # directory\n    directory:\n      recurse: true\n      jsonnet:\n        # A list of Jsonnet External Variables\n        extVars:\n        - name: foo\n          value: bar\n          # You can use \"code\" to determine if the value is either string (false, the default) or Jsonnet code (if code is true).\n        - code: true\n          name: baz\n          value: \"true\"\n        # A list of Jsonnet Top-level Arguments\n        tlas:\n        - code: false\n          name: foo\n          value: bar\n      # Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during\n      # manifest generation. This takes precedence over the `include` field.\n      # To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n      exclude: 'config.yaml'\n      # Include contains a glob pattern to match paths against that should be explicitly included during manifest\n      # generation. If this field is set, only matching manifests will be included.\n      # To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n      include: '*.yaml'\n\n    # plugin specific config\n    plugin:\n      # If the plugin is defined as a sidecar and name is not passed, the plugin will be automatically matched with the\n      # Application according to the plugin's discovery rules.\n      name: mypluginname\n      # environment variables passed to the plugin\n      env:\n        - name: FOO\n          value: bar\n      # Plugin parameters are new in v2.5.\n      parameters:\n        - name: string-param\n          string: example-string\n        - name: array-param\n          array: [item1, item2]\n        - name: map-param\n          map:\n            param-name: param-value\n\n  # Sources field specifies the list of sources for the application\n  sources:\n    - repoURL: https://github.com/argoproj/argocd-example-apps.git  # Can point to either a Helm chart repo or a git repo.\n      targetRevision: HEAD  # For Helm, this refers to the chart version.\n      path: guestbook  # This has no meaning for Helm charts pulled directly from a Helm repo instead of git.\n      ref: my-repo  # For Helm, acts as a reference to this source for fetching values files from this source. Has no meaning when under `source` field\n\n  # Destination cluster and namespace to deploy the application\n  destination:\n    # cluster API URL\n    server: https://kubernetes.default.svc\n    # or cluster name\n    # name: in-cluster\n    # The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace\n    namespace: guestbook\n\n  # Extra information to show in the Argo CD Application details tab\n  info:\n    - name: 'Example:'\n      value: 'https://example.com'\n\n  # Sync policy\n  syncPolicy:\n    automated: # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.\n      prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).\n      selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).\n      allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).\n    syncOptions:     # Sync options which modifies sync behavior\n    - Validate=false # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).\n    - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.\n    - PrunePropagationPolicy=foreground # Supported policies are background, foreground and orphan.\n    - PruneLast=true # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation\n    - RespectIgnoreDifferences=true # When syncing changes, respect fields ignored by the ignoreDifferences configuration\n    - ApplyOutOfSyncOnly=true # Only sync out-of-sync resources, rather than applying every object in the application\n    managedNamespaceMetadata: # Sets the metadata for the application namespace. Only valid if CreateNamespace=true (see above), otherwise it's a no-op.\n      labels: # The labels to set on the application namespace\n        any: label\n        you: like\n      annotations: # The annotations to set on the application namespace\n        the: same\n        applies: for\n        annotations: on-the-namespace\n\n    # The retry feature is available since v1.7\n    retry:\n      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0\n      backoff:\n        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\")\n        factor: 2 # a factor to multiply the base duration after each failed retry\n        maxDuration: 3m # the maximum amount of time allowed for the backoff strategy\n\n  # Will ignore differences between live and desired states during the diff. Note that these configurations are not\n  # used during the sync process unless the `RespectIgnoreDifferences=true` sync option is enabled.\n  ignoreDifferences:\n  # for the specified json pointers\n  - group: apps\n    kind: Deployment\n    jsonPointers:\n    - /spec/replicas\n  - kind: ConfigMap\n    jqPathExpressions:\n    - '.data[\"config.yaml\"].auth'\n  # for the specified managedFields managers\n  - group: \"*\"\n    kind: \"*\"\n    managedFieldsManagers:\n    - kube-controller-manager\n    # Name and namespace are optional. If specified, they must match exactly, these are not glob patterns.\n    name: my-deployment\n    namespace: my-namespace\n\n  # RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for\n  # informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional\n  # circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the\n  # space used to store the history, so we do not recommend increasing it.\n  revisionHistoryLimit: 10\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-specification", "title": "Application Specification", "description": "The following describes all the available fields of an Application:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:07:19", "type": "overview", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/user-guide/application-specification/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Application Specification Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "5fd12b23-0ce9-4163-9fa8-216284fd440a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-specification", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-specification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Application Specification\"?\n\nAssistant: Here are some code examples:\n\n### Application YAML Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\n  labels:\n    name: guestbook\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n    helm:\n      passCredentials: false\n      parameters:\n      - name: \"nginx-ingress.controller.service.annotations.external-dns\\.alpha\\.kubernetes\\.io/hostname\"\n        value: mydomain.example.com\n      - name: \"ingress.annotations.kubernetes\\.io/tls-acme\"\n        value: \"true\"\n        forceString: true\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: guestbook\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n      allowEmpty: false\n  revisionHistoryLimit: 10\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-specification", "title": "Application Specification", "description": "The following describes all the available fields of an Application:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:07:19", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/user-guide/application-specification/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Application Specification Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "5fd12b23-0ce9-4163-9fa8-216284fd440a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-specification", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-specification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Application Specification\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to add your resources to the argocd namespace.\n• Use finalizers only if you want cascading deletion.\n• Add labels to your application object for better management.\n• Specify the correct Helm version to avoid compatibility issues.\n• Use the correct Kubernetes API version for templating manifests.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-specification", "title": "Application Specification", "description": "The following describes all the available fields of an Application:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:07:19", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-resolver-filename": "/user-guide/application-specification/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Application Specification Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "5fd12b23-0ce9-4163-9fa8-216284fd440a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-specification", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application-specification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Tools\"?\n\nAssistant: This section covers the different ways in which Kubernetes manifests can be defined and managed using Argo CD.\n\nHere's a detailed explanation:\n\n\n## Production\nArgo CD supports several different ways in which Kubernetes manifests can be defined:\n\n- Kustomize applications\n- Helm charts\n- A directory of YAML/JSON/Jsonnet manifests, including Jsonnet.\n- Any custom config management tool configured as a config management plugin.\n\n## Development\nArgo CD also supports uploading local manifests directly. Since this is an anti-pattern of the GitOps paradigm, this should only be done for development purposes. A user with an `override` permission is required to upload manifests locally (typically an admin). All of the different Kubernetes deployment tools above are supported.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources", "title": "Tools", "description": "This section covers the different ways in which Kubernetes manifests can be defined and managed using Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:08:26", "type": "overview", "page_metadata": {"language": "en", "title": "Tools - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/application_sources/", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "42267142-f347-435f-93db-02d72b72e564", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Tools\"?\n\nAssistant: Here are some code examples:\n\n### Upload a Local Application\n```yaml\n$ argocd app sync APPNAME --local /path/to/dir/\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources", "title": "Tools", "description": "This section covers the different ways in which Kubernetes manifests can be defined and managed using Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:08:26", "type": "code_examples", "page_metadata": {"language": "en", "title": "Tools - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/application_sources/", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "42267142-f347-435f-93db-02d72b72e564", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Tools\"?\n\nAssistant: Here are the recommended best practices:\n\n• Uploading local manifests should only be done for development purposes as it is an anti-pattern of the GitOps paradigm.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources", "title": "Tools", "description": "This section covers the different ways in which Kubernetes manifests can be defined and managed using Argo CD.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:08:26", "type": "best_practices", "page_metadata": {"language": "en", "title": "Tools - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/application_sources/", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "42267142-f347-435f-93db-02d72b72e564", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Automated Sync Policy\"?\n\nAssistant: Argo CD has the ability to automatically sync an application when it detects differences between the desired manifests in Git, and the live state in the cluster. A benefit of automatic sync is that CI/CD pipelines no longer need direct access to the Argo CD API server to perform the deployment. Instead, the pipeline makes a commit and push to the Git repository with the changes to the manifests in the tracking Git repo.\n\nHere's a detailed explanation:\n\n\n## Automatic Pruning\nBy default (and as a safety mechanism), automated sync will not delete resources when Argo CD detects the resource is no longer defined in Git. To prune the resources, a manual sync can always be performed (with pruning checked). Pruning can also be enabled to happen automatically as part of the automated sync by running:\n\n```\nargocd app set <APPNAME> --auto-prune\n```\n\nOr by setting the prune option to true in the automated sync policy:\n\n```\nspec:\n  syncPolicy:\n    automated:\n      prune: true\n```\n\n## Automatic Pruning with Allow-Empty (v1.8)\nBy default (and as a safety mechanism), automated sync with prune have a protection from any automation/human errors when there are no target resources. It prevents application from having empty resources. To allow applications have empty resources, run:\n\n```\nargocd app set <APPNAME> --allow-empty\n```\n\nOr by setting the allow empty option to true in the automated sync policy:\n\n```\nspec:\n  syncPolicy:\n    automated:\n      prune: true\n      allowEmpty: true\n```\n\n## Automatic Self-Healing\nBy default, changes that are made to the live cluster will not trigger automated sync. To enable automatic sync when the live cluster's state deviates from the state defined in Git, run:\n\n```\nargocd app set <APPNAME> --self-heal\n```\n\nOr by setting the self heal option to true in the automated sync policy:\n\n```\nspec:\n  syncPolicy:\n    automated:\n      selfHeal: true\n```\n\nDisabling self-heal does not guarantee that live cluster changes won't be reverted in multi-source applications. Even if a resource's source remains unchanged, changes in one of the sources can trigger `autosync`. To handle such cases, consider disabling `autosync`.\n\n## Automated Sync Semantics\n- An automated sync will only be performed if the application is OutOfSync. Applications in a Synced or error state will not attempt automated sync.\n- Automated sync will only attempt one synchronization per unique combination of commit SHA1 and application parameters. If the most recent successful sync in the history was already performed against the same commit-SHA and parameters, a second sync will not be attempted, unless `selfHeal` flag is set to true.\n- If `selfHeal` flag is set to true then sync will be attempted again after self heal timeout (5 seconds by default) which is controlled by `--self-heal-timeout-seconds` flag of `argocd-application-controller` deployment.\n- Automatic sync will not reattempt a sync if the previous sync attempt against the same commit-SHA and parameters had failed.\n- Rollback cannot be performed against an application with automated sync enabled.\n- The automatic sync interval is determined by [the `timeout.reconciliation` value in the `argocd-cm` ConfigMap](https://argo-cd.readthedocs.io/en/stable/faq/#how-often-does-argo-cd-check-for-changes-to-my-git-or-helm-repository), which defaults to `180s` (3 minutes).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync", "title": "Automated Sync Policy", "description": "Argo CD has the ability to automatically sync an application when it detects differences between the desired manifests in Git, and the live state in the cluster. A benefit of automatic sync is that CI/CD pipelines no longer need direct access to the Argo CD API server to perform the deployment. Instead, the pipeline makes a commit and push to the Git repository with the changes to the manifests in the tracking Git repo.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:08:40", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/auto_sync/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Automated Sync Policy - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "ddf4ab66-8a48-4fe7-8621-b45685135727", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Automated Sync Policy\"?\n\nAssistant: Here are some code examples:\n\n### Set Automated Sync Policy\n```yaml\nargocd app set <APPNAME> --sync-policy automated\n```\n\n### Set Automated Sync Policy with Prune\n```yaml\nargocd app set <APPNAME> --auto-prune\n```\n\n### Set Automated Sync Policy with Allow-Empty\n```yaml\nargocd app set <APPNAME> --allow-empty\n```\n\n### Set Automated Sync Policy with Self-Heal\n```yaml\nargocd app set <APPNAME> --self-heal\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync", "title": "Automated Sync Policy", "description": "Argo CD has the ability to automatically sync an application when it detects differences between the desired manifests in Git, and the live state in the cluster. A benefit of automatic sync is that CI/CD pipelines no longer need direct access to the Argo CD API server to perform the deployment. Instead, the pipeline makes a commit and push to the Git repository with the changes to the manifests in the tracking Git repo.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:08:40", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/auto_sync/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Automated Sync Policy - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "ddf4ab66-8a48-4fe7-8621-b45685135727", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Automated Sync Policy\"?\n\nAssistant: Here are the recommended best practices:\n\n• Disabling self-heal does not guarantee that live cluster changes won't be reverted in multi-source applications. Consider disabling autosync to handle such cases.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync", "title": "Automated Sync Policy", "description": "Argo CD has the ability to automatically sync an application when it detects differences between the desired manifests in Git, and the live state in the cluster. A benefit of automatic sync is that CI/CD pipelines no longer need direct access to the Argo CD API server to perform the deployment. Instead, the pipeline makes a commit and push to the Git repository with the changes to the manifests in the tracking Git repo.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:08:40", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/auto_sync/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "Automated Sync Policy - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "ddf4ab66-8a48-4fe7-8621-b45685135727", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Best Practices\"?\n\nAssistant: Guidelines for managing Kubernetes manifests and application configurations effectively.\n\nHere's a detailed explanation:\n\n\n## Separating Config Vs. Source Code Repositories\nUsing a separate Git repository to hold your Kubernetes manifests, keeping the config separate from your application source code, is highly recommended for the following reasons:\n\n1. It provides a clean separation of application code vs. application config. There will be times when you wish to modify just the manifests without triggering an entire CI build. For example, you likely do _not_ want to trigger a build if you simply wish to bump the number of replicas in a Deployment spec.\n\n2. Cleaner audit log. For auditing purposes, a repo which only holds configuration will have a much cleaner Git history of what changes were made, without the noise coming from check-ins due to normal development activity.\n\n3. Your application may be comprised of services built from multiple Git repositories, but is deployed as a single unit. Oftentimes, microservices applications are comprised of services with different versioning schemes, and release cycles (e.g. ELK, Kafka + ZooKeeper). It may not make sense to store the manifests in one of the source code repositories of a single component.\n\n4. Separation of access. The developers who are developing the application, may not necessarily be the same people who can/should push to production environments, either intentionally or unintentionally. By having separate repos, commit access can be given to the source code repo, and not the application config repo.\n\n5. If you are automating your CI pipeline, pushing manifest changes to the same Git repository can trigger an infinite loop of build jobs and Git commit triggers. Having a separate repo to push config changes to, prevents this from happening.\n\n## Leaving Room For Imperativeness\nIt may be desired to leave room for some imperativeness/automation, and not have everything defined in your Git manifests. For example, if you want the number of your deployment's replicas to be managed by Horizontal Pod Autoscaler, then you would not want to track `replicas` in Git.\n\n## Ensuring Manifests At Git Revisions Are Truly Immutable\nWhen using templating tools like `helm` or `kustomize`, it is possible for manifests to change their meaning from one day to the next. This is typically caused by changes made to an upstream helm repository or kustomize base.\n\nFor example, consider the following kustomization.yaml:\n\nThe above kustomization has a remote base to the HEAD revision of the argo-cd repo. Since this is not a stable target, the manifests for this kustomize application can suddenly change meaning, even without any changes to your own Git repository.\n\nA better version would be to use a Git tag or commit SHA.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/best_practices", "title": "Best Practices", "description": "Guidelines for managing Kubernetes manifests and application configurations effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:08:50", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/best_practices/", "readthedocs-http-status": "200", "title": "Best Practices - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "9679f7ec-245e-422e-89e2-739746ca106d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/best_practices", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/best_practices/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Best Practices\"?\n\nAssistant: Here are some code examples:\n\n### Deployment Example with HPA\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  # do not include replicas in the manifests if you want replicas to be controlled by HPA\n  # replicas: 1\n  template:\n    spec:\n      containers:\n      - image: nginx:1.7.9\n        name: nginx\n        ports:\n        - containerPort: 80\n...\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/best_practices", "title": "Best Practices", "description": "Guidelines for managing Kubernetes manifests and application configurations effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:08:50", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/best_practices/", "readthedocs-http-status": "200", "title": "Best Practices - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "9679f7ec-245e-422e-89e2-739746ca106d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/best_practices", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/best_practices/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Best Practices\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use a separate Git repository for Kubernetes manifests to maintain a clean separation from application source code.\n• Maintain a cleaner audit log by using a dedicated configuration repository.\n• Consider the deployment of microservices from multiple repositories as a single unit.\n• Separate access controls for developers and production environments by using different repositories.\n• Prevent infinite loops in CI pipelines by pushing manifest changes to a separate repository.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/best_practices", "title": "Best Practices", "description": "Guidelines for managing Kubernetes manifests and application configurations effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:08:50", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/best_practices/", "readthedocs-http-status": "200", "title": "Best Practices - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "9679f7ec-245e-422e-89e2-739746ca106d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/best_practices", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/best_practices/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Build Environment\"?\n\nAssistant: Custom tools, Helm, Jsonnet, and Kustomize support the following build env vars:\n\nHere's a detailed explanation:\n\n\n## Build Environment Variables\nCustom tools, Helm, Jsonnet, and Kustomize support the following build env vars:\n\n| Variable | Description |\n| --- | --- |\n| `ARGOCD_APP_NAME` | The name of the application. |\n| `ARGOCD_APP_NAMESPACE` | The destination namespace of the application. |\n| `ARGOCD_APP_REVISION` | The resolved revision, e.g. `f913b6cbf58aa5ae5ca1f8a2b149477aebcbd9d8`. |\n| `ARGOCD_APP_REVISION_SHORT` | The resolved short revision, e.g. `f913b6c`. |\n| `ARGOCD_APP_REVISION_SHORT_8` | The resolved short revision with length 8, e.g. `f913b6cb`. |\n| `ARGOCD_APP_SOURCE_PATH` | The path of the app within the source repo. |\n| `ARGOCD_APP_SOURCE_REPO_URL` | The source repo URL. |\n| `ARGOCD_APP_SOURCE_TARGET_REVISION` | The target revision from the spec, e.g. `master`. |\n| `KUBE_VERSION` | The version of Kubernetes. |\n| `KUBE_API_VERSIONS` | The version of the Kubernetes API.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/build-environment", "title": "Build Environment", "description": "Custom tools, Helm, Jsonnet, and Kustomize support the following build env vars:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:08:56", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/build-environment/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Build Environment - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "f084cf42-dedb-478c-90b3-8de693ad1739", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/build-environment", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/build-environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Build Environment\"?\n\nAssistant: Here are some code examples:\n\n### Example of Escaping Variable\n```yaml\ncommand:\n  - sh\n  - -c\n  - |\n    echo $$FOO\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/build-environment", "title": "Build Environment", "description": "Custom tools, Helm, Jsonnet, and Kustomize support the following build env vars:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:08:56", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/build-environment/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Build Environment - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "f084cf42-dedb-478c-90b3-8de693ad1739", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/build-environment", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/build-environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Build Environment\"?\n\nAssistant: Here are the recommended best practices:\n\n• In case you don't want a variable to be interpolated, `$` can be escaped via `$$`.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/build-environment", "title": "Build Environment", "description": "Custom tools, Helm, Jsonnet, and Kustomize support the following build env vars:", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:08:56", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/build-environment/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Build Environment - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "f084cf42-dedb-478c-90b3-8de693ad1739", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/build-environment", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/build-environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Automation from CI Pipelines\"?\n\nAssistant: Argo CD follows the GitOps model of deployment, where desired configuration changes are first pushed to Git, and the cluster state then syncs to the desired state in git. This is a departure from imperative pipelines which do not traditionally use Git repositories to hold application config.\n\nHere's a detailed explanation:\n\n\n## Build And Publish A New Container Image\n```\ndocker build -t mycompany/guestbook:v2.0 .\ndocker push mycompany/guestbook:v2.0\n```\n\n## Update The Local Manifests Using Your Preferred Templating Tool, And Push The Changes To Git\nTip\n\nThe use of a different Git repository to hold your Kubernetes manifests (separate from your application source code), is highly recommended. See [best practices](https://argo-cd.readthedocs.io/en/stable/user-guide/best_practices/) for further rationale.\n\n```\ngit clone https://github.com/mycompany/guestbook-config.git\ncd guestbook-config\n\n# kustomize\nkustomize edit set image mycompany/guestbook:v2.0\n\n# plain yaml\nkubectl patch --local -f config-deployment.yaml -p '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"guestbook\",\"image\":\"mycompany/guestbook:v2.0\"}]}}}}' -o yaml\n\ngit add . -m \"Update guestbook to v2.0\"\ngit push\n```\n\n## Synchronize The App (Optional)\nFor convenience, the argocd CLI can be downloaded directly from the API server. This is useful so that the CLI used in the CI pipeline is always kept in-sync and uses argocd binary that is always compatible with the Argo CD API server.\n\n```\nexport ARGOCD_SERVER=argocd.example.com\nexport ARGOCD_AUTH_TOKEN=<JWT token generated from project>\ncurl -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64\nargocd app sync guestbook\nargocd app wait guestbook\n```\n\nIf [automated synchronization](https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync/) is configured for the application, this step is unnecessary. The controller will automatically detect the new config (fast tracked using a [webhook](https://argo-cd.readthedocs.io/en/stable/operator-manual/webhook/), or polled every 3 minutes), and automatically sync the new manifests.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/ci_automation", "title": "Automation from CI Pipelines", "description": "Argo CD follows the GitOps model of deployment, where desired configuration changes are first pushed to Git, and the cluster state then syncs to the desired state in git. This is a departure from imperative pipelines which do not traditionally use Git repositories to hold application config.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:09:09", "type": "overview", "page_metadata": {"title": "Automation from CI Pipelines - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/ci_automation/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "0d1a56f9-a76c-42b4-bf58-d2731a874199", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/ci_automation", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/ci_automation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Automation from CI Pipelines\"?\n\nAssistant: Here are some code examples:\n\n### Build And Publish A New Container Image\n```yaml\n```\ndocker build -t mycompany/guestbook:v2.0 .\ndocker push mycompany/guestbook:v2.0\n```\n```\n\n### Update The Local Manifests Using Your Preferred Templating Tool, And Push The Changes To Git\n```yaml\n```\ngit clone https://github.com/mycompany/guestbook-config.git\ncd guestbook-config\n\n# kustomize\nkustomize edit set image mycompany/guestbook:v2.0\n\n# plain yaml\nkubectl patch --local -f config-deployment.yaml -p '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"guestbook\",\"image\":\"mycompany/guestbook:v2.0\"}]}}}}' -o yaml\n\ngit add . -m \"Update guestbook to v2.0\"\ngit push\n```\n```\n\n### Synchronize The App (Optional)\n```yaml\n```\nexport ARGOCD_SERVER=argocd.example.com\nexport ARGOCD_AUTH_TOKEN=<JWT token generated from project>\ncurl -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64\nargocd app sync guestbook\nargocd app wait guestbook\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/ci_automation", "title": "Automation from CI Pipelines", "description": "Argo CD follows the GitOps model of deployment, where desired configuration changes are first pushed to Git, and the cluster state then syncs to the desired state in git. This is a departure from imperative pipelines which do not traditionally use Git repositories to hold application config.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:09:09", "type": "code_examples", "page_metadata": {"title": "Automation from CI Pipelines - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/ci_automation/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "0d1a56f9-a76c-42b4-bf58-d2731a874199", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/ci_automation", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/ci_automation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Automation from CI Pipelines\"?\n\nAssistant: Here are the recommended best practices:\n\n• The use of a different Git repository to hold your Kubernetes manifests (separate from your application source code), is highly recommended. See best practices for further rationale.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/ci_automation", "title": "Automation from CI Pipelines", "description": "Argo CD follows the GitOps model of deployment, where desired configuration changes are first pushed to Git, and the cluster state then syncs to the desired state in git. This is a departure from imperative pipelines which do not traditionally use Git repositories to hold application config.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:09:09", "type": "best_practices", "page_metadata": {"title": "Automation from CI Pipelines - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/ci_automation/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "0d1a56f9-a76c-42b4-bf58-d2731a874199", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/ci_automation", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/ci_automation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Compare Options\"?\n\nAssistant: This page covers how to ignore extraneous resources in Argo CD's sync status and provides examples of annotations and configurations.\n\nHere's a detailed explanation:\n\n\n## Ignoring Resources That Are Extraneous\nYou may wish to exclude resources from the app's overall sync status under certain circumstances. E.g. if they are generated by a tool. This can be done by adding this annotation on the resource you wish to exclude:\n\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: IgnoreExtraneous\n```\n\n![compare option needs pruning](https://argo-cd.readthedocs.io/en/stable/assets/compare-option-ignore-needs-pruning.png)\n\nNote\n\nThis only affects the sync status. If the resource's health is degraded, then the app will also be degraded.\n\nKustomize has a feature that allows you to generate config maps ( [read more ⧉](https://github.com/kubernetes-sigs/kustomize/blob/master/examples/configGeneration.md)). You can set `generatorOptions` to add this annotation so that your app remains in sync:\n\n```\nconfigMapGenerator:\n  - name: my-map\n    literals:\n      - foo=bar\ngeneratorOptions:\n  annotations:\n    argocd.argoproj.io/compare-options: IgnoreExtraneous\nkind: Kustomization\n```\n\nNote\n\n`generatorOptions` adds annotations to both config maps and secrets ( [read more ⧉](https://github.com/kubernetes-sigs/kustomize/blob/master/examples/generatorOptions.md)).\n\nYou may wish to combine this with the [`Prune=false` sync option](https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options", "title": "Compare Options", "description": "This page covers how to ignore extraneous resources in Argo CD's sync status and provides examples of annotations and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:09:25", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/compare-options/", "title": "Compare Options - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "7f729ed2-3209-4dd0-ba71-3930aa5310e3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Compare Options\"?\n\nAssistant: Here are some code examples:\n\n### Ignore Extraneous Resource Annotation\n```yaml\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: IgnoreExtraneous\n```\n\n### Kustomize ConfigMap Generator with Ignore Extraneous Annotation\n```yaml\nconfigMapGenerator:\n  - name: my-map\n    literals:\n      - foo=bar\ngeneratorOptions:\n  annotations:\n    argocd.argoproj.io/compare-options: IgnoreExtraneous\nkind: Kustomization\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options", "title": "Compare Options", "description": "This page covers how to ignore extraneous resources in Argo CD's sync status and provides examples of annotations and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:09:25", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/compare-options/", "title": "Compare Options - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "7f729ed2-3209-4dd0-ba71-3930aa5310e3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Compare Options\"?\n\nAssistant: Here are the recommended best practices:\n\n• This only affects the sync status. If the resource's health is degraded, then the app will also be degraded.\n• `generatorOptions` adds annotations to both config maps and secrets.\n• Consider combining this with the `Prune=false` sync option.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options", "title": "Compare Options", "description": "This page covers how to ignore extraneous resources in Argo CD's sync status and provides examples of annotations and configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:09:25", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/compare-options/", "title": "Compare Options - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "7f729ed2-3209-4dd0-ba71-3930aa5310e3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Config Management Plugins\"?\n\nAssistant: This page has been moved to the operator manual.", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/config-management-plugins", "title": "Config Management Plugins", "description": "This page has been moved to the operator manual.", "has_code_examples": false, "has_best_practices": false, "section_count": 0, "timestamp": "2025-02-28 02:09:53", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/config-management-plugins/", "title": "Config Management Plugins - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "6eea1c57-7d29-404a-8dc2-742131ca2e7d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/config-management-plugins", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/config-management-plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Diff Strategies\"?\n\nAssistant: Argo CD calculates the diff between the desired state and the live state in order to define if an Application is out-of-sync. This same logic is also used in Argo CD UI to display the differences between live and desired states for all resources belonging to an application.\n\nHere's a detailed explanation:\n\n\n## Diff Strategies Overview\nArgo CD currently has 3 different strategies to calculate diffs:\n\n- **Legacy**: This is the main diff strategy used by default. It applies a 3-way diff based on live state, desired state and last-applied-configuration (annotation).\n- **Structured-Merge Diff**: Strategy automatically applied when enabling Server-Side Apply sync option.\n- **Server-Side Diff**: New strategy that invokes a Server-Side Apply in dryrun mode in order to generate the predicted live state.\n\n## Structured-Merge Diff\nBeta Feature (Since v2.5.0)\n\nThis feature is in the [Beta](https://github.com/argoproj/argoproj/blob/main/community/feature-status.md#beta) stage. It is generally considered stable, but there may be unhandled edge cases.\n\nThis diff strategy is automatically used when Server-Side Apply sync option is enabled. It uses the [structured-merge-diff](https://github.com/kubernetes-sigs/structured-merge-diff) library used by Kubernetes to calculate diffs based on fields ownership. There are some challenges using this strategy to calculate diffs for CRDs that define default values. After different issues were identified by the community, this strategy is being discontinued in favour of Server-Side Diff.\n\n## Server-Side Diff\nBeta Feature (Since v2.10.0)\n\nThis feature is in the [Beta](https://github.com/argoproj/argoproj/blob/main/community/feature-status.md#beta) stage. It is generally considered stable, but there may be unhandled edge cases.\n\nThis diff strategy will execute a Server-Side Apply in dryrun mode for each resource of the application. The response of this operation is then compared with the live state in order to provide the diff results. The diff results are cached and new Server-Side Apply requests to Kube API are only triggered when:\n\n- An Application refresh or hard-refresh is requested.\n- There is a new revision in the repo which the Argo CD Application is targeting.\n- The Argo CD Application spec changed.\n\nOne advantage of Server-Side Diff is that Kubernetes Admission Controllers will participate in the diff calculation. If for example a validation webhook identifies a resource to be invalid, that will be informed to Argo CD during the diff stage rather than during the sync stage.\n\n## Enabling Server-Side Diff\nServer-Side Diff can be enabled at the Argo CD Controller level or per Application.\n\n**Enabling Server-Side Diff for all Applications**\n\nAdd the following entry in the argocd-cmd-params-cm configmap:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n  controller.diff.server.side: \"true\"\n...\n```\n\nNote: It is necessary to restart the `argocd-application-controller` after applying this configuration.\n\n**Enabling Server-Side Diff for one application**\n\nAdd the following annotation in the Argo CD Application resource:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: ServerSideDiff=true\n...\n```\n\n**Disabling Server-Side Diff for one application**\n\nIf Server-Side Diff is enabled globally in your Argo CD instance, it is possible to disable it at the application level. In order to do so, add the following annotation in the Application resource:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: ServerSideDiff=false\n...\n```\n\n_Note: Please report any issues that forced you to disable the_ _Server-Side Diff feature_.\n\n## Mutation Webhooks\nServer-Side Diff does not include changes made by mutation webhooks by default. If you want to include mutation webhooks in Argo CD diffs add the following annotation in the Argo CD Application resource:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: IncludeMutationWebhook=true\n...\n```\n\nNote: This annotation is only effective when Server-Side Diff is enabled. To enable both options for a given application add the following annotation in the Argo CD Application resource:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: ServerSideDiff=true,IncludeMutationWebhook=true\n...\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diff-strategies", "title": "Diff Strategies", "description": "Argo CD calculates the diff between the desired state and the live state in order to define if an Application is out-of-sync. This same logic is also used in Argo CD UI to display the differences between live and desired states for all resources belonging to an application.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:10:49", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Diff Strategies - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/diff-strategies/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "5f5cb635-8e9c-48a7-be66-f7158efa6f87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/diff-strategies", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diff-strategies/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Diff Strategies\"?\n\nAssistant: Here are some code examples:\n\n### Enabling Server-Side Diff for all Applications\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n  controller.diff.server.side: \"true\"\n...\n```\n\n### Enabling Server-Side Diff for one application\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: ServerSideDiff=true\n...\n```\n\n### Disabling Server-Side Diff for one application\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: ServerSideDiff=false\n...\n```\n\n### Including Mutation Webhook in Argo CD diffs\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: IncludeMutationWebhook=true\n...\n```\n\n### Enabling both options for a given application\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/compare-options: ServerSideDiff=true,IncludeMutationWebhook=true\n...\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diff-strategies", "title": "Diff Strategies", "description": "Argo CD calculates the diff between the desired state and the live state in order to define if an Application is out-of-sync. This same logic is also used in Argo CD UI to display the differences between live and desired states for all resources belonging to an application.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:10:49", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Diff Strategies - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/diff-strategies/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "5f5cb635-8e9c-48a7-be66-f7158efa6f87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/diff-strategies", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diff-strategies/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Diff Strategies\"?\n\nAssistant: Here are the recommended best practices:\n\n• It is necessary to restart the `argocd-application-controller` after applying the configuration to enable Server-Side Diff for all applications.\n• Please report any issues that forced you to disable the Server-Side Diff feature.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diff-strategies", "title": "Diff Strategies", "description": "Argo CD calculates the diff between the desired state and the live state in order to define if an Application is out-of-sync. This same logic is also used in Argo CD UI to display the differences between live and desired states for all resources belonging to an application.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:10:49", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Diff Strategies - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/diff-strategies/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "5f5cb635-8e9c-48a7-be66-f7158efa6f87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/diff-strategies", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diff-strategies/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Diffing Customization\"?\n\nAssistant: This page covers the customization options available in Argo CD for diffing application resources, including how to ignore differences in specific fields or resources.\n\nHere's a detailed explanation:\n\n\n## Application Level Configuration\nArgo CD allows ignoring differences at a specific JSON path, using [RFC6902 JSON patches](https://tools.ietf.org/html/rfc6902) and [JQ path expressions](https://stedolan.github.io/jq/manual/#path(path_expression)). It is also possible to ignore differences from fields owned by specific managers defined in `metadata.managedFields` in live resources.\n\nThe following sample application is configured to ignore differences in `spec.replicas` for all deployments:\n\n```\nspec:\n  ignoreDifferences:\n  - group: apps\n    kind: Deployment\n    jsonPointers:\n    - /spec/replicas\n```\n\nNote that the `group` field relates to the [Kubernetes API group](https://kubernetes.io/docs/reference/using-api/#api-groups) without the version.\nThe above customization could be narrowed to a resource with the specified name and optional namespace:\n\n```\nspec:\n  ignoreDifferences:\n  - group: apps\n    kind: Deployment\n    name: guestbook\n    namespace: default\n    jsonPointers:\n    - /spec/replicas\n```\n\nTo ignore elements of a list, you can use JQ path expressions to identify list items based on item content:\n\n```\nspec:\n  ignoreDifferences:\n  - group: apps\n    kind: Deployment\n    jqPathExpressions:\n    - .spec.template.spec.initContainers[] | select(.name == \"injected-init-container\")\n```\n\nTo ignore fields owned by specific managers defined in your live resources:\n\n```\nspec:\n  ignoreDifferences:\n  - group: \"*\"\n    kind: \"*\"\n    managedFieldsManagers:\n    - kube-controller-manager\n```\n\nThe above configuration will ignore differences from all fields owned by `kube-controller-manager` for all resources belonging to this application.\n\nIf you have a slash `/` in your pointer path, you need to replace it with the `~1` character. For example:\n\n```\nspec:\n  ignoreDifferences:\n  - kind: Node\n    jsonPointers:\n    - /metadata/labels/node-role.kubernetes.io~1worker\n```\n\n## System-Level Configuration\nThe comparison of resources with well-known issues can be customized at a system level. Ignored differences can be configured for a specified group and kind in `resource.customizations` key of `argocd-cm` ConfigMap. Following is an example of a customization which ignores the `caBundle` field of a `MutatingWebhookConfiguration` webhooks:\n\n```\ndata:\n  resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |\n    jqPathExpressions:\n    - '.webhooks[]?.clientConfig.caBundle'\n```\n\nResource customization can also be configured to ignore all differences made by a managedField.manager at the system level. The example below shows how to configure Argo CD to ignore changes made by `kube-controller-manager` in `Deployment` resources.\n\n```\ndata:\n  resource.customizations.ignoreDifferences.apps_Deployment: |\n    managedFieldsManagers:\n    - kube-controller-manager\n```\n\nIt is possible to configure ignoreDifferences to be applied to all resources in every Application managed by an Argo CD instance. In order to do so, resource customizations can be configured like in the example below:\n\n```\ndata:\n  resource.customizations.ignoreDifferences.all: |\n    managedFieldsManagers:\n    - kube-controller-manager\n    jsonPointers:\n    - /spec/replicas\n```\n\nThe `status` field of `CustomResourceDefinitions` is often stored in Git/Helm manifest and should be ignored during diffing. The `ignoreResourceStatusField` setting simplifies handling that edge case:\n\n```\ndata:\n  resource.compareoptions: |\n    # disables status field diffing in specified resource types\n    # 'crd' - CustomResourceDefinitions (default)\n    # 'all' - all resources\n    # 'none' - disabled\n    ignoreResourceStatusField: crd\n```\n\nBy default `status` field is ignored during diffing for `CustomResourceDefinition` resource. The behavior can be extended to all resources using `all` value or disabled using `none`.\n\n## Ignoring RBAC changes made by AggregateRoles\nIf you are using [Aggregated ClusterRoles](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles) and don't want Argo CD to detect the `rules` changes as drift, you can set `resource.compareoptions.ignoreAggregatedRoles: true`. Then Argo CD will no longer detect these changes as an event that requires syncing.\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  resource.compareoptions: |\n    # disables status field diffing in specified resource types\n    ignoreAggregatedRoles: true\n```\n\n## Known Kubernetes types in CRDs (Resource limits, Volume mounts etc)\nSome CRDs are re-using data structures defined in the Kubernetes source base and therefore inheriting custom JSON/YAML marshaling. Custom marshalers might serialize CRDs in a slightly different format that causes false positives during drift detection.\n\nA typical example is the `argoproj.io/Rollout` CRD that re-using `core/v1/PodSpec` data structure. Pod resource requests might be reformatted by the custom marshaller of `IntOrString` data type:\n\nfrom:\n\n```\nresources:\n  requests:\n    cpu: 100m\n```\n\nto:\n\n```\nresources:\n  requests:\n    cpu: 0.1\n```\n\nThe solution is to specify which CRDs fields are using built-in Kubernetes types in the `resource.customizations` section of `argocd-cm` ConfigMap:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  resource.customizations.knownTypeFields.argoproj.io_Rollout: |\n    - field: spec.template.spec\n      type: core/v1/PodSpec\n```\n\nThe list of supported Kubernetes types is available in [diffing_known_types.txt](https://raw.githubusercontent.com/argoproj/argo-cd/master/util/argo/normalizers/diffing_known_types.txt) and additionally:\n- `core/Quantity`\n- `meta/v1/duration`\n\n## JQ Path expression timeout\nBy default, the evaluation of a JQPathExpression is limited to one second. If you encounter a \"JQ patch execution timed out\" error message due to a complex JQPathExpression that requires more time to evaluate, you can extend the timeout period by configuring the `ignore.normalizer.jq.timeout` setting within the `argocd-cmd-params-cm` ConfigMap.\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n  ignore.normalizer.jq.timeout: \"5s\"\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diffing", "title": "Diffing Customization", "description": "This page covers the customization options available in Argo CD for diffing application resources, including how to ignore differences in specific fields or resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:11:23", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "title": "Diff Customization - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/diffing/", "scrapeId": "0fc85292-19f1-41bf-aa9d-6627296de225", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/diffing", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Diffing Customization\"?\n\nAssistant: Here are some code examples:\n\n### Ignore Differences in Spec Replicas for All Deployments\n```yaml\nspec:\n  ignoreDifferences:\n  - group: apps\n    kind: Deployment\n    jsonPointers:\n    - /spec/replicas\n```\n\n### Ignore Differences in Spec Replicas for a Specific Deployment\n```yaml\nspec:\n  ignoreDifferences:\n  - group: apps\n    kind: Deployment\n    name: guestbook\n    namespace: default\n    jsonPointers:\n    - /spec/replicas\n```\n\n### Ignore Elements of a List Using JQ Path Expressions\n```yaml\nspec:\n  ignoreDifferences:\n  - group: apps\n    kind: Deployment\n    jqPathExpressions:\n    - .spec.template.spec.initContainers[] | select(.name == \"injected-init-container\")\n```\n\n### Ignore Differences from All Fields Owned by Kube-Controller-Manager\n```yaml\nspec:\n  ignoreDifferences:\n  - group: \"*\"\n    kind: \"*\"\n    managedFieldsManagers:\n    - kube-controller-manager\n```\n\n### Ignore Differences with Slash in Pointer Path\n```yaml\nspec:\n  ignoreDifferences:\n  - kind: Node\n    jsonPointers:\n    - /metadata/labels/node-role.kubernetes.io~1worker\n```\n\n### Ignore caBundle Field of a MutatingWebhookConfiguration\n```yaml\ndata:\n  resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |\n    jqPathExpressions:\n    - '.webhooks[]?.clientConfig.caBundle'\n```\n\n### Ignore Changes Made by Kube-Controller-Manager in Deployment Resources\n```yaml\ndata:\n  resource.customizations.ignoreDifferences.apps_Deployment: |\n    managedFieldsManagers:\n    - kube-controller-manager\n```\n\n### Ignore Differences for All Resources in Every Application\n```yaml\ndata:\n  resource.customizations.ignoreDifferences.all: |\n    managedFieldsManagers:\n    - kube-controller-manager\n    jsonPointers:\n    - /spec/replicas\n```\n\n### Ignore Status Field Diffing in CustomResourceDefinitions\n```yaml\ndata:\n  resource.compareoptions: |\n    ignoreResourceStatusField: crd\n```\n\n### Ignore Aggregated Roles Changes\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\ndata:\n  resource.compareoptions: |\n    ignoreAggregatedRoles: true\n```\n\n### Specify CRDs Fields Using Built-in Kubernetes Types\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  resource.customizations.knownTypeFields.argoproj.io_Rollout: |\n    - field: spec.template.spec\n      type: core/v1/PodSpec\n```\n\n### Extend JQ Path Expression Timeout\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\ndata:\n  ignore.normalizer.jq.timeout: \"5s\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diffing", "title": "Diffing Customization", "description": "This page covers the customization options available in Argo CD for diffing application resources, including how to ignore differences in specific fields or resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:11:23", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "title": "Diff Customization - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/diffing/", "scrapeId": "0fc85292-19f1-41bf-aa9d-6627296de225", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/diffing", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Diffing Customization\"?\n\nAssistant: Here are the recommended best practices:\n\n• When using JQ path expressions, ensure that the expression is efficient to avoid timeout errors.\n• For JSON pointers, replace slashes with `~1` to avoid parsing issues.\n• Consider the implications of ignoring differences at both application and system levels to maintain consistency.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diffing", "title": "Diffing Customization", "description": "This page covers the customization options available in Argo CD for diffing application resources, including how to ignore differences in specific fields or resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:11:23", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "title": "Diff Customization - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/diffing/", "scrapeId": "0fc85292-19f1-41bf-aa9d-6627296de225", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/diffing", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Directory\"?\n\nAssistant: A directory-type application loads plain manifest files from .yml, .yaml, and .json files. A directory-type application may be created from the UI, CLI, or declaratively.\n\nHere's a detailed explanation:\n\n\n## Enabling Recursive Resource Detection\nBy default, directory applications will only include the files from the root of the configured repository/path.\n\nTo enable recursive resource detection, set the `recurse` option.\n\n## Including/Excluding Files\n### Including Only Certain Files\nTo include only certain files/directories in a directory application, set the `include` option. The value is a glob pattern.\n\nFor example, if you want to include only .yaml files, you can use this pattern:\n\n### Excluding Certain Files\nIt is possible to exclude files matching a pattern from directory applications.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/directory", "title": "Directory", "description": "A directory-type application loads plain manifest files from .yml, .yaml, and .json files. A directory-type application may be created from the UI, CLI, or declaratively.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:12:07", "type": "overview", "page_metadata": {"title": "Directory - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/directory/", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "7f20e321-e609-474e-82ad-eb106f5ef304", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/directory", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/directory/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Directory\"?\n\nAssistant: Here are some code examples:\n\n### Declarative Syntax for Directory Application\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\nspec:\n  destination:\n    namespace: default\n    server: https://kubernetes.default.svc\n  project: default\n  source:\n    path: guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n```\n\n### Enable Recursive Resource Detection\n```yaml\nargocd app set guestbook --directory-recurse\n```\n\n### Include Only Certain Files\n```yaml\nargocd app set guestbook --directory-include \"*.yaml\"\n```\n\n### Include Multiple Patterns\n```yaml\nargocd app set guestbook --directory-include \"{*.yml,*.yaml}\"\n```\n\n### Include a Certain Directory\n```yaml\nargocd app set guestbook --directory-include \"some-directory/*\"\n```\n\n### Exclude Certain Files\n```yaml\nargocd app set guestbook --directory-exclude \"config.yaml\"\n```\n\n### Exclude Multiple Patterns\n```yaml\nargocd app set guestbook --directory-exclude \"{config.yaml,env-use2/*}\"\n```\n\n### Include and Exclude Combination\n```yaml\nargocd app set guestbook --directory-include \"*.yaml\" --directory-exclude \"{config.json,env-usw2/*}\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/directory", "title": "Directory", "description": "A directory-type application loads plain manifest files from .yml, .yaml, and .json files. A directory-type application may be created from the UI, CLI, or declaratively.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:12:07", "type": "code_examples", "page_metadata": {"title": "Directory - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/directory/", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "7f20e321-e609-474e-82ad-eb106f5ef304", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/directory", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/directory/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Directory\"?\n\nAssistant: Here are the recommended best practices:\n\n• It is important to quote '*.yaml' so that the shell does not expand the pattern before sending it to Argo CD.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/directory", "title": "Directory", "description": "A directory-type application loads plain manifest files from .yml, .yaml, and .json files. A directory-type application may be created from the UI, CLI, or declaratively.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:12:07", "type": "best_practices", "page_metadata": {"title": "Directory - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/directory/", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "7f20e321-e609-474e-82ad-eb106f5ef304", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/directory", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/directory/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Environment Variables\"?\n\nAssistant: The following environment variables can be used with `argocd` CLI:\n\nHere's a detailed explanation:\n\n\n## Environment Variables\n| Environment Variable | Description |\n| --- | --- |\n| `ARGOCD_SERVER` | the address of the Argo CD server without `https://` prefix <br> (instead of specifying `--server` for every command) <br> eg. `ARGOCD_SERVER=argocd.example.com` if served through an ingress with DNS |\n| `ARGOCD_AUTH_TOKEN` | the Argo CD `apiKey` for your Argo CD user to be able to authenticate |\n| `ARGOCD_OPTS` | command-line options to pass to `argocd` CLI <br> eg. `ARGOCD_OPTS=\"--grpc-web\"` |\n| `ARGOCD_SERVER_NAME` | the Argo CD API Server name (default \"argocd-server\") |\n| `ARGOCD_REPO_SERVER_NAME` | the Argo CD Repository Server name (default \"argocd-repo-server\") |\n| `ARGOCD_APPLICATION_CONTROLLER_NAME` | the Argo CD Application Controller name (default \"argocd-application-controller\") |\n| `ARGOCD_REDIS_NAME` | the Argo CD Redis name (default \"argocd-redis\") |\n| `ARGOCD_REDIS_HAPROXY_NAME` | the Argo CD Redis HA Proxy name (default \"argocd-redis-ha-haproxy\") |\n| `ARGOCD_GRPC_KEEP_ALIVE_MIN` | defines the GRPCKeepAliveEnforcementMinimum, used in the grpc.KeepaliveEnforcementPolicy. Expects a \"Duration\" format (default `10s`). |\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/environment-variables", "title": "Environment Variables", "description": "The following environment variables can be used with `argocd` CLI:", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:12:14", "type": "overview", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "Environment Variables - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/environment-variables/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "128ed4d2-d2b8-41dc-a37d-d798e4bd9a01", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/environment-variables", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/environment-variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Add external URL\"?\n\nAssistant: You can add additional external links to Argo CD dashboard. For example links monitoring pages or documentation instead of just ingress hosts or other apps.\n\nHere's a detailed explanation:\n\n\n## Overview\nArgoCD generates a clickable links to external pages for a resource based on per resource annotation.\n\n## Example\nHere is an example of how to add an external link to a resource in Argo CD.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/external-url", "title": "Add external URL", "description": "You can add additional external links to Argo CD dashboard. For example links monitoring pages or documentation instead of just ingress hosts or other apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:12:18", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/external-url/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Add external URL - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "608ffd31-3465-4148-b69a-a74ebd0cbc42", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/external-url", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Add external URL\"?\n\nAssistant: Here are some code examples:\n\n### External Link Annotation Example\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-svc\n  annotations:\n    link.argocd.argoproj.io/external-link: http://my-grafana.example.com/pre-generated-link\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/external-url", "title": "Add external URL", "description": "You can add additional external links to Argo CD dashboard. For example links monitoring pages or documentation instead of just ingress hosts or other apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:12:18", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/external-url/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Add external URL - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "608ffd31-3465-4148-b69a-a74ebd0cbc42", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/external-url", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Add external URL\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the external link is accessible and valid.\n• Use descriptive names for your resources to make it easier to identify the links.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/external-url", "title": "Add external URL", "description": "You can add additional external links to Argo CD dashboard. For example links monitoring pages or documentation instead of just ingress hosts or other apps.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:12:18", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/external-url/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "Add external URL - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "608ffd31-3465-4148-b69a-a74ebd0cbc42", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/external-url", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Add extra Application info\"?\n\nAssistant: You can add additional information to an Application on your Argo CD dashboard.\n\nHere's a detailed explanation:\n\n\n## Overview\nYou can add additional information to an Application on your Argo CD dashboard. If you wish to add clickable links, see Add external URL.\n\n## Adding Info to Application Manifest\nThis is done by providing the 'info' field a key-value in your Application manifest.\n\n## Example\n```yaml\nproject: argo-demo\nsource:\n  repoURL: 'https://demo'\n  path: argo-demo\ndestination:\n  server: https://demo\n  namespace: argo-demo\ninfo:\n  - name: Example:\n    value: >-\n      https://example.com\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/extra_info", "title": "Add extra Application info", "description": "You can add additional information to an Application on your Argo CD dashboard.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:12:24", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/extra_info/", "language": "en", "title": "Add extra Application info - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "0a03039a-283d-4bb8-9779-b0bce5176be4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/extra_info", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/extra_info/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Add extra Application info\"?\n\nAssistant: Here are some code examples:\n\n### Application Manifest Example\n```yaml\n```yaml\nproject: argo-demo\nsource:\n  repoURL: 'https://demo'\n  path: argo-demo\ndestination:\n  server: https://demo\n  namespace: argo-demo\ninfo:\n  - name: Example:\n    value: >-\n      https://example.com\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/extra_info", "title": "Add extra Application info", "description": "You can add additional information to an Application on your Argo CD dashboard.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:12:24", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/extra_info/", "language": "en", "title": "Add extra Application info - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "0a03039a-283d-4bb8-9779-b0bce5176be4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/extra_info", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/extra_info/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Add extra Application info\"?\n\nAssistant: Here are the recommended best practices:\n\n• The additional information will be visible on the Argo CD Application details page.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/extra_info", "title": "Add extra Application info", "description": "You can add additional information to an Application on your Argo CD dashboard.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:12:24", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/extra_info/", "language": "en", "title": "Add extra Application info - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "0a03039a-283d-4bb8-9779-b0bce5176be4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/extra_info", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/extra_info/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"GnuPG signature verification\"?\n\nAssistant: This page covers the configuration and management of GnuPG signature verification in ArgoCD, including how to enforce signature verification, manage GnuPG keys, and troubleshoot issues.\n\nHere's a detailed explanation:\n\n\n## Overview\nAs of v1.7 it is possible to configure ArgoCD to only sync against commits that are signed in Git using GnuPG. Signature verification is configured on project level.\n\nIf a project is configured to enforce signature verification, all applications associated with this project must have the commits in the source repositories signed with a GnuPG public key known to ArgoCD. ArgoCD will refuse to sync to any revision that does not have a valid signature made by one of the configured keys. The controller will emit a `ResourceComparison` error if it tries to sync to a revision that is either not signed, or is signed by an unknown or not allowed public key.\n\nBy default, signature verification is enabled but not enforced. If you wish to completely disable the GnuPG functionality in ArgoCD, you have to set the environment variable `ARGOCD_GPG_ENABLED` to `\"false\"` in the pod templates of the `argocd-server`, `argocd-repo-server`, `argocd-application-controller` and `argocd-applicationset-controller` deployment manifests.\n\nVerification of GnuPG signatures is only supported with Git repositories. It is not possible using Helm repositories.\n\nA few words about trust\n\nArgoCD uses a very simple trust model for the keys you import: Once the key is imported, ArgoCD will trust it. ArgoCD does not support more complex trust models, and it is not necessary (nor possible) to sign the public keys you are going to import into ArgoCD.\n\nNote\n\nSignature verification is not supported for the templated `project` field when using the Git generator.\n\n## Signature verification targets\nIf signature verification is enforced, ArgoCD will verify the signature using following strategy:\n\n- If `target revision` is a pointer to a commit object (i.e. a branch name, the name of a reference such as `HEAD` or a commit SHA), ArgoCD will perform the signature verification on the commit object the name points to, i.e. a commit.\n\n- If `target revision` resolves to a tag and the tag is a lightweight tag, the behaviour is same as if `target revision` would be a pointer to a commit object. However, if the tag is annotated, the target revision will point to a _tag_ object and thus, the signature verification is performed on the tag object, i.e. the tag itself must be signed (using `git tag -s`).\n\n## Enforcing signature verification\nTo configure enforcing of signature verification, the following steps must be performed:\n\n- Import the GnuPG public key(s) used for signing commits in ArgoCD\n- Configure a project to enforce signature verification for given keys\n\nOnce you have configured one or more keys to be required for verification for a given project, enforcement is active for all applications associated with this project.\n\nWarning\n\nIf signature verification is enforced, you will not be able to sync from local sources (i.e. `argocd app sync --local`) anymore.\n\n## RBAC rules for managing GnuPG keys\nThe appropriate resource notation for Argo CD's RBAC implementation to allow the managing of GnuPG keys is `gpgkeys`.\n\nTo allow listing of keys for a role named `role:myrole`, use:\n\n```\np, role:myrole, gpgkeys, get, *, allow\n```\n\nTo allow adding keys for a role named `role:myrole`, use:\n\n```\np, role:myrole, gpgkeys, create, *, allow\n```\n\nAnd finally, to allow deletion of keys for a role named `role:myrole`, use:\n\n```\np, role:myrole, gpgkeys, delete, *, allow\n```\n\n## Importing GnuPG public keys\nYou can configure the GnuPG public keys that ArgoCD will use for verification of commit signatures using either the CLI, the web UI or configuring it using declarative setup.\n\nNote\n\nAfter you have imported a GnuPG key, it may take a while until the key is propagated within the cluster, even if listed as configured. If you still cannot sync to commits signed by the already imported key, please see the troubleshooting section below.\n\nUsers wanting to manage the GnuPG public key configuration require the RBAC permissions for `gpgkeys` resources.\n\n## Manage public keys using the CLI\nTo configure GnuPG public keys using the CLI, use the `argocd gpg` command.\n\n## Listing all configured keys\nTo list all configured keys known to ArgoCD, use the `argocd gpg list` sub-command:\n\n```\nargocd gpg list\n```\n\n## Show information about a certain key\nTo get information about a specific key, use the `argocd gpg get` sub-command:\n\n```\nargocd gpg get <key-id>\n```\n\n## Importing a key\nTo import a new key to ArgoCD, use the `argocd gpg add` sub-command:\n\n```\nargocd gpg add --from <path-to-key>\n```\n\nThe key to be imported can be either in binary or ASCII-armored format.\n\n## Removing a key from configuration\nTo remove a previously configured key from the configuration, use the `argocd gpg rm` sub-command:\n\n```\nargocd gpg rm <key-id>\n```\n\n## Manage public keys using the Web UI\nBasic key management functionality for listing, importing and removing GnuPG public keys is implemented in the Web UI. You can find the configuration module from the **Settings** page in the **GnuPG keys** module.\n\nPlease note that when you configure keys using the Web UI, the key must be imported in ASCII armored format for now.\n\n## Manage public keys in declarative setup\nArgoCD stores public keys internally in the `argocd-gpg-keys-cm` ConfigMap resource, with the public GnuPG key's ID as its name and the ASCII armored key data as string value, i.e. the entry for the GitHub's web-flow signing key would look like follows:\n\n```\n4AEE18F83AFDEB23: |\n    -----BEGIN PGP PUBLIC KEY BLOCK-----\n\n    mQENBFmUaEEBCACzXTDt6ZnyaVtueZASBzgnAmK13q9Urgch+sKYeIhdymjuMQta\n    x15OklctmrZtqre5kwPUosG3/B2/ikuPYElcHgGPL4uL5Em6S5C/oozfkYzhwRrT\n    SQzvYjsE4I34To4UdE9KA97wrQjGoz2Bx72WDLyWwctD3DKQtYeHXswXXtXwKfjQ\n    7Fy4+Bf5IPh76dA8NJ6UtjjLIDlKqdxLW4atHe6xWFaJ+XdLUtsAroZcXBeWDCPa\n    buXCDscJcLJRKZVc62gOZXXtPfoHqvUPp3nuLA4YjH9bphbrMWMf810Wxz9JTd3v\n    yWgGqNY0zbBqeZoGv+TuExlRHT8ASGFS9SVDABEBAAG0NUdpdEh1YiAod2ViLWZs\n    b3cgY29tbWl0IHNpZ25pbmcpIDxub3JlcGx5QGdpdGh1Yi5jb20+iQEiBBMBCAAW\n    BQJZlGhBCRBK7hj4Ov3rIwIbAwIZAQAAmQEH/iATWFmi2oxlBh3wAsySNCNV4IPf\n    DDMeh6j80WT7cgoX7V7xqJOxrfrqPEthQ3hgHIm7b5MPQlUr2q+UPL22t/I+ESF6\n    9b0QWLFSMJbMSk+BXkvSjH9q8jAO0986/pShPV5DU2sMxnx4LfLfHNhTzjXKokws\n    +8ptJ8uhMNIDXfXuzkZHIxoXk3rNcjDN5c5X+sK8UBRH092BIJWCOfaQt7v7wig5\n    4Ra28pM9GbHKXVNxmdLpCFyzvyMuCmINYYADsC848QQFFwnd4EQnupo6QvhEVx1O\n    j7wDwvuH5dCrLuLwtwXaQh0onG4583p0LGms2Mf5F+Ick6o/4peOlBoZz48=\n    =Bvzs\n    -----END PGP PUBLIC KEY BLOCK-----\n```\n\n## Configuring a project to enforce signature verification\nOnce you have imported the GnuPG keys to ArgoCD, you must now configure the project to enforce the verification of commit signatures with the imported keys.\n\n## Configuring using the CLI\n#### Adding a key ID to list of allowed keys\nTo add a key ID to the list of allowed GnuPG keys for a project, you can use the `argocd proj add-signature-key` command, i.e. the following command would add the key ID `4AEE18F83AFDEB23` to the project named `myproj`:\n\n```\nargocd proj add-signature-key myproj 4AEE18F83AFDEB23\n```\n\n#### Removing a key ID from the list of allowed keys\nSimilarly, you can remove a key ID from the list of allowed GnuPG keys for a project using the `argocd proj remove-signature-key` command, i.e. to remove the key added above from project `myproj`, use the command:\n\n```\nargocd proj remove-signature-key myproj 4AEE18F83AFDEB23\n```\n\n#### Showing allowed key IDs for a project\nTo see which key IDs are allowed for a given project, you can inspect the output of the `argocd proj get` command, i.e for a project named `gpg`:\n\n```\n$ argocd proj get gpg\nName:                        gpg\nDescription:                 GnuPG verification\nDestinations:                *,*\nRepositories:                *\nAllowed Cluster Resources:   */*\nDenied Namespaced Resources: <none>\nSignature keys:              4AEE18F83AFDEB23, 07E34825A909B250\nOrphaned Resources:          disabled\n```\n\n#### Override list of key IDs\nYou can also explicitly set the currently allowed keys with one or more new keys using the `argocd proj set` command in combination with the `--signature-keys` flag, which you can use to specify a comma separated list of allowed key IDs:\n\n```\nargocd proj set myproj --signature-keys 4AEE18F83AFDEB23,07E34825A909B250\n```\n\nThe `--signature-keys` flag can also be used on project creation, i.e. the `argocd proj create` command.\n\n## Configure using the Web UI\nYou can configure the GnuPG key IDs required for signature verification using the web UI, in the Project configuration. Navigate to the **Settings** page and select the **Projects** module, then click on the project you want to configure.\n\nFrom the project's details page, click **Edit** and find the **Required signature keys** section, where you can add or remove the key IDs for signature verification. After you have modified your project, click **Update** to save the changes.\n\n## Configure using declarative setup\nYou can specify the key IDs required for signature verification in the project manifest within the `signatureKeys` section, i.e:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: gpg\n  namespace: argocd\nspec:\n  clusterResourceWhitelist:\n  - group: '*'\n    kind: '*'\n  description: GnuPG verification\n  destinations:\n  - namespace: '*'\n    server: '*'\n  namespaceResourceWhitelist:\n  - group: '*'\n    kind: '*'\n  signatureKeys:\n  - keyID: 4AEE18F83AFDEB23\n  sourceRepos:\n  - '*'\n```\n\n`signatureKeys` is an array of `SignatureKey` objects, whose only property is `keyID` at the moment.\n\n## Troubleshooting\n### Disabling the feature\nThe GnuPG feature can be completely disabled if desired. In order to disable it, set the environment variable `ARGOCD_GPG_ENABLED` to `false` for the pod templates of the `argocd-server`, `argocd-repo-server`, `argocd-application-controller` and `argocd-applicationset-controller` deployments.\n\nAfter the pods have been restarted, the GnuPG feature is disabled.\n\n### GnuPG key ring\nThe GnuPG key ring used for signature verification is maintained within the pods of `argocd-repo-server`. The keys in the keyring are synchronized to the configuration stored in the `argocd-gpg-keys-cm` ConfigMap resource, which is volume-mounted to the `argocd-repo-server` pods.\n\nNote\n\nThe GnuPG key ring in the pods is transient and gets recreated from the configuration on each restart of the pods. You should never add or remove keys manually to the key ring, because your changes will be lost. Also, any of the private keys found in the key ring are transient and will be regenerated upon each restart. The private key is only used to build the trust DB for the running pod.\n\nTo check whether the keys are actually in sync, you can `kubectl exec` into the repository server's pods and inspect the key ring, which is located at path `/app/config/gpg/keys`\n\n```\n$ kubectl exec -it argocd-repo-server-7d6bdfdf6d-hzqkg bash\nargocd@argocd-repo-server-7d6bdfdf6d-hzqkg:~$ GNUPGHOME=/app/config/gpg/keys gpg --list-keys\n/app/config/gpg/keys/pubring.kbx\n--------------------------------\npub   rsa2048 2020-06-15 [SC] [expires: 2020-12-12]\n      D48F075D818A813C436914BC9324F0D2144753B1\nuid           [ultimate] Anon Ymous (ArgoCD key signing key) <noreply@argoproj.io>\n\npub   rsa2048 2017-08-16 [SC]\n      5DE3E0509C47EA3CF04A42D34AEE18F83AFDEB23\nuid           [ultimate] GitHub (web-flow commit signing) <noreply@github.com>\n\nargocd@argocd-repo-server-7d6bdfdf6d-hzqkg:~$\n```\n\nIf the key ring stays out of sync with your configuration after you have added or removed keys for a longer period of time, you might want to restart your `argocd-repo-server` pods. If such a problem persists, please consider raising a bug report.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification", "title": "GnuPG signature verification", "description": "This page covers the configuration and management of GnuPG signature verification in ArgoCD, including how to enforce signature verification, manage GnuPG keys, and troubleshoot issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-02-28 02:13:13", "type": "overview", "page_metadata": {"title": "GnuPG verification - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/gpg-verification/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "6357b849-f23e-4386-8063-e294f65cb88e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"GnuPG signature verification\"?\n\nAssistant: Here are some code examples:\n\n### RBAC rule for listing keys\n```yaml\np, role:myrole, gpgkeys, get, *, allow\n```\n\n### RBAC rule for adding keys\n```yaml\np, role:myrole, gpgkeys, create, *, allow\n```\n\n### RBAC rule for deleting keys\n```yaml\np, role:myrole, gpgkeys, delete, *, allow\n```\n\n### List configured keys\n```yaml\nargocd gpg list\n```\n\n### Get information about a key\n```yaml\nargocd gpg get <key-id>\n```\n\n### Import a new key\n```yaml\nargocd gpg add --from <path-to-key>\n```\n\n### Remove a key\n```yaml\nargocd gpg rm <key-id>\n```\n\n### Add a signature key to a project\n```yaml\nargocd proj add-signature-key myproj 4AEE18F83AFDEB23\n```\n\n### Remove a signature key from a project\n```yaml\nargocd proj remove-signature-key myproj 4AEE18F83AFDEB23\n```\n\n### Show allowed key IDs for a project\n```yaml\n$ argocd proj get gpg\n```\n\n### Override list of key IDs\n```yaml\nargocd proj set myproj --signature-keys 4AEE18F83AFDEB23,07E34825A909B250\n```\n\n### Declarative setup for project\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: gpg\n  namespace: argocd\nspec:\n  clusterResourceWhitelist:\n  - group: '*'\n    kind: '*'\n  description: GnuPG verification\n  destinations:\n  - namespace: '*'\n    server: '*'\n  namespaceResourceWhitelist:\n  - group: '*'\n    kind: '*'\n  signatureKeys:\n  - keyID: 4AEE18F83AFDEB23\n  sourceRepos:\n  - '*'\n```\n\n### Check GnuPG key ring\n```yaml\n$ kubectl exec -it argocd-repo-server-7d6bdfdf6d-hzqkg bash\nargocd@argocd-repo-server-7d6bdfdf6d-hzqkg:~$ GNUPGHOME=/app/config/gpg/keys gpg --list-keys\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification", "title": "GnuPG signature verification", "description": "This page covers the configuration and management of GnuPG signature verification in ArgoCD, including how to enforce signature verification, manage GnuPG keys, and troubleshoot issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-02-28 02:13:13", "type": "code_examples", "page_metadata": {"title": "GnuPG verification - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/gpg-verification/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "6357b849-f23e-4386-8063-e294f65cb88e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"GnuPG signature verification\"?\n\nAssistant: Here are the recommended best practices:\n\n• Signature verification is not supported for the templated `project` field when using the Git generator.\n• After importing a GnuPG key, it may take a while until the key is propagated within the cluster.\n• Users wanting to manage the GnuPG public key configuration require the RBAC permissions for `gpgkeys` resources.\n• When configuring keys using the Web UI, the key must be imported in ASCII armored format.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification", "title": "GnuPG signature verification", "description": "This page covers the configuration and management of GnuPG signature verification in ArgoCD, including how to enforce signature verification, manage GnuPG keys, and troubleshoot issues.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-02-28 02:13:13", "type": "best_practices", "page_metadata": {"title": "GnuPG verification - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/gpg-verification/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "6357b849-f23e-4386-8063-e294f65cb88e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Importing Argo CD go packages\"?\n\nAssistant: This page covers how to import Argo CD packages in your own projects and resolve common dependency issues.\n\nHere's a detailed explanation:\n\n\n## Issue\nWhen importing Argo CD packages in your own projects, you may face some errors when downloading the dependencies, such as \"unknown revision v0.0.0\". This is because Argo CD directly depends on some Kubernetes packages which have these unknown v0.0.0 versions in their go.mod.\n\n## Solution\nAdd a replace section in your own go.mod as same as the replace section of the corresponding Argo CD version's go.mod. In order to find the go.mod for a specific version, navigate to the Argo CD repository and click on the switch branches/tags dropdown to select the version you are looking for. Now you can view the go.mod file for a specific version along with all other files.\n\n## Example\nIf you are using Argo CD v2.4.15, your go.mod should contain the following:\n\n```\nreplace (\n    // https://github.com/golang/go/issues/33546#issuecomment-519656923\n    github.com/go-check/check => github.com/go-check/check v0.0.0-20180628173108-788fd7840127\n\n    github.com/golang/protobuf => github.com/golang/protobuf v1.4.2\n    github.com/gorilla/websocket => github.com/gorilla/websocket v1.4.2\n    github.com/grpc-ecosystem/grpc-gateway => github.com/grpc-ecosystem/grpc-gateway v1.16.0\n    github.com/improbable-eng/grpc-web => github.com/improbable-eng/grpc-web v0.0.0-20181111100011-16092bd1d58a\n\n    // Avoid CVE-2022-28948\n    gopkg.in/yaml.v3 => gopkg.in/yaml.v3 v3.0.1\n\n    // https://github.com/kubernetes/kubernetes/issues/79384#issuecomment-505627280\n    k8s.io/api => k8s.io/api v0.23.1\n    k8s.io/apiextensions-apiserver => k8s.io/apiextensions-apiserver v0.23.1\n    k8s.io/apimachinery => k8s.io/apimachinery v0.23.1\n    k8s.io/apiserver => k8s.io/apiserver v0.23.1\n    k8s.io/cli-runtime => k8s.io/cli-runtime v0.23.1\n    k8s.io/client-go => k8s.io/client-go v0.23.1\n    k8s.io/cloud-provider => k8s.io/cloud-provider v0.23.1\n    k8s.io/cluster-bootstrap => k8s.io/cluster-bootstrap v0.23.1\n    k8s.io/code-generator => k8s.io/code-generator v0.23.1\n    k8s.io/component-base => k8s.io/component-base v0.23.1\n    k8s.io/component-helpers => k8s.io/component-helpers v0.23.1\n    k8s.io/controller-manager => k8s.io/controller-manager v0.23.1\n    k8s.io/cri-api => k8s.io/cri-api v0.23.1\n    k8s.io/csi-translation-lib => k8s.io/csi-translation-lib v0.23.1\n    k8s.io/kube-aggregator => k8s.io/kube-aggregator v0.23.1\n    k8s.io/kube-controller-manager => k8s.io/kube-controller-manager v0.23.1\n    k8s.io/kube-proxy => k8s.io/kube-proxy v0.23.1\n    k8s.io/kube-scheduler => k8s.io/kube-scheduler v0.23.1\n    k8s.io/kubectl => k8s.io/kubectl v0.23.1\n    k8s.io/kubelet => k8s.io/kubelet v0.23.1\n    k8s.io/legacy-cloud-providers => k8s.io/legacy-cloud-providers v0.23.1\n    k8s.io/metrics => k8s.io/metrics v0.23.1\n    k8s.io/mount-utils => k8s.io/mount-utils v0.23.1\n    k8s.io/pod-security-admission => k8s.io/pod-security-admission v0.23.1\n    k8s.io/sample-apiserver => k8s.io/sample-apiserver v0.23.1\n)\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/import", "title": "Importing Argo CD go packages", "description": "This page covers how to import Argo CD packages in your own projects and resolve common dependency issues.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 02:17:03", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Importing Argo CD go packages - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/import/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "4e8bc7df-1c4a-40ae-83e0-7ddd65d7c1c1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/import", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/import/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Importing Argo CD go packages\"?\n\nAssistant: Here are some code examples:\n\n### Go.mod Example for Argo CD v2.4.15\n```yaml\nreplace (\n    // https://github.com/golang/go/issues/33546#issuecomment-519656923\n    github.com/go-check/check => github.com/go-check/check v0.0.0-20180628173108-788fd7840127\n\n    github.com/golang/protobuf => github.com/golang/protobuf v1.4.2\n    github.com/gorilla/websocket => github.com/gorilla/websocket v1.4.2\n    github.com/grpc-ecosystem/grpc-gateway => github.com/grpc-ecosystem/grpc-gateway v1.16.0\n    github.com/improbable-eng/grpc-web => github.com/improbable-eng/grpc-web v0.0.0-20181111100011-16092bd1d58a\n\n    // Avoid CVE-2022-28948\n    gopkg.in/yaml.v3 => gopkg.in/yaml.v3 v3.0.1\n\n    // https://github.com/kubernetes/kubernetes/issues/79384#issuecomment-505627280\n    k8s.io/api => k8s.io/api v0.23.1\n    k8s.io/apiextensions-apiserver => k8s.io/apiextensions-apiserver v0.23.1\n    k8s.io/apimachinery => k8s.io/apimachinery v0.23.1\n    k8s.io/apiserver => k8s.io/apiserver v0.23.1\n    k8s.io/cli-runtime => k8s.io/cli-runtime v0.23.1\n    k8s.io/client-go => k8s.io/client-go v0.23.1\n    k8s.io/cloud-provider => k8s.io/cloud-provider v0.23.1\n    k8s.io/cluster-bootstrap => k8s.io/cluster-bootstrap v0.23.1\n    k8s.io/code-generator => k8s.io/code-generator v0.23.1\n    k8s.io/component-base => k8s.io/component-base v0.23.1\n    k8s.io/component-helpers => k8s.io/component-helpers v0.23.1\n    k8s.io/controller-manager => k8s.io/controller-manager v0.23.1\n    k8s.io/cri-api => k8s.io/cri-api v0.23.1\n    k8s.io/csi-translation-lib => k8s.io/csi-translation-lib v0.23.1\n    k8s.io/kube-aggregator => k8s.io/kube-aggregator v0.23.1\n    k8s.io/kube-controller-manager => k8s.io/kube-controller-manager v0.23.1\n    k8s.io/kube-proxy => k8s.io/kube-proxy v0.23.1\n    k8s.io/kube-scheduler => k8s.io/kube-scheduler v0.23.1\n    k8s.io/kubectl => k8s.io/kubectl v0.23.1\n    k8s.io/kubelet => k8s.io/kubelet v0.23.1\n    k8s.io/legacy-cloud-providers => k8s.io/legacy-cloud-providers v0.23.1\n    k8s.io/metrics => k8s.io/metrics v0.23.1\n    k8s.io/mount-utils => k8s.io/mount-utils v0.23.1\n    k8s.io/pod-security-admission => k8s.io/pod-security-admission v0.23.1\n    k8s.io/sample-apiserver => k8s.io/sample-apiserver v0.23.1\n)\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/import", "title": "Importing Argo CD go packages", "description": "This page covers how to import Argo CD packages in your own projects and resolve common dependency issues.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 02:17:03", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Importing Argo CD go packages - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/import/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "4e8bc7df-1c4a-40ae-83e0-7ddd65d7c1c1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/import", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/import/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Jsonnet\"?\n\nAssistant: Any file matching `*.jsonnet` in a directory app is treated as a Jsonnet file. Argo CD evaluates the Jsonnet and is able to parse a generated object or array.\n\nHere's a detailed explanation:\n\n\n## Build Environment\nJsonnet apps have access to the standard build environment via substitution into _TLAs_ and _external variables_. It is also possible to add a shared library (e.g. `vendor` folder) relative to the repository root.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/jsonnet", "title": "Jsonnet", "description": "Any file matching `*.jsonnet` in a directory app is treated as a Jsonnet file. Argo CD evaluates the Jsonnet and is able to parse a generated object or array.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:17:25", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "Jsonnet - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/jsonnet/", "scrapeId": "68d43bd8-fcad-4237-9d75-8eb07a22f5e5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/jsonnet", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/jsonnet/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Jsonnet\"?\n\nAssistant: Here are some code examples:\n\n### CLI Example for Creating an App\n```yaml\nargocd app create APPNAME \\\n  --jsonnet-ext-var-str 'app=${ARGOCD_APP_NAME}' \\\n  --jsonnet-tla-str 'ns=${ARGOCD_APP_NAMESPACE}' \\\n  --jsonnet-libs 'vendor'\n```\n\n### Declarative Syntax Example\n```yaml\n  directory:\n    jsonnet:\n      extVars:\n      - name: app\n        value: $ARGOCD_APP_NAME\n      tlas:\n        - name: ns\n          value: $ARGOCD_APP_NAMESPACE\n      libs:\n        - vendor\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/jsonnet", "title": "Jsonnet", "description": "Any file matching `*.jsonnet` in a directory app is treated as a Jsonnet file. Argo CD evaluates the Jsonnet and is able to parse a generated object or array.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:17:25", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "title": "Jsonnet - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/jsonnet/", "scrapeId": "68d43bd8-fcad-4237-9d75-8eb07a22f5e5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/jsonnet", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/jsonnet/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Multiple Sources for an Application\"?\n\nAssistant: This page explains how to specify multiple sources for a single Argo CD application, allowing the combination of files from different locations to form a single application.\n\nHere's a detailed explanation:\n\n\n## Overview\nBy default an Argo CD application is a link between a single source and a cluster. Sometimes however, you want to combine files from multiple locations to form a single Application.\n\nArgo CD has the ability to specify multiple sources for a single Application. Argo CD compiles all the sources and reconciles the combined resources.\n\nYou can provide multiple sources using the `sources` field. When you specify the `sources` field, Argo CD will ignore the `source` (singular) field.\n\n## Example of Specifying Multiple Sources\nSee the below example for specifying multiple sources:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-billing-app\n  namespace: argocd\nspec:\n  project: default\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: default\n  sources:\n    - repoURL: https://github.com/mycompany/billing-app.git\n      path: manifests\n      targetRevision: 8.5.1\n    - repoURL: https://github.com/mycompany/common-settings.git\n      path: configmaps-billing\n      targetRevision: HEAD\n```\n\nThe above example has two sources specified that need to be combined in order to create the \"billing\" application. Argo CD will generate the manifests for each source separately and combine the resulting manifests.\n\n## Cautions on Using Multiple Sources\nDo not abuse multiple sources\n\nNote this feature is **NOT** destined as a generic way to group different/unrelated applications. Take a look at [applicationsets](https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/) and the [app-of-apps](https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/) pattern if you want to have a single entity for multiple applications. If you find yourself using more than 2-3 items in the `sources` array then you are almost certainly abusing this feature and you need to rethink your application grouping strategy.\n\nIf multiple sources produce the same resource (same `group`, `kind`, `name`, and `namespace`), the last source to produce the resource will take precedence. Argo CD will produce a `RepeatedResourceWarning` in this case, but it will sync the resources. This provides a convenient way to override a resource from a chart with a resource from a Git repo.\n\n## Helm Value Files from External Git Repository\nOne of the most common scenarios for using multiple sources is the following:\n\n1. Your organization wants to use an external/public Helm chart.\n2. You want to override the Helm values with your own local values.\n3. You don't want to clone the Helm chart locally as well because that would lead to duplication and you would need to monitor it manually for upstream changes.\n\nIn this scenario you can use the multiple sources features to combine the external chart with your own local values.\n\nHelm sources can reference value files from git sources. This allows you to use a third-party Helm chart with custom, git-hosted values.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  sources:\n  - repoURL: 'https://prometheus-community.github.io/helm-charts'\n    chart: prometheus\n    targetRevision: 15.7.1\n    helm:\n      valueFiles:\n      - $values/charts/prometheus/values.yaml\n  - repoURL: 'https://git.example.com/org/value-files.git'\n    targetRevision: dev\n    ref: values\n```\n\nIn the above example, the `prometheus` chart will use the value file from `git.example.com/org/value-files.git`. For Argo to reference the external Git repository containing the value files, you must set the `ref` parameter on the repository. In the above example, the parameter `ref: values` maps to the variable `$values`, which resolves to the root of the `value-files` repository.\n\nNote that the `$values` variable can only be used at the beginning of the value file path.\n\n## Important Notes\nIf the `path` field is set in the `$values` source, Argo CD will attempt to generate resources from the git repository at that URL. If the `path` field is not set, Argo CD will use the repository solely as a source of value files.\n\nSources with the `ref` field set must not also specify the `chart` field. Argo CD does not currently support using another Helm chart as a source for value files.\n\nEven when the `ref` field is configured with the `path` field, `$value` still represents the root of sources with the `ref` field. Consequently, `valueFiles` must be specified as relative paths from the root of sources.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources", "title": "Multiple Sources for an Application", "description": "This page explains how to specify multiple sources for a single Argo CD application, allowing the combination of files from different locations to form a single application.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:21:21", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/multiple_sources/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Multiple Sources for an Application - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "d0ef863d-ff96-4dbc-b764-751716513c5c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Multiple Sources for an Application\"?\n\nAssistant: Here are some code examples:\n\n### Example of Specifying Multiple Sources\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-billing-app\n  namespace: argocd\nspec:\n  project: default\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: default\n  sources:\n    - repoURL: https://github.com/mycompany/billing-app.git\n      path: manifests\n      targetRevision: 8.5.1\n    - repoURL: https://github.com/mycompany/common-settings.git\n      path: configmaps-billing\n      targetRevision: HEAD\n\n```\n\n### Helm Value Files Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nspec:\n  sources:\n  - repoURL: 'https://prometheus-community.github.io/helm-charts'\n    chart: prometheus\n    targetRevision: 15.7.1\n    helm:\n      valueFiles:\n      - $values/charts/prometheus/values.yaml\n  - repoURL: 'https://git.example.com/org/value-files.git'\n    targetRevision: dev\n    ref: values\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources", "title": "Multiple Sources for an Application", "description": "This page explains how to specify multiple sources for a single Argo CD application, allowing the combination of files from different locations to form a single application.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:21:21", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/multiple_sources/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Multiple Sources for an Application - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "d0ef863d-ff96-4dbc-b764-751716513c5c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Multiple Sources for an Application\"?\n\nAssistant: Here are the recommended best practices:\n\n• Do not abuse multiple sources; use applicationsets or app-of-apps for unrelated applications.\n• If using more than 2-3 items in the sources array, reconsider your application grouping strategy.\n• The last source to produce a resource takes precedence if multiple sources produce the same resource.\n• Use the $values variable at the beginning of the value file path.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources", "title": "Multiple Sources for an Application", "description": "This page explains how to specify multiple sources for a single Argo CD application, allowing the combination of files from different locations to form a single application.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:21:21", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/multiple_sources/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Multiple Sources for an Application - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "d0ef863d-ff96-4dbc-b764-751716513c5c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Orphaned Resources Monitoring\"?\n\nAssistant: Orphaned Kubernetes resource is a top-level namespaced resource which does not belong to any Argo CD Application. The Orphaned Resources Monitoring feature allows detecting orphaned resources, inspect/remove resources using Argo CD UI and generate a warning.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe Orphaned Resources monitoring is enabled in Project settings, and the below is an example of enabling the feature using the AppProject custom resource.\n\n## Enabling Orphaned Resources Monitoring\nOnce the feature is enabled, each project application which has any orphaned resources in its target namespace will get a warning. The orphaned resources can be located using the application details page.\n\n## Disabling Warnings\nWhen enabling the feature, you might want to consider disabling warning at first. While warning disabled, application users can still view orphaned resources in the UI.\n\n## Exceptions\nNot every resource in the Kubernetes cluster is controlled by the end user. Following resources are never considered as orphaned:\n\n- Namespaced resources denied in the project. Usually, such resources are managed by cluster administrators and not supposed to be modified by namespace user.\n- `ServiceAccount` with name `default` ( and corresponding auto-generated `ServiceAccountToken` ).\n- `Service` with name `kubernetes` in the `default` namespace.\n- `ConfigMap` with name `kube-root-ca.crt` in all namespaces.\n\nAlso, you can configure to ignore resources by providing a list of resource Group, Kind and Name.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/orphaned-resources", "title": "Orphaned Resources Monitoring", "description": "Orphaned Kubernetes resource is a top-level namespaced resource which does not belong to any Argo CD Application. The Orphaned Resources Monitoring feature allows detecting orphaned resources, inspect/remove resources using Argo CD UI and generate a warning.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:21:42", "type": "overview", "page_metadata": {"title": "Orphaned Resources Monitoring - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/orphaned-resources/", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "18143206-40be-4e23-8d7a-df3eb4030899", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/orphaned-resources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/orphaned-resources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Orphaned Resources Monitoring\"?\n\nAssistant: Here are some code examples:\n\n### Enabling Orphaned Resources Monitoring\n```yaml\nkind: AppProject\nmetadata:\n  ...\nspec:\n  ...\n  orphanedResources:\n    warn: true\n...\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/orphaned-resources", "title": "Orphaned Resources Monitoring", "description": "Orphaned Kubernetes resource is a top-level namespaced resource which does not belong to any Argo CD Application. The Orphaned Resources Monitoring feature allows detecting orphaned resources, inspect/remove resources using Argo CD UI and generate a warning.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:21:42", "type": "code_examples", "page_metadata": {"title": "Orphaned Resources Monitoring - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/orphaned-resources/", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "18143206-40be-4e23-8d7a-df3eb4030899", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/orphaned-resources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/orphaned-resources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Orphaned Resources Monitoring\"?\n\nAssistant: Here are the recommended best practices:\n\n• When enabling the feature, consider disabling warning at first.\n• While warning disabled, application users can still view orphaned resources in the UI.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/orphaned-resources", "title": "Orphaned Resources Monitoring", "description": "Orphaned Kubernetes resource is a top-level namespaced resource which does not belong to any Argo CD Application. The Orphaned Resources Monitoring feature allows detecting orphaned resources, inspect/remove resources using Argo CD UI and generate a warning.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:21:42", "type": "best_practices", "page_metadata": {"title": "Orphaned Resources Monitoring - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/orphaned-resources/", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "18143206-40be-4e23-8d7a-df3eb4030899", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/orphaned-resources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/orphaned-resources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Parameter Overrides\"?\n\nAssistant: Argo CD provides a mechanism to override the parameters of Argo CD applications that leverages config management tools. This provides flexibility in having most of the application manifests defined in Git, while leaving room for some parts of the k8s manifests determined dynamically, or outside of Git.\n\nHere's a detailed explanation:\n\n\n## Overview\nArgo CD provides a mechanism to override the parameters of Argo CD applications that leverages config management tools. This provides flexibility in having most of the application manifests defined in Git, while leaving room for some parts of the k8s manifests determined dynamically, or outside of Git. It also serves as an alternative way of redeploying an application by changing application parameters via Argo CD, instead of making the changes to the manifests in Git.\n\nTip\n\nMany consider this mode of operation as an anti-pattern to GitOps, since the source of truth becomes a union of the Git repository, and the application overrides. The Argo CD parameter overrides feature is provided mainly as a convenience to developers and is intended to be used in dev/test environments, vs. production environments.\n\n## Using Parameter Overrides\nTo use parameter overrides, run the `argocd app set -p (COMPONENT=)PARAM=VALUE` command:\n\n```\nargocd app set guestbook -p image=example/guestbook:abcd123\nargocd app sync guestbook\n```\n\nThe `PARAM` is expected to be a normal YAML path\n\n```\nargocd app set guestbook -p ingress.enabled=true\nargocd app set guestbook -p ingress.hosts[0]=guestbook.myclusterurl\n```\n\nThe `argocd app set` command supports more tool-specific flags such as `--kustomize-image`, `--jsonnet-ext-var-str` etc flags. You can also specify overrides directly in the source field on application spec. Read more about supported options in corresponded tool documentation.\n\n## When To Use Overrides?\nThe following are situations where parameter overrides would be useful:\n\n1. A team maintains a \"dev\" environment, which needs to be continually updated with the latest version of their guestbook application after every build in the tip of master. To address this use case, the application would expose a parameter named `image`, whose value used in the `dev` environment contains a placeholder value (e.g. `example/guestbook:replaceme`). The placeholder value would be determined externally (outside of Git) such as a build system. Then, as part of the build pipeline, the parameter value of the `image` would be continually updated to the freshly built image (e.g. `argocd app set guestbook -p image=example/guestbook:abcd123`). A sync operation would result in the application being redeployed with the new image.\n\n2. A repository of Helm manifests is already publicly available (e.g. https://github.com/helm/charts). Since commit access to the repository is unavailable, it is useful to be able to install charts from the public repository and customize the deployment with different parameters, without resorting to forking the repository to make the changes. For example, to install Redis from the Helm chart repository and customize the database password, you would run:\n\n```\nargocd app create redis --repo https://github.com/helm/charts.git --path stable/redis --dest-server https://kubernetes.default.svc --dest-namespace default -p password=abc123\n```\n\n## Store Overrides In Git\nThe config management tool specific overrides can be specified in `.argocd-source.yaml` file stored in the source application directory in the Git repository.\n\nThe `.argocd-source.yaml` file is used during manifest generation and overrides application source fields, such as `kustomize`, `helm` etc.\n\nExample:\n\n```\nkustomize:\n  images:\n    - gcr.io/heptio-images/ks-guestbook-demo:0.2\n```\n\nThe `.argocd-source` is trying to solve two following main use cases:\n\n- Provide the unified way to \"override\" application parameters in Git and enable the \"write back\" feature for projects like argocd-image-updater.\n- Support \"discovering\" applications in the Git repository by projects like applicationset (see git files generator).\n\nYou can also store parameter overrides in an application specific file, if you are sourcing multiple applications from a single path in your repository.\n\nThe application specific file must be named `.argocd-source-<appname>.yaml`, where `<appname>` is the name of the application the overrides are valid for.\n\nIf there exists a non-application specific `.argocd-source.yaml`, parameters included in that file will be merged first, and then the application specific parameters are merged, which can also contain overrides to the parameters stored in the non-application specific file.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/parameters", "title": "Parameter Overrides", "description": "Argo CD provides a mechanism to override the parameters of Argo CD applications that leverages config management tools. This provides flexibility in having most of the application manifests defined in Git, while leaving room for some parts of the k8s manifests determined dynamically, or outside of Git.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:22:12", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Parameter Overrides - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/parameters/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "scrapeId": "abcfdf78-f0cf-42e1-873c-9a658538cb21", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/parameters", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/parameters/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Parameter Overrides\"?\n\nAssistant: Here are some code examples:\n\n### Set Application Parameters\n```yaml\nargocd app set guestbook -p image=example/guestbook:abcd123\nargocd app sync guestbook\n```\n\n### Set Ingress Parameters\n```yaml\nargocd app set guestbook -p ingress.enabled=true\nargocd app set guestbook -p ingress.hosts[0]=guestbook.myclusterurl\n```\n\n### Create Redis Application from Helm Chart\n```yaml\nargocd app create redis --repo https://github.com/helm/charts.git --path stable/redis --dest-server https://kubernetes.default.svc --dest-namespace default -p password=abc123\n```\n\n### Kustomize Example\n```yaml\nkustomize:\n  images:\n    - gcr.io/heptio-images/ks-guestbook-demo:0.2\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/parameters", "title": "Parameter Overrides", "description": "Argo CD provides a mechanism to override the parameters of Argo CD applications that leverages config management tools. This provides flexibility in having most of the application manifests defined in Git, while leaving room for some parts of the k8s manifests determined dynamically, or outside of Git.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:22:12", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Parameter Overrides - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/parameters/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "scrapeId": "abcfdf78-f0cf-42e1-873c-9a658538cb21", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/parameters", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/parameters/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Parameter Overrides\"?\n\nAssistant: Here are the recommended best practices:\n\n• Many consider this mode of operation as an anti-pattern to GitOps, since the source of truth becomes a union of the Git repository, and the application overrides. The Argo CD parameter overrides feature is provided mainly as a convenience to developers and is intended to be used in dev/test environments, vs. production environments.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/parameters", "title": "Parameter Overrides", "description": "Argo CD provides a mechanism to override the parameters of Argo CD applications that leverages config management tools. This provides flexibility in having most of the application manifests defined in Git, while leaving room for some parts of the k8s manifests determined dynamically, or outside of Git.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:22:12", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Parameter Overrides - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/parameters/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "scrapeId": "abcfdf78-f0cf-42e1-873c-9a658538cb21", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/parameters", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/parameters/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Private Repositories\"?\n\nAssistant: This page covers how to configure private repositories in Argo CD, including credential management for HTTPS and SSH, handling TLS certificates, and managing SSH known hosts.\n\nHere's a detailed explanation:\n\n\n## Credentials\nIf application manifests are located in private repository then repository credentials have to be configured. Argo CD supports both HTTPS and SSH Git credentials.\n\n## HTTPS Username And Password Credential\nPrivate repositories that require a username and password typically have a URL that start with `https://` rather than `git@` or `ssh://`.\n\nCredentials can be configured using Argo CD CLI:\n\n```\nargocd repo add https://github.com/argoproj/argocd-example-apps --username <username> --password <password>\n```\n\nor UI:\n\n1. Navigate to `Settings/Repositories`\n\n2. Click `Connect Repo using HTTPS` button and enter credentials\n\n3. Click `Connect` to test the connection and have the repository added.\n\n## Access Token\nInstead of using username and password you might use access token. Following instructions of your Git hosting service to generate the token:\n\n- [GitHub](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line)\n- [GitLab](https://docs.gitlab.com/ee/user/project/deploy_tokens/)\n- [Bitbucket](https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html)\n- [Azure Repos](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=preview-page)\n\nThen, connect the repository using any non-empty string as username and the access token value as a password.\n\n## TLS Client Certificates for HTTPS repositories\nIf your repository server requires you to use TLS client certificates for authentication, you can configure Argo CD repositories to make use of them. For this purpose, `--tls-client-cert-path` and `--tls-client-cert-key-path` switches to the `argocd repo add` command can be used to specify the files on your local system containing client certificate and the corresponding key, respectively:\n\n```\nargocd repo add https://repo.example.com/repo.git --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key\n```\n\nYour TLS client certificate and corresponding key can also be configured using the UI, see instructions for adding Git repos using HTTPS.\n\n## SSH Private Key Credential\nPrivate repositories that require an SSH private key have a URL that typically start with `git@` or `ssh://` rather than `https://`.\n\nYou can configure your Git repository using SSH either using the CLI or the UI.\n\nUsing the CLI:\n\n```\nargocd repo add git@github.com:argoproj/argocd-example-apps.git --ssh-private-key-path ~/.ssh/id_rsa\n```\n\nUsing the UI:\n\n1. Navigate to `Settings/Repositories`\n\n2. Click `Connect Repo using SSH` button, enter the URL and paste the SSH private key\n\n3. Click `Connect` to test the connection and have the repository added.\n\n## GitHub App Credential\nPrivate repositories that are hosted on GitHub.com or GitHub Enterprise can be accessed using credentials from a GitHub Application. Consult the [GitHub documentation](https://docs.github.com/en/developers/apps/about-apps#about-github-apps) on how to create an application.\n\nYou can configure access to your Git repository hosted by GitHub.com or GitHub Enterprise using the GitHub App method by either using the CLI or the UI.\n\nUsing the CLI:\n\n```\nargocd repo add https://github.com/argoproj/argocd-example-apps.git --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem\n```\n\nUsing the UI:\n\n1. Navigate to `Settings/Repositories`\n\n2. Click `Connect Repo using GitHub App` button, enter the URL, App Id, Installation Id, and the app's private key.\n\n3. Click `Connect` to test the connection and have the repository added.\n\n## Google Cloud Source\nPrivate repositories hosted on Google Cloud Source can be accessed using Google Cloud service account key in JSON format. Consult [Google Cloud documentation](https://cloud.google.com/iam/docs/creating-managing-service-accounts) on how to create a service account.\n\nYou can configure access to your Git repository hosted on Google Cloud Source using the CLI or the UI.\n\nUsing the CLI:\n\n```\nargocd repo add https://source.developers.google.com/p/my-google-cloud-project/r/my-repo --gcp-service-account-key-path service-account-key.json\n```\n\nUsing the UI:\n\n1. Navigate to `Settings/Repositories`\n\n2. Click `Connect Repo using Google Cloud Source` button, enter the URL and the Google Cloud service account in JSON format.\n\n3. Click `Connect` to test the connection and have the repository added.\n\n## Credential templates\nYou can also set up credentials to serve as templates for connecting repositories, without having to repeat credential configuration. For example, if you setup credential templates for the URL prefix `https://github.com/argoproj`, these credentials will be used for all repositories with this URL as prefix (e.g. `https://github.com/argoproj/argocd-example-apps`) that do not have their own credentials configured.\n\n## Self-signed & Untrusted TLS Certificates\nIf you are connecting a repository on a HTTPS server using a self-signed certificate, or a certificate signed by a custom Certificate Authority (CA) which are not known to Argo CD, the repository will not be added due to security reasons. This is indicated by an error message such as `x509: certificate signed by unknown authority`.\n\n## Managing TLS certificates using the CLI\nYou can list all configured TLS certificates by using the `argocd cert list` command using the `--cert-type https` modifier:\n\n```\n$ argocd cert list --cert-type https\nHOSTNAME      TYPE   SUBTYPE  FINGERPRINT/SUBJECT\ndocker-build  https  rsa      CN=ArgoCD Test CA\nlocalhost     https  rsa      CN=localhost\n```\n\nExample for adding a HTTPS repository to ArgoCD without verifying the server's certificate:\n\n```\nargocd repo add --insecure-skip-server-verification https://git.example.com/test-repo\n```\n\nExample for adding a CA certificate contained in file `~/myca-cert.pem` to properly verify the repository server:\n\n```\nargocd cert add-tls git.example.com --from ~/myca-cert.pem\nargocd repo add https://git.example.com/test-repo\n```\n\n## Managing TLS certificates using the ArgoCD web UI\nIt is possible to add and remove TLS certificates using the ArgoCD web UI:\n\n1. In the navigation pane to the left, click on \"Settings\" and choose \"Certificates\" from the settings menu\n\n2. The following page lists all currently configured certificates and provides you with the option to add either a new TLS certificate or SSH known entries.\n\n## Managing TLS certificates using declarative configuration\nYou can also manage TLS certificates in a declarative, self-managed ArgoCD setup. All TLS certificates are stored in the ConfigMap object `argocd-tls-certs-cm`.\n\n## Unknown SSH Hosts\nIf you are using a privately hosted Git service over SSH, then you have the following options:\n\n1. You can let ArgoCD connect the repository in an insecure way, without verifying the server's SSH host key at all. This can be accomplished by using the `--insecure-skip-server-verification` flag when adding the repository with the `argocd` CLI utility.\n\n2. You can make the server's SSH public key known to ArgoCD by using the `cert add-ssh` command of the `argocd` CLI utility.\n\n## Managing SSH Known Hosts using the CLI\nYou can list all configured SSH known host entries using the `argocd cert list` command with the `--cert-type ssh` modifier:\n\n```\n$ argocd cert list --cert-type ssh\nHOSTNAME                 TYPE  SUBTYPE              FINGERPRINT/SUBJECT\nbitbucket.org            ssh   ssh-rsa              SHA256:46OSHA1Rmj8E8ERTC6xkNcmGOw9oFxYr0WF6zWW8l1E\ngithub.com               ssh   ssh-rsa              SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s\ngitlab.com               ssh   ecdsa-sha2-nistp256  SHA256:HbW3g8zUjNSksFbqTiUWPWg2Bq1x8xdGUrliXFzSnUw\ngitlab.com               ssh   ssh-ed25519          SHA256:eUXGGm1YGsMAS7vkcx6JOJdOGHPem5gQp4taiCfCLB8\ngitlab.com               ssh   ssh-rsa              SHA256:ROQFvPThGrW4RuWLoL9tq9I9zJ42fK4XywyRtbOz/EQ\nssh.dev.azure.com        ssh   ssh-rsa              SHA256:ohD8VZEXGWo6Ez8GSEJQ9WpafgLFsOfLOtGGQCQo6Og\nvs-ssh.visualstudio.com  ssh   ssh-rsa              SHA256:ohD8VZEXGWo6Ez8GSEJQ9WpafgLFsOfLOtGGQCQo6Og\n```\n\nFor adding SSH known host entries, the `argocd cert add-ssh` command can be used.\n\n## Managing SSH known hosts data using the ArgoCD web UI\nIt is possible to add and remove SSH known hosts entries using the ArgoCD web UI:\n\n1. In the navigation pane to the left, click on \"Settings\" and choose \"Certificates\" from the settings menu\n\n2. The following page lists all currently configured certificates and provides you with the option to add either a new TLS certificate or SSH known entries.\n\n## Managing SSH known hosts data using declarative setup\nYou can also manage SSH known hosts entries in a declarative, self-managed ArgoCD setup. All SSH public host keys are stored in the ConfigMap object `argocd-ssh-known-hosts-cm`.\n\n## Git Submodules\nSubmodules are supported and will be picked up automatically. If the submodule repository requires authentication then the credentials will need to match the credentials of the parent repository. Set ARGOCD_GIT_MODULES_ENABLED=false to disable submodule support.\n\n## Declarative Configuration\nSee [declarative setup](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories", "title": "Private Repositories", "description": "This page covers how to configure private repositories in Argo CD, including credential management for HTTPS and SSH, handling TLS certificates, and managing SSH known hosts.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 02:22:56", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Private Repositories - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/private-repositories/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "97fea669-ef29-4e5d-93bb-193e67035052", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Private Repositories\"?\n\nAssistant: Here are some code examples:\n\n### Add HTTPS repository with username and password\n```yaml\nargocd repo add https://github.com/argoproj/argocd-example-apps --username <username> --password <password>\n```\n\n### Add HTTPS repository with TLS client certificates\n```yaml\nargocd repo add https://repo.example.com/repo.git --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key\n```\n\n### Add SSH repository with private key\n```yaml\nargocd repo add git@github.com:argoproj/argocd-example-apps.git --ssh-private-key-path ~/.ssh/id_rsa\n```\n\n### Add GitHub App repository\n```yaml\nargocd repo add https://github.com/argoproj/argocd-example-apps.git --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem\n```\n\n### Add Google Cloud Source repository\n```yaml\nargocd repo add https://source.developers.google.com/p/my-google-cloud-project/r/my-repo --gcp-service-account-key-path service-account-key.json\n```\n\n### Add HTTPS repository without verifying server's certificate\n```yaml\nargocd repo add --insecure-skip-server-verification https://git.example.com/test-repo\n```\n\n### Add CA certificate for HTTPS repository\n```yaml\nargocd cert add-tls git.example.com --from ~/myca-cert.pem\n```\n\n### Add SSH known host entries\n```yaml\nssh-keyscan server.example.com | argocd cert add-ssh --batch\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories", "title": "Private Repositories", "description": "This page covers how to configure private repositories in Argo CD, including credential management for HTTPS and SSH, handling TLS certificates, and managing SSH known hosts.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 02:22:56", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Private Repositories - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/private-repositories/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "97fea669-ef29-4e5d-93bb-193e67035052", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Private Repositories\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to specify the `.git` suffix in the repository URL for GitLab and similar services to avoid HTTP 301 redirects.\n• When using access tokens, ensure to follow the specific instructions of your Git hosting service for generation.\n• Always use PEM format for TLS client certificates and ensure they are not password protected.\n• For SSH repositories served from non-standard ports, use `ssh://`-style URLs to specify your repository.\n• When pasting keys in the UI, ensure there are no unintended line breaks or additional characters.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories", "title": "Private Repositories", "description": "This page covers how to configure private repositories in Argo CD, including credential management for HTTPS and SSH, handling TLS certificates, and managing SSH known hosts.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 02:22:56", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Private Repositories - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/private-repositories/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "97fea669-ef29-4e5d-93bb-193e67035052", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Projects\"?\n\nAssistant: Projects provide a logical grouping of applications, which is useful when Argo CD is used by multiple teams. Projects provide features such as restricting deployments, defining project roles, and managing application RBAC.\n\nHere's a detailed explanation:\n\n\n## Projects\nProjects provide a logical grouping of applications, which is useful when Argo CD is used by multiple teams. Projects provide the following features:\n\n- restrict what may be deployed (trusted Git source repositories)\n- restrict where apps may be deployed to (destination clusters and namespaces)\n- restrict what kinds of objects may or may not be deployed (e.g. RBAC, CRDs, DaemonSets, NetworkPolicy etc...)\n- defining project roles to provide application RBAC (bound to OIDC groups and/or JWT tokens)\n\n## The Default Project\nEvery application belongs to a single project. If unspecified, an application belongs to the `default` project, which is created automatically and by default, permits deployments from any source repo, to any cluster, and all resource Kinds. The default project can be modified, but not deleted. When initially created, it's specification is configured to be the most permissive:\n\n```\nspec:\n  sourceRepos:\n  - '*'\n  destinations:\n  - namespace: '*'\n    server: '*'\n  clusterResourceWhitelist:\n  - group: '*'\n    kind: '*'\n```\n\n## Creating Projects\nAdditional projects can be created to give separate teams different levels of access to namespaces. The following command creates a new project `myproject` which can deploy applications to namespace `mynamespace` of cluster `https://kubernetes.default.svc`. The permitted Git source repository is set to `https://github.com/argoproj/argocd-example-apps.git` repository.\n\n```\nargocd proj create myproject -d https://kubernetes.default.svc,mynamespace -s https://github.com/argoproj/argocd-example-apps.git\n```\n\n## Managing Projects\nPermitted source Git repositories are managed using commands:\n\n```\nargocd proj add-source <PROJECT> <REPO>\nargocd proj remove-source <PROJECT> <REPO>\n```\n\nWe can also do negations of sources (i.e. do _not_ use this repo).\n\n```\nargocd proj add-source <PROJECT> !<REPO>\nargocd proj remove-source <PROJECT> !<REPO>\n```\n\nDeclaratively we can do something like this:\n\n```\nspec:\n  sourceRepos:\n    # Do not use the test repo in argoproj\n    - '!ssh://git@GITHUB.com:argoproj/test'\n    # Nor any Gitlab repo under group/\n    - '!https://gitlab.com/group/**'\n    # Any other repo is fine though\n    - '*'\n```\n\nA source repository is considered valid if the following conditions hold:\n\n1. _Any_ allow source rule (i.e. a rule which isn't prefixed with `!`) permits the source\n2. AND _no_ deny source (i.e. a rule which is prefixed with `!`) rejects the source\n\nKeep in mind that `!*` is an invalid rule, since it doesn't make any sense to disallow everything.\n\nPermitted destination clusters and namespaces are managed with the commands (for clusters always provide server, the name is not used for matching):\n\n```\nargocd proj add-destination <PROJECT> <CLUSTER>,<NAMESPACE>\nargocd proj remove-destination <PROJECT> <CLUSTER>,<NAMESPACE>\n```\n\nAs with sources, we can also do negations of destinations (i.e. install anywhere _apart from_).\n\n```\nargocd proj add-destination <PROJECT> !<CLUSTER>,!<NAMESPACE>\nargocd proj remove-destination <PROJECT> !<CLUSTER>,!<NAMESPACE>\n```\n\nDeclaratively we can do something like this:\n\n```\nspec:\n  destinations:\n  # Do not allow any app to be installed in `kube-system`\n  - namespace: '!kube-system'\n    server: '*'\n  # Or any cluster that has a URL of `team1-*`\n  - namespace: '*'\n    server: '!https://team1-*'\n    # Any other namespace or server is fine though.\n  - namespace: '*'\n    server: '*'\n```\n\nAs with sources, a destination is considered valid if the following conditions hold:\n\n1. _Any_ allow destination rule (i.e. a rule which isn't prefixed with `!`) permits the destination\n2. AND _no_ deny destination (i.e. a rule which is prefixed with `!`) rejects the destination\n\nKeep in mind that `!*` is an invalid rule, since it doesn't make any sense to disallow everything.\n\nPermitted destination K8s resource kinds are managed with the commands. Note that namespaced-scoped resources are restricted via a deny list, whereas cluster-scoped resources are restricted via allow list.\n\n```\nargocd proj allow-cluster-resource <PROJECT> <GROUP> <KIND>\nargocd proj allow-namespace-resource <PROJECT> <GROUP> <KIND>\nargocd proj deny-cluster-resource <PROJECT> <GROUP> <KIND>\nargocd proj deny-namespace-resource <PROJECT> <GROUP> <KIND>\n```\n\n## Assign Application To A Project\nThe application project can be changed using `app set` command. In order to change the project of an app, the user must have permissions to access the new project.\n\n```\nargocd app set guestbook-default --project myproject\n```\n\n## Project Roles\nProjects include a feature called roles that can be used to determine who and what can be done applications associated with the project. As an example, it can be used to give a CI pipeline a restricted set of permissions allowing sync operations on a single app (but not change its source or destination).\n\nProjects can have multiple roles, and those roles can have different access granted to them. These permissions are called policies which follows the same [RBAC pattern used in Argo CD configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/). They are stored within the role as a list of policy strings. A role's policy can only grant access to that role. Users are associated with roles based on the groups list. Consider the hypothetical AppProject definition below:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: sample-test-project\nspec:\n  ...\n  roles:\n  - description: some-role\n    groups:\n    - some-user\n    name: admin\n    policies:\n    - p, proj:sample-test-project:some-role, applications, *, *, allow\n  ...\n```\n\nArgo CD will use the policies defined in the AppProject roles while authorizing users actions. To determine which role a given users is associated with, it will dynamically create groups based on the role name in runtime. The project definition above will generate the following Casbin RBAC rules:\n\n```\n    p, proj:sample-test-project:some-role, applications, *, *, allow\n    g, some-user, proj:sample-test-project:some-role\n```\n\n_Note 1_: It is very important that policy roles follow the pattern `proj:<project-name>:<role-name>` or they won't be effective during the Argo CD authorization process.\n\n_Note 2_: The example above used `applications` as the resource for the policy definition. However other types of resources can also be used: `repositories`, `clusters`, `logs`, `exec` and `projects`. See the [RBAC documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/) for more details about those resources.\n\nIn order to create roles in a project and add policies to a role, a user will need permission to update a project. The following commands can be used to manage a role.\n\n```\nargocd proj role list\nargocd proj role get\nargocd proj role create\nargocd proj role delete\nargocd proj role add-policy\nargocd proj role remove-policy\n```\n\n## Configuring RBAC With Projects\nThe project Roles allows configuring RBAC rules scoped to the project. The following sample project provides read-only permissions on project applications to any member of `my-oidc-group` group.\n\n_AppProject example:_\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: my-project\n  namespace: argocd\nspec:\n  roles:\n  # A role which provides read-only access to all applications in the project\n  - name: read-only\n    description: Read-only privileges to my-project\n    policies:\n    - p, proj:my-project:read-only, applications, get, my-project/*, allow\n    groups:\n    - my-oidc-group\n```\n\nYou can use `argocd proj role` CLI commands or project details page in the user interface to configure the policy.\nNote that each project role policy rule must be scoped to that project only. Use the `argocd-rbac-cm` ConfigMap described in [RBAC](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/) documentation if you want to configure cross project RBAC rules.\n\n## Configuring Global Projects (v1.8)\nGlobal projects can be configured to provide configurations that other projects can inherit from.\n\nProjects, which match `matchExpressions` specified in `argocd-cm` ConfigMap, inherit the following fields from the global project:\n\n- namespaceResourceBlacklist\n- namespaceResourceWhitelist\n- clusterResourceBlacklist\n- clusterResourceWhitelist\n- SyncWindows\n- SourceRepos\n- Destinations\n\nConfigure global projects in `argocd-cm` ConfigMap:\n\n```\ndata:\n  globalProjects: |-\n    - labelSelector:\n        matchExpressions:\n          - key: opt\n            operator: In\n            values:\n              - prod\n      projectName: proj-global-test\nkind: ConfigMap\n```\n\nValid operators you can use are: In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n\nprojectName: `proj-global-test` should be replaced with your own global project name.\n\n## Project scoped Repositories and Clusters\nNormally, an Argo CD admin creates a project and decides in advance which clusters and Git repositories it defines. However, this creates a problem in scenarios where a developer wants to add a repository or cluster after the initial creation of the project. This forces the developer to contact their Argo CD admin again to update the project definition.\n\nIt is possible to offer a self-service process for developers so that they can add a repository and/or cluster in a project on their own even after the initial creation of the project.\n\nFor this purpose Argo CD supports project-scoped repositories and clusters.\n\nTo begin the process, Argo CD admins must configure RBAC security to allow this self-service behavior.\nFor example, to allow users to add project scoped repositories and admin would have to add the following RBAC rules:\n\n```\np, proj:my-project:admin, repositories, create, my-project/*, allow\np, proj:my-project:admin, repositories, delete, my-project/*, allow\np, proj:my-project:admin, repositories, update, my-project/*, allow\n```\n\nThis provides extra flexibility so that admins can have stricter rules. e.g.: \n\n```\np, proj:my-project:admin, repositories, update, my-project/https://github.example.com/*, allow\n```\n\nOnce the appropriate RBAC rules are in place, developers can create their own Git repositories and (assuming they have the correct credentials) can add them in an existing project either from the UI or the CLI.\nBoth the User interface and the CLI have the ability to optionally specify a project. If a project is specified then the respective cluster/repository is considered project scoped:\n\n`argocd repo add --name stable https://charts.helm.sh/stable --type helm --project my-project`\n\nFor the declarative setup both repositories and clusters are stored as Kubernetes Secrets, and so a new field is used to denote that this resource is project scoped:\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-example-apps\n  labels:\n    argocd.argoproj.io/secret-type: repository\ntype: Opaque\nstringData:\n  project: my-project1                                     # Project scoped\n  name: argocd-example-apps\n  url: https://github.com/argoproj/argocd-example-apps.git\n  username: ****\n  password: ****\n```\n\nWarning\n\nPlease keep in mind when using a project-scoped repository, only applications from the same project can make use of it. When using applicationsets with the Git generator, only non-scoped repositories can be used (i.e. repositories that do _not_ have a `project` set).\n\nAll the examples above talk about Git repositories, but the same principles apply to clusters as well.\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mycluster-secret\n  labels:\n    argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n  name: mycluster.example.com\n  project: my-project1 # Project scoped\n  server: https://mycluster.example.com\n  config: |\n    {\n      \"bearerToken\": \"<authentication token>\",\n      \"tlsClientConfig\": {\n        \"insecure\": false,\n        \"caData\": \"<base64 encoded certificate>\"\n      }\n    }\n```\n\nWith project-scoped clusters we can also restrict projects to only allow applications whose destinations belong to the same project. The default behavior allows for applications to be installed onto clusters which are not a part of the same project, as the example below demonstrates:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: \"some-ns\"\nspec:\n  destination:\n    # This destination might not actually be a cluster which belongs to `foo-project`\n    server: https://some-k8s-server/\n    namespace: \"some-ns\"\n  project: foo-project\n```\n\nTo prevent this behavior, we can set the attribute `permitOnlyProjectScopedClusters` on a project.\n\n```\nspec:\n  permitOnlyProjectScopedClusters: true\n```\n\nWith this set, the application above would no longer be allowed to be synced to any cluster other than the ones which are a part of the same project.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/projects", "title": "Projects", "description": "Projects provide a logical grouping of applications, which is useful when Argo CD is used by multiple teams. Projects provide features such as restricting deployments, defining project roles, and managing application RBAC.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 02:24:45", "type": "overview", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/projects/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Projects - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "scrapeId": "a50bea75-3ec9-478a-962f-c44d6955805c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/projects", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/projects/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Projects\"?\n\nAssistant: Here are some code examples:\n\n### Default Project Specification\n```yaml\nspec:\n  sourceRepos:\n  - '*'\n  destinations:\n  - namespace: '*'\n    server: '*'\n  clusterResourceWhitelist:\n  - group: '*'\n    kind: '*'\n```\n\n### Creating a New Project\n```yaml\nargocd proj create myproject -d https://kubernetes.default.svc,mynamespace -s https://github.com/argoproj/argocd-example-apps.git\n```\n\n### Managing Source Git Repositories\n```yaml\nargocd proj add-source <PROJECT> <REPO>\nargocd proj remove-source <PROJECT> <REPO>\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/projects", "title": "Projects", "description": "Projects provide a logical grouping of applications, which is useful when Argo CD is used by multiple teams. Projects provide features such as restricting deployments, defining project roles, and managing application RBAC.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 02:24:45", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/projects/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Projects - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "scrapeId": "a50bea75-3ec9-478a-962f-c44d6955805c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/projects", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/projects/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Projects\"?\n\nAssistant: Here are the recommended best practices:\n\n• Keep in mind that `!*` is an invalid rule, since it doesn't make any sense to disallow everything.\n• It is very important that policy roles follow the pattern `proj:<project-name>:<role-name>` or they won't be effective during the Argo CD authorization process.\n• When using a project-scoped repository, only applications from the same project can make use of it.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/projects", "title": "Projects", "description": "Projects provide a logical grouping of applications, which is useful when Argo CD is used by multiple teams. Projects provide features such as restricting deployments, defining project roles, and managing application RBAC.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 02:24:45", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/projects/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Projects - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "scrapeId": "a50bea75-3ec9-478a-962f-c44d6955805c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/projects", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/projects/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Resource Hooks\"?\n\nAssistant: Synchronization can be configured using resource hooks. Hooks are ways to run scripts before, during, and after a Sync operation. Hooks can also be run if a Sync operation fails at any point.\n\nHere's a detailed explanation:\n\n\n## Overview\nSynchronization can be configured using resource hooks. Hooks are ways to run scripts before, during, and after a Sync operation. Hooks can also be run if a Sync operation fails at any point. Some use cases for hooks are:\n\n- Using a `PreSync` hook to perform a database schema migration before deploying a new version of the app.\n- Using a `Sync` hook to orchestrate a complex deployment requiring more sophistication than the Kubernetes rolling update strategy.\n- Using a `PostSync` hook to run integration and health checks after a deployment.\n- Using a `SyncFail` hook to run clean-up or finalizer logic if a Sync operation fails.\n- Using a `PostDelete` hook to run clean-up or finalizer logic after all Application resources are deleted. Please note that `PostDelete` hooks are only deleted if the delete policy matches the aggregated deletion hooks status and not garbage collected after the application is deleted.\n\n## Usage\nHooks are simply Kubernetes manifests tracked in the source repository of your Argo CD Application annotated with `argocd.argoproj.io/hook`, e.g.: \n\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: schema-migrate-\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n```\n\nDuring a Sync operation, Argo CD will apply the resource during the appropriate phase of the deployment. Hooks can be any type of Kubernetes resource kind, but tend to be Pod, [Job](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/) or [Argo Workflows](https://github.com/argoproj/argo). Multiple hooks can be specified as a comma separated list.\n\nThe following hooks are defined:\n\n| Hook | Description |\n| --- | --- |\n| `PreSync` | Executes prior to the application of the manifests. |\n| `Sync` | Executes after all `PreSync` hooks completed and were successful, at the same time as the application of the manifests. |\n| `Skip` | Indicates to Argo CD to skip the application of the manifest. |\n| `PostSync` | Executes after all `Sync` hooks completed and were successful, a successful application, and all resources in a `Healthy` state. |\n| `SyncFail` | Executes when the sync operation fails. |\n| `PostDelete` | Executes after all Application resources are deleted. _Available starting in v2.10._ |\n\n## Generate Name\nNamed hooks (i.e. ones with `/metadata/name`) will only be created once. If you want a hook to be re-created each time either use `BeforeHookCreation` policy (see below) or `/metadata/generateName`.\n\n## Selective Sync\nHooks are not run during [selective sync](https://argo-cd.readthedocs.io/en/stable/user-guide/selective_sync/).\n\n## Hook Deletion Policies\nHooks can be deleted in an automatic fashion using the annotation: `argocd.argoproj.io/hook-delete-policy`.\n\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: integration-test-\n  annotations:\n    argocd.argoproj.io/hook: PostSync\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded\n```\n\nMultiple hook delete policies can be specified as a comma separated list.\n\nThe following policies define when the hook will be deleted.\n\n| Policy | Description |\n| --- | --- |\n| `HookSucceeded` | The hook resource is deleted after the hook succeeded (e.g. Job/Workflow completed successfully). |\n| `HookFailed` | The hook resource is deleted after the hook failed. |\n| `BeforeHookCreation` | Any existing hook resource is deleted before the new one is created (since v1.3). It is meant to be used with `/metadata/name`. |\n\nNote that if no deletion policy is specified, Argo CD will automatically assume `BeforeHookCreation` rules.\n\n## Sync Status with Jobs/Workflows with Time to Live (ttl)\nJobs support the [`ttlSecondsAfterFinished`](https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/) field in the spec, which let their respective controllers delete the Job after it completes. Argo Workflows support a [`ttlStrategy`](https://argoproj.github.io/argo-workflows/fields/#ttlstrategy) property that also allow a Workflow to be cleaned up depending on the ttl strategy chosen.\n\nUsing either of the properties above can lead to Applications being OutOfSync. This is because Argo CD will detect a difference between the Job or Workflow defined in the git repository and what's on the cluster since the ttl properties cause deletion of the resource after completion.\n\nHowever, using deletion hooks instead of the ttl approaches mentioned above will prevent Applications from having a status of OutOfSync even though the Job or Workflow was deleted after completion.\n\n## Using A Hook To Send A Slack Message\nThe following example uses the Slack API to send a Slack message when sync completes or fails:\n\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: app-slack-notification-\n  annotations:\n    argocd.argoproj.io/hook: PostSync\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded\nspec:\n  template:\n    spec:\n      containers:\n      - name: slack-notification\n        image: curlimages/curl\n        command:\n          - \"curl\"\n          - \"-X\"\n          - \"POST\"\n          - \"--data-urlencode\"\n          - \"payload={\\\"channel\\\": \\\"#somechannel\\\", \\\"username\\\": \\\"hello\\\", \\\"text\\\": \\\"App Sync succeeded\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\"\n          - \"https://hooks.slack.com/services/...\"\n      restartPolicy: Never\n  backoffLimit: 2\n```\n\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: app-slack-notification-fail-\n  annotations:\n    argocd.argoproj.io/hook: SyncFail\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded\nspec:\n  template:\n    spec:\n      containers:\n      - name: slack-notification\n        image: curlimages/curl\n        command:\n          - \"curl\"\n          - \"-X\"\n          - \"POST\"\n          - \"--data-urlencode\"\n          - \"payload={\\\"channel\\\": \\\"#somechannel\\\", \\\"username\\\": \\\"hello\\\", \\\"text\\\": \\\"App Sync failed\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\"\n          - \"https://hooks.slack.com/services/...\"\n      restartPolicy: Never\n  backoffLimit: 2\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks", "title": "Resource Hooks", "description": "Synchronization can be configured using resource hooks. Hooks are ways to run scripts before, during, and after a Sync operation. Hooks can also be run if a Sync operation fails at any point.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:25:16", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Resource Hooks - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/resource_hooks/", "scrapeId": "0e4c8d3b-c0dd-49fb-8ea4-ff37926fa04a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Resource Hooks\"?\n\nAssistant: Here are some code examples:\n\n### PreSync Hook Example\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: schema-migrate-\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n\n```\n\n### PostSync Hook Example\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: integration-test-\n  annotations:\n    argocd.argoproj.io/hook: PostSync\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded\n\n```\n\n### Slack Notification on Sync Success\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: app-slack-notification-\n  annotations:\n    argocd.argoproj.io/hook: PostSync\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded\nspec:\n  template:\n    spec:\n      containers:\n      - name: slack-notification\n        image: curlimages/curl\n        command:\n          - \"curl\"\n          - \"-X\"\n          - \"POST\"\n          - \"--data-urlencode\"\n          - \"payload={\\\"channel\\\": \\\"#somechannel\\\", \\\"username\\\": \\\"hello\\\", \\\"text\\\": \\\"App Sync succeeded\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\"\n          - \"https://hooks.slack.com/services/...\"\n      restartPolicy: Never\n  backoffLimit: 2\n\n```\n\n### Slack Notification on Sync Failure\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: app-slack-notification-fail-\n  annotations:\n    argocd.argoproj.io/hook: SyncFail\n    argocd.argoproj.io/hook-delete-policy: HookSucceeded\nspec:\n  template:\n    spec:\n      containers:\n      - name: slack-notification\n        image: curlimages/curl\n        command:\n          - \"curl\"\n          - \"-X\"\n          - \"POST\"\n          - \"--data-urlencode\"\n          - \"payload={\\\"channel\\\": \\\"#somechannel\\\", \\\"username\\\": \\\"hello\\\", \\\"text\\\": \\\"App Sync failed\\\", \\\"icon_emoji\\\": \\\":ghost:\\\"}\"\n          - \"https://hooks.slack.com/services/...\"\n      restartPolicy: Never\n  backoffLimit: 2\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks", "title": "Resource Hooks", "description": "Synchronization can be configured using resource hooks. Hooks are ways to run scripts before, during, and after a Sync operation. Hooks can also be run if a Sync operation fails at any point.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:25:16", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Resource Hooks - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/resource_hooks/", "scrapeId": "0e4c8d3b-c0dd-49fb-8ea4-ff37926fa04a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Resource Hooks\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `PreSync` hooks for database schema migrations before deploying new versions.\n• Utilize `Sync` hooks for complex deployments that require more sophistication than Kubernetes rolling updates.\n• Implement `PostSync` hooks for running integration and health checks after deployments.\n• Employ `SyncFail` hooks for clean-up or finalizer logic if a Sync operation fails.\n• Use `PostDelete` hooks for clean-up after all Application resources are deleted.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks", "title": "Resource Hooks", "description": "Synchronization can be configured using resource hooks. Hooks are ways to run scripts before, during, and after a Sync operation. Hooks can also be run if a Sync operation fails at any point.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:25:16", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Resource Hooks - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/resource_hooks/", "scrapeId": "0e4c8d3b-c0dd-49fb-8ea4-ff37926fa04a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Resource Tracking\"?\n\nAssistant: This page covers how Argo CD tracks Kubernetes resources using labels and annotations, including methods for customizing tracking and managing multiple instances.\n\nHere's a detailed explanation:\n\n\n## Tracking Kubernetes resources by label\nArgo CD identifies resources it manages by setting the application instance label to the name of the managing Application on all resources that are managed (i.e. reconciled from Git). The default label used is the well-known label `app.kubernetes.io/instance`.\n\nExample:\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  namespace: default\n  labels:\n    app.kubernetes.io/instance: some-application\n```\n\nThis approach works ok in most cases, as the name of the label is standardized and can be understood by other tools in the Kubernetes ecosystem.\n\nThere are however several limitations:\n\n- Labels are truncated to 63 characters. Depending on the size of the label you might want to store a longer name for your application\n- Other external tools might write/append to this label and create conflicts with Argo CD. For example several Helm charts and operators also use this label for generated manifests confusing Argo CD about the owner of the application\n- You might want to deploy more than one Argo CD instance on the same cluster (with cluster wide privileges) and have an easy way to identify which resource is managed by which instance of Argo CD.\n\n## Use custom label\nInstead of using the default `app.kubernetes.io/instance` label for resource tracking, Argo CD can be configured to use a custom label. Below example sets the resource tracking label to `argocd.argoproj.io/instance`.\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  application.instanceLabelKey: argocd.argoproj.io/instance\n```\n\n## Additional tracking methods via an annotation\nTo offer more flexible options for tracking resources and solve some of the issues outlined in the previous section Argo CD can be instructed to use the following methods for tracking:\n\n1. `label` (default) - Argo CD uses the `app.kubernetes.io/instance` label\n2. `annotation+label` - Argo CD uses the `app.kubernetes.io/instance` label but only for informational purposes. The label is not used for tracking purposes, and the value is still truncated if longer than 63 characters. The annotation `argocd.argoproj.io/tracking-id` is used instead to track application resources. Use this for resources that you manage with Argo CD, but still need compatibility with other tools that require the instance label.\n3. `annotation` - Argo CD uses the `argocd.argoproj.io/tracking-id` annotation to track application resources. Use this when you don't need to maintain both the label and the annotation.\n\nHere is an example of using the annotation method for tracking resources:\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  namespace: default\n  annotations:\n    argocd.argoproj.io/tracking-id: my-app:apps/Deployment:default/nginx-deployment\n```\n\nThe advantages of using the tracking id annotation is that there are no clashes any more with other Kubernetes tools and Argo CD is never confused about the owner of a resource. The `annotation+label` can also be used if you want other tools to understand resources managed by Argo CD.\n\n## Installation ID\nIf you are managing one cluster using multiple Argo CD instances, you will need to set `installationID` in the Argo CD ConfigMap. This will prevent conflicts between the different Argo CD instances:\n\n- Each managed resource will have the annotation `argocd.argoproj.io/tracking-id: <installation-id>`\n- It is possible to have applications with the same name in Argo CD instances without causing conflicts.\n\n## Non self-referencing annotations\nWhen using the tracking method `annotation` or `annotation+label`, Argo CD will consider the resource properties in the annotation (name, namespace, group and kind) to determine whether the resource should be compared against the desired state. If the tracking annotation does not reference the resource it is applied to, the resource will neither affect the application's sync status nor be marked for pruning.\n\nThis allows other kubernetes tools (e.g. HNC) to copy a resource to a different namespace without impacting the Argo CD application's sync status. Copied resources will be visible on the UI at top level. They will have no sync status and won't impact the application's sync status.\n\n## Choosing a tracking method\nTo actually select your preferred tracking method edit the `resourceTrackingMethod` value contained inside the `argocd-cm` configmap.\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  application.resourceTrackingMethod: annotation\n```\n\nPossible values are `label`, `annotation+label` and `annotation` as described in the previous section.\n\nNote that once you change the value you need to sync your applications again (or wait for the sync mechanism to kick-in) in order to apply your changes.\n\nYou can revert to a previous choice, by changing again the configmap.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking", "title": "Resource Tracking", "description": "This page covers how Argo CD tracks Kubernetes resources using labels and annotations, including methods for customizing tracking and managing multiple instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 02:26:09", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "Resource Tracking - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/resource_tracking/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "2b990fd2-dfdb-4242-8f42-329cc10baf83", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Resource Tracking\"?\n\nAssistant: Here are some code examples:\n\n### Tracking Kubernetes resources by label example\n```yaml\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  namespace: default\n  labels:\n    app.kubernetes.io/instance: some-application\n```\n```\n\n### Custom label example\n```yaml\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  application.instanceLabelKey: argocd.argoproj.io/instance\n```\n```\n\n### Annotation method example\n```yaml\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\n  namespace: default\n  annotations:\n    argocd.argoproj.io/tracking-id: my-app:apps/Deployment:default/nginx-deployment\n```\n```\n\n### Choosing a tracking method example\n```yaml\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  application.resourceTrackingMethod: annotation\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking", "title": "Resource Tracking", "description": "This page covers how Argo CD tracks Kubernetes resources using labels and annotations, including methods for customizing tracking and managing multiple instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 02:26:09", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "Resource Tracking - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/resource_tracking/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "2b990fd2-dfdb-4242-8f42-329cc10baf83", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Resource Tracking\"?\n\nAssistant: Here are the recommended best practices:\n\n• Consider using a custom label if the default label is too short or conflicts with other tools.\n• Use the annotation method to avoid conflicts with other Kubernetes tools and maintain clarity on resource ownership.\n• When managing multiple Argo CD instances, set the installation ID to prevent conflicts between instances.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking", "title": "Resource Tracking", "description": "This page covers how Argo CD tracks Kubernetes resources using labels and annotations, including methods for customizing tracking and managing multiple instances.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 02:26:09", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "Resource Tracking - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/resource_tracking/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "2b990fd2-dfdb-4242-8f42-329cc10baf83", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Skip Application Reconcile\"?\n\nAssistant: This page covers the skip reconcile feature in Argo CD, which allows users to stop an Application from reconciling, primarily for integration with third-party projects.\n\nHere's a detailed explanation:\n\n\n## Alpha Feature\nThis is an experimental, alpha-quality feature. The primary use case is to provide integration with third party projects. This feature may be removed in future releases or modified in backwards-incompatible ways.\n\n## Skip Reconcile Option\nArgo CD allows users to stop an Application from reconciling. The skip reconcile option is configured with the `argocd.argoproj.io/skip-reconcile: \"true\"` annotation. When the Application is configured to skip reconcile, all processing is stopped for the Application. During the period of time when the Application is not processing, the Application `status` field will not be updated. If an Application is newly created with the skip reconcile annotation, then the Application `status` field will not be present. To resume the reconciliation or processing of the Application, remove the annotation or set the value to \"false\".\n\n## Primary Use Case\nThe skip reconcile option is intended to be used with third party projects that wishes to make updates to the Application status without having the changes being overwritten by the Application controller. An example of this usage is the Open Cluster Management (OCM) project using pull-integration controller. In the example, the hub cluster Application is not meant to be reconciled by the Argo CD Application controller. Instead, the OCM pull-integration controller will populate the primary/hub cluster Application status using the collected Application status from the remote/spoke/managed cluster.\n\n## Alternative Use Cases\nThere are other alternative use cases for this skip reconcile option. It's important to note that this is an experimental, alpha-quality feature and the following use cases are generally not recommended. - Ease of debugging when the Application reconcile is skipped. - Orphan resources without deleting the Application might provide a safer way to migrate applications. - ApplicationSet can generate dry-run like Applications that don't reconcile automatically. - Pause and resume Applications reconcile during a disaster recovery process. - Provide another alternative approval flow by not allowing an Application to start reconciling right away.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/skip_reconcile", "title": "Skip Application Reconcile", "description": "This page covers the skip reconcile feature in Argo CD, which allows users to stop an Application from reconciling, primarily for integration with third-party projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:29:49", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "title": "Skip Application Reconcile - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/skip_reconcile/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "de442861-50bc-4402-b120-5440ef4b5a5b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/skip_reconcile", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/skip_reconcile/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Skip Application Reconcile\"?\n\nAssistant: Here are some code examples:\n\n### Enabling Skip Reconcile for an Application\n```yaml\nmetadata:\n  annotations:\n    argocd.argoproj.io/skip-reconcile: \"true\"\n```\n\n### Newly Created Application with Skip Reconcile Enabled\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    argocd.argoproj.io/skip-reconcile: \"true\"\n  name: guestbook\n  namespace: argocd\nspec:\n  destination:\n    namespace: guestbook\n    server: https://kubernetes.default.svc\n  project: default\n  source:\n    path: guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n\n# The `status` field is not present.\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/skip_reconcile", "title": "Skip Application Reconcile", "description": "This page covers the skip reconcile feature in Argo CD, which allows users to stop an Application from reconciling, primarily for integration with third-party projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:29:49", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "title": "Skip Application Reconcile - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/skip_reconcile/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "de442861-50bc-4402-b120-5440ef4b5a5b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/skip_reconcile", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/skip_reconcile/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Skip Application Reconcile\"?\n\nAssistant: Here are the recommended best practices:\n\n• This feature is experimental and may be removed or modified in future releases.\n• Use skip reconcile primarily for integration with third-party projects.\n• Be cautious with alternative use cases as they are generally not recommended.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/skip_reconcile", "title": "Skip Application Reconcile", "description": "This page covers the skip reconcile feature in Argo CD, which allows users to stop an Application from reconciling, primarily for integration with third-party projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:29:49", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "title": "Skip Application Reconcile - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/skip_reconcile/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "de442861-50bc-4402-b120-5440ef4b5a5b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/skip_reconcile", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/skip_reconcile/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Status Badge\"?\n\nAssistant: Argo CD can display a badge with health and sync status for any application. The feature is disabled by default because badge image is available to any user without authentication. The feature can be enabled using `statusbadge.enabled` key of `argocd-cm` ConfigMap.\n\nHere's a detailed explanation:\n\n\n## Displaying the Status Badge\nTo show this badge, use the following URL format `${argoCdBaseUrl}/api/badge?name=${appName}`, e.g. http://localhost:8080/api/badge?name=guestbook.\nThe URLs for status image are available on application details page:\n\n1. Navigate to application details page and click on 'Details' button.\n2. Scroll down to 'Status Badge' section.\n3. Select required template such as URL, Markdown etc.\nfor the status image URL in markdown, html, etc are available .\n4. Copy the text and paste it into your README or website.\n\n## Additional query parameters options\n### showAppName\nDisplay the application name in the status badge.\n\nAvailable values: `true/false`\n\nDefault value: `false`\n\nExample: `&showAppName=true`\n\n### revision\nDisplay revision targeted by the application.\n\nIt will also extend the badge width to 192px.\n\nAvailable values: `true/false`\n\nDefault value: `false`\n\nExample: `&revision=true`\n\n### keepFullRevision\nBy default, displayed revision is truncated to 7 characters.\n\nThis parameter allows to display it fully if it exceeds that length.\n\nIt will also extend the badge width to 400px.\n\nAvailable values: `true/false`\n\nDefault value: `false`\n\nExample: `&keepFullRevision=true`\n\n### width\nChange width of the badge.\n\nCompletely replace current calculated width.\n\nAvailable values: `integer`\n\nDefault value: `nil`\n\nExample: `&width=500`\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge", "title": "Status Badge", "description": "Argo CD can display a badge with health and sync status for any application. The feature is disabled by default because badge image is available to any user without authentication. The feature can be enabled using `statusbadge.enabled` key of `argocd-cm` ConfigMap.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:33:37", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/status-badge/", "title": "Status Badge - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "47bee4be-2fa5-40fc-9b90-3012e33c0b94", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Status Badge\"?\n\nAssistant: Here are some code examples:\n\n### Enabling Status Badge\n```yaml\nstatusbadge.enabled: true\n```\n\n### Status Badge URL Example\n```yaml\nhttp://localhost:8080/api/badge?name=guestbook\n```\n\n### Additional Query Parameter Examples\n```yaml\n&showAppName=true\n&revision=true\n&keepFullRevision=true\n&width=500\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge", "title": "Status Badge", "description": "Argo CD can display a badge with health and sync status for any application. The feature is disabled by default because badge image is available to any user without authentication. The feature can be enabled using `statusbadge.enabled` key of `argocd-cm` ConfigMap.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:33:37", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/status-badge/", "title": "Status Badge - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "47bee4be-2fa5-40fc-9b90-3012e33c0b94", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Status Badge\"?\n\nAssistant: Here are the recommended best practices:\n\n• The status badge feature is disabled by default for security reasons; ensure to enable it only if necessary.\n• Use the application details page to easily find the status badge URL.\n• Consider the width of the badge when using additional query parameters to ensure it displays correctly.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge", "title": "Status Badge", "description": "Argo CD can display a badge with health and sync status for any application. The feature is disabled by default because badge image is available to any user without authentication. The feature can be enabled using `statusbadge.enabled` key of `argocd-cm` ConfigMap.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:33:37", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/status-badge/", "title": "Status Badge - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "47bee4be-2fa5-40fc-9b90-3012e33c0b94", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Notification subscriptions\"?\n\nAssistant: The subscription to Argo CD application events can be defined using notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient> annotation.\n\nHere's a detailed explanation:\n\n\n## Default Subscriptions\nThe subscriptions might be configured globally in the argocd-notifications-cm ConfigMap using subscriptions field. The default subscriptions are applied to all applications. The trigger and applications might be configured using the triggers and selector fields:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  # Contains centrally managed global application subscriptions\n  subscriptions: |\n    # subscription for on-sync-status-unknown trigger notifications\n    - recipients:\n      - slack:test2\n      - email:test@gmail.com\n      triggers:\n      - on-sync-status-unknown\n    # subscription restricted to applications with matching labels only\n    - recipients:\n      - slack:test3\n      selector: test=true\n      triggers:\n      - on-sync-status-unknown\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/subscriptions", "title": "Notification subscriptions", "description": "The subscription to Argo CD application events can be defined using notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient> annotation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:34:01", "type": "overview", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Notification subscriptions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/subscriptions/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2e6504e3-4bd0-4905-bb94-19c8f646cb73", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/subscriptions", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/subscriptions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Notification subscriptions\"?\n\nAssistant: Here are some code examples:\n\n### Application Subscription Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: my-channel1;my-channel2\n\n```\n\n### AppProject Subscription Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: my-channel1;my-channel2\n\n```\n\n### Global Subscriptions ConfigMap Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  # Contains centrally managed global application subscriptions\n  subscriptions: |\n    # subscription for on-sync-status-unknown trigger notifications\n    - recipients:\n      - slack:test2\n      - email:test@gmail.com\n      triggers:\n      - on-sync-status-unknown\n    # subscription restricted to applications with matching labels only\n    - recipients:\n      - slack:test3\n      selector: test=true\n      triggers:\n      - on-sync-status-unknown\n\n```\n\n### Webhook Subscription Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.<webhook-name>: |\n    (snip)\n  subscriptions: |\n    - recipients:\n      - <webhook-name>\n      triggers:\n      - on-sync-status-unknown\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/subscriptions", "title": "Notification subscriptions", "description": "The subscription to Argo CD application events can be defined using notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient> annotation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:34:01", "type": "code_examples", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Notification subscriptions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/subscriptions/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2e6504e3-4bd0-4905-bb94-19c8f646cb73", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/subscriptions", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/subscriptions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Notification subscriptions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use semicolon separated lists for multiple recipients in subscriptions.\n• Configure global subscriptions in the argocd-notifications-cm ConfigMap for centralized management.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/subscriptions", "title": "Notification subscriptions", "description": "The subscription to Argo CD application events can be defined using notifications.argoproj.io/subscribe.<trigger>.<service>: <recipient> annotation.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:34:01", "type": "best_practices", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "Notification subscriptions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/subscriptions/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2e6504e3-4bd0-4905-bb94-19c8f646cb73", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/subscriptions", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/subscriptions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Sync Applications with Kubectl\"?\n\nAssistant: You can use 'kubectl' to ask Argo CD to synchronize applications the same way you can use the CLI or UI. Many configurations like 'force', 'prune', 'apply' and even synchronize a specific list of resources are equally supported.\n\nHere's a detailed explanation:\n\n\n## Overview\nYou can use \"kubectl\" to ask Argo CD to synchronize applications the same way you can use the CLI or UI. Many configurations like \"force\", \"prune\", \"apply\" and even synchronize a specific list of resources are equally supported. This is done by applying or patching the Argo CD application with a document that defines an \"operation\".\n\nThis \"operation\" defines how a synchronization should be done and for what resources these synchronization is to be done.\n\nThere are many configuration options that can be added to the \"operation\". Next, a few of them are explained. For more details, you can have a look at the CRD applications.argoproj.io. Some of them are required, whereas others are optional.\n\n## Synchronizing All Resources\nTo ask Argo CD to synchronize all resources of a given application, we can do:\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: <app-name>\n  namespace: <namespace>\nspec:\n  ...\noperation:\n  initiatedBy:\n    username: <username>\n  sync:\n    syncStrategy:\n      hook: {}\n```\n\n```bash\n$ kubectl apply -f <apply-file>\n```\n\nThe most important part is the \"sync\" definition in the \"operation\" field. You can pass optional information like \"info\" or \"initiatedBy\". \"info\" allows you to add information about the operation in the form of a list. \"initiatedBy\" contains information about who initiated the operation request.\n\n## Patching Applications\nOr if you prefer, you also can patch:\n\n```yaml\noperation:\n  initiatedBy:\n    username: <username>\n  sync:\n    syncStrategy:\n      hook: {}\n```\n\n```bash\n$ kubectl patch -n <namespace> app <app-name> --patch-file <patch-file> --type merge\n```\n\nBe aware that patches, specially with merge strategies, may not work the way you expect especially if you change sync strategies or options. In these cases, \"kubectl apply\" gives better results.\n\n## Checking Synchronization State\nEither with a \"kubectl patch\" or \"kubectl apply\", the state of the synchronization is reported in the \"operationState\" field in the application object.\n\n```bash\n$ kubectl get -n <namespace> get app <app-name> -o yaml\n...\nstatus:\n  operationState:\n    finishedAt: \"2023-08-03T11:16:17Z\"\n    message: successfully synced (all tasks run)\n    phase: Succeeded\n```\n\n## Apply and Hook Synchronization Strategies\nThere are two types of synchronization strategies: \"hook\", which is the default value, and \"apply\".\n\nAn \"apply\" sync strategy tells Argo CD to \"kubectl apply\", whereas a \"hook\" sync strategy informs Argo CD to submit any resource that's referenced in the operation. This way the synchronization of these resources will take into consideration any hook the resource has been annotated with.\n\n```yaml\noperation:\n  sync:\n    syncStrategy:\n      apply: {}\n```\n\n```yaml\noperation:\n  sync:\n    syncStrategy:\n      hook: {}\n```\n\nBoth strategies support \"force\". However, you need to be aware that a force operation deletes the resource when patch encounters a conflict after having retried 5 times.\n\n```yaml\noperation:\n  sync:\n    syncStrategy:\n      apply:\n        force: true\n```\n\n```yaml\noperation:\n  sync:\n    syncStrategy:\n      hook:\n        force: true\n```\n\n## Prune Resources\nIf you want to prune your resources before applying, you can instruct Argo CD to do so:\n\n```yaml\noperation:\n  sync:\n    prune: true\n```\n\n## List of Resources\nThere's always the possibility to pass a list of resources. This list can be all resources the application manages or only a subset, for example resources that remained out of sync for some reason.\n\nOnly \"kind\" and \"name\" are required fields when referencing resources, but the fields \"groups\" and \"namespace\" can also be defined:\n\n```yaml\noperation:\n  sync:\n    resources:\n      - kind: Namespace\n        name: namespace-name\n      - kind: ServiceAccount\n        name: service-account-name\n        namespace: namespace-name\n      - group: networking.k8s.io\n        kind: NetworkPolicy\n        name: network-policy-name\n        namespace: namespace-name\n```\n\n## Sync Options\nIn an operation, you can also pass sync-options. Each of these options is passed as \"name=value\" pairs. For example:\n\n```yaml\noperations:\n  sync:\n    syncOptions:\n      - Validate=false\n      - Prune=false\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-kubectl", "title": "Sync Applications with Kubectl", "description": "You can use 'kubectl' to ask Argo CD to synchronize applications the same way you can use the CLI or UI. Many configurations like 'force', 'prune', 'apply' and even synchronize a specific list of resources are equally supported.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 02:35:26", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/sync-kubectl/", "title": "Sync Applications with Kubectl - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "5da6d3ce-cac1-4cf4-b3ba-7ca05a06a0dc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-kubectl", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-kubectl/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Sync Applications with Kubectl\"?\n\nAssistant: Here are some code examples:\n\n### Synchronizing All Resources\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: <app-name>\n  namespace: <namespace>\nspec:\n  ...\noperation:\n  initiatedBy:\n    username: <username>\n  sync:\n    syncStrategy:\n      hook: {}\n```\n\n### Applying Changes\n```yaml\n$ kubectl apply -f <apply-file>\n```\n\n### Patching Applications\n```yaml\noperation:\n  initiatedBy:\n    username: <username>\n  sync:\n    syncStrategy:\n      hook: {}\n```\n\n### Patching Command\n```yaml\n$ kubectl patch -n <namespace> app <app-name> --patch-file <patch-file> --type merge\n```\n\n### Checking Synchronization State\n```yaml\n$ kubectl get -n <namespace> get app <app-name> -o yaml\n...\nstatus:\n  operationState:\n    finishedAt: \"2023-08-03T11:16:17Z\"\n    message: successfully synced (all tasks run)\n    phase: Succeeded\n```\n\n### Apply Synchronization Strategy\n```yaml\noperation:\n  sync:\n    syncStrategy:\n      apply: {}\n```\n\n### Hook Synchronization Strategy\n```yaml\noperation:\n  sync:\n    syncStrategy:\n      hook: {}\n```\n\n### Force Apply Synchronization Strategy\n```yaml\noperation:\n  sync:\n    syncStrategy:\n      apply:\n        force: true\n```\n\n### Force Hook Synchronization Strategy\n```yaml\noperation:\n  sync:\n    syncStrategy:\n      hook:\n        force: true\n```\n\n### Prune Resources\n```yaml\noperation:\n  sync:\n    prune: true\n```\n\n### List of Resources\n```yaml\noperation:\n  sync:\n    resources:\n      - kind: Namespace\n        name: namespace-name\n      - kind: ServiceAccount\n        name: service-account-name\n        namespace: namespace-name\n      - group: networking.k8s.io\n        kind: NetworkPolicy\n        name: network-policy-name\n        namespace: namespace-name\n```\n\n### Sync Options\n```yaml\noperations:\n  sync:\n    syncOptions:\n      - Validate=false\n      - Prune=false\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-kubectl", "title": "Sync Applications with Kubectl", "description": "You can use 'kubectl' to ask Argo CD to synchronize applications the same way you can use the CLI or UI. Many configurations like 'force', 'prune', 'apply' and even synchronize a specific list of resources are equally supported.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 02:35:26", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/sync-kubectl/", "title": "Sync Applications with Kubectl - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "5da6d3ce-cac1-4cf4-b3ba-7ca05a06a0dc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-kubectl", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-kubectl/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Sync Applications with Kubectl\"?\n\nAssistant: Here are the recommended best practices:\n\n• Be aware that patches, especially with merge strategies, may not work the way you expect especially if you change sync strategies or options. In these cases, 'kubectl apply' gives better results.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-kubectl", "title": "Sync Applications with Kubectl", "description": "You can use 'kubectl' to ask Argo CD to synchronize applications the same way you can use the CLI or UI. Many configurations like 'force', 'prune', 'apply' and even synchronize a specific list of resources are equally supported.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 02:35:26", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/sync-kubectl/", "title": "Sync Applications with Kubectl - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "5da6d3ce-cac1-4cf4-b3ba-7ca05a06a0dc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-kubectl", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-kubectl/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Sync Phases and Waves\"?\n\nAssistant: This page covers the synchronization process in Argo CD, detailing the phases and waves involved in syncing resources.\n\nHere's a detailed explanation:\n\n\n## How Do I Configure Phases?\nPre-sync and post-sync can only contain hooks. Apply the hook annotation:\n\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n```\n\n[Read more about hooks](https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/).\n\n## How Do I Configure Waves?\nSpecify the wave using the following annotation:\n\n```\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-wave: \"5\"\n```\n\nHooks and resources are assigned to wave zero by default. The wave can be negative, so you can create a wave that runs before all other resources.\n\n## Can Multiple Resources Share the Same Wave?\nYes, multiple resources can share the same sync-wave value. Resources with the same sync-wave are processed together.\n\nWithin a wave, resources are ordered by their kind (e.g. namespaces first) and then by their name.\n\n## How Does It Work?\nWhen Argo CD starts a sync, it orders the resources in the following precedence:\n\n- The phase\n- The wave they are in (lower values first for creation & updation and higher values first for deletion)\n- By kind (e.g. [namespaces first and then other Kubernetes resources, followed by custom resources](https://github.com/argoproj/gitops-engine/blob/bc9ce5764fa306f58cf59199a94f6c968c775a2d/pkg/sync/sync_tasks.go#L27-L66))\n- By name\n\nIt then determines the number of the next wave to apply. This is the first number where any resource is out-of-sync or unhealthy.\n\nIt applies resources in that wave.\n\nIt repeats this process until all phases and waves are in-sync and healthy.\n\nBecause an application can have resources that are unhealthy in the first wave, it may be that the app can never get to healthy.\n\nDuring pruning of resources, resources from higher waves are processed first before moving to lower waves. If, for any reason, a resource isn't removed/pruned in a wave, the resources in next waves won't be processed. This is to ensure proper resource cleanup between waves.\n\nNote: there is a delay between each sync wave to give other controllers a chance to react to the applied spec change. This prevents Argo CD from assessing resource health too quickly (against a stale object), and firing hooks prematurely. The default delay between each sync wave is 2 seconds. This can be adjusted by setting the `ARGOCD_SYNC_WAVE_DELAY` environment variable in the argocd-application-controller deployment.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves", "title": "Sync Phases and Waves", "description": "This page covers the synchronization process in Argo CD, detailing the phases and waves involved in syncing resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:39:00", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/sync-waves/", "favicon": "https://argo-cd.readthedocs.io/en/stable/assets/favicon.png", "language": "en", "viewport": ["width=device-width,initial-scale=1", "width=device-width, initial-scale=1"], "title": "Sync Phases and Waves - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "b4f5f9f5-87f3-4ec1-ae8f-cbcbf9985f30", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Sync Phases and Waves\"?\n\nAssistant: Here are some code examples:\n\n### Pre-sync Hook Annotation\n```yaml\nmetadata:\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n```\n\n### Sync Wave Annotation\n```yaml\nmetadata:\n  annotations:\n    argocd.argoproj.io/sync-wave: \"5\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves", "title": "Sync Phases and Waves", "description": "This page covers the synchronization process in Argo CD, detailing the phases and waves involved in syncing resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:39:00", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/sync-waves/", "favicon": "https://argo-cd.readthedocs.io/en/stable/assets/favicon.png", "language": "en", "viewport": ["width=device-width,initial-scale=1", "width=device-width, initial-scale=1"], "title": "Sync Phases and Waves - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "b4f5f9f5-87f3-4ec1-ae8f-cbcbf9985f30", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Sync Phases and Waves\"?\n\nAssistant: Here are the recommended best practices:\n\n• The default delay between each sync wave is 2 seconds, which can be adjusted by setting the ARGOCD_SYNC_WAVE_DELAY environment variable.\n• Ensure proper resource cleanup between waves by processing resources from higher waves first.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves", "title": "Sync Phases and Waves", "description": "This page covers the synchronization process in Argo CD, detailing the phases and waves involved in syncing resources.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:39:00", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/sync-waves/", "favicon": "https://argo-cd.readthedocs.io/en/stable/assets/favicon.png", "language": "en", "viewport": ["width=device-width,initial-scale=1", "width=device-width, initial-scale=1"], "title": "Sync Phases and Waves - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "b4f5f9f5-87f3-4ec1-ae8f-cbcbf9985f30", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Sync Windows\"?\n\nAssistant: Sync windows are configurable windows of time where syncs will either be blocked or allowed. These are defined by a kind, which can be either allow or deny, a schedule in cron format and a duration along with one or more of either applications, namespaces and clusters. Wildcards are supported.\n\nHere's a detailed explanation:\n\n\n## Relationship between Sync Windows and Applications\nThe relationship between Sync Windows and Application resources is many-to-many. This means that an Application resource may be affected by multiple Sync Windows, and that a single Sync Window definition may apply to multiple Application resources.\n\nThe relationship between Sync Window and Application is established as part of the definition of Sync Window. Sync Window definition includes a section defining the Application resources to which it applies. There are three mechanisms for selecting the Application resources to which a Sync Window applies:\n\n- By name of Application resource\n- By cluster into which resources are installed by Application resource. This is specified by `Application.spec.destination.name` and `.server` fields\n- By namespace into which resources are installed by Application resource. This is specified by `Application.spec.destination.namespace` field.\n\nAll three mechanisms allow usage of wildcards. The mechanisms are not mutually exclusive, and all three of them can be used in single Sync Window definition.\n\nWhen multiple selection mechanisms are used, they are effectively `ORed`, meaning that if any of the selector selects the Application, then the Application is affected by the Sync Window.\n\n## Effect of Sync Windows\nThese windows affect the running of both manual and automated syncs but allow an override for manual syncs which is useful if you are only interested in preventing automated syncs or if you need to temporarily override a window to perform a sync.\n\nThe windows work in the following way. If there are no windows matching an application then all syncs are allowed. If there are any `allow` windows matching an application then syncs will only be allowed when there is an active `allow` window. If there are any `deny` windows matching an application then all syncs will be denied when the `deny` windows are active. If there is an active matching `allow` and an active matching `deny` then syncs will be denied as `deny` windows override `allow` windows. The UI and the CLI will both display the state of the sync windows. The UI has a panel which will display different colours depending on the state. The colours are as follows. `Red: sync denied`, `Orange: manual allowed` and `Green: sync allowed.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync_windows", "title": "Sync Windows", "description": "Sync windows are configurable windows of time where syncs will either be blocked or allowed. These are defined by a kind, which can be either allow or deny, a schedule in cron format and a duration along with one or more of either applications, namespaces and clusters. Wildcards are supported.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:39:31", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Sync Windows - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/sync_windows/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "080029bb-ea9a-4e83-839e-e4463ea88c04", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync_windows", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync_windows/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Sync Windows\"?\n\nAssistant: Here are some code examples:\n\n### Display Sync State using CLI\n```yaml\nargocd app get APP\n\nName:               guestbook\nProject:            default\nServer:             in-cluster\nNamespace:          default\nURL:                http://localhost:8080/applications/guestbook\nRepo:               https://github.com/argoproj/argocd-example-apps.git\nTarget:\nPath:               guestbook\nSyncWindow:         Sync Denied\nAssigned Windows:   deny:0 2 * * *:1h,allow:0 2 3 3 3:1h\nSync Policy:        Automated\nSync Status:        Synced to  (5c2d89b)\nHealth Status:      Healthy\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync_windows", "title": "Sync Windows", "description": "Sync windows are configurable windows of time where syncs will either be blocked or allowed. These are defined by a kind, which can be either allow or deny, a schedule in cron format and a duration along with one or more of either applications, namespaces and clusters. Wildcards are supported.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:39:31", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Sync Windows - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/sync_windows/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "080029bb-ea9a-4e83-839e-e4463ea88c04", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync_windows", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync_windows/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Sync Windows\"?\n\nAssistant: Here are the recommended best practices:\n\n• Windows can be created using the CLI:\n• To perform a sync when syncs are being prevented by a window, configure the window to allow manual syncs using the CLI, UI or directly in the AppProject manifest:\n• Windows can be listed using the CLI or viewed in the UI:\n• All fields of a window can be updated using either the CLI or UI. The applications, namespaces and clusters fields require the update to contain all of the required values.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync_windows", "title": "Sync Windows", "description": "Sync windows are configurable windows of time where syncs will either be blocked or allowed. These are defined by a kind, which can be either allow or deny, a schedule in cron format and a duration along with one or more of either applications, namespaces and clusters. Wildcards are supported.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:39:31", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "Sync Windows - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/sync_windows/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "080029bb-ea9a-4e83-839e-e4463ea88c04", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync_windows", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync_windows/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Tool Detection\"?\n\nAssistant: The tool used to build an application is detected as follows: If a specific tool is explicitly configured, then that tool is selected to create your application's manifests.\n\nHere's a detailed explanation:\n\n\n## Tool Detection\nThe tool used to build an application is detected as follows:\n\nIf a specific tool is explicitly configured, then that tool is selected to create your application's manifests.\n\nThe tool can be explicitly specified in the Application custom resource like this:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  ...\nspec:\n  ...\n  source:\n    ...\n\n    # Tool -> plain directory\n    directory:\n      recurse: true\n...\n```\n\nYou also can select the tool in the Application creation wizard in the web user interface. The default is 'Directory'. Press the dropdown button beneath the tool name if you want to choose a different one.\n\nIf not, then the tool is detected implicitly as follows:\n\n- **Helm** if there's a file matching `Chart.yaml`.\n- **Kustomize** if there's a `kustomization.yaml`, `kustomization.yml`, or `Kustomization`\n\nOtherwise it is assumed to be a plain **directory** application.\n\n## Disable built-in tools\nBuilt-in config management tools can be optionally disabled by setting one of the following keys, in the `argocd-cm` ConfigMap, to `false`: `kustomize.enable`, `helm.enable` or `jsonnet.enable`. Once the tool is disabled, Argo CD will assume the application target directory contains plain Kubernetes YAML manifests.\n\nDisabling unused config management tools can be a helpful security enhancement. Vulnerabilities are sometimes limited to certain config management tools. Even if there is no vulnerability, an attacker may use a certain tool to take advantage of a misconfiguration in an Argo CD instance. Disabling unused config management tools limits the tools available to malicious actors.\n\n## References\n- [reposerver/repository/repository.go/GetAppSourceType](https://github.com/argoproj/argo-cd/blob/master/reposerver/repository/repository.go#L286)\n- [server/repository/repository.go/listAppTypes](https://github.com/argoproj/argo-cd/blob/master/server/repository/repository.go#L97)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection", "title": "Tool Detection", "description": "The tool used to build an application is detected as follows: If a specific tool is explicitly configured, then that tool is selected to create your application's manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:39:52", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/tool_detection/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Tool Detection - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "scrapeId": "6df4e292-bf0b-42af-979b-f7f641875929", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Tool Detection\"?\n\nAssistant: Here are some code examples:\n\n### Application Custom Resource Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  ...\nspec:\n  ...\n  source:\n    ...\n\n    # Tool -> plain directory\n    directory:\n      recurse: true\n...\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection", "title": "Tool Detection", "description": "The tool used to build an application is detected as follows: If a specific tool is explicitly configured, then that tool is selected to create your application's manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:39:52", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/tool_detection/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Tool Detection - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "scrapeId": "6df4e292-bf0b-42af-979b-f7f641875929", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Tool Detection\"?\n\nAssistant: Here are the recommended best practices:\n\n• Disabling unused config management tools can be a helpful security enhancement.\n• Vulnerabilities are sometimes limited to certain config management tools.\n• Disabling unused config management tools limits the tools available to malicious actors.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection", "title": "Tool Detection", "description": "The tool used to build an application is detected as follows: If a specific tool is explicitly configured, then that tool is selected to create your application's manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:39:52", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/tool_detection/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Tool Detection - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "scrapeId": "6df4e292-bf0b-42af-979b-f7f641875929", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd Command Reference\"?\n\nAssistant: argocd controls a Argo CD server\n\nHere's a detailed explanation:\n\n\n## argocd\nargocd controls a Argo CD server\n\n```\nargocd [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd", "title": "argocd Command Reference", "description": "argocd controls a Argo CD server", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:43:45", "type": "overview", "page_metadata": {"title": "Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd/", "readthedocs-project-slug": "argo-cd", "scrapeId": "93c43eb0-cadc-497f-b07f-c8c686692196", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n  -h, --help                            help for argocd\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd", "title": "argocd Command Reference", "description": "argocd controls a Argo CD server", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:43:45", "type": "code_examples", "page_metadata": {"title": "Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd/", "readthedocs-project-slug": "argo-cd", "scrapeId": "93c43eb0-cadc-497f-b07f-c8c686692196", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd account Command Reference\"?\n\nAssistant: Manage account settings\n\nHere's a detailed explanation:\n\n\n## argocd account\nManage account settings\n\n```\nargocd account [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account", "title": "argocd account Command Reference", "description": "Manage account settings", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:44:40", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "title": "argocd account Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account/", "scrapeId": "925f6dcd-38d4-452e-a389-27940e4b0d18", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd account Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # List accounts\n  argocd account list\n\n  # Update the current user's password\n  argocd account update-password\n\n  # Can I sync any app?\n  argocd account can-i sync applications '*'\n\n  # Get User information\n  argocd account get-user-info\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account", "title": "argocd account Command Reference", "description": "Manage account settings", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:44:40", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "title": "argocd account Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account/", "scrapeId": "925f6dcd-38d4-452e-a389-27940e4b0d18", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd account Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about specific commands and options.\n• Be cautious when using --insecure-skip-tls-verify as it makes your HTTPS connections insecure.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account", "title": "argocd account Command Reference", "description": "Manage account settings", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:44:40", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "title": "argocd account Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account/", "scrapeId": "925f6dcd-38d4-452e-a389-27940e4b0d18", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd account bcrypt Command Reference\"?\n\nAssistant: Generate bcrypt hash for any password\n\nHere's a detailed explanation:\n\n\n## argocd account bcrypt\nGenerate bcrypt hash for any password\n\n```\nargocd account bcrypt [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_bcrypt", "title": "argocd account bcrypt Command Reference", "description": "Generate bcrypt hash for any password", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:46:02", "type": "overview", "page_metadata": {"title": "argocd account bcrypt Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_bcrypt/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "013704c1-f2ea-4633-9565-549b7b5ffe08", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_bcrypt", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_bcrypt/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd account bcrypt Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Generate bcrypt hash for any password\n```yaml\nargocd account bcrypt --password YOUR_PASSWORD\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_bcrypt", "title": "argocd account bcrypt Command Reference", "description": "Generate bcrypt hash for any password", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:46:02", "type": "code_examples", "page_metadata": {"title": "argocd account bcrypt Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_bcrypt/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "013704c1-f2ea-4633-9565-549b7b5ffe08", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_bcrypt", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_bcrypt/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd account can-i Command Reference\"?\n\nAssistant: Reference for the argocd account can-i command, detailing its usage, options, and examples.\n\nHere's a detailed explanation:\n\n\n## argocd account can-i\nCan I\n\n```\nargocd account can-i ACTION RESOURCE SUBRESOURCE [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_can-i", "title": "argocd account can-i Command Reference", "description": "Reference for the argocd account can-i command, detailing its usage, options, and examples.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:47:33", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd account can-i Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_can-i/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "7a081593-61bc-47ce-bf27-7d655c065057", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_can-i", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_can-i/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd account can-i Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\n# Can I sync any app?\nargocd account can-i sync applications '*'\n\n# Can I update a project?\nargocd account can-i update projects 'default'\n\n# Can I create a cluster?\nargocd account can-i create clusters '*'\n\nActions: [get create update delete sync override action invoke]\nResources: [clusters projects applications applicationsets repositories write-repositories certificates accounts gpgkeys logs exec extensions]\n```\n```\n\n### Options\n```yaml\n```\n  -h, --help   help for can-i\n```\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_can-i", "title": "argocd account can-i Command Reference", "description": "Reference for the argocd account can-i command, detailing its usage, options, and examples.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:47:33", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd account can-i Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_can-i/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "7a081593-61bc-47ce-bf27-7d655c065057", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_can-i", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_can-i/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd account delete-token Command Reference\"?\n\nAssistant: Deletes account token\n\nHere's a detailed explanation:\n\n\n## argocd account delete-token\nDeletes account token\n\n```\nargocd account delete-token [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_delete-token", "title": "argocd account delete-token Command Reference", "description": "Deletes account token", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:47:58", "type": "overview", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_delete-token/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd account delete-token Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "989f1c07-63e0-4f83-8d3a-9bb2821a1d1b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_delete-token", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_delete-token/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd account delete-token Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n# Delete token of the currently logged in account\nargocd account delete-token ID\n\n# Delete token of the account with the specified name\nargocd account delete-token --account <account-name> ID\n\n```\n\n### Options\n```yaml\n  -a, --account string   Account name. Defaults to the current account.\n  -h, --help             help for delete-token\n\n```\n\n### Options inherited from parent commands\n```yaml\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_delete-token", "title": "argocd account delete-token Command Reference", "description": "Deletes account token", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:47:58", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_delete-token/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd account delete-token Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "989f1c07-63e0-4f83-8d3a-9bb2821a1d1b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_delete-token", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_delete-token/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd account generate-token Command Reference\"?\n\nAssistant: Generate account token\n\nHere's a detailed explanation:\n\n\n## argocd account generate-token\nGenerate account token\n\n```\nargocd account generate-token [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_generate-token", "title": "argocd account generate-token Command Reference", "description": "Generate account token", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:48:09", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_generate-token/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd account generate-token Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "a75b22d8-3ccd-4a0f-b23a-c3fdee3abeed", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_generate-token", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_generate-token/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd account generate-token Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n# Generate token for the currently logged in account\nargocd account generate-token\n\n# Generate token for the account with the specified name\nargocd account generate-token --account <account-name>\n\n```\n\n### Options\n```yaml\n  -a, --account string      Account name. Defaults to the current account.\n  -e, --expires-in string   Duration before the token will expire. (Default: No expiration) (default \"0s\")\n  -h, --help                help for generate-token\n      --id string           Optional token id. Fall back to uuid if not value specified.\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_generate-token", "title": "argocd account generate-token Command Reference", "description": "Generate account token", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:48:09", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_generate-token/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd account generate-token Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "a75b22d8-3ccd-4a0f-b23a-c3fdee3abeed", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_generate-token", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_generate-token/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd account generate-token Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --account flag to specify a different account if needed.\n• Set the --expires-in option to define a custom expiration duration for the token.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_generate-token", "title": "argocd account generate-token Command Reference", "description": "Generate account token", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:48:09", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_generate-token/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd account generate-token Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "a75b22d8-3ccd-4a0f-b23a-c3fdee3abeed", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_generate-token", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_generate-token/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd account get-user-info Command Reference\"?\n\nAssistant: Get user info\n\nHere's a detailed explanation:\n\n\n## argocd account get-user-info\nGet user info\n\n```\nargocd account get-user-info [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get-user-info", "title": "argocd account get-user-info Command Reference", "description": "Get user info", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:50:31", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "title": "argocd account get-user-info Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_get-user-info/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "a958c857-6309-4f47-b121-edbcc33397a6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get-user-info", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get-user-info/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd account get-user-info Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Get User information for the currently logged-in user\n```yaml\nargocd account get-user-info\n```\n\n### Get User information in yaml format\n```yaml\nargocd account get-user-info -o yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get-user-info", "title": "argocd account get-user-info Command Reference", "description": "Get user info", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:50:31", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "title": "argocd account get-user-info Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_get-user-info/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "a958c857-6309-4f47-b121-edbcc33397a6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get-user-info", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get-user-info/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd account get-user-info Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the '-o' flag to specify the output format as yaml or json for better readability.\n• Ensure you are logged in using 'argocd login' before fetching user info.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get-user-info", "title": "argocd account get-user-info Command Reference", "description": "Get user info", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:50:31", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "title": "argocd account get-user-info Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_get-user-info/", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "a958c857-6309-4f47-b121-edbcc33397a6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get-user-info", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get-user-info/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd account get Command Reference\"?\n\nAssistant: Get account details\n\nHere's a detailed explanation:\n\n\n## argocd account get\nGet account details\n\n```\nargocd account get [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get", "title": "argocd account get Command Reference", "description": "Get account details", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:51:13", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_account_get/", "title": "argocd account get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2be582a7-a572-4cc9-bc59-b9f6968efa14", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd account get Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n# Get the currently logged in account details\nargocd account get\n\n# Get details for an account by name\nargocd account get --account <account-name>\n\n```\n\n### Options\n```yaml\n  -a, --account string   Account name. Defaults to the current account.\n  -h, --help             help for get\n  -o, --output string    Output format. One of: json|yaml|wide|name (default \"wide\")\n\n```\n\n### Options inherited from parent commands\n```yaml\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get", "title": "argocd account get Command Reference", "description": "Get account details", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:51:13", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_account_get/", "title": "argocd account get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "2be582a7-a572-4cc9-bc59-b9f6968efa14", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd account list Command Reference\"?\n\nAssistant: List accounts\n\nHere's a detailed explanation:\n\n\n## argocd account list\nList accounts\n\n```\nargocd account list [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_list", "title": "argocd account list Command Reference", "description": "List accounts", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:51:51", "type": "overview", "page_metadata": {"title": "argocd account list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_list/", "scrapeId": "e83025a8-8f01-4376-b157-35380d16eb87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd account list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Basic Usage Example\n```yaml\n```\nargocd account list\n```\n```\n\n### Options\n```yaml\n```\n  -h, --help            help for list\n  -o, --output string   Output format. One of: json|yaml|wide|name (default \"wide\")\n```\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_list", "title": "argocd account list Command Reference", "description": "List accounts", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:51:51", "type": "code_examples", "page_metadata": {"title": "argocd account list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_list/", "scrapeId": "e83025a8-8f01-4376-b157-35380d16eb87", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd account update-password Command Reference\"?\n\nAssistant: Update an account's password\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command can be used to update the password of the currently logged on user, or an arbitrary local user account when the currently logged on user has appropriate RBAC permissions to change other accounts.\n\n```\nargocd account update-password [flags]\n```\n\n\n## Examples\n```\n    # Update the current user's password\n    argocd account update-password\n\n    # Update the password for user foobar\n    argocd account update-password --account foobar\n```\n\n\n## Options\n```\n      --account string            An account name that should be updated. Defaults to current user account\n      --current-password string   Password of the currently logged on user\n  -h, --help                      help for update-password\n      --new-password string       New password you want to update to\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_update-password", "title": "argocd account update-password Command Reference", "description": "Update an account's password", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 02:52:19", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "argocd account update-password Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_update-password/", "readthedocs-version-slug": "stable", "scrapeId": "54e1f8d3-c62a-4eff-9844-c9e44b4e7928", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_update-password", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_update-password/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd account update-password Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Update the current user's password\n```yaml\nargocd account update-password\n```\n\n### Update the password for user foobar\n```yaml\nargocd account update-password --account foobar\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_update-password", "title": "argocd account update-password Command Reference", "description": "Update an account's password", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 02:52:19", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "argocd account update-password Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_account_update-password/", "readthedocs-version-slug": "stable", "scrapeId": "54e1f8d3-c62a-4eff-9844-c9e44b4e7928", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_update-password", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_update-password/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin Command Reference\"?\n\nAssistant: Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access\n\nHere's a detailed explanation:\n\n\n## argocd admin\nContains a set of commands useful for Argo CD administrators and requires direct Kubernetes access\n\n```\nargocd admin [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin", "title": "argocd admin Command Reference", "description": "Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:52:26", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd admin Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b0cff815-93f7-4293-8dae-7e73a1b3b1d6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Access the Argo CD web UI\n```yaml\n$ argocd admin dashboard\n```\n\n### Reset the initial admin password\n```yaml\n$ argocd admin initial-password reset\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin", "title": "argocd admin Command Reference", "description": "Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:52:26", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd admin Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b0cff815-93f7-4293-8dae-7e73a1b3b1d6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --logformat option to set the logging format to either text or json for better readability.\n• Set the --loglevel option to control the verbosity of logs, choosing from debug, info, warn, or error.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin", "title": "argocd admin Command Reference", "description": "Contains a set of commands useful for Argo CD administrators and requires direct Kubernetes access", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:52:26", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd admin Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b0cff815-93f7-4293-8dae-7e73a1b3b1d6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin app Command Reference\"?\n\nAssistant: Manage applications configuration\n\nHere's a detailed explanation:\n\n\n## argocd admin app\nManage applications configuration\n\n```\nargocd admin app [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app", "title": "argocd admin app Command Reference", "description": "Manage applications configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:52:47", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "title": "argocd admin app Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_app/", "scrapeId": "e4ceb8f7-dc79-4946-8dd3-cd7ebebe1a3f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin app Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n# Compare results of two reconciliations and print diff\nargocd admin app diff-reconcile-results APPNAME [flags]\n\n# Generate declarative config for an application\nargocd admin app generate-spec APPNAME\n\n# Reconcile all applications and store reconciliation summary in the specified file\nargocd admin app get-reconcile-results APPNAME\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app", "title": "argocd admin app Command Reference", "description": "Manage applications configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:52:47", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "title": "argocd admin app Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_app/", "scrapeId": "e4ceb8f7-dc79-4946-8dd3-cd7ebebe1a3f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin app Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the app command and its options.\n• Ensure to set the ARGOCD_AUTH_TOKEN environment variable for authentication if not using the --auth-token flag.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app", "title": "argocd admin app Command Reference", "description": "Manage applications configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:52:47", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "title": "argocd admin app Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_app/", "scrapeId": "e4ceb8f7-dc79-4946-8dd3-cd7ebebe1a3f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin app diff-reconcile-results Command Reference\"?\n\nAssistant: Compare results of two reconciliations and print diff.\n\nHere's a detailed explanation:\n\n\n## argocd admin app diff-reconcile-results\nCompare results of two reconciliations and print diff.\n\n```\nargocd admin app diff-reconcile-results PATH1 PATH2 [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_diff-reconcile-results", "title": "argocd admin app diff-reconcile-results Command Reference", "description": "Compare results of two reconciliations and print diff.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:53:20", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin app diff-reconcile-results Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_app_diff-reconcile-results/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "2da57138-a8b3-49ff-8654-2a277fee0d40", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_diff-reconcile-results", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_diff-reconcile-results/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin app diff-reconcile-results Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nargocd admin app diff-reconcile-results PATH1 PATH2 [flags]\n```\n\n### Options\n```yaml\n  -h, --help   help for diff-reconcile-results\n\n  --argocd-context string           The name of the Argo-CD server context to use\n  --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n  --client-crt string               Client certificate file\n  --client-crt-key string           Client certificate key file\n  --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n  --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n  --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n  --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n  --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n  --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n  --insecure                        Skip server certificate and domain verification\n  --kube-context string             Directs the command to the given kube-context\n  --logformat string                Set the logging format. One of: text|json (default \"text\")\n  --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  --plaintext                       Disable TLS\n  --port-forward                    Connect to a random argocd-server port using port forwarding\n  --port-forward-namespace string   Namespace name which should be used for port forwarding\n  --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n  --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n  --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n  --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n  --server string                   Argo CD server address\n  --server-crt string               Server certificate file\n  --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_diff-reconcile-results", "title": "argocd admin app diff-reconcile-results Command Reference", "description": "Compare results of two reconciliations and print diff.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:53:20", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin app diff-reconcile-results Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_app_diff-reconcile-results/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "2da57138-a8b3-49ff-8654-2a277fee0d40", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_diff-reconcile-results", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_diff-reconcile-results/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin app generate-spec Command Reference\"?\n\nAssistant: Generate declarative config for an application\n\nHere's a detailed explanation:\n\n\n## argocd admin app generate-spec\nGenerate declarative config for an application\n\n```\nargocd admin app generate-spec APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_generate-spec", "title": "argocd admin app generate-spec Command Reference", "description": "Generate declarative config for an application", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:53:55", "type": "overview", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_app_generate-spec/", "title": "argocd admin app generate-spec Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "4fc646e9-a7c3-498c-b0fe-706a8d97891a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_generate-spec", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_generate-spec/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin app generate-spec Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Generate declarative config for a directory app\n```yaml\nargocd admin app generate-spec guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse\n```\n\n### Generate declarative config for a Jsonnet app\n```yaml\nargocd admin app generate-spec jsonnet-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path jsonnet-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --jsonnet-ext-str replicas=2\n```\n\n### Generate declarative config for a Helm app\n```yaml\nargocd admin app generate-spec helm-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path helm-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --helm-set replicaCount=2\n```\n\n### Generate declarative config for a Helm app from a Helm repo\n```yaml\nargocd admin app generate-spec nginx-ingress --repo https://charts.helm.sh/stable --helm-chart nginx-ingress --revision 1.24.3 --dest-namespace default --dest-server https://kubernetes.default.svc\n```\n\n### Generate declarative config for a Kustomize app\n```yaml\nargocd admin app generate-spec kustomize-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path kustomize-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --kustomize-image gcr.io/heptio-images/ks-guestbook-demo:0.1\n```\n\n### Generate declarative config for a app using a custom tool\n```yaml\nargocd admin app generate-spec kasane --repo https://github.com/argoproj/argocd-example-apps.git --path plugins/kasane --dest-namespace default --dest-server https://kubernetes.default.svc --config-management-plugin kasane\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_generate-spec", "title": "argocd admin app generate-spec Command Reference", "description": "Generate declarative config for an application", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:53:55", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_app_generate-spec/", "title": "argocd admin app generate-spec Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "4fc646e9-a7c3-498c-b0fe-706a8d97891a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_generate-spec", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_generate-spec/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin app get-reconcile-results Command Reference\"?\n\nAssistant: Reconcile all applications and stores reconciliation summary in the specified file.\n\nHere's a detailed explanation:\n\n\n## argocd admin app get-reconcile-results\nReconcile all applications and stores reconciliation summary in the specified file.\n\n```\nargocd admin app get-reconcile-results PATH [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_get-reconcile-results", "title": "argocd admin app get-reconcile-results Command Reference", "description": "Reconcile all applications and stores reconciliation summary in the specified file.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:55:04", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd admin app get-reconcile-results Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_app_get-reconcile-results/", "scrapeId": "94705f3a-7eec-4966-aa17-9bfaf7f54dd5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_get-reconcile-results", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_get-reconcile-results/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin app get-reconcile-results Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin app get-reconcile-results PATH [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_get-reconcile-results", "title": "argocd admin app get-reconcile-results Command Reference", "description": "Reconcile all applications and stores reconciliation summary in the specified file.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:55:04", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd admin app get-reconcile-results Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_app_get-reconcile-results/", "scrapeId": "94705f3a-7eec-4966-aa17-9bfaf7f54dd5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_get-reconcile-results", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_get-reconcile-results/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin app get-reconcile-results Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n• Ensure to specify the correct PATH for storing reconciliation results.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_get-reconcile-results", "title": "argocd admin app get-reconcile-results Command Reference", "description": "Reconcile all applications and stores reconciliation summary in the specified file.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:55:04", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd admin app get-reconcile-results Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_app_get-reconcile-results/", "scrapeId": "94705f3a-7eec-4966-aa17-9bfaf7f54dd5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_get-reconcile-results", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_app_get-reconcile-results/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin cluster Command Reference\"?\n\nAssistant: Manage clusters configuration\n\nHere's a detailed explanation:\n\n\n## argocd admin cluster\nManage clusters configuration\n\n```\nargocd admin cluster [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster", "title": "argocd admin cluster Command Reference", "description": "Manage clusters configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:55:14", "type": "overview", "page_metadata": {"title": "argocd admin cluster Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "scrapeId": "5ef82f95-3563-493e-8894-6f0a2a07549a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin cluster Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Generate declarative config for a cluster\n```yaml\nargocd admin cluster generate-spec my-cluster -o yaml\n```\n\n### Generate a kubeconfig for a cluster named \"my-cluster\" and display it in the console\n```yaml\nargocd admin cluster kubeconfig my-cluster\n```\n\n### Print information namespaces which Argo CD manages in each cluster\n```yaml\nargocd admin cluster namespaces my-cluster\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster", "title": "argocd admin cluster Command Reference", "description": "Manage clusters configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:55:14", "type": "code_examples", "page_metadata": {"title": "argocd admin cluster Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "scrapeId": "5ef82f95-3563-493e-8894-6f0a2a07549a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin cluster Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n• Ensure to set the ARGOCD_AUTH_TOKEN environment variable for authentication if not using the --auth-token flag.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster", "title": "argocd admin cluster Command Reference", "description": "Manage clusters configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:55:14", "type": "best_practices", "page_metadata": {"title": "argocd admin cluster Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "scrapeId": "5ef82f95-3563-493e-8894-6f0a2a07549a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin cluster generate-spec Command Reference\"?\n\nAssistant: Generate declarative config for a cluster\n\nHere's a detailed explanation:\n\n\n## argocd admin cluster generate-spec\nGenerate declarative config for a cluster\n\n```\nargocd admin cluster generate-spec CONTEXT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_generate-spec", "title": "argocd admin cluster generate-spec Command Reference", "description": "Generate declarative config for a cluster", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:55:35", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_generate-spec/", "language": "en", "title": "argocd admin cluster generate-spec Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "99ae0df1-fa07-448f-aa1f-7ed7b35e507b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_generate-spec", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_generate-spec/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin cluster generate-spec Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nargocd admin cluster generate-spec CONTEXT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_generate-spec", "title": "argocd admin cluster generate-spec Command Reference", "description": "Generate declarative config for a cluster", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:55:35", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_generate-spec/", "language": "en", "title": "argocd admin cluster generate-spec Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "99ae0df1-fa07-448f-aa1f-7ed7b35e507b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_generate-spec", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_generate-spec/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin cluster generate-spec Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --output flag to specify the output format as json or yaml.\n• Set metadata annotations and labels using --annotation and --label flags respectively.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_generate-spec", "title": "argocd admin cluster generate-spec Command Reference", "description": "Generate declarative config for a cluster", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:55:35", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_generate-spec/", "language": "en", "title": "argocd admin cluster generate-spec Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "99ae0df1-fa07-448f-aa1f-7ed7b35e507b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_generate-spec", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_generate-spec/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin cluster kubeconfig Command Reference\"?\n\nAssistant: Generates kubeconfig for the specified cluster\n\nHere's a detailed explanation:\n\n\n## argocd admin cluster kubeconfig\nGenerates kubeconfig for the specified cluster\n\n```\nargocd admin cluster kubeconfig CLUSTER_URL OUTPUT_PATH [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_kubeconfig", "title": "argocd admin cluster kubeconfig Command Reference", "description": "Generates kubeconfig for the specified cluster", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:56:05", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "argocd admin cluster kubeconfig Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_kubeconfig/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "d6bd4d01-b11e-469c-aef0-34c513b88cbc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_kubeconfig", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_kubeconfig/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin cluster kubeconfig Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Generate a kubeconfig for a cluster named \"my-cluster\" on console\n```yaml\nargocd admin cluster kubeconfig my-cluster\n```\n\n### Listing available kubeconfigs for clusters managed by argocd\n```yaml\nargocd admin cluster kubeconfig\n```\n\n### Removing a specific kubeconfig file\n```yaml\nargocd admin cluster kubeconfig my-cluster --delete\n```\n\n### Generate a Kubeconfig for a Cluster with TLS Verification Disabled\n```yaml\nargocd admin cluster kubeconfig https://cluster-api-url:6443 /path/to/output/kubeconfig.yaml --insecure-skip-tls-verify\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_kubeconfig", "title": "argocd admin cluster kubeconfig Command Reference", "description": "Generates kubeconfig for the specified cluster", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:56:05", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "argocd admin cluster kubeconfig Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_kubeconfig/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "d6bd4d01-b11e-469c-aef0-34c513b88cbc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_kubeconfig", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_kubeconfig/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin cluster kubeconfig Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --insecure-skip-tls-verify option with caution as it disables TLS verification, making connections insecure.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_kubeconfig", "title": "argocd admin cluster kubeconfig Command Reference", "description": "Generates kubeconfig for the specified cluster", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:56:05", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "argocd admin cluster kubeconfig Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_kubeconfig/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "d6bd4d01-b11e-469c-aef0-34c513b88cbc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_kubeconfig", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_kubeconfig/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin cluster namespaces Command Reference\"?\n\nAssistant: Print information namespaces which Argo CD manages in each cluster.\n\nHere's a detailed explanation:\n\n\n## argocd admin cluster namespaces\nPrint information namespaces which Argo CD manages in each cluster.\n\n```\nargocd admin cluster namespaces [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces", "title": "argocd admin cluster namespaces Command Reference", "description": "Print information namespaces which Argo CD manages in each cluster.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:56:39", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin cluster namespaces Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_namespaces/", "scrapeId": "67a93c1a-65c0-4c7f-a858-0f16f86b02c9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin cluster namespaces Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin cluster namespaces [flags]\n```\n\n### Options\n```yaml\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for namespaces\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces", "title": "argocd admin cluster namespaces Command Reference", "description": "Print information namespaces which Argo CD manages in each cluster.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:56:39", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin cluster namespaces Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_namespaces/", "scrapeId": "67a93c1a-65c0-4c7f-a858-0f16f86b02c9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin cluster namespaces Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n• Ensure to specify the correct kubeconfig context and cluster when using the command.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces", "title": "argocd admin cluster namespaces Command Reference", "description": "Print information namespaces which Argo CD manages in each cluster.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:56:39", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin cluster namespaces Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_namespaces/", "scrapeId": "67a93c1a-65c0-4c7f-a858-0f16f86b02c9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin cluster namespaces disable-namespaced-mode Command Reference\"?\n\nAssistant: Disable namespaced mode for clusters which name matches to the specified pattern.\n\nHere's a detailed explanation:\n\n\n## argocd admin cluster namespaces disable-namespaced-mode\nDisable namespaced mode for clusters which name matches to the specified pattern.\n\n```\nargocd admin cluster namespaces disable-namespaced-mode PATTERN [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode", "title": "argocd admin cluster namespaces disable-namespaced-mode Command Reference", "description": "Disable namespaced mode for clusters which name matches to the specified pattern.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:57:03", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "title": "argocd admin cluster namespaces disable-namespaced-mode Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode/", "scrapeId": "5469cf6b-e4bc-4b86-b45a-ab633c4992be", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin cluster namespaces disable-namespaced-mode Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin cluster namespaces disable-namespaced-mode PATTERN [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode", "title": "argocd admin cluster namespaces disable-namespaced-mode Command Reference", "description": "Disable namespaced mode for clusters which name matches to the specified pattern.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:57:03", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "title": "argocd admin cluster namespaces disable-namespaced-mode Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode/", "scrapeId": "5469cf6b-e4bc-4b86-b45a-ab633c4992be", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin cluster namespaces disable-namespaced-mode Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --dry-run option to preview the changes before applying them.\n• Ensure you have the correct permissions when impersonating users or groups.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode", "title": "argocd admin cluster namespaces disable-namespaced-mode Command Reference", "description": "Disable namespaced mode for clusters which name matches to the specified pattern.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:57:03", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "title": "argocd admin cluster namespaces disable-namespaced-mode Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode/", "scrapeId": "5469cf6b-e4bc-4b86-b45a-ab633c4992be", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_disable-namespaced-mode/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin cluster namespaces enable-namespaced-mode Command Reference\"?\n\nAssistant: Enable namespaced mode for clusters which name matches to the specified pattern.\n\nHere's a detailed explanation:\n\n\n## argocd admin cluster namespaces enable-namespaced-mode\nEnable namespaced mode for clusters which name matches to the specified pattern.\n\n```\nargocd admin cluster namespaces enable-namespaced-mode PATTERN [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode", "title": "argocd admin cluster namespaces enable-namespaced-mode Command Reference", "description": "Enable namespaced mode for clusters which name matches to the specified pattern.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:57:18", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "language": "en", "title": "argocd admin cluster namespaces enable-namespaced-mode Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode/", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "scrapeId": "90b1c66c-5781-46fb-97b6-3096bb2226a1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin cluster namespaces enable-namespaced-mode Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin cluster namespaces enable-namespaced-mode PATTERN [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode", "title": "argocd admin cluster namespaces enable-namespaced-mode Command Reference", "description": "Enable namespaced mode for clusters which name matches to the specified pattern.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:57:18", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "language": "en", "title": "argocd admin cluster namespaces enable-namespaced-mode Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode/", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "scrapeId": "90b1c66c-5781-46fb-97b6-3096bb2226a1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin cluster namespaces enable-namespaced-mode Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --dry-run option to preview the changes before applying them.\n• Ensure you have the correct permissions when impersonating users or groups.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode", "title": "argocd admin cluster namespaces enable-namespaced-mode Command Reference", "description": "Enable namespaced mode for clusters which name matches to the specified pattern.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:57:18", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "language": "en", "title": "argocd admin cluster namespaces enable-namespaced-mode Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode/", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "scrapeId": "90b1c66c-5781-46fb-97b6-3096bb2226a1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_namespaces_enable-namespaced-mode/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin cluster shards Command Reference\"?\n\nAssistant: Print information about each controller shard and the estimated portion of Kubernetes resources it is responsible for.\n\nHere's a detailed explanation:\n\n\n## argocd admin cluster shards\nPrint information about each controller shard and the estimated portion of Kubernetes resources it is responsible for.\n\n```\nargocd admin cluster shards [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_shards", "title": "argocd admin cluster shards Command Reference", "description": "Print information about each controller shard and the estimated portion of Kubernetes resources it is responsible for.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:57:25", "type": "overview", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_shards/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "argocd admin cluster shards Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "5015dd74-3199-4743-ad08-db24c024fdb1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_shards", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_shards/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin cluster shards Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin cluster shards [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_shards", "title": "argocd admin cluster shards Command Reference", "description": "Print information about each controller shard and the estimated portion of Kubernetes resources it is responsible for.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:57:25", "type": "code_examples", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_shards/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "argocd admin cluster shards Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "5015dd74-3199-4743-ad08-db24c024fdb1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_shards", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_shards/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin cluster shards Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_shards", "title": "argocd admin cluster shards Command Reference", "description": "Print information about each controller shard and the estimated portion of Kubernetes resources it is responsible for.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:57:25", "type": "best_practices", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_shards/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "title": "argocd admin cluster shards Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "5015dd74-3199-4743-ad08-db24c024fdb1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_shards", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_shards/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin cluster stats Command Reference\"?\n\nAssistant: Prints information cluster statistics and inferred shard number\n\nHere's a detailed explanation:\n\n\n## Examples\n```\n#Display stats and shards for clusters\nargocd admin cluster stats\n\n#Display Cluster Statistics for a Specific Shard\nargocd admin cluster stats --shard=1\n\n#In a multi-cluster environment to print stats for a specific cluster say(target-cluster)\nargocd admin cluster stats target-cluster\n```\n\n## Options\n```\n      --app-state-cache-expiration duration   Cache expiration for app state (default 1h0m0s)\n      --as string                             Username to impersonate for the operation\n      --as-group stringArray                  Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                         UID to impersonate for the operation\n      --certificate-authority string          Path to a cert file for the certificate authority\n      --client-certificate string             Path to a client certificate file for TLS\n      --client-key string                     Path to a client key file for TLS\n      --cluster string                        The name of the kubeconfig cluster to use\n      --context string                        The name of the kubeconfig context to use\n      --default-cache-expiration duration     Cache expiration default (default 24h0m0s)\n      --disable-compression                   If true, opt-out of response compression for all requests to the server\n  -h, --help                                  help for stats\n      --insecure-skip-tls-verify              If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string                     Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string                      If present, the namespace scope for this CLI request\n      --password string                       Password for basic authentication to the API server\n      --port-forward-redis                    Automatically port-forward ha proxy redis from current namespace? (default true)\n      --proxy-url string                      If provided, this URL will be used to connect via proxy\n      --redis string                          Redis server hostname and port (e.g. argocd-redis:6379).\n      --redis-ca-certificate string           Path to Redis server CA certificate (e.g. /etc/certs/redis/ca.crt). If not specified, system trusted CAs will be used for server certificate validation.\n      --redis-client-certificate string       Path to Redis client certificate (e.g. /etc/certs/redis/client.crt).\n      --redis-client-key string               Path to Redis client key (e.g. /etc/certs/redis/client.crt).\n      --redis-compress string                 Enable compression for data sent to Redis with the required compression algorithm. (possible values: gzip, none) (default \"gzip\")\n      --redis-insecure-skip-tls-verify        Skip Redis server certificate validation.\n      --redis-use-tls                         Use TLS when connecting to Redis.\n      --redisdb int                           Redis database.\n      --replicas int                          Application controller replicas count. Inferred from number of running controller pods if not specified\n      --request-timeout string                The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --sentinel stringArray                  Redis sentinel hostname and port (e.g. argocd-redis-ha-announce-0:6379).\n      --sentinelmaster string                 Redis sentinel master group name. (default \"master\")\n      --server string                         The address and port of the Kubernetes API server\n      --shard int                             Cluster shard filter (default -1)\n      --sharding-method string                Sharding method. Defaults: legacy. Supported sharding methods are : [legacy, round-robin, consistent-hashing]  (default \"legacy\")\n      --tls-server-name string                If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                          Bearer token for authentication to the API server\n      --user string                           The name of the kubeconfig user to use\n      --username string                       Username for basic authentication to the API server\n```\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_stats", "title": "argocd admin cluster stats Command Reference", "description": "Prints information cluster statistics and inferred shard number", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 02:58:09", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_stats/", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "argocd admin cluster stats Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "fae5e3c2-1865-46ef-a464-ad3a5bb262fc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_stats", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_stats/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin cluster stats Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Display stats and shards for clusters\n```yaml\nargocd admin cluster stats\n```\n\n### Display Cluster Statistics for a Specific Shard\n```yaml\nargocd admin cluster stats --shard=1\n```\n\n### Print stats for a specific cluster\n```yaml\nargocd admin cluster stats target-cluster\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_stats", "title": "argocd admin cluster stats Command Reference", "description": "Prints information cluster statistics and inferred shard number", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 02:58:09", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_cluster_stats/", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "argocd admin cluster stats Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "fae5e3c2-1865-46ef-a464-ad3a5bb262fc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_stats", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_cluster_stats/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin dashboard Command Reference\"?\n\nAssistant: Starts Argo CD Web UI locally\n\nHere's a detailed explanation:\n\n\n## argocd admin dashboard\nStarts Argo CD Web UI locally\n\n```\nargocd admin dashboard [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_dashboard", "title": "argocd admin dashboard Command Reference", "description": "Starts Argo CD Web UI locally", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:58:22", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_dashboard/", "readthedocs-version-slug": "stable", "title": "argocd admin dashboard Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "scrapeId": "a2e0cd3a-27c9-413d-8e35-9d6f4a74e244", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_dashboard", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_dashboard/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin dashboard Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n# Start the Argo CD Web UI locally on the default port and address\n$ argocd admin dashboard\n\n# Start the Argo CD Web UI locally on a custom port and address\n$ argocd admin dashboard --port 8080 --address 127.0.0.1\n\n# Start the Argo CD Web UI with GZip compression\n$ argocd admin dashboard --redis-compress gzip\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_dashboard", "title": "argocd admin dashboard Command Reference", "description": "Starts Argo CD Web UI locally", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:58:22", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_dashboard/", "readthedocs-version-slug": "stable", "title": "argocd admin dashboard Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "scrapeId": "a2e0cd3a-27c9-413d-8e35-9d6f4a74e244", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_dashboard", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_dashboard/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin dashboard Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the default port and address for quick access: `argocd admin dashboard`\n• Customize the port and address as needed: `argocd admin dashboard --port 8080 --address 127.0.0.1`\n• Enable GZip compression for better performance: `argocd admin dashboard --redis-compress gzip`\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_dashboard", "title": "argocd admin dashboard Command Reference", "description": "Starts Argo CD Web UI locally", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:58:22", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_dashboard/", "readthedocs-version-slug": "stable", "title": "argocd admin dashboard Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "scrapeId": "a2e0cd3a-27c9-413d-8e35-9d6f4a74e244", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_dashboard", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_dashboard/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin export Command Reference\"?\n\nAssistant: Export all Argo CD data to stdout (default) or a file\n\nHere's a detailed explanation:\n\n\n## argocd admin export\nExport all Argo CD data to stdout (default) or a file\n\n```\nargocd admin export [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_export", "title": "argocd admin export Command Reference", "description": "Export all Argo CD data to stdout (default) or a file", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:58:58", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "argocd admin export Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_export/", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "d39ada62-461f-499b-a56b-c361d86ed20d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_export", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_export/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin export Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin export [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_export", "title": "argocd admin export Command Reference", "description": "Export all Argo CD data to stdout (default) or a file", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:58:58", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "argocd admin export Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_export/", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "d39ada62-461f-499b-a56b-c361d86ed20d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_export", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_export/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin export Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• If not provided, the value from 'application.namespaces' in argocd-cmd-params-cm will be used for application namespaces.\n• If not provided, the value from 'applicationsetcontroller.namespaces' in argocd-cmd-params-cm will be used for applicationset namespaces.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_export", "title": "argocd admin export Command Reference", "description": "Export all Argo CD data to stdout (default) or a file", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:58:58", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "argocd admin export Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_export/", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "d39ada62-461f-499b-a56b-c361d86ed20d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_export", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_export/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin import Command Reference\"?\n\nAssistant: Import Argo CD data from stdin (specify `-') or a file\n\nHere's a detailed explanation:\n\n\n## argocd admin import\nImport Argo CD data from stdin (specify `-') or a file\n\n```\nargocd admin import SOURCE [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_import", "title": "argocd admin import Command Reference", "description": "Import Argo CD data from stdin (specify `-') or a file", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:59:22", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin import Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_import/", "language": "en", "scrapeId": "d609c3f9-37e7-4228-a6f1-5d6c1035bb6b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_import", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_import/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin import Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nargocd admin import SOURCE [flags]\n```\n\n### Options\n```yaml\n--application-namespaces strings      Comma separated list of namespace globs to which import of applications is allowed. If not provided value from 'application.namespaces' in argocd-cmd-params-cm will be used,if it's not defined only applications without an explicit namespace will be imported to the Argo CD namespace\n--applicationset-namespaces strings   Comma separated list of namespace globs which import of applicationsets is allowed. If not provided value from 'applicationsetcontroller.namespaces' in argocd-cmd-params-cm will be used,if it's not defined only applicationsets without an explicit namespace will be imported to the Argo CD namespace\n--as string                           Username to impersonate for the operation\n--as-group stringArray                Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n--as-uid string                       UID to impersonate for the operation\n--certificate-authority string        Path to a cert file for the certificate authority\n--client-certificate string           Path to a client certificate file for TLS\n--client-key string                   Path to a client key file for TLS\n--cluster string                      The name of the kubeconfig cluster to use\n--context string                      The name of the kubeconfig context to use\n--disable-compression                 If true, opt-out of response compression for all requests to the server\n--dry-run                             Print what will be performed\n-h, --help                                help for import\n--ignore-tracking                     Do not update the tracking annotation if the resource is already tracked\n--insecure-skip-tls-verify            If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n--kubeconfig string                   Path to a kube config. Only required if out-of-cluster\n-n, --namespace string                    If present, the namespace scope for this CLI request\n--password string                     Password for basic authentication to the API server\n--prompts-enabled                     Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n--proxy-url string                    If provided, this URL will be used to connect via proxy\n--prune                               Prune secrets, applications and projects which do not appear in the backup\n--request-timeout string              The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n--server string                       The address and port of the Kubernetes API server\n--stop-operation                      Stop any existing operations\n--tls-server-name string              If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n--token string                        Bearer token for authentication to the API server\n--user string                         The name of the kubeconfig user to use\n--username string                     Username for basic authentication to the API server\n--verbose                             Verbose output (versus only changed output)\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_import", "title": "argocd admin import Command Reference", "description": "Import Argo CD data from stdin (specify `-') or a file", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:59:22", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin import Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_import/", "language": "en", "scrapeId": "d609c3f9-37e7-4228-a6f1-5d6c1035bb6b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_import", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_import/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin initial-password Command Reference\"?\n\nAssistant: Prints initial password to log in to Argo CD for the first time\n\nHere's a detailed explanation:\n\n\n## argocd admin initial-password\nPrints initial password to log in to Argo CD for the first time\n\n```\nargocd admin initial-password [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_initial-password", "title": "argocd admin initial-password Command Reference", "description": "Prints initial password to log in to Argo CD for the first time", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:59:40", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "argocd admin initial-password Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_initial-password/", "scrapeId": "d520c250-ca5d-4012-b7dd-8bccef6621ae", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_initial-password", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_initial-password/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin initial-password Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin initial-password [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_initial-password", "title": "argocd admin initial-password Command Reference", "description": "Prints initial password to log in to Argo CD for the first time", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:59:40", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "argocd admin initial-password Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_initial-password/", "scrapeId": "d520c250-ca5d-4012-b7dd-8bccef6621ae", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_initial-password", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_initial-password/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin initial-password Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_initial-password", "title": "argocd admin initial-password Command Reference", "description": "Prints initial password to log in to Argo CD for the first time", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:59:40", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "argocd admin initial-password Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_initial-password/", "scrapeId": "d520c250-ca5d-4012-b7dd-8bccef6621ae", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_initial-password", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_initial-password/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin notifications Command Reference\"?\n\nAssistant: Set of CLI commands that helps manage notifications settings\n\nHere's a detailed explanation:\n\n\n## argocd admin notifications\nSet of CLI commands that helps manage notifications settings\n\n```\nargocd admin notifications [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications", "title": "argocd admin notifications Command Reference", "description": "Set of CLI commands that helps manage notifications settings", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:00:27", "type": "overview", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications/", "title": "argocd admin notifications Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "d5257d65-d7db-4ef6-a9d5-9ef240208ff9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin notifications Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```\n      --argocd-repo-server string       Argo CD repo server address (default \"argocd-repo-server:8081\")\n      --argocd-repo-server-plaintext    Use a plaintext client (non-TLS) to connect to repository server\n      --argocd-repo-server-strict-tls   Perform strict validation of TLS certificates when connecting to repo server\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config-map string               argocd-notifications-cm.yaml file path\n      --context string                  The name of the kubeconfig context to use\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n  -h, --help                            help for notifications\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --secret string                   argocd-notifications-secret.yaml file path. Use empty secret if provided value is ':empty'\n      --server string                   The address and port of the Kubernetes API server\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications", "title": "argocd admin notifications Command Reference", "description": "Set of CLI commands that helps manage notifications settings", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:00:27", "type": "code_examples", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications/", "title": "argocd admin notifications Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "d5257d65-d7db-4ef6-a9d5-9ef240208ff9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin notifications template Command Reference\"?\n\nAssistant: Notification templates related commands\n\nHere's a detailed explanation:\n\n\n## argocd admin notifications template\nNotification templates related commands\n\n```\nargocd admin notifications template [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template", "title": "argocd admin notifications template Command Reference", "description": "Notification templates related commands", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:00:55", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "title": "argocd admin notifications template Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_template/", "readthedocs-http-status": "200", "scrapeId": "3ae1122e-74d7-4da2-b726-7922293a71d7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin notifications template Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin notifications template [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template", "title": "argocd admin notifications template Command Reference", "description": "Notification templates related commands", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:00:55", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "title": "argocd admin notifications template Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_template/", "readthedocs-http-status": "200", "scrapeId": "3ae1122e-74d7-4da2-b726-7922293a71d7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin notifications template Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template", "title": "argocd admin notifications template Command Reference", "description": "Notification templates related commands", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:00:55", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "title": "argocd admin notifications template Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_template/", "readthedocs-http-status": "200", "scrapeId": "3ae1122e-74d7-4da2-b726-7922293a71d7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin notifications template get Command Reference\"?\n\nAssistant: Prints information about configured templates\n\nHere's a detailed explanation:\n\n\n## argocd admin notifications template get\nPrints information about configured templates\n\n```\nargocd admin notifications template get [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_get", "title": "argocd admin notifications template get Command Reference", "description": "Prints information about configured templates", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:01:18", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_template_get/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd admin notifications template get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "6975999f-0b85-446c-a732-04cf5564508a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin notifications template get Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example 1\n```yaml\n# prints all templates\nargocd admin notifications template get\n```\n\n### Example 2\n```yaml\n# print YAML formatted app-sync-succeeded template definition\nargocd admin notifications template get app-sync-succeeded -o=yaml\n```\n\n### Options\n```yaml\n  -h, --help            help for get\n  -o, --output string   Output format. One of:json|yaml|wide|name (default \"wide\")\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_get", "title": "argocd admin notifications template get Command Reference", "description": "Prints information about configured templates", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:01:18", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_template_get/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd admin notifications template get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "6975999f-0b85-446c-a732-04cf5564508a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin notifications template get Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format for better readability.\n• Refer to the 'SEE ALSO' section for related commands and further information.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_get", "title": "argocd admin notifications template get Command Reference", "description": "Prints information about configured templates", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:01:18", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_template_get/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd admin notifications template get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "6975999f-0b85-446c-a732-04cf5564508a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin notifications template notify Command Reference\"?\n\nAssistant: Generates notification using the specified template and send it to specified recipients\n\nHere's a detailed explanation:\n\n\n## argocd admin notifications template notify\nGenerates notification using the specified template and send it to specified recipients\n\n```\nargocd admin notifications template notify NAME RESOURCE_NAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_notify", "title": "argocd admin notifications template notify Command Reference", "description": "Generates notification using the specified template and send it to specified recipients", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:02:08", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_template_notify/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "argocd admin notifications template notify Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b6f38869-da9c-46be-9f84-f6b0370f34e1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_notify", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_notify/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin notifications template notify Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Trigger notification using in-cluster config map and secret\n```yaml\nargocd admin notifications template notify app-sync-succeeded guestbook --recipient slack:my-slack-channel\n```\n\n### Render notification render generated notification in console\n```yaml\nargocd admin notifications template notify app-sync-succeeded guestbook\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_notify", "title": "argocd admin notifications template notify Command Reference", "description": "Generates notification using the specified template and send it to specified recipients", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:02:08", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_template_notify/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "argocd admin notifications template notify Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b6f38869-da9c-46be-9f84-f6b0370f34e1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_notify", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_notify/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin notifications template notify Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --recipient flag to specify where to send notifications, defaulting to console:stdout if not provided.\n• Ensure to set the appropriate Argo CD context and server address for successful command execution.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_notify", "title": "argocd admin notifications template notify Command Reference", "description": "Generates notification using the specified template and send it to specified recipients", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:02:08", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_template_notify/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "argocd admin notifications template notify Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b6f38869-da9c-46be-9f84-f6b0370f34e1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_notify", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_template_notify/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin notifications trigger Command Reference\"?\n\nAssistant: Notification triggers related commands\n\nHere's a detailed explanation:\n\n\n## argocd admin notifications trigger\nNotification triggers related commands\n\n```\nargocd admin notifications trigger [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger", "title": "argocd admin notifications trigger Command Reference", "description": "Notification triggers related commands", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:02:19", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin notifications trigger Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_trigger/", "readthedocs-version-slug": "stable", "scrapeId": "493c2b4f-0008-46b0-9a9c-c453e299543d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin notifications trigger Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin notifications trigger [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger", "title": "argocd admin notifications trigger Command Reference", "description": "Notification triggers related commands", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:02:19", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin notifications trigger Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_trigger/", "readthedocs-version-slug": "stable", "scrapeId": "493c2b4f-0008-46b0-9a9c-c453e299543d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin notifications trigger Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n• Ensure to set the correct Argo CD context and repo server address for successful command execution.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger", "title": "argocd admin notifications trigger Command Reference", "description": "Notification triggers related commands", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:02:19", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin notifications trigger Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_trigger/", "readthedocs-version-slug": "stable", "scrapeId": "493c2b4f-0008-46b0-9a9c-c453e299543d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin notifications trigger get Command Reference\"?\n\nAssistant: Prints information about configured triggers\n\nHere's a detailed explanation:\n\n\n## argocd admin notifications trigger get\nPrints information about configured triggers\n\n```\nargocd admin notifications trigger get [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_get", "title": "argocd admin notifications trigger get Command Reference", "description": "Prints information about configured triggers", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:02:53", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_trigger_get/", "title": "argocd admin notifications trigger get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "813476e5-38c7-49b0-8100-17df040cca15", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin notifications trigger get Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n# prints all triggers\nargocd admin notifications trigger get\n# print YAML formatted on-sync-failed trigger definition\nargocd admin notifications trigger get on-sync-failed -o=yaml\n\n```\n\n### Options\n```yaml\n  -h, --help            help for get\n  -o, --output string   Output format. One of:json|yaml|wide|name (default \"wide\")\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_get", "title": "argocd admin notifications trigger get Command Reference", "description": "Prints information about configured triggers", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:02:53", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_trigger_get/", "title": "argocd admin notifications trigger get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "813476e5-38c7-49b0-8100-17df040cca15", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin notifications trigger get Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format for better readability.\n• Refer to the inherited options for additional command configurations.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_get", "title": "argocd admin notifications trigger get Command Reference", "description": "Prints information about configured triggers", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:02:53", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_trigger_get/", "title": "argocd admin notifications trigger get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "813476e5-38c7-49b0-8100-17df040cca15", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin notifications trigger run Command Reference\"?\n\nAssistant: Evaluates specified trigger condition and prints the result\n\nHere's a detailed explanation:\n\n\n## argocd admin notifications trigger run\nEvaluates specified trigger condition and prints the result\n\n```\nargocd admin notifications trigger run NAME RESOURCE_NAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_run", "title": "argocd admin notifications trigger run Command Reference", "description": "Evaluates specified trigger condition and prints the result", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:03:30", "type": "overview", "page_metadata": {"title": "argocd admin notifications trigger run Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_trigger_run/", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "5ab10019-7f51-44a0-bb86-8959833774a6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_run", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_run/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin notifications trigger run Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Execute trigger configured in 'argocd-notification-cm' ConfigMap\n```yaml\nargocd admin notifications trigger run on-sync-status-unknown ./sample-app.yaml\n```\n\n### Execute trigger using my-config-map.yaml instead of 'argocd-notifications-cm' ConfigMap\n```yaml\nargocd admin notifications trigger run on-sync-status-unknown ./sample-app.yaml \\\n    --config-map ./my-config-map.yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_run", "title": "argocd admin notifications trigger run Command Reference", "description": "Evaluates specified trigger condition and prints the result", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:03:30", "type": "code_examples", "page_metadata": {"title": "argocd admin notifications trigger run Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_trigger_run/", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "5ab10019-7f51-44a0-bb86-8959833774a6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_run", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_run/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin notifications trigger run Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_run", "title": "argocd admin notifications trigger run Command Reference", "description": "Evaluates specified trigger condition and prints the result", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:03:30", "type": "best_practices", "page_metadata": {"title": "argocd admin notifications trigger run Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_notifications_trigger_run/", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "scrapeId": "5ab10019-7f51-44a0-bb86-8959833774a6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_run", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_notifications_trigger_run/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin proj Command Reference\"?\n\nAssistant: Manage projects configuration\n\nHere's a detailed explanation:\n\n\n## argocd admin proj\nManage projects configuration\n\n```\nargocd admin proj [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj", "title": "argocd admin proj Command Reference", "description": "Manage projects configuration", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:04:01", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "argocd admin proj Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_proj/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "d7ac9862-d8f5-422d-aeff-fcfe8c84954a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin proj Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```\n  -h, --help   help for proj\n```\n\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj", "title": "argocd admin proj Command Reference", "description": "Manage projects configuration", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:04:01", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "argocd admin proj Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_proj/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "d7ac9862-d8f5-422d-aeff-fcfe8c84954a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin proj generate-allow-list Command Reference\"?\n\nAssistant: Generates project allow list from the specified clusterRole file\n\nHere's a detailed explanation:\n\n\n## argocd admin proj generate-allow-list\nGenerates project allow list from the specified clusterRole file\n\n```\nargocd admin proj generate-allow-list CLUSTERROLE_PATH PROJ_NAME [flags]\n```\n\n\n## Examples\n```\n# Generates project allow list from the specified clusterRole file\nargocd admin proj generate-allow-list /path/to/clusterrole.yaml my-project\n```\n\n\n## Options\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for generate-allow-list\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n  -o, --out string                     Output to the specified file instead of stdout (default \"-\")\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-allow-list", "title": "argocd admin proj generate-allow-list Command Reference", "description": "Generates project allow list from the specified clusterRole file", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:04:36", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_proj_generate-allow-list/", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin proj generate-allow-list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "scrapeId": "03303077-609d-424f-a691-9e4d67f1c7d8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-allow-list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-allow-list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin proj generate-allow-list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example Command\n```yaml\nargocd admin proj generate-allow-list /path/to/clusterrole.yaml my-project\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-allow-list", "title": "argocd admin proj generate-allow-list Command Reference", "description": "Generates project allow list from the specified clusterRole file", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:04:36", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_proj_generate-allow-list/", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin proj generate-allow-list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "scrapeId": "03303077-609d-424f-a691-9e4d67f1c7d8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-allow-list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-allow-list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin proj generate-spec Command Reference\"?\n\nAssistant: Generate declarative config for a project\n\nHere's a detailed explanation:\n\n\n## argocd admin proj generate-spec\nGenerate declarative config for a project\n\n```\nargocd admin proj generate-spec PROJECT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-spec", "title": "argocd admin proj generate-spec Command Reference", "description": "Generate declarative config for a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:04:56", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "title": "argocd admin proj generate-spec Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_proj_generate-spec/", "scrapeId": "82bfde96-7998-4749-bb27-8241a01f80f5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-spec", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-spec/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin proj generate-spec Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Generate YAML configuration for a project\n```yaml\nargocd admin proj generate-spec myproject\n```\n\n### Generate JSON configuration for a project and specify an output file\n```yaml\nargocd admin proj generate-spec anotherproject --output json --file config.json\n```\n\n### Generate YAML configuration for a project and write it back to the input file\n```yaml\nargocd admin proj generate-spec someproject --inline\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-spec", "title": "argocd admin proj generate-spec Command Reference", "description": "Generate declarative config for a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:04:56", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "title": "argocd admin proj generate-spec Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_proj_generate-spec/", "scrapeId": "82bfde96-7998-4749-bb27-8241a01f80f5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-spec", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-spec/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin proj generate-spec Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --output flag to specify the desired output format (json or yaml).\n• Utilize the --inline flag to write the generated resource back to the specified file.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-spec", "title": "argocd admin proj generate-spec Command Reference", "description": "Generate declarative config for a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:04:56", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "title": "argocd admin proj generate-spec Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_proj_generate-spec/", "scrapeId": "82bfde96-7998-4749-bb27-8241a01f80f5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-spec", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_generate-spec/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin proj update-role-policy Command Reference\"?\n\nAssistant: Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions.\n\nHere's a detailed explanation:\n\n\n## argocd admin proj update-role-policy\nImplement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions.\n\n```\nargocd admin proj update-role-policy PROJECT_GLOB MODIFICATION ACTION [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_update-role-policy", "title": "argocd admin proj update-role-policy Command Reference", "description": "Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:08", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_proj_update-role-policy/", "title": "argocd admin proj update-role-policy Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "55b9a094-9a63-4af8-8abd-68259e04dc3b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_update-role-policy", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_update-role-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin proj update-role-policy Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Add policy example\n```yaml\nargocd admin proj update-role-policy '*' set 'action/*' --role '*deployer*' --resource applications --scope '*' --permission allow\n```\n\n### Remove policy example\n```yaml\nargocd admin proj update-role-policy '*' remove override --role '*deployer*'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_update-role-policy", "title": "argocd admin proj update-role-policy Command Reference", "description": "Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:08", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_proj_update-role-policy/", "title": "argocd admin proj update-role-policy Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "55b9a094-9a63-4af8-8abd-68259e04dc3b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_update-role-policy", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_update-role-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin proj update-role-policy Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the dry-run option to test changes before applying them.\n• Be cautious with wildcard patterns to avoid unintended modifications.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_update-role-policy", "title": "argocd admin proj update-role-policy Command Reference", "description": "Implement bulk project role update. Useful to back-fill existing project policies or remove obsolete actions.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:08", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_proj_update-role-policy/", "title": "argocd admin proj update-role-policy Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "55b9a094-9a63-4af8-8abd-68259e04dc3b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_update-role-policy", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_proj_update-role-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin redis-initial-password Command Reference\"?\n\nAssistant: Ensure the Redis password exists, creating a new one if necessary.\n\nHere's a detailed explanation:\n\n\n## argocd admin redis-initial-password\nEnsure the Redis password exists, creating a new one if necessary.\n\n```\nargocd admin redis-initial-password [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_redis-initial-password", "title": "argocd admin redis-initial-password Command Reference", "description": "Ensure the Redis password exists, creating a new one if necessary.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:27", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_redis-initial-password/", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "title": "argocd admin redis-initial-password Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "bcf2309a-3e2d-40d7-91a2-60e9e479f513", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_redis-initial-password", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_redis-initial-password/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin redis-initial-password Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin redis-initial-password [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_redis-initial-password", "title": "argocd admin redis-initial-password Command Reference", "description": "Ensure the Redis password exists, creating a new one if necessary.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:27", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_redis-initial-password/", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "title": "argocd admin redis-initial-password Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "bcf2309a-3e2d-40d7-91a2-60e9e479f513", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_redis-initial-password", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_redis-initial-password/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin redis-initial-password Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_redis-initial-password", "title": "argocd admin redis-initial-password Command Reference", "description": "Ensure the Redis password exists, creating a new one if necessary.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:27", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_redis-initial-password/", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "title": "argocd admin redis-initial-password Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "bcf2309a-3e2d-40d7-91a2-60e9e479f513", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_redis-initial-password", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_redis-initial-password/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin repo Command Reference\"?\n\nAssistant: Manage repositories configuration\n\nHere's a detailed explanation:\n\n\n## argocd admin repo\nManage repositories configuration\n\n```\nargocd admin repo [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo", "title": "argocd admin repo Command Reference", "description": "Manage repositories configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:39", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_repo/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin repo Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "bae6908d-7ede-45c2-8cb7-d114b55ea674", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin repo Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin repo [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo", "title": "argocd admin repo Command Reference", "description": "Manage repositories configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:39", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_repo/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin repo Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "bae6908d-7ede-45c2-8cb7-d114b55ea674", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin repo Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the available options.\n• Ensure to set the ARGOCD_AUTH_TOKEN environment variable for authentication.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo", "title": "argocd admin repo Command Reference", "description": "Manage repositories configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:39", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_repo/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin repo Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "bae6908d-7ede-45c2-8cb7-d114b55ea674", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin repo generate-spec Command Reference\"?\n\nAssistant: Generate declarative config for a repo\n\nHere's a detailed explanation:\n\n\n## argocd admin repo generate-spec\nGenerate declarative config for a repo\n\n```\nargocd admin repo generate-spec REPOURL [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo_generate-spec", "title": "argocd admin repo generate-spec Command Reference", "description": "Generate declarative config for a repo", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:56", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin repo generate-spec Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_repo_generate-spec/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "9c96410f-4a4f-4e00-b3fd-de3ef52eeea7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo_generate-spec", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo_generate-spec/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin repo generate-spec Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Add a Git repository via SSH using a private key for authentication, ignoring the server's host key:\n  argocd admin repo generate-spec git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa\n\n  # Add a Git repository via SSH on a non-default port - need to use ssh:// style URLs here\n  argocd admin repo generate-spec ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa\n\n  # Add a private Git repository via HTTPS using username/password and TLS client certificates:\n  argocd admin repo generate-spec https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key\n\n  # Add a private Git repository via HTTPS using username/password without verifying the server's TLS certificate\n  argocd admin repo generate-spec https://git.example.com/repos/repo --username git --password secret --insecure-skip-server-verification\n\n  # Add a public Helm repository named 'stable' via HTTPS\n  argocd admin repo generate-spec https://charts.helm.sh/stable --type helm --name stable\n\n  # Add a private Helm repository named 'stable' via HTTPS\n  argocd admin repo generate-spec https://charts.helm.sh/stable --type helm --name stable --username test --password test\n\n  # Add a private Helm OCI-based repository named 'stable' via HTTPS\n  argocd admin repo generate-spec helm-oci-registry.cn-zhangjiakou.cr.aliyuncs.com --type helm --name stable --enable-oci --username test --password test\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo_generate-spec", "title": "argocd admin repo generate-spec Command Reference", "description": "Generate declarative config for a repo", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:56", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin repo generate-spec Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_repo_generate-spec/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "9c96410f-4a4f-4e00-b3fd-de3ef52eeea7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo_generate-spec", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo_generate-spec/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin repo generate-spec Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use SSH for secure connections when possible, especially with private repositories.\n• Always verify server certificates unless you have a specific reason to skip verification.\n• For Helm repositories, ensure to specify the type and name correctly to avoid configuration issues.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo_generate-spec", "title": "argocd admin repo generate-spec Command Reference", "description": "Generate declarative config for a repo", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:05:56", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin repo generate-spec Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_repo_generate-spec/", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "9c96410f-4a4f-4e00-b3fd-de3ef52eeea7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo_generate-spec", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_repo_generate-spec/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin settings Command Reference\"?\n\nAssistant: Provides set of commands for settings validation and troubleshooting\n\nHere's a detailed explanation:\n\n\n## argocd admin settings\nProvides set of commands for settings validation and troubleshooting\n\n```\nargocd admin settings [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings", "title": "argocd admin settings Command Reference", "description": "Provides set of commands for settings validation and troubleshooting", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:06:13", "type": "overview", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin settings Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "99c9811c-30d1-431b-bb60-1f882749bb3e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin settings Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```\n      --argocd-cm-path string          Path to local argocd-cm.yaml file\n      --argocd-secret-path string      Path to local argocd-secret.yaml file\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for settings\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n      --load-cluster-settings          Indicates that config map and secret should be loaded from cluster unless local file path is provided\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings", "title": "argocd admin settings Command Reference", "description": "Provides set of commands for settings validation and troubleshooting", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:06:13", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin settings Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "99c9811c-30d1-431b-bb60-1f882749bb3e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin settings rbac Command Reference\"?\n\nAssistant: Validate and test RBAC configuration\n\nHere's a detailed explanation:\n\n\n## argocd admin settings rbac\nValidate and test RBAC configuration\n\n```\nargocd admin settings rbac [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac", "title": "argocd admin settings rbac Command Reference", "description": "Validate and test RBAC configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:06:27", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_rbac/", "viewport": "width=device-width,initial-scale=1", "title": "argocd admin settings rbac Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "4355f973-b5aa-4d07-a6df-f9706f561085", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin settings rbac Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### RBAC Command Example\n```yaml\nargocd admin settings rbac [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac", "title": "argocd admin settings rbac Command Reference", "description": "Validate and test RBAC configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:06:27", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_rbac/", "viewport": "width=device-width,initial-scale=1", "title": "argocd admin settings rbac Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "4355f973-b5aa-4d07-a6df-f9706f561085", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin settings rbac Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the rbac command options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac", "title": "argocd admin settings rbac Command Reference", "description": "Validate and test RBAC configuration", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:06:27", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_rbac/", "viewport": "width=device-width,initial-scale=1", "title": "argocd admin settings rbac Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "4355f973-b5aa-4d07-a6df-f9706f561085", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin settings rbac can Command Reference\"?\n\nAssistant: Check RBAC permissions for a role or subject\n\nHere's a detailed explanation:\n\n\n## argocd admin settings rbac can\nCheck whether a given role or subject has appropriate RBAC permissions to do something.\n\n## Synopsis\nCheck whether a given role or subject has appropriate RBAC permissions to do something.\n\n```\nargocd admin settings rbac can ROLE/SUBJECT ACTION RESOURCE [SUB-RESOURCE] [flags]\n```\n\n\n## Examples\n```\n# Check whether role some:role has permissions to create an application in the\n# 'default' project, using a local policy.csv file\nargocd admin settings rbac can some:role create application 'default/app' --policy-file policy.csv\n\n# Policy file can also be K8s config map with data keys like argocd-rbac-cm,\n# i.e. 'policy.csv' and (optionally) 'policy.default'\nargocd admin settings rbac can some:role create application 'default/app' --policy-file argocd-rbac-cm.yaml\n\n# If --policy-file is not given, the ConfigMap 'argocd-rbac-cm' from K8s is\n# used. You need to specify the argocd namespace, and make sure that your\n# current Kubernetes context is pointing to the cluster Argo CD is running in\nargocd admin settings rbac can some:role create application 'default/app' --namespace argocd\n\n# You can override a possibly configured default role\nargocd admin settings rbac can someuser create application 'default/app' --default-role role:readonly\n```\n\n\n## Options\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --default-role string            name of the default role to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for can\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --policy-file string             path to the policy file to use\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n  -q, --quiet                          quiet mode - do not print results to stdout\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --strict                         whether to perform strict check on action and resource names (default true)\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --use-builtin-policy             whether to also use builtin-policy (default true)\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-cm-path string           Path to local argocd-cm.yaml file\n      --argocd-context string           The name of the Argo-CD server context to use\n      --argocd-secret-path string       Path to local argocd-secret.yaml file\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --load-cluster-settings           Indicates that config map and secret should be loaded from cluster unless local file path is provided\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_can", "title": "argocd admin settings rbac can Command Reference", "description": "Check RBAC permissions for a role or subject", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 03:07:11", "type": "overview", "page_metadata": {"title": "argocd admin settings rbac can Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_rbac_can/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "scrapeId": "2524c14a-b902-4c65-b6f3-18b002a37936", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_can", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_can/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin settings rbac can Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Check RBAC permissions for a role\n```yaml\nargocd admin settings rbac can some:role create application 'default/app' --policy-file policy.csv\n```\n\n### Using K8s config map as policy file\n```yaml\nargocd admin settings rbac can some:role create application 'default/app' --policy-file argocd-rbac-cm.yaml\n```\n\n### Using default ConfigMap from K8s\n```yaml\nargocd admin settings rbac can some:role create application 'default/app' --namespace argocd\n```\n\n### Override default role\n```yaml\nargocd admin settings rbac can someuser create application 'default/app' --default-role role:readonly\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_can", "title": "argocd admin settings rbac can Command Reference", "description": "Check RBAC permissions for a role or subject", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 03:07:11", "type": "code_examples", "page_metadata": {"title": "argocd admin settings rbac can Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_rbac_can/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "scrapeId": "2524c14a-b902-4c65-b6f3-18b002a37936", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_can", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_can/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin settings rbac validate Command Reference\"?\n\nAssistant: Validate RBAC policy\n\nHere's a detailed explanation:\n\n\n## argocd admin settings rbac validate\nValidate RBAC policy\n\n### Synopsis\nValidates an RBAC policy for being syntactically correct. The policy must be a local file or a K8s ConfigMap in the provided namespace, and in either CSV or K8s ConfigMap format.\n\n```\nargocd admin settings rbac validate [--policy-file POLICYFILE] [--namespace NAMESPACE] [flags]\n```\n\n### Examples\n```\n# Check whether a given policy file is valid using a local policy.csv file.\nargocd admin settings rbac validate --policy-file policy.csv\n\n# Policy file can also be K8s config map with data keys like argocd-rbac-cm,\n# i.e. 'policy.csv' and (optionally) 'policy.default'\nargocd admin settings rbac validate --policy-file argocd-rbac-cm.yaml\n\n# If --policy-file is not given, and instead --namespace is giventhe ConfigMap 'argocd-rbac-cm'\n# from K8s is used.\nargocd admin settings rbac validate --namespace argocd\n\n# Either --policy-file or --namespace must be given.\n```\n\n### Options\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for validate\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n      --namespace string               namespace to get argo rbac configmap from\n      --password string                Password for basic authentication to the API server\n      --policy-file string             path to the policy file to use\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n### Options inherited from parent commands\n```\n      --argocd-cm-path string           Path to local argocd-cm.yaml file\n      --argocd-context string           The name of the Argo-CD server context to use\n      --argocd-secret-path string       Path to local argocd-secret.yaml file\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --load-cluster-settings           Indicates that config map and secret should be loaded from cluster unless local file path is provided\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n### SEE ALSO\n- [argocd admin settings rbac](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac/) \\- Validate and test RBAC configuration\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_validate", "title": "argocd admin settings rbac validate Command Reference", "description": "Validate RBAC policy", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:08:00", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_rbac_validate/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd admin settings rbac validate Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "8b16c0b5-575e-4d87-b838-0cdfe35a6f62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_validate", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_validate/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin settings rbac validate Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Validate a local policy file\n```yaml\nargocd admin settings rbac validate --policy-file policy.csv\n```\n\n### Validate a K8s config map\n```yaml\nargocd admin settings rbac validate --policy-file argocd-rbac-cm.yaml\n```\n\n### Validate using namespace\n```yaml\nargocd admin settings rbac validate --namespace argocd\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_validate", "title": "argocd admin settings rbac validate Command Reference", "description": "Validate RBAC policy", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:08:00", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_rbac_validate/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd admin settings rbac validate Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "8b16c0b5-575e-4d87-b838-0cdfe35a6f62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_validate", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_validate/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin settings rbac validate Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Either --policy-file or --namespace must be given.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_validate", "title": "argocd admin settings rbac validate Command Reference", "description": "Validate RBAC policy", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:08:00", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_rbac_validate/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd admin settings rbac validate Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "8b16c0b5-575e-4d87-b838-0cdfe35a6f62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_validate", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac_validate/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin settings resource-overrides health Command Reference\"?\n\nAssistant: Assess resource health using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap\n\nHere's a detailed explanation:\n\n\n## argocd admin settings resource-overrides health\nAssess resource health\n\n### Synopsis\nAssess resource health using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap\n\n```\nargocd admin settings resource-overrides health RESOURCE_YAML_PATH [flags]\n```\n\n### Examples\n```\nargocd admin settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n### Options\n```\n  -h, --help   help for health\n```\n\n### Options inherited from parent commands\n```\n      --argocd-cm-path string           Path to local argocd-cm.yaml file\n      --argocd-context string           The name of the Argo-CD server context to use\n      --argocd-secret-path string       Path to local argocd-secret.yaml file\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --context string                  The name of the kubeconfig context to use\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-context string             Directs the command to the given kube-context\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n      --load-cluster-settings           Indicates that config map and secret should be loaded from cluster unless local file path is provided\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                   The address and port of the Kubernetes API server\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n### SEE ALSO\n- [argocd admin settings resource-overrides](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides/) \\- Troubleshoot resource overrides\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_health", "title": "argocd admin settings resource-overrides health Command Reference", "description": "Assess resource health using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:13:03", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin settings resource-overrides health Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_health/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6f51c04d-2bba-4e1e-bdc9-c36ad2caf81f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_health", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_health/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin settings resource-overrides health Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nargocd admin settings resource-overrides health ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_health", "title": "argocd admin settings resource-overrides health Command Reference", "description": "Assess resource health using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:13:03", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin settings resource-overrides health Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_health/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6f51c04d-2bba-4e1e-bdc9-c36ad2caf81f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_health", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_health/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin settings resource-overrides health Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to specify the correct path for argocd-cm.yaml when using the command.\n• Use the --help option to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_health", "title": "argocd admin settings resource-overrides health Command Reference", "description": "Assess resource health using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:13:03", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin settings resource-overrides health Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_health/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6f51c04d-2bba-4e1e-bdc9-c36ad2caf81f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_health", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_health/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin settings resource-overrides ignore-differences Command Reference\"?\n\nAssistant: Renders fields excluded from diffing\n\nHere's a detailed explanation:\n\n\n## Synopsis\nRenders ignored fields using the 'ignoreDifferences' setting specified in the 'resource.customizations' field of 'argocd-cm' ConfigMap\n\n## Examples\n```\nargocd admin settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n## Options\n```\n  -h, --help   help for ignore-differences\n```\n\n## Options inherited from parent commands\n```\n      --argocd-cm-path string           Path to local argocd-cm.yaml file\n      --argocd-context string           The name of the Argo-CD server context to use\n      --argocd-secret-path string       Path to local argocd-secret.yaml file\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --context string                  The name of the kubeconfig context to use\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-context string             Directs the command to the given kube-context\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n      --load-cluster-settings           Indicates that config map and secret should be loaded from cluster unless local file path is provided\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                   The address and port of the Kubernetes API server\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-differences", "title": "argocd admin settings resource-overrides ignore-differences Command Reference", "description": "Renders fields excluded from diffing", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:15:42", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin settings resource-overrides ignore-differences Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-differences/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "3ec6531e-899b-4e5a-b52b-c2e33467ca1c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-differences", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-differences/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin settings resource-overrides ignore-differences Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\n```\nargocd admin settings resource-overrides ignore-differences ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-differences", "title": "argocd admin settings resource-overrides ignore-differences Command Reference", "description": "Renders fields excluded from diffing", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:15:42", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin settings resource-overrides ignore-differences Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-differences/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "3ec6531e-899b-4e5a-b52b-c2e33467ca1c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-differences", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-differences/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin settings resource-overrides list-actions Command Reference\"?\n\nAssistant: List available resource actions\n\nHere's a detailed explanation:\n\n\n## argocd admin settings resource-overrides list-actions\nList actions available for given resource action using the lua scripts configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields.\n\n## Synopsis\nList actions available for given resource action using the lua scripts configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields\n\n```\nargocd admin settings resource-overrides list-actions RESOURCE_YAML_PATH [flags]\n```\n\n\n## Examples\n```\nargocd admin settings resource-overrides action list /tmp/deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n\n## Options\n```\n  -h, --help   help for list-actions\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-cm-path string           Path to local argocd-cm.yaml file\n      --argocd-context string           The name of the Argo-CD server context to use\n      --argocd-secret-path string       Path to local argocd-secret.yaml file\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --context string                  The name of the kubeconfig context to use\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-context string             Directs the command to the given kube-context\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n      --load-cluster-settings           Indicates that config map and secret should be loaded from cluster unless local file path is provided\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                   The address and port of the Kubernetes API server\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_list-actions", "title": "argocd admin settings resource-overrides list-actions Command Reference", "description": "List available resource actions", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 03:19:15", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin settings resource-overrides list-actions Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_list-actions/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "424eaeb6-7c1e-407c-a59f-21605380371e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_list-actions", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_list-actions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin settings resource-overrides list-actions Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example Command\n```yaml\nargocd admin settings resource-overrides action list /tmp/deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_list-actions", "title": "argocd admin settings resource-overrides list-actions Command Reference", "description": "List available resource actions", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 03:19:15", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd admin settings resource-overrides list-actions Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_list-actions/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "424eaeb6-7c1e-407c-a59f-21605380371e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_list-actions", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_list-actions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin settings resource-overrides run-action Command Reference\"?\n\nAssistant: Executes resource action using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields\n\nHere's a detailed explanation:\n\n\n## Synopsis\nExecutes resource action using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields\n\n```\nargocd admin settings resource-overrides run-action RESOURCE_YAML_PATH ACTION [flags]\n```\n\n\n## Examples\n```\nargocd admin settings resource-overrides action /tmp/deploy.yaml restart --argocd-cm-path ./argocd-cm.yaml\n```\n\n\n## Options\n```\n  -h, --help   help for run-action\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-cm-path string           Path to local argocd-cm.yaml file\n      --argocd-context string           The name of the Argo-CD server context to use\n      --argocd-secret-path string       Path to local argocd-secret.yaml file\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --context string                  The name of the kubeconfig context to use\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-context string             Directs the command to the given kube-context\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n      --load-cluster-settings           Indicates that config map and secret should be loaded from cluster unless local file path is provided\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                   The address and port of the Kubernetes API server\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_run-action", "title": "argocd admin settings resource-overrides run-action Command Reference", "description": "Executes resource action using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:20:09", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_run-action/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "title": "argocd admin settings resource-overrides run-action Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "scrapeId": "d987b4d1-bf62-4b3e-900a-37f328d786e0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_run-action", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_run-action/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin settings resource-overrides run-action Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example Command\n```yaml\nargocd admin settings resource-overrides action /tmp/deploy.yaml restart --argocd-cm-path ./argocd-cm.yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_run-action", "title": "argocd admin settings resource-overrides run-action Command Reference", "description": "Executes resource action using the lua script configured in the 'resource.customizations' field of 'argocd-cm' ConfigMap and outputs updated fields", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:20:09", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_run-action/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "title": "argocd admin settings resource-overrides run-action Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "scrapeId": "d987b4d1-bf62-4b3e-900a-37f328d786e0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_run-action", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_run-action/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin settings validate Command Reference\"?\n\nAssistant: Validate settings specified in 'argocd-cm' ConfigMap and 'argocd-secret' Secret\n\nHere's a detailed explanation:\n\n\n## Synopsis\nValidates settings specified in 'argocd-cm' ConfigMap and 'argocd-secret' Secret\n\n```\nargocd admin settings validate [flags]\n```\n\n\n## Examples\n```\n#Validates all settings in the specified YAML file\nargocd admin settings validate --argocd-cm-path ./argocd-cm.yaml\n\n#Validates accounts and plugins settings in Kubernetes cluster of current kubeconfig context\nargocd admin settings validate --group accounts --group plugins --load-cluster-settings\n```\n\n\n## Options\n```\n      --group stringArray   Optional list of setting groups that have to be validated ( one of: accounts, general, kustomize, repositories, resource-overrides)\n  -h, --help                help for validate\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-cm-path string           Path to local argocd-cm.yaml file\n      --argocd-context string           The name of the Argo-CD server context to use\n      --argocd-secret-path string       Path to local argocd-secret.yaml file\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --context string                  The name of the kubeconfig context to use\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-context string             Directs the command to the given kube-context\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n      --load-cluster-settings           Indicates that config map and secret should be loaded from cluster unless local file path is provided\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                   The address and port of the Kubernetes API server\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_validate", "title": "argocd admin settings validate Command Reference", "description": "Validate settings specified in 'argocd-cm' ConfigMap and 'argocd-secret' Secret", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 03:20:44", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_validate/", "title": "argocd admin settings validate Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "f9c60bef-dfdf-401e-a31d-654d0248d35c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_validate", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_validate/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin settings validate Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Validate settings in YAML file\n```yaml\nargocd admin settings validate --argocd-cm-path ./argocd-cm.yaml\n```\n\n### Validate accounts and plugins settings\n```yaml\nargocd admin settings validate --group accounts --group plugins --load-cluster-settings\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_validate", "title": "argocd admin settings validate Command Reference", "description": "Validate settings specified in 'argocd-cm' ConfigMap and 'argocd-secret' Secret", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 03:20:44", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_validate/", "title": "argocd admin settings validate Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "f9c60bef-dfdf-401e-a31d-654d0248d35c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_validate", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_validate/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin settings validate Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --group option to specify which setting groups to validate, such as accounts or plugins.\n• Always provide the correct path to the argocd-cm.yaml and argocd-secret.yaml files when validating settings.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_validate", "title": "argocd admin settings validate Command Reference", "description": "Validate settings specified in 'argocd-cm' ConfigMap and 'argocd-secret' Secret", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 03:20:44", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_validate/", "title": "argocd admin settings validate Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "f9c60bef-dfdf-401e-a31d-654d0248d35c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_validate", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_validate/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app Command Reference\"?\n\nAssistant: Manage applications\n\nHere's a detailed explanation:\n\n\n## argocd app\nManage applications\n\n```\nargocd app [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app", "title": "argocd app Command Reference", "description": "Manage applications", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:21:09", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "ba481dd8-6a9d-4646-9ff6-8b7e3c6e3863", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # List all the applications.\n  argocd app list\n\n  # Get the details of a application\n  argocd app get my-app\n\n  # Set an override parameter\n  argocd app set my-app -p image.tag=v1.0.1\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app", "title": "argocd app Command Reference", "description": "Manage applications", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:21:09", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "ba481dd8-6a9d-4646-9ff6-8b7e3c6e3863", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app actions Command Reference\"?\n\nAssistant: Manage Resource actions\n\nHere's a detailed explanation:\n\n\n## argocd app actions\nManage Resource actions\n\n```\nargocd app actions [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions", "title": "argocd app actions Command Reference", "description": "Manage Resource actions", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:21:33", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_actions/", "readthedocs-project-slug": "argo-cd", "title": "argocd app actions Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "06cbebe8-e2f2-4212-b9e7-34b002d19b89", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app actions Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # List all the available actions for an application\n  argocd app actions list APPNAME\n\n  # Run an available action for an application\n  argocd app actions run APPNAME ACTION --kind KIND [--resource-name RESOURCE] [--namespace NAMESPACE] [--group GROUP]\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions", "title": "argocd app actions Command Reference", "description": "Manage Resource actions", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:21:33", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_actions/", "readthedocs-project-slug": "argo-cd", "title": "argocd app actions Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "06cbebe8-e2f2-4212-b9e7-34b002d19b89", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app actions Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the actions command.\n• Ensure you have the correct context set for your Argo CD server before running commands.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions", "title": "argocd app actions Command Reference", "description": "Manage Resource actions", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:21:33", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_actions/", "readthedocs-project-slug": "argo-cd", "title": "argocd app actions Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "06cbebe8-e2f2-4212-b9e7-34b002d19b89", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app actions list Command Reference\"?\n\nAssistant: Lists available actions on a resource\n\nHere's a detailed explanation:\n\n\n## argocd app actions list\nLists available actions on a resource\n\n```\nargocd app actions list APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_list", "title": "argocd app actions list Command Reference", "description": "Lists available actions on a resource", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:21:47", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_actions_list/", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "argocd app actions list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "11b0f8e6-4700-4eb5-8239-c678ebf51d4b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app actions list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### List all the available actions for an application\n```yaml\nargocd app actions list APPNAME\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_list", "title": "argocd app actions list Command Reference", "description": "Lists available actions on a resource", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:21:47", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_actions_list/", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "argocd app actions list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "11b0f8e6-4700-4eb5-8239-c678ebf51d4b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app actions list Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format as either yaml or json for better readability.\n• Utilize the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_list", "title": "argocd app actions list Command Reference", "description": "Lists available actions on a resource", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:21:47", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_actions_list/", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "argocd app actions list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "11b0f8e6-4700-4eb5-8239-c678ebf51d4b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app actions run Command Reference\"?\n\nAssistant: Runs an available action on resource(s)\n\nHere's a detailed explanation:\n\n\n## argocd app actions run\nRuns an available action on resource(s)\n\n```\nargocd app actions run APPNAME ACTION [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_run", "title": "argocd app actions run Command Reference", "description": "Runs an available action on resource(s)", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:12", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_actions_run/", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "argocd app actions run Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "510225ef-1f90-4a4d-bf3a-3c5ec04e36ad", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_run", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_run/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app actions run Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Run an available action for an application\n```yaml\nargocd app actions run APPNAME ACTION --kind KIND [--resource-name RESOURCE] [--namespace NAMESPACE] [--group GROUP]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_run", "title": "argocd app actions run Command Reference", "description": "Runs an available action on resource(s)", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:12", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_actions_run/", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "argocd app actions run Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "510225ef-1f90-4a4d-bf3a-3c5ec04e36ad", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_run", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_run/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app actions run Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --all flag to run the action on multiple matching resources.\n• Ensure to set the correct Argo CD server context using --argocd-context.\n• Use --insecure only in trusted environments to skip server certificate verification.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_run", "title": "argocd app actions run Command Reference", "description": "Runs an available action on resource(s)", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:12", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_actions_run/", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "argocd app actions run Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "510225ef-1f90-4a4d-bf3a-3c5ec04e36ad", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_run", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_actions_run/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app add-source Command Reference\"?\n\nAssistant: Adds a source to the list of sources in the application\n\nHere's a detailed explanation:\n\n\n## argocd app add-source\nAdds a source to the list of sources in the application\n\n```\nargocd app add-source APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_add-source", "title": "argocd app add-source Command Reference", "description": "Adds a source to the list of sources in the application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:39", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "argocd app add-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_add-source/", "scrapeId": "4a0f892f-e4ed-4c5d-ba52-9f82556d0ae2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_add-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_add-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app add-source Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Append a source to the list of sources in the application\n```yaml\nargocd app add-source guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --source-name guestbook\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_add-source", "title": "argocd app add-source Command Reference", "description": "Adds a source to the list of sources in the application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:39", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "argocd app add-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_add-source/", "scrapeId": "4a0f892f-e4ed-4c5d-ba52-9f82556d0ae2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_add-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_add-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app add-source Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --allow-empty flag to set allow zero live resources when sync is automated.\n• Specify the --app-namespace to define the namespace of the target application where the source will be appended.\n• Utilize the --dry-source-path and --dry-source-repo options for specifying the path and repository of the dry source.\n• For Helm charts, use --helm-set and --helm-set-file to set values directly or from files respectively.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_add-source", "title": "argocd app add-source Command Reference", "description": "Adds a source to the list of sources in the application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:39", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "title": "argocd app add-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_add-source/", "scrapeId": "4a0f892f-e4ed-4c5d-ba52-9f82556d0ae2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_add-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_add-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app confirm-deletion Command Reference\"?\n\nAssistant: Confirms deletion/pruning of an application resources\n\nHere's a detailed explanation:\n\n\n## argocd app confirm-deletion\nConfirms deletion/pruning of an application resources\n\n```\nargocd app confirm-deletion APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_confirm-deletion", "title": "argocd app confirm-deletion Command Reference", "description": "Confirms deletion/pruning of an application resources", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:43", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_confirm-deletion/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "argocd app confirm-deletion Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "5f1d6668-c346-4979-910c-fd09c11896df", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_confirm-deletion", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_confirm-deletion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app confirm-deletion Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd app confirm-deletion APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_confirm-deletion", "title": "argocd app confirm-deletion Command Reference", "description": "Confirms deletion/pruning of an application resources", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:43", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_confirm-deletion/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "argocd app confirm-deletion Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "5f1d6668-c346-4979-910c-fd09c11896df", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_confirm-deletion", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_confirm-deletion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app confirm-deletion Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -N flag to specify the namespace of the target application.\n• Utilize the --help option to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_confirm-deletion", "title": "argocd app confirm-deletion Command Reference", "description": "Confirms deletion/pruning of an application resources", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:43", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_confirm-deletion/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "title": "argocd app confirm-deletion Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "5f1d6668-c346-4979-910c-fd09c11896df", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_confirm-deletion", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_confirm-deletion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app create Command Reference\"?\n\nAssistant: Create an application\n\nHere's a detailed explanation:\n\n\n## argocd app create\nCreate an application\n\n```\nargocd app create APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_create", "title": "argocd app create Command Reference", "description": "Create an application", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:22:51", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app create Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_create/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "f093e5a2-ced4-4f33-ba06-3a4739a06c80", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_create", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app create Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Create a directory app\n  argocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse\n\n  # Create a Jsonnet app\n  argocd app create jsonnet-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path jsonnet-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --jsonnet-ext-str replicas=2\n\n  # Create a Helm app\n  argocd app create helm-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path helm-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --helm-set replicaCount=2\n\n  # Create a Helm app from a Helm repo\n  argocd app create nginx-ingress --repo https://charts.helm.sh/stable --helm-chart nginx-ingress --revision 1.24.3 --dest-namespace default --dest-server https://kubernetes.default.svc\n\n  # Create a Kustomize app\n  argocd app create kustomize-guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path kustomize-guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --kustomize-image gcr.io/heptio-images/ks-guestbook-demo:0.1\n\n  # Create a MultiSource app while yaml file contains an application with multiple sources\n  argocd app create guestbook --file <path-to-yaml-file>\n\n  # Create a app using a custom tool:\n  argocd app create kasane --repo https://github.com/argoproj/argocd-example-apps.git --path plugins/kasane --dest-namespace default --dest-server https://kubernetes.default.svc --config-management-plugin kasane\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_create", "title": "argocd app create Command Reference", "description": "Create an application", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:22:51", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app create Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_create/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "f093e5a2-ced4-4f33-ba06-3a4739a06c80", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_create", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app delete-resource Command Reference\"?\n\nAssistant: Delete resource in an application\n\nHere's a detailed explanation:\n\n\n## argocd app delete-resource\nDelete resource in an application\n\n```\nargocd app delete-resource APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete-resource", "title": "argocd app delete-resource Command Reference", "description": "Delete resource in an application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:58", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "language": "en", "title": "argocd app delete-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_delete-resource/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "da57db78-57e8-43bc-9b5c-8da62fa25a34", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app delete-resource Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nargocd app delete-resource APPNAME [flags]\n```\n\n### Options\n```yaml\n--all                    Indicates whether to patch multiple matching of resources\n--force                  Indicates whether to force delete the resource\n--group string           Group\n-h, --help                   help for delete-resource\n--kind string            Kind\n--namespace string       Namespace\n--orphan                 Indicates whether to orphan the dependents of the deleted resource\n--project string         The name of the application's project - specifying this allows the command to report \"not found\" instead of \"permission denied\" if the app does not exist\n--resource-name string   Name of resource\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete-resource", "title": "argocd app delete-resource Command Reference", "description": "Delete resource in an application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:58", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "language": "en", "title": "argocd app delete-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_delete-resource/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "da57db78-57e8-43bc-9b5c-8da62fa25a34", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app delete-resource Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --force option to bypass confirmation prompts when deleting resources.\n• Specify the --project option to avoid permission issues when the application does not exist.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete-resource", "title": "argocd app delete-resource Command Reference", "description": "Delete resource in an application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:22:58", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "language": "en", "title": "argocd app delete-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_delete-resource/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "da57db78-57e8-43bc-9b5c-8da62fa25a34", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app delete Command Reference\"?\n\nAssistant: Delete an application\n\nHere's a detailed explanation:\n\n\n## argocd app delete\nDelete an application\n\n```\nargocd app delete APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete", "title": "argocd app delete Command Reference", "description": "Delete an application", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:23:17", "type": "overview", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "argocd app delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_delete/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "scrapeId": "35419f5a-6045-4477-abbc-4b9dd7f7c23d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app delete Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\n  # Delete an app\n  argocd app delete my-app\n\n  # Delete multiple apps\n  argocd app delete my-app other-app\n\n  # Delete apps by label\n  argocd app delete -l app.kubernetes.io/instance=my-app\n  argocd app delete -l app.kubernetes.io/instance!=my-app\n  argocd app delete -l app.kubernetes.io/instance\n  argocd app delete -l '!app.kubernetes.io/instance'\n  argocd app delete -l 'app.kubernetes.io/instance notin (my-app,other-app)'\n```\n\n```\n\n### Options\n```yaml\n```\n  -N, --app-namespace string        Namespace where the application will be deleted from\n      --cascade                     Perform a cascaded deletion of all application resources (default true)\n  -h, --help                        help for delete\n  -p, --propagation-policy string   Specify propagation policy for deletion of application's resources. One of: foreground|background (default \"foreground\")\n  -l, --selector string             Delete all apps with matching label. Supports '=', '==', '!=', in, notin, exists & not exists. Matching apps must satisfy all of the specified label constraints.\n      --wait                        Wait until deletion of the application(s) completes\n  -y, --yes                         Turn off prompting to confirm cascaded deletion of application resources\n```\n\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete", "title": "argocd app delete Command Reference", "description": "Delete an application", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:23:17", "type": "code_examples", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "title": "argocd app delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_delete/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "scrapeId": "35419f5a-6045-4477-abbc-4b9dd7f7c23d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app diff Command Reference\"?\n\nAssistant: Perform a diff against the target and live state.\n\nHere's a detailed explanation:\n\n\n## argocd app diff\nPerform a diff against the target and live state.\n\n### Synopsis\nPerform a diff against the target and live state.\nUses 'diff' to render the difference. KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff tool.\nReturns the following exit codes: 2 on general errors, 1 when a diff is found, and 0 when no diff is found\nKubernetes Secrets are ignored from this diff.\n\n## Options\n```\n  -N, --app-namespace string                              Only render the difference in namespace\n      --diff-exit-code int                                Return specified exit code when there is a diff. Typical error code is 20. (default 1)\n      --exit-code                                         Return non-zero exit code when there is a diff. May also return non-zero exit code if there is an error. (default true)\n      --hard-refresh                                      Refresh application data as well as target manifests cache\n  -h, --help                                              help for diff\n      --ignore-normalizer-jq-execution-timeout duration   Set ignore normalizer JQ execution timeout (default 1s)\n      --local string                                      Compare live app to a local manifests\n      --local-include stringArray                         Used with --server-side-generate, specify patterns of filenames to send. Matching is based on filename and not path. (default [*.yaml,*.yml,*.json])\n      --local-repo-root string                            Path to the repository root. Used together with --local allows setting the repository root (default \"/\")\n      --refresh                                           Refresh application data when retrieving\n      --revision string                                   Compare live app to a particular revision\n      --revisions stringArray                             Show manifests at specific revisions for source position in source-positions\n      --server-side-generate                              Used with --local, this will send your manifests to the server for diffing\n      --source-names stringArray                          List of source names. Default is an empty array.\n      --source-positions int64Slice                       List of source positions. Default is empty array. Counting start at 1. (default [])\n```\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_diff", "title": "argocd app diff Command Reference", "description": "Perform a diff against the target and live state.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:23:41", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app diff Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_diff/", "readthedocs-http-status": "200", "scrapeId": "bc4b265d-2d4d-4f4d-8a87-1ff4ad2cef82", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_diff", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_diff/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app diff Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### argocd app diff command\n```yaml\nargocd app diff APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_diff", "title": "argocd app diff Command Reference", "description": "Perform a diff against the target and live state.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:23:41", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app diff Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_diff/", "readthedocs-http-status": "200", "scrapeId": "bc4b265d-2d4d-4f4d-8a87-1ff4ad2cef82", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_diff", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_diff/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app diff Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff tool.\n• Kubernetes Secrets are ignored from this diff.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_diff", "title": "argocd app diff Command Reference", "description": "Perform a diff against the target and live state.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:23:41", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app diff Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_diff/", "readthedocs-http-status": "200", "scrapeId": "bc4b265d-2d4d-4f4d-8a87-1ff4ad2cef82", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_diff", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_diff/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app edit Command Reference\"?\n\nAssistant: Edit application\n\nHere's a detailed explanation:\n\n\n## argocd app edit\nEdit application\n\n```\nargocd app edit APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_edit", "title": "argocd app edit Command Reference", "description": "Edit application", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:23:54", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "argocd app edit Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_edit/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "scrapeId": "563abd0a-e943-49c0-9282-7c9da99bd841", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_edit", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_edit/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app edit Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nargocd app edit APPNAME [flags]\n```\n\n### Options\n```yaml\n  -N, --app-namespace string   Only edit application in namespace\n  -h, --help                   help for edit\n\n```\n\n### Options inherited from parent commands\n```yaml\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_edit", "title": "argocd app edit Command Reference", "description": "Edit application", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:23:54", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "argocd app edit Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_edit/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "scrapeId": "563abd0a-e943-49c0-9282-7c9da99bd841", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_edit", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_edit/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app get Command Reference\"?\n\nAssistant: Get application details\n\nHere's a detailed explanation:\n\n\n## argocd app get\nGet application details\n\n```\nargocd app get APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_get", "title": "argocd app get Command Reference", "description": "Get application details", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:02", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_get/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "0a9a2a28-a8b9-4aeb-b55d-2eb85aba1b70", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app get Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\n  # Get basic details about the application \"my-app\" in wide format\n  argocd app get my-app -o wide\n\n  # Get detailed information about the application \"my-app\" in YAML format\n  argocd app get my-app -o yaml\n\n  # Get details of the application \"my-app\" in JSON format\n  argocd get my-app -o json\n\n  # Get application details and include information about the current operation\n  argocd app get my-app --show-operation\n\n  # Show application parameters and overrides\n  argocd app get my-app --show-params\n\n  # Show application parameters and overrides for a source at position 1 under spec.sources of app my-app\n  argocd app get my-app --show-params --source-position 1\n\n  # Show application parameters and overrides for a source named \"test\"\n  argocd app get my-app --show-params --source-name test\n\n  # Refresh application data when retrieving\n  argocd app get my-app --refresh\n\n  # Perform a hard refresh, including refreshing application data and target manifests cache\n  argocd app get my-app --hard-refresh\n\n  # Get application details and display them in a tree format\n  argocd app get my-app --output tree\n\n  # Get application details and display them in a detailed tree format\n  argocd app get my-app --output tree=detailed\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_get", "title": "argocd app get Command Reference", "description": "Get application details", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:02", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_get/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "0a9a2a28-a8b9-4aeb-b55d-2eb85aba1b70", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app get Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format (json, yaml, wide, tree).\n• Use --show-operation to include information about the current operation.\n• Use --refresh to refresh application data when retrieving.\n• Use --hard-refresh for a complete refresh including target manifests cache.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_get", "title": "argocd app get Command Reference", "description": "Get application details", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:02", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_get/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "0a9a2a28-a8b9-4aeb-b55d-2eb85aba1b70", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app history Command Reference\"?\n\nAssistant: Show application deployment history\n\nHere's a detailed explanation:\n\n\n## argocd app history\nShow application deployment history\n\n```\nargocd app history APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_history", "title": "argocd app history Command Reference", "description": "Show application deployment history", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:05", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app history Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_history/", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "6de3cc7b-4809-4f18-a10f-6dd6c3176b4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_history", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_history/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app history Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd app history APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_history", "title": "argocd app history Command Reference", "description": "Show application deployment history", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:05", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app history Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_history/", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "6de3cc7b-4809-4f18-a10f-6dd6c3176b4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_history", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_history/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app history Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -N flag to specify the application namespace for more targeted results.\n• Utilize the -o flag to choose the output format that best suits your needs.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_history", "title": "argocd app history Command Reference", "description": "Show application deployment history", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:05", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app history Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_history/", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "6de3cc7b-4809-4f18-a10f-6dd6c3176b4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_history", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_history/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app list Command Reference\"?\n\nAssistant: List applications\n\nHere's a detailed explanation:\n\n\n## argocd app list\nList applications\n\n```\nargocd app list [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_list", "title": "argocd app list Command Reference", "description": "List applications", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:11", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_list/", "title": "argocd app list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42b83b1f-7dd3-4a71-a840-37d9d7633e50", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # List all apps\n  argocd app list\n\n  # List apps by label, in this example we listing apps that are children of another app (aka app-of-apps)\n  argocd app list -l app.kubernetes.io/instance=my-app\n  argocd app list -l app.kubernetes.io/instance!=my-app\n  argocd app list -l app.kubernetes.io/instance\n  argocd app list -l '!app.kubernetes.io/instance'\n  argocd app list -l 'app.kubernetes.io/instance notin (my-app,other-app)'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_list", "title": "argocd app list Command Reference", "description": "List applications", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:11", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_list/", "title": "argocd app list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42b83b1f-7dd3-4a71-a840-37d9d7633e50", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app list Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -N flag to list applications in a specific namespace.\n• Utilize the -c flag to filter applications by cluster name or URL.\n• The -o flag allows you to specify the output format, such as json or yaml.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_list", "title": "argocd app list Command Reference", "description": "List applications", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:11", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_list/", "title": "argocd app list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "42b83b1f-7dd3-4a71-a840-37d9d7633e50", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app logs Command Reference\"?\n\nAssistant: Get logs of application pods\n\nHere's a detailed explanation:\n\n\n## argocd app logs\nGet logs of application pods\n\n```\nargocd app logs APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_logs", "title": "argocd app logs Command Reference", "description": "Get logs of application pods", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:19", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd app logs Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_logs/", "scrapeId": "f63ddcdd-e3e0-4b8a-840f-dc585370da91", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_logs", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_logs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app logs Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Get logs of pods associated with the application \"my-app\"\n```yaml\nargocd app logs my-app\n```\n\n### Get logs of pods associated with the application \"my-app\" in a specific resource group\n```yaml\nargocd app logs my-app --group my-group\n```\n\n### Get logs of pods associated with the application \"my-app\" in a specific resource kind\n```yaml\nargocd app logs my-app --kind my-kind\n```\n\n### Get logs of pods associated with the application \"my-app\" in a specific namespace\n```yaml\nargocd app logs my-app --namespace my-namespace\n```\n\n### Get logs of pods associated with the application \"my-app\" for a specific resource name\n```yaml\nargocd app logs my-app --name my-resource\n```\n\n### Stream logs in real-time for the application \"my-app\"\n```yaml\nargocd app logs my-app -f\n```\n\n### Get the last N lines of logs for the application \"my-app\"\n```yaml\nargocd app logs my-app --tail 100\n```\n\n### Get logs since a specified number of seconds ago\n```yaml\nargocd app logs my-app --since-seconds 3600\n```\n\n### Get logs until a specified time (format: \"2023-10-10T15:30:00Z\")\n```yaml\nargocd app logs my-app --until-time \"2023-10-10T15:30:00Z\"\n```\n\n### Filter logs to show only those containing a specific string\n```yaml\nargocd app logs my-app --filter \"error\"\n```\n\n### Get logs for a specific container within the pods\n```yaml\nargocd app logs my-app -c my-container\n```\n\n### Get previously terminated container logs\n```yaml\nargocd app logs my-app -p\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_logs", "title": "argocd app logs Command Reference", "description": "Get logs of application pods", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:19", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd app logs Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_logs/", "scrapeId": "f63ddcdd-e3e0-4b8a-840f-dc585370da91", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_logs", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_logs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app logs Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --follow flag to stream logs in real-time for better monitoring.\n• Utilize the --tail option to limit the number of log lines returned, which can help in quickly identifying issues without overwhelming output.\n• The --filter option can be very useful for isolating specific log messages, especially when troubleshooting.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_logs", "title": "argocd app logs Command Reference", "description": "Get logs of application pods", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:19", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "title": "argocd app logs Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_logs/", "scrapeId": "f63ddcdd-e3e0-4b8a-840f-dc585370da91", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_logs", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_logs/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app manifests Command Reference\"?\n\nAssistant: Print manifests of an application\n\nHere's a detailed explanation:\n\n\n## argocd app manifests\nPrint manifests of an application\n\n```\nargocd app manifests APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_manifests", "title": "argocd app manifests Command Reference", "description": "Print manifests of an application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:26", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_manifests/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app manifests Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "scrapeId": "340fd07e-87ff-4b0b-a760-ea689ba4eaeb", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_manifests", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_manifests/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app manifests Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\n  # Get manifests for an application\n  argocd app manifests my-app\n\n  # Get manifests for an application at a specific revision\n  argocd app manifests my-app --revision 0.0.1\n\n  # Get manifests for a multi-source application at specific revisions for specific sources\n  argocd app manifests my-app --revisions 0.0.1 --source-names src-base --revisions 0.0.2 --source-names src-values\n\n  # Get manifests for a multi-source application at specific revisions for specific sources\n  argocd app manifests my-app --revisions 0.0.1 --source-positions 1 --revisions 0.0.2 --source-positions 2\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_manifests", "title": "argocd app manifests Command Reference", "description": "Print manifests of an application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:26", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_manifests/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app manifests Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "scrapeId": "340fd07e-87ff-4b0b-a760-ea689ba4eaeb", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_manifests", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_manifests/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app manifests Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --local flag to show locally-generated manifests by providing the absolute path to app manifests within the manifest repo.\n• Set the --revision flag to show manifests at a specific revision.\n• Utilize the --source flag to specify the source of manifests, either live or git.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_manifests", "title": "argocd app manifests Command Reference", "description": "Print manifests of an application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:26", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_manifests/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app manifests Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "scrapeId": "340fd07e-87ff-4b0b-a760-ea689ba4eaeb", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_manifests", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_manifests/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app patch-resource Command Reference\"?\n\nAssistant: Patch resource in an application\n\nHere's a detailed explanation:\n\n\n## argocd app patch-resource\nPatch resource in an application\n\n```\nargocd app patch-resource APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch-resource", "title": "argocd app patch-resource Command Reference", "description": "Patch resource in an application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:31", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_patch-resource/", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "title": "argocd app patch-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "2bfee876-6fd5-4c42-9686-81b66ac710c4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app patch-resource Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nargocd app patch-resource APPNAME [flags]\n```\n\n### Options\n```yaml\n--all                    Indicates whether to patch multiple matching of resources\n--group string           Group\n-h, --help                   help for patch-resource\n--kind string            Kind\n--namespace string       Namespace\n--patch string           Patch\n--patch-type string      Which Patching strategy to use: 'application/json-patch+json', 'application/merge-patch+json', or 'application/strategic-merge-patch+json'. Defaults to 'application/merge-patch+json' (default \"application/merge-patch+json\")\n--project string         The name of the application's project - specifying this allows the command to report \"not found\" instead of \"permission denied\" if the app does not exist\n--resource-name string   Name of resource\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch-resource", "title": "argocd app patch-resource Command Reference", "description": "Patch resource in an application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:31", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_patch-resource/", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "title": "argocd app patch-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "2bfee876-6fd5-4c42-9686-81b66ac710c4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app patch-resource Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --project option to get more informative error messages when the application does not exist.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch-resource", "title": "argocd app patch-resource Command Reference", "description": "Patch resource in an application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:31", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_patch-resource/", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "title": "argocd app patch-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "2bfee876-6fd5-4c42-9686-81b66ac710c4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app patch Command Reference\"?\n\nAssistant: Patch application\n\nHere's a detailed explanation:\n\n\n## argocd app patch\nPatch application\n\n```\nargocd app patch APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch", "title": "argocd app patch Command Reference", "description": "Patch application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:36", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_patch/", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd app patch Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "scrapeId": "914c5846-15e2-4bd8-bf2a-23fcb572e155", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app patch Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Update an application's source path using json patch\n```yaml\nargocd app patch myapplication --patch='[{\"op\": \"replace\", \"path\": \"/spec/source/path\", \"value\": \"newPath\"}]' --type json\n```\n\n### Update an application's repository target revision using merge patch\n```yaml\nargocd app patch myapplication --patch '{\"spec\": { \"source\": { \"targetRevision\": \"master\" } }}' --type merge\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch", "title": "argocd app patch Command Reference", "description": "Patch application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:36", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_patch/", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd app patch Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "scrapeId": "914c5846-15e2-4bd8-bf2a-23fcb572e155", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app patch Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use json patch for precise updates to specific fields.\n• Use merge patch for broader updates that may include multiple fields.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch", "title": "argocd app patch Command Reference", "description": "Patch application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:36", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_patch/", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd app patch Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "scrapeId": "914c5846-15e2-4bd8-bf2a-23fcb572e155", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_patch/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app remove-source Command Reference\"?\n\nAssistant: Remove a source from multiple sources application.\n\nHere's a detailed explanation:\n\n\n## argocd app remove-source\nRemove a source from multiple sources application.\n\n```\nargocd app remove-source APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_remove-source", "title": "argocd app remove-source Command Reference", "description": "Remove a source from multiple sources application.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:40", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_remove-source/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app remove-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "8e8edcd6-6e3a-47f7-a4c2-9cb1dab59a06", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_remove-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_remove-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app remove-source Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Remove the source at position 1 from application's sources. Counting starts at 1.\n  argocd app remove-source myapplication --source-position 1\n\n  # Remove the source named \"test\" from application's sources.\n  argocd app remove-source myapplication --source-name test\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_remove-source", "title": "argocd app remove-source Command Reference", "description": "Remove a source from multiple sources application.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:40", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_remove-source/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app remove-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "8e8edcd6-6e3a-47f7-a4c2-9cb1dab59a06", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_remove-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_remove-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app remove-source Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Counting for source positions starts at 1.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_remove-source", "title": "argocd app remove-source Command Reference", "description": "Remove a source from multiple sources application.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:40", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_remove-source/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app remove-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "8e8edcd6-6e3a-47f7-a4c2-9cb1dab59a06", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_remove-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_remove-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app resources Command Reference\"?\n\nAssistant: List resource of application\n\nHere's a detailed explanation:\n\n\n## argocd app resources\nList resource of application\n\n```\nargocd app resources APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_resources", "title": "argocd app resources Command Reference", "description": "List resource of application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:44", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app resources Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_resources/", "scrapeId": "c4e19ce8-5bcb-4ae6-8efc-d56d2aca5d5c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_resources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_resources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app resources Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd app resources APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_resources", "title": "argocd app resources Command Reference", "description": "List resource of application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:44", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app resources Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_resources/", "scrapeId": "c4e19ce8-5bcb-4ae6-8efc-d56d2aca5d5c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_resources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_resources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app resources Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --orphaned flag to list only orphaned resources.\n• Specify the --project flag to report 'not found' instead of 'permission denied' if the app does not exist.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_resources", "title": "argocd app resources Command Reference", "description": "List resource of application", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:44", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app resources Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_resources/", "scrapeId": "c4e19ce8-5bcb-4ae6-8efc-d56d2aca5d5c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_resources", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_resources/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app rollback Command Reference\"?\n\nAssistant: Rollback application to a previous deployed version by History ID, omitted will Rollback to the previous version\n\nHere's a detailed explanation:\n\n\n## argocd app rollback\nRollback application to a previous deployed version by History ID, omitted will Rollback to the previous version\n\n```\nargocd app rollback APPNAME [ID] [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_rollback", "title": "argocd app rollback Command Reference", "description": "Rollback application to a previous deployed version by History ID, omitted will Rollback to the previous version", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:50", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_rollback/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app rollback Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "f4063a2b-2cdf-4978-9d18-fe4059d8b037", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_rollback", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_rollback/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app rollback Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Rollback Command\n```yaml\nargocd app rollback APPNAME [ID] [flags]\n```\n\n### Options\n```yaml\n  -N, --app-namespace string   Rollback application in namespace\n  -h, --help                   help for rollback\n  -o, --output string          Output format. One of: json|yaml|wide|tree|tree=detailed (default \"wide\")\n      --prune                  Allow deleting unexpected resources\n      --timeout uint           Time out after this many seconds\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_rollback", "title": "argocd app rollback Command Reference", "description": "Rollback application to a previous deployed version by History ID, omitted will Rollback to the previous version", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:50", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_rollback/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app rollback Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "f4063a2b-2cdf-4978-9d18-fe4059d8b037", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_rollback", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_rollback/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app rollback Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --app-namespace option to specify the namespace for the rollback.\n• Consider using the --prune option to clean up unexpected resources during rollback.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_rollback", "title": "argocd app rollback Command Reference", "description": "Rollback application to a previous deployed version by History ID, omitted will Rollback to the previous version", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:50", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_rollback/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd app rollback Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "f4063a2b-2cdf-4978-9d18-fe4059d8b037", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_rollback", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_rollback/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app set Command Reference\"?\n\nAssistant: Set application parameters\n\nHere's a detailed explanation:\n\n\n## argocd app set\nSet application parameters\n\n```\nargocd app set APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_set", "title": "argocd app set Command Reference", "description": "Set application parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:59", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "title": "argocd app set Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_set/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "0d2d58e7-d676-4075-8f5b-2be703057a00", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_set", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_set/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app set Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Set application parameters for the application \"my-app\"\n  argocd app set my-app --parameter key1=value1 --parameter key2=value2\n\n  # Set and validate application parameters for \"my-app\"\n  argocd app set my-app --parameter key1=value1 --parameter key2=value2 --validate\n\n  # Set and override application parameters for a source at position 1 under spec.sources of app my-app. source-position starts at 1.\n  argocd app set my-app --source-position 1 --repo https://github.com/argoproj/argocd-example-apps.git\n\n  # Set and override application parameters for a source named \"test\" under spec.sources of app my-app.\n  argocd app set my-app --source-name test --repo https://github.com/argoproj/argocd-example-apps.git\n\n  # Set application parameters and specify the namespace\n  argocd app set my-app --parameter key1=value1 --parameter key2=value2 --namespace my-namespace\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_set", "title": "argocd app set Command Reference", "description": "Set application parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:59", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "title": "argocd app set Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_set/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "0d2d58e7-d676-4075-8f5b-2be703057a00", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_set", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_set/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app set Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --validate flag to ensure that application parameters are correct before applying them.\n• Specify the namespace using --namespace to avoid conflicts with applications in different namespaces.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_set", "title": "argocd app set Command Reference", "description": "Set application parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:24:59", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "title": "argocd app set Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_set/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "0d2d58e7-d676-4075-8f5b-2be703057a00", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_set", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_set/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app sync Command Reference\"?\n\nAssistant: Sync an application to its target state\n\nHere's a detailed explanation:\n\n\n## argocd app sync\nSync an application to its target state\n\n```\nargocd app sync [APPNAME... | -l selector | --project project-name] [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_sync", "title": "argocd app sync Command Reference", "description": "Sync an application to its target state", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:25:26", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_sync/", "title": "argocd app sync Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "64012be1-c664-4fa9-9231-a9d8ccea9de0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_sync", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_sync/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app sync Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\n  # Sync an app\n  argocd app sync my-app\n\n  # Sync multiples apps\n  argocd app sync my-app other-app\n\n  # Sync apps by label, in this example we sync apps that are children of another app (aka app-of-apps)\n  argocd app sync -l app.kubernetes.io/instance=my-app\n  argocd app sync -l app.kubernetes.io/instance!=my-app\n  argocd app sync -l app.kubernetes.io/instance\n  argocd app sync -l '!app.kubernetes.io/instance'\n  argocd app sync -l 'app.kubernetes.io/instance notin (my-app,other-app)'\n\n  # Sync a multi-source application for specific revision of specific sources\n  argocd app sync my-app --revisions 0.0.1 --source-positions 1 --revisions 0.0.2 --source-positions 2\n  argocd app sync my-app --revisions 0.0.1 --source-names my-chart --revisions 0.0.2 --source-names my-values\n\n  # Sync a specific resource\n  # Resource should be formatted as GROUP:KIND:NAME. If no GROUP is specified then :KIND:NAME\n  argocd app sync my-app --resource :Service:my-service\n  argocd app sync my-app --resource argoproj.io:Rollout:my-rollout\n  argocd app sync my-app --resource '!apps:Deployment:my-service'\n  argocd app sync my-app --resource apps:Deployment:my-service --resource :Service:my-service\n  argocd app sync my-app --resource '!*:Service:*'\n  # Specify namespace if the application has resources with the same name in different namespaces\n  argocd app sync my-app --resource argoproj.io:Rollout:my-namespace/my-rollout\n```\n```\n\n### Options\n```yaml\n```\n  -N, --app-namespace string                              Only sync an application in namespace\n      --apply-out-of-sync-only                            Sync only out-of-sync resources\n      --assumeYes                                         Assume yes as answer for all user queries or prompts\n      --async                                             Do not wait for application to sync before continuing\n      --dry-run                                           Preview apply without affecting cluster\n      --force                                             Use a force apply\n  -h, --help                                              help for sync\n      --ignore-normalizer-jq-execution-timeout duration   Set ignore normalizer JQ execution timeout (default 1s)\n      --info stringArray                                  A list of key-value pairs during sync process. These infos will be persisted in app.\n      --label stringArray                                 Sync only specific resources with a label. This option may be specified repeatedly.\n      --local string                                      Path to a local directory. When this flag is present no git queries will be made\n      --local-repo-root string                            Path to the repository root. Used together with --local allows setting the repository root (default \"/\")\n  -o, --output string                                     Output format. One of: json|yaml|wide|tree|tree=detailed (default \"wide\")\n      --preview-changes                                   Preview difference against the target and live state before syncing app and wait for user confirmation\n      --project stringArray                               Sync apps that belong to the specified projects. This option may be specified repeatedly.\n      --prune                                             Allow deleting unexpected resources\n      --replace                                           Use a kubectl create/replace instead apply\n      --resource stringArray                              Sync only specific resources as GROUP:KIND:NAME or !GROUP:KIND:NAME. Fields may be blank and '*' can be used. This option may be specified repeatedly\n      --retry-backoff-duration duration                   Retry backoff base duration. Input needs to be a duration (e.g. 2m, 1h) (default 5s)\n      --retry-backoff-factor int                          Factor multiplies the base duration after each failed retry (default 2)\n      --retry-backoff-max-duration duration               Max retry backoff duration. Input needs to be a duration (e.g. 2m, 1h) (default 3m0s)\n      --retry-limit int                                   Max number of allowed sync retries\n      --revision string                                   Sync to a specific revision. Preserves parameter overrides\n      --revisions stringArray                             Show manifests at specific revisions for source position in source-positions\n  -l, --selector string                                   Sync apps that match this label. Supports '=', '==', '!=', in, notin, exists & not exists. Matching apps must satisfy all of the specified label constraints.\n      --server-side                                       Use server-side apply while syncing the application\n      --source-names stringArray                          List of source names. Default is an empty array.\n      --source-positions int64Slice                       List of source positions. Default is empty array. Counting start at 1. (default [])\n      --strategy string                                   Sync strategy (one of: apply|hook)\n      --timeout uint                                      Time out after this many seconds\n```\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_sync", "title": "argocd app sync Command Reference", "description": "Sync an application to its target state", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:25:26", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_sync/", "title": "argocd app sync Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "scrapeId": "64012be1-c664-4fa9-9231-a9d8ccea9de0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_sync", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_sync/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app terminate-op Command Reference\"?\n\nAssistant: Terminate running operation of an application\n\nHere's a detailed explanation:\n\n\n## argocd app terminate-op\nTerminate running operation of an application\n\n```\nargocd app terminate-op APPNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_terminate-op", "title": "argocd app terminate-op Command Reference", "description": "Terminate running operation of an application", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:25:39", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd app terminate-op Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_terminate-op/", "scrapeId": "8b949239-547e-4271-bcdf-c955ada953f3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_terminate-op", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_terminate-op/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app terminate-op Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nargocd app terminate-op APPNAME [flags]\n```\n\n### Options\n```yaml\n  -h, --help   help for terminate-op\n\n  --argocd-context string           The name of the Argo-CD server context to use\n  --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n  --client-crt string               Client certificate file\n  --client-crt-key string           Client certificate key file\n  --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n  --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n  --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n  --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n  --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n  --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n  --insecure                        Skip server certificate and domain verification\n  --kube-context string             Directs the command to the given kube-context\n  --logformat string                Set the logging format. One of: text|json (default \"text\")\n  --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  --plaintext                       Disable TLS\n  --port-forward                    Connect to a random argocd-server port using port forwarding\n  --port-forward-namespace string   Namespace name which should be used for port forwarding\n  --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n  --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n  --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n  --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n  --server string                   Argo CD server address\n  --server-crt string               Server certificate file\n  --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_terminate-op", "title": "argocd app terminate-op Command Reference", "description": "Terminate running operation of an application", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:25:39", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd app terminate-op Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_terminate-op/", "scrapeId": "8b949239-547e-4271-bcdf-c955ada953f3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_terminate-op", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_terminate-op/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app unset Command Reference\"?\n\nAssistant: Unset application parameters\n\nHere's a detailed explanation:\n\n\n## argocd app unset\nUnset application parameters\n\n```\nargocd app unset APPNAME parameters [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_unset", "title": "argocd app unset Command Reference", "description": "Unset application parameters", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:25:55", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app unset Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_unset/", "language": "en", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "edf9af72-2677-4d05-bac4-7598a4843d1a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_unset", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_unset/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app unset Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\n  # Unset kustomize override kustomize image\n  argocd app unset my-app --kustomize-image=alpine\n\n  # Unset kustomize override suffix\n  argocd app unset my-app --namesuffix\n\n  # Unset kustomize override suffix for source at position 1 under spec.sources of app my-app. source-position starts at 1.\n  argocd app unset my-app --source-position 1 --namesuffix\n\n  # Unset kustomize override suffix for source named \"test\" under spec.sources of app my-app.\n  argocd app unset my-app --source-name test --namesuffix\n\n  # Unset parameter override\n  argocd app unset my-app -p COMPONENT=PARAM\n```\n\n```\n\n### Options\n```yaml\n```\n  -N, --app-namespace string            Unset application parameters in namespace\n  -h, --help                            help for unset\n      --ignore-missing-value-files      Unset the helm ignore-missing-value-files option (revert to false)\n      --kustomize-image stringArray     Kustomize images name (e.g. --kustomize-image node --kustomize-image mysql)\n      --kustomize-namespace             Kustomize namespace\n      --kustomize-replica stringArray   Kustomize replicas name (e.g. --kustomize-replica my-deployment --kustomize-replica my-statefulset)\n      --kustomize-version               Kustomize version\n      --nameprefix                      Kustomize nameprefix\n      --namesuffix                      Kustomize namesuffix\n  -p, --parameter stringArray           Unset a parameter override (e.g. -p guestbook=image)\n      --pass-credentials                Unset passCredentials\n      --plugin-env stringArray          Unset plugin env variables (e.g --plugin-env name)\n      --ref                             Unset ref on the source\n      --source-position int             Position of the source from the list of sources of the app. Counting starts at 1. (default -1)\n      --values stringArray              Unset one or more Helm values files\n      --values-literal                  Unset literal Helm values block\n```\n\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_unset", "title": "argocd app unset Command Reference", "description": "Unset application parameters", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:25:55", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app unset Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_unset/", "language": "en", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "edf9af72-2677-4d05-bac4-7598a4843d1a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_unset", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_unset/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd app wait Command Reference\"?\n\nAssistant: Wait for an application to reach a synced and healthy state\n\nHere's a detailed explanation:\n\n\n## argocd app wait\nWait for an application to reach a synced and healthy state\n\n```\nargocd app wait [APPNAME.. | -l selector] [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_wait", "title": "argocd app wait Command Reference", "description": "Wait for an application to reach a synced and healthy state", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:07", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app wait Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_wait/", "scrapeId": "93208b3d-b814-4738-bcf4-4a98e530eada", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_wait", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_wait/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd app wait Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\n  # Wait for an app\n  argocd app wait my-app\n\n  # Wait for multiple apps\n  argocd app wait my-app other-app\n\n  # Wait for apps by resource\n  # Resource should be formatted as GROUP:KIND:NAME. If no GROUP is specified then :KIND:NAME.\n  argocd app wait my-app --resource :Service:my-service\n  argocd app wait my-app --resource argoproj.io:Rollout:my-rollout\n  argocd app wait my-app --resource '!apps:Deployment:my-service'\n  argocd app wait my-app --resource apps:Deployment:my-service --resource :Service:my-service\n  argocd app wait my-app --resource '!*:Service:*'\n  # Specify namespace if the application has resources with the same name in different namespaces\n  argocd app wait my-app --resource argoproj.io:Rollout:my-namespace/my-rollout\n\n  # Wait for apps by label, in this example we waiting for apps that are children of another app (aka app-of-apps)\n  argocd app wait -l app.kubernetes.io/instance=my-app\n  argocd app wait -l app.kubernetes.io/instance!=my-app\n  argocd app wait -l app.kubernetes.io/instance\n  argocd app wait -l '!app.kubernetes.io/instance'\n  argocd app wait -l 'app.kubernetes.io/instance notin (my-app,other-app)'\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_wait", "title": "argocd app wait Command Reference", "description": "Wait for an application to reach a synced and healthy state", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:07", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app wait Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_wait/", "scrapeId": "93208b3d-b814-4738-bcf4-4a98e530eada", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_wait", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_wait/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd app wait Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `--resource` flag to specify particular resources to wait for, formatted as GROUP:KIND:NAME.\n• Utilize the `-l` flag to wait for applications by label, which can help in managing multiple applications effectively.\n• Specify the namespace using `-N` if there are resources with the same name in different namespaces.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_wait", "title": "argocd app wait Command Reference", "description": "Wait for an application to reach a synced and healthy state", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:07", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd app wait Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_app_wait/", "scrapeId": "93208b3d-b814-4738-bcf4-4a98e530eada", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_wait", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_wait/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd appset Command Reference\"?\n\nAssistant: Manage ApplicationSets\n\nHere's a detailed explanation:\n\n\n## argocd appset\nManage ApplicationSets\n\n```\nargocd appset [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset", "title": "argocd appset Command Reference", "description": "Manage ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:16", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "argocd appset Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "3e5eefea-1349-4882-a4b8-0e98090a8bce", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd appset Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Get an ApplicationSet.\n  argocd appset get APPSETNAME\n\n  # List all the ApplicationSets\n  argocd appset list\n\n  # Create an ApplicationSet from a YAML stored in a file or at given URL\n  argocd appset create <filename or URL> (<filename or URL>...)\n\n  # Delete an ApplicationSet\n  argocd appset delete APPSETNAME (APPSETNAME...)\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset", "title": "argocd appset Command Reference", "description": "Manage ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:16", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "argocd appset Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "3e5eefea-1349-4882-a4b8-0e98090a8bce", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd appset Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n• Ensure to specify the correct namespace using the -n or --namespace flag when necessary.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset", "title": "argocd appset Command Reference", "description": "Manage ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:16", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "argocd appset Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "3e5eefea-1349-4882-a4b8-0e98090a8bce", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd appset create Command Reference\"?\n\nAssistant: Create one or more ApplicationSets\n\nHere's a detailed explanation:\n\n\n## Examples\n```\n  # Create ApplicationSets\n  argocd appset create <filename or URL> (<filename or URL>...)\n\n  # Dry-run AppSet creation to see what applications would be managed\n  argocd appset create --dry-run <filename or URL> -o json | jq -r '.status.resources[].name'\n```\n\n## Options\n```\n      --dry-run         Allows to evaluate the ApplicationSet template on the server to get a preview of the applications that would be created\n  -h, --help            help for create\n  -o, --output string   Output format. One of: json|yaml|wide (default \"wide\")\n      --upsert          Allows to override ApplicationSet with the same name even if supplied ApplicationSet spec is different from existing spec\n```\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_create", "title": "argocd appset create Command Reference", "description": "Create one or more ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:26:32", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_create/", "readthedocs-version-slug": "stable", "title": "argocd appset create Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "c40ce7ba-26ca-46e7-98b3-1f1a2162f485", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_create", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd appset create Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Create ApplicationSets\n```yaml\nargocd appset create <filename or URL> (<filename or URL>...)\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_create", "title": "argocd appset create Command Reference", "description": "Create one or more ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:26:32", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_create/", "readthedocs-version-slug": "stable", "title": "argocd appset create Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "c40ce7ba-26ca-46e7-98b3-1f1a2162f485", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_create", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd appset create Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --dry-run option to preview the applications that would be created before actually creating them.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_create", "title": "argocd appset create Command Reference", "description": "Create one or more ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:26:32", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_create/", "readthedocs-version-slug": "stable", "title": "argocd appset create Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "c40ce7ba-26ca-46e7-98b3-1f1a2162f485", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_create", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd appset delete Command Reference\"?\n\nAssistant: Delete one or more ApplicationSets\n\nHere's a detailed explanation:\n\n\n## argocd appset delete\nDelete one or more ApplicationSets\n\n```\nargocd appset delete [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_delete", "title": "argocd appset delete Command Reference", "description": "Delete one or more ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:40", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_delete/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd appset delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "066f946b-3299-4e49-9988-e80c069d8fcf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd appset delete Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Delete an applicationset\n```yaml\nargocd appset delete APPSETNAME (APPSETNAME...)\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_delete", "title": "argocd appset delete Command Reference", "description": "Delete one or more ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:40", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_delete/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd appset delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "066f946b-3299-4e49-9988-e80c069d8fcf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd appset delete Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -y or --yes flag to turn off prompting for confirmation during cascaded deletion of Application resources.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_delete", "title": "argocd appset delete Command Reference", "description": "Delete one or more ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:40", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_delete/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd appset delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "066f946b-3299-4e49-9988-e80c069d8fcf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd appset generate Command Reference\"?\n\nAssistant: Generate apps of ApplicationSet rendered templates\n\nHere's a detailed explanation:\n\n\n## argocd appset generate\nGenerate apps of ApplicationSet rendered templates\n\n```\nargocd appset generate [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_generate", "title": "argocd appset generate Command Reference", "description": "Generate apps of ApplicationSet rendered templates", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:26:55", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_generate/", "title": "argocd appset generate Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "04fdd197-e272-40a2-90e9-99026ef11488", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_generate", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_generate/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd appset generate Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Generate apps of ApplicationSet rendered templates\n  argocd appset generate <filename or URL> (<filename or URL>...)\n\n```\n\n### Options\n```yaml\n  -h, --help            help for generate\n  -o, --output string   Output format. One of: json|yaml|wide (default \"wide\")\n\n```\n\n### Options inherited from parent commands\n```yaml\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_generate", "title": "argocd appset generate Command Reference", "description": "Generate apps of ApplicationSet rendered templates", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:26:55", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_generate/", "title": "argocd appset generate Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "04fdd197-e272-40a2-90e9-99026ef11488", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_generate", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_generate/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd appset get Command Reference\"?\n\nAssistant: Get ApplicationSet details\n\nHere's a detailed explanation:\n\n\n## argocd appset get\nGet ApplicationSet details\n\n```\nargocd appset get APPSETNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_get", "title": "argocd appset get Command Reference", "description": "Get ApplicationSet details", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:59", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd appset get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_get/", "scrapeId": "2aceeed0-3462-4260-b7e9-e8e42c3430da", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd appset get Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Get ApplicationSets\n```yaml\n```\n  # Get ApplicationSets\n  argocd appset get APPSETNAME\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_get", "title": "argocd appset get Command Reference", "description": "Get ApplicationSet details", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:59", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd appset get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_get/", "scrapeId": "2aceeed0-3462-4260-b7e9-e8e42c3430da", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd appset get Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format as json, yaml, or wide.\n• Use --show-params to display ApplicationSet parameters and overrides.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_get", "title": "argocd appset get Command Reference", "description": "Get ApplicationSet details", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:26:59", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd appset get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_get/", "scrapeId": "2aceeed0-3462-4260-b7e9-e8e42c3430da", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd appset list Command Reference\"?\n\nAssistant: List ApplicationSets\n\nHere's a detailed explanation:\n\n\n## argocd appset list\nList ApplicationSets\n\n```\nargocd appset list [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_list", "title": "argocd appset list Command Reference", "description": "List ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:05", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_list/", "readthedocs-http-status": "200", "title": "argocd appset list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "26fe0837-d09b-4bf8-ae3a-681df4885478", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd appset list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # List all ApplicationSets\n  argocd appset list\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_list", "title": "argocd appset list Command Reference", "description": "List ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:05", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_list/", "readthedocs-http-status": "200", "title": "argocd appset list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "26fe0837-d09b-4bf8-ae3a-681df4885478", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd appset list Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -N or --appset-namespace flag to limit the listing to a specific namespace.\n• Utilize the -o or --output flag to specify the output format, such as json or yaml for easier parsing.\n• Consider using the --project flag to filter ApplicationSets by project name.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_list", "title": "argocd appset list Command Reference", "description": "List ApplicationSets", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:05", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_list/", "readthedocs-http-status": "200", "title": "argocd appset list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "26fe0837-d09b-4bf8-ae3a-681df4885478", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Argocd appset update\"?\n\nAssistant: Updates the given ApplicationSet(s)\n\nHere's a detailed explanation:\n\n\n## Examples\n```\n    # Update ApplicationSet\n    argocd appset update <filename or URL> (<filename or URL>...)\n```\n\n## Options\n```\n  -h, --help   help for update\n```\n\n## Options inherited from parent commands\n```\n      --auth-token string               Authentication token\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_update", "title": "Argocd appset update", "description": "Updates the given ApplicationSet(s)", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 03:27:14", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_update/", "title": "Argocd appset update - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "cd97c48b-07a4-43cd-9883-6cd737745bb9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_update", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Argocd appset update\"?\n\nAssistant: Here are some code examples:\n\n### Update ApplicationSet\n```yaml\nargocd appset update <filename or URL> (<filename or URL>...)\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_update", "title": "Argocd appset update", "description": "Updates the given ApplicationSet(s)", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 03:27:14", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_appset_update/", "title": "Argocd appset update - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "cd97c48b-07a4-43cd-9883-6cd737745bb9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_update", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_appset_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd cert Command Reference\"?\n\nAssistant: Manage repository certificates and SSH known hosts entries\n\nHere's a detailed explanation:\n\n\n## argocd cert\nManage repository certificates and SSH known hosts entries\n\n```\nargocd cert [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert", "title": "argocd cert Command Reference", "description": "Manage repository certificates and SSH known hosts entries", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:24", "type": "overview", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert/", "readthedocs-project-slug": "argo-cd", "title": "argocd cert Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "fbd14905-21a7-43cf-9abb-bcf190001244", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd cert Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Add a TLS certificate for cd.example.com to ArgoCD cert store from a file\n```yaml\nargocd cert add-tls --from ~/mycert.pem cd.example.com\n```\n\n### Add a TLS certificate for cd.example.com to ArgoCD via stdin\n```yaml\ncat ~/mycert.pem | argocd cert add-tls cd.example.com\n```\n\n### Add SSH known host entries for cd.example.com to ArgoCD by scanning host\n```yaml\nssh-keyscan cd.example.com | argocd cert add-ssh --batch\n```\n\n### List all known TLS certificates\n```yaml\nargocd cert list --cert-type https\n```\n\n### Remove all TLS certificates for cd.example.com\n```yaml\nargocd cert rm --cert-type https cd.example.com\n```\n\n### Remove all certificates and SSH known host entries for cd.example.com\n```yaml\nargocd cert rm cd.example.com\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert", "title": "argocd cert Command Reference", "description": "Manage repository certificates and SSH known hosts entries", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:24", "type": "code_examples", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert/", "readthedocs-project-slug": "argo-cd", "title": "argocd cert Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "fbd14905-21a7-43cf-9abb-bcf190001244", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd cert Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `--help` flag to get more information about specific commands and options.\n• Ensure to manage your certificates securely and avoid exposing sensitive information.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert", "title": "argocd cert Command Reference", "description": "Manage repository certificates and SSH known hosts entries", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:24", "type": "best_practices", "page_metadata": {"language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert/", "readthedocs-project-slug": "argo-cd", "title": "argocd cert Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "fbd14905-21a7-43cf-9abb-bcf190001244", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd cert add-ssh Command Reference\"?\n\nAssistant: Add SSH known host entries for repository servers\n\nHere's a detailed explanation:\n\n\n## argocd cert add-ssh\nAdd SSH known host entries for repository servers\n\n```\nargocd cert add-ssh --batch [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-ssh", "title": "argocd cert add-ssh Command Reference", "description": "Add SSH known host entries for repository servers", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:28", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd cert add-ssh Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert_add-ssh/", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "31e0bf13-0239-4b03-9d3c-4ca5c39cbd62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-ssh", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-ssh/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd cert add-ssh Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nargocd cert add-ssh --batch [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-ssh", "title": "argocd cert add-ssh Command Reference", "description": "Add SSH known host entries for repository servers", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:28", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd cert add-ssh Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert_add-ssh/", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "31e0bf13-0239-4b03-9d3c-4ca5c39cbd62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-ssh", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-ssh/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd cert add-ssh Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --batch flag for batch processing of SSH known hosts data.\n• Specify the --from option to read SSH known hosts data from a file if not using stdin.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-ssh", "title": "argocd cert add-ssh Command Reference", "description": "Add SSH known host entries for repository servers", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:28", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd cert add-ssh Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert_add-ssh/", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "31e0bf13-0239-4b03-9d3c-4ca5c39cbd62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-ssh", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-ssh/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd cert add-tls Command Reference\"?\n\nAssistant: Add TLS certificate data for connecting to repository server SERVERNAME\n\nHere's a detailed explanation:\n\n\n## argocd cert add-tls\nAdd TLS certificate data for connecting to repository server SERVERNAME\n\n```\nargocd cert add-tls SERVERNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-tls", "title": "argocd cert add-tls Command Reference", "description": "Add TLS certificate data for connecting to repository server SERVERNAME", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:32", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert_add-tls/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd cert add-tls Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "e5f7413a-1603-4140-bc44-4bf1f82773e6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-tls", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-tls/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd cert add-tls Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd cert add-tls SERVERNAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-tls", "title": "argocd cert add-tls Command Reference", "description": "Add TLS certificate data for connecting to repository server SERVERNAME", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:32", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert_add-tls/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd cert add-tls Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "e5f7413a-1603-4140-bc44-4bf1f82773e6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-tls", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-tls/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd cert add-tls Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --from option to read TLS certificate data from a file instead of stdin.\n• Utilize the --upsert flag to replace an existing TLS certificate if it differs from the input.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-tls", "title": "argocd cert add-tls Command Reference", "description": "Add TLS certificate data for connecting to repository server SERVERNAME", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:32", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert_add-tls/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd cert add-tls Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "e5f7413a-1603-4140-bc44-4bf1f82773e6", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-tls", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_add-tls/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd cert list Command Reference\"?\n\nAssistant: List configured certificates\n\nHere's a detailed explanation:\n\n\n## argocd cert list\nList configured certificates\n\n```\nargocd cert list [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_list", "title": "argocd cert list Command Reference", "description": "List configured certificates", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:27:47", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert_list/", "language": "en", "readthedocs-http-status": "200", "title": "argocd cert list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "dffd082a-a1d4-4136-9753-7caf0730d5c9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd cert list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```\n      --cert-type string          Only list certificates of given type, valid: 'ssh','https'\n  -h, --help                      help for list\n      --hostname-pattern string   Only list certificates for hosts matching given glob-pattern\n  -o, --output string             Output format. One of: json|yaml|wide (default \"wide\")\n      --sort string               Set display sort order for output format wide. One of: hostname|type\n```\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_list", "title": "argocd cert list Command Reference", "description": "List configured certificates", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:27:47", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert_list/", "language": "en", "readthedocs-http-status": "200", "title": "argocd cert list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "dffd082a-a1d4-4136-9753-7caf0730d5c9", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd cert rm Command Reference\"?\n\nAssistant: Remove certificate of TYPE for REPOSERVER\n\nHere's a detailed explanation:\n\n\n## argocd cert rm\nRemove certificate of TYPE for REPOSERVER\n\n```\nargocd cert rm REPOSERVER [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_rm", "title": "argocd cert rm Command Reference", "description": "Remove certificate of TYPE for REPOSERVER", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:52", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "argocd cert rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert_rm/", "scrapeId": "d9a50938-6a69-4271-afde-2ac4eef85b54", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd cert rm Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nargocd cert rm REPOSERVER [flags]\n```\n\n### Options\n```yaml\n--cert-sub-type string   Only remove certs of given sub-type (only for ssh)\n--cert-type string       Only remove certs of given type (ssh, https)\n-h, --help                   help for rm\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_rm", "title": "argocd cert rm Command Reference", "description": "Remove certificate of TYPE for REPOSERVER", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:52", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "argocd cert rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert_rm/", "scrapeId": "d9a50938-6a69-4271-afde-2ac4eef85b54", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd cert rm Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --cert-type option to specify the type of certificate you want to remove (ssh or https).\n• Utilize the --cert-sub-type option for more granular control when dealing with SSH certificates.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_rm", "title": "argocd cert rm Command Reference", "description": "Remove certificate of TYPE for REPOSERVER", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:27:52", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "argocd cert rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cert_rm/", "scrapeId": "d9a50938-6a69-4271-afde-2ac4eef85b54", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cert_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"ArgoCD Command Reference\"?\n\nAssistant: Argo CD command reference can be found here\n\nHere's a detailed explanation:\n\n\n## ArgoCD Command Reference\nArgo CD command reference can be found [here](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd/).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cli", "title": "ArgoCD Command Reference", "description": "Argo CD command reference can be found here", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:27:55", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "ArgoCD Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cli/", "readthedocs-version-slug": "stable", "scrapeId": "11de76e6-3c0f-43bb-86b0-25706db18f69", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cli", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cli/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd cluster Command Reference\"?\n\nAssistant: Manage cluster credentials\n\nHere's a detailed explanation:\n\n\n## argocd cluster\nManage cluster credentials\n\n```\nargocd cluster [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster", "title": "argocd cluster Command Reference", "description": "Manage cluster credentials", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:28:02", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster/", "title": "argocd cluster Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "29a88943-0896-4813-891c-d250a3896072", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd cluster Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # List all known clusters in JSON format:\n  argocd cluster list -o json\n\n  # Add a target cluster configuration to ArgoCD. The context must exist in your kubectl config:\n  argocd cluster add example-cluster\n\n  # Get specific details about a cluster in plain text (wide) format:\n  argocd cluster get example-cluster -o wide\n\n  # Remove a target cluster context from ArgoCD\n  argocd cluster rm example-cluster\n\n  # Set a target cluster context from ArgoCD\n  argocd cluster set CLUSTER_NAME --name new-cluster-name --namespace '*'\n  argocd cluster set CLUSTER_NAME --name new-cluster-name --namespace namespace-one --namespace namespace-two\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster", "title": "argocd cluster Command Reference", "description": "Manage cluster credentials", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:28:02", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster/", "title": "argocd cluster Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "29a88943-0896-4813-891c-d250a3896072", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd cluster add Command Reference\"?\n\nAssistant: Reference documentation for the argocd cluster add command, including options and usage.\n\nHere's a detailed explanation:\n\n\n## argocd cluster add\nargocd cluster add CONTEXT\n\n```\nargocd cluster add CONTEXT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_add", "title": "argocd cluster add Command Reference", "description": "Reference documentation for the argocd cluster add command, including options and usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:28:07", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd cluster add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_add/", "scrapeId": "c8682821-0bbc-476e-838d-93b9fa2ce42c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd cluster add Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd cluster add CONTEXT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_add", "title": "argocd cluster add Command Reference", "description": "Reference documentation for the argocd cluster add command, including options and usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:28:07", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd cluster add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_add/", "scrapeId": "c8682821-0bbc-476e-838d-93b9fa2ce42c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd cluster add Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --yes flag to skip explicit confirmation when adding a cluster.\n• Consider using the --in-cluster option if Argo CD is running inside the cluster.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_add", "title": "argocd cluster add Command Reference", "description": "Reference documentation for the argocd cluster add command, including options and usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:28:07", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd cluster add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_add/", "scrapeId": "c8682821-0bbc-476e-838d-93b9fa2ce42c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd cluster get Command Reference\"?\n\nAssistant: Get cluster information\n\nHere's a detailed explanation:\n\n\n## argocd cluster get\nGet cluster information\n\n```\nargocd cluster get SERVER/NAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_get", "title": "argocd cluster get Command Reference", "description": "Get cluster information", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:28:20", "type": "overview", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd cluster get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_get/", "scrapeId": "84fab54c-3432-47f0-9dd2-388d34ba8d54", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd cluster get Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\nargocd cluster get https://12.34.567.89\nargocd cluster get in-cluster\n```\n```\n\n### Options\n```yaml\n```\n  -h, --help            help for get\n  -o, --output string   Output format. One of: json|yaml|wide|server (default \"yaml\")\n```\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_get", "title": "argocd cluster get Command Reference", "description": "Get cluster information", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:28:20", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd cluster get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_get/", "scrapeId": "84fab54c-3432-47f0-9dd2-388d34ba8d54", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Understanding JSON Structure\"?\n\nAssistant: This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.\n\nHere's a detailed explanation:\n\n\n## Introduction to JSON\nJSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate.\n\n## JSON Syntax\nJSON syntax is derived from JavaScript object notation. It consists of key/value pairs, where keys are strings and values can be strings, numbers, objects, arrays, booleans, or null.\n\n## Data Types in JSON\nThe data types supported in JSON include:\n1. String\n2. Number\n3. Object\n4. Array\n5. Boolean\n6. Null\n\n## Best Practices for JSON\nWhen working with JSON, consider the following best practices:\n- Use consistent naming conventions for keys.\n- Keep the structure simple and avoid deeply nested objects.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_list", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 03:28:55", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd cluster list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "scrapeId": "090b3268-6e53-43d6-96cc-a36bb0d73aa5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Understanding JSON Structure\"?\n\nAssistant: Here are some code examples:\n\n### Basic JSON Example\n```yaml\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"isStudent\": false,\n  \"courses\": [\"Math\", \"Science\"]\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_list", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 03:28:55", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd cluster list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "scrapeId": "090b3268-6e53-43d6-96cc-a36bb0d73aa5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Understanding JSON Structure\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use double quotes for keys and string values.\n• Avoid trailing commas in objects and arrays.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_list", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 03:28:55", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd cluster list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "scrapeId": "090b3268-6e53-43d6-96cc-a36bb0d73aa5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd cluster rm Command Reference\"?\n\nAssistant: Remove cluster credentials\n\nHere's a detailed explanation:\n\n\n## argocd cluster rm\nRemove cluster credentials\n\n```\nargocd cluster rm SERVER/NAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rm", "title": "argocd cluster rm Command Reference", "description": "Remove cluster credentials", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:29:09", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_rm/", "language": "en", "readthedocs-project-slug": "argo-cd", "title": "argocd cluster rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "5d40d2d4-937c-4f26-b7bd-bd3fc0b39f75", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd cluster rm Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\nargocd cluster rm https://12.34.567.89\nargocd cluster rm cluster-name\n```\n```\n\n### Options\n```yaml\n```\n  -h, --help   help for rm\n  -y, --yes    Turn off prompting to confirm remove of cluster resources\n```\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rm", "title": "argocd cluster rm Command Reference", "description": "Remove cluster credentials", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:29:09", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_rm/", "language": "en", "readthedocs-project-slug": "argo-cd", "title": "argocd cluster rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "5d40d2d4-937c-4f26-b7bd-bd3fc0b39f75", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd cluster rotate-auth Command Reference\"?\n\nAssistant: Reference documentation for the argocd cluster rotate-auth command, including usage, options, and examples.\n\nHere's a detailed explanation:\n\n\n## argocd cluster rotate-auth\nargocd cluster rotate-auth SERVER/NAME\n\n```\nargocd cluster rotate-auth SERVER/NAME [flags]\n```\n\n\n## Examples\n```\nargocd cluster rotate-auth https://12.34.567.89\nargocd cluster rotate-auth cluster-name\n```\n\n\n## Options\n```\n  -h, --help   help for rotate-auth\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rotate-auth", "title": "argocd cluster rotate-auth Command Reference", "description": "Reference documentation for the argocd cluster rotate-auth command, including usage, options, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 03:29:26", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_rotate-auth/", "title": "argocd cluster rotate-auth Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "cc6998f1-dd57-4a60-8c27-0bf7d825383c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rotate-auth", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rotate-auth/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd cluster rotate-auth Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd cluster rotate-auth SERVER/NAME [flags]\n```\n\n### Example Commands\n```yaml\nargocd cluster rotate-auth https://12.34.567.89\nargocd cluster rotate-auth cluster-name\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rotate-auth", "title": "argocd cluster rotate-auth Command Reference", "description": "Reference documentation for the argocd cluster rotate-auth command, including usage, options, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 03:29:26", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_rotate-auth/", "title": "argocd cluster rotate-auth Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "cc6998f1-dd57-4a60-8c27-0bf7d825383c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rotate-auth", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rotate-auth/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd cluster rotate-auth Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the rotate-auth command and its options.\n• Ensure that the Argo CD server address is correctly specified when using the command.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rotate-auth", "title": "argocd cluster rotate-auth Command Reference", "description": "Reference documentation for the argocd cluster rotate-auth command, including usage, options, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 03:29:26", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_rotate-auth/", "title": "argocd cluster rotate-auth Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "scrapeId": "cc6998f1-dd57-4a60-8c27-0bf7d825383c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rotate-auth", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_rotate-auth/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd cluster set Command Reference\"?\n\nAssistant: Set cluster information\n\nHere's a detailed explanation:\n\n\n## argocd cluster set\nSet cluster information\n\n```\nargocd cluster set NAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_set", "title": "argocd cluster set Command Reference", "description": "Set cluster information", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:29:41", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_set/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd cluster set Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "4701eaf9-72ce-4bec-8464-6824459e4a6f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_set", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_set/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd cluster set Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Set cluster information\n  argocd cluster set CLUSTER_NAME --name new-cluster-name --namespace '*'\n  argocd cluster set CLUSTER_NAME --name new-cluster-name --namespace namespace-one --namespace namespace-two\n\n```\n\n### Options\n```yaml\n      --annotation stringArray   Set metadata annotations (e.g. --annotation key=value)\n  -h, --help                     help for set\n      --label stringArray        Set metadata labels (e.g. --label key=value)\n      --name string              Overwrite the cluster name\n      --namespace stringArray    List of namespaces which are allowed to manage. Specify '*' to manage all namespaces\n\n```\n\n### Options inherited from parent commands\n```yaml\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_set", "title": "argocd cluster set Command Reference", "description": "Set cluster information", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:29:41", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_cluster_set/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd cluster set Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "4701eaf9-72ce-4bec-8464-6824459e4a6f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_set", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_cluster_set/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd completion Command Reference\"?\n\nAssistant: output shell completion code for the specified shell (bash, zsh or fish)\n\nHere's a detailed explanation:\n\n\n## argocd completion\nWrite bash, zsh or fish shell completion code to standard output.\n\nFor bash, ensure you have bash completions installed and enabled.\nTo access completions in your current shell, run\n$ source <(argocd completion bash)\nAlternatively, write it to a file and source in .bash_profile\n\nFor zsh, add the following to your ~/.zshrc file:\nsource <(argocd completion zsh)\ncompdef _argocd argocd\n\nOptionally, also add the following, in case you are getting errors involving compdef & compinit such as command not found: compdef:\nautoload -Uz compinit\ncompinit\n\n```\nargocd completion SHELL [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_completion", "title": "argocd completion Command Reference", "description": "output shell completion code for the specified shell (bash, zsh or fish)", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:29:51", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd completion Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_completion/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "fefd48e2-f76f-4fce-acf6-bcd4f23930a0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_completion", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_completion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd completion Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Bash Completion\n```yaml\n$ source <(argocd completion bash)\n```\n\n### Zsh Completion\n```yaml\n$ argocd completion zsh > _argocd\n$ source _argocd\n```\n\n### Fish Completion\n```yaml\n$ argocd completion fish > ~/.config/fish/completions/argocd.fish\n$ source ~/.config/fish/completions/argocd.fish\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_completion", "title": "argocd completion Command Reference", "description": "output shell completion code for the specified shell (bash, zsh or fish)", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:29:51", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd completion Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_completion/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "fefd48e2-f76f-4fce-acf6-bcd4f23930a0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_completion", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_completion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd completion Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have bash completions installed and enabled for bash.\n• For zsh, add the completion code to your ~/.zshrc file and use compdef to define the command.\n• If you encounter errors with compdef & compinit, ensure to autoload compinit.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_completion", "title": "argocd completion Command Reference", "description": "output shell completion code for the specified shell (bash, zsh or fish)", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:29:51", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd completion Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_completion/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "fefd48e2-f76f-4fce-acf6-bcd4f23930a0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_completion", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_completion/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd configure Command Reference\"?\n\nAssistant: Manage local configuration\n\nHere's a detailed explanation:\n\n\n## argocd configure\nManage local configuration\n\n```\nargocd configure [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_configure", "title": "argocd configure Command Reference", "description": "Manage local configuration", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:29:55", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_configure/", "readthedocs-project-slug": "argo-cd", "title": "argocd configure Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "370aab6f-6195-46fd-9750-dd73bf81d6bf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_configure", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_configure/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd configure Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n# Enable optional interactive prompts\nargocd configure --prompts-enabled\nargocd configure --prompts-enabled=true\n\n# Disable optional interactive prompts\nargocd configure --prompts-enabled=false\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_configure", "title": "argocd configure Command Reference", "description": "Manage local configuration", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:29:55", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_configure/", "readthedocs-project-slug": "argo-cd", "title": "argocd configure Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "370aab6f-6195-46fd-9750-dd73bf81d6bf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_configure", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_configure/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd context Command Reference\"?\n\nAssistant: Switch between contexts\n\nHere's a detailed explanation:\n\n\n## argocd context\nSwitch between contexts\n\n```\nargocd context [CONTEXT] [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_context", "title": "argocd context Command Reference", "description": "Switch between contexts", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:29:59", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd context Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_context/", "readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "70145364-e569-4d08-9db2-796d982b5459", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_context", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_context/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd context Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n# List Argo CD Contexts\nargocd context\n\n# Switch Argo CD context\nargocd context cd.argoproj.io\n\n# Delete Argo CD context\nargocd context cd.argoproj.io --delete\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_context", "title": "argocd context Command Reference", "description": "Switch between contexts", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:29:59", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd context Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_context/", "readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "70145364-e569-4d08-9db2-796d982b5459", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_context", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_context/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd context Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --delete flag to remove a context instead of switching to it.\n• Utilize the --help option to get more information about the context command.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_context", "title": "argocd context Command Reference", "description": "Switch between contexts", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:29:59", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd context Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_context/", "readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "70145364-e569-4d08-9db2-796d982b5459", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_context", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_context/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd gpg Command Reference\"?\n\nAssistant: Manage GPG keys used for signature verification\n\nHere's a detailed explanation:\n\n\n## argocd gpg\nManage GPG keys used for signature verification\n\n```\nargocd gpg [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg", "title": "argocd gpg Command Reference", "description": "Manage GPG keys used for signature verification", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:30:16", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd gpg Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "142a0587-f7dd-41a3-9216-2c97538627be", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd gpg Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```\n      --as string                      Username to impersonate for the operation\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n  -h, --help                           help for gpg\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to a kube config. Only required if out-of-cluster\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --password string                Password for basic authentication to the API server\n      --proxy-url string               If provided, this URL will be used to connect via proxy\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n      --username string                Username for basic authentication to the API server\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg", "title": "argocd gpg Command Reference", "description": "Manage GPG keys used for signature verification", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:30:16", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd gpg Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "142a0587-f7dd-41a3-9216-2c97538627be", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd gpg Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --insecure-skip-tls-verify option with caution as it makes your HTTPS connections insecure.\n• Always specify a request timeout to avoid hanging requests.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg", "title": "argocd gpg Command Reference", "description": "Manage GPG keys used for signature verification", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:30:16", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd gpg Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "142a0587-f7dd-41a3-9216-2c97538627be", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd gpg add Command Reference\"?\n\nAssistant: Adds a GPG public key to the server's keyring\n\nHere's a detailed explanation:\n\n\n## argocd gpg add\nAdds a GPG public key to the server's keyring\n\n```\nargocd gpg add [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_add", "title": "argocd gpg add Command Reference", "description": "Adds a GPG public key to the server's keyring", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:30:20", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg_add/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "title": "argocd gpg add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "defdcb40-172f-4487-84f7-eaaf4f37ae2a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd gpg add Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Add a GPG public key from a file\n```yaml\n# Add a GPG public key to the server's keyring from a file.\nargocd gpg add --from /path/to/keyfile\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_add", "title": "argocd gpg add Command Reference", "description": "Adds a GPG public key to the server's keyring", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:30:20", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg_add/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "title": "argocd gpg add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "defdcb40-172f-4487-84f7-eaaf4f37ae2a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd gpg add Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --from option to specify the path to the GPG public key file.\n• Ensure that the Argo CD server context is correctly set when using the command.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_add", "title": "argocd gpg add Command Reference", "description": "Adds a GPG public key to the server's keyring", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:30:20", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg_add/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "title": "argocd gpg add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "defdcb40-172f-4487-84f7-eaaf4f37ae2a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd gpg get Command Reference\"?\n\nAssistant: Get the GPG public key with ID from the server\n\nHere's a detailed explanation:\n\n\n## argocd gpg get\nGet the GPG public key with ID from the server\n\n```\nargocd gpg get KEYID [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_get", "title": "argocd gpg get Command Reference", "description": "Get the GPG public key with ID from the server", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:30:35", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd gpg get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg_get/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "601f46cd-aff6-447d-b2d4-f24d51a512de", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd gpg get Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\n  # Get a GPG public key with the specified KEYID in wide format (default).\n  argocd gpg get KEYID\n\n  # Get a GPG public key with the specified KEYID in JSON format.\n  argocd gpg get KEYID -o json\n\n  # Get a GPG public key with the specified KEYID in YAML format.\n  argocd gpg get KEYID -o yaml\n```\n\n```\n\n### Options\n```yaml\n```\n  -h, --help            help for get\n  -o, --output string   Output format. One of: json|yaml|wide (default \"wide\")\n```\n\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_get", "title": "argocd gpg get Command Reference", "description": "Get the GPG public key with ID from the server", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:30:35", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd gpg get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg_get/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "601f46cd-aff6-447d-b2d4-f24d51a512de", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd gpg get Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format as json or yaml for easier parsing.\n• Ensure you have the correct KEYID when using the command to avoid errors.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_get", "title": "argocd gpg get Command Reference", "description": "Get the GPG public key with ID from the server", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:30:35", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd gpg get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg_get/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "601f46cd-aff6-447d-b2d4-f24d51a512de", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd gpg list Command Reference\"?\n\nAssistant: List configured GPG public keys\n\nHere's a detailed explanation:\n\n\n## argocd gpg list\nList configured GPG public keys\n\n```\nargocd gpg list [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_list", "title": "argocd gpg list Command Reference", "description": "List configured GPG public keys", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:30:51", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd gpg list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg_list/", "scrapeId": "e8c5f00b-f4de-4f28-b136-f9ac56578098", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd gpg list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\n  # List all configured GPG public keys in wide format (default).\n  argocd gpg list\n\n  # List all configured GPG public keys in JSON format.\n  argocd gpg list -o json\n\n  # List all configured GPG public keys in YAML format.\n  argocd gpg list -o yaml\n```\n\n```\n\n### Options\n```yaml\n```\n  -h, --help            help for list\n  -o, --output string   Output format. One of: json|yaml|wide (default \"wide\")\n```\n\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_list", "title": "argocd gpg list Command Reference", "description": "List configured GPG public keys", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:30:51", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd gpg list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg_list/", "scrapeId": "e8c5f00b-f4de-4f28-b136-f9ac56578098", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd gpg rm Command Reference\"?\n\nAssistant: Removes a GPG public key from the server's keyring\n\nHere's a detailed explanation:\n\n\n## argocd gpg rm\nRemoves a GPG public key from the server's keyring\n\n```\nargocd gpg rm KEYID [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_rm", "title": "argocd gpg rm Command Reference", "description": "Removes a GPG public key from the server's keyring", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:31:04", "type": "overview", "page_metadata": {"title": "argocd gpg rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg_rm/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "scrapeId": "557bb5f3-5b32-4d91-962e-d0061bfdd7ff", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd gpg rm Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nargocd gpg rm KEYID [flags]\n```\n\n### Options\n```yaml\n  -h, --help   help for rm\n\n```\n\n### Options inherited from parent commands\n```yaml\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_rm", "title": "argocd gpg rm Command Reference", "description": "Removes a GPG public key from the server's keyring", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:31:04", "type": "code_examples", "page_metadata": {"title": "argocd gpg rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_gpg_rm/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "scrapeId": "557bb5f3-5b32-4d91-962e-d0061bfdd7ff", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_gpg_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd login Command Reference\"?\n\nAssistant: Log in to Argo CD\n\nHere's a detailed explanation:\n\n\n## argocd login\nLog in to Argo CD\n\n## Synopsis\nLog in to Argo CD\n\n```\nargocd login SERVER [flags]\n```\n\n\n## Examples\n```\n# Login to Argo CD using a username and password\nargocd login cd.argoproj.io\n\n# Login to Argo CD using SSO\nargocd login cd.argoproj.io --sso\n\n# Configure direct access using Kubernetes API server\nargocd login cd.argoproj.io --core\n```\n\n\n## Options\n```\n  -h, --help                 help for login\n      --name string          Name to use for the context\n      --password string      The password of an account to authenticate\n      --skip-test-tls        Skip testing whether the server is configured with TLS (this can help when the command hangs for no apparent reason)\n      --sso                  Perform SSO login\n      --sso-launch-browser   Automatically launch the system default browser when performing SSO login (default true)\n      --sso-port int         Port to run local OAuth2 login application (default 8085)\n      --username string      The username of an account to authenticate\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_login", "title": "argocd login Command Reference", "description": "Log in to Argo CD", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 03:31:24", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "title": "argocd login Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_login/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "edc4af02-6088-4f4e-83ce-375473766f07", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_login", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_login/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd login Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Login Examples\n```yaml\n```\n# Login to Argo CD using a username and password\nargocd login cd.argoproj.io\n\n# Login to Argo CD using SSO\nargocd login cd.argoproj.io --sso\n\n# Configure direct access using Kubernetes API server\nargocd login cd.argoproj.io --core\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_login", "title": "argocd login Command Reference", "description": "Log in to Argo CD", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 03:31:24", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "title": "argocd login Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_login/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "edc4af02-6088-4f4e-83ce-375473766f07", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_login", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_login/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd logout Command Reference\"?\n\nAssistant: Log out from Argo CD\n\nHere's a detailed explanation:\n\n\n## argocd logout\nLog out from Argo CD\n\n## Synopsis\nLog out from Argo CD\n\n```\nargocd logout CONTEXT [flags]\n```\n\n\n## Examples\n```\n# To log out of argocd\n$ argocd logout\n# This can be helpful for security reasons or when you want to switch between different Argo CD contexts or accounts.\n```\n\n\n## Options\n```\n  -h, --help   help for logout\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_logout", "title": "argocd logout Command Reference", "description": "Log out from Argo CD", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 03:31:39", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "argocd logout Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_logout/", "readthedocs-http-status": "200", "scrapeId": "749a2306-a5b6-4981-95eb-479894dc6d4b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_logout", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_logout/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd logout Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Logout Command Example\n```yaml\n# To log out of argocd\n$ argocd logout\n# This can be helpful for security reasons or when you want to switch between different Argo CD contexts or accounts.\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_logout", "title": "argocd logout Command Reference", "description": "Log out from Argo CD", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 03:31:39", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "argocd logout Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_logout/", "readthedocs-http-status": "200", "scrapeId": "749a2306-a5b6-4981-95eb-479894dc6d4b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_logout", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_logout/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd logout Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• This command can be helpful for security reasons or when you want to switch between different Argo CD contexts or accounts.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_logout", "title": "argocd logout Command Reference", "description": "Log out from Argo CD", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 03:31:39", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "argocd logout Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_logout/", "readthedocs-http-status": "200", "scrapeId": "749a2306-a5b6-4981-95eb-479894dc6d4b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_logout", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_logout/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj Command Reference\"?\n\nAssistant: Manage projects\n\nHere's a detailed explanation:\n\n\n## argocd proj\nManage projects\n\n```\nargocd proj [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj", "title": "argocd proj Command Reference", "description": "Manage projects", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:31:43", "type": "overview", "page_metadata": {"title": "argocd proj Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "254ceaef-6281-43f9-80e4-baf49afa1d70", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # List all available projects\n  argocd proj list\n\n  # Create a new project with name PROJECT\n  argocd proj create PROJECT\n\n  # Delete the project with name PROJECT\n  argocd proj delete PROJECT\n\n  # Edit the information on project with name PROJECT\n  argocd proj edit PROJECT\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj", "title": "argocd proj Command Reference", "description": "Manage projects", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:31:43", "type": "code_examples", "page_metadata": {"title": "argocd proj Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "254ceaef-6281-43f9-80e4-baf49afa1d70", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `--help` flag to get more information about specific commands and options.\n• Ensure to specify the correct namespace using the `-n` flag when working with multiple namespaces.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj", "title": "argocd proj Command Reference", "description": "Manage projects", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:31:43", "type": "best_practices", "page_metadata": {"title": "argocd proj Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "254ceaef-6281-43f9-80e4-baf49afa1d70", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj add-destination-service-account Command Reference\"?\n\nAssistant: Add project destination's default service account\n\nHere's a detailed explanation:\n\n\n## argocd proj add-destination-service-account\nAdd project destination's default service account\n\n```\nargocd proj add-destination-service-account PROJECT SERVER NAMESPACE SERVICE_ACCOUNT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination-service-account", "title": "argocd proj add-destination-service-account Command Reference", "description": "Add project destination's default service account", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:31:53", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd proj add-destination-service-account Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-destination-service-account/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "3e7e5f49-8dfb-40d7-a964-4897ff00f657", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination-service-account", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination-service-account/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj add-destination-service-account Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Add project destination service account\n```yaml\nargocd proj add-destination-service-account PROJECT SERVER NAMESPACE SERVICE_ACCOUNT\n```\n\n### Add project destination service account from a different namespace\n```yaml\nargocd proj add-destination PROJECT SERVER NAMESPACE SERVICE_ACCOUNT --service-account-namespace <service_account_namespace>\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination-service-account", "title": "argocd proj add-destination-service-account Command Reference", "description": "Add project destination's default service account", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:31:53", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd proj add-destination-service-account Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-destination-service-account/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "3e7e5f49-8dfb-40d7-a964-4897ff00f657", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination-service-account", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination-service-account/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj add-destination-service-account Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --service-account-namespace flag to specify the namespace where the service account is present.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination-service-account", "title": "argocd proj add-destination-service-account Command Reference", "description": "Add project destination's default service account", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:31:53", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd proj add-destination-service-account Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-destination-service-account/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "3e7e5f49-8dfb-40d7-a964-4897ff00f657", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination-service-account", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination-service-account/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj add-destination Command Reference\"?\n\nAssistant: Add project destination\n\nHere's a detailed explanation:\n\n\n## argocd proj add-destination\nAdd project destination\n\n```\nargocd proj add-destination PROJECT SERVER/NAME NAMESPACE [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination", "title": "argocd proj add-destination Command Reference", "description": "Add project destination", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:32:28", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "title": "argocd proj add-destination Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-destination/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b94f3a67-baba-458b-bb08-7017ca288cff", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj add-destination Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Add project destination using a server URL (SERVER) in the specified namespace (NAMESPACE) on the project with name PROJECT\n  argocd proj add-destination PROJECT SERVER NAMESPACE\n\n  # Add project destination using a server name (NAME) in the specified namespace (NAMESPACE) on the project with name PROJECT\n  argocd proj add-destination PROJECT NAME NAMESPACE --name\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination", "title": "argocd proj add-destination Command Reference", "description": "Add project destination", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:32:28", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "title": "argocd proj add-destination Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-destination/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b94f3a67-baba-458b-bb08-7017ca288cff", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj add-destination Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --name flag to specify a server name instead of a server URL when adding a project destination.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination", "title": "argocd proj add-destination Command Reference", "description": "Add project destination", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:32:28", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "title": "argocd proj add-destination Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-destination/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b94f3a67-baba-458b-bb08-7017ca288cff", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-destination/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj add-orphaned-ignore Command Reference\"?\n\nAssistant: Add a resource to orphaned ignore list\n\nHere's a detailed explanation:\n\n\n## argocd proj add-orphaned-ignore\nAdd a resource to orphaned ignore list\n\n```\nargocd proj add-orphaned-ignore PROJECT GROUP KIND [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-orphaned-ignore", "title": "argocd proj add-orphaned-ignore Command Reference", "description": "Add a resource to orphaned ignore list", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:32:43", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-orphaned-ignore/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "argocd proj add-orphaned-ignore Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "scrapeId": "491de2a5-6f7c-4d25-a846-84174ea977bf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-orphaned-ignore", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-orphaned-ignore/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj add-orphaned-ignore Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Basic Usage\n```yaml\n# Add a resource of the specified GROUP and KIND to orphaned ignore list on the project with name PROJECT\nargocd proj add-orphaned-ignore PROJECT GROUP KIND\n\n# Add resources of the specified GROUP and KIND using a NAME pattern to orphaned ignore list on the project with name PROJECT\nargocd proj add-orphaned-ignore PROJECT GROUP KIND --name NAME\n\n```\n\n### Options\n```yaml\n-h, --help          help for add-orphaned-ignore\n    --name string   Resource name pattern\n\nOptions inherited from parent commands:\n    --argocd-context string           The name of the Argo-CD server context to use\n    --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n    --client-crt string               Client certificate file\n    --client-crt-key string           Client certificate key file\n    --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n    --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n    --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n    --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n    --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n-H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n    --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n    --insecure                        Skip server certificate and domain verification\n    --kube-context string             Directs the command to the given kube-context\n    --logformat string                Set the logging format. One of: text|json (default \"text\")\n    --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n    --plaintext                       Disable TLS\n    --port-forward                    Connect to a random argocd-server port using port forwarding\n    --port-forward-namespace string   Namespace name which should be used for port forwarding\n    --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n    --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n    --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n    --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n    --server string                   Argo CD server address\n    --server-crt string               Server certificate file\n    --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-orphaned-ignore", "title": "argocd proj add-orphaned-ignore Command Reference", "description": "Add a resource to orphaned ignore list", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:32:43", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-orphaned-ignore/", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "argocd proj add-orphaned-ignore Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "scrapeId": "491de2a5-6f7c-4d25-a846-84174ea977bf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-orphaned-ignore", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-orphaned-ignore/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj add-signature-key Command Reference\"?\n\nAssistant: Add GnuPG signature key to project\n\nHere's a detailed explanation:\n\n\n## argocd proj add-signature-key\nAdd GnuPG signature key to project\n\n```\nargocd proj add-signature-key PROJECT KEY-ID [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-signature-key", "title": "argocd proj add-signature-key Command Reference", "description": "Add GnuPG signature key to project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:32:52", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-signature-key/", "title": "argocd proj add-signature-key Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "9d42825d-cdb9-4063-af18-b999cba2c44d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-signature-key", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-signature-key/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj add-signature-key Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Add GnuPG signature key KEY-ID to project PROJECT\n  argocd proj add-signature-key PROJECT KEY-ID\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-signature-key", "title": "argocd proj add-signature-key Command Reference", "description": "Add GnuPG signature key to project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:32:52", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-signature-key/", "title": "argocd proj add-signature-key Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "9d42825d-cdb9-4063-af18-b999cba2c44d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-signature-key", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-signature-key/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj add-signature-key Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-signature-key", "title": "argocd proj add-signature-key Command Reference", "description": "Add GnuPG signature key to project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:32:52", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-signature-key/", "title": "argocd proj add-signature-key Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "9d42825d-cdb9-4063-af18-b999cba2c44d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-signature-key", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-signature-key/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj add-source-namespace Command Reference\"?\n\nAssistant: Add source namespace to the AppProject\n\nHere's a detailed explanation:\n\n\n## argocd proj add-source-namespace\nAdd source namespace to the AppProject\n\n```\nargocd proj add-source-namespace PROJECT NAMESPACE [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source-namespace", "title": "argocd proj add-source-namespace Command Reference", "description": "Add source namespace to the AppProject", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:32:59", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj add-source-namespace Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-source-namespace/", "language": "en", "scrapeId": "a7561c81-9c8b-4582-bcf6-8966b62f7dc1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj add-source-namespace Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Add Kubernetes namespace as source namespace\n```yaml\n# Add Kubernetes namespace as source namespace to the AppProject where application resources are allowed to be created in.\nargocd proj add-source-namespace PROJECT NAMESPACE\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source-namespace", "title": "argocd proj add-source-namespace Command Reference", "description": "Add source namespace to the AppProject", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:32:59", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj add-source-namespace Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-source-namespace/", "language": "en", "scrapeId": "a7561c81-9c8b-4582-bcf6-8966b62f7dc1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj add-source-namespace Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source-namespace", "title": "argocd proj add-source-namespace Command Reference", "description": "Add source namespace to the AppProject", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:32:59", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj add-source-namespace Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-source-namespace/", "language": "en", "scrapeId": "a7561c81-9c8b-4582-bcf6-8966b62f7dc1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj add-source Command Reference\"?\n\nAssistant: Add project source repository\n\nHere's a detailed explanation:\n\n\n## argocd proj add-source\nAdd project source repository\n\n```\nargocd proj add-source PROJECT URL [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source", "title": "argocd proj add-source Command Reference", "description": "Add project source repository", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:05", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd proj add-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-source/", "readthedocs-http-status": "200", "scrapeId": "a6bed80e-cb5d-4618-9463-1a27e0401f19", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj add-source Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Add a source repository to the project\n```yaml\n# Add a source repository (URL) to the project with name PROJECT\nargocd proj add-source PROJECT URL\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source", "title": "argocd proj add-source Command Reference", "description": "Add project source repository", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:05", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd proj add-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-source/", "readthedocs-http-status": "200", "scrapeId": "a6bed80e-cb5d-4618-9463-1a27e0401f19", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj add-source Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source", "title": "argocd proj add-source Command Reference", "description": "Add project source repository", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:05", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd proj add-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_add-source/", "readthedocs-http-status": "200", "scrapeId": "a6bed80e-cb5d-4618-9463-1a27e0401f19", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_add-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj allow-cluster-resource Command Reference\"?\n\nAssistant: Adds a cluster-scoped API resource to the allow list and removes it from deny list\n\nHere's a detailed explanation:\n\n\n## argocd proj allow-cluster-resource\nAdds a cluster-scoped API resource to the allow list and removes it from deny list\n\n```\nargocd proj allow-cluster-resource PROJECT GROUP KIND [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-cluster-resource", "title": "argocd proj allow-cluster-resource Command Reference", "description": "Adds a cluster-scoped API resource to the allow list and removes it from deny list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:09", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_allow-cluster-resource/", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj allow-cluster-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "e3d19596-05d0-48bb-8cb7-5e63306e952c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-cluster-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-cluster-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj allow-cluster-resource Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example Usage\n```yaml\n# Adds a cluster-scoped API resource with specified GROUP and KIND to the allow list and removes it from deny list for project PROJECT\nargocd proj allow-cluster-resource PROJECT GROUP KIND\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-cluster-resource", "title": "argocd proj allow-cluster-resource Command Reference", "description": "Adds a cluster-scoped API resource to the allow list and removes it from deny list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:09", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_allow-cluster-resource/", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj allow-cluster-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "e3d19596-05d0-48bb-8cb7-5e63306e952c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-cluster-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-cluster-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj allow-cluster-resource Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -h or --help flag to get more information about the command and its options.\n• Ensure to specify the correct PROJECT, GROUP, and KIND when using the command.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-cluster-resource", "title": "argocd proj allow-cluster-resource Command Reference", "description": "Adds a cluster-scoped API resource to the allow list and removes it from deny list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:09", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_allow-cluster-resource/", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj allow-cluster-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "e3d19596-05d0-48bb-8cb7-5e63306e952c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-cluster-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-cluster-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj allow-namespace-resource Command Reference\"?\n\nAssistant: Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list\n\nHere's a detailed explanation:\n\n\n## argocd proj allow-namespace-resource\nRemoves a namespaced API resource from the deny list or add a namespaced API resource to the allow list\n\n```\nargocd proj allow-namespace-resource PROJECT GROUP KIND [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-namespace-resource", "title": "argocd proj allow-namespace-resource Command Reference", "description": "Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:15", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd proj allow-namespace-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_allow-namespace-resource/", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0f7e5e10-03e5-413f-922d-e65f6ebe668c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-namespace-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-namespace-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj allow-namespace-resource Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example Usage\n```yaml\n# Removes a namespaced API resource with specified GROUP and KIND from the deny list or add a namespaced API resource to the allow list for project PROJECT\nargocd proj allow-namespace-resource PROJECT GROUP KIND\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-namespace-resource", "title": "argocd proj allow-namespace-resource Command Reference", "description": "Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:15", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd proj allow-namespace-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_allow-namespace-resource/", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0f7e5e10-03e5-413f-922d-e65f6ebe668c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-namespace-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-namespace-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj allow-namespace-resource Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -l or --list option to specify whether to use the deny list or allow list, which can only be 'allow' or 'deny'.\n• For authentication, set the --auth-token or the ARGOCD_AUTH_TOKEN environment variable.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-namespace-resource", "title": "argocd proj allow-namespace-resource Command Reference", "description": "Removes a namespaced API resource from the deny list or add a namespaced API resource to the allow list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:15", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "title": "argocd proj allow-namespace-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_allow-namespace-resource/", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0f7e5e10-03e5-413f-922d-e65f6ebe668c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-namespace-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_allow-namespace-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj create Command Reference\"?\n\nAssistant: Create a project\n\nHere's a detailed explanation:\n\n\n## argocd proj create\nCreate a project\n\n```\nargocd proj create PROJECT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_create", "title": "argocd proj create Command Reference", "description": "Create a project", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:33:19", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_create/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj create Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "12e1b3dd-eeb0-414d-bd89-fde841ab9e93", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_create", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj create Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Create a new project with name PROJECT\n  argocd proj create PROJECT\n\n  # Create a new project with name PROJECT from a file or URL to a Kubernetes manifest\n  argocd proj create PROJECT -f FILE|URL\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_create", "title": "argocd proj create Command Reference", "description": "Create a project", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:33:19", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_create/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj create Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "12e1b3dd-eeb0-414d-bd89-fde841ab9e93", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_create", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj delete Command Reference\"?\n\nAssistant: Delete project\n\nHere's a detailed explanation:\n\n\n## argocd proj delete\nDelete project\n\n```\nargocd proj delete PROJECT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_delete", "title": "argocd proj delete Command Reference", "description": "Delete project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:25", "type": "overview", "page_metadata": {"language": "en", "title": "argocd proj delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_delete/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "77f9c373-4e53-459d-afae-5cac97305e73", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj delete Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Delete Project Example\n```yaml\n# Delete the project with name PROJECT\nargocd proj delete PROJECT\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_delete", "title": "argocd proj delete Command Reference", "description": "Delete project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:25", "type": "code_examples", "page_metadata": {"language": "en", "title": "argocd proj delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_delete/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "77f9c373-4e53-459d-afae-5cac97305e73", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj delete Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the delete command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_delete", "title": "argocd proj delete Command Reference", "description": "Delete project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:25", "type": "best_practices", "page_metadata": {"language": "en", "title": "argocd proj delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_delete/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "77f9c373-4e53-459d-afae-5cac97305e73", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj deny-cluster-resource Command Reference\"?\n\nAssistant: Removes a cluster-scoped API resource from the allow list and adds it to deny list\n\nHere's a detailed explanation:\n\n\n## argocd proj deny-cluster-resource\nRemoves a cluster-scoped API resource from the allow list and adds it to deny list\n\n```\nargocd proj deny-cluster-resource PROJECT GROUP KIND [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-cluster-resource", "title": "argocd proj deny-cluster-resource Command Reference", "description": "Removes a cluster-scoped API resource from the allow list and adds it to deny list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:30", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "argocd proj deny-cluster-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_deny-cluster-resource/", "readthedocs-http-status": "200", "scrapeId": "9141f41f-fbaa-4e4e-ab1a-2d67dc071112", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-cluster-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-cluster-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj deny-cluster-resource Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example Usage\n```yaml\n# Removes a cluster-scoped API resource with specified GROUP and KIND from the allow list and adds it to deny list for project PROJECT\nargocd proj deny-cluster-resource PROJECT GROUP KIND\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-cluster-resource", "title": "argocd proj deny-cluster-resource Command Reference", "description": "Removes a cluster-scoped API resource from the allow list and adds it to deny list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:30", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "argocd proj deny-cluster-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_deny-cluster-resource/", "readthedocs-http-status": "200", "scrapeId": "9141f41f-fbaa-4e4e-ab1a-2d67dc071112", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-cluster-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-cluster-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj deny-cluster-resource Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -h or --help flag to get more information about the command and its options.\n• Ensure to specify the correct PROJECT, GROUP, and KIND when using the command.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-cluster-resource", "title": "argocd proj deny-cluster-resource Command Reference", "description": "Removes a cluster-scoped API resource from the allow list and adds it to deny list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:30", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "argocd proj deny-cluster-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_deny-cluster-resource/", "readthedocs-http-status": "200", "scrapeId": "9141f41f-fbaa-4e4e-ab1a-2d67dc071112", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-cluster-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-cluster-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj deny-namespace-resource Command Reference\"?\n\nAssistant: Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list\n\nHere's a detailed explanation:\n\n\n## argocd proj deny-namespace-resource\nAdds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list\n\n```\nargocd proj deny-namespace-resource PROJECT GROUP KIND [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-namespace-resource", "title": "argocd proj deny-namespace-resource Command Reference", "description": "Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:36", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj deny-namespace-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_deny-namespace-resource/", "scrapeId": "03453595-8bcf-4b59-a8e5-3228e0b632d5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-namespace-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-namespace-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj deny-namespace-resource Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example Usage\n```yaml\n# Adds a namespaced API resource with specified GROUP and KIND from the deny list or removes a namespaced API resource from the allow list for project PROJECT\nargocd proj deny-namespace-resource PROJECT GROUP KIND\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-namespace-resource", "title": "argocd proj deny-namespace-resource Command Reference", "description": "Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:36", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj deny-namespace-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_deny-namespace-resource/", "scrapeId": "03453595-8bcf-4b59-a8e5-3228e0b632d5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-namespace-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-namespace-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj deny-namespace-resource Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -l or --list option to specify whether to use the deny list or allow list. This can only be 'allow' or 'deny'.\n• For authentication, set the --auth-token option or the ARGOCD_AUTH_TOKEN environment variable.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-namespace-resource", "title": "argocd proj deny-namespace-resource Command Reference", "description": "Adds a namespaced API resource to the deny list or removes a namespaced API resource from the allow list", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:36", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj deny-namespace-resource Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_deny-namespace-resource/", "scrapeId": "03453595-8bcf-4b59-a8e5-3228e0b632d5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-namespace-resource", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_deny-namespace-resource/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj edit Command Reference\"?\n\nAssistant: Edit project\n\nHere's a detailed explanation:\n\n\n## argocd proj edit\nEdit project\n\n```\nargocd proj edit PROJECT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_edit", "title": "argocd proj edit Command Reference", "description": "Edit project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:40", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd proj edit Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_edit/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "b27d94d7-2d21-4e5c-a0c3-c2786a189c24", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_edit", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_edit/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj edit Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Edit project example\n```yaml\n# Edit the information on project with name PROJECT\nargocd proj edit PROJECT\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_edit", "title": "argocd proj edit Command Reference", "description": "Edit project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:40", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd proj edit Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_edit/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "b27d94d7-2d21-4e5c-a0c3-c2786a189c24", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_edit", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_edit/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj edit Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_edit", "title": "argocd proj edit Command Reference", "description": "Edit project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:40", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "title": "argocd proj edit Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_edit/", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "b27d94d7-2d21-4e5c-a0c3-c2786a189c24", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_edit", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_edit/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj get Command Reference\"?\n\nAssistant: Get project details\n\nHere's a detailed explanation:\n\n\n## argocd proj get\nGet project details\n\n```\nargocd proj get PROJECT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_get", "title": "argocd proj get Command Reference", "description": "Get project details", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:33:53", "type": "overview", "page_metadata": {"title": "argocd proj get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_get/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b482c6d2-ad17-4259-9f1c-0bfa45d2df81", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj get Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n```\n  # Get details from project PROJECT\n  argocd proj get PROJECT\n\n  # Get details from project PROJECT in yaml format\n  argocd proj get PROJECT -o yaml\n```\n\n```\n\n### Options\n```yaml\n```\n  -h, --help            help for get\n  -o, --output string   Output format. One of: json|yaml|wide (default \"wide\")\n```\n\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_get", "title": "argocd proj get Command Reference", "description": "Get project details", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:33:53", "type": "code_examples", "page_metadata": {"title": "argocd proj get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_get/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b482c6d2-ad17-4259-9f1c-0bfa45d2df81", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj list Command Reference\"?\n\nAssistant: List projects\n\nHere's a detailed explanation:\n\n\n## argocd proj list\nList projects\n\n```\nargocd proj list [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_list", "title": "argocd proj list Command Reference", "description": "List projects", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:57", "type": "overview", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_list/", "title": "argocd proj list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "a98ff07b-2d3d-48ec-9a1f-cc681c743883", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # List all available projects\n  argocd proj list\n\n  # List all available projects in yaml format\n  argocd proj list -o yaml\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_list", "title": "argocd proj list Command Reference", "description": "List projects", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:57", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_list/", "title": "argocd proj list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "a98ff07b-2d3d-48ec-9a1f-cc681c743883", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj list Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format, such as json or yaml for better readability.\n• Utilize inherited options from parent commands for additional functionality.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_list", "title": "argocd proj list Command Reference", "description": "List projects", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:33:57", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_list/", "title": "argocd proj list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "a98ff07b-2d3d-48ec-9a1f-cc681c743883", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj remove-destination-service-account Command Reference\"?\n\nAssistant: Remove default destination service account from the project\n\nHere's a detailed explanation:\n\n\n## argocd proj remove-destination-service-account\nRemove default destination service account from the project\n\n```\nargocd proj remove-destination-service-account PROJECT SERVER NAMESPACE SERVICE_ACCOUNT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination-service-account", "title": "argocd proj remove-destination-service-account Command Reference", "description": "Remove default destination service account from the project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:03", "type": "overview", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "argocd proj remove-destination-service-account Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-destination-service-account/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "a05c2107-bb9c-4dae-a8e3-a0e9b06976cc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination-service-account", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination-service-account/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj remove-destination-service-account Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Remove Destination Service Account Example\n```yaml\n# Remove the destination service account (SERVICE_ACCOUNT) from the specified destination (SERVER and NAMESPACE combination) on the project with name PROJECT\nargocd proj remove-destination-service-account PROJECT SERVER NAMESPACE SERVICE_ACCOUNT\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination-service-account", "title": "argocd proj remove-destination-service-account Command Reference", "description": "Remove default destination service account from the project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:03", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "argocd proj remove-destination-service-account Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-destination-service-account/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "a05c2107-bb9c-4dae-a8e3-a0e9b06976cc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination-service-account", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination-service-account/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj remove-destination-service-account Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination-service-account", "title": "argocd proj remove-destination-service-account Command Reference", "description": "Remove default destination service account from the project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:03", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "title": "argocd proj remove-destination-service-account Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-destination-service-account/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "a05c2107-bb9c-4dae-a8e3-a0e9b06976cc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination-service-account", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination-service-account/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj remove-destination Command Reference\"?\n\nAssistant: Remove project destination\n\nHere's a detailed explanation:\n\n\n## argocd proj remove-destination\nRemove project destination\n\n```\nargocd proj remove-destination PROJECT SERVER NAMESPACE [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination", "title": "argocd proj remove-destination Command Reference", "description": "Remove project destination", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:07", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj remove-destination Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-destination/", "readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "d49d7c75-1d6e-43c3-a52b-4b661defd860", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj remove-destination Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Remove Destination Example\n```yaml\n# Remove the destination (SERVER) from the specified namespace (NAMESPACE) on the project with name PROJECT\nargocd proj remove-destination PROJECT SERVER NAMESPACE\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination", "title": "argocd proj remove-destination Command Reference", "description": "Remove project destination", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:07", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj remove-destination Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-destination/", "readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "d49d7c75-1d6e-43c3-a52b-4b661defd860", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj remove-destination Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination", "title": "argocd proj remove-destination Command Reference", "description": "Remove project destination", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:07", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj remove-destination Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-destination/", "readthedocs-http-status": "200", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "d49d7c75-1d6e-43c3-a52b-4b661defd860", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-destination/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj remove-orphaned-ignore Command Reference\"?\n\nAssistant: Remove a resource from orphaned ignore list\n\nHere's a detailed explanation:\n\n\n## argocd proj remove-orphaned-ignore\nRemove a resource from orphaned ignore list\n\n```\nargocd proj remove-orphaned-ignore PROJECT GROUP KIND [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-orphaned-ignore", "title": "argocd proj remove-orphaned-ignore Command Reference", "description": "Remove a resource from orphaned ignore list", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:34:20", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-orphaned-ignore/", "readthedocs-http-status": "200", "title": "argocd proj remove-orphaned-ignore Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "ec362536-f4f9-4e20-9c56-6728caa08bc5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-orphaned-ignore", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-orphaned-ignore/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj remove-orphaned-ignore Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Basic Usage\n```yaml\n# Remove a resource of the specified GROUP and KIND from orphaned ignore list on the project with name PROJECT\nargocd proj remove-orphaned-ignore PROJECT GROUP KIND\n\n# Remove resources of the specified GROUP and KIND using a NAME pattern from orphaned ignore list on the project with name PROJECT\nargocd proj remove-orphaned-ignore PROJECT GROUP KIND --name NAME\n\n```\n\n### Options\n```yaml\n-h, --help          help for remove-orphaned-ignore\n    --name string   Resource name pattern\n\n```\n\n### Inherited Options\n```yaml\n    --argocd-context string           The name of the Argo-CD server context to use\n    --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n    --client-crt string               Client certificate file\n    --client-crt-key string           Client certificate key file\n    --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n    --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n    --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n    --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n    --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n-H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n    --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n    --insecure                        Skip server certificate and domain verification\n    --kube-context string             Directs the command to the given kube-context\n    --logformat string                Set the logging format. One of: text|json (default \"text\")\n    --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n    --plaintext                       Disable TLS\n    --port-forward                    Connect to a random argocd-server port using port forwarding\n    --port-forward-namespace string   Namespace name which should be used for port forwarding\n    --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n    --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n    --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n    --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n    --server string                   Argo CD server address\n    --server-crt string               Server certificate file\n    --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-orphaned-ignore", "title": "argocd proj remove-orphaned-ignore Command Reference", "description": "Remove a resource from orphaned ignore list", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:34:20", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-orphaned-ignore/", "readthedocs-http-status": "200", "title": "argocd proj remove-orphaned-ignore Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "ec362536-f4f9-4e20-9c56-6728caa08bc5", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-orphaned-ignore", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-orphaned-ignore/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj remove-signature-key Command Reference\"?\n\nAssistant: Remove GnuPG signature key from project\n\nHere's a detailed explanation:\n\n\n## argocd proj remove-signature-key\nRemove GnuPG signature key from project\n\n```\nargocd proj remove-signature-key PROJECT KEY-ID [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-signature-key", "title": "argocd proj remove-signature-key Command Reference", "description": "Remove GnuPG signature key from project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:25", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj remove-signature-key Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-signature-key/", "scrapeId": "ed119ad2-aa3c-45ea-bb5a-67cca105552f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-signature-key", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-signature-key/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj remove-signature-key Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Remove GnuPG signature key KEY-ID from project PROJECT\n  argocd proj remove-signature-key PROJECT KEY-ID\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-signature-key", "title": "argocd proj remove-signature-key Command Reference", "description": "Remove GnuPG signature key from project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:25", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj remove-signature-key Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-signature-key/", "scrapeId": "ed119ad2-aa3c-45ea-bb5a-67cca105552f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-signature-key", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-signature-key/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj remove-signature-key Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-signature-key", "title": "argocd proj remove-signature-key Command Reference", "description": "Remove GnuPG signature key from project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:25", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj remove-signature-key Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-signature-key/", "scrapeId": "ed119ad2-aa3c-45ea-bb5a-67cca105552f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-signature-key", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-signature-key/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj remove-source-namespace Command Reference\"?\n\nAssistant: Removes the source namespace from the AppProject\n\nHere's a detailed explanation:\n\n\n## argocd proj remove-source-namespace\nRemoves the source namespace from the AppProject\n\n```\nargocd proj remove-source-namespace PROJECT NAMESPACE [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source-namespace", "title": "argocd proj remove-source-namespace Command Reference", "description": "Removes the source namespace from the AppProject", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:29", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-source-namespace/", "readthedocs-http-status": "200", "title": "argocd proj remove-source-namespace Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0d9d9183-a598-4f5c-b4c4-2272860b7faf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj remove-source-namespace Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Remove source NAMESPACE in PROJECT\n```yaml\nargocd proj remove-source-namespace PROJECT NAMESPACE\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source-namespace", "title": "argocd proj remove-source-namespace Command Reference", "description": "Removes the source namespace from the AppProject", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:29", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-source-namespace/", "readthedocs-http-status": "200", "title": "argocd proj remove-source-namespace Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0d9d9183-a598-4f5c-b4c4-2272860b7faf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj remove-source-namespace Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source-namespace", "title": "argocd proj remove-source-namespace Command Reference", "description": "Removes the source namespace from the AppProject", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:29", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-source-namespace/", "readthedocs-http-status": "200", "title": "argocd proj remove-source-namespace Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "0d9d9183-a598-4f5c-b4c4-2272860b7faf", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source-namespace", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj remove-source Command Reference\"?\n\nAssistant: Remove project source repository\n\nHere's a detailed explanation:\n\n\n## argocd proj remove-source\nRemove project source repository\n\n```\nargocd proj remove-source PROJECT URL [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source", "title": "argocd proj remove-source Command Reference", "description": "Remove project source repository", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:32", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-source/", "title": "argocd proj remove-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "638a3918-3bbd-4f21-931b-476f6cb22592", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj remove-source Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Remove URL source repository to project PROJECT\n```yaml\nargocd proj remove-source PROJECT URL\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source", "title": "argocd proj remove-source Command Reference", "description": "Remove project source repository", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:32", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-source/", "title": "argocd proj remove-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "638a3918-3bbd-4f21-931b-476f6cb22592", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj remove-source Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source", "title": "argocd proj remove-source Command Reference", "description": "Remove project source repository", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:32", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_remove-source/", "title": "argocd proj remove-source Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "638a3918-3bbd-4f21-931b-476f6cb22592", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_remove-source/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role Command Reference\"?\n\nAssistant: Manage a project's roles\n\nHere's a detailed explanation:\n\n\n## argocd proj role\nManage a project's roles\n\n```\nargocd proj role [flags]\n```\n\n\n## Options\n```\n  -h, --help   help for role\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role", "title": "argocd proj role Command Reference", "description": "Manage a project's roles", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 03:34:45", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj role Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role/", "scrapeId": "6bfce53c-1ae7-400d-bd32-1bafb49764fc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### argocd proj role command\n```yaml\nargocd proj role [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role", "title": "argocd proj role Command Reference", "description": "Manage a project's roles", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 03:34:45", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj role Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role/", "scrapeId": "6bfce53c-1ae7-400d-bd32-1bafb49764fc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role add-group Command Reference\"?\n\nAssistant: Add a group claim to a project role\n\nHere's a detailed explanation:\n\n\n## argocd proj role add-group\nAdd a group claim to a project role\n\n```\nargocd proj role add-group PROJECT ROLE-NAME GROUP-CLAIM [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-group", "title": "argocd proj role add-group Command Reference", "description": "Add a group claim to a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:51", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "argocd proj role add-group Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_add-group/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "f9e4c9e6-beaa-48a5-9a3f-6013a272422f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-group", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-group/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role add-group Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nargocd proj role add-group PROJECT ROLE-NAME GROUP-CLAIM [flags]\n```\n\n### Options\n```yaml\n  -h, --help   help for add-group\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-group", "title": "argocd proj role add-group Command Reference", "description": "Add a group claim to a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:51", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "argocd proj role add-group Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_add-group/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "f9e4c9e6-beaa-48a5-9a3f-6013a272422f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-group", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-group/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj role add-group Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n• Ensure to set the correct Argo CD server context using --argocd-context.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-group", "title": "argocd proj role add-group Command Reference", "description": "Add a group claim to a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:51", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "argocd proj role add-group Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_add-group/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "scrapeId": "f9e4c9e6-beaa-48a5-9a3f-6013a272422f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-group", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-group/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role add-policy Command Reference\"?\n\nAssistant: Add a policy to a project role\n\nHere's a detailed explanation:\n\n\n## argocd proj role add-policy\nAdd a policy to a project role\n\n```\nargocd proj role add-policy PROJECT ROLE-NAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-policy", "title": "argocd proj role add-policy Command Reference", "description": "Add a policy to a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:59", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_add-policy/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj role add-policy Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1f35eb9f-b55e-41ef-ae30-5a0881f8da74", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-policy", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role add-policy Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n# Before adding new policy\n$ argocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\nJWT Tokens:\nID          ISSUED-AT                                EXPIRES-AT\n1696759698  2023-10-08T11:08:18+01:00 (3 hours ago)  <none>\n\n# Add a new policy to allow update to the project\n$ argocd proj role add-policy test-project test-role -a update -p allow -o project\n\n# Policy should be updated\n$  argocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\np, proj:test-project:test-role, applications, update, test-project/project, allow\nJWT Tokens:\nID          ISSUED-AT                                EXPIRES-AT\n1696759698  2023-10-08T11:08:18+01:00 (3 hours ago)  <none>\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-policy", "title": "argocd proj role add-policy Command Reference", "description": "Add a policy to a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:59", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_add-policy/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj role add-policy Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1f35eb9f-b55e-41ef-ae30-5a0881f8da74", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-policy", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj role add-policy Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the correct action and permission flags when adding policies to ensure proper access control.\n• Always verify the role's policies after making changes to confirm that they have been applied correctly.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-policy", "title": "argocd proj role add-policy Command Reference", "description": "Add a policy to a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:34:59", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_add-policy/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj role add-policy Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "scrapeId": "1f35eb9f-b55e-41ef-ae30-5a0881f8da74", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-policy", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_add-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role create-token Command Reference\"?\n\nAssistant: Create a project token\n\nHere's a detailed explanation:\n\n\n## argocd proj role create-token\nCreate a project token\n\n```\nargocd proj role create-token PROJECT ROLE-NAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create-token", "title": "argocd proj role create-token Command Reference", "description": "Create a project token", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:05", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_create-token/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj role create-token Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "446ef5d4-1079-4e8e-bcb7-535b22cc7011", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create-token", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create-token/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role create-token Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example of creating a project token\n```yaml\n$ argocd proj role create-token test-project test-role\nCreate token succeeded for proj:test-project:test-role.\n  ID: f316c466-40bd-4cfd-8a8c-1392e92255d4\n  Issued At: 2023-10-08T15:21:40+01:00\n  Expires At: Never\n  Token: xxx\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create-token", "title": "argocd proj role create-token Command Reference", "description": "Create a project token", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:05", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_create-token/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj role create-token Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "446ef5d4-1079-4e8e-bcb7-535b22cc7011", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create-token", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create-token/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj role create-token Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -e or --expires-in flag to set a duration before the token expires, e.g. \"12h\", \"7d\". (Default: No expiration)\n• Use the -t or --token-only flag to output token only for use in scripts.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create-token", "title": "argocd proj role create-token Command Reference", "description": "Create a project token", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:05", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_create-token/", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj role create-token Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "language": "en", "scrapeId": "446ef5d4-1079-4e8e-bcb7-535b22cc7011", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create-token", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create-token/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role create Command Reference\"?\n\nAssistant: Create a project role\n\nHere's a detailed explanation:\n\n\n## argocd proj role create\nCreate a project role\n\n```\nargocd proj role create PROJECT ROLE-NAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create", "title": "argocd proj role create Command Reference", "description": "Create a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:11", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "title": "argocd proj role create Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_create/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "354960ce-0c4e-41be-8365-0afaa024e843", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role create Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Create a project role example\n```yaml\n# Create a project role in the \"my-project\" project with the name \"my-role\".\nargocd proj role create my-project my-role --description \"My project role description\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create", "title": "argocd proj role create Command Reference", "description": "Create a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:11", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "title": "argocd proj role create Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_create/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "354960ce-0c4e-41be-8365-0afaa024e843", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj role create Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use descriptive names for roles to easily identify their purpose.\n• Always check the inherited options from parent commands to avoid missing important configurations.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create", "title": "argocd proj role create Command Reference", "description": "Create a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:11", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "title": "argocd proj role create Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_create/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "scrapeId": "354960ce-0c4e-41be-8365-0afaa024e843", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role delete-token Command Reference\"?\n\nAssistant: Delete a project token\n\nHere's a detailed explanation:\n\n\n## argocd proj role delete-token\nDelete a project token\n\n```\nargocd proj role delete-token PROJECT ROLE-NAME ISSUED-AT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete-token", "title": "argocd proj role delete-token Command Reference", "description": "Delete a project token", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:48", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj role delete-token Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_delete-token/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "87c10dcd-c62e-4c09-9136-7699c610e20f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete-token", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete-token/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role delete-token Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n#Create project test-project\n$ argocd proj create test-project\n\n# Create a role associated with test-project\n$ argocd proj role create test-project test-role\nRole 'test-role' created\n\n# Create test-role associated with test-project\n$ argocd proj role create-token test-project test-role\nCreate token succeeded for proj:test-project:test-role.\n  ID: c312450e-12e1-4e0d-9f65-fac9cb027b32\n  Issued At: 2023-10-08T13:58:57+01:00\n  Expires At: Never\n  Token: xxx\n\n# Get test-role id to input into the delete-token command below\n$ argocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\nJWT Tokens:\nID          ISSUED-AT                                  EXPIRES-AT\n1696769937  2023-10-08T13:58:57+01:00 (6 minutes ago)  <none>\n\n$ argocd proj role delete-token test-project test-role 1696769937\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete-token", "title": "argocd proj role delete-token Command Reference", "description": "Delete a project token", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:48", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj role delete-token Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_delete-token/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "87c10dcd-c62e-4c09-9136-7699c610e20f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete-token", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete-token/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj role delete-token Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the delete-token command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete-token", "title": "argocd proj role delete-token Command Reference", "description": "Delete a project token", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:48", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj role delete-token Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_delete-token/", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "87c10dcd-c62e-4c09-9136-7699c610e20f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete-token", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete-token/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role delete Command Reference\"?\n\nAssistant: Delete a project role\n\nHere's a detailed explanation:\n\n\n## argocd proj role delete\nDelete a project role\n\n```\nargocd proj role delete PROJECT ROLE-NAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete", "title": "argocd proj role delete Command Reference", "description": "Delete a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:52", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj role delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_delete/", "scrapeId": "48715595-682e-46e4-ab8a-15eae0472b4b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role delete Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example of deleting a project role\n```yaml\n$ argocd proj role delete test-project test-role\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete", "title": "argocd proj role delete Command Reference", "description": "Delete a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:52", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj role delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_delete/", "scrapeId": "48715595-682e-46e4-ab8a-15eae0472b4b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj role delete Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete", "title": "argocd proj role delete Command Reference", "description": "Delete a project role", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:35:52", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj role delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_delete/", "scrapeId": "48715595-682e-46e4-ab8a-15eae0472b4b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role get Command Reference\"?\n\nAssistant: Get the details of a specific role\n\nHere's a detailed explanation:\n\n\n## Examples\n```\n$ argocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\nJWT Tokens:\nID          ISSUED-AT                                  EXPIRES-AT\n1696774900  2023-10-08T15:21:40+01:00 (4 minutes ago)  <none>\n1696759698  2023-10-08T11:08:18+01:00 (4 hours ago)    <none>\n```\n\n\n## Options\n```\n  -h, --help   help for get\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_get", "title": "argocd proj role get Command Reference", "description": "Get the details of a specific role", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 03:36:08", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj role get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_get/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "scrapeId": "5d059279-13e3-499f-adb1-c38d553f5d6d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role get Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example Command\n```yaml\n$ argocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\nJWT Tokens:\nID          ISSUED-AT                                  EXPIRES-AT\n1696774900  2023-10-08T15:21:40+01:00 (4 minutes ago)  <none>\n1696759698  2023-10-08T11:08:18+01:00 (4 hours ago)    <none>\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_get", "title": "argocd proj role get Command Reference", "description": "Get the details of a specific role", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 03:36:08", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj role get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_get/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "readthedocs-http-status": "200", "scrapeId": "5d059279-13e3-499f-adb1-c38d553f5d6d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role list-tokens Command Reference\"?\n\nAssistant: List tokens for a given role.\n\nHere's a detailed explanation:\n\n\n## argocd proj role list-tokens\nList tokens for a given role.\n\n```\nargocd proj role list-tokens PROJECT ROLE-NAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list-tokens", "title": "argocd proj role list-tokens Command Reference", "description": "List tokens for a given role.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:36:42", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj role list-tokens Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_list-tokens/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "7bd9e9ee-4f0c-4e19-9a88-51639aa0dc1d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list-tokens", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list-tokens/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role list-tokens Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example Usage\n```yaml\n$ argocd proj role list-tokens test-project test-role\nID                                      ISSUED AT                    EXPIRES AT\nf316c466-40bd-4cfd-8a8c-1392e92255d4    2023-10-08T15:21:40+01:00    Never\nfa9d3517-c52d-434c-9bff-215b38508842    2023-10-08T11:08:18+01:00    Never\n\n```\n\n### Options\n```yaml\n  -h, --help       help for list-tokens\n  -u, --unixtime   Print timestamps as Unix time instead of converting. Useful for piping into delete-token.\n\n```\n\n### Options inherited from parent commands\n```yaml\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list-tokens", "title": "argocd proj role list-tokens Command Reference", "description": "List tokens for a given role.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:36:42", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj role list-tokens Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_list-tokens/", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "7bd9e9ee-4f0c-4e19-9a88-51639aa0dc1d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list-tokens", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list-tokens/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role list Command Reference\"?\n\nAssistant: List all the roles in a project\n\nHere's a detailed explanation:\n\n\n## argocd proj role list\nList all the roles in a project\n\n```\nargocd proj role list PROJECT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list", "title": "argocd proj role list Command Reference", "description": "List all the roles in a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:36:47", "type": "overview", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_list/", "title": "argocd proj role list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "15d9c86a-cfe1-4fc6-aec8-37d239c25288", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Basic Usage\n```yaml\n# This command will list all the roles in argocd-project in a default table format.\nargocd proj role list PROJECT\n```\n\n### Output Formats\n```yaml\n# List the roles in the project in formats like json, yaml, wide, or name.\nargocd proj role list PROJECT --output json\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list", "title": "argocd proj role list Command Reference", "description": "List all the roles in a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:36:47", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_list/", "title": "argocd proj role list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "15d9c86a-cfe1-4fc6-aec8-37d239c25288", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj role list Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --output flag to specify the desired output format for better readability.\n• Refer to the options inherited from parent commands for additional configurations that can be applied.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list", "title": "argocd proj role list Command Reference", "description": "List all the roles in a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:36:47", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_list/", "title": "argocd proj role list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "scrapeId": "15d9c86a-cfe1-4fc6-aec8-37d239c25288", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role remove-group Command Reference\"?\n\nAssistant: Remove a group claim from a role within a project\n\nHere's a detailed explanation:\n\n\n## argocd proj role remove-group\nRemove a group claim from a role within a project\n\n```\nargocd proj role remove-group PROJECT ROLE-NAME GROUP-CLAIM [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-group", "title": "argocd proj role remove-group Command Reference", "description": "Remove a group claim from a role within a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:36:52", "type": "overview", "page_metadata": {"title": "argocd proj role remove-group Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_remove-group/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "0a0d4fa5-062c-44d8-a6e1-9cfa4e9991be", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-group", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-group/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role remove-group Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nargocd proj role remove-group PROJECT ROLE-NAME GROUP-CLAIM [flags]\n```\n\n### Options\n```yaml\n  -h, --help   help for remove-group\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-group", "title": "argocd proj role remove-group Command Reference", "description": "Remove a group claim from a role within a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:36:52", "type": "code_examples", "page_metadata": {"title": "argocd proj role remove-group Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_remove-group/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "0a0d4fa5-062c-44d8-a6e1-9cfa4e9991be", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-group", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-group/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj role remove-group Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help option to get more information about the command and its usage.\n• Ensure you have the correct permissions to modify roles within the project.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-group", "title": "argocd proj role remove-group Command Reference", "description": "Remove a group claim from a role within a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:36:52", "type": "best_practices", "page_metadata": {"title": "argocd proj role remove-group Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_remove-group/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "scrapeId": "0a0d4fa5-062c-44d8-a6e1-9cfa4e9991be", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-group", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-group/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj role remove-policy Command Reference\"?\n\nAssistant: Remove a policy from a role within a project\n\nHere's a detailed explanation:\n\n\n## argocd proj role remove-policy\nRemove a policy from a role within a project\n\n```\nargocd proj role remove-policy PROJECT ROLE-NAME [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-policy", "title": "argocd proj role remove-policy Command Reference", "description": "Remove a policy from a role within a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:01", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_remove-policy/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj role remove-policy Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "e689f2a0-182b-464a-b1b9-910ad3b32621", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-policy", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj role remove-policy Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\nList the policy of the test-role before removing a policy\n$ argocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\np, proj:test-project:test-role, applications, update, test-project/project, allow\nJWT Tokens:\nID          ISSUED-AT                                EXPIRES-AT\n1696759698  2023-10-08T11:08:18+01:00 (3 hours ago)  <none>\n\n# Remove the policy to allow update to objects\n$ argocd proj role remove-policy test-project test-role -a update -p allow -o project\n\n# The role should be removed now.\n$ argocd proj role get test-project test-role\nRole Name:     test-role\nDescription:\nPolicies:\np, proj:test-project:test-role, projects, get, test-project, allow\nJWT Tokens:\nID          ISSUED-AT                                EXPIRES-AT\n1696759698  2023-10-08T11:08:18+01:00 (4 hours ago)  <none>\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-policy", "title": "argocd proj role remove-policy Command Reference", "description": "Remove a policy from a role within a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:01", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_remove-policy/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj role remove-policy Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "e689f2a0-182b-464a-b1b9-910ad3b32621", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-policy", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj role remove-policy Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the correct project and role name when removing policies to avoid unintended access issues.\n• Always verify the current policies before making changes to ensure you are modifying the correct settings.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-policy", "title": "argocd proj role remove-policy Command Reference", "description": "Remove a policy from a role within a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:01", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_role_remove-policy/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd proj role remove-policy Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "language": "en", "readthedocs-version-slug": "stable", "scrapeId": "e689f2a0-182b-464a-b1b9-910ad3b32621", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-policy", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_role_remove-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj set Command Reference\"?\n\nAssistant: Set project parameters\n\nHere's a detailed explanation:\n\n\n## argocd proj set\nSet project parameters\n\n```\nargocd proj set PROJECT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_set", "title": "argocd proj set Command Reference", "description": "Set project parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:06", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_set/", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj set Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "628aebbd-39b7-4988-b31a-b28a73edf04e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_set", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_set/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj set Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Set project parameters with allowed cluster resources\n```yaml\nargocd proj set PROJECT --allow-cluster-resource [RES1,RES2,...]\n```\n\n### Set project parameters with denied namespaced resources\n```yaml\nargocd proj set PROJECT ---deny-namespaced-resource [RES1,RES2,...]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_set", "title": "argocd proj set Command Reference", "description": "Set project parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:06", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_set/", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj set Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "628aebbd-39b7-4988-b31a-b28a73edf04e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_set", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_set/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj set Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --allow-cluster-resource flag to specify allowed cluster level resources for a project.\n• Use the --deny-namespaced-resource flag to specify denied namespaced resources for a project.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_set", "title": "argocd proj set Command Reference", "description": "Set project parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:06", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_set/", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj set Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "628aebbd-39b7-4988-b31a-b28a73edf04e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_set", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_set/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj windows Command Reference\"?\n\nAssistant: Manage a project's sync windows\n\nHere's a detailed explanation:\n\n\n## argocd proj windows\nManage a project's sync windows\n\n```\nargocd proj windows [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows", "title": "argocd proj windows Command Reference", "description": "Manage a project's sync windows", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:12", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows/", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd proj windows Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "14cf907d-48a2-46c4-a6d3-7ad3c3a3e16f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj windows Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Add a sync window to a project\n```yaml\nargocd proj windows add my-project \\\n--schedule \"0 0 * * 1-5\" \\\n--duration 3600 \\\n--prune\n```\n\n### Delete a sync window from a project\n```yaml\nargocd proj windows delete <project-name> <window-id>\n```\n\n### List project sync windows\n```yaml\nargocd proj windows list <project-name>\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows", "title": "argocd proj windows Command Reference", "description": "Manage a project's sync windows", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:12", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows/", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd proj windows Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "14cf907d-48a2-46c4-a6d3-7ad3c3a3e16f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj windows Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command options.\n• Ensure to specify the correct project name and window ID when deleting a sync window.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows", "title": "argocd proj windows Command Reference", "description": "Manage a project's sync windows", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:12", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows/", "language": "en", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd proj windows Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "14cf907d-48a2-46c4-a6d3-7ad3c3a3e16f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj windows add Command Reference\"?\n\nAssistant: Add a sync window to a project\n\nHere's a detailed explanation:\n\n\n## argocd proj windows add\nAdd a sync window to a project\n\n```\nargocd proj windows add PROJECT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_add", "title": "argocd proj windows add Command Reference", "description": "Add a sync window to a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:18", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj windows add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_add/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "scrapeId": "2cd523e2-8c89-4fc8-9070-05ba9685fc4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj windows add Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Add a 1 hour allow sync window\n```yaml\nargocd proj windows add PROJECT \\\n    --kind allow \\\n    --schedule \"0 22 * * *\" \\\n    --duration 1h \\\n    --applications \"*\"\n```\n\n### Add a deny sync window with the ability to manually sync\n```yaml\nargocd proj windows add PROJECT \\\n    --kind deny \\\n    --schedule \"30 10 * * *\" \\\n    --duration 30m \\\n    --applications \"prod-\\*,website\" \\\n    --namespaces \"default,\\*-prod\" \\\n    --clusters \"prod,staging\" \\\n    --manual-sync\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_add", "title": "argocd proj windows add Command Reference", "description": "Add a sync window to a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:18", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj windows add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_add/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "scrapeId": "2cd523e2-8c89-4fc8-9070-05ba9685fc4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj windows add Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use wildcards in application, namespace, and cluster names for flexibility in scheduling sync windows.\n• Ensure the schedule is in valid cron format to avoid errors in execution.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_add", "title": "argocd proj windows add Command Reference", "description": "Add a sync window to a project", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:37:18", "type": "best_practices", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "argocd proj windows add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_add/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "scrapeId": "2cd523e2-8c89-4fc8-9070-05ba9685fc4d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj windows delete Command Reference\"?\n\nAssistant: Delete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\"\n\nHere's a detailed explanation:\n\n\n## argocd proj windows delete\nDelete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\"\n\n## Examples\n```\n#Delete a sync window from a project (default) with ID 0\nargocd proj windows delete default 0\n\n#Delete a sync window from a project (new-project) with ID 1\nargocd proj windows delete new-project 1\n```\n\n\n## Options\n```\n  -h, --help   help for delete\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_delete", "title": "argocd proj windows delete Command Reference", "description": "Delete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\"", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:37:31", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj windows delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_delete/", "scrapeId": "1d4a72f0-aeaf-4d07-96b5-34ddd9ee659a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj windows delete Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Delete a sync window from a project (default) with ID 0\n```yaml\nargocd proj windows delete default 0\n```\n\n### Delete a sync window from a project (new-project) with ID 1\n```yaml\nargocd proj windows delete new-project 1\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_delete", "title": "argocd proj windows delete Command Reference", "description": "Delete a sync window from a project. Requires ID which can be found by running \"argocd proj windows list PROJECT\"", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:37:31", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj windows delete Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_delete/", "scrapeId": "1d4a72f0-aeaf-4d07-96b5-34ddd9ee659a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_delete", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj windows disable-manual-sync Command Reference\"?\n\nAssistant: Disable manual sync for a sync window\n\nHere's a detailed explanation:\n\n\n## argocd proj windows disable-manual-sync\nDisable manual sync for a sync window.\n\n### Synopsis\nDisable manual sync for a sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\".\n\n## Examples\n```\n#Disable manual sync for a sync window for the Project\nargocd proj windows disable-manual-sync PROJECT ID\n\n#Disabling manual sync for a windows set on the default project with Id 0\nargocd proj windows disable-manual-sync default 0\n```\n\n## Options\n```\n  -h, --help   help for disable-manual-sync\n```\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_disable-manual-sync", "title": "argocd proj windows disable-manual-sync Command Reference", "description": "Disable manual sync for a sync window", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:37:45", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj windows disable-manual-sync Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_disable-manual-sync/", "language": "en", "scrapeId": "8717d8c1-6941-4446-a4d4-8e9295f7e4e1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_disable-manual-sync", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_disable-manual-sync/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj windows disable-manual-sync Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command to disable manual sync for a sync window\n```yaml\nargocd proj windows disable-manual-sync PROJECT ID [flags]\n```\n\n### Example 1\n```yaml\nargocd proj windows disable-manual-sync PROJECT ID\n```\n\n### Example 2\n```yaml\nargocd proj windows disable-manual-sync default 0\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_disable-manual-sync", "title": "argocd proj windows disable-manual-sync Command Reference", "description": "Disable manual sync for a sync window", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:37:45", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd proj windows disable-manual-sync Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_disable-manual-sync/", "language": "en", "scrapeId": "8717d8c1-6941-4446-a4d4-8e9295f7e4e1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_disable-manual-sync", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_disable-manual-sync/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj windows enable-manual-sync Command Reference\"?\n\nAssistant: Enable manual sync for a sync window\n\nHere's a detailed explanation:\n\n\n## argocd proj windows enable-manual-sync\nEnable manual sync for a sync window.\n\n### Synopsis\nEnable manual sync for a sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\".\n\n## Examples\n```\n#Enabling manual sync for a general case\nargocd proj windows enable-manual-sync PROJECT ID\n\n#Enabling manual sync for a windows set on the default project with Id 2\nargocd proj windows enable-manual-sync default 2\n\n#Enabling manual sync with a custom message\nargocd proj windows enable-manual-sync my-app-project --message \"Manual sync initiated by admin\"\n```\n\n## Options\n```\n  -h, --help   help for enable-manual-sync\n```\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_enable-manual-sync", "title": "argocd proj windows enable-manual-sync Command Reference", "description": "Enable manual sync for a sync window", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:38:05", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_enable-manual-sync/", "title": "argocd proj windows enable-manual-sync Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "d484192f-c997-4555-b21a-f187f98b92bc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_enable-manual-sync", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_enable-manual-sync/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj windows enable-manual-sync Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Enabling manual sync for a general case\n```yaml\nargocd proj windows enable-manual-sync PROJECT ID\n```\n\n### Enabling manual sync for a windows set on the default project with Id 2\n```yaml\nargocd proj windows enable-manual-sync default 2\n```\n\n### Enabling manual sync with a custom message\n```yaml\nargocd proj windows enable-manual-sync my-app-project --message \"Manual sync initiated by admin\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_enable-manual-sync", "title": "argocd proj windows enable-manual-sync Command Reference", "description": "Enable manual sync for a sync window", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 03:38:05", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_enable-manual-sync/", "title": "argocd proj windows enable-manual-sync Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "d484192f-c997-4555-b21a-f187f98b92bc", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_enable-manual-sync", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_enable-manual-sync/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj windows list Command Reference\"?\n\nAssistant: List project sync windows\n\nHere's a detailed explanation:\n\n\n## argocd proj windows list\nList project sync windows\n\n```\nargocd proj windows list PROJECT [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_list", "title": "argocd proj windows list Command Reference", "description": "List project sync windows", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:38:10", "type": "overview", "page_metadata": {"title": "argocd proj windows list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_list/", "scrapeId": "203a1138-83af-4ac5-b9a5-b3aafad56807", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj windows list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### List project windows\n```yaml\nargocd proj windows list PROJECT\n```\n\n### List project windows in yaml format\n```yaml\nargocd proj windows list PROJECT -o yaml\n```\n\n### List project windows info for a project name (test-project)\n```yaml\nargocd proj windows list test-project\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_list", "title": "argocd proj windows list Command Reference", "description": "List project sync windows", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:38:10", "type": "code_examples", "page_metadata": {"title": "argocd proj windows list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_list/", "scrapeId": "203a1138-83af-4ac5-b9a5-b3aafad56807", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd proj windows list Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format as json, yaml, or wide.\n• For help with the command, use the -h or --help flag.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_list", "title": "argocd proj windows list Command Reference", "description": "List project sync windows", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:38:10", "type": "best_practices", "page_metadata": {"title": "argocd proj windows list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_list/", "scrapeId": "203a1138-83af-4ac5-b9a5-b3aafad56807", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd proj windows update Command Reference\"?\n\nAssistant: Update a project sync window\n\nHere's a detailed explanation:\n\n\n## argocd proj windows update\nUpdate a project sync window\n\n## Synopsis\nUpdate a project sync window. Requires ID which can be found by running \"argocd proj windows list PROJECT\"\n\n## Examples\n# Change a sync window's schedule\nargocd proj windows update PROJECT ID \\\n    --schedule \"0 20 * * *\"\n\n## Options\n      --applications strings   Applications that the schedule will be applied to. Comma separated, wildcards supported (e.g. --applications prod-*,website)\n      --clusters strings       Clusters that the schedule will be applied to. Comma separated, wildcards supported (e.g. --clusters prod,staging)\n      --duration string        Sync window duration. (e.g. --duration 1h)\n  -h, --help                   help for update\n      --namespaces strings     Namespaces that the schedule will be applied to. Comma separated, wildcards supported (e.g. --namespaces default,*-prod)\n      --schedule string        Sync window schedule in cron format. (e.g. --schedule \"0 22 * * *\")\n      --time-zone string       Time zone of the sync window. (e.g. --time-zone \"America/New_York\") (default \"UTC\")\n\n## Options inherited from parent commands\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_update", "title": "argocd proj windows update Command Reference", "description": "Update a project sync window", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 03:38:26", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_update/", "title": "argocd proj windows update Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "9ede7115-1cad-4f83-927a-8cee77934afd", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_update", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd proj windows update Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Change a sync window's schedule\n```yaml\nargocd proj windows update PROJECT ID \\\n    --schedule \"0 20 * * *\"\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_update", "title": "argocd proj windows update Command Reference", "description": "Update a project sync window", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 03:38:26", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_proj_windows_update/", "title": "argocd proj windows update Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "scrapeId": "9ede7115-1cad-4f83-927a-8cee77934afd", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_update", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_proj_windows_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd relogin Command Reference\"?\n\nAssistant: Refresh an expired authenticate token\n\nHere's a detailed explanation:\n\n\n## argocd relogin\nRefresh an expired authenticate token\n\n## Synopsis\nRefresh an expired authenticate token\n\n```\nargocd relogin [flags]\n```\n\n\n## Examples\n```\n# Reinitiates the login with previous contexts\nargocd relogin\n\n# Reinitiates the login with password\nargocd relogin --password YOUR_PASSWORD\n\n# Configure direct access using Kubernetes API server\nargocd login cd.argoproj.io --core\n\n# If user logged in with - \"argocd login cd.argoproj.io\" with sso login\n# The command - \"argocd relogin\" will Reinitiates SSO login and updates the server context\n```\n\n\n## Options\n```\n  -h, --help                 help for relogin\n      --password string      The password of an account to authenticate\n      --sso-launch-browser   Automatically launch the default browser when performing SSO login (default true)\n      --sso-port int         Port to run local OAuth2 login application (default 8085)\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_relogin", "title": "argocd relogin Command Reference", "description": "Refresh an expired authenticate token", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 03:38:44", "type": "overview", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd relogin Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_relogin/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "028ded73-2e67-4118-abf8-b1e85690b84e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_relogin", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_relogin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd relogin Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Reinitiates the login with previous contexts\n```yaml\nargocd relogin\n```\n\n### Reinitiates the login with password\n```yaml\nargocd relogin --password YOUR_PASSWORD\n```\n\n### Configure direct access using Kubernetes API server\n```yaml\nargocd login cd.argoproj.io --core\n```\n\n### Reinitiates SSO login\n```yaml\nargocd relogin\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_relogin", "title": "argocd relogin Command Reference", "description": "Refresh an expired authenticate token", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 03:38:44", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd relogin Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_relogin/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "028ded73-2e67-4118-abf8-b1e85690b84e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_relogin", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_relogin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd relogin Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --password flag to authenticate with a password if needed.\n• Consider using --sso-launch-browser for SSO logins to simplify the process.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_relogin", "title": "argocd relogin Command Reference", "description": "Refresh an expired authenticate token", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 03:38:44", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd relogin Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/commands/argocd_relogin/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "028ded73-2e67-4118-abf8-b1e85690b84e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_relogin", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_relogin/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd repo Command Reference\"?\n\nAssistant: Manage repository connection parameters\n\nHere's a detailed explanation:\n\n\n## argocd repo\nManage repository connection parameters\n\n```\nargocd repo [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo", "title": "argocd repo Command Reference", "description": "Manage repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:38:48", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo/", "readthedocs-http-status": "200", "language": "en", "title": "argocd repo Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b0356d17-323d-4bb1-81f2-8dda37f1f9e8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd repo Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n# Add git repository connection parameters\nargocd repo add git@git.example.com:repos/repo\n\n# Get a Configured Repository by URL\nargocd repo get https://github.com/yourusername/your-repo.git\n\n# List Configured Repositories\nargocd repo list\n\n# Remove Repository Credentials\nargocd repo rm https://github.com/yourusername/your-repo.git\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo", "title": "argocd repo Command Reference", "description": "Manage repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:38:48", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo/", "readthedocs-http-status": "200", "language": "en", "title": "argocd repo Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b0356d17-323d-4bb1-81f2-8dda37f1f9e8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd repo Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `--help` flag to get more information about specific commands and options.\n• Ensure to use secure connections by verifying server certificates when using HTTPS.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo", "title": "argocd repo Command Reference", "description": "Manage repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:38:48", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo/", "readthedocs-http-status": "200", "language": "en", "title": "argocd repo Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "b0356d17-323d-4bb1-81f2-8dda37f1f9e8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd repo add Command Reference\"?\n\nAssistant: Add git repository connection parameters\n\nHere's a detailed explanation:\n\n\n## argocd repo add\nAdd git repository connection parameters\n\n```\nargocd repo add REPOURL [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_add", "title": "argocd repo add Command Reference", "description": "Add git repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:02", "type": "overview", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd repo add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo_add/", "scrapeId": "7ea12724-7c73-4ba2-85f5-b592a2678cf1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd repo add Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Add a Git repository via SSH using a private key for authentication, ignoring the server's host key\n```yaml\nargocd repo add git@git.example.com:repos/repo --insecure-ignore-host-key --ssh-private-key-path ~/id_rsa\n```\n\n### Add a Git repository via SSH on a non-default port\n```yaml\nargocd repo add ssh://git@git.example.com:2222/repos/repo --ssh-private-key-path ~/id_rsa\n```\n\n### Add a Git repository via SSH using socks5 proxy with no proxy credentials\n```yaml\nargocd repo add ssh://git@github.com/argoproj/argocd-example-apps --ssh-private-key-path ~/id_rsa --proxy socks5://your.proxy.server.ip:1080\n```\n\n### Add a Git repository via SSH using socks5 proxy with proxy credentials\n```yaml\nargocd repo add ssh://git@github.com/argoproj/argocd-example-apps --ssh-private-key-path ~/id_rsa --proxy socks5://username:password@your.proxy.server.ip:1080\n```\n\n### Add a private Git repository via HTTPS using username/password and TLS client certificates\n```yaml\nargocd repo add https://git.example.com/repos/repo --username git --password secret --tls-client-cert-path ~/mycert.crt --tls-client-cert-key-path ~/mycert.key\n```\n\n### Add a private Git repository via HTTPS using username/password without verifying the server's TLS certificate\n```yaml\nargocd repo add https://git.example.com/repos/repo --username git --password secret --insecure-skip-server-verification\n```\n\n### Add a public Helm repository named 'stable' via HTTPS\n```yaml\nargocd repo add https://charts.helm.sh/stable --type helm --name stable\n```\n\n### Add a private Helm repository named 'stable' via HTTPS\n```yaml\nargocd repo add https://charts.helm.sh/stable --type helm --name stable --username test --password test\n```\n\n### Add a private Helm OCI-based repository named 'stable' via HTTPS\n```yaml\nargocd repo add helm-oci-registry.cn-zhangjiakou.cr.aliyuncs.com --type helm --name stable --enable-oci --username test --password test\n```\n\n### Add a private Git repository on GitHub.com via GitHub App\n```yaml\nargocd repo add https://git.example.com/repos/repo --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem\n```\n\n### Add a private Git repository on GitHub Enterprise via GitHub App\n```yaml\nargocd repo add https://ghe.example.com/repos/repo --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem --github-app-enterprise-base-url https://ghe.example.com/api/v3\n```\n\n### Add a private Git repository on Google Cloud Sources via GCP service account credentials\n```yaml\nargocd repo add https://source.developers.google.com/p/my-google-cloud-project/r/my-repo --gcp-service-account-key-path service-account-key.json\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_add", "title": "argocd repo add Command Reference", "description": "Add git repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:02", "type": "code_examples", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd repo add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo_add/", "scrapeId": "7ea12724-7c73-4ba2-85f5-b592a2678cf1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd repo add Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use SSH for secure connections when possible.\n• Always verify server certificates unless you have a specific reason to skip verification.\n• Use the appropriate authentication method for your repository type (SSH, HTTPS, GitHub App, etc.).\n• For Helm repositories, specify the type and name to avoid confusion.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_add", "title": "argocd repo add Command Reference", "description": "Add git repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:02", "type": "best_practices", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd repo add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo_add/", "scrapeId": "7ea12724-7c73-4ba2-85f5-b592a2678cf1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd repo get Command Reference\"?\n\nAssistant: Get a configured repository by URL\n\nHere's a detailed explanation:\n\n\n## argocd repo get\nGet a configured repository by URL\n\n```\nargocd repo get [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_get", "title": "argocd repo get Command Reference", "description": "Get a configured repository by URL", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:39:18", "type": "overview", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd repo get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo_get/", "readthedocs-http-status": "200", "scrapeId": "e00f319b-f2fb-4769-b4d3-39f1d51207da", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd repo get Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```\n  -h, --help             help for get\n  -o, --output string    Output format. One of: json|yaml|wide|url (default \"wide\")\n      --project string   project of the repository\n      --refresh string   Force a cache refresh on connection status , must be one of: 'hard'\n```\n```\n\n### Options inherited from parent commands\n```yaml\n```\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n```\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_get", "title": "argocd repo get Command Reference", "description": "Get a configured repository by URL", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:39:18", "type": "code_examples", "page_metadata": {"language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd repo get Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo_get/", "readthedocs-http-status": "200", "scrapeId": "e00f319b-f2fb-4769-b4d3-39f1d51207da", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_get", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd repo list Command Reference\"?\n\nAssistant: List configured repositories\n\nHere's a detailed explanation:\n\n\n## argocd repo list\nList configured repositories\n\n```\nargocd repo list [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_list", "title": "argocd repo list Command Reference", "description": "List configured repositories", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:23", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd repo list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo_list/", "readthedocs-http-status": "200", "scrapeId": "1a6f8c95-7466-421d-958e-dbdc97446bf7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd repo list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd repo list [flags]\n```\n\n### Options\n```yaml\n  -h, --help             help for list\n  -o, --output string    Output format. One of: json|yaml|wide|url (default \"wide\")\n      --refresh string   Force a cache refresh on connection status , must be one of: 'hard'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_list", "title": "argocd repo list Command Reference", "description": "List configured repositories", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:23", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd repo list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo_list/", "readthedocs-http-status": "200", "scrapeId": "1a6f8c95-7466-421d-958e-dbdc97446bf7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd repo list Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format that best suits your needs, such as json or yaml.\n• Consider using the --refresh option to ensure you are viewing the most current repository status.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_list", "title": "argocd repo list Command Reference", "description": "List configured repositories", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:23", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "title": "argocd repo list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo_list/", "readthedocs-http-status": "200", "scrapeId": "1a6f8c95-7466-421d-958e-dbdc97446bf7", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd repo rm Command Reference\"?\n\nAssistant: Remove repository credentials\n\nHere's a detailed explanation:\n\n\n## argocd repo rm\nRemove repository credentials\n\n```\nargocd repo rm REPO [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_rm", "title": "argocd repo rm Command Reference", "description": "Remove repository credentials", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:39:38", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo_rm/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "argocd repo rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "3c56460f-346f-4e0b-8d1f-669ec6dffcf1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd repo rm Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nargocd repo rm REPO [flags]\n```\n\n### Options\n```yaml\n  -h, --help             help for rm\n      --project string   project of the repository\n\n```\n\n### Options inherited from parent commands\n```yaml\n      --argocd-context string           The name of the Argo-CD server context to use\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --kube-context string             Directs the command to the given kube-context\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --server string                   Argo CD server address\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_rm", "title": "argocd repo rm Command Reference", "description": "Remove repository credentials", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:39:38", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repo_rm/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "title": "argocd repo rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "3c56460f-346f-4e0b-8d1f-669ec6dffcf1", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repo_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd repocreds Command Reference\"?\n\nAssistant: Manage repository connection parameters\n\nHere's a detailed explanation:\n\n\n## argocd repocreds\nManage repository connection parameters\n\n```\nargocd repocreds [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds", "title": "argocd repocreds Command Reference", "description": "Manage repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:43", "type": "overview", "page_metadata": {"language": "en", "title": "argocd repocreds Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "5bf90676-c351-4c11-94da-10825fd60a59", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd repocreds Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Add credentials with user/pass authentication\n```yaml\nargocd repocreds add URL --username USERNAME --password PASSWORD\n```\n\n### List all the configured repository credentials\n```yaml\nargocd repocreds list\n```\n\n### Remove credentials for the repositories with specified URL\n```yaml\nargocd repocreds rm URL\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds", "title": "argocd repocreds Command Reference", "description": "Manage repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:43", "type": "code_examples", "page_metadata": {"language": "en", "title": "argocd repocreds Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "5bf90676-c351-4c11-94da-10825fd60a59", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd repocreds Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --username and --password flags to add credentials securely.\n• Always verify the server's certificate to maintain a secure connection.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds", "title": "argocd repocreds Command Reference", "description": "Manage repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:43", "type": "best_practices", "page_metadata": {"language": "en", "title": "argocd repocreds Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds/", "readthedocs-http-status": "200", "readthedocs-version-slug": "stable", "scrapeId": "5bf90676-c351-4c11-94da-10825fd60a59", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd repocreds add Command Reference\"?\n\nAssistant: Add git repository connection parameters\n\nHere's a detailed explanation:\n\n\n## argocd repocreds add\nAdd git repository connection parameters\n\n```\nargocd repocreds add REPOURL [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_add", "title": "argocd repocreds add Command Reference", "description": "Add git repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:50", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd repocreds add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds_add/", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "18ac0cd3-2c8c-4172-9b57-6f5eb1430347", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd repocreds add Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Add credentials with user/pass authentication\n```yaml\nargocd repocreds add https://git.example.com/repos/ --username git --password secret\n```\n\n### Add credentials with SSH private key authentication\n```yaml\nargocd repocreds add ssh://git@git.example.com/repos/ --ssh-private-key-path ~/.ssh/id_rsa\n```\n\n### Add credentials with GitHub App authentication\n```yaml\nargocd repocreds add https://github.com/repos/ --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem\n```\n\n### Add credentials with GitHub App authentication for GitHub Enterprise\n```yaml\nargocd repocreds add https://ghe.example.com/repos/ --github-app-id 1 --github-app-installation-id 2 --github-app-private-key-path test.private-key.pem --github-app-enterprise-base-url https://ghe.example.com/api/v3\n```\n\n### Add credentials with helm oci registry\n```yaml\nargocd repocreds add localhost:5000/myrepo --enable-oci --type helm\n```\n\n### Add credentials with GCP credentials\n```yaml\nargocd repocreds add https://source.developers.google.com/p/my-google-cloud-project/r/ --gcp-service-account-key-path service-account-key.json\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_add", "title": "argocd repocreds add Command Reference", "description": "Add git repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:50", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd repocreds add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds_add/", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "18ac0cd3-2c8c-4172-9b57-6f5eb1430347", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd repocreds add Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --enable-oci flag to enable helm-oci support for the repository.\n• Use the --force-http-basic-auth flag to enforce basic authentication when connecting via HTTP.\n• Specify the path to the GCP service account key using --gcp-service-account-key-path.\n• For GitHub Enterprise, set the base URL using --github-app-enterprise-base-url.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_add", "title": "argocd repocreds add Command Reference", "description": "Add git repository connection parameters", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:50", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd repocreds add Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds_add/", "readthedocs-http-status": "200", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "18ac0cd3-2c8c-4172-9b57-6f5eb1430347", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_add", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd repocreds list Command Reference\"?\n\nAssistant: List configured repository credentials\n\nHere's a detailed explanation:\n\n\n## argocd repocreds list\nList configured repository credentials\n\n```\nargocd repocreds list [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_list", "title": "argocd repocreds list Command Reference", "description": "List configured repository credentials", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:56", "type": "overview", "page_metadata": {"title": "argocd repocreds list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds_list/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "625a2b8b-33eb-4c4d-8096-9fc3b8e2548f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd repocreds list Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # List all repo urls\n  argocd repocreds list\n\n  # List all repo urls in json format\n  argocd repocreds list -o json\n\n  # List all repo urls in yaml format\n  argocd repocreds list -o yaml\n\n  # List all repo urls in url format\n  argocd repocreds list -o url\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_list", "title": "argocd repocreds list Command Reference", "description": "List configured repository credentials", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:56", "type": "code_examples", "page_metadata": {"title": "argocd repocreds list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds_list/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "625a2b8b-33eb-4c4d-8096-9fc3b8e2548f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd repocreds list Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format as json, yaml, or url for better readability.\n• Ensure to set the appropriate context and authentication tokens for successful command execution.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_list", "title": "argocd repocreds list Command Reference", "description": "List configured repository credentials", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:39:56", "type": "best_practices", "page_metadata": {"title": "argocd repocreds list Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds_list/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "scrapeId": "625a2b8b-33eb-4c4d-8096-9fc3b8e2548f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_list", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd repocreds rm Command Reference\"?\n\nAssistant: Remove repository credentials\n\nHere's a detailed explanation:\n\n\n## argocd repocreds rm\nRemove repository credentials\n\n```\nargocd repocreds rm CREDSURL [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_rm", "title": "argocd repocreds rm Command Reference", "description": "Remove repository credentials", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:40:00", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds_rm/", "title": "argocd repocreds rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "6e52cb08-6dc1-4f6d-8e21-21af607f1da0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd repocreds rm Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Remove credentials for a repository\n```yaml\n# Remove credentials for the repositories with URL https://git.example.com/repos\nargocd repocreds rm https://git.example.com/repos/\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_rm", "title": "argocd repocreds rm Command Reference", "description": "Remove repository credentials", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:40:00", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds_rm/", "title": "argocd repocreds rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "6e52cb08-6dc1-4f6d-8e21-21af607f1da0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd repocreds rm Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_rm", "title": "argocd repocreds rm Command Reference", "description": "Remove repository credentials", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:40:00", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/user-guide/commands/argocd_repocreds_rm/", "title": "argocd repocreds rm Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "6e52cb08-6dc1-4f6d-8e21-21af607f1da0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_rm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_repocreds_rm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd version Command Reference\"?\n\nAssistant: Print version information\n\nHere's a detailed explanation:\n\n\n## argocd version\nPrint version information\n\n```\nargocd version [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_version", "title": "argocd version Command Reference", "description": "Print version information", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:40:35", "type": "overview", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_version/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "argocd version Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "scrapeId": "deee3ca5-6e0c-4d03-891e-150eeb97ea2a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_version", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_version/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd version Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Examples\n```yaml\n  # Print the full version of client and server to stdout\n  argocd version\n\n  # Print only full version of the client - no connection to server will be made\n  argocd version --client\n\n  # Print the full version of client and server in JSON format\n  argocd version -o json\n\n  # Print only client and server core version strings in YAML format\n  argocd version --short -o yaml\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_version", "title": "argocd version Command Reference", "description": "Print version information", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:40:35", "type": "code_examples", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_version/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "argocd version Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "scrapeId": "deee3ca5-6e0c-4d03-891e-150eeb97ea2a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_version", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_version/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd version Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --client flag to get the client version without connecting to the server.\n• Output can be formatted in JSON or YAML using the -o option.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_version", "title": "argocd version Command Reference", "description": "Print version information", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:40:35", "type": "best_practices", "page_metadata": {"readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/user-guide/commands/argocd_version/", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "argocd version Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "scrapeId": "deee3ca5-6e0c-4d03-891e-150eeb97ea2a", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_version", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_version/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Vulnerabilities in Ubuntu:24.04 Packages\"?\n\nAssistant: This document outlines various vulnerabilities found in packages for Ubuntu:24.04, detailing their severity, affected modules, and remediation steps.\n\nHere's a detailed explanation:\n\n\n## Insecure Storage of Sensitive Information\n- Manifest file: quay.io/argoproj/argocd:latest/argoproj/argocd › Dockerfile\n- Package Manager: ubuntu:24.04\n- Vulnerable module: pam/libpam0g\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest and pam/libpam0g@1.5.3-5ubuntu5.1\n\n### Detailed paths\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › shadow/login@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › util-linux@2.39.3-9ubuntu6.1 › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › apt@2.7.14build2 › adduser@3.137ubuntu1 › shadow/passwd@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › apt@2.7.14build2 › adduser@3.137ubuntu1 › shadow/passwd@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam-modules@1.5.3-5ubuntu5.1 › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › apt@2.7.14build2 › adduser@3.137ubuntu1 › shadow/passwd@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam-modules@1.5.3-5ubuntu5.1 › pam/libpam-modules-bin@1.5.3-5ubuntu5.1 › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › pam/libpam-modules-bin@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › pam/libpam-runtime@1.5.3-5ubuntu5.1 › pam/libpam-modules@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › shadow/login@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam-modules@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › apt@2.7.14build2 › adduser@3.137ubuntu1 › shadow/passwd@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam-modules@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › pam/libpam-runtime@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › shadow/login@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam-runtime@1.5.3-5ubuntu5.1\n\n## NVD Description\nA vulnerability was found in PAM. The secret information is stored in memory, where the attacker can trigger the victim program to execute by sending characters to its standard input (stdin). As this occurs, the attacker can train the branch predictor to execute an ROP chain speculatively. This flaw could result in leaked passwords, such as those found in /etc/shadow while performing authentications.\n\n## Remediation\nThere is no fixed version for Ubuntu:24.04 pam.\n\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-10041](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-10041)\n- [https://access.redhat.com/security/cve/CVE-2024-10041](https://access.redhat.com/security/cve/CVE-2024-10041)\n- [https://bugzilla.redhat.com/show_bug.cgi?id=2319212](https://bugzilla.redhat.com/show_bug.cgi?id=2319212)\n- [https://access.redhat.com/errata/RHSA-2024:9941](https://access.redhat.com/errata/RHSA-2024:9941)\n- [https://access.redhat.com/errata/RHSA-2024:10379](https://access.redhat.com/errata/RHSA-2024:10379)\n\n[More about this vulnerability](https://snyk.io/vuln/SNYK-UBUNTU2404-PAM-8303372)\n\n## Improper Authentication\n- Manifest file: quay.io/argoproj/argocd:latest/argoproj/argocd › Dockerfile\n- Package Manager: ubuntu:24.04\n- Vulnerable module: pam/libpam0g\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest and pam/libpam0g@1.5.3-5ubuntu5.1\n\n### Detailed paths\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › shadow/login@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › util-linux@2.39.3-9ubuntu6.1 › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › apt@2.7.14build2 › adduser@3.137ubuntu1 › shadow/passwd@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › apt@2.7.14build2 › adduser@3.137ubuntu1 › shadow/passwd@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam-modules@1.5.3-5ubuntu5.1 › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › apt@2.7.14build2 › adduser@3.137ubuntu1 › shadow/passwd@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam-modules@1.5.3-5ubuntu5.1 › pam/libpam-modules-bin@1.5.3-5ubuntu5.1 › pam/libpam0g@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › pam/libpam-modules-bin@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › pam/libpam-runtime@1.5.3-5ubuntu5.1 › pam/libpam-modules@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › shadow/login@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam-modules@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › apt@2.7.14build2 › adduser@3.137ubuntu1 › shadow/passwd@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam-modules@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › pam/libpam-runtime@1.5.3-5ubuntu5.1\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › shadow/login@1:4.13+dfsg1-4ubuntu3.2 › pam/libpam-runtime@1.5.3-5ubuntu5.1\n\n## NVD Description\nA flaw was found in pam_access, where certain rules in its configuration file are mistakenly treated as hostnames. This vulnerability allows attackers to trick the system by pretending to be a trusted hostname, gaining unauthorized access. This issue poses a risk for systems that rely on this feature to control who can access certain services or terminals.\n\n## Remediation\nThere is no fixed version for Ubuntu:24.04 pam.\n\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-10963](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-10963)\n- [https://access.redhat.com/security/cve/CVE-2024-10963](https://access.redhat.com/security/cve/CVE-2024-10963)\n- [https://bugzilla.redhat.com/show_bug.cgi?id=2324291](https://bugzilla.redhat.com/show_bug.cgi?id=2324291)\n\n[More about this vulnerability](https://snyk.io/vuln/SNYK-UBUNTU2404-PAM-8352843)\n\n## CVE-2024-26462\n- Manifest file: quay.io/argoproj/argocd:latest/argoproj/argocd › Dockerfile\n- Package Manager: ubuntu:24.04\n- Vulnerable module: krb5/libk5crypto3\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest, git@1:2.43.0-1ubuntu7.1 and others\n\n### Detailed paths\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › git@1:2.43.0-1ubuntu7.1 › curl/libcurl3t64-gnutls@8.5.0-2ubuntu10.5 › krb5/libgssapi-krb5-2@1.20.1-6ubuntu2.2 › krb5/libk5crypto3@1.20.1-6ubuntu2.2\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › git@1:2.43.0-1ubuntu7.1 › curl/libcurl3t64-gnutls@8.5.0-2ubuntu10.5 › krb5/libgssapi-krb5-2@1.20.1-6ubuntu2.2 › krb5/libkrb5-3@1.20.1-6ubuntu2.2 › krb5/libk5crypto3@1.20.1-6ubuntu2.2\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › git@1:2.43.0-1ubuntu7.1 › curl/libcurl3t64-gnutls@8.5.0-2ubuntu10.5 › krb5/libgssapi-krb5-2@1.20.1-6ubuntu2.2 › krb5/libkrb5support0@1.20.1-6ubuntu2.2\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › git@1:2.43.0-1ubuntu7.1 › curl/libcurl3t64-gnutls@8.5.0-2ubuntu10.5 › krb5/libgssapi-krb5-2@1.20.1-6ubuntu2.2 › krb5/libkrb5-3@1.20.1-6ubuntu2.2 › krb5/libkrb5support0@1.20.1-6ubuntu2.2\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › git@1:2.43.0-1ubuntu7.1 › curl/libcurl3t64-gnutls@8.5.0-2ubuntu10.5 › krb5/libgssapi-krb5-2@1.20.1-6ubuntu2.2 › krb5/libkrb5-3@1.20.1-6ubuntu2.2\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › openssh/openssh-client@1:9.6p1-3ubuntu13.5 › krb5/libgssapi-krb5-2@1.20.1-6ubuntu2.2\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › git@1:2.43.0-1ubuntu7.1 › curl/libcurl3t64-gnutls@8.5.0-2ubuntu10.5 › krb5/libgssapi-krb5-2@1.20.1-6ubuntu2.2\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › git@1:2.43.0-1ubuntu7.1 › curl/libcurl3t64-gnutls@8.5.0-2ubuntu10.5 › libssh/libssh-4@0.10.6-2build2 › krb5/libgssapi-krb5-2@1.20.1-6ubuntu2.2\n- Introduced through: docker-image|quay.io/argoproj/argocd@latest › krb5/krb5-locales@1.20.1-6ubuntu2.2\n\n## NVD Description\nKerberos 5 (aka krb5) 1.21.2 contains a memory leak vulnerability in /krb5/src/kdc/ndr.c.\n\n## Remediation\nThere is no fixed version for Ubuntu:24.04 krb5.\n\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-26462](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-26462)\n- [https://github.com/LuMingYinDetect/krb5_defects/blob/main/krb5_detect_3.md](https://github.com/LuMingYinDetect/krb5_defects/blob/main/krb5_detect_3.md)\n- [https://security.netapp.com/advisory/ntap-20240415-0012/](https://security.netapp.com/advisory/ntap-20240415-0012/)\n\n[More about this vulnerability](https://snyk.io/vuln/SNYK-UBUNTU2404-KRB5-6693037)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/quay.io_argoproj_argocd_latest.html", "title": "Vulnerabilities in Ubuntu:24.04 Packages", "description": "This document outlines various vulnerabilities found in packages for Ubuntu:24.04, detailing their severity, affected modules, and remediation steps.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 03:41:20", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "viewport": "width=device-width, initial-scale=1.0", "description": "20 known vulnerabilities found in 100 vulnerable dependency paths.", "title": "Snyk test report", "readthedocs-resolver-filename": "/snyk/master/quay.io_argoproj_argocd_latest.html", "language": "en", "readthedocs-project-slug": "argo-cd", "favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "readthedocs-http-status": "200", "scrapeId": "35599f48-63fa-4b22-81ec-cc5ccec3ad68", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/quay.io_argoproj_argocd_latest.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/quay.io_argoproj_argocd_latest.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"License Vulnerabilities and Denial of Service (ReDoS)\"?\n\nAssistant: This document outlines various license vulnerabilities and a specific Denial of Service vulnerability related to the Argo CD project.\n\nHere's a detailed explanation:\n\n\n## LGPL-3.0 license\n- Manifest file: /argo-cd/argoproj/argo-cd/v2 › go.mod\n- Package Manager: golang\n- Module: gopkg.in/retry.v1\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0, github.com/Azure/kubelogin/pkg/token@0.1.5 and others\n\n### Detailed paths\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/Azure/kubelogin/pkg/token@0.1.5 › github.com/Azure/kubelogin/pkg/internal/token@0.1.5 › gopkg.in/retry.v1@1.0.3\n\n[More about this vulnerability](https://snyk.io/vuln/snyk:lic:golang:gopkg.in:retry.v1:LGPL-3.0)\n\n## MPL-2.0 license\n- Manifest file: /argo-cd/argoproj/argo-cd/v2 › go.mod\n- Package Manager: golang\n- Module: github.com/r3labs/diff\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 and github.com/r3labs/diff@1.1.0\n\n### Detailed paths\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/r3labs/diff@1.1.0\n\n[More about this vulnerability](https://snyk.io/vuln/snyk:lic:golang:github.com:r3labs:diff:MPL-2.0)\n\n## MPL-2.0 license\n- Manifest file: /argo-cd/argoproj/argo-cd/v2 › go.mod\n- Package Manager: golang\n- Module: github.com/hashicorp/go-version\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0, code.gitea.io/sdk/gitea@0.19.0 and others\n\n### Detailed paths\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › code.gitea.io/sdk/gitea@0.19.0 › github.com/hashicorp/go-version@1.6.0\n\n[More about this vulnerability](https://snyk.io/vuln/snyk:lic:golang:github.com:hashicorp:go-version:MPL-2.0)\n\n## MPL-2.0 license\n- Manifest file: /argo-cd/argoproj/argo-cd/v2 › go.mod\n- Package Manager: golang\n- Module: github.com/hashicorp/go-retryablehttp\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 and github.com/hashicorp/go-retryablehttp@0.7.7\n\n### Detailed paths\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/hashicorp/go-retryablehttp@0.7.7\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/argoproj/notifications-engine/pkg/services@#2fef5c9049fd › github.com/hashicorp/go-retryablehttp@0.7.7\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/xanzy/go-gitlab@0.114.0 › github.com/hashicorp/go-retryablehttp@0.7.7\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/argoproj/notifications-engine/pkg/subscriptions@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/services@#2fef5c9049fd › github.com/hashicorp/go-retryablehttp@0.7.7\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/argoproj/notifications-engine/pkg/cmd@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/services@#2fef5c9049fd › github.com/hashicorp/go-retryablehttp@0.7.7\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/argoproj/notifications-engine/pkg/api@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/subscriptions@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/services@#2fef5c9049fd › github.com/hashicorp/go-retryablehttp@0.7.7\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/argoproj/notifications-engine/pkg/controller@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/subscriptions@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/services@#2fef5c9049fd › github.com/hashicorp/go-retryablehttp@0.7.7\n\n[More about this vulnerability](https://snyk.io/vuln/snyk:lic:golang:github.com:hashicorp:go-retryablehttp:MPL-2.0)\n\n## MPL-2.0 license\n- Manifest file: /argo-cd/argoproj/argo-cd/v2 › go.mod\n- Package Manager: golang\n- Module: github.com/hashicorp/go-cleanhttp\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0, github.com/hashicorp/go-retryablehttp@0.7.7 and others\n\n### Detailed paths\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/hashicorp/go-retryablehttp@0.7.7 › github.com/hashicorp/go-cleanhttp@0.5.2\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/xanzy/go-gitlab@0.114.0 › github.com/hashicorp/go-cleanhttp@0.5.2\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/xanzy/go-gitlab@0.114.0 › github.com/hashicorp/go-retryablehttp@0.7.7 › github.com/hashicorp/go-cleanhttp@0.5.2\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/argoproj/notifications-engine/pkg/services@#2fef5c9049fd › github.com/opsgenie/opsgenie-go-sdk-v2/client@1.0.5 › github.com/hashicorp/go-retryablehttp@0.7.7 › github.com/hashicorp/go-cleanhttp@0.5.2\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/argoproj/notifications-engine/pkg/subscriptions@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/services@#2fef5c9049fd › github.com/opsgenie/opsgenie-go-sdk-v2/client@1.0.5 › github.com/hashicorp/go-retryablehttp@0.7.7 › github.com/hashicorp/go-cleanhttp@0.5.2\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/argoproj/notifications-engine/pkg/cmd@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/services@#2fef5c9049fd › github.com/opsgenie/opsgenie-go-sdk-v2/client@1.0.5 › github.com/hashicorp/go-retryablehttp@0.7.7 › github.com/hashicorp/go-cleanhttp@0.5.2\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/argoproj/notifications-engine/pkg/api@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/subscriptions@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/services@#2fef5c9049fd › github.com/opsgenie/opsgenie-go-sdk-v2/client@1.0.5 › github.com/hashicorp/go-retryablehttp@0.7.7 › github.com/hashicorp/go-cleanhttp@0.5.2\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/argoproj/notifications-engine/pkg/controller@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/subscriptions@#2fef5c9049fd › github.com/argoproj/notifications-engine/pkg/services@#2fef5c9049fd › github.com/opsgenie/opsgenie-go-sdk-v2/client@1.0.5 › github.com/hashicorp/go-retryablehttp@0.7.7 › github.com/hashicorp/go-cleanhttp@0.5.2\n\n[More about this vulnerability](https://snyk.io/vuln/snyk:lic:golang:github.com:hashicorp:go-cleanhttp:MPL-2.0)\n\n## MPL-2.0 license\n- Manifest file: /argo-cd/argoproj/argo-cd/v2 › go.mod\n- Package Manager: golang\n- Module: github.com/gosimple/slug\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 and github.com/gosimple/slug@1.14.0\n\n### Detailed paths\n- Introduced through: github.com/argoproj/argo-cd/v2@0.0.0 › github.com/gosimple/slug@1.14.0\n\n[More about this vulnerability](https://snyk.io/vuln/snyk:lic:golang:github.com:gosimple:slug:MPL-2.0)\n\n## Regular Expression Denial of Service (ReDoS)\n- Manifest file: /argo-cd › ui/yarn.lock\n- Package Manager: npm\n- Vulnerable module: foundation-sites\n- Introduced through: argo-cd-ui@1.0.0 and foundation-sites@6.8.1\n\n### Detailed paths\n- Introduced through: argo-cd-ui@1.0.0 › foundation-sites@6.8.1\n- Introduced through: argo-cd-ui@1.0.0 › argo-ui@1.0.0 › foundation-sites@6.8.1\n\n## Overview\nfoundation-sites is a responsive front-end framework. Affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to inefficient backtracking in the regular expressions used in URL forms.\n\n## PoC\n```\nhttps://www.''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n```\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIn most cases, it doesn't take very long for a regex engine to find a match:\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n        0.04s user 0.01s system 95% cpu 0.052 total\n\n        $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n        1.79s user 0.02s system 99% cpu 1.812 total\n```\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as catastrophic backtracking.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| --- | --: | --: |\n| ACCCX | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14 | 65,553 |\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for foundation-sites.\n\n## References\n- [GitHub Advisory](https://securitylab.github.com/advisories/GHSL-2020-290-redos-foundation-sites)\n- [GitHub Issue](https://github.com/foundation/foundation-sites/issues/12180)\n- [Vulnerable Code](https://github.com/foundation/foundation-sites/blob/develop/js/foundation.abide.js#L864)\n\n[More about this vulnerability](https://snyk.io/vuln/SNYK-JS-FOUNDATIONSITES-8310364)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-test.html", "title": "License Vulnerabilities and Denial of Service (ReDoS)", "description": "This document outlines various license vulnerabilities and a specific Denial of Service vulnerability related to the Argo CD project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 03:42:14", "type": "overview", "page_metadata": {"favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "viewport": "width=device-width, initial-scale=1.0", "title": "Snyk test report", "description": "7 known vulnerabilities found in 26 vulnerable dependency paths.", "readthedocs-resolver-filename": "/snyk/master/argocd-test.html", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "34fa6bd5-0a31-4ada-a6a2-61018981401c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-test.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-test.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"License Vulnerabilities and Denial of Service (ReDoS)\"?\n\nAssistant: Here are some code examples:\n\n### Regular Expression Denial of Service (ReDoS) PoC\n```yaml\nhttps://www.''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n```\n\n### Regular Expression Example\n```yaml\nregex = /A(B|C+)+D/\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-test.html", "title": "License Vulnerabilities and Denial of Service (ReDoS)", "description": "This document outlines various license vulnerabilities and a specific Denial of Service vulnerability related to the Argo CD project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 03:42:14", "type": "code_examples", "page_metadata": {"favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "viewport": "width=device-width, initial-scale=1.0", "title": "Snyk test report", "description": "7 known vulnerabilities found in 26 vulnerable dependency paths.", "readthedocs-resolver-filename": "/snyk/master/argocd-test.html", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "34fa6bd5-0a31-4ada-a6a2-61018981401c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-test.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-test.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"License Vulnerabilities and Denial of Service (ReDoS)\"?\n\nAssistant: Here are the recommended best practices:\n\n• Be cautious with regular expressions to avoid catastrophic backtracking.\n• Regularly update dependencies to mitigate vulnerabilities.\n• Review and audit third-party libraries for license compliance.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-test.html", "title": "License Vulnerabilities and Denial of Service (ReDoS)", "description": "This document outlines various license vulnerabilities and a specific Denial of Service vulnerability related to the Argo CD project.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 03:42:14", "type": "best_practices", "page_metadata": {"favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "viewport": "width=device-width, initial-scale=1.0", "title": "Snyk test report", "description": "7 known vulnerabilities found in 26 vulnerable dependency paths.", "readthedocs-resolver-filename": "/snyk/master/argocd-test.html", "readthedocs-http-status": "200", "language": "en", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "scrapeId": "34fa6bd5-0a31-4ada-a6a2-61018981401c", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-test.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-test.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Vulnerabilities in golang and Alpine packages\"?\n\nAssistant: This document outlines various vulnerabilities found in golang packages and Alpine packages, including their severity, affected modules, and remediation steps.\n\nHere's a detailed explanation:\n\n\n## Incorrect Implementation of Authentication Algorithm\nAffected versions of the package golang.org/x/crypto/ssh are vulnerable to Incorrect Implementation of Authentication Algorithm when the key passed in the last call before a connection is established is assumed to be the key used for authentication. It is not necessarily the authentication key in use, and this allows attackers who can control the key cache by making their own carefully-timed connections to bypass authorization with subsequent legitimate ServerConfig.PublicKeyCallback callbacks. Note: The assumed caching behavior of this callback is not documented and is therefore considered human error, but the project maintainers have observed reliance on it for authorization decisions in production. In fact, the assumption is negated in the documentation, which states \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" The behavior after upgrading still allows the possibility of an attacker forcing their own key to be the one in the cache when the callback is invoked if the client is using a different authentication method such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth. It is therefore recommended to rely on the return values of the connection itself, found in ServerConn.Permissions for further authorization steps.\n\n## Remediation\nUpgrade golang.org/x/crypto/ssh to version 0.31.0 or higher.\n\n## References\n- [GitHub Commit](https://github.com/golang/crypto/commit/b4f1988a35dee11ec3e05d6bf3e90b695fbd8909)\n- [GitHub Issue](https://github.com/golang/go/issues/20094)\n- [go.dev Commit](https://go.dev/cl/635315)\n- [go.dev Issue](https://go.dev/issue/70779)\n- [Google Groups Forum](https://groups.google.com/g/golang-announce/c/-nPEi39gI4Q/m/cGVPJCqdAQAJ)\n- [Go Vulnerability Database](https://pkg.go.dev/vuln/GO-2024-3321)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "title": "Vulnerabilities in golang and Alpine packages", "description": "This document outlines various vulnerabilities found in golang packages and Alpine packages, including their severity, affected modules, and remediation steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:42:33", "type": "overview", "page_metadata": {"title": "Snyk test report", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "description": "23 known vulnerabilities found in 44 vulnerable dependency paths.", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "readthedocs-http-status": "200", "favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "2afcb85e-bab6-4317-913d-01373162fd34", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Vulnerabilities in golang and Alpine packages\"?\n\nAssistant: Here are some code examples:\n\n### Vulnerability Details\n```yaml\n- Manifest file: ghcr.io/dexidp/dex:v2.41.1/hairyhenderson/gomplate/v4 › /usr/local/bin/gomplate\n- Package Manager: golang\n- Vulnerable module: golang.org/x/crypto/ssh\n- Introduced through: github.com/hairyhenderson/gomplate/v4@* and golang.org/x/crypto/ssh@v0.24.0\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "title": "Vulnerabilities in golang and Alpine packages", "description": "This document outlines various vulnerabilities found in golang packages and Alpine packages, including their severity, affected modules, and remediation steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:42:33", "type": "code_examples", "page_metadata": {"title": "Snyk test report", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "description": "23 known vulnerabilities found in 44 vulnerable dependency paths.", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "readthedocs-http-status": "200", "favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "2afcb85e-bab6-4317-913d-01373162fd34", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Vulnerabilities in golang and Alpine packages\"?\n\nAssistant: Here are the recommended best practices:\n\n• Rely on the return values of the connection itself, found in ServerConn.Permissions for further authorization steps.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "title": "Vulnerabilities in golang and Alpine packages", "description": "This document outlines various vulnerabilities found in golang packages and Alpine packages, including their severity, affected modules, and remediation steps.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:42:33", "type": "best_practices", "page_metadata": {"title": "Snyk test report", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "description": "23 known vulnerabilities found in 44 vulnerable dependency paths.", "readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "readthedocs-http-status": "200", "favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "readthedocs-project-slug": "argo-cd", "scrapeId": "2afcb85e-bab6-4317-913d-01373162fd34", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/ghcr.io_dexidp_dex_v2.41.1.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"404 - Not found\"?\n\nAssistant: This page indicates that the requested resource could not be found on the server.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe 404 Not Found error indicates that the server cannot find the requested resource. This can happen for various reasons, such as a mistyped URL or a resource that has been moved or deleted.\n\n## Common Causes\n1. Incorrect URL: The URL entered may be incorrect or misspelled.\n2. Moved Resource: The resource may have been moved to a different location without a redirect.\n3. Deleted Resource: The resource may have been deleted from the server.\n\n## How to Handle 404 Errors\nWhen a 404 error occurs, it is important to provide users with a helpful message. Consider including a search bar or links to popular pages to assist users in finding what they are looking for.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/ghcr.io_dexidp_dex_v2.38.0.html", "title": "404 - Not found", "description": "This page indicates that the requested resource could not be found on the server.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:42:38", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/snyk/v2.12.3/ghcr.io_dexidp_dex_v2.38.0.html", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/stable/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "404", "title": "Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "07319988-028f-4abe-9fe8-a72ad7963135", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/ghcr.io_dexidp_dex_v2.38.0.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/ghcr.io_dexidp_dex_v2.38.0.html", "statusCode": 404, "error": "Not Found"}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"404 - Not found\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always provide a user-friendly message when a 404 error occurs.\n• Include links to popular pages or a search bar to help users navigate.\n• Monitor 404 errors in your server logs to identify broken links.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/ghcr.io_dexidp_dex_v2.38.0.html", "title": "404 - Not found", "description": "This page indicates that the requested resource could not be found on the server.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:42:38", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/snyk/v2.12.3/ghcr.io_dexidp_dex_v2.38.0.html", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/stable/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "readthedocs-http-status": "404", "title": "Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "07319988-028f-4abe-9fe8-a72ad7963135", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/ghcr.io_dexidp_dex_v2.38.0.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/ghcr.io_dexidp_dex_v2.38.0.html", "statusCode": 404, "error": "Not Found"}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"404 - Not found\"?\n\nAssistant: This page indicates that the requested resource could not be found on the server.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe 404 Not Found error is an HTTP status code that means the server could not find the requested resource. This can happen for various reasons, such as a mistyped URL or a resource that has been moved or deleted.\n\n## Common Causes\n1. Incorrect URL: The URL entered may be incorrect or misspelled.\n2. Moved or Deleted Resource: The resource may have been moved to a different location or deleted altogether.\n3. Broken Links: Links from other pages may be outdated or broken.\n\n## How to Handle 404 Errors\nWhen a 404 error occurs, it is important to provide users with a helpful message. Consider implementing a custom 404 page that guides users back to the main site or provides a search function.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/redis_7.0.15-alpine.html", "title": "404 - Not found", "description": "This page indicates that the requested resource could not be found on the server.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:42:43", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/stable/assets/favicon.png", "readthedocs-resolver-filename": "/snyk/v2.11.7/redis_7.0.15-alpine.html", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "404", "scrapeId": "4c4c2663-8f41-40fa-bf9a-8c41ce0bc158", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/redis_7.0.15-alpine.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/redis_7.0.15-alpine.html", "statusCode": 404, "error": "Not Found"}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"404 - Not found\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always check the URL for typos before reporting a 404 error.\n• Implement a custom 404 page to improve user experience.\n• Regularly check for broken links on your website.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/redis_7.0.15-alpine.html", "title": "404 - Not found", "description": "This page indicates that the requested resource could not be found on the server.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:42:43", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/stable/assets/favicon.png", "readthedocs-resolver-filename": "/snyk/v2.11.7/redis_7.0.15-alpine.html", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "404", "scrapeId": "4c4c2663-8f41-40fa-bf9a-8c41ce0bc158", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/redis_7.0.15-alpine.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/redis_7.0.15-alpine.html", "statusCode": 404, "error": "Not Found"}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"CVE-2024-9143\"?\n\nAssistant: Low severity vulnerability in openssl/libcrypto3 introduced through Alpine:3.20.\n\nHere's a detailed explanation:\n\n\n## Detailed paths\n- Introduced through:\ndocker-image|public.ecr.aws/docker/library/redis@7.0.15-alpine\n›\nopenssl/libcrypto3@3.3.2-r0\n\n- Introduced through:\ndocker-image|public.ecr.aws/docker/library/redis@7.0.15-alpine\n›\n.redis-rundeps@20240906.232324\n›\nopenssl/libcrypto3@3.3.2-r0\n\n- Introduced through:\ndocker-image|public.ecr.aws/docker/library/redis@7.0.15-alpine\n›\napk-tools/apk-tools@2.14.4-r0\n›\nopenssl/libcrypto3@3.3.2-r0\n\n- Introduced through:\ndocker-image|public.ecr.aws/docker/library/redis@7.0.15-alpine\n›\nbusybox/ssl_client@1.36.1-r29\n›\nopenssl/libcrypto3@3.3.2-r0\n\n- Introduced through:\ndocker-image|public.ecr.aws/docker/library/redis@7.0.15-alpine\n›\n.redis-rundeps@20240906.232324\n›\nopenssl/libssl3@3.3.2-r0\n›\nopenssl/libcrypto3@3.3.2-r0\n\n- Introduced through:\ndocker-image|public.ecr.aws/docker/library/redis@7.0.15-alpine\n›\nopenssl/libssl3@3.3.2-r0\n\n- Introduced through:\ndocker-image|public.ecr.aws/docker/library/redis@7.0.15-alpine\n›\n.redis-rundeps@20240906.232324\n›\nopenssl/libssl3@3.3.2-r0\n\n- Introduced through:\ndocker-image|public.ecr.aws/docker/library/redis@7.0.15-alpine\n›\napk-tools/apk-tools@2.14.4-r0\n›\nopenssl/libssl3@3.3.2-r0\n\n- Introduced through:\ndocker-image|public.ecr.aws/docker/library/redis@7.0.15-alpine\n›\nbusybox/ssl_client@1.36.1-r29\n›\nopenssl/libssl3@3.3.2-r0\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "title": "CVE-2024-9143", "description": "Low severity vulnerability in openssl/libcrypto3 introduced through Alpine:3.20.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:42:57", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "readthedocs-version-slug": "stable", "description": "1 known vulnerabilities found in 9 vulnerable dependency paths.", "readthedocs-project-slug": "argo-cd", "favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "title": "Snyk test report", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/snyk/master/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "scrapeId": "d1452f16-bf37-4df1-8b03-ec162d0b9b5f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"CVE-2024-9143\"?\n\nAssistant: Here are the recommended best practices:\n\n• Upgrade Alpine:3.20 openssl to version 3.3.2-r1 or higher.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "title": "CVE-2024-9143", "description": "Low severity vulnerability in openssl/libcrypto3 introduced through Alpine:3.20.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 03:42:57", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "readthedocs-version-slug": "stable", "description": "1 known vulnerabilities found in 9 vulnerable dependency paths.", "readthedocs-project-slug": "argo-cd", "favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "title": "Snyk test report", "readthedocs-http-status": "200", "language": "en", "readthedocs-resolver-filename": "/snyk/master/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "scrapeId": "d1452f16-bf37-4df1-8b03-ec162d0b9b5f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"404 - Not found\"?\n\nAssistant: This page indicates that the requested resource could not be found on the server.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe 404 Not Found error indicates that the server cannot find the requested resource. This can occur for various reasons, such as a mistyped URL or a resource that has been moved or deleted.\n\n## Common Causes\n1. Incorrect URL: The URL entered may be incorrect or misspelled.\n2. Moved Resource: The resource may have been moved to a different location without a redirect.\n3. Deleted Resource: The resource may have been deleted from the server.\n\n## How to Handle 404 Errors\nWhen encountering a 404 error, users should check the URL for typos, use the website's navigation to find the desired content, or return to the homepage.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "title": "404 - Not found", "description": "This page indicates that the requested resource could not be found on the server.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:43:03", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/snyk/v2.12.3/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "title": "Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/stable/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "404", "scrapeId": "a1198b00-7674-42c7-8afe-e632737945eb", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "statusCode": 404, "error": "Not Found"}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"404 - Not found\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always provide a custom 404 page to guide users back to relevant content.\n• Log 404 errors to monitor broken links and improve user experience.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "title": "404 - Not found", "description": "This page indicates that the requested resource could not be found on the server.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:43:03", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "readthedocs-resolver-filename": "/snyk/v2.12.3/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "title": "Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/stable/assets/favicon.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "404", "scrapeId": "a1198b00-7674-42c7-8afe-e632737945eb", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.12.3/public.ecr.aws_docker_library_redis_7.0.15-alpine.html", "statusCode": 404, "error": "Not Found"}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Kubernetes Security Issues in Argo CD\"?\n\nAssistant: This document outlines various security issues related to Kubernetes manifests in Argo CD, including roles with dangerous permissions, outdated images, and resource limits.\n\nHere's a detailed explanation:\n\n\n## Role or ClusterRole with dangerous permissions (high severity)\nUsing this role grants dangerous permissions. For a ClusterRole this would be considered high severity.\n\n- Public ID: [SNYK-CC-K8S-47](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47)\n- Introduced through:\n  - DocId: 17\n  - rules[5]\n  - resources\n- Line number: 22859\n\n## Remediation\nConsider removing these permissions\n\n[More about this issue](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47)\n\n## Role or ClusterRole with dangerous permissions (medium severity)\nUsing this role grants dangerous permissions. For a ClusterRole this would be considered high severity.\n\n- Public ID: [SNYK-CC-K8S-47](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47)\n- Introduced through:\n  - DocId: 10\n  - rules[0]\n  - resources\n- Line number: 22540\n\n## Remediation\nConsider removing these permissions\n\n[More about this issue](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47)\n\n## Container could be running with outdated image (low severity)\nThe container may run with outdated or unauthorized image.\n\n- Public ID: [SNYK-CC-K8S-42](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42)\n- Introduced through:\n  - DocId: 48\n  - spec\n  - template\n  - spec\n  - initContainers[secret-init]\n  - imagePullPolicy\n- Line number: 23833\n\n## Remediation\nSet `imagePullPolicy` attribute to `Always`\n\n[More about this issue](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42)\n\n## Container has no CPU limit (low severity)\nCPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.\n\n- Public ID: [SNYK-CC-K8S-5](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5)\n- Introduced through:\n  - DocId: 45\n  - input\n  - spec\n  - template\n  - spec\n  - containers[argocd-applicationset-controller]\n  - resources\n  - limits\n  - cpu\n- Line number: 23352\n\n## Remediation\nAdd `resources.limits.cpu` field with required CPU limit value\n\n[More about this issue](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-install.html", "title": "Kubernetes Security Issues in Argo CD", "description": "This document outlines various security issues related to Kubernetes manifests in Argo CD, including roles with dangerous permissions, outdated images, and resource limits.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 03:43:19", "type": "overview", "page_metadata": {"description": " known vulnerabilities found in .", "favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "readthedocs-resolver-filename": "/snyk/master/argocd-iac-install.html", "language": "en", "title": "Snyk test report", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width, initial-scale=1.0", "readthedocs-http-status": "200", "scrapeId": "8515350d-61e0-469b-b091-96be8c8bbc9f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-install.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-install.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Kubernetes Security Issues in Argo CD\"?\n\nAssistant: Here are the recommended best practices:\n\n• Consider removing dangerous permissions from roles or ClusterRoles.\n• Set `imagePullPolicy` to `Always` to ensure the latest image is used.\n• Add `resources.limits.cpu` and `resources.limits.memory` to prevent resource overconsumption.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-install.html", "title": "Kubernetes Security Issues in Argo CD", "description": "This document outlines various security issues related to Kubernetes manifests in Argo CD, including roles with dangerous permissions, outdated images, and resource limits.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 03:43:19", "type": "best_practices", "page_metadata": {"description": " known vulnerabilities found in .", "favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "readthedocs-resolver-filename": "/snyk/master/argocd-iac-install.html", "language": "en", "title": "Snyk test report", "readthedocs-project-slug": "argo-cd", "readthedocs-version-slug": "stable", "viewport": "width=device-width, initial-scale=1.0", "readthedocs-http-status": "200", "scrapeId": "8515350d-61e0-469b-b091-96be8c8bbc9f", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-install.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-install.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Kubernetes Security Issues in Argo CD\"?\n\nAssistant: This document outlines various security issues related to Kubernetes configurations in the Argo CD project, including roles with dangerous permissions, outdated images, and missing resource limits.\n\nHere's a detailed explanation:\n\n\n## Role or ClusterRole with dangerous permissions\nUsing this role grants dangerous permissions. For a ClusterRole this would be considered high severity. Public ID: [SNYK-CC-K8S-47](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47) Introduced through: [DocId: 7] › rules[0] › resources Line number: 77\n\n## Impact\nUsing this role grants dangerous permissions. For a ClusterRole this would be considered high severity.\n\n## Remediation\nConsider removing these permissions.\n\n## Container could be running with outdated image\nThe container may run with outdated or unauthorized image. Public ID: [SNYK-CC-K8S-42](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42) Introduced through: [DocId: 39] › spec › template › spec › initContainers[secret-init] › imagePullPolicy Line number: 1156\n\n## Impact\nThe container may run with outdated or unauthorized image.\n\n## Remediation\nSet `imagePullPolicy` attribute to `Always`.\n\n## Container has no CPU limit\nCPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability. Public ID: [SNYK-CC-K8S-5](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5) Introduced through: [DocId: 36] › input › spec › template › spec › containers[argocd-applicationset-controller] › resources › limits › cpu Line number: 675\n\n## Impact\nCPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.\n\n## Remediation\nAdd `resources.limits.cpu` field with required CPU limit value.\n\n## Container is running without liveness probe\nKubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods. Public ID: [SNYK-CC-K8S-41](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41) Introduced through: [DocId: 36] › spec › template › spec › containers[argocd-applicationset-controller] › livenessProbe Line number: 675\n\n## Impact\nKubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods.\n\n## Remediation\nAdd `livenessProbe` attribute.\n\n## Container is running without memory limit\nContainers without memory limits are more likely to be terminated when the node runs out of memory. Public ID: [SNYK-CC-K8S-4](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4) Introduced through: [DocId: 36] › input › spec › template › spec › containers[argocd-applicationset-controller] › resources › limits › memory Line number: 675\n\n## Impact\nContainers without memory limits are more likely to be terminated when the node runs out of memory.\n\n## Remediation\nSet `resources.limits.memory` value.\n\n## Container's or Pod's UID could clash with host's UID\nUID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass. Public ID: [SNYK-CC-K8S-11](https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11) Introduced through: [DocId: 36] › input › spec › template › spec › containers[argocd-applicationset-controller] › securityContext › runAsUser Line number: 834\n\n## Impact\nUID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass.\n\n## Remediation\nSet `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-namespace-install.html", "title": "Kubernetes Security Issues in Argo CD", "description": "This document outlines various security issues related to Kubernetes configurations in the Argo CD project, including roles with dangerous permissions, outdated images, and missing resource limits.", "has_code_examples": false, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 03:43:41", "type": "overview", "page_metadata": {"favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "language": "en", "description": " known vulnerabilities found in .", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/snyk/master/argocd-iac-namespace-install.html", "title": "Snyk test report", "viewport": "width=device-width, initial-scale=1.0", "readthedocs-version-slug": "stable", "scrapeId": "babd1146-3a10-4aa2-8e35-ff567c95a4d3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-namespace-install.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-namespace-install.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Kubernetes Security Issues in Argo CD\"?\n\nAssistant: Here are the recommended best practices:\n\n• Consider removing dangerous permissions from roles or ClusterRoles.\n• Set imagePullPolicy to Always to ensure the latest images are used.\n• Always define CPU and memory limits for containers to prevent resource exhaustion.\n• Implement liveness probes to ensure Kubernetes can manage pod health effectively.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-namespace-install.html", "title": "Kubernetes Security Issues in Argo CD", "description": "This document outlines various security issues related to Kubernetes configurations in the Argo CD project, including roles with dangerous permissions, outdated images, and missing resource limits.", "has_code_examples": false, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-28 03:43:41", "type": "best_practices", "page_metadata": {"favicon": "https://res.cloudinary.com/snyk/image/upload/v1468845142/favicon/favicon.png", "language": "en", "description": " known vulnerabilities found in .", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/snyk/master/argocd-iac-namespace-install.html", "title": "Snyk test report", "viewport": "width=device-width, initial-scale=1.0", "readthedocs-version-slug": "stable", "scrapeId": "babd1146-3a10-4aa2-8e35-ff567c95a4d3", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-namespace-install.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/master/argocd-iac-namespace-install.html", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"404 - Not found\"?\n\nAssistant: This page indicates that the requested resource could not be found on the server.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe 404 Not Found error indicates that the server cannot find the requested resource. This can occur for various reasons, such as a mistyped URL or a resource that has been moved or deleted.\n\n## Common Causes\n1. Incorrect URL: The URL entered may be incorrect or misspelled.\n2. Moved or Deleted Resource: The resource may have been moved to a different location or deleted altogether.\n3. Server Configuration: The server may not be configured to handle the request properly.\n\n## How to Handle 404 Errors\nWhen encountering a 404 error, users should check the URL for typos, try refreshing the page, or navigate back to the homepage. Webmasters should ensure that proper redirects are in place for moved resources.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/argocd-iac-install.html", "title": "404 - Not found", "description": "This page indicates that the requested resource could not be found on the server.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:43:46", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/snyk/v2.11.7/argocd-iac-install.html", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/stable/assets/favicon.png", "title": "Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "404", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "90896669-f447-49fd-a3dc-d72382a12c62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/argocd-iac-install.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/argocd-iac-install.html", "statusCode": 404, "error": "Not Found"}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"404 - Not found\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always provide a user-friendly 404 error page that guides users back to relevant content.\n• Implement logging for 404 errors to identify broken links and improve site navigation.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/argocd-iac-install.html", "title": "404 - Not found", "description": "This page indicates that the requested resource could not be found on the server.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 03:43:46", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/snyk/v2.11.7/argocd-iac-install.html", "readthedocs-version-slug": "stable", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/stable/assets/favicon.png", "title": "Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "readthedocs-http-status": "404", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "90896669-f447-49fd-a3dc-d72382a12c62", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/argocd-iac-install.html", "url": "https://argo-cd.readthedocs.io/en/stable/snyk/v2.11.7/argocd-iac-install.html", "statusCode": 404, "error": "Not Found"}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-tls-certs-cm.yaml example\"?\n\nAssistant: An example of an argocd-tls-certs-cm.yaml file.\n\nHere's a detailed explanation:\n\n\n## Example Configuration\nAn example of an argocd-tls-certs-cm.yaml file:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-tls-certs-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  server.example.com: |\n    -----BEGIN CERTIFICATE-----\n    MIIF1zCCA7+gAwIBAgIUQdTcSHY2Sxd3Tq/v1eIEZPCNbOowDQYJKoZIhvcNAQEL\n    BQAwezELMAkGA1UEBhMCREUxFTATBgNVBAgMDExvd2VyIFNheG9ueTEQMA4GA1UE\n    BwwHSGFub3ZlcjEVMBMGA1UECgwMVGVzdGluZyBDb3JwMRIwEAYDVQQLDAlUZXN0\n    c3VpdGUxGDAWBgNVBAMMD2Jhci5leGFtcGxlLmNvbTAeFw0xOTA3MDgxMzU2MTda\n    Fw0yMDA3MDcxMzU2MTdaMHsxCzAJBgNVBAYTAkRFMRUwEwYDVQQIDAxMb3dlciBT\n    YXhvbnkxEDAOBgNVBAcMB0hhbm92ZXIxFTATBgNVBAoMDFRlc3RpbmcgQ29ycDES\n    MBAGA1UECwwJVGVzdHN1aXRlMRgwFgYDVQQDDA9iYXIuZXhhbXBsZS5jb20wggIi\n    MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCv4mHMdVUcafmaSHVpUM0zZWp5\n    NFXfboxA4inuOkE8kZlbGSe7wiG9WqLirdr39Ts+WSAFA6oANvbzlu3JrEQ2CHPc\n    CNQm6diPREFwcDPFCe/eMawbwkQAPVSHPts0UoRxnpZox5pn69ghncBR+jtvx+/u\n    P6HdwW0qqTvfJnfAF1hBJ4oIk2AXiip5kkIznsAh9W6WRy6nTVCeetmIepDOGe0G\n    ZJIRn/OfSz7NzKylfDCat2z3EAutyeT/5oXZoWOmGg/8T7pn/pR588GoYYKRQnp+\n    YilqCPFX+az09EqqK/iHXnkdZ/Z2fCuU+9M/Zhrnlwlygl3RuVBI6xhm/ZsXtL2E\n    Gxa61lNy6pyx5+hSxHEFEJshXLtioRd702VdLKxEOuYSXKeJDs1x9o6cJ75S6hko\n    Ml1L4zCU+xEsMcvb1iQ2n7PZdacqhkFRUVVVmJ56th8aYyX7KNX6M9CD+kMpNm6J\n    kKC1li/Iy+RI138bAvaFplajMF551kt44dSvIoJIbTr1LigudzWPqk31QaZXV/4u\n    kD1n4p/XMc9HYU/was/CmQBFqmIZedTLTtK7clkuFN6wbwzdo1wmUNgnySQuMacO\n    gxhHxxzRWxd24uLyk9Px+9U3BfVPaRLiOPaPoC58lyVOykjSgfpgbus7JS69fCq7\n    bEH4Jatp/10zkco+UQIDAQABo1MwUTAdBgNVHQ4EFgQUjXH6PHi92y4C4hQpey86\n    r6+x1ewwHwYDVR0jBBgwFoAUjXH6PHi92y4C4hQpey86r6+x1ewwDwYDVR0TAQH/\n    BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAFE4SdKsX9UsLy+Z0xuHSxhTd0jfn\n    Iih5mtzb8CDNO5oTw4z0aMeAvpsUvjJ/XjgxnkiRACXh7K9hsG2r+ageRWGevyvx\n    CaRXFbherV1kTnZw4Y9/pgZTYVWs9jlqFOppz5sStkfjsDQ5lmPJGDii/StENAz2\n    XmtiPOgfG9Upb0GAJBCuKnrU9bIcT4L20gd2F4Y14ccyjlf8UiUi192IX6yM9OjT\n    +TuXwZgqnTOq6piVgr+FTSa24qSvaXb5z/mJDLlk23npecTouLg83TNSn3R6fYQr\n    d/Y9eXuUJ8U7/qTh2Ulz071AO9KzPOmleYPTx4Xty4xAtWi1QE5NHW9/Ajlv5OtO\n    OnMNWIs7ssDJBsB7VFC8hcwf79jz7kC0xmQqDfw51Xhhk04kla+v+HZcFW2AO9so\n    6ZdVHHQnIbJa7yQJKZ+hK49IOoBR6JgdB5kymoplLLiuqZSYTcwSBZ72FYTm3iAr\n    jzvt1hxpxVDmXvRnkhRrIRhK4QgJL0jRmirBjDY+PYYd7bdRIjN7WNZLFsgplnS8\n    9w6CwG32pRlm0c8kkiQ7FXA6BYCqOsDI8f1VGQv331OpR2Ck+FTv+L7DAmg6l37W\n    +LB9LGh4OAp68ImTjqf6ioGKG0RBSznwME+r4nXtT1S/qLR6ASWUS4ViWRhbRlNK\n    XWyb96wrUlv+E8I=\n    -----END CERTIFICATE-----\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml", "title": "argocd-tls-certs-cm.yaml example", "description": "An example of an argocd-tls-certs-cm.yaml file.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:53:50", "type": "overview", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/argocd-tls-certs-cm-yaml/", "readthedocs-http-status": "200", "title": "argocd-tls-certs-cm.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "985ed1a8-c9dd-47d1-9429-5d3d62039973", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-tls-certs-cm.yaml example\"?\n\nAssistant: Here are some code examples:\n\n### argocd-tls-certs-cm.yaml Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-tls-certs-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  server.example.com: |\n    -----BEGIN CERTIFICATE-----\n    MIIF1zCCA7+gAwIBAgIUQdTcSHY2Sxd3Tq/v1eIEZPCNbOowDQYJKoZIhvcNAQEL\n    BQAwezELMAkGA1UEBhMCREUxFTATBgNVBAgMDExvd2VyIFNheG9ueTEQMA4GA1UE\n    BwwHSGFub3ZlcjEVMBMGA1UECgwMVGVzdGluZyBDb3JwMRIwEAYDVQQLDAlUZXN0\n    c3VpdGUxGDAWBgNVBAMMD2Jhci5leGFtcGxlLmNvbTAeFw0xOTA3MDgxMzU2MTda\n    Fw0yMDA3MDcxMzU2MTdaMHsxCzAJBgNVBAYTAkRFMRUwEwYDVQQIDAxMb3dlciBT\n    YXhvbnkxEDAOBgNVBAcMB0hhbm92ZXIxFTATBgNVBAoMDFRlc3RpbmcgQ29ycDES\n    MBAGA1UECwwJVGVzdHN1aXRlMRgwFgYDVQQDDA9iYXIuZXhhbXBsZS5jb20wggIi\n    MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCv4mHMdVUcafmaSHVpUM0zZWp5\n    NFXfboxA4inuOkE8kZlbGSe7wiG9WqLirdr39Ts+WSAFA6oANvbzlu3JrEQ2CHPc\n    CNQm6diPREFwcDPFCe/eMawbwkQAPVSHPts0UoRxnpZox5pn69ghncBR+jtvx+/u\n    P6HdwW0qqTvfJnfAF1hBJ4oIk2AXiip5kkIznsAh9W6WRy6nTVCeetmIepDOGe0G\n    ZJIRn/OfSz7NzKylfDCat2z3EAutyeT/5oXZoWOmGg/8T7pn/pR588GoYYKRQnp+\n    YilqCPFX+az09EqqK/iHXnkdZ/Z2fCuU+9M/Zhrnlwlygl3RuVBI6xhm/ZsXtL2E\n    Gxa61lNy6pyx5+hSxHEFEJshXLtioRd702VdLKxEOuYSXKeJDs1x9o6cJ75S6hko\n    Ml1L4zCU+xEsMcvb1iQ2n7PZdacqhkFRUVVVmJ56th8aYyX7KNX6M9CD+kMpNm6J\n    kKC1li/Iy+RI138bAvaFplajMF551kt44dSvIoJIbTr1LigudzWPqk31QaZXV/4u\n    kD1n4p/XMc9HYU/was/CmQBFqmIZedTLTtK7clkuFN6wbwzdo1wmUNgnySQuMacO\n    gxhHxxzRWxd24uLyk9Px+9U3BfVPaRLiOPaPoC58lyVOykjSgfpgbus7JS69fCq7\n    bEH4Jatp/10zkco+UQIDAQABo1MwUTAdBgNVHQ4EFgQUjXH6PHi92y4C4hQpey86\n    r6+x1ewwHwYDVR0jBBgwFoAUjXH6PHi92y4C4hQpey86r6+x1ewwDwYDVR0TAQH/\n    BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAFE4SdKsX9UsLy+Z0xuHSxhTd0jfn\n    Iih5mtzb8CDNO5oTw4z0aMeAvpsUvjJ/XjgxnkiRACXh7K9hsG2r+ageRWGevyvx\n    CaRXFbherV1kTnZw4Y9/pgZTYVWs9jlqFOppz5sStkfjsDQ5lmPJGDii/StENAz2\n    XmtiPOgfG9Upb0GAJBCuKnrU9bIcT4L20gd2F4Y14ccyjlf8UiUi192IX6yM9OjT\n    +TuXwZgqnTOq6piVgr+FTSa24qSvaXb5z/mJDLlk23npecTouLg83TNSn3R6fYQr\n    d/Y9eXuUJ8U7/qTh2Ulz071AO9KzPOmleYPTx4Xty4xAtWi1QE5NHW9/Ajlv5OtO\n    OnMNWIs7ssDJBsB7VFC8hcwf79jz7kC0xmQqDfw51Xhhk04kla+v+HZcFW2AO9so\n    6ZdVHHQnIbJa7yQJKZ+hK49IOoBR6JgdB5kymoplLLiuqZSYTcwSBZ72FYTm3iAr\n    jzvt1hxpxVDmXvRnkhRrIRhK4QgJL0jRmirBjDY+PYYd7bdRIjN7WNZLFsgplnS8\n    9w6CwG32pRlm0c8kkiQ7FXA6BYCqOsDI8f1VGQv331OpR2Ck+FTv+L7DAmg6l37W\n    +LB9LGh4OAp68ImTjqf6ioGKG0RBSznwME+r4nXtT1S/qLR6ASWUS4ViWRhbRlNK\n    XWyb96wrUlv+E8I=\n    -----END CERTIFICATE-----\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml", "title": "argocd-tls-certs-cm.yaml example", "description": "An example of an argocd-tls-certs-cm.yaml file.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:53:50", "type": "code_examples", "page_metadata": {"favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/operator-manual/argocd-tls-certs-cm-yaml/", "readthedocs-http-status": "200", "title": "argocd-tls-certs-cm.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "985ed1a8-c9dd-47d1-9429-5d3d62039973", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Understanding JSON Structure\"?\n\nAssistant: This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.\n\nHere's a detailed explanation:\n\n\n## Introduction to JSON\nJSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate.\n\n## JSON Syntax\nJSON syntax is derived from JavaScript object notation. It consists of key/value pairs, where keys are strings and values can be strings, numbers, objects, arrays, booleans, or null.\n\n## Data Types in JSON\nThe data types supported in JSON include:\n1. String\n2. Number\n3. Object\n4. Array\n5. Boolean\n6. Null\n\n## Best Practices for JSON\nWhen working with JSON, consider the following best practices:\n- Use consistent naming conventions for keys.\n- Keep the structure simple and avoid deeply nested objects.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:01:36", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Ingress Configuration - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "f0e00480-580b-42a4-82cc-36a93f108504", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Understanding JSON Structure\"?\n\nAssistant: Here are some code examples:\n\n### Basic JSON Example\n```yaml\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"isStudent\": false,\n  \"courses\": [\"Math\", \"Science\"]\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:01:36", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Ingress Configuration - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "f0e00480-580b-42a4-82cc-36a93f108504", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Understanding JSON Structure\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use double quotes for keys and string values.\n• Avoid trailing commas in objects and arrays.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:01:36", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Ingress Configuration - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "f0e00480-580b-42a4-82cc-36a93f108504", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"RBAC Configuration\"?\n\nAssistant: The RBAC feature enables restrictions of access to Argo CD resources. Argo CD does not have its own user management system and has only one built-in user, `admin`. The `admin` user is a superuser and it has unrestricted access to the system. RBAC requires SSO configuration or one or more local users setup. Once SSO or local users are configured, additional RBAC roles can be defined, and SSO groups or local users can then be mapped to roles.\n\nHere's a detailed explanation:\n\n\n## Basic Built-in Roles\nArgo CD has two pre-defined roles but RBAC configuration allows defining roles and groups (see below).\n\n- `role:readonly`: read-only access to all resources\n- `role:admin`: unrestricted access to all resources\n\nThese default built-in role definitions can be seen in [builtin-policy.csv](https://github.com/argoproj/argo-cd/blob/master/assets/builtin-policy.csv)\n\n## Default Policy for Authenticated Users\nWhen a user is authenticated in Argo CD, it will be granted the role specified in `policy.default`.\n\nRestricting Default Permissions\n\n**All authenticated users get _at least_ the permissions granted by the default policies. This access cannot be blocked** **by a `deny` rule.** It is recommended to create a new `role:authenticated` with the minimum set of permissions possible, then grant permissions to individual roles as needed.\n\n## Anonymous Access\nEnabling anonymous access to the Argo CD instance allows users to assume the default role permissions specified by `policy.default` **without being authenticated**.\n\nThe anonymous access to Argo CD can be enabled using the `users.anonymous.enabled` field in `argocd-cm` (see [argocd-cm.yaml](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/)).\n\nWarning\n\nWhen enabling anonymous access, consider creating a new default role and assigning it to the default policies with `policy.default: role:unauthenticated`.\n\n## RBAC Model Structure\nThe model syntax is based on [Casbin](https://casbin.org/docs/overview). There are two different types of syntax: one for assigning policies, and another one for assigning users to internal roles.\n\n**Group**: Allows to assign authenticated users/groups to internal roles.\n\nSyntax: `g, <user/group>, <role>`\n\n- `<user/group>`: The entity to whom the role will be assigned. It can be a local user or a user authenticated with SSO. When SSO is used, the `user` will be based on the `sub` claims, while the group is one of the values returned by the `scopes` configuration.\n- `<role>`: The internal role to which the entity will be assigned.\n\n**Policy**: Allows to assign permissions to an entity.\n\nSyntax: `p, <role/user/group>, <resource>, <action>, <object>, <effect>`\n\n- `<role/user/group>`: The entity to whom the policy will be assigned\n- `<resource>`: The type of resource on which the action is performed.\n- `<action>`: The operation that is being performed on the resource.\n- `<object>`: The object identifier representing the resource on which the action is performed. Depending on the resource, the object's format will vary.\n- `<effect>`: Whether this policy should grant or restrict the operation on the target object. One of `allow` or `deny`.\n\n## Application-Specific Policy\nSome policy only have meaning within an application. It is the case with the following resources:\n\n- `applications`\n- `applicationsets`\n- `logs`\n- `exec`\n\nWhile they can be set in the global configuration, they can also be configured in [AppProject's roles](https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-roles).\nThe expected `<object>` value in the policy structure is replaced by `<app-project>/<app-name>`.\n\nFor instance, these policies would grant `example-user` access to get any applications, but only be able to see logs in `my-app` application part of the `example-project` project.\n\n```\np, example-user, applications, get, *, allow\np, example-user, logs, get, example-project/my-app, allow\n``\n\n## Application in Any Namespaces\nWhen [application in any namespace](https://argo-cd.readthedocs.io/en/stable/operator-manual/app-any-namespace/) is enabled, the expected `<object>` value in the policy structure is replaced by `<app-project>/<app-ns>/<app-name>`. Since multiple applications could have the same name in the same project, the policy below makes sure to restrict access only to `app-namespace`.\n\n```\np, example-user, applications, get, */app-namespace/*, allow\np, example-user, logs, get, example-project/app-namespace/my-app, allow\n``\n\n## The `applications` resource\nThe `applications` resource is an [Application-Specific Policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#application-specific-policy).\n\n#### Fine-grained Permissions for `update`/ `delete` action\n\nThe `update` and `delete` actions, when granted on an application, will allow the user to perform the operation on the application itself **and** all of its resources. It can be desirable to only allow `update` or `delete` on specific resources within an application.\n\nTo do so, when the action if performed on an application's resource, the `<action>` will have the `<action>/<group>/<kind>/<ns>/<name>` format.\n\nFor instance, to grant access to `example-user` to only delete Pods in the `prod-app` Application, the policy could be:\n\n```\np, example-user, applications, delete/*/Pod/*/*, default/prod-app, allow\n``\n\n## Understand glob pattern behavior\nArgo CD RBAC does not use `/` as a separator when evaluating glob patterns. So the pattern `delete/*/kind/*` will match `delete/<group>/kind/<namespace>/<name>` but also `delete/<group>/<kind>/kind/<name>`. The fact that both of these match will generally not be a problem, because resource kinds generally contain capital letters, and namespaces cannot contain capital letters. However, it is possible for a resource kind to be lowercase. So it is better to just always include all the parts of the resource in the pattern (in other words, always use four slashes). If we want to grant access to the user to update all resources of an application, but not the application itself:\n\n```\np, example-user, applications, update/*, default/prod-app, allow\n```\n\nIf we want to explicitly deny delete of the application, but allow the user to delete Pods:\n\n```\np, example-user, applications, delete, default/prod-app, deny\np, example-user, applications, delete/*/Pod/*/*, default/prod-app, allow\n``\n\n## Disable Application permission Inheritance\nBy default, it is not possible to deny fine-grained permissions for a sub-resource if the action was **explicitly allowed on the application**. For instance, the following policies will **allow** a user to delete the Pod and any other resources in the application:\n\n```\np, example-user, applications, delete, default/prod-app, allow\np, example-user, applications, delete/*/Pod/*/*, default/prod-app, deny\n```\n\nTo change this behavior, you can set the config value `server.rbac.disableApplicationFineGrainedRBACInheritance` to `true` in the Argo CD ConfigMap `argocd-cm`. When inheritance is disabled, it is now possible to deny fine-grained permissions for a sub-resource if the action was **explicitly allowed on the application**.\n\n## The `action` action\nThe `action` action corresponds to either built-in resource customizations defined [in the Argo CD repository](https://github.com/argoproj/argo-cd/tree/master/resource_customizations), or to [custom resource actions](https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions/#custom-resource-actions) defined by you. See the [resource actions documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions/#built-in-actions) for a list of built-in actions. The `<action>` has the `action/<group>/<kind>/<action-name>` format.\n\n## The `override` action\nWhen granted along with the `sync` action, the override action will allow a user to synchronize local manifests to the Application. These manifests will be used instead of the configured source, until the next sync is performed.\n\n## The `applicationsets` resource\nThe `applicationsets` resource is an [Application-Specific policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#application-specific-policy). [ApplicationSets](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/) provide a declarative way to automatically create/update/delete Applications. Allowing the `create` action on the resource effectively grants the ability to create Applications. While it doesn't allow the user to create Applications directly, they can create Applications via an ApplicationSet.\n\n## The `logs` resource\nThe `logs` resource is an [Application-Specific Policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#application-specific-policy). When granted with the `get` action, this policy allows a user to see Pod's logs of an application via the Argo CD UI. The functionality is similar to `kubectl logs`.\n\n## The `exec` resource\nThe `exec` resource is an [Application-Specific Policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#application-specific-policy). When granted with the `create` action, this policy allows a user to `exec` into Pods of an application via the Argo CD UI. The functionality is similar to `kubectl exec`.\n\n## The `extensions` resource\nWith the `extensions` resource, it is possible to configure permissions to invoke [proxy extensions](https://argo-cd.readthedocs.io/en/stable/developer-guide/extensions/proxy-extensions/). The `extensions` RBAC validation works in conjunction with the `applications` resource. A user **needs to have read permission on the application** where the request is originated from.\n\n## The `deny` effect\nWhen `deny` is used as an effect in a policy, it will be effective if the policy matches. Even if more specific policies with the `allow` effect match as well, the `deny` will have priority. The order in which the policies appears in the policy file configuration has no impact, and the result is deterministic.\n\n## Policies Evaluation and Matching\nThe evaluation of access is done in two parts: validating against the default policy configuration, then validating against the policies for the current user. **If an action is allowed or denied by the default policies, then this effect will be effective without further evaluation**. When the effect is undefined, the evaluation will continue with subject-specific policies.\n\n## Glob matching\nWhen `glob` is used, the policy tokens are treated as single terms, without separators. Consider the following policy:\n\n```\np, example-user, applications, action/extensions/*, default/*, allow\n```\n\nWhen the `example-user` executes the `extensions/DaemonSet/test` action, the following `glob` matches will happen.\n\n## Using SSO Users/Groups\nThe `scopes` field controls which OIDC scopes to examine during RBAC enforcement (in addition to `sub` scope). If omitted, it defaults to `'[groups]'`. The scope value can be a string, or a list of strings.\n\n## Local Users/Accounts\n[Local users](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#local-usersaccounts) are assigned access by either grouping them with a role or by assigning policies directly to them.\n\n## Policy CSV Composition\nIt is possible to provide additional entries in the `argocd-rbac-cm` configmap to compose the final policy csv. In this case, the key must follow the pattern `policy.<any string>.csv`. Argo CD will concatenate all additional policies it finds with this pattern below the main one ('policy.csv'). The order of additional provided policies are determined by the key string.\n\n## Validating and testing your RBAC policies\nIf you want to ensure that your RBAC policies are working as expected, you can use the [`argocd admin settings rbac` command](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_rbac/) to validate them.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac", "title": "RBAC Configuration", "description": "The RBAC feature enables restrictions of access to Argo CD resources. Argo CD does not have its own user management system and has only one built-in user, `admin`. The `admin` user is a superuser and it has unrestricted access to the system. RBAC requires SSO configuration or one or more local users setup. Once SSO or local users are configured, additional RBAC roles can be defined, and SSO groups or local users can then be mapped to roles.", "has_code_examples": true, "has_best_practices": true, "section_count": 22, "timestamp": "2025-02-28 04:02:27", "type": "overview", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/rbac/", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "RBAC Configuration - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "146cead7-7511-43b4-88f0-f945a8392a21", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"RBAC Configuration\"?\n\nAssistant: Here are some code examples:\n\n### Example of RBAC Policy with SSO\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-rbac-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  policy.csv: |\n    p, my-org:team-alpha, applications, sync, my-project/*, allow\n    g, my-org:team-beta, role:admin\n    g, user@example.org, role:admin\n  policy.default: role:readonly\n  scopes: '[groups, email]'\n```\n\n### Example of Local User Policy\n```yaml\np, my-local-user, applications, sync, my-project/*, allow\n\np, my-local-user, role:admin\n```\n\n### Example of Policy CSV Composition\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-rbac-cm\n  namespace: argocd\ndata:\n  policy.tester-overlay.csv: |\n    p, role:tester, applications, *, */*, allow\n    p, role:tester, projects, *, *, allow\n    g, my-org:team-qa, role:tester\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac", "title": "RBAC Configuration", "description": "The RBAC feature enables restrictions of access to Argo CD resources. Argo CD does not have its own user management system and has only one built-in user, `admin`. The `admin` user is a superuser and it has unrestricted access to the system. RBAC requires SSO configuration or one or more local users setup. Once SSO or local users are configured, additional RBAC roles can be defined, and SSO groups or local users can then be mapped to roles.", "has_code_examples": true, "has_best_practices": true, "section_count": 22, "timestamp": "2025-02-28 04:02:27", "type": "code_examples", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/rbac/", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "RBAC Configuration - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "146cead7-7511-43b4-88f0-f945a8392a21", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"RBAC Configuration\"?\n\nAssistant: Here are the recommended best practices:\n\n• It is recommended to create a new `role:authenticated` with the minimum set of permissions possible, then grant permissions to individual roles as needed.\n• When enabling anonymous access, consider creating a new default role and assigning it to the default policies with `policy.default: role:unauthenticated`.\n• To avoid ambiguity, if you are using local users and SSO, it is recommended to assign policies directly to local users, and not to assign roles to local users.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac", "title": "RBAC Configuration", "description": "The RBAC feature enables restrictions of access to Argo CD resources. Argo CD does not have its own user management system and has only one built-in user, `admin`. The `admin` user is a superuser and it has unrestricted access to the system. RBAC requires SSO configuration or one or more local users setup. Once SSO or local users are configured, additional RBAC roles can be defined, and SSO groups or local users can then be mapped to roles.", "has_code_examples": true, "has_best_practices": true, "section_count": 22, "timestamp": "2025-02-28 04:02:27", "type": "best_practices", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/operator-manual/rbac/", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "RBAC Configuration - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "146cead7-7511-43b4-88f0-f945a8392a21", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Webhook\"?\n\nAssistant: The webhook notification service allows sending a generic HTTP request using the templatized request body and URL. Using Webhook you might trigger a Jenkins job, update GitHub commit status.\n\nHere's a detailed explanation:\n\n\n## Parameters\nThe Webhook notification service configuration includes following settings:\n\n- `url` \\- the url to send the webhook to\n- `headers` \\- optional, the headers to pass along with the webhook\n- `basicAuth` \\- optional, the basic authentication to pass along with the webhook\n- `insecureSkipVerify` \\- optional bool, true or false\n- `retryWaitMin` \\- Optional, the minimum wait time between retries. Default value: 1s.\n- `retryWaitMax` \\- Optional, the maximum wait time between retries. Default value: 5s.\n- `retryMax` \\- Optional, the maximum number of retries. Default value: 3.\n\n## Retry Behavior\nThe webhook service will automatically retry the request if it fails due to network errors or if the server returns a 5xx status code. The number of retries and the wait time between retries can be configured using the `retryMax`, `retryWaitMin`, and `retryWaitMax` parameters.\n\nThe wait time between retries is between `retryWaitMin` and `retryWaitMax`. If all retries fail, the `Send` method will return an error.\n\n## Configuration\nUse the following steps to configure webhook:\n\n1 Register webhook in `argocd-notifications-cm` ConfigMap:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.<webhook-name>: |\n    url: https://<hostname>/<optional-path>\n    headers: #optional headers\n    - name: <header-name>\n      value: <header-value>\n    basicAuth: #optional username password\n      username: <username>\n      password: <api-key>\n    insecureSkipVerify: true #optional bool\n```\n\n2 Define template that customizes webhook request method, path and body:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.github-commit-status: |\n    webhook:\n      <webhook-name>:\n        method: POST # one of: GET, POST, PUT, PATCH. Default value: GET\n        path: <optional-path-template>\n        body: |\n          <optional-body-template>\n  trigger.<trigger-name>: |\n    - when: app.status.operationState.phase in ['Succeeded']\n      send: [github-commit-status]\n```\n\n3 Create subscription for webhook integration:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  annotations:\n    notifications.argoproj.io/subscribe.<trigger-name>.<webhook-name>: \"\"\n```\n\n## Examples\n### Set GitHub commit status\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.github: |\n    url: https://api.github.com\n    headers: #optional headers\n    - name: Authorization\n      value: token $github-token\n```\n\n2 Define template that customizes webhook request method, path and body:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.github: |\n    url: https://api.github.com\n    headers: #optional headers\n    - name: Authorization\n      value: token $github-token\n\n  template.github-commit-status: |\n    webhook:\n      github:\n        method: POST\n        path: /repos/{{call .repo.FullNameByRepoURL .app.spec.source.repoURL}}/statuses/{{.app.status.operationState.operation.sync.revision}}\n        body: |\n          {\n            {{if eq .app.status.operationState.phase \"Running\"}} \"state\": \"pending\"{{end}}\n            {{if eq .app.status.operationState.phase \"Succeeded\"}} \"state\": \"success\"{{end}}\n            {{if eq .app.status.operationState.phase \"Error\"}} \"state\": \"error\"{{end}}\n            {{if eq .app.status.operationState.phase \"Failed\"}} \"state\": \"error\"{{end}},\n            \"description\": \"ArgoCD\",\n            \"target_url\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n            \"context\": \"continuous-delivery/{{.app.metadata.name}}\"\n          }\n```\n\n### Start Jenkins Job\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.jenkins: |\n    url: http://<jenkins-host>/job/<job-name>/build?token=<job-secret>\n    basicAuth:\n      username: <username>\n      password: <api-key>\n\ntype: Opaque\n```\n\n### Send form-data\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.form: |\n    url: https://form.example.com\n    headers:\n    - name: Content-Type\n      value: application/x-www-form-urlencoded\n\n  template.form-data: |\n    webhook:\n      form:\n        method: POST\n        body: key1=value1&key2=value2\n```\n\n### Send Slack\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.slack_webhook: |\n    url: https://hooks.slack.com/services/xxxxx\n    headers:\n    - name: Content-Type\n      value: application/json\n\n  template.send-slack: |\n    webhook:\n      slack_webhook:\n        method: POST\n        body: |\n          {\n            \"attachments\": [{\\\n              \"title\": \"{{.app.metadata.name}}\",\\\n              \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\\\n              \"color\": \"#18be52\",\\\n              \"fields\": [{\\\n                \"title\": \"Sync Status\",\\\n                \"value\": \"{{.app.status.sync.status}}\",\\\n                \"short\": true\\\n              }, {\\\n                \"title\": \"Repository\",\\\n                \"value\": \"{{.app.spec.source.repoURL}}\",\\\n                \"short\": true\\\n              }]\\\n            }]\\\n          }\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webhook", "title": "Webhook", "description": "The webhook notification service allows sending a generic HTTP request using the templatized request body and URL. Using Webhook you might trigger a Jenkins job, update GitHub commit status.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:18:29", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Webhook - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/webhook/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "f38678dc-926a-4d18-b102-000cffbbb0eb", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webhook", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webhook/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Webhook\"?\n\nAssistant: Here are some code examples:\n\n### Register webhook in ConfigMap\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.<webhook-name>: |\n    url: https://<hostname>/<optional-path>\n    headers: #optional headers\n    - name: <header-name>\n      value: <header-value>\n    basicAuth: #optional username password\n      username: <username>\n      password: <api-key>\n    insecureSkipVerify: true #optional bool\n\n```\n\n### Define template for GitHub commit status\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  template.github-commit-status: |\n    webhook:\n      <webhook-name>:\n        method: POST # one of: GET, POST, PUT, PATCH. Default value: GET\n        path: <optional-path-template>\n        body: |\n          <optional-body-template>\n  trigger.<trigger-name>: |\n    - when: app.status.operationState.phase in ['Succeeded']\n      send: [github-commit-status]\n\n```\n\n### Set GitHub commit status\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.github: |\n    url: https://api.github.com\n    headers: #optional headers\n    - name: Authorization\n      value: token $github-token\n\n```\n\n### Start Jenkins Job\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.jenkins: |\n    url: http://<jenkins-host>/job/<job-name>/build?token=<job-secret>\n    basicAuth:\n      username: <username>\n      password: <api-key>\n\ntype: Opaque\n\n```\n\n### Send form-data\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.form: |\n    url: https://form.example.com\n    headers:\n    - name: Content-Type\n      value: application/x-www-form-urlencoded\n\n  template.form-data: |\n    webhook:\n      form:\n        method: POST\n        body: key1=value1&key2=value2\n\n```\n\n### Send Slack\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-notifications-cm\ndata:\n  service.webhook.slack_webhook: |\n    url: https://hooks.slack.com/services/xxxxx\n    headers:\n    - name: Content-Type\n      value: application/json\n\n  template.send-slack: |\n    webhook:\n      slack_webhook:\n        method: POST\n        body: |\n          {\n            \"attachments\": [{\\\n              \"title\": \"{{.app.metadata.name}}\",\\\n              \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\\\n              \"color\": \"#18be52\",\\\n              \"fields\": [{\\\n                \"title\": \"Sync Status\",\\\n                \"value\": \"{{.app.status.sync.status}}\",\\\n                \"short\": true\\\n              }, {\\\n                \"title\": \"Repository\",\\\n                \"value\": \"{{.app.spec.source.repoURL}}\",\\\n                \"short\": true\\\n              }]\\\n            }]\\\n          }\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webhook", "title": "Webhook", "description": "The webhook notification service allows sending a generic HTTP request using the templatized request body and URL. Using Webhook you might trigger a Jenkins job, update GitHub commit status.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:18:29", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Webhook - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/webhook/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "f38678dc-926a-4d18-b102-000cffbbb0eb", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webhook", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webhook/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Webhook\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to validate the webhook URL and parameters before sending requests.\n• Use secure methods for storing sensitive information like API keys and passwords.\n• Monitor the webhook responses to handle errors and retries effectively.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webhook", "title": "Webhook", "description": "The webhook notification service allows sending a generic HTTP request using the templatized request body and URL. Using Webhook you might trigger a Jenkins job, update GitHub commit status.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:18:29", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Webhook - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/notifications/services/webhook/", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "f38678dc-926a-4d18-b102-000cffbbb0eb", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webhook", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/webhook/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Kustomize\"?\n\nAssistant: This page covers how to use Kustomize with Argo CD, including application manifests, patches, components, and configuration options.\n\nHere's a detailed explanation:\n\n\n## Declarative\nYou can define a Kustomize application manifest in the declarative GitOps way. Here is an example:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: kustomize-example\nspec:\n  project: default\n  source:\n    path: examples/helloWorld\n    repoURL: 'https://github.com/kubernetes-sigs/kustomize'\n    targetRevision: HEAD\n  destination:\n    namespace: default\n    server: 'https://kubernetes.default.svc'\n```\n\nIf the `kustomization.yaml` file exists at the location pointed to by `repoURL` and `path`, Argo CD will render the manifests using Kustomize.\n\nThe following configuration options are available for Kustomize:\n\n- `namePrefix` is a prefix appended to resources for Kustomize apps\n- `nameSuffix` is a suffix appended to resources for Kustomize apps\n- `images` is a list of Kustomize image overrides\n- `replicas` is a list of Kustomize replica overrides\n- `commonLabels` is a string map of additional labels\n- `labelWithoutSelector` is a boolean value which defines if the common label(s) should be applied to resource selectors and templates.\n- `forceCommonLabels` is a boolean value which defines if it's allowed to override existing labels\n- `commonAnnotations` is a string map of additional annotations\n- `namespace` is a Kubernetes resources namespace\n- `forceCommonAnnotations` is a boolean value which defines if it's allowed to override existing annotations\n- `commonAnnotationsEnvsubst` is a boolean value which enables env variables substition in annotation values\n- `patches` is a list of Kustomize patches that supports inline updates\n- `components` is a list of Kustomize components\n\nTo use Kustomize with an overlay, point your path to the overlay.\n\nTip\n\nIf you're generating resources, you should read up how to ignore those generated resources using the [`IgnoreExtraneous` compare option](https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options/).\n\n## Patches\nPatches are a way to kustomize resources using inline configurations in Argo CD applications. `patches` follow the same logic as the corresponding Kustomization. Any patches that target existing Kustomization file will be merged.\n\nThis Kustomize example sources manifests from the `/kustomize-guestbook` folder of the `argoproj/argocd-example-apps` repository, and patches the `Deployment` to use port `443` on the container.\n\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nmetadata:\n  name: kustomize-inline-example\nnamespace: test1\nresources:\n  - https://github.com/argoproj/argocd-example-apps//kustomize-guestbook/\npatches:\n  - target:\n      kind: Deployment\n      name: guestbook-ui\n    patch: |-\n      - op: replace\n        path: /spec/template/spec/containers/0/ports/0/containerPort\n        value: 443\n```\n\nThis `Application` does the equivalent using the inline `kustomize.patches` configuration.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: kustomize-inline-guestbook\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  destination:\n    namespace: test1\n    server: https://kubernetes.default.svc\n  project: default\n  source:\n    path: kustomize-guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: master\n    kustomize:\n      patches:\n        - target:\n            kind: Deployment\n            name: guestbook-ui\n          patch: |-\n            - op: replace\n              path: /spec/template/spec/containers/0/ports/0/containerPort\n              value: 443\n```\n\nThe inline kustomize patches work well with `ApplicationSets`, too. Instead of maintaining a patch or overlay for each cluster, patches can now be done in the `Application` template and utilize attributes from the generators. For example, with [`external-dns`](https://github.com/kubernetes-sigs/external-dns/) to set the [`txt-owner-id`](https://github.com/kubernetes-sigs/external-dns/blob/e1adc9079b12774cccac051966b2c6a3f18f7872/docs/registry/registry.md?plain=1#L6) to the cluster name.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: external-dns\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters: {}\n  template:\n    metadata:\n      name: 'external-dns'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/kubernetes-sigs/external-dns/\n        targetRevision: v0.14.0\n        path: kustomize\n        kustomize:\n          patches:\n          - target:\n              kind: Deployment\n              name: external-dns\n            patch: |-\n              - op: add\n                path: /spec/template/spec/containers/0/args/3\n                value: --txt-owner-id={{.name}}   # patch using attribute from generator\n      destination:\n        name: 'in-cluster'\n        namespace: default\n```\n\n## Components\nKustomize [components](https://github.com/kubernetes-sigs/kustomize/blob/master/examples/components.md) encapsulate both resources and patches together. They provide a powerful way to modularize and reuse configuration in Kubernetes applications.\n\nOutside of Argo CD, to utilize components, you must add the following to the `kustomization.yaml` that the Application references. For example:\n\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n...\ncomponents:\n- ../component\n```\n\nWith support added for components in `v2.10.0`, you can now reference a component directly in the Application:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: application-kustomize-components\nspec:\n  ...\n  source:\n    path: examples/application-kustomize-components/base\n    repoURL: https://github.com/my-user/my-repo\n    targetRevision: main\n\n    # This!\n    kustomize:\n      components:\n        - ../component  # relative to the kustomization.yaml (`source.path`).\n```\n\n## Private Remote Bases\nIf you have remote bases that are either (a) HTTPS and need username/password (b) SSH and need SSH private key, then they'll inherit that from the app's repo.\n\nThis will work if the remote bases uses the same credentials/private key. It will not work if they use different ones. For security reasons your app only ever knows about its own repo (not other team's or users repos), and so you won't be able to access other private repos, even if Argo CD knows about them.\n\nRead more about [private repos](https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories/).\n\n## `kustomize build` Options/Parameters\nTo provide build options to `kustomize build` of default Kustomize version, use `kustomize.buildOptions` field of `argocd-cm` ConfigMap. Use `kustomize.buildOptions.<version>` to register version specific build options.\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n    kustomize.buildOptions: --load-restrictor LoadRestrictionsNone\n    kustomize.buildOptions.v4.4.0: --output /tmp\n```\n\nAfter modifying `kustomize.buildOptions`, you may need to restart ArgoCD for the changes to take effect.\n\n## Custom Kustomize versions\nArgo CD supports using multiple Kustomize versions simultaneously and specifies required version per application.\nTo add additional versions make sure required versions are [bundled](https://argo-cd.readthedocs.io/en/stable/operator-manual/custom_tools/) and then\nuse `kustomize.path.<version>` fields of `argocd-cm` ConfigMap to register bundled additional versions.\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n    kustomize.path.v3.5.1: /custom-tools/kustomize_3_5_1\n    kustomize.path.v3.5.4: /custom-tools/kustomize_3_5_4\n```\n\nOnce a new version is configured you can reference it in an Application spec as follows:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\nspec:\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: kustomize-guestbook\n\n    kustomize:\n      version: v3.5.4\n```\n\nAdditionally, the application kustomize version can be configured using the Parameters tab of the Application Details page, or using the following CLI command:\n\n```\nargocd app set <appName> --kustomize-version v3.5.4\n```\n\n## Build Environment\nKustomize apps have access to the [standard build environment](https://argo-cd.readthedocs.io/en/stable/user-guide/build-environment/) which can be used in combination with a [config management plugin](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/) to alter the rendered manifests.\n\nYou can use these build environment variables in your Argo CD Application manifests. You can enable this by setting `.spec.source.kustomize.commonAnnotationsEnvsubst` to `true` in your Application manifest.\n\nFor example, the following Application manifest will set the `app-source` annotation to the name of the Application:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook-app\n  namespace: argocd\nspec:\n  project: default\n  destination:\n    namespace: demo\n    server: https://kubernetes.default.svc\n  source:\n    path: kustomize-guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps\n    targetRevision: HEAD\n    kustomize:\n      commonAnnotationsEnvsubst: true\n      commonAnnotations:\n        app-source: ${ARGOCD_APP_NAME}\n  syncPolicy:\n    syncOptions:\n      - CreateNamespace=true\n```\n\n## Kustomizing Helm charts\nIt's possible to [render Helm charts with Kustomize](https://github.com/kubernetes-sigs/kustomize/blob/master/examples/chart.md).\nDoing so requires that you pass the `--enable-helm` flag to the `kustomize build` command.\nThis flag is not part of the Kustomize options within Argo CD.\nIf you would like to render Helm charts through Kustomize in an Argo CD application, you have two options:\nYou can either create a [custom plugin](https://argo-cd.readthedocs.io/en/stable/user-guide/config-management-plugins/), or modify the `argocd-cm` ConfigMap to include the `--enable-helm` flag globally for all Kustomize applications:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  kustomize.buildOptions: --enable-helm\n```\n\n## Setting the manifests' namespace\nThe `spec.destination.namespace` field only adds a namespace when it's missing from the manifests generated by Kustomize. It also uses `kubectl` to set the namespace, which sometimes misses namespace fields in certain resources (for example, custom resources). In these cases, you might get an error like this: `ClusterRoleBinding.rbac.authorization.k8s.io \"example\" is invalid: subjects[0].namespace: Required value.`\n\nUsing Kustomize directly to set the missing namespaces can resolve this problem. Setting `spec.source.kustomize.namespace` instructs Kustomize to set namespace fields to the given value.\n\nIf `spec.destination.namespace` and `spec.source.kustomize.namespace` are both set, Argo CD will defer to the latter, the namespace value set by Kustomize.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/kustomize", "title": "Kustomize", "description": "This page covers how to use Kustomize with Argo CD, including application manifests, patches, components, and configuration options.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 04:25:38", "type": "overview", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Kustomize - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/kustomize/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "b1272e81-f39d-4827-b8c9-73bf815e3fa4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/kustomize", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/kustomize/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Kustomize\"?\n\nAssistant: Here are some code examples:\n\n### Declarative Application Manifest Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: kustomize-example\nspec:\n  project: default\n  source:\n    path: examples/helloWorld\n    repoURL: 'https://github.com/kubernetes-sigs/kustomize'\n    targetRevision: HEAD\n  destination:\n    namespace: default\n    server: 'https://kubernetes.default.svc'\n```\n\n### Patches Example\n```yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nmetadata:\n  name: kustomize-inline-example\nnamespace: test1\nresources:\n  - https://github.com/argoproj/argocd-example-apps//kustomize-guestbook/\npatches:\n  - target:\n      kind: Deployment\n      name: guestbook-ui\n    patch: |-\n      - op: replace\n        path: /spec/template/spec/containers/0/ports/0/containerPort\n        value: 443\n```\n\n### Application with Inline Patches Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: kustomize-inline-guestbook\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  destination:\n    namespace: test1\n    server: https://kubernetes.default.svc\n  project: default\n  source:\n    path: kustomize-guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: master\n    kustomize:\n      patches:\n        - target:\n            kind: Deployment\n            name: guestbook-ui\n          patch: |-\n            - op: replace\n              path: /spec/template/spec/containers/0/ports/0/containerPort\n              value: 443\n```\n\n### ApplicationSet Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: external-dns\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters: {}\n  template:\n    metadata:\n      name: 'external-dns'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/kubernetes-sigs/external-dns/\n        targetRevision: v0.14.0\n        path: kustomize\n        kustomize:\n          patches:\n          - target:\n              kind: Deployment\n              name: external-dns\n            patch: |-\n              - op: add\n                path: /spec/template/spec/containers/0/args/3\n                value: --txt-owner-id={{.name}}   # patch using attribute from generator\n      destination:\n        name: 'in-cluster'\n        namespace: default\n```\n\n### ConfigMap for Build Options Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n    kustomize.buildOptions: --load-restrictor LoadRestrictionsNone\n    kustomize.buildOptions.v4.4.0: --output /tmp\n```\n\n### ConfigMap for Custom Kustomize Versions Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n    kustomize.path.v3.5.1: /custom-tools/kustomize_3_5_1\n    kustomize.path.v3.5.4: /custom-tools/kustomize_3_5_4\n```\n\n### Application with Kustomize Version Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\nspec:\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: kustomize-guestbook\n\n    kustomize:\n      version: v3.5.4\n```\n\n### Application Manifest with Build Environment Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook-app\n  namespace: argocd\nspec:\n  project: default\n  destination:\n    namespace: demo\n    server: https://kubernetes.default.svc\n  source:\n    path: kustomize-guestbook\n    repoURL: https://github.com/argoproj/argocd-example-apps\n    targetRevision: HEAD\n    kustomize:\n      commonAnnotationsEnvsubst: true\n      commonAnnotations:\n        app-source: ${ARGOCD_APP_NAME}\n  syncPolicy:\n    syncOptions:\n      - CreateNamespace=true\n```\n\n### ConfigMap for Helm Charts Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  kustomize.buildOptions: --enable-helm\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/kustomize", "title": "Kustomize", "description": "This page covers how to use Kustomize with Argo CD, including application manifests, patches, components, and configuration options.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 04:25:38", "type": "code_examples", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Kustomize - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/kustomize/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "b1272e81-f39d-4827-b8c9-73bf815e3fa4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/kustomize", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/kustomize/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Kustomize\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you're generating resources, you should read up how to ignore those generated resources using the [`IgnoreExtraneous` compare option](https://argo-cd.readthedocs.io/en/stable/user-guide/compare-options/).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/kustomize", "title": "Kustomize", "description": "This page covers how to use Kustomize with Argo CD, including application manifests, patches, components, and configuration options.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 04:25:38", "type": "best_practices", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Kustomize - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/kustomize/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "scrapeId": "b1272e81-f39d-4827-b8c9-73bf815e3fa4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/kustomize", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/kustomize/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Selective Sync\"?\n\nAssistant: A selective sync is one where only some resources are sync'd. You can choose which resources from the UI.\n\nHere's a detailed explanation:\n\n\n## Selective Sync Option\nTurning on selective sync option which will sync only out-of-sync resources. See sync options documentation for more details.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/selective_sync", "title": "Selective Sync", "description": "A selective sync is one where only some resources are sync'd. You can choose which resources from the UI.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 04:25:42", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Selective Sync - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/selective_sync/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "a016c35d-ef68-4e3b-99a3-199d5bfa441b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/selective_sync", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/selective_sync/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Selective Sync\"?\n\nAssistant: Here are the recommended best practices:\n\n• Your sync is not recorded in the history, and so rollback is not possible.\n• Hooks are not run.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/selective_sync", "title": "Selective Sync", "description": "A selective sync is one where only some resources are sync'd. You can choose which resources from the UI.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 04:25:42", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "title": "Selective Sync - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/user-guide/selective_sync/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-project-slug": "argo-cd", "scrapeId": "a016c35d-ef68-4e3b-99a3-199d5bfa441b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/selective_sync", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/selective_sync/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Source Hydrator\"?\n\nAssistant: Current feature state: Alpha. Tools like Helm and Kustomize allow users to express their Kubernetes manifests in a more concise and reusable way (keeping it DRY - Don't Repeat Yourself). However, these tools can obscure the actual Kubernetes manifests that are applied to the cluster. The 'rendered manifest pattern' is a way to push the hydrated manifests to git before syncing them to the cluster. This allows users to see the actual Kubernetes manifests that are applied to the cluster. The source hydrator is a feature of Argo CD that allows users to push the hydrated manifests to git before syncing them to the cluster.\n\nHere's a detailed explanation:\n\n\n## Enabling the Source Hydrator\nThe source hydrator is disabled by default.\n\nTo enable the source hydrator, you need to enable the \"commit server\" component and set the `hydrator.enabled` field in argocd-cmd-params-cm ConfigMap to \"true\".\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\n  namespace: argocd\ndata:\n  hydrator.enabled: \"true\"\n```\n\nImportant\n\nAfter updating the ConfigMap, you must restart the Argo CD controller and API server for the changes to take effect.\n\nIf you are using one of the `*-install.yaml` manifests to install Argo CD, you can use the `*-install-with-hydrator.yaml` version of that file instead.\n\nFor example,\n\n```\nWithout hydrator: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\nWith hydrator:    https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install-with-hydrator.yaml\n```\n\nImportant\n\nThe `*-with-hydrator-install.yaml` manifests will eventually be removed when the source hydrator is either enabled by default or removed. The upgrade guide will note if the `install-with-hydrator.yaml` manifests are no longer available.\n\n## Using the Source Hydrator\nTo use the source hydrator, you must first install a push secret. This example uses a GitHub App for authentication, but you can use [any authentication method that Argo CD supports for repository access](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories).\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-push-secret\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository-write\ntype: Opaque\nstringData:\n  url: \"https://github.com\"\n  type: \"git\"\n  githubAppID: \"<your app ID here>\"\n  githubAppInstallationID: \"<your installation ID here>\"\n  githubAppPrivateKey: |\n    <your private key here>\n```\n\nThe label `argocd.argoproj.io/secret-type: repository-write` causes this Secret to be used for pushing manifests to git instead of pulling from git.\n\nOnce your push secret is installed, set the `spec.sourceHydrator` field of the Application. For example:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-app\nspec:\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      path: helm-guestbook\n      targetRevision: HEAD\n    syncSource:\n      targetBranch: environments/dev\n      path: helm-guestbook\n```\n\nIn this example, the hydrated manifests will be pushed to the `environments/dev` branch of the `argocd-example-apps` repository.\n\nProject-Scoped Repositories\n\nRepository Secrets may contain a `project` field, making the secret only usable by Applications in that project. The source hydrator only supports project-scoped repositories if all Applications writing to the same repository and branch are in the same project. If Applications in different projects write to the same repository and branch, the source hydrator will not be able to use a project-scoped repository secret and will require a global repository secret. This behavior may change in the future.\n\nIf there are multiple repository-write Secrets available for a repo, the source hydrator will non-deterministically select one of the matching Secrets and log a warning saying \"Found multiple credentials for repoURL\".\n\n## Pushing to a \"Staging\" Branch\nThe source hydrator can be used to push hydrated manifests to a \"staging\" branch instead of the `syncSource` branch. This provides a way to prevent the hydrated manifests from being applied to the cluster until some prerequisite conditions are met (in effect providing a way to handle environment promotion via Pull Requests).\n\nTo use the source hydrator to push to a \"staging\" branch, set the `spec.sourceHydrator.hydrateTo` field of the Application. For example:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-app\nspec:\n  project: my-project\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: default\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      path: helm-guestbook\n      targetRevision: HEAD\n    syncSource:\n      targetBranch: environments/dev\n      path: helm-guestbook\n    hydrateTo:\n      targetBranch: environments/dev-next\n```\n\nIn this example, the hydrated manifests will be pushed to the `environments/dev-next` branch, and Argo CD will not sync the changes until something moves them to the `environments/dev` branch.\n\nYou could use a CI action to move the hydrated manifests from the `hydrateTo` branch to the `syncSource` branch. To introduce a gating mechanism, you could require a Pull Request to be opened to merge the changes from the `hydrateTo` branch to the `syncSource` branch.\n\nArgo CD will only push changes to the `hydrateTo` branch, it will not create a PR or otherwise facilitate moving those changes to the `syncSource` branch. You will need to use your own tooling to move the changes from the `hydrateTo` branch to the `syncSource` branch.\n\n## Limitations\n### Signature Verification\nThe source hydrator **does not currently support signature verification of the DRY sources it hydrates/commits**. It also does not sign the commits it pushes to git, so if signature verification is enabled, the commits will fail verification when Argo CD attempts to sync the hydrated manifests.\n\n### Project-Scoped Push Secrets\nIf all the Applications for a given destination repo/branch are under the same project, then the hydrator will use any available project-scoped push secrets. If two Applications for a given repo/branch are in different projects, then the hydrator will not be able to use a project-scoped push secret and will require a global push secret.\n\n### Credential Templates\nCredential templates allow a single credential to be used for multiple repositories. The source hydrator does not currently support credential templates. You will need a separate credential for each repository.\n\n## Prerequisites\n### Handle Secrets on the Destination Cluster\nDo not use the source hydrator with any tool that injects secrets into your manifests as part of the hydration process (for example, Helm with SOPS or the Argo CD Vault Plugin). These secrets would be committed to git. Instead, use a secrets operator that populates the secret values on the destination cluster.\n\n## Best Practices\n### Make Hydration Deterministic\nThe source hydrator should be deterministic. For a given dry source commit, the hydrator should always produce the same hydrated manifests. This means that the hydrator should not rely on external state or configuration that is not stored in git.\n\nExamples of non-deterministic hydration:\n\n- A Helm chart using unpinned dependencies\n- A Helm chart is using a non-deterministic template function such as `randAlphaNum` or `lookup`\n- [Config Management Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/) which retrieve non-git state, such as secrets\n- Kustomize manifests referencing unpinned remote bases\n\n### Enable Branch Protection\nArgo CD should be the only thing pushing hydrated manifests to the hydrated branches. To prevent other tools or users from pushing to the hydrated branches, enable branch protection in your SCM.\n\nIt is best practice to prefix the hydrated branches with a common prefix, such as `environment/`. This makes it easier to configure branch protection rules on the destination repository.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/source-hydrator", "title": "Source Hydrator", "description": "Current feature state: Alpha. Tools like Helm and Kustomize allow users to express their Kubernetes manifests in a more concise and reusable way (keeping it DRY - Don't Repeat Yourself). However, these tools can obscure the actual Kubernetes manifests that are applied to the cluster. The 'rendered manifest pattern' is a way to push the hydrated manifests to git before syncing them to the cluster. This allows users to see the actual Kubernetes manifests that are applied to the cluster. The source hydrator is a feature of Argo CD that allows users to push the hydrated manifests to git before syncing them to the cluster.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 04:26:14", "type": "overview", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Source Hydrator - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/source-hydrator/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "540d1655-afc6-4def-8ec5-86bd2d29a07e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/source-hydrator", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/source-hydrator/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Source Hydrator\"?\n\nAssistant: Here are some code examples:\n\n### Enabling the Source Hydrator ConfigMap\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cmd-params-cm\n  namespace: argocd\ndata:\n  hydrator.enabled: \"true\"\n```\n\n### Using the Source Hydrator Push Secret\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-push-secret\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: repository-write\ntype: Opaque\nstringData:\n  url: \"https://github.com\"\n  type: \"git\"\n  githubAppID: \"<your app ID here>\"\n  githubAppInstallationID: \"<your installation ID here>\"\n  githubAppPrivateKey: |\n    <your private key here>\n\n```\n\n### Setting the Application Source Hydrator\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-app\nspec:\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      path: helm-guestbook\n      targetRevision: HEAD\n    syncSource:\n      targetBranch: environments/dev\n      path: helm-guestbook\n\n```\n\n### Pushing to a Staging Branch\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: my-app\nspec:\n  project: my-project\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: default\n  sourceHydrator:\n    drySource:\n      repoURL: https://github.com/argoproj/argocd-example-apps\n      path: helm-guestbook\n      targetRevision: HEAD\n    syncSource:\n      targetBranch: environments/dev\n      path: helm-guestbook\n    hydrateTo:\n      targetBranch: environments/dev-next\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/source-hydrator", "title": "Source Hydrator", "description": "Current feature state: Alpha. Tools like Helm and Kustomize allow users to express their Kubernetes manifests in a more concise and reusable way (keeping it DRY - Don't Repeat Yourself). However, these tools can obscure the actual Kubernetes manifests that are applied to the cluster. The 'rendered manifest pattern' is a way to push the hydrated manifests to git before syncing them to the cluster. This allows users to see the actual Kubernetes manifests that are applied to the cluster. The source hydrator is a feature of Argo CD that allows users to push the hydrated manifests to git before syncing them to the cluster.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 04:26:14", "type": "code_examples", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Source Hydrator - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/source-hydrator/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "540d1655-afc6-4def-8ec5-86bd2d29a07e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/source-hydrator", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/source-hydrator/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Source Hydrator\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make Hydration Deterministic\n• Enable Branch Protection\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/source-hydrator", "title": "Source Hydrator", "description": "Current feature state: Alpha. Tools like Helm and Kustomize allow users to express their Kubernetes manifests in a more concise and reusable way (keeping it DRY - Don't Repeat Yourself). However, these tools can obscure the actual Kubernetes manifests that are applied to the cluster. The 'rendered manifest pattern' is a way to push the hydrated manifests to git before syncing them to the cluster. This allows users to see the actual Kubernetes manifests that are applied to the cluster. The source hydrator is a feature of Argo CD that allows users to push the hydrated manifests to git before syncing them to the cluster.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 04:26:14", "type": "best_practices", "page_metadata": {"readthedocs-version-slug": "stable", "title": "Source Hydrator - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-resolver-filename": "/user-guide/source-hydrator/", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "540d1655-afc6-4def-8ec5-86bd2d29a07e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/source-hydrator", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/source-hydrator/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Understanding JSON Structure\"?\n\nAssistant: This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.\n\nHere's a detailed explanation:\n\n\n## Introduction to JSON\nJSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate.\n\n## JSON Syntax\nJSON syntax is derived from JavaScript object notation. It consists of key/value pairs, where keys are strings and values can be strings, numbers, objects, arrays, booleans, or null.\n\n## Data Types in JSON\nThe data types supported in JSON include:\n1. String\n2. Number\n3. Object\n4. Array\n5. Boolean\n6. Null\n\n## Best Practices for JSON\nWhen working with JSON, consider the following best practices:\n- Use consistent naming conventions for keys.\n- Keep the structure simple and avoid deeply nested objects.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:28:51", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Sync Options - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "4c64f971-d7a9-4dd7-bebe-bee261fea99d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Understanding JSON Structure\"?\n\nAssistant: Here are some code examples:\n\n### Basic JSON Example\n```yaml\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"isStudent\": false,\n  \"courses\": [\"Math\", \"Science\"]\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:28:51", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Sync Options - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "4c64f971-d7a9-4dd7-bebe-bee261fea99d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Understanding JSON Structure\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use consistent naming conventions for keys.\n• Keep the structure simple and avoid deeply nested objects.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:28:51", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Sync Options - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "4c64f971-d7a9-4dd7-bebe-bee261fea99d", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Tracking and Deployment Strategies\"?\n\nAssistant: An Argo CD application spec provides several different ways of tracking Kubernetes resource manifests.\n\nHere's a detailed explanation:\n\n\n## Helm\nHelm chart versions are Semantic Versions. As a result, you can use any of the following version ranges:\n\n| Use Case | How | Examples |\n| --- | --- | --- |\n| Pin to a version (e.g. in production) | Use the version number | `1.2.0` |\n| Track patches (e.g. in pre-production) | Use a range | `1.2.*` or `>=1.2.0 <1.3.0` |\n| Track minor releases (e.g. in QA) | Use a range | `1.*` or `>=1.0.0 <2.0.0` |\n| Use the latest (e.g. in local development) | Use star range | `*` or `>=0.0.0` |\n| Use the latest including pre-releases | Use star range with `-0` suffix | `*-0` or `>=0.0.0-0` |\n\n## Git\nFor Git, all versions are Git references but tags can also be used:\n\n| Use Case | How | Notes |\n| --- | --- | --- |\n| Pin to a version (e.g. in production) | Either (a) tag the commit with (e.g. `v1.2.0`) and use that tag, or (b) using commit SHA. | See [commit pinning](https://argo-cd.readthedocs.io/en/stable/user-guide/tracking_strategies/#commit-pinning). |\n| Track patches (e.g. in pre-production) | Use a range (e.g. `1.2.*` or `>=1.2.0 <1.3.0`) | See [tag tracking](https://argo-cd.readthedocs.io/en/stable/user-guide/tracking_strategies/#tag-tracking) |\n| Track minor releases (e.g. in QA) | Use a range (e.g. `1.*` or `>=1.0.0 <2.0.0`) | See [tag tracking](https://argo-cd.readthedocs.io/en/stable/user-guide/tracking_strategies/#tag-tracking) |\n| Use the latest (e.g. in local development) | Use `HEAD` or `master` (assuming `master` is your master branch). | See [HEAD / Branch Tracking](https://argo-cd.readthedocs.io/en/stable/user-guide/tracking_strategies/#head-branch-tracking) |\n| Use the latest including pre-releases | Use star range with `-0` suffix | `*-0` or `>=0.0.0-0` |\n\n## HEAD / Branch Tracking\nIf a branch name, or a symbolic reference (like HEAD) is specified, Argo CD will continually compare live state against the resource manifests defined at the tip of the specified branch or the resolved commit of the symbolic reference.\n\nTo redeploy an app, make a change to (at least) one of your manifests, commit and push to the tracked branch/symbolic reference. The change will then be detected by Argo CD.\n\n## Tag Tracking\nIf a tag is specified, the manifests at the specified Git tag will be used to perform the sync comparison. This provides some advantages over branch tracking in that a tag is generally considered more stable, and less frequently updated, with some manual judgement of what constitutes a tag.\n\nTo redeploy an app, the user uses Git to change the meaning of a tag by retagging it to a different commit SHA. Argo CD will detect the new meaning of the tag when performing the comparison/sync.\n\nBut if you're using semantic versioning you can set the constraint in your service revision and Argo CD will get the latest version following the constraint rules.\n\n## Commit Pinning\nIf a Git commit SHA is specified, the app is effectively pinned to the manifests defined at the specified commit. This is the most restrictive of the techniques and is typically used to control production environments.\n\nSince commit SHAs cannot change meaning, the only way to change the live state of an app which is pinned to a commit, is by updating the tracking revision in the application to a different commit containing the new manifests. Note that parameter overrides can still be set on an app which is pinned to a revision.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/tracking_strategies", "title": "Tracking and Deployment Strategies", "description": "An Argo CD application spec provides several different ways of tracking Kubernetes resource manifests.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 04:29:11", "type": "overview", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Tracking and Deployment Strategies - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/tracking_strategies/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "ad50218f-4019-400a-8604-66d93c95a0bb", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/tracking_strategies", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/tracking_strategies/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Tracking and Deployment Strategies\"?\n\nAssistant: Here are the recommended best practices:\n\n• In all tracking strategies, the app has the option to sync automatically. If auto-sync is configured, the new resources manifests will be applied automatically as soon as a difference is detected.\n• In all tracking strategies, any parameter overrides take precedence over the Git state.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/tracking_strategies", "title": "Tracking and Deployment Strategies", "description": "An Argo CD application spec provides several different ways of tracking Kubernetes resource manifests.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 04:29:11", "type": "best_practices", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "title": "Tracking and Deployment Strategies - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/user-guide/tracking_strategies/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "ad50218f-4019-400a-8604-66d93c95a0bb", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/tracking_strategies", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/tracking_strategies/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin settings resource-overrides Command Reference\"?\n\nAssistant: Troubleshoot resource overrides\n\nHere's a detailed explanation:\n\n\n## argocd admin settings resource-overrides\nTroubleshoot resource overrides\n\n```\nargocd admin settings resource-overrides [flags]\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides", "title": "argocd admin settings resource-overrides Command Reference", "description": "Troubleshoot resource overrides", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 04:29:30", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin settings resource-overrides Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "scrapeId": "370f4d24-9471-43ba-8cb2-ebe43f48043e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin settings resource-overrides Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Command Usage\n```yaml\nargocd admin settings resource-overrides [flags]\n```\n\n### Options\n```yaml\n  -h, --help   help for resource-overrides\n\n  --argocd-cm-path string           Path to local argocd-cm.yaml file\n  --argocd-context string           The name of the Argo-CD server context to use\n  --argocd-secret-path string       Path to local argocd-secret.yaml file\n  --as string                       Username to impersonate for the operation\n  --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n  --as-uid string                   UID to impersonate for the operation\n  --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n  --certificate-authority string    Path to a cert file for the certificate authority\n  --client-certificate string       Path to a client certificate file for TLS\n  --client-crt string               Client certificate file\n  --client-crt-key string           Client certificate key file\n  --client-key string               Path to a client key file for TLS\n  --cluster string                  The name of the kubeconfig cluster to use\n  --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n  --context string                  The name of the kubeconfig context to use\n  --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n  --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n  --disable-compression             If true, opt-out of response compression for all requests to the server\n  --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n  --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n  --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n  --insecure                        Skip server certificate and domain verification\n  --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  --kube-context string             Directs the command to the given kube-context\n  --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n  --load-cluster-settings           Indicates that config map and secret should be loaded from cluster unless local file path is provided\n  --logformat string                Set the logging format. One of: text|json (default \"text\")\n  --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string                If present, the namespace scope for this CLI request\n  --password string                 Password for basic authentication to the API server\n  --plaintext                       Disable TLS\n  --port-forward                    Connect to a random argocd-server port using port forwarding\n  --port-forward-namespace string   Namespace name which should be used for port forwarding\n  --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n  --proxy-url string                If provided, this URL will be used to connect via proxy\n  --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n  --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n  --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n  --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n  --server string                   The address and port of the Kubernetes API server\n  --server-crt string               Server certificate file\n  --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n  --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n  --token string                    Bearer token for authentication to the API server\n  --user string                     The name of the kubeconfig user to use\n  --username string                 Username for basic authentication to the API server\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides", "title": "argocd admin settings resource-overrides Command Reference", "description": "Troubleshoot resource overrides", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 04:29:30", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "title": "argocd admin settings resource-overrides Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "readthedocs-http-status": "200", "viewport": "width=device-width,initial-scale=1", "readthedocs-project-slug": "argo-cd", "scrapeId": "370f4d24-9471-43ba-8cb2-ebe43f48043e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd admin settings resource-overrides ignore-resource-updates Command Reference\"?\n\nAssistant: Renders fields excluded from resource updates\n\nHere's a detailed explanation:\n\n\n## Synopsis\nRenders ignored fields using the 'ignoreResourceUpdates' setting specified in the 'resource.customizations' field of 'argocd-cm' ConfigMap\n\n## Examples\n```\nargocd admin settings resource-overrides ignore-resource-updates ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n## Options\n```\n  -h, --help                                              help for ignore-resource-updates\n      --ignore-normalizer-jq-execution-timeout duration   Set ignore normalizer JQ execution timeout (default 1s)\n```\n\n\n## Options inherited from parent commands\n```\n      --argocd-cm-path string           Path to local argocd-cm.yaml file\n      --argocd-context string           The name of the Argo-CD server context to use\n      --argocd-secret-path string       Path to local argocd-secret.yaml file\n      --as string                       Username to impersonate for the operation\n      --as-group stringArray            Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                   UID to impersonate for the operation\n      --auth-token string               Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable\n      --certificate-authority string    Path to a cert file for the certificate authority\n      --client-certificate string       Path to a client certificate file for TLS\n      --client-crt string               Client certificate file\n      --client-crt-key string           Client certificate key file\n      --client-key string               Path to a client key file for TLS\n      --cluster string                  The name of the kubeconfig cluster to use\n      --config string                   Path to Argo CD config (default \"/home/user/.config/argocd/config\")\n      --context string                  The name of the kubeconfig context to use\n      --controller-name string          Name of the Argo CD Application controller; set this or the ARGOCD_APPLICATION_CONTROLLER_NAME environment variable when the controller's name label differs from the default, for example when installing via the Helm chart (default \"argocd-application-controller\")\n      --core                            If set to true then CLI talks directly to Kubernetes instead of talking to Argo CD API server\n      --disable-compression             If true, opt-out of response compression for all requests to the server\n      --grpc-web                        Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2.\n      --grpc-web-root-path string       Enables gRPC-web protocol. Useful if Argo CD server is behind proxy which does not support HTTP2. Set web root.\n  -H, --header strings                  Sets additional header to all requests made by Argo CD CLI. (Can be repeated multiple times to add multiple headers, also supports comma separated headers)\n      --http-retry-max int              Maximum number of retries to establish http connection to Argo CD server\n      --insecure                        Skip server certificate and domain verification\n      --insecure-skip-tls-verify        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-context string             Directs the command to the given kube-context\n      --kubeconfig string               Path to a kube config. Only required if out-of-cluster\n      --load-cluster-settings           Indicates that config map and secret should be loaded from cluster unless local file path is provided\n      --logformat string                Set the logging format. One of: text|json (default \"text\")\n      --loglevel string                 Set the logging level. One of: debug|info|warn|error (default \"info\")\n  -n, --namespace string                If present, the namespace scope for this CLI request\n      --password string                 Password for basic authentication to the API server\n      --plaintext                       Disable TLS\n      --port-forward                    Connect to a random argocd-server port using port forwarding\n      --port-forward-namespace string   Namespace name which should be used for port forwarding\n      --prompts-enabled                 Force optional interactive prompts to be enabled or disabled, overriding local configuration. If not specified, the local configuration value will be used, which is false by default.\n      --proxy-url string                If provided, this URL will be used to connect via proxy\n      --redis-haproxy-name string       Name of the Redis HA Proxy; set this or the ARGOCD_REDIS_HAPROXY_NAME environment variable when the HA Proxy's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis-ha-haproxy\")\n      --redis-name string               Name of the Redis deployment; set this or the ARGOCD_REDIS_NAME environment variable when the Redis's name label differs from the default, for example when installing via the Helm chart (default \"argocd-redis\")\n      --repo-server-name string         Name of the Argo CD Repo server; set this or the ARGOCD_REPO_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-repo-server\")\n      --request-timeout string          The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --server string                   The address and port of the Kubernetes API server\n      --server-crt string               Server certificate file\n      --server-name string              Name of the Argo CD API server; set this or the ARGOCD_SERVER_NAME environment variable when the server's name label differs from the default, for example when installing via the Helm chart (default \"argocd-server\")\n      --tls-server-name string          If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --token string                    Bearer token for authentication to the API server\n      --user string                     The name of the kubeconfig user to use\n      --username string                 Username for basic authentication to the API server\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates", "title": "argocd admin settings resource-overrides ignore-resource-updates Command Reference", "description": "Renders fields excluded from resource updates", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:29:53", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "language": "en", "title": "argocd admin settings resource-overrides ignore-resource-updates Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates/", "scrapeId": "661fc70b-37e0-4c87-a6eb-ce7c0d733f1b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd admin settings resource-overrides ignore-resource-updates Command Reference\"?\n\nAssistant: Here are some code examples:\n\n### Example Command\n```yaml\nargocd admin settings resource-overrides ignore-resource-updates ./deploy.yaml --argocd-cm-path ./argocd-cm.yaml\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates", "title": "argocd admin settings resource-overrides ignore-resource-updates Command Reference", "description": "Renders fields excluded from resource updates", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:29:53", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "language": "en", "title": "argocd admin settings resource-overrides ignore-resource-updates Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates/", "scrapeId": "661fc70b-37e0-4c87-a6eb-ce7c0d733f1b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"argocd admin settings resource-overrides ignore-resource-updates Command Reference\"?\n\nAssistant: Here are the recommended best practices:\n\n• Set ignore normalizer JQ execution timeout (default 1s)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates", "title": "argocd admin settings resource-overrides ignore-resource-updates Command Reference", "description": "Renders fields excluded from resource updates", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 04:29:53", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "language": "en", "title": "argocd admin settings resource-overrides ignore-resource-updates Command Reference - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-resolver-filename": "/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates/", "scrapeId": "661fc70b-37e0-4c87-a6eb-ce7c0d733f1b", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_admin_settings_resource-overrides_ignore-resource-updates/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Resource Actions\"?\n\nAssistant: Argo CD allows operators to define custom actions which users can perform on specific resource types. This is used internally to provide actions like `restart` for a `DaemonSet`, or `retry` for an Argo Rollout.\n\nHere's a detailed explanation:\n\n\n## Overview\nArgo CD allows operators to define custom actions which users can perform on specific resource types. This is used internally to provide actions like `restart` for a `DaemonSet`, or `retry` for an Argo Rollout.\n\nOperators can add actions to custom resources in form of a Lua script and expand those capabilities.\n\n## Built-in Actions\nThe following are actions that are built-in to Argo CD. Each action name links to its Lua script definition:\n\n- [apps/DaemonSet/restart](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/apps/DaemonSet/actions/restart/action.lua)\n- [apps/Deployment/pause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/apps/Deployment/actions/pause/action.lua)\n- [apps/Deployment/restart](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/apps/Deployment/actions/restart/action.lua)\n- [apps/Deployment/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/apps/Deployment/actions/resume/action.lua)\n- [apps/StatefulSet/restart](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/apps/StatefulSet/actions/restart/action.lua)\n- [argoproj.io/AnalysisRun/terminate](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/AnalysisRun/actions/terminate/action.lua)\n- [argoproj.io/CronWorkflow/create-workflow](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/CronWorkflow/actions/create-workflow/action.lua)\n- [argoproj.io/Rollout/abort](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/Rollout/actions/abort/action.lua)\n- [argoproj.io/Rollout/promote-full](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/Rollout/actions/promote-full/action.lua)\n- [argoproj.io/Rollout/restart](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/Rollout/actions/restart/action.lua)\n- [argoproj.io/Rollout/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/Rollout/actions/resume/action.lua)\n- [argoproj.io/Rollout/retry](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/Rollout/actions/retry/action.lua)\n- [argoproj.io/WorkflowTemplate/create-workflow](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/argoproj.io/WorkflowTemplate/actions/create-workflow/action.lua)\n- [batch/CronJob/create-job](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/batch/CronJob/actions/create-job/action.lua)\n- [external-secrets.io/ExternalSecret/refresh](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/external-secrets.io/ExternalSecret/actions/refresh/action.lua)\n- [external-secrets.io/PushSecret/push](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/external-secrets.io/PushSecret/actions/push/action.lua)\n- [helm.toolkit.fluxcd.io/HelmRelease/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/helm.toolkit.fluxcd.io/HelmRelease/actions/reconcile/action.lua)\n- [helm.toolkit.fluxcd.io/HelmRelease/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/helm.toolkit.fluxcd.io/HelmRelease/actions/resume/action.lua)\n- [helm.toolkit.fluxcd.io/HelmRelease/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/helm.toolkit.fluxcd.io/HelmRelease/actions/suspend/action.lua)\n- [image.toolkit.fluxcd.io/ImageRepository/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageRepository/actions/reconcile/action.lua)\n- [image.toolkit.fluxcd.io/ImageRepository/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageRepository/actions/resume/action.lua)\n- [image.toolkit.fluxcd.io/ImageRepository/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageRepository/actions/suspend/action.lua)\n- [image.toolkit.fluxcd.io/ImageUpdateAutomation/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageUpdateAutomation/actions/reconcile/action.lua)\n- [image.toolkit.fluxcd.io/ImageUpdateAutomation/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageUpdateAutomation/actions/resume/action.lua)\n- [image.toolkit.fluxcd.io/ImageUpdateAutomation/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/image.toolkit.fluxcd.io/ImageUpdateAutomation/actions/suspend/action.lua)\n- [kustomize.toolkit.fluxcd.io/Kustomization/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/kustomize.toolkit.fluxcd.io/Kustomization/actions/reconcile/action.lua)\n- [kustomize.toolkit.fluxcd.io/Kustomization/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/kustomize.toolkit.fluxcd.io/Kustomization/actions/resume/action.lua)\n- [kustomize.toolkit.fluxcd.io/Kustomization/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/kustomize.toolkit.fluxcd.io/Kustomization/actions/suspend/action.lua)\n- [notification.toolkit.fluxcd.io/Alert/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Alert/actions/resume/action.lua)\n- [notification.toolkit.fluxcd.io/Alert/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Alert/actions/suspend/action.lua)\n- [notification.toolkit.fluxcd.io/Provider/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Provider/actions/resume/action.lua)\n- [notification.toolkit.fluxcd.io/Provider/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Provider/actions/suspend/action.lua)\n- [notification.toolkit.fluxcd.io/Receiver/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Receiver/actions/reconcile/action.lua)\n- [notification.toolkit.fluxcd.io/Receiver/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Receiver/actions/resume/action.lua)\n- [notification.toolkit.fluxcd.io/Receiver/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/notification.toolkit.fluxcd.io/Receiver/actions/suspend/action.lua)\n- [numaflow.numaproj.io/MonoVertex/pause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaflow.numaproj.io/MonoVertex/actions/pause/action.lua)\n- [numaflow.numaproj.io/MonoVertex/unpause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaflow.numaproj.io/MonoVertex/actions/unpause/action.lua)\n- [numaflow.numaproj.io/Pipeline/pause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaflow.numaproj.io/Pipeline/actions/pause/action.lua)\n- [numaflow.numaproj.io/Pipeline/unpause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaflow.numaproj.io/Pipeline/actions/unpause/action.lua)\n- [numaplane.numaproj.io/MonoVertexRollout/pause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/MonoVertexRollout/actions/pause/action.lua)\n- [numaplane.numaproj.io/MonoVertexRollout/unpause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/MonoVertexRollout/actions/unpause/action.lua)\n- [numaplane.numaproj.io/PipelineRollout/allow-data-loss](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/PipelineRollout/actions/allow-data-loss/action.lua)\n- [numaplane.numaproj.io/PipelineRollout/disallow-data-loss](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/PipelineRollout/actions/disallow-data-loss/action.lua)\n- [numaplane.numaproj.io/PipelineRollout/pause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/PipelineRollout/actions/pause/action.lua)\n- [numaplane.numaproj.io/PipelineRollout/unpause](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/numaplane.numaproj.io/PipelineRollout/actions/unpause/action.lua)\n- [source.toolkit.fluxcd.io/Bucket/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/Bucket/actions/reconcile/action.lua)\n- [source.toolkit.fluxcd.io/Bucket/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/Bucket/actions/resume/action.lua)\n- [source.toolkit.fluxcd.io/Bucket/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/Bucket/actions/suspend/action.lua)\n- [source.toolkit.fluxcd.io/GitRepository/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/GitRepository/actions/reconcile/action.lua)\n- [source.toolkit.fluxcd.io/GitRepository/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/GitRepository/actions/resume/action.lua)\n- [source.toolkit.fluxcd.io/GitRepository/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/GitRepository/actions/suspend/action.lua)\n- [source.toolkit.fluxcd.io/HelmChart/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmChart/actions/reconcile/action.lua)\n- [source.toolkit.fluxcd.io/HelmChart/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmChart/actions/resume/action.lua)\n- [source.toolkit.fluxcd.io/HelmChart/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmChart/actions/suspend/action.lua)\n- [source.toolkit.fluxcd.io/HelmRepository/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmRepository/actions/reconcile/action.lua)\n- [source.toolkit.fluxcd.io/HelmRepository/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmRepository/actions/resume/action.lua)\n- [source.toolkit.fluxcd.io/HelmRepository/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/HelmRepository/actions/suspend/action.lua)\n- [source.toolkit.fluxcd.io/OCIRepository/reconcile](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/OCIRepository/actions/reconcile/action.lua)\n- [source.toolkit.fluxcd.io/OCIRepository/resume](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/OCIRepository/actions/resume/action.lua)\n- [source.toolkit.fluxcd.io/OCIRepository/suspend](https://github.com/argoproj/argo-cd/blob/master/resource_customizations/source.toolkit.fluxcd.io/OCIRepository/actions/suspend/action.lua)\n\nSee the [RBAC documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#the-action-action) for information on how to control access to these actions.\n\n## Custom Resource Actions\nArgo CD supports custom resource actions written in [Lua](https://www.lua.org/). This is useful if you:\n\n- Have a custom resource for which Argo CD does not provide any built-in actions.\n- Have a commonly performed manual task that might be error prone if executed by users via `kubectl`\n\nThe resource actions act on a single object.\n\nYou can define your own custom resource actions in the `argocd-cm` ConfigMap.\n\n## Custom Resource Action Types\n#### An action that modifies the source resource\nThis action modifies and returns the source resource.\nThis kind of action was the only one available till 2.8, and it is still supported.\n\n#### An action that produces a list of new or modified resources\n**An alpha feature, introduced in 2.8.**\n\nThis action returns a list of impacted resources, each impacted resource has a K8S resource and an operation to perform on.\n\nCurrently supported operations are \"create\" and \"patch\", \"patch\" is only supported for the source resource.\n\nCreating new resources is possible, by specifying a \"create\" operation for each such resource in the returned list.\n\nOne of the returned resources can be the modified source object, with a \"patch\" operation, if needed.\n\nSee the definition examples below.\n\n## Define a Custom Resource Action in `argocd-cm` ConfigMap\nCustom resource actions can be defined in `resource.customizations.actions.<group_kind>` field of `argocd-cm`. Following example demonstrates a set of custom actions for `CronJob` resources, each such action returns the modified CronJob.\nThe customizations key is in the format of `resource.customizations.actions.<apiGroup_Kind>`.\n\n```\nresource.customizations.actions.batch_CronJob: |\n  discovery.lua: |\n    actions = {}\n    actions[\"suspend\"] = {[\"disabled\"] = true}\n    actions[\"resume\"] = {[\"disabled\"] = true}\n\n    local suspend = false\n    if obj.spec.suspend ~= nil then\n        suspend = obj.spec.suspend\n    end\n    if suspend then\n        actions[\"resume\"][\"disabled\"] = false\n    else\n        actions[\"suspend\"][\"disabled\"] = false\n    end\n    return actions\n  definitions:\n  - name: suspend\n    action.lua: |\n      obj.spec.suspend = true\n      return obj\n  - name: resume\n    action.lua: |\n      if obj.spec.suspend ~= nil and obj.spec.suspend then\n          obj.spec.suspend = false\n      end\n      return obj\n```\n\nThe `discovery.lua` script must return a table where the key name represents the action name. You can optionally include logic to enable or disable certain actions based on the current object state.\n\nEach action name must be represented in the list of `definitions` with an accompanying `action.lua` script to control the resource modifications. The `obj` is a global variable which contains the resource. Each action script returns an optionally modified version of the resource. In this example, we are simply setting `.spec.suspend` to either `true` or `false`.\n\nBy default, defining a resource action customization will override any built-in action for this resource kind. As of Argo CD version 2.13.0, if you want to retain the built-in actions, you can set the `mergeBuiltinActions` key to `true`. Your custom actions will have precedence over the built-in actions.\n\n```\nresource.customizations.actions.argoproj.io_Rollout: |\n  mergeBuiltinActions: true\n  discovery.lua: |\n    actions = {}\n    actions[\"do-things\"] = {}\n    return actions\n  definitions:\n  - name: do-things\n    action.lua: |\n      return obj\n```\n\n#### Creating new resources with a custom action\nImportant\n\nCreating resources via the Argo CD UI is an intentional, strategic departure from GitOps principles. We recommend that you use this feature sparingly and only for resources that are not part of the desired state of the application.\n\n## Creating a source resource child resources with a custom action\nIf the new resource represents a k8s child of the source resource, the source resource ownerReference must be set on the new resource.\nHere is an example Lua snippet, that takes care of constructing a Job resource that is a child of a source CronJob resource - the `obj` is a global variable, which contains the source resource:\n\n```\n-- ...\nownerRef = {}\nownerRef.apiVersion = obj.apiVersion\nownerRef.kind = obj.kind\nownerRef.name = obj.metadata.name\nownerRef.uid = obj.metadata.uid\njob = {}\njob.metadata = {}\njob.metadata.ownerReferences = {}\njob.metadata.ownerReferences[1] = ownerRef\n-- ...\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions", "title": "Resource Actions", "description": "Argo CD allows operators to define custom actions which users can perform on specific resource types. This is used internally to provide actions like `restart` for a `DaemonSet`, or `retry` for an Argo Rollout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 04:46:25", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/resource_actions/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "Resource Actions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "scrapeId": "76fbb7db-f7a1-4257-b9b3-7a1c11502a61", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Resource Actions\"?\n\nAssistant: Here are some code examples:\n\n### Define a Custom Resource Action in `argocd-cm` ConfigMap\n```yaml\nresource.customizations.actions.batch_CronJob: |\n  discovery.lua: |\n    actions = {}\n    actions[\"suspend\"] = {[\"disabled\"] = true}\n    actions[\"resume\"] = {[\"disabled\"] = true}\n\n    local suspend = false\n    if obj.spec.suspend ~= nil then\n        suspend = obj.spec.suspend\n    end\n    if suspend then\n        actions[\"resume\"][\"disabled\"] = false\n    else\n        actions[\"suspend\"][\"disabled\"] = false\n    end\n    return actions\n  definitions:\n  - name: suspend\n    action.lua: |\n      obj.spec.suspend = true\n      return obj\n  - name: resume\n    action.lua: |\n      if obj.spec.suspend ~= nil and obj.spec.suspend then\n          obj.spec.suspend = false\n      end\n      return obj\n\n```\n\n### Creating new resources with a custom action\n```yaml\n-- ...\nownerRef = {}\nownerRef.apiVersion = obj.apiVersion\nownerRef.kind = obj.kind\nownerRef.name = obj.metadata.name\nownerRef.uid = obj.metadata.uid\njob = {}\njob.metadata = {}\njob.metadata.ownerReferences = {}\njob.metadata.ownerReferences[1] = ownerRef\n-- ...\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions", "title": "Resource Actions", "description": "Argo CD allows operators to define custom actions which users can perform on specific resource types. This is used internally to provide actions like `restart` for a `DaemonSet`, or `retry` for an Argo Rollout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 04:46:25", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/resource_actions/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "Resource Actions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "scrapeId": "76fbb7db-f7a1-4257-b9b3-7a1c11502a61", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Resource Actions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Creating resources via the Argo CD UI is an intentional, strategic departure from GitOps principles. We recommend that you use this feature sparingly and only for resources that are not part of the desired state of the application.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions", "title": "Resource Actions", "description": "Argo CD allows operators to define custom actions which users can perform on specific resource types. This is used internally to provide actions like `restart` for a `DaemonSet`, or `retry` for an Argo Rollout.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 04:46:25", "type": "best_practices", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/resource_actions/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-version-slug": "stable", "title": "Resource Actions - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "scrapeId": "76fbb7db-f7a1-4257-b9b3-7a1c11502a61", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/resource_actions/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Pull Request Generator\"?\n\nAssistant: The Pull Request generator uses the API of an SCMaaS provider (GitHub, Gitea, or Bitbucket Server) to automatically discover open pull requests within a repository. This fits well with the style of building a test environment when you create a pull request.\n\nHere's a detailed explanation:\n\n\n## GitHub\nSpecify the repository from which to fetch the GitHub Pull requests.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      github:\n        # The GitHub organization or user.\n        owner: myorg\n        # The Github repository\n        repo: myrepository\n        # For GitHub Enterprise (optional)\n        api: https://git.example.com/\n        # Reference to a Secret containing an access token. (optional)\n        tokenRef:\n          secretName: github-token\n          key: token\n        # (optional) use a GitHub App to access the API instead of a PAT.\n        appSecretName: github-app-repo-creds\n        # Labels is used to filter the PRs that you want to target. (optional)\n        labels:\n        - preview\n      requeueAfterSeconds: 1800\n  template:\n  # ...\n```\n\n- `owner`: Required name of the GitHub organization or user.\n- `repo`: Required name of the GitHub repository.\n- `api`: If using GitHub Enterprise, the URL to access it. (Optional)\n- `tokenRef`: A `Secret` name and key containing the GitHub access token to use for requests. If not specified, will make anonymous requests which have a lower rate limit and can only see public repositories. (Optional)\n- `labels`: Filter the PRs to those containing **all** of the labels listed. (Optional)\n- `appSecretName`: A `Secret` name containing a GitHub App secret in [repo-creds format](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repository-credentials).\n\n## GitLab\nSpecify the project from which to fetch the GitLab merge requests.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      gitlab:\n        # The GitLab project ID.\n        project: \"12341234\"\n        # For self-hosted GitLab (optional)\n        api: https://git.example.com/\n        # Reference to a Secret containing an access token. (optional)\n        tokenRef:\n          secretName: gitlab-token\n          key: token\n        # Labels is used to filter the MRs that you want to target. (optional)\n        labels:\n        - preview\n        # MR state is used to filter MRs only with a certain state. (optional)\n        pullRequestState: opened\n        # If true, skips validating the SCM provider's TLS certificate - useful for self-signed certificates.\n        insecure: false\n        # Reference to a ConfigMap containing trusted CA certs - useful for self-signed certificates. (optional)\n        caRef:\n          configMapName: argocd-tls-certs-cm\n          key: gitlab-ca\n      requeueAfterSeconds: 1800\n  template:\n  # ...\n```\n\n- `project`: Required project ID of the GitLab project.\n- `api`: If using self-hosted GitLab, the URL to access it. (Optional)\n- `tokenRef`: A `Secret` name and key containing the GitLab access token to use for requests. If not specified, will make anonymous requests which have a lower rate limit and can only see public repositories. (Optional)\n- `labels`: Labels is used to filter the MRs that you want to target. (Optional)\n- `pullRequestState`: PullRequestState is an additional MRs filter to get only those with a certain state. Default: \"\" (all states)\n- `insecure`: By default (false) - Skip checking the validity of the SCM's certificate - useful for self-signed TLS certificates.\n- `caRef`: Optional `ConfigMap` name and key containing the GitLab certificates to trust - useful for self-signed TLS certificates. Possibly reference the ArgoCD CM holding the trusted certs.\n\n## Gitea\nSpecify the repository from which to fetch the Gitea Pull requests.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      gitea:\n        # The Gitea organization or user.\n        owner: myorg\n        # The Gitea repository\n        repo: myrepository\n        # The Gitea url to use\n        api: https://gitea.mydomain.com/\n        # Reference to a Secret containing an access token. (optional)\n        tokenRef:\n          secretName: gitea-token\n          key: token\n        # many gitea deployments use TLS, but many are self-hosted and self-signed certificates\n        insecure: true\n      requeueAfterSeconds: 1800\n  template:\n  # ...\n```\n\n- `owner`: Required name of the Gitea organization or user.\n- `repo`: Required name of the Gitea repository.\n- `api`: The url of the Gitea instance.\n- `tokenRef`: A `Secret` name and key containing the Gitea access token to use for requests. If not specified, will make anonymous requests which have a lower rate limit and can only see public repositories. (Optional)\n- `insecure`: `Allow for self-signed certificates, primarily for testing.`\n\n## Bitbucket Server\nFetch pull requests from a repo hosted on a Bitbucket Server (not the same as Bitbucket Cloud).\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      bitbucketServer:\n        project: myproject\n        repo: myrepository\n        # URL of the Bitbucket Server. Required.\n        api: https://mycompany.bitbucket.org\n        # Credentials for Basic authentication (App Password). Either basicAuth or bearerToken\n        # authentication is required to access private repositories\n        basicAuth:\n          # The username to authenticate with\n          username: myuser\n          # Reference to a Secret containing the password or personal access token.\n          passwordRef:\n            secretName: mypassword\n            key: password\n        # Credentials for Bearer Token (App Token) authentication. Either basicAuth or bearerToken\n        # authentication is required to access private repositories\n        bearerToken:\n          # Reference to a Secret containing the bearer token.\n          tokenRef:\n            secretName: repotoken\n            key: token\n        # If true, skips validating the SCM provider's TLS certificate - useful for self-signed certificates.\n        insecure: true\n        # Reference to a ConfigMap containing trusted CA certs - useful for self-signed certificates. (optional)\n        caRef:\n          configMapName: argocd-tls-certs-cm\n          key: bitbucket-ca\n      # Labels are not supported by Bitbucket Server, so filtering by label is not possible.\n      # Filter PRs using the source branch name. (optional)\n      filters:\n      - branchMatch: \".*-argocd\"\n  template:\n  # ...\n```\n\n- `project`: Required name of the Bitbucket project\n- `repo`: Required name of the Bitbucket repository.\n- `api`: Required URL to access the Bitbucket REST API. For the example above, an API request would be made to `https://mycompany.bitbucket.org/rest/api/1.0/projects/myproject/repos/myrepository/pull-requests`\n- `branchMatch`: Optional regexp filter which should match the source branch name. This is an alternative to labels which are not supported by Bitbucket server.\n\nIf you want to access a private repository, you must also provide the credentials for Basic auth (this is the only auth supported currently):\n\\* `username`: The username to authenticate with. It only needs read access to the relevant repo.\n\\* `passwordRef`: A `Secret` name and key containing the password or personal access token to use for requests.\n\nIn case of Bitbucket App Token, go with `bearerToken` section.\n\\* `tokenRef`: A `Secret` name and key containing the app token to use for requests.\n\nIn case self-signed BitBucket Server certificates, the following options can be usefully:\n\\* `insecure`: By default (false) - Skip checking the validity of the SCM's certificate - useful for self-signed TLS certificates.\n\\* `caRef`: Optional `ConfigMap` name and key containing the BitBucket server certificates to trust - useful for self-signed TLS certificates. Possibly reference the ArgoCD CM holding the trusted certs.\n\n## Bitbucket Cloud\nFetch pull requests from a repo hosted on a Bitbucket Cloud.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    - pullRequest:\n        bitbucket:\n          # Workspace name where the repoistory is stored under. Required.\n          owner: myproject\n          # Repository slug. Required.\n          repo: myrepository\n          # URL of the Bitbucket Server. (optional) Will default to 'https://api.bitbucket.org/2.0'.\n          api: https://api.bitbucket.org/2.0\n          # Credentials for Basic authentication (App Password). Either basicAuth or bearerToken\n          # authentication is required to access private repositories\n          basicAuth:\n            # The username to authenticate with\n            username: myuser\n            # Reference to a Secret containing the password or personal access token.\n            passwordRef:\n              secretName: mypassword\n              key: password\n          # Credentials for Bearer Token (App Token) authentication. Either basicAuth or bearerToken\n          # authentication is required to access private repositories\n          bearerToken:\n            # Reference to a Secret containing the bearer token.\n            tokenRef:\n              secretName: repotoken\n              key: token\n        # Labels are not supported by Bitbucket Cloud, so filtering by label is not possible.\n        # Filter PRs using the source branch name. (optional)\n        filters:\n          - branchMatch: \".*-argocd\"\n  template:\n  # ...\n```\n\n- `owner`: Required name of the Bitbucket workspace\n- `repo`: Required name of the Bitbucket repository.\n- `api`: Optional URL to access the Bitbucket REST API. For the example above, an API request would be made to `https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pullrequests`. If not set, defaults to `https://api.bitbucket.org/2.0`\n- `branchMatch`: Optional regexp filter which should match the source branch name. This is an alternative to labels which are not supported by Bitbucket server.\n\nIf you want to access a private repository, Argo CD will need credentials to access repository in Bitbucket Cloud. You can use Bitbucket App Password (generated per user, with access to whole workspace), or Bitbucket App Token (generated per repository, with access limited to repository scope only). If both App Password and App Token are defined, App Token will be used.\n\n## Azure DevOps\nSpecify the organization, project and repository from which you want to fetch pull requests.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      azuredevops:\n        # Azure DevOps org to scan. Required.\n        organization: myorg\n        # Azure DevOps project name to scan. Required.\n        project: myproject\n        # Azure DevOps repo name to scan. Required.\n        repo: myrepository\n        # The Azure DevOps API URL to talk to. If blank, use https://dev.azure.com/.\n        api: https://dev.azure.com/\n        # Reference to a Secret containing an access token. (optional)\n        tokenRef:\n          secretName: azure-devops-token\n          key: token\n        # Labels is used to filter the PRs that you want to target. (optional)\n        labels:\n        - preview\n      requeueAfterSeconds: 1800\n  template:\n  # ...\n```\n\n- `organization`: Required name of the Azure DevOps organization.\n- `project`: Required name of the Azure DevOps project.\n- `repo`: Required name of the Azure DevOps repository.\n- `api`: If using self-hosted Azure DevOps Repos, the URL to access it. (Optional)\n- `tokenRef`: A `Secret` name and key containing the Azure DevOps access token to use for requests. If not specified, will make anonymous requests which have a lower rate limit and can only see public repositories. (Optional)\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request", "title": "Pull Request Generator", "description": "The Pull Request generator uses the API of an SCMaaS provider (GitHub, Gitea, or Bitbucket Server) to automatically discover open pull requests within a repository. This fits well with the style of building a test environment when you create a pull request.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 04:50:16", "type": "overview", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "title": "Pull Request Generator - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Pull-Request/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "baf80d93-9c77-49f5-8ba1-6f0ee5da5d0e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Pull Request Generator\"?\n\nAssistant: Here are some code examples:\n\n### Pull Request Generator Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - pullRequest:\n      # When using a Pull Request generator, the ApplicationSet controller polls every `requeueAfterSeconds` interval (defaulting to every 30 minutes) to detect changes.\n      requeueAfterSeconds: 1800\n      # See below for provider specific options.\n      github:\n        # ...\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request", "title": "Pull Request Generator", "description": "The Pull Request generator uses the API of an SCMaaS provider (GitHub, Gitea, or Bitbucket Server) to automatically discover open pull requests within a repository. This fits well with the style of building a test environment when you create a pull request.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 04:50:16", "type": "code_examples", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "title": "Pull Request Generator - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Pull-Request/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "baf80d93-9c77-49f5-8ba1-6f0ee5da5d0e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Pull Request Generator\"?\n\nAssistant: Here are the recommended best practices:\n\n• Know the security implications of PR generators in ApplicationSets.\n• Only admins may create ApplicationSets to avoid leaking Secrets, and only admins may create PRs if the `project` field of an ApplicationSet with a PR generator is templated, to avoid granting management of out-of-bounds resources.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request", "title": "Pull Request Generator", "description": "The Pull Request generator uses the API of an SCMaaS provider (GitHub, Gitea, or Bitbucket Server) to automatically discover open pull requests within a repository. This fits well with the style of building a test environment when you create a pull request.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 04:50:16", "type": "best_practices", "page_metadata": {"language": "en", "readthedocs-project-slug": "argo-cd", "title": "Pull Request Generator - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Pull-Request/", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-http-status": "200", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "scrapeId": "baf80d93-9c77-49f5-8ba1-6f0ee5da5d0e", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"SCM Provider Generator\"?\n\nAssistant: The SCM Provider generator uses the API of an SCMaaS provider (eg GitHub) to automatically discover repositories within an organization. This fits well with GitOps layout patterns that split microservices across many repositories.\n\nHere's a detailed explanation:\n\n\n## SCM Provider Generator\nThe SCM Provider generator uses the API of an SCMaaS provider (eg GitHub) to automatically discover repositories within an organization. This fits well with GitOps layout patterns that split microservices across many repositories.\n\n## GitHub\nThe GitHub mode uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.\n\n- `organization`: Required name of the GitHub organization to scan. If you have multiple organizations, use multiple generators.\n- `api`: If using GitHub Enterprise, the URL to access it.\n- `allBranches`: By default (false) the template will only be evaluated for the default branch of each repo. If this is true, every branch of every repository will be passed to the filters. If using this flag, you likely want to use a `branchMatch` filter.\n- `tokenRef`: A `Secret` name and key containing the GitHub access token to use for requests. If not specified, will make anonymous requests which have a lower rate limit and can only see public repositories.\n- `appSecretName`: A `Secret` name containing a GitHub App secret in [repo-creds format](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repository-credentials).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider", "title": "SCM Provider Generator", "description": "The SCM Provider generator uses the API of an SCMaaS provider (eg GitHub) to automatically discover repositories within an organization. This fits well with GitOps layout patterns that split microservices across many repositories.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 05:22:26", "type": "overview", "page_metadata": {"language": "en", "title": "SCM Provider Generator - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-SCM-Provider/", "scrapeId": "e16e01fd-6cb9-4ba9-8722-c2b62ab2d6b8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"SCM Provider Generator\"?\n\nAssistant: Here are some code examples:\n\n### SCM Provider Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: myapps\nspec:\n  generators:\n  - scmProvider:\n      cloneProtocol: ssh\n      github:\n        organization: myorg\n        api: https://git.example.com/\n        allBranches: true\n        tokenRef:\n          secretName: github-token\n          key: token\n        appSecretName: gh-app-repo-creds\n  template:\n  # ...\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider", "title": "SCM Provider Generator", "description": "The SCM Provider generator uses the API of an SCMaaS provider (eg GitHub) to automatically discover repositories within an organization. This fits well with GitOps layout patterns that split microservices across many repositories.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 05:22:26", "type": "code_examples", "page_metadata": {"language": "en", "title": "SCM Provider Generator - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-SCM-Provider/", "scrapeId": "e16e01fd-6cb9-4ba9-8722-c2b62ab2d6b8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"SCM Provider Generator\"?\n\nAssistant: Here are the recommended best practices:\n\n• Know the security implications of using SCM generators. Only admins may create ApplicationSets to avoid leaking Secrets, and only admins may create repos/branches if the project field of an ApplicationSet with an SCM generator is templated, to avoid granting management of out-of-bounds resources.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider", "title": "SCM Provider Generator", "description": "The SCM Provider generator uses the API of an SCMaaS provider (eg GitHub) to automatically discover repositories within an organization. This fits well with GitOps layout patterns that split microservices across many repositories.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 05:22:26", "type": "best_practices", "page_metadata": {"language": "en", "title": "SCM Provider Generator - Argo CD - Declarative GitOps CD for Kubernetes", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-SCM-Provider/", "scrapeId": "e16e01fd-6cb9-4ba9-8722-c2b62ab2d6b8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Understanding JSON Structure\"?\n\nAssistant: This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.\n\nHere's a detailed explanation:\n\n\n## Introduction to JSON\nJSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate.\n\n## JSON Syntax\nJSON syntax is derived from JavaScript object notation. It consists of key/value pairs, where keys are strings and values can be strings, numbers, objects, arrays, booleans, or null.\n\n## Data Types in JSON\nThe data types supported in JSON include:\n1. String\n2. Number\n3. Object\n4. Array\n5. Boolean\n6. Null\n\n## Best Practices\nWhen working with JSON, consider the following best practices:\n- Use consistent naming conventions for keys.\n- Keep the structure simple and avoid deeply nested objects.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 06:18:30", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Declarative Setup - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "724d8378-7efa-417e-b917-94e70c819ef8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Understanding JSON Structure\"?\n\nAssistant: Here are some code examples:\n\n### Basic JSON Example\n```yaml\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"isStudent\": false,\n  \"courses\": [\"Math\", \"Science\"]\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 06:18:30", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Declarative Setup - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "724d8378-7efa-417e-b917-94e70c819ef8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Understanding JSON Structure\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use consistent naming conventions for keys.\n• Keep the structure simple and avoid deeply nested objects.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 06:18:30", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "language": "en", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Declarative Setup - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "724d8378-7efa-417e-b917-94e70c819ef8", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"argocd-ssh-known-hosts-cm.yaml example\"?\n\nAssistant: An example of an argocd-ssh-known-hosts-cm.yaml file.\n\nHere's a detailed explanation:\n\n\n## argocd-ssh-known-hosts-cm.yaml example\nAn example of an argocd-ssh-known-hosts-cm.yaml file:\n\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/name: argocd-ssh-known-hosts-cm\n    app.kubernetes.io/part-of: argocd\n  name: argocd-ssh-known-hosts-cm\ndata:\n  ssh_known_hosts: |\n    # This file was automatically generated by hack/update-ssh-known-hosts.sh. DO NOT EDIT\n    [ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\n    [ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\n    [ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\n    bitbucket.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPIQmuzMBuKdWeF4+a2sjSSpBK0iqitSQ+5BM9KhpexuGt20JpTVM7u5BDZngncgrqDMbWdxMWWOGtZ9UgbqgZE=\n    bitbucket.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu+UUO\n    bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDQeJzhupRu0u0cdegZIa8e86EG2qOCsIsD1Xw0xSeiPDlCr7kq97NLmMbpKTX6Esc30NuoqEEHCuc7yWtwp8dI76EEEB1VqY9QJq6vk+aySyboD5QF61I/1WeTwu+deCbgKMGbUijeXhtfbxSxm6JwGrXrhBdofTsbKRUsrN1WoNgUa8uqN1Vx6WAJw1JHPhglEGGHea6QICwJOAr/6mrui/oB7pkaWKHj3z7d1IC4KWLtY47elvjbaTlkN04Kc/5LFEirorGYVbt15kAUlqGM65pk6ZBxtaO3+30LVlORZkxOh+LKL/BvbZ/iRNhItLqNyieoQj/uh/7Iv4uyH/cV/0b4WDSd3DptigWq84lJubb9t/DnZlrJazxyDCulTmKdOR7vs9gMTo+uoIrPSb8ScTtvw65+odKAlBj59dhnVp9zd7QUojOpXlL62Aw56U4oO+FALuevvMjiWeavKhJqlR7i5n9srYcrNV7ttmDw7kf/97P5zauIhxcjX+xHv4M=\n    github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\n    github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\n    github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\n    gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\n    gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\n    gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\n    ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n    vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml", "title": "argocd-ssh-known-hosts-cm.yaml example", "description": "An example of an argocd-ssh-known-hosts-cm.yaml file.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 06:41:21", "type": "overview", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/argocd-ssh-known-hosts-cm-yaml/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd-ssh-known-hosts-cm.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "df28a4a9-242a-4fcc-b60f-0d6701e42df0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"argocd-ssh-known-hosts-cm.yaml example\"?\n\nAssistant: Here are some code examples:\n\n### argocd-ssh-known-hosts-cm.yaml example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/name: argocd-ssh-known-hosts-cm\n    app.kubernetes.io/part-of: argocd\n  name: argocd-ssh-known-hosts-cm\ndata:\n  ssh_known_hosts: |\n    # This file was automatically generated by hack/update-ssh-known-hosts.sh. DO NOT EDIT\n    [ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\n    [ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\n    [ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\n    bitbucket.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPIQmuzMBuKdWeF4+a2sjSSpBK0iqitSQ+5BM9KhpexuGt20JpTVM7u5BDZngncgrqDMbWdxMWWOGtZ9UgbqgZE=\n    bitbucket.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu+UUO\n    bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDQeJzhupRu0u0cdegZIa8e86EG2qOCsIsD1Xw0xSeiPDlCr7kq97NLmMbpKTX6Esc30NuoqEEHCuc7yWtwp8dI76EEEB1VqY9QJq6vk+aySyboD5QF61I/1WeTwu+deCbgKMGbUijeXhtfbxSxm6JwGrXrhBdofTsbKRUsrN1WoNgUa8uqN1Vx6WAJw1JHPhglEGGHea6QICwJOAr/6mrui/oB7pkaWKHj3z7d1IC4KWLtY47elvjbaTlkN04Kc/5LFEirorGYVbt15kAUlqGM65pk6ZBxtaO3+30LVlORZkxOh+LKL/BvbZ/iRNhItLqNyieoQj/uh/7Iv4uyH/cV/0b4WDSd3DptigWq84lJubb9t/DnZlrJazxyDCulTmKdOR7vs9gMTo+uoIrPSb8ScTtvw65+odKAlBj59dhnVp9zd7QUojOpXlL62Aw56U4oO+FALuevvMjiWeavKhJqlR7i5n9srYcrNV7ttmDw7kf/97P5zauIhxcjX+xHv4M=\n    github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\n    github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\n    github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\n    gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\n    gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\n    gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\n    ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n    vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml", "title": "argocd-ssh-known-hosts-cm.yaml example", "description": "An example of an argocd-ssh-known-hosts-cm.yaml file.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 06:41:21", "type": "code_examples", "page_metadata": {"readthedocs-resolver-filename": "/operator-manual/argocd-ssh-known-hosts-cm-yaml/", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "title": "argocd-ssh-known-hosts-cm.yaml example - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "viewport": "width=device-width,initial-scale=1", "scrapeId": "df28a4a9-242a-4fcc-b60f-0d6701e42df0", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Matrix Generator\"?\n\nAssistant: The Matrix generator combines the parameters generated by two child generators, iterating through every combination of each generator's generated parameters.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe Matrix generator combines the parameters generated by two child generators, iterating through every combination of each generator's generated parameters.\n\nBy combining both generators parameters, to produce every possible combination, this allows you to gain the intrinsic properties of both generators. For example, a small subset of the many possible use cases include:\n\n- _SCM Provider Generator + Cluster Generator_: Scanning the repositories of a GitHub organization for application resources, and targeting those resources to all available clusters.\n- _Git File Generator + List Generator_: Providing a list of applications to deploy via configuration files, with optional configuration options, and deploying them to a fixed list of clusters.\n- _Git Directory Generator + Cluster Decision Resource Generator_: Locate application resources contained within folders of a Git repository, and deploy them to a list of clusters provided via an external custom resource.\n- And so on...\n\nAny set of generators may be used, with the combined values of those generators inserted into the `template` parameters, as usual.\n\n**Note**: If both child generators are Git generators, one or both of them must use the `pathParamPrefix` option to avoid conflicts when merging the child generators’ items.\n\n## Example: Git Directory generator + Cluster generator\nAs an example, imagine that we have two clusters:\n\n- A `staging` cluster (at `https://1.2.3.4`)\n- A `production` cluster (at `https://2.4.6.8`)\n\nAnd our application YAMLs are defined in a Git repository:\n\n- [Argo Workflows controller](https://github.com/argoproj/argo-cd/tree/master/applicationset/examples/git-generator-directory/cluster-addons/argo-workflows)\n- [Prometheus operator](https://github.com/argoproj/argo-cd/tree/master/applicationset/examples/git-generator-directory/cluster-addons/prometheus-operator)\n\nOur goal is to deploy both applications onto both clusters, and, more generally, in the future to automatically deploy new applications in the Git repository, and to new clusters defined within Argo CD, as well.\n\nFor this we will use the Matrix generator, with the Git and the Cluster as child generators:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-git\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    # matrix 'parent' generator\n    - matrix:\n        generators:\n          # git generator, 'child' #1\n          - git:\n              repoURL: https://github.com/argoproj/argo-cd.git\n              revision: HEAD\n              directories:\n                - path: applicationset/examples/matrix/cluster-addons/*\n          # cluster generator, 'child' #2\n          - clusters:\n              selector:\n                matchLabels:\n                  argocd.argoproj.io/secret-type: cluster\n  template:\n    metadata:\n      name: '{{.path.basename}}-{{.name}}'\n    spec:\n      project: '{{index .metadata.labels \"environment\"}}'\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: '{{.server}}'\n        namespace: '{{.path.basename}}'\n```\n\nFirst, the Git directory generator will scan the Git repository, discovering directories under the specified path. It discovers the argo-workflows and prometheus-operator applications, and produces two corresponding sets of parameters:\n\n```\n- path: /examples/git-generator-directory/cluster-addons/argo-workflows\n  path.basename: argo-workflows\n\n- path: /examples/git-generator-directory/cluster-addons/prometheus-operator\n  path.basename: prometheus-operator\n```\n\nNext, the Cluster generator scans the [set of clusters defined in Argo CD](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/), finds the staging and production cluster secrets, and produce two corresponding sets of parameters:\n\n```\n- name: staging\n  server: https://1.2.3.4\n\n- name: production\n  server: https://2.4.6.8\n```\n\nFinally, the Matrix generator will combine both sets of outputs, and produce:\n\n```\n- name: staging\n  server: https://1.2.3.4\n  path: /examples/git-generator-directory/cluster-addons/argo-workflows\n  path.basename: argo-workflows\n\n- name: staging\n  server: https://1.2.3.4\n  path: /examples/git-generator-directory/cluster-addons/prometheus-operator\n  path.basename: prometheus-operator\n\n- name: production\n  server: https://2.4.6.8\n  path: /examples/git-generator-directory/cluster-addons/argo-workflows\n  path.basename: argo-workflows\n\n- name: production\n  server: https://2.4.6.8\n  path: /examples/git-generator-directory/cluster-addons/prometheus-operator\n  path.basename: prometheus-operator\n```\n\n( _The full example can be found [here](https://github.com/argoproj/argo-cd/tree/master/applicationset/examples/matrix)._)\n\n## Using Parameters from one child generator in another child generator\nThe Matrix generator allows using the parameters generated by one child generator inside another child generator.\nBelow is an example that uses a git-files generator in conjunction with a cluster generator.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-git\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    # matrix 'parent' generator\n    - matrix:\n        generators:\n          # git generator, 'child' #1\n          - git:\n              repoURL: https://github.com/argoproj/applicationset.git\n              revision: HEAD\n              files:\n                - path: \"examples/git-generator-files-discovery/cluster-config/**/config.json\"\n          # cluster generator, 'child' #2\n          - clusters:\n              selector:\n                matchLabels:\n                  argocd.argoproj.io/secret-type: cluster\n                  kubernetes.io/environment: '{{.path.basename}}'\n  template:\n    metadata:\n      name: '{{.name}}-guestbook'\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/argoproj/applicationset.git\n        targetRevision: HEAD\n        path: \"examples/git-generator-files-discovery/apps/guestbook\"\n      destination:\n        server: '{{.server}}'\n        namespace: guestbook\n```\n\nHere is the corresponding folder structure for the git repository used by the git-files generator:\n\n```\n├── apps\n│   └── guestbook\n│       ├── guestbook-ui-deployment.yaml\n│       ├── guestbook-ui-svc.yaml\n│       └── kustomization.yaml\n├── cluster-config\n│   └── engineering\n│       ├── dev\n│       │   └── config.json\n│       └── prod\n│           └── config.json\n└── git-generator-files.yaml\n```\n\nIn the above example, the `{{.path.basename}}` parameters produced by the git-files generator will resolve to `dev` and `prod`.\nIn the 2nd child generator, the label selector with label `kubernetes.io/environment: {{.path.basename}}` will resolve with the values produced by the first child generator's parameters ( `kubernetes.io/environment: prod` and `kubernetes.io/environment: dev`).\n\nSo in the above example, clusters with the label `kubernetes.io/environment: prod` will have only prod-specific configuration (ie. `prod/config.json`) applied to it, wheres clusters with the label `kubernetes.io/environment: dev` will have only dev-specific configuration (ie. `dev/config.json`).\n\n## Overriding parameters from one child generator in another child generator\nThe Matrix Generator allows parameters with the same name to be defined in multiple child generators. This is useful, for example, to define default values for all stages in one generator and override them with stage-specific values in another generator. The example below generates a Helm-based application using a matrix generator with two git generators: the first provides stage-specific values (one directory per stage) and the second provides global values for all stages.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: parameter-override-example\nspec:\n  generators:\n    - matrix:\n        generators:\n          - git:\n              repoURL: https://github.com/example/values.git\n              revision: HEAD\n              files:\n                - path: \"**/stage.values.yaml\"\n          - git:\n               repoURL: https://github.com/example/values.git\n               revision: HEAD\n               files:\n                  - path: \"global.values.yaml\"\n  goTemplate: true\n  template:\n    metadata:\n      name: example\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/example/example-app.git\n        targetRevision: HEAD\n        path: .\n        helm:\n          values: |\n            {{ `{{ . | mustToPrettyJson }}` }}\n      destination:\n        server: in-cluster\n        namespace: default\n```\n\nGiven the following structure/content of the example/values repository:\n\n```\n├── test\n│   └── stage.values.yaml\n│         stageName: test\n│         cpuRequest: 100m\n│         debugEnabled: true\n├── staging\n│   └── stage.values.yaml\n│         stageName: staging\n├── production\n│   └── stage.values.yaml\n│         stageName: production\n│         memoryLimit: 512Mi\n│         debugEnabled: false\n└── global.values.yaml\n      cpuRequest: 200m\n      memoryLimit: 256Mi\n      debugEnabled: true\n```\n\nThe matrix generator above would yield the following results:\n\n```\n- stageName: test\n  cpuRequest: 100m\n  memoryLimit: 256Mi\n  debugEnabled: true\n\n- stageName: staging\n  cpuRequest: 200m\n  memoryLimit: 256Mi\n  debugEnabled: true\n\n- stageName: production\n  cpuRequest: 200m\n  memoryLimit: 512Mi\n  debugEnabled: false\n```\n\n## Example: Two Git Generators Using `pathParamPrefix`\nThe matrix generator will fail if its children produce results containing identical keys with differing values.\nThis poses a problem for matrix generators where both children are Git generators since they auto-populate `path`-related parameters in their outputs.\nTo avoid this problem, specify a `pathParamPrefix` on one or both of the child generators to avoid conflicting parameter keys in the output.\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: two-gits-with-path-param-prefix\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    - matrix:\n        generators:\n          # git file generator referencing files containing details about each\n          # app to be deployed (e.g., `appName`).\n          - git:\n              repoURL: https://github.com/some-org/some-repo.git\n              revision: HEAD\n              files:\n                - path: \"apps/*.json\"\n              pathParamPrefix: app\n          # git file generator referencing files containing details about\n          # locations to which each app should deploy (e.g., `region` and\n          # `clusterName`).\n          - git:\n              repoURL: https://github.com/some-org/some-repo.git\n              revision: HEAD\n              files:\n                - path: \"targets/{{.appName}}/*.json\"\n              pathParamPrefix: target\n  template: {} # ...\n```\n\nThen, given the following file structure/content:\n\n```\n├── apps\n│   ├── app-one.json\n│   │   { \"appName\": \"app-one\" }\n│   └── app-two.json\n│       { \"appName\": \"app-two\" }\n└── targets\n    ├── app-one\n    │   ├── east-cluster-one.json\n    │   │   { \"region\": \"east\", \"clusterName\": \"cluster-one\" }\n    │   └── east-cluster-two.json\n    │       { \"region\": \"east\", \"clusterName\": \"cluster-two\" }\n    └── app-two\n        ├── east-cluster-one.json\n        │   { \"region\": \"east\", \"clusterName\": \"cluster-one\" }\n        └── west-cluster-three.json\n            { \"region\": \"west\", \"clusterName\": \"cluster-three\" }\n```\n\n…the matrix generator above would yield the following results:\n\n```\n- appName: app-one\n  app.path: /apps\n  app.path.filename: app-one.json\n  # plus additional path-related parameters from the first child generator, all\n  # prefixed with \"app\".\n  region: east\n  clusterName: cluster-one\n  target.path: /targets/app-one\n  target.path.filename: east-cluster-one.json\n  # plus additional path-related parameters from the second child generator, all\n  # prefixed with \"target\".\n\n- appName: app-one\n  app.path: /apps\n  app.path.filename: app-one.json\n  region: east\n  clusterName: cluster-two\n  target.path: /targets/app-one\n  target.path.filename: east-cluster-two.json\n\n- appName: app-two\n  app.path: /apps\n  app.path.filename: app-two.json\n  region: east\n  clusterName: cluster-one\n  target.path: /targets/app-two\n  target.path.filename: east-cluster-one.json\n\n- appName: app-two\n  app.path: /apps\n  app.path.filename: app-two.json\n  region: west\n  clusterName: cluster-three\n  target.path: /targets/app-two\n  target.path.filename: west-cluster-three.json\n```\n\n## Restrictions\n1. The Matrix generator currently only supports combining the outputs of only two child generators (eg does not support generating combinations for 3 or more).\n\n2. You should specify only a single generator per array entry, eg this is not valid:\n\n```\n- matrix:\n    generators:\n    - list: # (...)\n      git: # (...)\n```\n   - While this _will_ be accepted by Kubernetes API validation, the controller will report an error on generation. Each generator should be specified in a separate array element, as in the examples above.\n\n3. The Matrix generator does not currently support [`template` overrides](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Template/#generator-templates) specified on child generators, eg this `template` will not be processed:\n\n```\n- matrix:\n    generators:\n      - list:\n          elements:\n            - # (...)\n          template: { } # Not processed\n```\n\n4. Combination-type generators (matrix or merge) can only be nested once. For example, this will not work:\n\n```\n- matrix:\n    generators:\n      - matrix:\n          generators:\n            - matrix:  # This third level is invalid.\n                generators:\n                  - list:\n                      elements:\n                        - # (...)\n```\n\n5. When using parameters from one child generator inside another child generator, the child generator that _consumes_ the parameters **must come after** the child generator that _produces_ the parameters.\nFor example, the below example would be invalid (cluster-generator must come after the git-files generator):\n\n```\n- matrix:\n    generators:\n      # cluster generator, 'child' #1\n      - clusters:\n          selector:\n            matchLabels:\n              argocd.argoproj.io/secret-type: cluster\n              kubernetes.io/environment: '{{.path.basename}}' # {{.path.basename}} is produced by git-files generator\n      # git generator, 'child' #2\n      - git:\n          repoURL: https://github.com/argoproj/applicationset.git\n          revision: HEAD\n          files:\n            - path: \"examples/git-generator-files-discovery/cluster-config/**/config.json\"\n```\n\n6. You cannot have both child generators consuming parameters from each another. In the example below, the cluster generator is consuming the `{{.path.basename}}` parameter produced by the git-files generator, whereas the git-files generator is consuming the `{{.name}}` parameter produced by the cluster generator. This will result in a circular dependency, which is invalid.\n\n```\n- matrix:\n    generators:\n      # cluster generator, 'child' #1\n      - clusters:\n          selector:\n            matchLabels:\n              argocd.argoproj.io/secret-type: cluster\n              kubernetes.io/environment: '{{.path.basename}}' # {{.path.basename}} is produced by git-files generator\n      # git generator, 'child' #2\n      - git:\n          repoURL: https://github.com/argoproj/applicationset.git\n          revision: HEAD\n          files:\n            - path: \"examples/git-generator-files-discovery/cluster-config/engineering/{{.name}}**/config.json\" # {{.name}} is produced by cluster generator\n```\n\n7. When using a Matrix generator nested inside another Matrix or Merge generator, [Post Selectors](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Post-Selector/) for this nested generator's generators will only be applied when enabled via `spec.applyNestedSelectors`. You may also need to enable this even if your Post Selectors are not within the nested matrix or Merge generator, but are instead a sibling of a nested Matrix or Merge generator.\n\n```\n- matrix:\n    generators:\n      - matrix:\n          generators:\n            - list\n                elements:\n                  - # (...)\n              selector: { } # Only applied when applyNestedSelectors is true\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix", "title": "Matrix Generator", "description": "The Matrix generator combines the parameters generated by two child generators, iterating through every combination of each generator's generated parameters.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 06:45:23", "type": "overview", "page_metadata": {"readthedocs-http-status": "200", "title": "Matrix Generator - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Matrix/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b6fd47da-620a-4932-859f-c672b85139fa", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Matrix Generator\"?\n\nAssistant: Here are some code examples:\n\n### Example: Git Directory generator + Cluster generator\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: cluster-git\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n    - matrix:\n        generators:\n          - git:\n              repoURL: https://github.com/argoproj/argo-cd.git\n              revision: HEAD\n              directories:\n                - path: applicationset/examples/matrix/cluster-addons/*\n          - clusters:\n              selector:\n                matchLabels:\n                  argocd.argoproj.io/secret-type: cluster\n  template:\n    metadata:\n      name: '{{.path.basename}}-{{.name}}'\n    spec:\n      project: '{{index .metadata.labels \"environment\"}}'\n      source:\n        repoURL: https://github.com/argoproj/argo-cd.git\n        targetRevision: HEAD\n        path: '{{.path.path}}'\n      destination:\n        server: '{{.server}}'\n        namespace: '{{.path.basename}}'\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix", "title": "Matrix Generator", "description": "The Matrix generator combines the parameters generated by two child generators, iterating through every combination of each generator's generated parameters.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 06:45:23", "type": "code_examples", "page_metadata": {"readthedocs-http-status": "200", "title": "Matrix Generator - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Matrix/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b6fd47da-620a-4932-859f-c672b85139fa", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Matrix Generator\"?\n\nAssistant: Here are the recommended best practices:\n\n• If both child generators are Git generators, one or both of them must use the `pathParamPrefix` option to avoid conflicts when merging the child generators’ items.\n• When using parameters from one child generator inside another child generator, the child generator that consumes the parameters must come after the child generator that produces the parameters.\n• You cannot have both child generators consuming parameters from each another to avoid circular dependencies.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix", "title": "Matrix Generator", "description": "The Matrix generator combines the parameters generated by two child generators, iterating through every combination of each generator's generated parameters.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 06:45:23", "type": "best_practices", "page_metadata": {"readthedocs-http-status": "200", "title": "Matrix Generator - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-version-slug": "stable", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "readthedocs-project-slug": "argo-cd", "readthedocs-resolver-filename": "/operator-manual/applicationset/Generators-Matrix/", "language": "en", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "viewport": "width=device-width,initial-scale=1", "scrapeId": "b6fd47da-620a-4932-859f-c672b85139fa", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Helm\"?\n\nAssistant: This page covers how to use Helm with Argo CD, including installation, configuration, and best practices.\n\nHere's a detailed explanation:\n\n\n## Declarative\nYou can install Helm charts through the UI, or in the declarative GitOps way.\n\nHelm is only used to inflate charts with `helm template`. The lifecycle of the application is handled by Argo CD instead of Helm.\nHere is an example:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: sealed-secrets\n  namespace: argocd\nspec:\n  project: default\n  source:\n    chart: sealed-secrets\n    repoURL: https://bitnami-labs.github.io/sealed-secrets\n    targetRevision: 1.16.1\n    helm:\n      releaseName: sealed-secrets\n  destination:\n    server: \"https://kubernetes.default.svc\"\n    namespace: kubeseal\n```\n\nAnother example using a public OCI helm chart:\n\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: nginx\nspec:\n  project: default\n  source:\n    chart: nginx\n    repoURL: registry-1.docker.io/bitnamicharts  # note: the oci:// syntax is not included.\n    targetRevision: 15.9.0\n  destination:\n    name: \"in-cluster\"\n    namespace: nginx\n```\n\nWhen using multiple ways to provide values\n\nOrder of precedence is `parameters > valuesObject > values > valueFiles > helm repository values.yaml` (see Here for a more detailed example)\n\nSee here for more info about how to configure private Helm repositories.\n\n## Values Files\nHelm has the ability to use a different, or even multiple \"values.yaml\" files to derive its parameters from. Alternate or multiple values file(s), can be specified using the `--values` flag. The flag can be repeated to support multiple values files:\n\n```\nargocd app set helm-guestbook --values values-production.yaml\n```\n\nNote\n\nBefore `v2.6` of Argo CD, Values files must be in the same git repository as the Helm chart. The files can be in a different location in which case it can be accessed using a relative path relative to the root directory of the Helm chart.\nAs of `v2.6`, values files can be sourced from a separate repository than the Helm chart by taking advantage of multiple sources for Applications.\n\nIn the declarative syntax:\n\n```\nsource:\n  helm:\n    valueFiles:\n    - values-production.yaml\n```\n\nIf Helm is passed a non-existing value file during template expansion, it will error out. Missing values files can be ignored (meaning, not passed to Helm) using the `--ignore-missing-value-files`. This can be particularly helpful to implement a default/override pattern with Application Sets.\n\nIn the declarative syntax:\n\n```\nsource:\n  helm:\n    valueFiles:\n    - values-common.yaml\n    - values-optional-override.yaml\n    ignoreMissingValueFiles: true\n```\n\n## Values\nArgo CD supports the equivalent of a values file directly in the Application manifest using the `source.helm.valuesObject` key.\n\n```\nsource:\n  helm:\n    valuesObject:\n      ingress:\n        enabled: true\n        path: /\n        hosts:\n          - mydomain.example.com\n        annotations:\n          kubernetes.io/ingress.class: nginx\n          kubernetes.io/tls-acme: \"true\"\n        labels: {}\n        tls:\n          - secretName: mydomain-tls\n            hosts:\n              - mydomain.example.com\n```\n\nAlternatively, values can be passed in as a string using the `source.helm.values` key.\n\n```\nsource:\n  helm:\n    values: |\n      ingress:\n        enabled: true\n        path: /\n        hosts:\n          - mydomain.example.com\n        annotations:\n          kubernetes.io/ingress.class: nginx\n          kubernetes.io/tls-acme: \"true\"\n        labels: {}\n        tls:\n          - secretName: mydomain-tls\n            hosts:\n              - mydomain.example.com\n```\n\n## Helm Parameters\nHelm has the ability to set parameter values, which override any values in a values.yaml. For example, `service.type` is a common parameter which is exposed in a Helm chart:\n\n```\nhelm template . --set service.type=LoadBalancer\n```\n\nSimilarly, Argo CD can override values in the values.yaml parameters using `argocd app set` command, in the form of `-p PARAM=VALUE`. For example:\n\n```\nargocd app set helm-guestbook -p service.type=LoadBalancer\n```\n\nIn the declarative syntax:\n\n```\nsource:\n  helm:\n    parameters:\n    - name: \"service.type\"\n      value: LoadBalancer\n```\n\n## Helm Value Precedence\nValues injections have the following order of precedence\n`parameters > valuesObject > values > valueFiles > helm repository values.yaml`\nOr rather\n\n```\n    lowest  -> valueFiles\n            -> values\n            -> valuesObject\n    highest -> parameters\n```\n\nso values/valuesObject trumps valueFiles, and parameters trump both.\n\nPrecedence of valueFiles themselves is the order they are defined in\n\n```\nif we have\n\nvalueFiles:\n  - values-file-2.yaml\n  - values-file-1.yaml\n\nthe last values-file i.e. values-file-1.yaml will trump the first\n```\n\nWhen multiple of the same key are found the last one wins i.e\n\n```\ne.g. if we only have values-file-1.yaml and it contains\n\nparam1: value1\nparam1: value3000\n\nwe get param1=value3000\n```\n\n```\nparameters:\n  - name: \"param1\"\n    value: value2\n  - name: \"param1\"\n    value: value1\n\nthe result will be param1=value1\n```\n\n```\nvalues: |\n  param1: value2\n  param1: value5\n\nthe result will be param1=value5\n```\n\nWhen valueFiles or values is used\n\nThe list of parameters seen in the ui is not what is used for resources, rather it is the values/valuesObject merged with parameters (see this issue incase it has been resolved)\nAs a workaround using parameters instead of values/valuesObject will provide a better overview of what will be used for resources.\n\n## Helm --set-file support\nThe `--set-file` argument to helm can be used with the following syntax on the cli:\n\n```\nargocd app set helm-guestbook --helm-set-file some.key=path/to/file.ext\n```\n\nor using the fileParameters for yaml:\n\n```\nsource:\n  helm:\n    fileParameters:\n      - name: some.key\n        path: path/to/file.ext\n```\n\n## Helm Release Name\nBy default, the Helm release name is equal to the Application name to which it belongs. Sometimes, especially on a centralised Argo CD, you may want to override that name, and it is possible with the `release-name` flag on the cli:\n\n```\nargocd app set helm-guestbook --release-name myRelease\n```\n\nor using the releaseName for yaml:\n\n```\nsource:\n    helm:\n      releaseName: myRelease\n```\n\nImportant notice on overriding the release name\n\nPlease note that overriding the Helm release name might cause problems when the chart you are deploying is using the `app.kubernetes.io/instance` label. Argo CD injects this label with the value of the Application name for tracking purposes. So when overriding the release name, the Application name will stop being equal to the release name. Because Argo CD will overwrite the label with the Application name it might cause some selectors on the resources to stop working. In order to avoid this we can configure Argo CD to use another label for tracking in the ArgoCD configmap argocd-cm.yaml - check the lines describing application.instanceLabelKey.\n\n## Helm Hooks\nHelm hooks are similar to Argo CD hooks. In Helm, a hook is any normal Kubernetes resource annotated with the `helm.sh/hook` annotation.\n\nArgo CD supports many (most?) Helm hooks by mapping the Helm annotations onto Argo CD's own hook annotations:\n\n| Helm Annotation | Notes |\n| --- | --- |\n| `helm.sh/hook: crd-install` | Supported as equivalent to `argocd.argoproj.io/hook: PreSync`. |\n| `helm.sh/hook: pre-delete` | Not supported. In Helm stable there are 3 cases used to clean up CRDs and 3 to clean-up jobs. |\n| `helm.sh/hook: pre-rollback` | Not supported. Never used in Helm stable. |\n| `helm.sh/hook: pre-install` | Supported as equivalent to `argocd.argoproj.io/hook: PreSync`. |\n| `helm.sh/hook: pre-upgrade` | Supported as equivalent to `argocd.argoproj.io/hook: PreSync`. |\n| `helm.sh/hook: post-upgrade` | Supported as equivalent to `argocd.argoproj.io/hook: PostSync`. |\n| `helm.sh/hook: post-install` | Supported as equivalent to `argocd.argoproj.io/hook: PostSync`. |\n| `helm.sh/hook: post-delete` | Supported as equivalent to `argocd.argoproj.io/hook: PostDelete`. |\n| `helm.sh/hook: post-rollback` | Not supported. Never used in Helm stable. |\n| `helm.sh/hook: test-success` | Not supported. No equivalent in Argo CD. |\n| `helm.sh/hook: test-failure` | Not supported. No equivalent in Argo CD. |\n| `helm.sh/hook-delete-policy` | Supported. See also `argocd.argoproj.io/hook-delete-policy`). |\n| `helm.sh/hook-delete-timeout` | Not supported. Never used in Helm stable |\n| `helm.sh/hook-weight` | Supported as equivalent to `argocd.argoproj.io/sync-wave`. |\n| `helm.sh/resource-policy: keep` | Supported as equivalent to `argocd.argoproj.io/sync-options: Delete=false`. |\n\nUnsupported hooks are ignored. In Argo CD, hooks are created by using `kubectl apply`, rather than `kubectl create`. This means that if the hook is named and already exists, it will not change unless you have annotated it with `before-hook-creation`.\n\nHelm hooks + ArgoCD hooks\n\nIf you define any Argo CD hooks, _all_ Helm hooks will be ignored.\n\n'install' vs 'upgrade' vs 'sync'\n\nArgo CD cannot know if it is running a first-time \"install\" or an \"upgrade\" - every operation is a \"sync'. This means that, by default, apps that have `pre-install` and `pre-upgrade` will have those hooks run at the same time.\n\n## Hook Tips\n- Make your hook idempotent.\n- Annotate `crd-install` with `hook-weight: \"-2\"` to make sure it runs to success before any install or upgrade hooks.\n- Annotate `pre-install` and `post-install` with `hook-weight: \"-1\"`. This will make sure it runs to success before any upgrade hooks.\n- Annotate `pre-upgrade` and `post-upgrade` with `hook-delete-policy: before-hook-creation` to make sure it runs on every sync.\n\nRead more about Argo hooks and Helm hooks.\n\n## Random Data\nHelm templating has the ability to generate random data during chart rendering via the `randAlphaNum` function. Many helm charts from the charts repository make use of this feature. For example, the following is the secret for the redis helm chart:\n\n```\ndata:\n  {{- if .Values.password }}\n  redis-password: {{ .Values.password | b64enc | quote }}\n  {{- else }}\n  redis-password: {{ randAlphaNum 10 | b64enc | quote }}\n  {{- end }}\n```\n\nThe Argo CD application controller periodically compares Git state against the live state, running the `helm template <CHART>` command to generate the helm manifests. Because the random value is regenerated every time the comparison is made, any application which makes use of the `randAlphaNum` function will always be in an `OutOfSync` state. This can be mitigated by explicitly setting a value in the values.yaml or using `argocd app set` command to override the value such that the value is stable between each comparison. For example:\n\n```\nargocd app set redis -p password=abc123\n```\n\n## Build Environment\nHelm apps have access to the standard build environment via substitution as parameters.\n\nE.g. via the CLI:\n\n```\nargocd app create APPNAME \\\n  --helm-set-string 'app=${ARGOCD_APP_NAME}'\n```\n\nOr via declarative syntax:\n\n```\n  spec:\n    source:\n      helm:\n        parameters:\n        - name: app\n          value: $ARGOCD_APP_NAME\n```\n\nIt's also possible to use build environment variables for the Helm values file path:\n\n```\n  spec:\n    source:\n      helm:\n        valueFiles:\n        - values.yaml\n        - myprotocol://somepath/$ARGOCD_APP_NAME/$ARGOCD_APP_REVISION\n```\n\n## Helm plugins\nArgo CD is un-opinionated on what cloud provider you use and what kind of Helm plugins you are using, that's why there are no plugins delivered with the ArgoCD image.\n\nBut sometimes you want to use a custom plugin. Perhaps you would like to use Google Cloud Storage or Amazon S3 storage to save the Helm charts, for example: https://github.com/hayorov/helm-gcs where you can use `gs://` protocol for Helm chart repository access.\nThere are two ways to install custom plugins; you can modify the ArgoCD container image, or you can use a Kubernetes initContainer.\n\n## Modifying the ArgoCD container image\nOne way to use this plugin is to prepare your own ArgoCD image where it is included.\n\nExample `Dockerfile`:\n\n```\nFROM argoproj/argocd:v1.5.7\n\nUSER root\nRUN apt-get update && \\\n    apt-get install -y \\\n        curl && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nUSER argocd\n\nARG GCS_PLUGIN_VERSION=\"0.3.5\"\nARG GCS_PLUGIN_REPO=\"https://github.com/hayorov/helm-gcs.git\"\n\nRUN helm plugin install ${GCS_PLUGIN_REPO} --version ${GCS_PLUGIN_VERSION}\n\nENV HELM_PLUGINS=\"/home/argocd/.local/share/helm/plugins/\"\n```\n\nYou have to remember about `HELM_PLUGINS` environment property - this is required for plugins to work correctly.\n\nAfter that you have to use your custom image for ArgoCD installation.\n\n## Using initContainers\nAnother option is to install Helm plugins via Kubernetes initContainers. Some users find this pattern preferable to maintaining their own version of the ArgoCD container image.\n\nBelow is an example of how to add Helm plugins when installing ArgoCD with the official ArgoCD helm chart:\n\n```\nrepoServer:\n  volumes:\n    - name: gcp-credentials\n      secret:\n        secretName: my-gcp-credentials\n  volumeMounts:\n    - name: gcp-credentials\n      mountPath: /gcp\n  env:\n    - name: HELM_CACHE_HOME\n      value: /helm-working-dir\n    - name: HELM_CONFIG_HOME\n      value: /helm-working-dir\n    - name: HELM_DATA_HOME\n      value: /helm-working-dir\n  initContainers:\n    - name: helm-gcp-authentication\n      image: alpine/helm:3.16.1\n      volumeMounts:\n        - name: helm-working-dir\n          mountPath: /helm-working-dir\n        - name: gcp-credentials\n          mountPath: /gcp\n      env:\n        - name: HELM_CACHE_HOME\n          value: /helm-working-dir\n        - name: HELM_CONFIG_HOME\n          value: /helm-working-dir\n        - name: HELM_DATA_HOME\n          value: /helm-working-dir\n      command: [ \"/bin/sh\", \"-c\" ]\n      args:\n        - apk --no-cache add curl;\n          helm plugin install https://github.com/hayorov/helm-gcs.git;\n          helm repo add my-gcs-repo gs://my-private-helm-gcs-repository;\n          chmod -R 777 $HELM_DATA_HOME;\n```\n\n## Helm Version\nArgo CD will assume that the Helm chart is v3 (even if the apiVersion field in the chart is Helm v2), unless v2 is explicitly specified within the Argo CD Application.\n\nIf needed, it is possible to specifically set the Helm version to template with by setting the `helm-version` flag on the cli (either v2 or v3):\n\n```\nargocd app set helm-guestbook --helm-version v3\n```\n\nOr using declarative syntax:\n\n```\nspec:\n  source:\n    helm:\n      version: v3\n```\n\n## Helm --pass-credentials\nHelm, starting with v3.6.1, prevents sending repository credentials to download charts that are being served from a different domain than the repository.\n\nIf needed, it is possible to opt into passing credentials for all domains by setting the `helm-pass-credentials` flag on the cli:\n\n```\nargocd app set helm-guestbook --helm-pass-credentials\n```\n\nOr using declarative syntax:\n\n```\nspec:\n  source:\n    helm:\n      passCredentials: true\n```\n\n## Helm --skip-crds\nHelm installs custom resource definitions in the `crds` folder by default if they are not existing.\nSee the CRD best practices for details.\n\nIf needed, it is possible to skip the CRD installation step with the `helm-skip-crds` flag on the cli:\n\n```\nargocd app set helm-guestbook --helm-skip-crds\n```\n\nOr using declarative syntax:\n\n```\nspec:\n  source:\n    helm:\n      skipCrds: true\n```\n\n## Helm --skip-schema-validation\nHelm validates the values.yaml file using a values.schema.json file. See Schema files for details.\n\nIf needed, it is possible to skip the schema validation step with the `helm-skip-schema-validation` flag on the cli:\n\n```\nargocd app set helm-guestbook --helm-skip-schema-validation\n```\n\nOr using declarative syntax:\n\n```\nspec:\n  source:\n    helm:\n      skipSchemaValidation: true\n```\n\n## Helm --skip-tests\nBy default, Helm includes test manifests when rendering templates. Argo CD currently skips manifests that include hooks not supported by Argo CD, including Helm test hooks. While this feature covers many testing use cases, it is not totally congruent with --skip-tests, so the --skip-tests option can be used.\n\nIf needed, it is possible to skip the test manifests installation step with the `helm-skip-tests` flag on the cli:\n\n```\nargocd app set helm-guestbook --helm-skip-tests\n```\n\nOr using declarative syntax:\n\n```\nspec:\n  source:\n    helm:\n      skipTests: true # or false\n```\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/helm", "title": "Helm", "description": "This page covers how to use Helm with Argo CD, including installation, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-02-28 06:54:37", "type": "overview", "page_metadata": {"title": "Helm - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/helm/", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "10b7aadc-0484-4c58-ac93-400012cdbaf4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/helm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/helm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Helm\"?\n\nAssistant: Here are some code examples:\n\n### Helm Application Example 1\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: sealed-secrets\n  namespace: argocd\nspec:\n  project: default\n  source:\n    chart: sealed-secrets\n    repoURL: https://bitnami-labs.github.io/sealed-secrets\n    targetRevision: 1.16.1\n    helm:\n      releaseName: sealed-secrets\n  destination:\n    server: \"https://kubernetes.default.svc\"\n    namespace: kubeseal\n\n```\n\n### Helm Application Example 2\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: nginx\nspec:\n  project: default\n  source:\n    chart: nginx\n    repoURL: registry-1.docker.io/bitnamicharts  # note: the oci:// syntax is not included.\n    targetRevision: 15.9.0\n  destination:\n    name: \"in-cluster\"\n    namespace: nginx\n\n```\n\n### Set Values Example\n```yaml\nargocd app set helm-guestbook --values values-production.yaml\n\n```\n\n### Values Object Example\n```yaml\nsource:\n  helm:\n    valuesObject:\n      ingress:\n        enabled: true\n        path: /\n        hosts:\n          - mydomain.example.com\n        annotations:\n          kubernetes.io/ingress.class: nginx\n          kubernetes.io/tls-acme: \"true\"\n        labels: {}\n        tls:\n          - secretName: mydomain-tls\n            hosts:\n              - mydomain.example.com\n\n```\n\n### Set Parameter Example\n```yaml\nargocd app set helm-guestbook -p service.type=LoadBalancer\n\n```\n\n### Helm Set File Example\n```yaml\nargocd app set helm-guestbook --helm-set-file some.key=path/to/file.ext\n\n```\n\n### Release Name Example\n```yaml\nargocd app set helm-guestbook --release-name myRelease\n\n```\n\n### Helm Version Example\n```yaml\nargocd app set helm-guestbook --helm-version v3\n\n```\n\n### Pass Credentials Example\n```yaml\nargocd app set helm-guestbook --helm-pass-credentials\n\n```\n\n### Skip CRDs Example\n```yaml\nargocd app set helm-guestbook --helm-skip-crds\n\n```\n\n### Skip Schema Validation Example\n```yaml\nargocd app set helm-guestbook --helm-skip-schema-validation\n\n```\n\n### Skip Tests Example\n```yaml\nargocd app set helm-guestbook --helm-skip-tests\n\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/helm", "title": "Helm", "description": "This page covers how to use Helm with Argo CD, including installation, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-02-28 06:54:37", "type": "code_examples", "page_metadata": {"title": "Helm - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/helm/", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "10b7aadc-0484-4c58-ac93-400012cdbaf4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/helm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/helm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Helm\"?\n\nAssistant: Here are the recommended best practices:\n\n• Order of precedence for values is `parameters > valuesObject > values > valueFiles > helm repository values.yaml`.\n• Make your hook idempotent.\n• Annotate `crd-install` with `hook-weight: \"-2\"` to ensure it runs to success before any install or upgrade hooks.\n• Annotate `pre-install` and `post-install` with `hook-weight: \"-1\"` to ensure it runs to success before any upgrade hooks.\n• Annotate `pre-upgrade` and `post-upgrade` with `hook-delete-policy: before-hook-creation` to ensure it runs on every sync.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/user-guide/helm", "title": "Helm", "description": "This page covers how to use Helm with Argo CD, including installation, configuration, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 19, "timestamp": "2025-02-28 06:54:37", "type": "best_practices", "page_metadata": {"title": "Helm - Argo CD - Declarative GitOps CD for Kubernetes", "readthedocs-project-slug": "argo-cd", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "readthedocs-resolver-filename": "/user-guide/helm/", "language": "en", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "scrapeId": "10b7aadc-0484-4c58-ac93-400012cdbaf4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/user-guide/helm", "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/helm/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"High Availability\"?\n\nAssistant: This page covers the high availability setup for Argo CD, including scaling considerations, settings for various components, and best practices for managing resources effectively.\n\nHere's a detailed explanation:\n\n\n## Scaling Up\n### argocd-repo-server\n**settings:**\nThe `argocd-repo-server` is responsible for cloning Git repository, keeping it up to date and generating manifests using the appropriate tool.\n\n- `argocd-repo-server` fork/exec config management tool to generate manifests. The fork can fail due to lack of memory or limit on the number of OS threads.\nThe `--parallelismlimit` flag controls how many manifests generations are running concurrently and helps avoid OOM kills.\n\n- the `argocd-repo-server` ensures that repository is in the clean state during the manifest generation using config management tools such as Kustomize, Helm or custom plugin. As a result Git repositories with multiple applications might affect repository server performance. Read [Monorepo Scaling Considerations](https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/#monorepo-scaling-considerations) for more information.\n\n- `argocd-repo-server` clones the repository into `/tmp` (or the path specified in the `TMPDIR` env variable). The Pod might run out of disk space if it has too many repositories or if the repositories have a lot of files. To avoid this problem mount a persistent volume.\n\n- `argocd-repo-server` uses `git ls-remote` to resolve ambiguous revisions such as `HEAD`, a branch or a tag name. This operation happens frequently and might fail. To avoid failed syncs use the `ARGOCD_GIT_ATTEMPTS_COUNT` environment variable to retry failed requests.\n\n- `argocd-repo-server` Every 3m (by default) Argo CD checks for changes to the app manifests. Argo CD assumes by default that manifests only change when the repo changes, so it caches the generated manifests (for 24h by default). With Kustomize remote bases, or in case a Helm chart gets changed without bumping its version number, the expected manifests can change even though the repo has not changed. By reducing the cache time, you can get the changes without waiting for 24h. Use `--repo-cache-expiration duration`, and we'd suggest in low volume environments you try '1h'. Bear in mind that this will negate the benefits of caching if set too low.\n\n- `argocd-repo-server` executes config management tools such as `helm` or `kustomize` and enforces a 90 second timeout. This timeout can be changed by using the `ARGOCD_EXEC_TIMEOUT` env variable. The value should be in the Go time duration string format, for example, `2m30s`.\n\n**metrics:**\n- `argocd_git_request_total` \\- Number of git requests. This metric provides two tags: `repo` \\- Git repo URL; `request_type` \\- `ls-remote` or `fetch`.\n- `ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM` \\- Is an environment variable that enables collecting RPC performance metrics. Enable it if you need to troubleshoot performance issues. Note: This metric is expensive to both query and store!\n\n## argocd-application-controller\n**settings:**\nThe `argocd-application-controller` uses `argocd-repo-server` to get generated manifests and Kubernetes API server to get the actual cluster state.\n\n- each controller replica uses two separate queues to process application reconciliation (milliseconds) and app syncing (seconds). The number of queue processors for each queue is controlled by `--status-processors` (20 by default) and `--operation-processors` (10 by default) flags. Increase the number of processors if your Argo CD instance manages too many applications. For 1000 application we use 50 for `--status-processors` and 25 for `--operation-processors`.\n\n- The manifest generation typically takes the most time during reconciliation. The duration of manifest generation is limited to make sure the controller refresh queue does not overflow. The app reconciliation fails with `Context deadline exceeded` error if the manifest generation is taking too much time. As a workaround increase the value of `--repo-server-timeout-seconds` and consider scaling up the `argocd-repo-server` deployment.\n\n- The controller uses Kubernetes watch APIs to maintain a lightweight Kubernetes cluster cache. This allows avoiding querying Kubernetes during app reconciliation and significantly improves performance. For performance reasons the controller monitors and caches only the preferred versions of a resource. During reconciliation, the controller might have to convert cached resources from the preferred version into a version of the resource stored in Git. If `kubectl convert` fails because the conversion is not supported then the controller falls back to Kubernetes API query which slows down reconciliation. In this case, we advise to use the preferred resource version in Git.\n\n- The controller polls Git every 3m by default. You can change this duration using the `timeout.reconciliation` and `timeout.reconciliation.jitter` setting in the `argocd-cm` ConfigMap. The value of the fields is a duration string e.g `60s`, `1m`, `1h` or `1d`.\n\n- If the controller is managing too many clusters and uses too much memory then you can shard clusters across multiple controller replicas. To enable sharding, increase the number of replicas in `argocd-application-controller` `StatefulSet` and repeat the number of replicas in the `ARGOCD_CONTROLLER_REPLICAS` environment variable. The strategic merge patch below demonstrates changes required to configure two controller replicas.\n\n```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: argocd-application-controller\nspec:\n  replicas: 2\n  template:\n    spec:\n      containers:\n      - name: argocd-application-controller\n        env:\n        - name: ARGOCD_CONTROLLER_REPLICAS\n          value: \"2\"\n```\n\n\\* In order to manually set the cluster's shard number, specify the optional `shard` property when creating a cluster. If not specified, it will be calculated on the fly by the application controller.\n\n- The shard distribution algorithm of the `argocd-application-controller` can be set by using the `--sharding-method` parameter. Supported sharding methods are : \\[legacy (default), round-robin, consistent-hashing\\]:\n- `legacy` mode uses an `uid` based distribution (non-uniform).\n- `round-robin` uses an equal distribution across all shards.\n- `consistent-hashing` uses the consistent hashing with bounded loads algorithm which tends to equal distribution and also reduces cluster or application reshuffling in case of additions or removals of shards or clusters.\n\nThe `--sharding-method` parameter can also be overridden by setting the key `controller.sharding.algorithm` in the `argocd-cmd-params-cm` `configMap` (preferably) or by setting the `ARGOCD_CONTROLLER_SHARDING_ALGORITHM` environment variable and by specifiying the same possible values.\n\nAlpha Features\nThe `round-robin` shard distribution algorithm is an experimental feature. Reshuffling is known to occur in certain scenarios with cluster removal. If the cluster at rank-0 is removed, reshuffling all clusters across shards will occur and may temporarily have negative performance impacts.\nThe `consistent-hashing` shard distribution algorithm is an experimental feature. Extensive benchmark have been documented on the [CNOE blog](https://cnoe.io/blog/argo-cd-application-scalability) with encouraging results. Community feedback is highly appreciated before moving this feature to a production ready state.\n\n- A cluster can be manually assigned and forced to a `shard` by patching the `shard` field in the cluster secret to contain the shard number, e.g.\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n    name: mycluster-secret\n    labels:\n      argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n    shard: 1\n    name: mycluster.example.com\n    server: https://mycluster.example.com\n    config: |\n      {\n        \"bearerToken\": \"<authentication token>\",\n        \"tlsClientConfig\": {\n          \"insecure\": false,\n          \"caData\": \"<base64 encoded certificate>\"\n        }\n      }\n```\n\n- `ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM` \\- environment variable that enables collecting RPC performance metrics. Enable it if you need to troubleshoot performance issues. Note: This metric is expensive to both query and store!\n\n- `ARGOCD_CLUSTER_CACHE_LIST_PAGE_BUFFER_SIZE` \\- environment variable controlling the number of pages the controller buffers in memory when performing a list operation against the K8s api server while syncing the cluster cache. This is useful when the cluster contains a large number of resources and cluster sync times exceed the default etcd compaction interval timeout. In this scenario, when attempting to sync the cluster cache, the application controller may throw an error that the `continue parameter is too old to display a consistent list result`. Setting a higher value for this environment variable configures the controller with a larger buffer in which to store pre-fetched pages which are processed asynchronously, increasing the likelihood that all pages have been pulled before the etcd compaction interval timeout expires. In the most extreme case, operators can set this value such that `ARGOCD_CLUSTER_CACHE_LIST_PAGE_SIZE * ARGOCD_CLUSTER_CACHE_LIST_PAGE_BUFFER_SIZE` exceeds the largest resource count (grouped by k8s api version, the granule of parallelism for list operations). In this case, all resources will be buffered in memory -- no api server request will be blocked by processing.\n\n- `ARGOCD_CLUSTER_CACHE_BATCH_EVENTS_PROCESSING` \\- environment variable that enables the controller to collect events for Kubernetes resources and process them in a batch. This is useful when the cluster contains a large number of resources, and the controller is overwhelmed by the number of events. The default value is `false`, which means that the controller processes events one by one.\n\n- `ARGOCD_CLUSTER_CACHE_EVENTS_PROCESSING_INTERVAL` \\- environment variable controlling the interval for processing events in a batch. The valid value is in the format of Go time duration string, e.g. `1ms`, `1s`, `1m`, `1h`. The default value is `100ms`. The variable is used only when `ARGOCD_CLUSTER_CACHE_BATCH_EVENTS_PROCESSING` is set to `true`.\n\n- `ARGOCD_APPLICATION_TREE_SHARD_SIZE` \\- environment variable controlling the max number of resources stored in one Redis key. Splitting application tree into multiple keys helps to reduce the amount of traffic between the controller and Redis. The default value is 0, which means that the application tree is stored in a single Redis key. The reasonable value is 100.\n\n**metrics**\n- `argocd_app_reconcile` \\- reports application reconciliation duration in seconds. Can be used to build reconciliation duration heat map to get a high-level reconciliation performance picture.\n- `argocd_app_k8s_request_total` \\- number of k8s requests per application. The number of fallback Kubernetes API queries - useful to identify which application has a resource with non-preferred version and causes performance issues.\n\n## argocd-server\nThe `argocd-server` is stateless and probably the least likely to cause issues. To ensure there is no downtime during upgrades, consider increasing the number of replicas to `3` or more and repeat the number in the `ARGOCD_API_SERVER_REPLICAS` environment variable. The strategic merge patch below demonstrates this.\n\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: argocd-server\nspec:\n  replicas: 3\n  template:\n    spec:\n      containers:\n      - name: argocd-server\n        env:\n        - name: ARGOCD_API_SERVER_REPLICAS\n          value: \"3\"\n```\n\n**settings:**\n- The `ARGOCD_API_SERVER_REPLICAS` environment variable is used to divide [the limit of concurrent login requests ( `ARGOCD_MAX_CONCURRENT_LOGIN_REQUESTS_COUNT`)](https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#failed-logins-rate-limiting) between each replica.\n- The `ARGOCD_GRPC_MAX_SIZE_MB` environment variable allows specifying the max size of the server response message in megabytes. The default value is 200. You might need to increase this for an Argo CD instance that manages 3000+ applications.\n\n## argocd-dex-server, argocd-redis\nThe `argocd-dex-server` uses an in-memory database, and two or more instances would have inconsistent data. `argocd-redis` is pre-configured with the understanding of only three total redis servers/sentinels.\n\n## Monorepo Scaling Considerations\nArgo CD repo server maintains one repository clone locally and uses it for application manifest generation. If the manifest generation requires to change a file in the local repository clone then only one concurrent manifest generation per server instance is allowed. This limitation might significantly slowdown Argo CD if you have a mono repository with multiple applications (50+).\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability", "title": "High Availability", "description": "This page covers the high availability setup for Argo CD, including scaling considerations, settings for various components, and best practices for managing resources effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 07:19:21", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/high_availability/", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "a49184c2-a7d2-4dd8-8560-c98518d6eec4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"High Availability\"?\n\nAssistant: Here are some code examples:\n\n### argocd-application-controller StatefulSet Example\n```yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: argocd-application-controller\nspec:\n  replicas: 2\n  template:\n    spec:\n      containers:\n      - name: argocd-application-controller\n        env:\n        - name: ARGOCD_CONTROLLER_REPLICAS\n          value: \"2\"\n```\n\n### argocd-server Deployment Example\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: argocd-server\nspec:\n  replicas: 3\n  template:\n    spec:\n      containers:\n      - name: argocd-server\n        env:\n        - name: ARGOCD_API_SERVER_REPLICAS\n          value: \"3\"\n```\n\n### Cluster Secret Example\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n    name: mycluster-secret\n    labels:\n      argocd.argoproj.io/secret-type: cluster\ntype: Opaque\nstringData:\n    shard: 1\n    name: mycluster.example.com\n    server: https://mycluster.example.com\n    config: |\n      {\n        \"bearerToken\": \"<authentication token>\",\n        \"tlsClientConfig\": {\n          \"insecure\": false,\n          \"caData\": \"<base64 encoded certificate>\"\n        }\n      }\n```\n\n### Application Manifest Paths Annotation Example\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: guestbook\n  namespace: argocd\n  annotations:\n    argocd.argoproj.io/manifest-generate-paths: .\nspec:\n  source:\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\n    targetRevision: HEAD\n    path: guestbook\n# ...\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability", "title": "High Availability", "description": "This page covers the high availability setup for Argo CD, including scaling considerations, settings for various components, and best practices for managing resources effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 07:19:21", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/high_availability/", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "a49184c2-a7d2-4dd8-8560-c98518d6eec4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"High Availability\"?\n\nAssistant: Here are the recommended best practices:\n\n• The HA installation will require at least three different nodes due to pod anti-affinity roles in the specs.\n• In low volume environments, try setting `--repo-cache-expiration duration` to '1h' to reduce cache time without waiting for 24h.\n• Consider increasing the number of replicas to `3` or more for `argocd-server` to ensure no downtime during upgrades.\n• Use persistent volumes for `argocd-repo-server` to avoid running out of disk space.\n• Enable `ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM` for troubleshooting performance issues, but be aware it is expensive to query and store.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability", "title": "High Availability", "description": "This page covers the high availability setup for Argo CD, including scaling considerations, settings for various components, and best practices for managing resources effectively.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 07:19:21", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "readthedocs-version-slug": "stable", "readthedocs-http-status": "200", "readthedocs-resolver-filename": "/operator-manual/high_availability/", "readthedocs-project-slug": "argo-cd", "language": "en", "title": "Overview - Argo CD - Declarative GitOps CD for Kubernetes", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "scrapeId": "a49184c2-a7d2-4dd8-8560-c98518d6eec4", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Understanding JSON Structure\"?\n\nAssistant: This page provides an overview of JSON structure, including its syntax, data types, and examples.\n\nHere's a detailed explanation:\n\n\n## Introduction to JSON\nJSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate.\n\n## JSON Syntax\nJSON syntax is derived from JavaScript object notation. It consists of key/value pairs, where keys are strings and values can be strings, numbers, objects, arrays, booleans, or null.\n\n## Data Types in JSON\nThe data types supported in JSON include:\n1. String\n2. Number\n3. Object\n4. Array\n5. Boolean\n6. Null\n\n## JSON Example\nHere is a simple example of a JSON object:\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"isStudent\": false,\n  \"courses\": [\"Math\", \"Science\"],\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Anytown\"\n  }\n}\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/decouple-application-sync-user-using-impersonation", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 09:25:26", "type": "overview", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Decouple Control plane and Application Sync privileges - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "bb893009-71ff-4b2c-a3e3-a2f2ecbe5826", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/decouple-application-sync-user-using-impersonation", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/decouple-application-sync-user-using-impersonation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Understanding JSON Structure\"?\n\nAssistant: Here are some code examples:\n\n### Basic JSON Example\n```yaml\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"isStudent\": false\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/decouple-application-sync-user-using-impersonation", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 09:25:26", "type": "code_examples", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Decouple Control plane and Application Sync privileges - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "bb893009-71ff-4b2c-a3e3-a2f2ecbe5826", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/decouple-application-sync-user-using-impersonation", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/decouple-application-sync-user-using-impersonation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Understanding JSON Structure\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always use double quotes for strings in JSON.\n• Keep your JSON data structured and organized for better readability.\n• Validate your JSON using online tools to avoid syntax errors.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/proposals/decouple-application-sync-user-using-impersonation", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 09:25:26", "type": "best_practices", "page_metadata": {"generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "viewport": "width=device-width,initial-scale=1", "title": "Decouple Control plane and Application Sync privileges - Argo CD - Declarative GitOps CD for Kubernetes", "language": "en", "scrapeId": "bb893009-71ff-4b2c-a3e3-a2f2ecbe5826", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/proposals/decouple-application-sync-user-using-impersonation", "url": "https://argo-cd.readthedocs.io/en/stable/proposals/decouple-application-sync-user-using-impersonation/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What is \"Understanding JSON Structure\"?\n\nAssistant: This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.\n\nHere's a detailed explanation:\n\n\n## Introduction to JSON\nJSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write, and easy for machines to parse and generate.\n\n## JSON Syntax\nJSON syntax is derived from JavaScript object notation. It consists of key/value pairs, where keys are strings and values can be strings, numbers, objects, arrays, booleans, or null.\n\n## Data Types in JSON\nThe data types supported in JSON include:\n1. String\n2. Number\n3. Object\n4. Array\n5. Boolean\n6. Null\n\n## Best Practices for JSON\nWhen working with JSON, consider the following best practices:\n- Use consistent naming conventions for keys.\n- Keep the structure simple and avoid deeply nested objects.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/catalog", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 10:30:12", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Triggers and Templates Catalog - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "61b6cba0-852c-427f-90d9-3bd68baaaca2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/catalog", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/catalog/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: Can you show me some code examples for \"Understanding JSON Structure\"?\n\nAssistant: Here are some code examples:\n\n### Basic JSON Example\n```yaml\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"isStudent\": false,\n  \"courses\": [\"Math\", \"Science\"]\n}\n```\n\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/catalog", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 10:30:12", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Triggers and Templates Catalog - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "61b6cba0-852c-427f-90d9-3bd68baaaca2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/catalog", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/catalog/", "statusCode": 200}}}
{"text": "System: You are a helpful Argo CD expert.\n\nUser: What are the best practices for \"Understanding JSON Structure\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use double quotes for keys and string values.\n• Avoid trailing commas in objects and arrays.\n", "metadata": {"source_url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/catalog", "title": "Understanding JSON Structure", "description": "This page provides an overview of JSON structure, including its syntax, data types, and best practices for usage.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 10:30:12", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "generator": "mkdocs-1.6.1, mkdocs-material-7.1.8", "favicon": "https://argo-cd.readthedocs.io/en/assets/favicon.png", "language": "en", "title": "Triggers and Templates Catalog - Argo CD - Declarative GitOps CD for Kubernetes", "scrapeId": "61b6cba0-852c-427f-90d9-3bd68baaaca2", "sourceURL": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/catalog", "url": "https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/catalog/", "statusCode": 200}}}
